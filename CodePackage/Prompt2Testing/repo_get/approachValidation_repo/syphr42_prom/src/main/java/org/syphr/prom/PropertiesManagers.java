/*
 * Copyright 2010-2012 Gregory P. Moyer
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.syphr.prom;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.atomic.AtomicInteger;

/**
 * This class provides builder methods to construct {@link PropertiesManager
 * managers} with various options.
 * 
 * @author Gregory P. Moyer
 */
public class PropertiesManagers
{
    /**
     * A list of executors created anonymously by this class. These will be
     * shutdown properly when the JVM shuts down.
     */
    private static final List<ExecutorService> AUTO_GENERATED_EXECUTORS = new ArrayList<ExecutorService>();
    static
    {
        Runtime.getRuntime().addShutdownHook(new Thread(new Runnable()
        {
            @Override
            public void run()
            {
                for (ExecutorService autoGeneratedExecutor : AUTO_GENERATED_EXECUTORS)
                {
                    autoGeneratedExecutor.shutdown();
                }
            }
        }, PropertiesManagers.class.getSimpleName() + " Shutdown Hook"));
    }

    /**
     * Build a new manager for the given properties file.
     * 
     * @param <T>
     *            the type of key used for the new manager
     * 
     * @param file
     *            the file system location of the properties represented by the
     *            new manager
     * @param defaultFile
     *            a file containing default values for the properties
     *            represented by the new manager
     * @param keyType
     *            the enumeration of keys in the properties file
     * @param retrievers
     *            a set of retrievers that will be used to resolve extra
     *            property references (i.e. if a nested value reference is found
     *            in a properties file and there is no property to match it, the
     *            given retrievers will be used)
     * @return a new manager
     * @throws IOException
     *             if there is an error while reading the default properties
     */
    public static <T extends Enum<T>> PropertiesManager<T> newManager(File file,
                                                                      File defaultFile,
                                                                      Class<T> keyType,
                                                                      final Retriever... retrievers) throws IOException
    {
        return newManager(file, defaultFile, keyType, createExecutor(), retrievers);
    }

    /**
     * Build a new manager for the given properties file.
     * 
     * @param <T>
     *            the type of key used for the new manager
     * 
     * @param file
     *            the file system location of the properties represented by the
     *            new manager
     * @param defaultFile
     *            a URL containing default values for the properties represented
     *            by the new manager
     * @param keyType
     *            the enumeration of keys in the properties file
     * @param retrievers
     *            a set of retrievers that will be used to resolve extra
     *            property references (i.e. if a nested value reference is found
     *            in a properties file and there is no property to match it, the
     *            given retrievers will be used)
     * @return a new manager
     * @throws IOException
     *             if there is an error while reading the default properties
     */
    public static <T extends Enum<T>> PropertiesManager<T> newManager(File file,
                                                                      URL defaultFile,
                                                                      Class<T> keyType,
                                                                      final Retriever... retrievers) throws IOException
    {
        return newManager(file, defaultFile, keyType, createExecutor(), retrievers);
    }

    /**
     * Build a new manager for the given properties file.
     * 
     * @param <T>
     *            the type of key used for the new manager
     * 
     * @param file
     *            the file system location of the properties represented by the
     *            new manager
     * @param defaultFile
     *            a file containing default values for the properties
     *            represented by the new manager
     * @param keyType
     *            the enumeration of keys in the properties file
     * @param executor
     *            a service to handle potentially long running tasks, such as
     *            interacting with the file system
     * @param retrievers
     *            a set of retrievers that will be used to resolve extra
     *            property references (i.e. if a nested value reference is found
     *            in a properties file and there is no property to match it, the
     *            given retrievers will be used)
     * @return a new manager
     * @throws IOException
     *             if there is an error while reading the default properties
     */
    public static <T extends Enum<T>> PropertiesManager<T> newManager(File file,
                                                                      File defaultFile,
                                                                      Class<T> keyType,
                                                                      ExecutorService executor,
                                                                      final Retriever... retrievers) throws IOException
    {
        return new PropertiesManager<T>(file,
                                        getProperties(defaultFile),
                                        getEnumTranslator(keyType),
                                        new DefaultEvaluator(),
                                        executor)
        {
            @Override
            protected Retriever createRetriever()
            {
                return new AddOnRetriever(true, super.createRetriever(), retrievers);
            }
        };
    }

    /**
     * Build a new manager for the given properties file.
     * 
     * @param <T>
     *            the type of key used for the new manager
     * 
     * @param file
     *            the file system location of the properties represented by the
     *            new manager
     * @param defaultFile
     *            a URL containing default values for the properties represented
     *            by the new manager
     * @param keyType
     *            the enumeration of keys in the properties file
     * @param executor
     *            a service to handle potentially long running tasks, such as
     *            interacting with the file system
     * @param retrievers
     *            a set of retrievers that will be used to resolve extra
     *            property references (i.e. if a nested value reference is found
     *            in a properties file and there is no property to match it, the
     *            given retrievers will be used)
     * @return a new manager
     * @throws IOException
     *             if there is an error while reading the default properties
     */
    public static <T extends Enum<T>> PropertiesManager<T> newManager(File file,
                                                                      URL defaultFile,
                                                                      Class<T> keyType,
                                                                      ExecutorService executor,
                                                                      final Retriever... retrievers) throws IOException
    {
        return new PropertiesManager<T>(file,
                                        getProperties(defaultFile),
                                        getEnumTranslator(keyType),
                                        new DefaultEvaluator(),
                                        executor)
        {
            @Override
            protected Retriever createRetriever()
            {
                return new AddOnRetriever(true, super.createRetriever(), retrievers);
            }
        };
    }

    /**
     * Build a new manager for the given properties file.
     * 
     * @param <T>
     *            the type of key used for the new manager
     * 
     * @param file
     *            the file system location of the properties represented here
     * @param keyType
     *            the enumeration of keys in the properties file
     * @param retrievers
     *            a set of retrievers that will be used to resolve extra
     *            property references (i.e. if a nested value reference is found
     *            in a properties file and there is no property to match it, the
     *            given retrievers will be used)
     * @return a new manager
     */
    public static <T extends Enum<T> & Defaultable> PropertiesManager<T> newManager(File file,
                                                                                    Class<T> keyType,
                                                                                    final Retriever... retrievers)
    {
        return newManager(file, keyType, createExecutor(), retrievers);
    }

    /**
     * Build a new manager for the given properties file.
     * 
     * @param <T>
     *            the type of key used for the new manager
     * 
     * @param file
     *            the file system location of the properties represented here
     * @param keyType
     *            the enumeration of keys in the properties file
     * @param executor
     *            a service to handle potentially long running tasks, such as
     *            interacting with the file system
     * @param retrievers
     *            a set of retrievers that will be used to resolve extra
     *            property references (i.e. if a nested value reference is found
     *            in a properties file and there is no property to match it, the
     *            given retrievers will be used)
     * @return a new manager
     */
    public static <T extends Enum<T> & Defaultable> PropertiesManager<T> newManager(File file,
                                                                                    Class<T> keyType,
                                                                                    ExecutorService executor,
                                                                                    final Retriever... retrievers)
    {
        return newManager(file, keyType, getEnumTranslator(keyType), createExecutor(), retrievers);
    }

    /**
     * Build a new manager for the given properties file.
     * 
     * @param <T>
     *            the type of key used for the new manager
     * 
     * @param file
     *            the file system location of the properties represented here
     * @param keyType
     *            the enumeration of keys in the properties file
     * @param translator
     *            the translator to convert between Enum names and property keys
     * @param executor
     *            a service to handle potentially long running tasks, such as
     *            interacting with the file system
     * @param retrievers
     *            a set of retrievers that will be used to resolve extra
     *            property references (i.e. if a nested value reference is found
     *            in a properties file and there is no property to match it, the
     *            given retrievers will be used)
     * @return a new manager
     */
    public static <T extends Enum<T> & Defaultable> PropertiesManager<T> newManager(File file,
                                                                                    Class<T> keyType,
                                                                                    Translator<T> translator,
                                                                                    ExecutorService executor,
                                                                                    final Retriever... retrievers)
    {
        return new PropertiesManager<T>(file,
                                        getDefaultProperties(keyType, translator),
                                        translator,
                                        new DefaultEvaluator(),
                                        executor)
        {
            @Override
            protected Retriever createRetriever()
            {
                return new AddOnRetriever(true, super.createRetriever(), retrievers);
            }
        };
    }

    /**
     * Build a new manager for the given properties file.
     * 
     * @param <T>
     *            the type of key used for the new manager
     * 
     * @param file
     *            the file system location of the properties represented here
     * @param keyType
     *            the enumeration of keys in the properties file
     * @param evaluator
     *            the evaluator to convert nested property references into fully
     *            evaluated strings
     * @param executor
     *            a service to handle potentially long running tasks, such as
     *            interacting with the file system
     * @param retrievers
     *            a set of retrievers that will be used to resolve extra
     *            property references (i.e. if a nested value reference is found
     *            in a properties file and there is no property to match it, the
     *            given retrievers will be used)
     * @return a new manager
     */
    public static <T extends Enum<T> & Defaultable> PropertiesManager<T> newManager(File file,
                                                                                    Class<T> keyType,
                                                                                    Evaluator evaluator,
                                                                                    ExecutorService executor,
                                                                                    final Retriever... retrievers)
    {
        Translator<T> translator = getEnumTranslator(keyType);

        return new PropertiesManager<T>(file,
                                        getDefaultProperties(keyType, translator),
                                        translator,
                                        evaluator,
                                        executor)
        {
            @Override
            protected Retriever createRetriever()
            {
                return new AddOnRetriever(true, super.createRetriever(), retrievers);
            }
        };
    }

    /**
     * Load values from a file.
     * 
     * @param file
     *            the file containing default values
     * @return a new properties instance loaded with values from the given file
     * @throws IOException
     *             if there is an error while reading the given file
     */
    public static Properties getProperties(File file) throws IOException
    {
        return getProperties(file.toURI().toURL());
    }

    /**
     * Load values from a URL.
     * 
     * @param url
     *            the URL containing default values
     * @return a new properties instance loaded with values from the given URL
     * @throws IOException
     *             if there is an error while reading the given URL
     */
    public static Properties getProperties(URL url) throws IOException
    {
        Properties properties = new Properties();

        InputStream inputStream = url.openStream();
        try
        {
            properties.load(inputStream);
        }
        finally
        {
            inputStream.close();
        }

        return properties;
    }

    /**
     * Retrieve a {@link Properties} instance that contains all of the default
     * values defined for the given {@link Defaultable}.
     * 
     * @param <T>
     *            the key type whose default values are requested
     * @param keyType
     *            the class that contains the appropriate defaults
     * @param translator
     *            a translator to convert between key instances and property
     *            names
     * @return a {@link Properties} instance containing the default values
     *         stored in the given key type
     */
    public static <T extends Enum<T> & Defaultable> Properties getDefaultProperties(Class<T> keyType,
                                                                                    Translator<T> translator)
    {
        Properties defaults = new Properties();

        for (T key : keyType.getEnumConstants())
        {
            defaults.setProperty(translator.getPropertyName(key), key.getDefaultValue());
        }

        return defaults;
    }

    /**
     * Create a translator that returns the string that it is given (no
     * translation).
     * 
     * @return the identity translator implementation
     */
    public static Translator<String> getIdentityTranslator()
    {
        return new Translator<String>()
        {
            @Override
            public String getPropertyName(String propertyKey)
            {
                return propertyKey;
            }

            @Override
            public String getPropertyKey(String propertyName)
            {
                return propertyName;
            }
        };
    }

    /**
     * Get a simple translator to convert back and forth between Enums and
     * property names (keys).
     * 
     * @param <T>
     *            the type of Enum representing the properties
     * @param enumType
     *            the Enum class used to represent the properties
     * @return the Enum translator implementation
     */
    public static <T extends Enum<T>> Translator<T> getEnumTranslator(final Class<T> enumType)
    {
        return new Translator<T>()
        {
            @Override
            public String getPropertyName(T propertyKey)
            {
                return propertyKey.name().toLowerCase().replace('_', '.');
            }

            @Override
            public T getPropertyKey(String propertyName)
            {
                String enumName = propertyName.toUpperCase().replace('.', '_');
                return Enum.valueOf(enumType, enumName);
            }
        };
    }

    /**
     * Create a new, default executor for use in a new {@link PropertiesManager}
     * . This executor uses cached, daemon threads so it will expand as
     * necessary, but it will not block JVM shutdown. The executor will be
     * automatically shutdown on JVM exit.
     * 
     * @return the newly created executor
     */
    public static ExecutorService createExecutor()
    {
        ExecutorService executor = Executors.newCachedThreadPool(new DaemonThreadFactory());
        AUTO_GENERATED_EXECUTORS.add(executor);

        return executor;
    }

    /**
     * Private constructor. This class implements a factory pattern to build
     * {@link PropertiesManager managers} and can not be instantiated.
     */
    private PropertiesManagers()
    {
        /*
         * Factory pattern.
         */
    }

    /**
     * This class is almost identical to the default thread factory in
     * {@link Executors}, except that the threads are marked as daemon so that
     * they do not prevent JVM shutdown and the threads are named uniquely to
     * this utility class.
     */
    private static class DaemonThreadFactory implements ThreadFactory
    {
        private static final AtomicInteger POOL_NUMBER = new AtomicInteger(1);

        private final ThreadGroup group;
        private final AtomicInteger threadNumber = new AtomicInteger(1);
        private final String namePrefix;

        public DaemonThreadFactory()
        {
            SecurityManager s = System.getSecurityManager();
            group = (s != null) ? s.getThreadGroup() : Thread.currentThread().getThreadGroup();
            namePrefix = PropertiesManagers.class.getSimpleName()
                    + " Thread Pool "
                    + POOL_NUMBER.getAndIncrement()
                    + ", Thread ";
        }

        @Override
        public Thread newThread(Runnable r)
        {
            Thread t = new Thread(group, r, namePrefix + threadNumber.getAndIncrement(), 0);
            if (!t.isDaemon())
            {
                t.setDaemon(true);
            }
            if (t.getPriority() != Thread.NORM_PRIORITY)
            {
                t.setPriority(Thread.NORM_PRIORITY);
            }

            return t;
        }
    }

    /**
     * Retrieve values from optional additional retrievers before or after
     * trying the base retriever. This is useful for allowing special property
     * sets to be resolved within a properties file (such as Java system
     * properties or Ant properties).
     * 
     * @see SystemPropertiesRetriever
     */
    private static class AddOnRetriever implements Retriever
    {
        private final boolean baseFirst;
        private final Retriever base;
        private final Retriever[] addons;

        public AddOnRetriever(boolean baseFirst, Retriever base, Retriever... addons)
        {
            this.baseFirst = baseFirst;
            this.base = base;
            this.addons = addons;
        }

        @Override
        public String retrieve(String name)
        {
            if (baseFirst)
            {
                String value = base.retrieve(name);
                if (value != null)
                {
                    return value;
                }
            }

            for (Retriever addon : addons)
            {
                String value = addon.retrieve(name);
                if (value != null)
                {
                    return value;
                }
            }

            if (!baseFirst)
            {
                String value = base.retrieve(name);
                if (value != null)
                {
                    return value;
                }
            }

            return null;
        }
    }
}
