[
    {
        "original_path": "alexcojocaru_elasticsearch-maven-plugin###alexcojocaru_elasticsearch-maven-plugin/src/test/java/com/github/alexcojocaru/mojo/elasticsearch/v2/step/BootstrapClusterStepTest###testParseMapCommand",
        "generated_path": "BootstrapClusterStep_parseMapCommand.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.github.alexcojocaru.mojo.elasticsearch.v2.step;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.github.alexcojocaru.mojo.elasticsearch.v2.ClusterConfiguration;\nimport com.github.alexcojocaru.mojo.elasticsearch.v2.client.ElasticsearchClient;\nimport com.github.alexcojocaru.mojo.elasticsearch.v2.client.ElasticsearchCommand;\nimport com.github.alexcojocaru.mojo.elasticsearch.v2.step.BootstrapClusterStep;\nimport java.nio.file.Path;\nimport java.util.HashMap;\nimport org.apache.maven.plugin.logging.Log;\nimport org.apache.maven.plugin.logging.SystemStreamLog;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.mock.java.io.MockFile;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class BootstrapClusterStep_parseMapCommand extends BootstrapClusterStep_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void BootstrapClusterStep_parseMapCommand() throws Throwable {\n    BootstrapClusterStep bootstrapClusterStep0 = new BootstrapClusterStep();\n    HashMap<String, Object> hashMap0 = new HashMap<String, Object>();\n    // Undeclared exception!\n    try {\n        bootstrapClusterStep0.parseMapCommand(hashMap0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        //\n        // no message in exception (getMessage() returned null)\n        //\n        verifyException(\"com.github.alexcojocaru.mojo.elasticsearch.v2.client.ElasticsearchCommand$RequestMethod\", e);\n    }\n}\n}"
    },
    {
        "original_path": "eBay_cors-filter###eBay_cors-filter/src/test/java/org/ebaysf/web/cors/CORSFilterTest###testJoin",
        "generated_path": "CORSFilter_join.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.ebaysf.web.cors;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.security.Principal;\nimport java.util.Collection;\nimport java.util.Enumeration;\nimport java.util.LinkedList;\nimport java.util.Locale;\nimport java.util.Map;\nimport javax.servlet.FilterChain;\nimport javax.servlet.FilterConfig;\nimport javax.servlet.RequestDispatcher;\nimport javax.servlet.ServletException;\nimport javax.servlet.ServletRequest;\nimport javax.servlet.ServletRequestWrapper;\nimport javax.servlet.ServletResponse;\nimport javax.servlet.ServletResponseWrapper;\nimport javax.servlet.http.Cookie;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletRequestWrapper;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpServletResponseWrapper;\nimport javax.servlet.http.HttpSession;\nimport org.ebaysf.web.cors.CORSFilter;\nimport org.ebaysf.web.cors.MockFilterChain;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class CORSFilter_join extends CORSFilter_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    String string0 = CORSFilter.join((Collection<String>) null, \"C|u`@LD\");\n    assertNull(string0);\n    CORSFilter cORSFilter0 = new CORSFilter();\n    assertNotNull(cORSFilter0);\n    assertFalse(cORSFilter0.isAnyOriginAllowed());\n    assertEquals(0L, cORSFilter0.getPreflightMaxAge());\n    assertFalse(cORSFilter0.isLoggingEnabled());\n    assertFalse(cORSFilter0.isSupportsCredentials());\n    HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());\n    doReturn((String) null).when(httpServletRequest0).getProtocol();\n    doReturn((String) null).when(httpServletRequest0).getScheme();\n    doReturn((String) null).when(httpServletRequest0).getServerName();\n    doReturn(0).when(httpServletRequest0).getServerPort();\n    HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);\n    assertNotNull(httpServletRequestWrapper0);\n    String string1 = httpServletRequestWrapper0.getProtocol();\n    assertNull(string1);\n    ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(httpServletRequestWrapper0);\n    assertNotNull(servletRequestWrapper0);\n    String string2 = servletRequestWrapper0.getServerName();\n    assertNull(string2);\n    String string3 = servletRequestWrapper0.getScheme();\n    assertNull(string3);\n    servletRequestWrapper0.removeAttribute(\":k\");\n    int int0 = servletRequestWrapper0.getServerPort();\n    assertEquals(0, int0);\n    httpServletRequestWrapper0.setRequest(servletRequestWrapper0);\n    // Undeclared exception!\n    try {\n        cORSFilter0.checkRequestType(httpServletRequestWrapper0);\n        fail(\"Expecting exception: ClassCastException\");\n    } catch (ClassCastException e) {\n        //\n        // no message in exception (getMessage() returned null)\n        //\n    }\n}\n}"
    },
    {
        "original_path": "Wikidata_Wikidata-Toolkit###Wikidata_Wikidata-Toolkit/wdtk-wikibaseapi/src/test/java/org/wikidata/wdtk/wikibaseapi/OAuthApiConnectionTest###testLogout",
        "generated_path": "OAuthApiConnection_logout.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.wikidata.wdtk.wikibaseapi;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.io.IOException;\nimport java.time.ZoneId;\nimport java.util.HashMap;\nimport java.util.Map;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport org.wikidata.wdtk.wikibaseapi.OAuthApiConnection;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class OAuthApiConnection_logout extends OAuthApiConnection_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    OAuthApiConnection oAuthApiConnection0 = new OAuthApiConnection(\"https://commons.wikimedia.org/w/api.php\", \"https://commons.wikimedia.org/w/api.php\", \"KH5?4^O\u007f<ka+$+?\", \"\", \"\");\n    assertTrue(oAuthApiConnection0.isLoggedIn());\n    oAuthApiConnection0.logout();\n    oAuthApiConnection0.getCurrentUser();\n    assertFalse(oAuthApiConnection0.isLoggedIn());\n}\n}"
    },
    {
        "original_path": "Wikidata_Wikidata-Toolkit###Wikidata_Wikidata-Toolkit/wdtk-wikibaseapi/src/test/java/org/wikidata/wdtk/wikibaseapi/BasicApiConnectionTest###testConfirmClientLogin",
        "generated_path": "BasicApiConnection_confirmClientLogin.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.wikidata.wdtk.wikibaseapi;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.net.HttpCookie;\nimport java.time.ZoneId;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Stack;\nimport java.util.Vector;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport org.wikidata.wdtk.wikibaseapi.BasicApiConnection;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class BasicApiConnection_confirmClientLogin extends BasicApiConnection_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    BasicApiConnection basicApiConnection0 = BasicApiConnection.getWikimediaCommonsApiConnection();\n    // Undeclared exception!\n    try {\n        basicApiConnection0.confirmClientLogin(\"&/u\", (String) null, \")xpeHq7h\u007fJ}}HD\");\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        //\n        // no message in exception (getMessage() returned null)\n        //\n    }\n}\n}"
    },
    {
        "original_path": "Wikidata_Wikidata-Toolkit###Wikidata_Wikidata-Toolkit/wdtk-wikibaseapi/src/test/java/org/wikidata/wdtk/wikibaseapi/WbSearchEntitiesActionTest###testWbSearchEntities",
        "generated_path": "WbSearchEntitiesAction_wbSearchEntities.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.wikidata.wdtk.wikibaseapi;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.fasterxml.jackson.databind.DeserializationConfig;\nimport com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;\nimport java.util.Map;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.Future;\nimport java.util.concurrent.TimeUnit;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport org.wikidata.wdtk.wikibaseapi.ApiConnection;\nimport org.wikidata.wdtk.wikibaseapi.BasicApiConnection;\nimport org.wikidata.wdtk.wikibaseapi.OAuthApiConnection;\nimport org.wikidata.wdtk.wikibaseapi.WbGetEntitiesSearchData;\nimport org.wikidata.wdtk.wikibaseapi.WbSearchEntitiesAction;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class WbSearchEntitiesAction_wbSearchEntities extends WbSearchEntitiesAction_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    BasicApiConnection basicApiConnection0 = new BasicApiConnection((String) null);\n    WbSearchEntitiesAction wbSearchEntitiesAction0 = new WbSearchEntitiesAction(basicApiConnection0, \"https://commons.wikimedia.org/w/api.php\");\n    Long long0 = new Long((-1L));\n    // Undeclared exception!\n    try {\n        wbSearchEntitiesAction0.wbSearchEntities(\"org.wikidata.wdtk.wikibaseapi.WbSearchEntitiesAction\", \"EXPRESSION\", (Boolean) null, \"\", long0, long0, \"https://commons.wikimedia.org/w/api.php\");\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n    }\n}\n}"
    },
    {
        "original_path": "Wikidata_Wikidata-Toolkit###Wikidata_Wikidata-Toolkit/wdtk-datamodel/src/test/java/org/wikidata/wdtk/datamodel/helpers/TermedDocumentUpdateBuilderTest###testForBaseRevisionId",
        "generated_path": "TermedDocumentUpdateBuilder_forBaseRevisionId.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.wikidata.wdtk.datamodel.helpers;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.util.HashMap;\nimport java.util.LinkedHashSet;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport org.wikidata.wdtk.datamodel.helpers.DatamodelConverterTest;\nimport org.wikidata.wdtk.datamodel.helpers.ItemUpdateBuilder;\nimport org.wikidata.wdtk.datamodel.helpers.TermedDocumentUpdateBuilder;\nimport org.wikidata.wdtk.datamodel.implementation.AliasUpdateImpl;\nimport org.wikidata.wdtk.datamodel.implementation.DataObjectFactoryImpl;\nimport org.wikidata.wdtk.datamodel.implementation.ItemDocumentImpl;\nimport org.wikidata.wdtk.datamodel.implementation.ItemUpdateImpl;\nimport org.wikidata.wdtk.datamodel.implementation.StatementImpl;\nimport org.wikidata.wdtk.datamodel.implementation.StatementUpdateImpl;\nimport org.wikidata.wdtk.datamodel.implementation.TermUpdateImpl;\nimport org.wikidata.wdtk.datamodel.interfaces.AliasUpdate;\nimport org.wikidata.wdtk.datamodel.interfaces.EntityIdValue;\nimport org.wikidata.wdtk.datamodel.interfaces.FormIdValue;\nimport org.wikidata.wdtk.datamodel.interfaces.ItemIdValue;\nimport org.wikidata.wdtk.datamodel.interfaces.MonolingualTextValue;\nimport org.wikidata.wdtk.datamodel.interfaces.PropertyIdValue;\nimport org.wikidata.wdtk.datamodel.interfaces.SiteLink;\nimport org.wikidata.wdtk.datamodel.interfaces.StatementGroup;\nimport org.wikidata.wdtk.datamodel.interfaces.StatementUpdate;\nimport org.wikidata.wdtk.datamodel.interfaces.TermUpdate;\nimport org.wikidata.wdtk.datamodel.interfaces.TermedStatementDocument;\nimport org.wikidata.wdtk.datamodel.interfaces.TermedStatementDocumentUpdate;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class TermedDocumentUpdateBuilder_forBaseRevisionId extends TermedDocumentUpdateBuilder_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    DatamodelConverterTest.BrokenItemIdValue datamodelConverterTest_BrokenItemIdValue0 = new DatamodelConverterTest.BrokenItemIdValue();\n    ItemUpdateBuilder itemUpdateBuilder0 = (ItemUpdateBuilder) TermedDocumentUpdateBuilder.forBaseRevisionId(datamodelConverterTest_BrokenItemIdValue0, 3459L);\n    ItemUpdateImpl itemUpdateImpl0 = (ItemUpdateImpl) itemUpdateBuilder0.build();\n    itemUpdateBuilder0.append(itemUpdateImpl0);\n    assertEquals(3459L, itemUpdateImpl0.getBaseRevisionId());\n}\n}"
    },
    {
        "original_path": "Wikidata_Wikidata-Toolkit###Wikidata_Wikidata-Toolkit/wdtk-datamodel/src/test/java/org/wikidata/wdtk/datamodel/implementation/LexemeDocumentImplTest###testWithForm",
        "generated_path": "LexemeDocumentImpl_withForm.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.wikidata.wdtk.datamodel.implementation;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.time.ZoneId;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.Stack;\nimport java.util.Vector;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport org.wikidata.wdtk.datamodel.implementation.AliasUpdateImpl;\nimport org.wikidata.wdtk.datamodel.implementation.DataObjectFactoryImpl;\nimport org.wikidata.wdtk.datamodel.implementation.FormDocumentImpl;\nimport org.wikidata.wdtk.datamodel.implementation.LabeledStatementDocumentImpl;\nimport org.wikidata.wdtk.datamodel.implementation.LexemeDocumentImpl;\nimport org.wikidata.wdtk.datamodel.implementation.LexemeUpdateImpl;\nimport org.wikidata.wdtk.datamodel.implementation.MonolingualTextValueImpl;\nimport org.wikidata.wdtk.datamodel.implementation.SiteLinkImpl;\nimport org.wikidata.wdtk.datamodel.implementation.SnakImpl;\nimport org.wikidata.wdtk.datamodel.implementation.StatementImpl;\nimport org.wikidata.wdtk.datamodel.implementation.TermImpl;\nimport org.wikidata.wdtk.datamodel.implementation.TermUpdateImpl;\nimport org.wikidata.wdtk.datamodel.implementation.ValueSnakImpl;\nimport org.wikidata.wdtk.datamodel.interfaces.FormDocument;\nimport org.wikidata.wdtk.datamodel.interfaces.FormIdValue;\nimport org.wikidata.wdtk.datamodel.interfaces.ItemIdValue;\nimport org.wikidata.wdtk.datamodel.interfaces.LexemeDocument;\nimport org.wikidata.wdtk.datamodel.interfaces.LexemeIdValue;\nimport org.wikidata.wdtk.datamodel.interfaces.MonolingualTextValue;\nimport org.wikidata.wdtk.datamodel.interfaces.PropertyIdValue;\nimport org.wikidata.wdtk.datamodel.interfaces.Reference;\nimport org.wikidata.wdtk.datamodel.interfaces.SenseDocument;\nimport org.wikidata.wdtk.datamodel.interfaces.SenseIdValue;\nimport org.wikidata.wdtk.datamodel.interfaces.Statement;\nimport org.wikidata.wdtk.datamodel.interfaces.StatementGroup;\nimport org.wikidata.wdtk.datamodel.interfaces.StatementRank;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class LexemeDocumentImpl_withForm extends LexemeDocumentImpl_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    LexemeIdValue lexemeIdValue0 = LexemeIdValue.NULL;\n    ItemIdValue itemIdValue0 = ItemIdValue.NULL;\n    Stack<MonolingualTextValue> stack0 = new Stack<MonolingualTextValue>();\n    ArrayList<StatementGroup> arrayList0 = new ArrayList<StatementGroup>();\n    LinkedList<FormDocument> linkedList0 = new LinkedList<FormDocument>();\n    Vector<SenseDocument> vector0 = new Vector<SenseDocument>();\n    LexemeDocumentImpl lexemeDocumentImpl0 = new LexemeDocumentImpl(lexemeIdValue0, itemIdValue0, itemIdValue0, stack0, arrayList0, linkedList0, vector0, (-12L));\n    FormIdValue formIdValue0 = FormIdValue.NULL;\n    ArrayList<ItemIdValue> arrayList1 = new ArrayList<ItemIdValue>();\n    FormDocumentImpl formDocumentImpl0 = new FormDocumentImpl(formIdValue0, stack0, arrayList1, arrayList0, 0L);\n    LexemeDocument lexemeDocument0 = lexemeDocumentImpl0.withForm(formDocumentImpl0);\n    assertFalse(lexemeDocument0.equals((Object) lexemeDocumentImpl0));\n    assertEquals((-12L), lexemeDocument0.getRevisionId());\n}\n}"
    },
    {
        "original_path": "Wikidata_Wikidata-Toolkit###Wikidata_Wikidata-Toolkit/wdtk-datamodel/src/test/java/org/wikidata/wdtk/datamodel/implementation/LexemeDocumentImplTest###testWithSense",
        "generated_path": "LexemeDocumentImpl_withSense.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.wikidata.wdtk.datamodel.implementation;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.time.ZoneId;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.Stack;\nimport java.util.Vector;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport org.wikidata.wdtk.datamodel.implementation.AliasUpdateImpl;\nimport org.wikidata.wdtk.datamodel.implementation.DataObjectFactoryImpl;\nimport org.wikidata.wdtk.datamodel.implementation.FormDocumentImpl;\nimport org.wikidata.wdtk.datamodel.implementation.LabeledStatementDocumentImpl;\nimport org.wikidata.wdtk.datamodel.implementation.LexemeDocumentImpl;\nimport org.wikidata.wdtk.datamodel.implementation.LexemeUpdateImpl;\nimport org.wikidata.wdtk.datamodel.implementation.MonolingualTextValueImpl;\nimport org.wikidata.wdtk.datamodel.implementation.SiteLinkImpl;\nimport org.wikidata.wdtk.datamodel.implementation.SnakImpl;\nimport org.wikidata.wdtk.datamodel.implementation.StatementImpl;\nimport org.wikidata.wdtk.datamodel.implementation.TermImpl;\nimport org.wikidata.wdtk.datamodel.implementation.TermUpdateImpl;\nimport org.wikidata.wdtk.datamodel.implementation.ValueSnakImpl;\nimport org.wikidata.wdtk.datamodel.interfaces.FormDocument;\nimport org.wikidata.wdtk.datamodel.interfaces.FormIdValue;\nimport org.wikidata.wdtk.datamodel.interfaces.ItemIdValue;\nimport org.wikidata.wdtk.datamodel.interfaces.LexemeDocument;\nimport org.wikidata.wdtk.datamodel.interfaces.LexemeIdValue;\nimport org.wikidata.wdtk.datamodel.interfaces.MonolingualTextValue;\nimport org.wikidata.wdtk.datamodel.interfaces.PropertyIdValue;\nimport org.wikidata.wdtk.datamodel.interfaces.Reference;\nimport org.wikidata.wdtk.datamodel.interfaces.SenseDocument;\nimport org.wikidata.wdtk.datamodel.interfaces.SenseIdValue;\nimport org.wikidata.wdtk.datamodel.interfaces.Statement;\nimport org.wikidata.wdtk.datamodel.interfaces.StatementGroup;\nimport org.wikidata.wdtk.datamodel.interfaces.StatementRank;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class LexemeDocumentImpl_withSense extends LexemeDocumentImpl_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    LexemeIdValue lexemeIdValue0 = LexemeIdValue.NULL;\n    ItemIdValue itemIdValue0 = ItemIdValue.NULL;\n    ArrayList<StatementGroup> arrayList0 = new ArrayList<StatementGroup>();\n    LinkedList<FormDocument> linkedList0 = new LinkedList<FormDocument>();\n    SenseIdValue senseIdValue0 = SenseIdValue.NULL;\n    Vector<MonolingualTextValue> vector0 = new Vector<MonolingualTextValue>();\n    LexemeDocumentImpl lexemeDocumentImpl0 = new LexemeDocumentImpl(lexemeIdValue0, itemIdValue0, itemIdValue0, vector0, arrayList0, linkedList0, (List<SenseDocument>) null, 0L);\n    DataObjectFactoryImpl dataObjectFactoryImpl0 = new DataObjectFactoryImpl();\n    SenseDocument senseDocument0 = dataObjectFactoryImpl0.getSenseDocument(senseIdValue0, vector0, arrayList0, (-2L));\n    LexemeDocument lexemeDocument0 = lexemeDocumentImpl0.withSense(senseDocument0);\n    assertNotSame(lexemeDocumentImpl0, lexemeDocument0);\n}\n}"
    },
    {
        "original_path": "Wikidata_Wikidata-Toolkit###Wikidata_Wikidata-Toolkit/wdtk-wikibaseapi/src/test/java/org/wikidata/wdtk/wikibaseapi/BasicApiConnectionTest###testConfirmLogin",
        "generated_path": "BasicApiConnection_confirmLogin.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.wikidata.wdtk.wikibaseapi;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.net.HttpCookie;\nimport java.time.ZoneId;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Stack;\nimport java.util.Vector;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport org.wikidata.wdtk.wikibaseapi.BasicApiConnection;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class BasicApiConnection_confirmLogin extends BasicApiConnection_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    BasicApiConnection basicApiConnection0 = BasicApiConnection.getWikidataApiConnection();\n    // Undeclared exception!\n    try {\n        basicApiConnection0.confirmLogin((String) null, \"H3rH8{U]!tuuxZ\", \"H3rH8{U]!tuuxZ\");\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        //\n        // no message in exception (getMessage() returned null)\n        //\n    }\n}\n}"
    },
    {
        "original_path": "Wikidata_Wikidata-Toolkit###Wikidata_Wikidata-Toolkit/wdtk-datamodel/src/test/java/org/wikidata/wdtk/datamodel/helpers/LabeledDocumentUpdateBuilderTest###testForBaseRevision",
        "generated_path": "LabeledDocumentUpdateBuilder_forBaseRevision.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.wikidata.wdtk.datamodel.helpers;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.util.LinkedHashSet;\nimport java.util.LinkedList;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport org.wikidata.wdtk.datamodel.helpers.DatamodelConverterTest;\nimport org.wikidata.wdtk.datamodel.helpers.ItemUpdateBuilder;\nimport org.wikidata.wdtk.datamodel.helpers.LabeledDocumentUpdateBuilder;\nimport org.wikidata.wdtk.datamodel.helpers.TermedDocumentUpdateBuilder;\nimport org.wikidata.wdtk.datamodel.implementation.ItemDocumentImpl;\nimport org.wikidata.wdtk.datamodel.implementation.ItemUpdateImpl;\nimport org.wikidata.wdtk.datamodel.implementation.MediaInfoDocumentImpl;\nimport org.wikidata.wdtk.datamodel.implementation.StatementUpdateImpl;\nimport org.wikidata.wdtk.datamodel.implementation.TermUpdateImpl;\nimport org.wikidata.wdtk.datamodel.interfaces.EntityIdValue;\nimport org.wikidata.wdtk.datamodel.interfaces.ItemIdValue;\nimport org.wikidata.wdtk.datamodel.interfaces.LabeledStatementDocument;\nimport org.wikidata.wdtk.datamodel.interfaces.LabeledStatementDocumentUpdate;\nimport org.wikidata.wdtk.datamodel.interfaces.MediaInfoIdValue;\nimport org.wikidata.wdtk.datamodel.interfaces.MonolingualTextValue;\nimport org.wikidata.wdtk.datamodel.interfaces.SiteLink;\nimport org.wikidata.wdtk.datamodel.interfaces.Statement;\nimport org.wikidata.wdtk.datamodel.interfaces.StatementGroup;\nimport org.wikidata.wdtk.datamodel.interfaces.StatementUpdate;\nimport org.wikidata.wdtk.datamodel.interfaces.TermUpdate;\nimport org.wikidata.wdtk.datamodel.interfaces.TermedStatementDocumentUpdate;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class LabeledDocumentUpdateBuilder_forBaseRevision extends LabeledDocumentUpdateBuilder_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void LabeledDocumentUpdateBuilder_forBaseRevision() throws Throwable {\n    MediaInfoIdValue mediaInfoIdValue0 = MediaInfoIdValue.NULL;\n    LinkedList<MonolingualTextValue> linkedList0 = new LinkedList<MonolingualTextValue>();\n    LinkedList<StatementGroup> linkedList1 = new LinkedList<StatementGroup>();\n    MediaInfoDocumentImpl mediaInfoDocumentImpl0 = new MediaInfoDocumentImpl(mediaInfoIdValue0, linkedList0, linkedList1, 1590L);\n    // Undeclared exception!\n    try {\n        LabeledDocumentUpdateBuilder.forBaseRevision((LabeledStatementDocument) mediaInfoDocumentImpl0);\n        fail(\"Expecting exception: IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n        //\n        // Cannot create update for placeholder entity ID.\n        //\n        verifyException(\"org.apache.commons.lang3.Validate\", e);\n    }\n}\n}"
    },
    {
        "original_path": "Wikidata_Wikidata-Toolkit###Wikidata_Wikidata-Toolkit/wdtk-datamodel/src/test/java/org/wikidata/wdtk/datamodel/helpers/StatementDocumentUpdateBuilderTest###testForBaseRevisionId",
        "generated_path": "StatementDocumentUpdateBuilder_forBaseRevisionId.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.wikidata.wdtk.datamodel.helpers;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.util.LinkedList;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport org.wikidata.wdtk.datamodel.helpers.DatamodelConverter;\nimport org.wikidata.wdtk.datamodel.helpers.DatamodelConverterTest;\nimport org.wikidata.wdtk.datamodel.helpers.ItemUpdateBuilder;\nimport org.wikidata.wdtk.datamodel.helpers.StatementDocumentUpdateBuilder;\nimport org.wikidata.wdtk.datamodel.helpers.TermedDocumentUpdateBuilder;\nimport org.wikidata.wdtk.datamodel.implementation.DataObjectFactoryImpl;\nimport org.wikidata.wdtk.datamodel.implementation.SiteLinkImpl;\nimport org.wikidata.wdtk.datamodel.implementation.StatementUpdateImpl;\nimport org.wikidata.wdtk.datamodel.interfaces.EntityIdValue;\nimport org.wikidata.wdtk.datamodel.interfaces.FormDocument;\nimport org.wikidata.wdtk.datamodel.interfaces.FormIdValue;\nimport org.wikidata.wdtk.datamodel.interfaces.ItemIdValue;\nimport org.wikidata.wdtk.datamodel.interfaces.LabeledStatementDocumentUpdate;\nimport org.wikidata.wdtk.datamodel.interfaces.LexemeIdValue;\nimport org.wikidata.wdtk.datamodel.interfaces.MediaInfoDocument;\nimport org.wikidata.wdtk.datamodel.interfaces.MediaInfoIdValue;\nimport org.wikidata.wdtk.datamodel.interfaces.MonolingualTextValue;\nimport org.wikidata.wdtk.datamodel.interfaces.SenseDocument;\nimport org.wikidata.wdtk.datamodel.interfaces.SenseIdValue;\nimport org.wikidata.wdtk.datamodel.interfaces.StatementDocument;\nimport org.wikidata.wdtk.datamodel.interfaces.StatementDocumentUpdate;\nimport org.wikidata.wdtk.datamodel.interfaces.StatementGroup;\nimport org.wikidata.wdtk.datamodel.interfaces.StatementUpdate;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class StatementDocumentUpdateBuilder_forBaseRevisionId extends StatementDocumentUpdateBuilder_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    DatamodelConverterTest.BrokenItemIdValue datamodelConverterTest_BrokenItemIdValue0 = new DatamodelConverterTest.BrokenItemIdValue();\n    StatementDocumentUpdateBuilder statementDocumentUpdateBuilder0 = StatementDocumentUpdateBuilder.forBaseRevisionId(datamodelConverterTest_BrokenItemIdValue0, 2046L);\n    StatementDocumentUpdate statementDocumentUpdate0 = statementDocumentUpdateBuilder0.build();\n    assertEquals(2046L, statementDocumentUpdate0.getBaseRevisionId());\n}\n}"
    },
    {
        "original_path": "Wikidata_Wikidata-Toolkit###Wikidata_Wikidata-Toolkit/wdtk-datamodel/src/test/java/org/wikidata/wdtk/datamodel/helpers/EntityUpdateBuilderTest###testForBaseRevision",
        "generated_path": "EntityUpdateBuilder_forBaseRevision.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.wikidata.wdtk.datamodel.helpers;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.util.LinkedList;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport org.wikidata.wdtk.datamodel.helpers.DatamodelConverterTest;\nimport org.wikidata.wdtk.datamodel.helpers.EntityUpdateBuilder;\nimport org.wikidata.wdtk.datamodel.helpers.ItemUpdateBuilder;\nimport org.wikidata.wdtk.datamodel.helpers.LabeledDocumentUpdateBuilder;\nimport org.wikidata.wdtk.datamodel.implementation.ItemUpdateImpl;\nimport org.wikidata.wdtk.datamodel.implementation.MediaInfoDocumentImpl;\nimport org.wikidata.wdtk.datamodel.interfaces.EntityDocument;\nimport org.wikidata.wdtk.datamodel.interfaces.EntityIdValue;\nimport org.wikidata.wdtk.datamodel.interfaces.ItemIdValue;\nimport org.wikidata.wdtk.datamodel.interfaces.MediaInfoIdValue;\nimport org.wikidata.wdtk.datamodel.interfaces.MonolingualTextValue;\nimport org.wikidata.wdtk.datamodel.interfaces.StatementGroup;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class EntityUpdateBuilder_forBaseRevision extends EntityUpdateBuilder_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void EntityUpdateBuilder_forBaseRevision() throws Throwable {\n    // Undeclared exception!\n    try {\n        EntityUpdateBuilder.forBaseRevision((EntityDocument) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        //\n        // Base entity revision cannot be null.\n        //\n        verifyException(\"java.util.Objects\", e);\n    }\n}\n}"
    },
    {
        "original_path": "Wikidata_Wikidata-Toolkit###Wikidata_Wikidata-Toolkit/wdtk-storage/src/test/java/org/wikidata/wdtk/storage/datastructures/BitVectorImplTest###testToString",
        "generated_path": "BitVectorImpl_toString.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.wikidata.wdtk.storage.datastructures;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.util.Iterator;\nimport java.util.Spliterator;\nimport java.util.function.Consumer;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.junit.runner.RunWith;\nimport org.wikidata.wdtk.storage.datastructures.BitVector;\nimport org.wikidata.wdtk.storage.datastructures.BitVectorImpl;\nimport org.wikidata.wdtk.storage.datastructures.RankedBitVectorImpl;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class BitVectorImpl_toString extends BitVectorImpl_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    long long0 = 2535L;\n    int int0 = 879;\n    RankedBitVectorImpl rankedBitVectorImpl0 = new RankedBitVectorImpl(2535L, 879, 879);\n    rankedBitVectorImpl0.getBit(2535L);\n    rankedBitVectorImpl0.toString();\n    rankedBitVectorImpl0.addBit(false);\n    BitVectorImpl bitVectorImpl0 = new BitVectorImpl(rankedBitVectorImpl0);\n    // Undeclared exception!\n    bitVectorImpl0.toString();\n}\n}"
    },
    {
        "original_path": "Wikidata_Wikidata-Toolkit###Wikidata_Wikidata-Toolkit/wdtk-datamodel/src/test/java/org/wikidata/wdtk/datamodel/helpers/TermedDocumentUpdateBuilderTest###testForBaseRevision",
        "generated_path": "TermedDocumentUpdateBuilder_forBaseRevision.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.wikidata.wdtk.datamodel.helpers;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.util.HashMap;\nimport java.util.LinkedHashSet;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport org.wikidata.wdtk.datamodel.helpers.DatamodelConverterTest;\nimport org.wikidata.wdtk.datamodel.helpers.ItemUpdateBuilder;\nimport org.wikidata.wdtk.datamodel.helpers.TermedDocumentUpdateBuilder;\nimport org.wikidata.wdtk.datamodel.implementation.AliasUpdateImpl;\nimport org.wikidata.wdtk.datamodel.implementation.DataObjectFactoryImpl;\nimport org.wikidata.wdtk.datamodel.implementation.ItemDocumentImpl;\nimport org.wikidata.wdtk.datamodel.implementation.ItemUpdateImpl;\nimport org.wikidata.wdtk.datamodel.implementation.StatementImpl;\nimport org.wikidata.wdtk.datamodel.implementation.StatementUpdateImpl;\nimport org.wikidata.wdtk.datamodel.implementation.TermUpdateImpl;\nimport org.wikidata.wdtk.datamodel.interfaces.AliasUpdate;\nimport org.wikidata.wdtk.datamodel.interfaces.EntityIdValue;\nimport org.wikidata.wdtk.datamodel.interfaces.FormIdValue;\nimport org.wikidata.wdtk.datamodel.interfaces.ItemIdValue;\nimport org.wikidata.wdtk.datamodel.interfaces.MonolingualTextValue;\nimport org.wikidata.wdtk.datamodel.interfaces.PropertyIdValue;\nimport org.wikidata.wdtk.datamodel.interfaces.SiteLink;\nimport org.wikidata.wdtk.datamodel.interfaces.StatementGroup;\nimport org.wikidata.wdtk.datamodel.interfaces.StatementUpdate;\nimport org.wikidata.wdtk.datamodel.interfaces.TermUpdate;\nimport org.wikidata.wdtk.datamodel.interfaces.TermedStatementDocument;\nimport org.wikidata.wdtk.datamodel.interfaces.TermedStatementDocumentUpdate;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class TermedDocumentUpdateBuilder_forBaseRevision extends TermedDocumentUpdateBuilder_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void TermedDocumentUpdateBuilder_forBaseRevision() throws Throwable {\n    DatamodelConverterTest.BrokenItemIdValue datamodelConverterTest_BrokenItemIdValue0 = new DatamodelConverterTest.BrokenItemIdValue();\n    TermedDocumentUpdateBuilder termedDocumentUpdateBuilder0 = TermedDocumentUpdateBuilder.forBaseRevisionId(datamodelConverterTest_BrokenItemIdValue0, 3459L);\n    ItemUpdateImpl itemUpdateImpl0 = (ItemUpdateImpl) termedDocumentUpdateBuilder0.build();\n    LinkedList<MonolingualTextValue> linkedList0 = new LinkedList<MonolingualTextValue>();\n    LinkedList<StatementGroup> linkedList1 = new LinkedList<StatementGroup>();\n    LinkedList<SiteLink> linkedList2 = new LinkedList<SiteLink>();\n    ItemDocumentImpl itemDocumentImpl0 = new ItemDocumentImpl(datamodelConverterTest_BrokenItemIdValue0, linkedList0, linkedList0, linkedList0, linkedList1, linkedList2, (-1227L));\n    Map<String, MonolingualTextValue> map0 = itemDocumentImpl0.getLabels();\n    HashMap<String, List<MonolingualTextValue>> hashMap0 = new HashMap<String, List<MonolingualTextValue>>();\n    Map<String, SiteLink> map1 = itemUpdateImpl0.getModifiedSiteLinks();\n    ItemDocumentImpl itemDocumentImpl1 = new ItemDocumentImpl(\"globecoordinate\", map0, map0, hashMap0, (Map<String, List<StatementImpl.PreStatement>>) null, map1, (-1227L), \"property\");\n    // Undeclared exception!\n    try {\n        TermedDocumentUpdateBuilder.forBaseRevision((TermedStatementDocument) itemDocumentImpl1);\n        fail(\"Expecting exception: IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n        //\n        // Entity id \\\"globecoordinate\\\" is not supported.\n        //\n        verifyException(\"org.wikidata.wdtk.datamodel.implementation.EntityIdValueImpl\", e);\n    }\n}\n}"
    },
    {
        "original_path": "Wikidata_Wikidata-Toolkit###Wikidata_Wikidata-Toolkit/wdtk-datamodel/src/test/java/org/wikidata/wdtk/datamodel/helpers/StatementDocumentUpdateBuilderTest###testForBaseRevision",
        "generated_path": "StatementDocumentUpdateBuilder_forBaseRevision.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.wikidata.wdtk.datamodel.helpers;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.util.LinkedList;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport org.wikidata.wdtk.datamodel.helpers.DatamodelConverter;\nimport org.wikidata.wdtk.datamodel.helpers.DatamodelConverterTest;\nimport org.wikidata.wdtk.datamodel.helpers.ItemUpdateBuilder;\nimport org.wikidata.wdtk.datamodel.helpers.StatementDocumentUpdateBuilder;\nimport org.wikidata.wdtk.datamodel.helpers.TermedDocumentUpdateBuilder;\nimport org.wikidata.wdtk.datamodel.implementation.DataObjectFactoryImpl;\nimport org.wikidata.wdtk.datamodel.implementation.SiteLinkImpl;\nimport org.wikidata.wdtk.datamodel.implementation.StatementUpdateImpl;\nimport org.wikidata.wdtk.datamodel.interfaces.EntityIdValue;\nimport org.wikidata.wdtk.datamodel.interfaces.FormDocument;\nimport org.wikidata.wdtk.datamodel.interfaces.FormIdValue;\nimport org.wikidata.wdtk.datamodel.interfaces.ItemIdValue;\nimport org.wikidata.wdtk.datamodel.interfaces.LabeledStatementDocumentUpdate;\nimport org.wikidata.wdtk.datamodel.interfaces.LexemeIdValue;\nimport org.wikidata.wdtk.datamodel.interfaces.MediaInfoDocument;\nimport org.wikidata.wdtk.datamodel.interfaces.MediaInfoIdValue;\nimport org.wikidata.wdtk.datamodel.interfaces.MonolingualTextValue;\nimport org.wikidata.wdtk.datamodel.interfaces.SenseDocument;\nimport org.wikidata.wdtk.datamodel.interfaces.SenseIdValue;\nimport org.wikidata.wdtk.datamodel.interfaces.StatementDocument;\nimport org.wikidata.wdtk.datamodel.interfaces.StatementDocumentUpdate;\nimport org.wikidata.wdtk.datamodel.interfaces.StatementGroup;\nimport org.wikidata.wdtk.datamodel.interfaces.StatementUpdate;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class StatementDocumentUpdateBuilder_forBaseRevision extends StatementDocumentUpdateBuilder_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void StatementDocumentUpdateBuilder_forBaseRevision() throws Throwable {\n    // Undeclared exception!\n    try {\n        StatementDocumentUpdateBuilder.forBaseRevision((StatementDocument) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        //\n        // Base entity revision cannot be null.\n        //\n        verifyException(\"java.util.Objects\", e);\n    }\n}\n}"
    },
    {
        "original_path": "Wikidata_Wikidata-Toolkit###Wikidata_Wikidata-Toolkit/wdtk-datamodel/src/test/java/org/wikidata/wdtk/datamodel/helpers/LabeledDocumentUpdateBuilderTest###testForBaseRevisionId",
        "generated_path": "LabeledDocumentUpdateBuilder_forBaseRevisionId.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.wikidata.wdtk.datamodel.helpers;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.util.LinkedHashSet;\nimport java.util.LinkedList;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport org.wikidata.wdtk.datamodel.helpers.DatamodelConverterTest;\nimport org.wikidata.wdtk.datamodel.helpers.ItemUpdateBuilder;\nimport org.wikidata.wdtk.datamodel.helpers.LabeledDocumentUpdateBuilder;\nimport org.wikidata.wdtk.datamodel.helpers.TermedDocumentUpdateBuilder;\nimport org.wikidata.wdtk.datamodel.implementation.ItemDocumentImpl;\nimport org.wikidata.wdtk.datamodel.implementation.ItemUpdateImpl;\nimport org.wikidata.wdtk.datamodel.implementation.MediaInfoDocumentImpl;\nimport org.wikidata.wdtk.datamodel.implementation.StatementUpdateImpl;\nimport org.wikidata.wdtk.datamodel.implementation.TermUpdateImpl;\nimport org.wikidata.wdtk.datamodel.interfaces.EntityIdValue;\nimport org.wikidata.wdtk.datamodel.interfaces.ItemIdValue;\nimport org.wikidata.wdtk.datamodel.interfaces.LabeledStatementDocument;\nimport org.wikidata.wdtk.datamodel.interfaces.LabeledStatementDocumentUpdate;\nimport org.wikidata.wdtk.datamodel.interfaces.MediaInfoIdValue;\nimport org.wikidata.wdtk.datamodel.interfaces.MonolingualTextValue;\nimport org.wikidata.wdtk.datamodel.interfaces.SiteLink;\nimport org.wikidata.wdtk.datamodel.interfaces.Statement;\nimport org.wikidata.wdtk.datamodel.interfaces.StatementGroup;\nimport org.wikidata.wdtk.datamodel.interfaces.StatementUpdate;\nimport org.wikidata.wdtk.datamodel.interfaces.TermUpdate;\nimport org.wikidata.wdtk.datamodel.interfaces.TermedStatementDocumentUpdate;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class LabeledDocumentUpdateBuilder_forBaseRevisionId extends LabeledDocumentUpdateBuilder_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    DatamodelConverterTest.BrokenItemIdValue datamodelConverterTest_BrokenItemIdValue0 = new DatamodelConverterTest.BrokenItemIdValue();\n    ItemUpdateBuilder itemUpdateBuilder0 = ItemUpdateBuilder.forBaseRevisionId((ItemIdValue) datamodelConverterTest_BrokenItemIdValue0, 298L);\n    ItemUpdateBuilder itemUpdateBuilder1 = itemUpdateBuilder0.removeSiteLink(\"rf)x4Cr:r?S0x#z6cw\");\n    LabeledStatementDocumentUpdate labeledStatementDocumentUpdate0 = itemUpdateBuilder1.build();\n    assertFalse(labeledStatementDocumentUpdate0.isEmpty());\n}\n}"
    },
    {
        "original_path": "GoSimpleLLC_nbvcxz###GoSimpleLLC_nbvcxz/src/test/java/me/gosimple/nbvcxz/matching/YearMatcherTest###testMatch",
        "generated_path": "YearMatcher_match.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package me.gosimple.nbvcxz.matching;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.util.HashMap;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.regex.Pattern;\nimport me.gosimple.nbvcxz.matching.PasswordMatcher;\nimport me.gosimple.nbvcxz.matching.YearMatcher;\nimport me.gosimple.nbvcxz.matching.match.Match;\nimport me.gosimple.nbvcxz.resources.AdjacencyGraph;\nimport me.gosimple.nbvcxz.resources.Configuration;\nimport me.gosimple.nbvcxz.resources.Dictionary;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class YearMatcher_match extends YearMatcher_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test0() throws Throwable {\n    YearMatcher yearMatcher0 = new YearMatcher();\n    HashMap<String, Long> hashMap0 = new HashMap<String, Long>();\n    LinkedList<Dictionary> linkedList0 = new LinkedList<Dictionary>();\n    LinkedList<AdjacencyGraph> linkedList1 = new LinkedList<AdjacencyGraph>();\n    HashMap<Character, Character[]> hashMap1 = new HashMap<Character, Character[]>();\n    Pattern pattern0 = Pattern.compile(\"me.gosimple.nbvcxz.matching.YearMatcher\", 554);\n    Double double0 = new Double(554);\n    Integer integer0 = new Integer(554);\n    Locale locale0 = Locale.ITALY;\n    Configuration configuration0 = new Configuration((List<PasswordMatcher>) null, hashMap0, linkedList0, linkedList1, hashMap1, pattern0, double0, integer0, locale0, true, 554);\n    List<Match> list0 = yearMatcher0.match(configuration0, \"\");\n    assertEquals(0, list0.size());\n}\n}"
    },
    {
        "original_path": "GoSimpleLLC_nbvcxz###GoSimpleLLC_nbvcxz/src/test/java/me/gosimple/nbvcxz/resources/AdjacencyGraphUtilTest###testCalcAverageDegree",
        "generated_path": "AdjacencyGraphUtil_calcAverageDegree.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package me.gosimple.nbvcxz.resources;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.util.HashMap;\nimport java.util.Set;\nimport java.util.function.BiFunction;\nimport me.gosimple.nbvcxz.resources.AdjacencyGraph;\nimport me.gosimple.nbvcxz.resources.AdjacencyGraphUtil;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class AdjacencyGraphUtil_calcAverageDegree extends AdjacencyGraphUtil_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    HashMap<Character, String[]> hashMap0 = new HashMap<Character, String[]>();\n    assertTrue(hashMap0.isEmpty());\n    assertEquals(0, hashMap0.size());\n    assertNotNull(hashMap0);\n    Character character0 = new Character('c');\n    assertEquals('c', (char) character0);\n    assertNotNull(character0);\n    String[] stringArray0 = new String[0];\n    BiFunction<Object, Object, String[]> biFunction0 = (BiFunction<Object, Object, String[]>) mock(BiFunction.class, new ViolatedAssumptionAnswer());\n    doReturn(stringArray0).when(biFunction0).apply(any(), any());\n    Character character1 = Character.valueOf('c');\n    assertEquals('c', (char) character1);\n    assertTrue(character1.equals((Object) character0));\n    assertNotNull(character1);\n    String[] stringArray1 = new String[9];\n    assertFalse(stringArray1.equals((Object) stringArray0));\n    stringArray1[0] = \"me.gosimple.nbvcxz.resources.AdjacencyGraph\";\n    boolean boolean0 = hashMap0.remove((Object) \"\", (Object) \"U3~!bj'tYZ\\\"q*x\");\n    assertTrue(hashMap0.isEmpty());\n    assertEquals(0, hashMap0.size());\n    assertFalse(boolean0);\n    stringArray1[1] = \"\";\n    stringArray1[2] = \"\";\n    Character character2 = new Character('c');\n    assertEquals('c', (char) character2);\n    assertTrue(character2.equals((Object) character1));\n    assertTrue(character2.equals((Object) character0));\n    assertNotNull(character2);\n    String[] stringArray2 = hashMap0.put(character2, stringArray1);\n    assertEquals(1, hashMap0.size());\n    assertFalse(hashMap0.isEmpty());\n    assertEquals(9, stringArray1.length);\n    assertNotSame(stringArray1, stringArray0);\n    assertFalse(stringArray1.equals((Object) stringArray0));\n    assertTrue(character2.equals((Object) character1));\n    assertTrue(character2.equals((Object) character0));\n    assertNull(stringArray2);\n    stringArray1[3] = \"\";\n    stringArray1[4] = \"yY\";\n    stringArray1[6] = \"me.gosimple.nbvcxz.resources.AdjacencyGraph\";\n    stringArray1[6] = \"me.gosimple.nbvcxz.resources.AdjacencyGraph\";\n    stringArray1[7] = \"J'#,$>~+=_W0d/Q_.i\";\n    stringArray1[8] = \"\";\n    String[] stringArray3 = hashMap0.put(character1, stringArray1);\n    assertEquals(1, hashMap0.size());\n    assertFalse(hashMap0.isEmpty());\n    assertEquals(9, stringArray3.length);\n    assertEquals(9, stringArray1.length);\n    assertNotSame(stringArray3, stringArray0);\n    assertSame(stringArray3, stringArray1);\n    assertSame(stringArray1, stringArray3);\n    assertNotSame(stringArray1, stringArray0);\n    assertFalse(stringArray3.equals((Object) stringArray0));\n    assertTrue(character1.equals((Object) character2));\n    assertTrue(character1.equals((Object) character0));\n    assertFalse(stringArray1.equals((Object) stringArray0));\n    assertNotNull(stringArray3);\n    String[] stringArray4 = hashMap0.computeIfPresent(character0, biFunction0);\n    assertEquals(1, hashMap0.size());\n    assertFalse(hashMap0.isEmpty());\n    assertEquals(0, stringArray0.length);\n    assertEquals(0, stringArray4.length);\n    assertNotSame(stringArray0, stringArray1);\n    assertNotSame(stringArray0, stringArray3);\n    assertSame(stringArray0, stringArray4);\n    assertNotSame(stringArray4, stringArray1);\n    assertSame(stringArray4, stringArray0);\n    assertNotSame(stringArray4, stringArray3);\n    assertTrue(character0.equals((Object) character1));\n    assertTrue(character0.equals((Object) character2));\n    assertFalse(stringArray0.equals((Object) stringArray1));\n    assertFalse(stringArray0.equals((Object) stringArray3));\n    assertFalse(stringArray4.equals((Object) stringArray1));\n    assertFalse(stringArray4.equals((Object) stringArray3));\n    assertNotNull(stringArray4);\n    double double0 = AdjacencyGraphUtil.calcAverageDegree(hashMap0);\n    assertEquals(1, hashMap0.size());\n    assertFalse(hashMap0.isEmpty());\n    assertEquals(0.0, double0, 0.01);\n    AdjacencyGraph adjacencyGraph0 = new AdjacencyGraph(\"U3~!bj'tYZ\\\"q*x\", hashMap0);\n    assertEquals(1, hashMap0.size());\n    assertFalse(hashMap0.isEmpty());\n    assertEquals(\"U3~!bj'tYZ\\\"q*x\", adjacencyGraph0.getName());\n    assertNotNull(adjacencyGraph0);\n    int int0 = AdjacencyGraphUtil.getTurns(adjacencyGraph0, \"\");\n    assertEquals(1, hashMap0.size());\n    assertFalse(hashMap0.isEmpty());\n    assertEquals(\"U3~!bj'tYZ\\\"q*x\", adjacencyGraph0.getName());\n    assertEquals(1, int0);\n}\n}"
    },
    {
        "original_path": "GoSimpleLLC_nbvcxz###GoSimpleLLC_nbvcxz/src/test/java/me/gosimple/nbvcxz/resources/CharacterCaseUtilTest###fractionOfStringUppercaseTest",
        "generated_path": "CharacterCaseUtil_fractionOfStringUppercase.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package me.gosimple.nbvcxz.resources;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport me.gosimple.nbvcxz.resources.CharacterCaseUtil;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class CharacterCaseUtil_fractionOfStringUppercase extends CharacterCaseUtil_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test0() throws Throwable {\n    double double0 = CharacterCaseUtil.fractionOfStringUppercase(\"m.gosimple.nbvcxz.resour}es.CharacterCaseUtil\");\n    assertEquals(0.075, double0, 0.01);\n}\n}"
    },
    {
        "original_path": "GoSimpleLLC_nbvcxz###GoSimpleLLC_nbvcxz/src/test/java/me/gosimple/nbvcxz/resources/AdjacencyGraphUtilTest###testNeighborsNumber",
        "generated_path": "AdjacencyGraphUtil_neighborsNumber.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package me.gosimple.nbvcxz.resources;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.util.HashMap;\nimport java.util.Set;\nimport java.util.function.BiFunction;\nimport me.gosimple.nbvcxz.resources.AdjacencyGraph;\nimport me.gosimple.nbvcxz.resources.AdjacencyGraphUtil;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class AdjacencyGraphUtil_neighborsNumber extends AdjacencyGraphUtil_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    String[] stringArray0 = new String[6];\n    stringArray0[0] = \"OX\u007f{O\";\n    stringArray0[1] = \"Ni#!#v(\";\n    stringArray0[2] = \"\";\n    stringArray0[3] = \"\";\n    stringArray0[4] = \"\";\n    stringArray0[5] = \"cES^3?zu^\";\n    int int0 = AdjacencyGraphUtil.neighborsNumber(stringArray0);\n    assertEquals(6, int0);\n    assertEquals(6, stringArray0.length);\n    AdjacencyGraphUtil adjacencyGraphUtil0 = new AdjacencyGraphUtil();\n    assertNotNull(adjacencyGraphUtil0);\n    AdjacencyGraph adjacencyGraph0 = new AdjacencyGraph(\"\", adjacencyGraphUtil0.dvorak);\n    assertEquals(\"\", adjacencyGraph0.getName());\n    assertNotNull(adjacencyGraph0);\n    Character character0 = Character.valueOf('U');\n    assertEquals('U', (char) character0);\n    assertNotNull(character0);\n    int int1 = Character.compare('l', '<');\n    assertEquals(48, int1);\n    assertFalse(int1 == int0);\n    Set<Character> set0 = AdjacencyGraphUtil.getNeighbors(adjacencyGraph0, character0);\n    assertEquals(\"\", adjacencyGraph0.getName());\n    assertFalse(set0.isEmpty());\n    assertEquals(12, set0.size());\n    assertFalse(set0.contains('<'));\n    assertNotNull(set0);\n    int int2 = AdjacencyGraphUtil.getTurns(adjacencyGraph0, \"\");\n    assertEquals(\"\", adjacencyGraph0.getName());\n    assertEquals(1, int2);\n    assertFalse(int2 == int0);\n    assertFalse(int2 == int1);\n    int int3 = AdjacencyGraphUtil.getShifts(adjacencyGraph0, \"\");\n    assertEquals(\"\", adjacencyGraph0.getName());\n    assertEquals(0, int3);\n    assertFalse(int3 == int1);\n    assertFalse(int3 == int2);\n    assertFalse(int3 == int0);\n    int int4 = AdjacencyGraphUtil.getTurns(adjacencyGraph0, \"me.gosimple.nbvcxz.resources.AdjacencyGraph\");\n    assertEquals(\"\", adjacencyGraph0.getName());\n    assertEquals(2, int4);\n    assertFalse(int4 == int1);\n    assertFalse(int4 == int2);\n    assertFalse(int4 == int3);\n    assertFalse(int4 == int0);\n}\n}"
    },
    {
        "original_path": "GoSimpleLLC_nbvcxz###GoSimpleLLC_nbvcxz/src/test/java/me/gosimple/nbvcxz/matching/SpacialMatcherTest###testMatch",
        "generated_path": "SpacialMatcher_match.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package me.gosimple.nbvcxz.matching;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.util.HashMap;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.regex.Pattern;\nimport me.gosimple.nbvcxz.matching.PasswordMatcher;\nimport me.gosimple.nbvcxz.matching.SpacialMatcher;\nimport me.gosimple.nbvcxz.matching.match.Match;\nimport me.gosimple.nbvcxz.resources.AdjacencyGraph;\nimport me.gosimple.nbvcxz.resources.Configuration;\nimport me.gosimple.nbvcxz.resources.Dictionary;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class SpacialMatcher_match extends SpacialMatcher_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test1() throws Throwable {\n    SpacialMatcher spacialMatcher0 = new SpacialMatcher();\n    LinkedList<PasswordMatcher> linkedList0 = new LinkedList<PasswordMatcher>();\n    HashMap<String, Long> hashMap0 = new HashMap<String, Long>();\n    LinkedList<Dictionary> linkedList1 = new LinkedList<Dictionary>();\n    LinkedList<AdjacencyGraph> linkedList2 = new LinkedList<AdjacencyGraph>();\n    HashMap<Character, Character[]> hashMap1 = new HashMap<Character, Character[]>();\n    Pattern pattern0 = Pattern.compile(\"4;jOnjs29e_>\");\n    Double double0 = new Double(904);\n    HashMap<Character, String[]> hashMap2 = new HashMap<Character, String[]>();\n    AdjacencyGraph adjacencyGraph0 = new AdjacencyGraph(\"4;jOnjs29e_>\", hashMap2);\n    linkedList2.add(adjacencyGraph0);\n    Character character0 = Character.valueOf('s');\n    String[] stringArray0 = new String[3];\n    Character character1 = new Character('2');\n    hashMap2.put(character1, stringArray0);\n    stringArray0[1] = \"4;jOnjs29e_>\";\n    hashMap2.put(character0, stringArray0);\n    Integer integer0 = new Integer(904);\n    Locale locale0 = Locale.ROOT;\n    Configuration configuration0 = new Configuration(linkedList0, hashMap0, linkedList1, linkedList2, hashMap1, pattern0, double0, integer0, locale0, true, 904);\n    List<Match> list0 = spacialMatcher0.match(configuration0, \"4;jOnjs29e_>\");\n    assertEquals(1, list0.size());\n}\n}"
    },
    {
        "original_path": "GoSimpleLLC_nbvcxz###GoSimpleLLC_nbvcxz/src/test/java/me/gosimple/nbvcxz/matching/match/BaseMatchTest###testNCk",
        "generated_path": "BaseMatch_nCk.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package me.gosimple.nbvcxz.matching.match;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.util.LinkedList;\nimport me.gosimple.nbvcxz.matching.match.BaseMatch;\nimport me.gosimple.nbvcxz.matching.match.BaseMatchTest;\nimport me.gosimple.nbvcxz.matching.match.BruteForceMatch;\nimport me.gosimple.nbvcxz.matching.match.DateMatch;\nimport me.gosimple.nbvcxz.matching.match.DictionaryMatch;\nimport me.gosimple.nbvcxz.matching.match.SeparatorMatch;\nimport me.gosimple.nbvcxz.matching.match.SequenceMatch;\nimport me.gosimple.nbvcxz.resources.Configuration;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class BaseMatch_nCk extends BaseMatch_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    BaseMatch.nCk(4236, 69);\n}\n}"
    },
    {
        "original_path": "GoSimpleLLC_nbvcxz###GoSimpleLLC_nbvcxz/src/test/java/me/gosimple/nbvcxz/matching/SequenceMatcherTest###testMatch",
        "generated_path": "SequenceMatcher_match.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package me.gosimple.nbvcxz.matching;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.util.List;\nimport me.gosimple.nbvcxz.matching.SequenceMatcher;\nimport me.gosimple.nbvcxz.matching.match.Match;\nimport me.gosimple.nbvcxz.resources.Configuration;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class SequenceMatcher_match extends SequenceMatcher_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test1() throws Throwable {\n    SequenceMatcher sequenceMatcher0 = new SequenceMatcher();\n    List<Match> list0 = sequenceMatcher0.match((Configuration) null, \"x32eEUFnT '9\");\n    assertTrue(list0.isEmpty());\n}\n}"
    },
    {
        "original_path": "c-rack_cbor-java###c-rack_cbor-java/src/test/java/co/nstant/in/cbor/model/ArrayTest###testToString",
        "generated_path": "Array_toString.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package co.nstant.in.cbor.model;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport co.nstant.in.cbor.model.Array;\nimport co.nstant.in.cbor.model.DataItem;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class Array_toString extends Array_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test2() throws Throwable {\n    Array array0 = new Array();\n    String string0 = array0.toString();\n    assertEquals(\"[]\", string0);\n}\n}"
    },
    {
        "original_path": "c-rack_cbor-java###c-rack_cbor-java/src/test/java/co/nstant/in/cbor/model/MapTest###testToString",
        "generated_path": "Map_toString.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package co.nstant.in.cbor.model;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport co.nstant.in.cbor.model.DataItem;\nimport co.nstant.in.cbor.model.Map;\nimport java.util.Collection;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class Map_toString extends Map_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test0() throws Throwable {\n    Map map0 = new Map();\n    Map map1 = new Map();\n    Map map2 = map1.put(map0, map0);\n    String string0 = map2.toString();\n    assertEquals(\"{ {  }: {  } }\", string0);\n}\n}"
    },
    {
        "original_path": "jparsec_jparsec###jparsec_jparsec/jparsec/src/test/java/org/jparsec/LexiconTest###testWord",
        "generated_path": "Lexicon_word.java",
        "Compile_result": 1,
        "Test_result": 0,
        "Gen_Test": "package org.jparsec;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.lang.reflect.Array;\nimport java.util.function.Function;\nimport java.util.function.UnaryOperator;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.jparsec.BestParser;\nimport org.jparsec.IntOrder;\nimport org.jparsec.Lexicon;\nimport org.jparsec.Parser;\nimport org.jparsec.Token;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class Lexicon_word extends Lexicon_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();\n    Function<String, Object> function0 = (Function<String, Object>) mock(Function.class, new ViolatedAssumptionAnswer());\n    doReturn(unaryOperator0).when(function0).apply(anyString());\n    Function<Object, String> function1 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());\n    Function<String, Object> function2 = Lexicon.fallback(function0, (Function<? super String, ?>) function1);\n    Parser<Integer>[] parserArray0 = (Parser<Integer>[]) Array.newInstance(Parser.class, 0);\n    IntOrder intOrder0 = IntOrder.LT;\n    BestParser<Integer> bestParser0 = new BestParser<Integer>(parserArray0, intOrder0);\n    Parser<String> parser0 = bestParser0.cast();\n    Lexicon lexicon0 = new Lexicon(function2, parser0);\n    Object object0 = lexicon0.word(\"dLZ\");\n    assertNotNull(object0);\n}\n}"
    },
    {
        "original_path": "jparsec_jparsec###jparsec_jparsec/jparsec-examples/src/test/java/org/jparsec/examples/sql/parser/RelationParserTest###testUnion",
        "generated_path": "RelationParser_union.java",
        "Compile_result": 1,
        "Test_result": 0,
        "Gen_Test": "package org.jparsec.examples.sql.parser;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.jparsec.Parser;\nimport org.jparsec.examples.sql.ast.Expression;\nimport org.jparsec.examples.sql.ast.GroupBy;\nimport org.jparsec.examples.sql.ast.OrderBy;\nimport org.jparsec.examples.sql.ast.Projection;\nimport org.jparsec.examples.sql.ast.Relation;\nimport org.jparsec.examples.sql.parser.RelationParser;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class RelationParser_union extends RelationParser_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    Parser<Expression> parser0 = RelationParser.havingClause((Parser<Expression>) null);\n    Parser<Relation> parser1 = RelationParser.join((Parser<Relation>) null, parser0);\n    Parser<Relation> parser2 = RelationParser.union(parser1);\n    assertFalse(parser2.equals((Object) parser1));\n}\n}"
    },
    {
        "original_path": "jparsec_jparsec###jparsec_jparsec/jparsec/src/test/java/org/jparsec/ScannersTest###testAmong",
        "generated_path": "Scanners_among.java",
        "Compile_result": 1,
        "Test_result": 0,
        "Gen_Test": "package org.jparsec;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.jparsec.BestParser;\nimport org.jparsec.IntOrder;\nimport org.jparsec.Parser;\nimport org.jparsec.Scanners;\nimport org.jparsec.SkipAtLeastParser;\nimport org.jparsec.SkipTimesParser;\nimport org.jparsec.pattern.CharPredicate;\nimport org.jparsec.pattern.Pattern;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class Scanners_among extends Scanners_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test16() throws Throwable {\n    CharPredicate charPredicate0 = mock(CharPredicate.class, new ViolatedAssumptionAnswer());\n    Parser<Void> parser0 = Scanners.isChar(charPredicate0);\n    Parser<Void> parser1 = Scanners.among(\"\");\n    Parser<String> parser2 = Scanners.quoted(parser0, parser1, parser0);\n    assertNotNull(parser2);\n}\n}"
    },
    {
        "original_path": "jparsec_jparsec###jparsec_jparsec/jparsec/src/test/java/org/jparsec/internal/util/IntListTest###testToArray",
        "generated_path": "IntList_toArray.java",
        "Compile_result": 1,
        "Test_result": 0,
        "Gen_Test": "package org.jparsec.internal.util;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.jparsec.internal.util.IntList;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class IntList_toArray extends IntList_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    IntList intList0 = new IntList(0);\n    assertEquals(0, intList0.size());\n    int[] intArray0 = intList0.toArray();\n    assertEquals(0, intArray0.length);\n}\n}"
    },
    {
        "original_path": "jparsec_jparsec###jparsec_jparsec/jparsec-examples/src/test/java/org/jparsec/examples/sql/parser/ExpressionParserTest###testExpression",
        "generated_path": "ExpressionParser_expression.java",
        "Compile_result": 1,
        "Test_result": 0,
        "Gen_Test": "package org.jparsec.examples.sql.parser;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.jparsec.Parser;\nimport org.jparsec.examples.sql.ast.Expression;\nimport org.jparsec.examples.sql.ast.Relation;\nimport org.jparsec.examples.sql.ast.TableRelation;\nimport org.jparsec.examples.sql.parser.ExpressionParser;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class ExpressionParser_expression extends ExpressionParser_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    Parser<Expression> parser0 = ExpressionParser.WILDCARD;\n    Parser<Expression> parser1 = ExpressionParser.notIn(parser0);\n    Parser<Expression> parser2 = ExpressionParser.expression(parser1);\n    assertFalse(parser2.equals((Object) parser0));\n}\n}"
    },
    {
        "original_path": "jparsec_jparsec###jparsec_jparsec/jparsec-examples/src/test/java/org/jparsec/examples/java/parser/TerminalParserTest###testTerm",
        "generated_path": "TerminalParser_term.java",
        "Compile_result": 1,
        "Test_result": 0,
        "Gen_Test": "package org.jparsec.examples.java.parser;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.io.InputStream;\nimport java.nio.CharBuffer;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.jparsec.Parser;\nimport org.jparsec.examples.java.parser.TerminalParser;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class TerminalParser_term extends TerminalParser_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test0() throws Throwable {\n    Parser<?> parser0 = TerminalParser.term(\">>>\");\n    assertNotNull(parser0);\n}\n}"
    },
    {
        "original_path": "jparsec_jparsec###jparsec_jparsec/jparsec/src/test/java/org/jparsec/ScannersTest###testNotAmong",
        "generated_path": "Scanners_notAmong.java",
        "Compile_result": 1,
        "Test_result": 0,
        "Gen_Test": "package org.jparsec;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.jparsec.BestParser;\nimport org.jparsec.IntOrder;\nimport org.jparsec.Parser;\nimport org.jparsec.Scanners;\nimport org.jparsec.SkipAtLeastParser;\nimport org.jparsec.SkipTimesParser;\nimport org.jparsec.pattern.CharPredicate;\nimport org.jparsec.pattern.Pattern;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class Scanners_notAmong extends Scanners_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test20() throws Throwable {\n    Parser<Void> parser0 = Scanners.notAmong(\"Q/=:KVXZuQDl,K{\");\n    assertNotNull(parser0);\n}\n}"
    },
    {
        "original_path": "jparsec_jparsec###jparsec_jparsec/jparsec-examples/src/test/java/org/jparsec/examples/sql/parser/TerminalParserTest###testTerm",
        "generated_path": "TerminalParser_term.java",
        "Compile_result": 1,
        "Test_result": 0,
        "Gen_Test": "package org.jparsec.examples.java.parser;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.io.InputStream;\nimport java.nio.CharBuffer;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.jparsec.Parser;\nimport org.jparsec.examples.java.parser.TerminalParser;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class TerminalParser_term extends TerminalParser_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test0() throws Throwable {\n    Parser<?> parser0 = TerminalParser.term(\">>>\");\n    assertNotNull(parser0);\n}\n}"
    },
    {
        "original_path": "jparsec_jparsec###jparsec_jparsec/jparsec-examples/src/test/java/org/jparsec/examples/common/ValueObjectTest###testToString",
        "generated_path": "ValueObject_toString.java",
        "Compile_result": 1,
        "Test_result": 0,
        "Gen_Test": "package org.jparsec.examples.common;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.util.LinkedList;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.jparsec.examples.bnf.ast.AltRule;\nimport org.jparsec.examples.bnf.ast.Rule;\nimport org.jparsec.examples.bnf.ast.RuleDef;\nimport org.jparsec.examples.bnf.ast.RuleReference;\nimport org.jparsec.examples.bnf.ast.SequentialRule;\nimport org.jparsec.examples.sql.ast.BetweenExpression;\nimport org.jparsec.examples.sql.ast.Expression;\nimport org.jparsec.examples.sql.ast.LikeExpression;\nimport org.jparsec.examples.sql.ast.NullExpression;\nimport org.jparsec.examples.sql.ast.QualifiedName;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class ValueObject_toString extends ValueObject_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test0() throws Throwable {\n    RuleReference ruleReference0 = new RuleReference((String) null);\n    String string0 = ruleReference0.toString();\n    assertNull(string0);\n}\n}"
    },
    {
        "original_path": "jparsec_jparsec###jparsec_jparsec/jparsec/src/test/java/org/jparsec/OperatorsTest###testLexicon",
        "generated_path": "Operators_lexicon.java",
        "Compile_result": 1,
        "Test_result": 0,
        "Gen_Test": "package org.jparsec;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.util.ConcurrentModificationException;\nimport java.util.LinkedList;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.jparsec.Lexicon;\nimport org.jparsec.Operators;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class Operators_lexicon extends Operators_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test4() throws Throwable {\n    LinkedList<String> linkedList0 = new LinkedList<String>();\n    linkedList0.add(\"[VKN.d]T`V}l];M|uXfp;}#/~GQJS(iR%b2F.(yX7-l)5WL\");\n    linkedList0.add(\"[\");\n    Lexicon lexicon0 = Operators.lexicon(linkedList0);\n    assertNotNull(lexicon0);\n}\n}"
    },
    {
        "original_path": "jparsec_jparsec###jparsec_jparsec/jparsec/src/test/java/org/jparsec/internal/util/IntListTest###testSet",
        "generated_path": "IntList_set.java",
        "Compile_result": 1,
        "Test_result": 0,
        "Gen_Test": "package org.jparsec.internal.util;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.jparsec.internal.util.IntList;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class IntList_set extends IntList_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    IntList intList0 = new IntList(2818);\n    IntList intList1 = intList0.add(1);\n    int int0 = intList1.set(0, (-1));\n    assertEquals(1, int0);\n}\n}"
    },
    {
        "original_path": "jparsec_jparsec###jparsec_jparsec/jparsec-examples/src/test/java/org/jparsec/examples/sql/parser/ExpressionParserTest###testLogical",
        "generated_path": "ExpressionParser_logical.java",
        "Compile_result": 1,
        "Test_result": 0,
        "Gen_Test": "package org.jparsec.examples.sql.parser;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.jparsec.Parser;\nimport org.jparsec.examples.sql.ast.Expression;\nimport org.jparsec.examples.sql.ast.Relation;\nimport org.jparsec.examples.sql.ast.TableRelation;\nimport org.jparsec.examples.sql.parser.ExpressionParser;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class ExpressionParser_logical extends ExpressionParser_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    Parser<Expression> parser0 = ExpressionParser.exists((Parser<Relation>) null);\n    Parser<Expression> parser1 = ExpressionParser.logical(parser0);\n    assertFalse(parser1.equals((Object) parser0));\n}\n}"
    },
    {
        "original_path": "jparsec_jparsec###jparsec_jparsec/jparsec-examples/src/test/java/org/jparsec/examples/sql/parser/RelationParserTest###testJoin",
        "generated_path": "RelationParser_join.java",
        "Compile_result": 1,
        "Test_result": 0,
        "Gen_Test": "package org.jparsec.examples.sql.parser;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.jparsec.Parser;\nimport org.jparsec.examples.sql.ast.Expression;\nimport org.jparsec.examples.sql.ast.GroupBy;\nimport org.jparsec.examples.sql.ast.OrderBy;\nimport org.jparsec.examples.sql.ast.Projection;\nimport org.jparsec.examples.sql.ast.Relation;\nimport org.jparsec.examples.sql.parser.RelationParser;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class RelationParser_join extends RelationParser_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    Parser<Expression> parser0 = RelationParser.havingClause((Parser<Expression>) null);\n    Parser<Relation> parser1 = RelationParser.join((Parser<Relation>) null, parser0);\n    Parser<Relation> parser2 = RelationParser.union(parser1);\n    assertFalse(parser2.equals((Object) parser1));\n}\n}"
    },
    {
        "original_path": "jparsec_jparsec###jparsec_jparsec/jparsec-examples/src/test/java/org/jparsec/examples/bnf/parser/RuleParserTest###testRule",
        "generated_path": "RuleParser_rule.java",
        "Compile_result": 1,
        "Test_result": 0,
        "Gen_Test": "package org.jparsec.examples.bnf.parser;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.jparsec.Parser;\nimport org.jparsec.examples.bnf.ast.Rule;\nimport org.jparsec.examples.bnf.parser.RuleParser;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class RuleParser_rule extends RuleParser_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test5() throws Throwable {\n    Parser<Rule> parser0 = RuleParser.rule();\n    Parser<Rule> parser1 = RuleParser.unit(parser0);\n    assertFalse(parser1.equals((Object) parser0));\n}\n}"
    },
    {
        "original_path": "xuender_unidecode###xuender_unidecode/src/test/java/me/xuender/unidecode/UnidecodeTest###testInitials",
        "generated_path": "Unidecode_initials.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package me.xuender.unidecode;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.io.UnsupportedEncodingException;\nimport me.xuender.unidecode.Unidecode;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class Unidecode_initials extends Unidecode_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    String string0 = Unidecode.initials((String) null);\n    assertEquals(\"\", string0);\n}\n}"
    },
    {
        "original_path": "xuender_unidecode###xuender_unidecode/src/test/java/me/xuender/unidecode/UnidecodeTest###testDecode",
        "generated_path": "Unidecode_decode.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package me.xuender.unidecode;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.io.UnsupportedEncodingException;\nimport me.xuender.unidecode.Unidecode;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class Unidecode_decode extends Unidecode_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    String string0 = Unidecode.decode(\"v\");\n    assertEquals(\"v\", string0);\n}\n}"
    },
    {
        "original_path": "FINRAOS_DataGenerator###FINRAOS_DataGenerator/dg-core/src/test/java/org/finra/datagenerator/engine/scxml/tags/NWiseExtensionTest###expandTupleIntoTestCasesTest",
        "generated_path": "NWiseExtension_expandTupleIntoTestCases.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.finra.datagenerator.engine.scxml.tags;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.util.HashMap;\nimport java.util.LinkedHashSet;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.scxml.SCInstance;\nimport org.apache.commons.scxml.env.SimpleDispatcher;\nimport org.apache.commons.scxml.env.SimpleErrorReporter;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.finra.datagenerator.engine.scxml.tags.NWiseExtension;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class NWiseExtension_expandTupleIntoTestCases extends NWiseExtension_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    NWiseExtension nWiseExtension0 = new NWiseExtension();\n    assertEquals(\"org.finra.datagenerator\", nWiseExtension0.getTagNameSpace());\n    assertEquals(\"nwise\", nWiseExtension0.getTagName());\n    assertNotNull(nWiseExtension0);\n    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();\n    assertTrue(linkedHashSet0.isEmpty());\n    assertEquals(0, linkedHashSet0.size());\n    assertNotNull(linkedHashSet0);\n    String[] stringArray0 = new String[4];\n    boolean boolean0 = linkedHashSet0.add(\"2@F;t\\\"m>\");\n    assertTrue(boolean0);\n    assertTrue(linkedHashSet0.contains(\"2@F;t\\\"m>\"));\n    assertFalse(linkedHashSet0.isEmpty());\n    assertEquals(1, linkedHashSet0.size());\n    HashMap<String, String[]> hashMap0 = new HashMap<String, String[]>();\n    assertTrue(hashMap0.isEmpty());\n    assertEquals(0, hashMap0.size());\n    assertNotNull(hashMap0);\n    String[] stringArray1 = hashMap0.put(\"2@F;t\\\"m>\", stringArray0);\n    assertEquals(4, stringArray0.length);\n    assertFalse(hashMap0.isEmpty());\n    assertEquals(1, hashMap0.size());\n    assertNull(stringArray1);\n    List<Map<String, String>> list0 = nWiseExtension0.expandTupleIntoTestCases(linkedHashSet0, hashMap0);\n    assertTrue(linkedHashSet0.contains(\"2@F;t\\\"m>\"));\n    assertEquals(\"org.finra.datagenerator\", nWiseExtension0.getTagNameSpace());\n    assertEquals(\"nwise\", nWiseExtension0.getTagName());\n    assertFalse(linkedHashSet0.isEmpty());\n    assertEquals(1, linkedHashSet0.size());\n    assertFalse(hashMap0.isEmpty());\n    assertEquals(1, hashMap0.size());\n    assertFalse(list0.isEmpty());\n    assertEquals(4, list0.size());\n    assertNotNull(list0);\n}\n}"
    },
    {
        "original_path": "FINRAOS_DataGenerator###FINRAOS_DataGenerator/dg-core/src/test/java/org/finra/datagenerator/engine/scxml/tags/NWiseExtensionTest###makeNWiseTuplesTest",
        "generated_path": "NWiseExtension_makeNWiseTuples.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.finra.datagenerator.engine.scxml.tags;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.util.HashMap;\nimport java.util.LinkedHashSet;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.scxml.SCInstance;\nimport org.apache.commons.scxml.env.SimpleDispatcher;\nimport org.apache.commons.scxml.env.SimpleErrorReporter;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.finra.datagenerator.engine.scxml.tags.NWiseExtension;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class NWiseExtension_makeNWiseTuples extends NWiseExtension_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    NWiseExtension nWiseExtension0 = new NWiseExtension();\n    assertEquals(\"nwise\", nWiseExtension0.getTagName());\n    assertEquals(\"org.finra.datagenerator\", nWiseExtension0.getTagNameSpace());\n    assertNotNull(nWiseExtension0);\n    String[] stringArray0 = new String[18];\n    // Undeclared exception!\n    nWiseExtension0.makeNWiseTuples(stringArray0, 10);\n}\n}"
    },
    {
        "original_path": "FINRAOS_DataGenerator###FINRAOS_DataGenerator/dg-core/src/test/java/org/finra/datagenerator/engine/scxml/tags/NWiseExtensionTest###pipelinePossibleStatesTest",
        "generated_path": "NWiseExtension_pipelinePossibleStates.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.finra.datagenerator.engine.scxml.tags;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.util.HashMap;\nimport java.util.LinkedHashSet;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.scxml.SCInstance;\nimport org.apache.commons.scxml.env.SimpleDispatcher;\nimport org.apache.commons.scxml.env.SimpleErrorReporter;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.finra.datagenerator.engine.scxml.tags.NWiseExtension;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class NWiseExtension_pipelinePossibleStates extends NWiseExtension_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void NWiseExtension_pipelinePossibleStates() throws Throwable {\n    NWiseExtension nWiseExtension0 = new NWiseExtension();\n    assertEquals(\"nwise\", nWiseExtension0.getTagName());\n    assertEquals(\"org.finra.datagenerator\", nWiseExtension0.getTagNameSpace());\n    assertNotNull(nWiseExtension0);\n    NWiseExtension.NWiseAction nWiseExtension_NWiseAction0 = new NWiseExtension.NWiseAction();\n    assertNull(nWiseExtension_NWiseAction0.getN());\n    assertNull(nWiseExtension_NWiseAction0.getCoVariables());\n    assertNotNull(nWiseExtension_NWiseAction0);\n    nWiseExtension_NWiseAction0.setCoVariables(\"}X\\\"<U* 3Ku\");\n    assertNull(nWiseExtension_NWiseAction0.getN());\n    assertEquals(\"}X\\\"<U* 3Ku\", nWiseExtension_NWiseAction0.getCoVariables());\n    String[] stringArray0 = new String[7];\n    List<Map<String, String>> list0 = nWiseExtension0.produceNWise(0, stringArray0, (Map<String, String[]>) null);\n    assertEquals(7, stringArray0.length);\n    assertEquals(\"nwise\", nWiseExtension0.getTagName());\n    assertEquals(\"org.finra.datagenerator\", nWiseExtension0.getTagNameSpace());\n    assertEquals(1, list0.size());\n    assertFalse(list0.isEmpty());\n    assertNotNull(list0);\n    // Undeclared exception!\n    try {\n        nWiseExtension0.pipelinePossibleStates(nWiseExtension_NWiseAction0, list0);\n        fail(\"Expecting exception: NumberFormatException\");\n    } catch (NumberFormatException e) {\n        //\n        // null\n        //\n        verifyException(\"java.lang.Integer\", e);\n    }\n}\n}"
    },
    {
        "original_path": "FINRAOS_DataGenerator###FINRAOS_DataGenerator/dg-core/src/test/java/org/finra/datagenerator/engine/scxml/tags/NWiseExtensionTest###produceNWiseTest",
        "generated_path": "NWiseExtension_produceNWise.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.finra.datagenerator.engine.scxml.tags;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.util.HashMap;\nimport java.util.LinkedHashSet;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.scxml.SCInstance;\nimport org.apache.commons.scxml.env.SimpleDispatcher;\nimport org.apache.commons.scxml.env.SimpleErrorReporter;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.finra.datagenerator.engine.scxml.tags.NWiseExtension;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class NWiseExtension_produceNWise extends NWiseExtension_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    NWiseExtension nWiseExtension0 = new NWiseExtension();\n    assertEquals(\"nwise\", nWiseExtension0.getTagName());\n    assertEquals(\"org.finra.datagenerator\", nWiseExtension0.getTagNameSpace());\n    assertNotNull(nWiseExtension0);\n    String[] stringArray0 = new String[0];\n    HashMap<String, String[]> hashMap0 = new HashMap<String, String[]>();\n    assertEquals(0, hashMap0.size());\n    assertTrue(hashMap0.isEmpty());\n    assertNotNull(hashMap0);\n    List<Map<String, String>> list0 = nWiseExtension0.produceNWise(1, stringArray0, hashMap0);\n    assertEquals(0, stringArray0.length);\n    assertEquals(\"nwise\", nWiseExtension0.getTagName());\n    assertEquals(\"org.finra.datagenerator\", nWiseExtension0.getTagNameSpace());\n    assertEquals(0, hashMap0.size());\n    assertTrue(hashMap0.isEmpty());\n    assertTrue(list0.isEmpty());\n    assertEquals(0, list0.size());\n    assertNotNull(list0);\n}\n}"
    },
    {
        "original_path": "arouel_uadetector###arouel_uadetector/modules/uadetector-core/src/test/java/net/sf/uadetector/UserAgentTest###testToString",
        "generated_path": "UserAgent_toString.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package net.sf.uadetector;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport net.sf.uadetector.DeviceCategory;\nimport net.sf.uadetector.OperatingSystem;\nimport net.sf.uadetector.OperatingSystemFamily;\nimport net.sf.uadetector.ReadableDeviceCategory;\nimport net.sf.uadetector.ReadableOperatingSystem;\nimport net.sf.uadetector.UserAgent;\nimport net.sf.uadetector.UserAgentFamily;\nimport net.sf.uadetector.UserAgentType;\nimport net.sf.uadetector.VersionNumber;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class UserAgent_toString extends UserAgent_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test48() throws Throwable {\n    UserAgent userAgent0 = UserAgent.EMPTY;\n    String string0 = userAgent0.toString();\n    assertEquals(\"UserAgent [deviceCategory=DeviceCategory [category=UNKNOWN, icon=, infoUrl=, name=], family=UNKNOWN, icon=, name=unknown, operatingSystem=OperatingSystem [family=UNKNOWN, familyName=unknown, icon=unknown.png, name=unknown, producer=, producerUrl=, url=, versionNumber=VersionNumber [groups=[, , ], extension=]], producer=, producerUrl=, type=UNKNOWN, typeName=, url=, versionNumber=VersionNumber [groups=[, , ], extension=]]\", string0);\n}\n}"
    },
    {
        "original_path": "arouel_uadetector###arouel_uadetector/modules/uadetector-core/src/test/java/net/sf/uadetector/OperatingSystemTest###testHashCode",
        "generated_path": "OperatingSystem_hashCode.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package net.sf.uadetector;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport net.sf.uadetector.OperatingSystem;\nimport net.sf.uadetector.OperatingSystemFamily;\nimport net.sf.uadetector.VersionNumber;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class OperatingSystem_hashCode extends OperatingSystem_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    OperatingSystemFamily operatingSystemFamily0 = OperatingSystemFamily.QNX;\n    VersionNumber versionNumber0 = VersionNumber.parseLastVersionNumber(\", url=\");\n    OperatingSystem operatingSystem0 = new OperatingSystem(operatingSystemFamily0, \"\", \"OperatingSystem [family=\", \"\", \"OperatingSystem [family=\", \"\", \"-B~ ;X']NHnj\", versionNumber0);\n    operatingSystem0.hashCode();\n    assertEquals(\"OperatingSystem [family=\", operatingSystem0.getProducer());\n    assertEquals(\"\", operatingSystem0.getName());\n    assertEquals(\"\", operatingSystem0.getProducerUrl());\n    assertEquals(\"\", operatingSystem0.getFamilyName());\n    assertEquals(\"OperatingSystem [family=\", operatingSystem0.getIcon());\n    assertEquals(\"-B~ ;X']NHnj\", operatingSystem0.getUrl());\n}\n}"
    },
    {
        "original_path": "arouel_uadetector###arouel_uadetector/modules/uadetector-core/src/test/java/net/sf/uadetector/UserAgentTest###testHashCode",
        "generated_path": "UserAgent_hashCode.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package net.sf.uadetector;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport net.sf.uadetector.DeviceCategory;\nimport net.sf.uadetector.OperatingSystem;\nimport net.sf.uadetector.OperatingSystemFamily;\nimport net.sf.uadetector.ReadableDeviceCategory;\nimport net.sf.uadetector.ReadableOperatingSystem;\nimport net.sf.uadetector.UserAgent;\nimport net.sf.uadetector.UserAgentFamily;\nimport net.sf.uadetector.UserAgentType;\nimport net.sf.uadetector.VersionNumber;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class UserAgent_hashCode extends UserAgent_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    DeviceCategory deviceCategory0 = DeviceCategory.EMPTY;\n    UserAgentFamily userAgentFamily0 = UserAgentFamily.ICE_BROWSER;\n    OperatingSystem operatingSystem0 = OperatingSystem.EMPTY;\n    UserAgentType userAgentType0 = UserAgentType.MOBILE_BROWSER;\n    OperatingSystemFamily operatingSystemFamily0 = OperatingSystemFamily.MAC_OS;\n    VersionNumber versionNumber0 = VersionNumber.parseOperatingSystemVersion(operatingSystemFamily0, \"wfM)e\");\n    UserAgent userAgent0 = new UserAgent(deviceCategory0, userAgentFamily0, \"(os'~/;LCh?2))k3 UK\", \"(os'~/;LCh?2))k3 UK\", operatingSystem0, \"LIJIT\", \":sN1\u007f_KVn>\", userAgentType0, \":sN1\u007f_KVn>\", \"\u007f9CaXkagq$#Ff\", versionNumber0);\n    userAgent0.hashCode();\n    assertEquals(\"LIJIT\", userAgent0.getProducer());\n    assertEquals(\"(os'~/;LCh?2))k3 UK\", userAgent0.getIcon());\n    assertEquals(\":sN1\u007f_KVn>\", userAgent0.getTypeName());\n    assertEquals(\"\u007f9CaXkagq$#Ff\", userAgent0.getUrl());\n    assertEquals(\":sN1\u007f_KVn>\", userAgent0.getProducerUrl());\n    assertEquals(\"(os'~/;LCh?2))k3 UK\", userAgent0.getName());\n}\n}"
    },
    {
        "original_path": "arouel_uadetector###arouel_uadetector/modules/uadetector-core/src/test/java/net/sf/uadetector/OperatingSystemTest###testToString",
        "generated_path": "OperatingSystem_toString.java",
        "Compile_result": 1,
        "Test_result": 0,
        "Gen_Test": "package net.sf.uadetector;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport net.sf.uadetector.OperatingSystem;\nimport net.sf.uadetector.OperatingSystemFamily;\nimport net.sf.uadetector.VersionNumber;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class OperatingSystem_toString extends OperatingSystem_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test24() throws Throwable {\n    OperatingSystem operatingSystem0 = OperatingSystem.EMPTY;\n    String string0 = operatingSystem0.EMPTY.toString();\n    assertEquals(\"OperatingSystem [family=UNKNOWN, familyName=unknown, icon=unknown.png, name=unknown, producer=, producerUrl=, url=, versionNumber=VersionNumber [groups=[, , ], extension=]]\", string0);\n}\n}"
    },
    {
        "original_path": "arouel_uadetector###arouel_uadetector/modules/uadetector-core/src/test/java/net/sf/uadetector/internal/data/DataTest###testToString",
        "generated_path": "Data_toString.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package net.sf.uadetector.internal.data;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.util.Comparator;\nimport java.util.HashMap;\nimport java.util.LinkedHashSet;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.SortedMap;\nimport java.util.SortedSet;\nimport java.util.TreeMap;\nimport java.util.TreeSet;\nimport java.util.function.BiFunction;\nimport java.util.regex.Pattern;\nimport net.sf.uadetector.UserAgentFamily;\nimport net.sf.uadetector.internal.data.Data;\nimport net.sf.uadetector.internal.data.domain.Browser;\nimport net.sf.uadetector.internal.data.domain.BrowserOperatingSystemMapping;\nimport net.sf.uadetector.internal.data.domain.BrowserPattern;\nimport net.sf.uadetector.internal.data.domain.BrowserType;\nimport net.sf.uadetector.internal.data.domain.Device;\nimport net.sf.uadetector.internal.data.domain.DevicePattern;\nimport net.sf.uadetector.internal.data.domain.OperatingSystem;\nimport net.sf.uadetector.internal.data.domain.OperatingSystemPattern;\nimport net.sf.uadetector.internal.data.domain.Robot;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class Data_toString extends Data_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test18() throws Throwable {\n    Data data0 = Data.EMPTY;\n    String string0 = data0.EMPTY.toString();\n    assertEquals(\"Data [browsers=[], browserPatterns={}, browserTypes={}, patternToBrowserMap={}, browserToOperatingSystemMap=[], operatingSystems=[], operatingSystemPatterns={}, patternToOperatingSystemMap={}, robots=[], devices=[], devicePatterns={}, patternToDeviceMap={}, version=]\", string0);\n}\n}"
    },
    {
        "original_path": "hypercube1024_firefly###hypercube1024_firefly/firefly-common/src/test/java/com/fireflysource/common/string/SearchPatternTest###testEndsWith",
        "generated_path": "SearchPattern_endsWith.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.fireflysource.common.string;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.fireflysource.common.string.SearchPattern;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class SearchPattern_endsWith extends SearchPattern_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    byte[] byteArray0 = new byte[9];\n    byteArray0[0] = (byte) 1;\n    SearchPattern searchPattern0 = SearchPattern.compile(byteArray0);\n    searchPattern0.endsWith(byteArray0, (byte) 1, (byte) 1);\n}\n}"
    },
    {
        "original_path": "hypercube1024_firefly###hypercube1024_firefly/firefly-common/src/test/java/com/fireflysource/common/collection/list/TestLazyList###testToStringArray",
        "generated_path": "LazyList_toStringArray.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.fireflysource.common.collection.list;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.fireflysource.common.collection.list.LazyList;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.ConcurrentModificationException;\nimport java.util.Iterator;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.ListIterator;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class LazyList_toStringArray extends LazyList_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test50() throws Throwable {\n    ArrayList<String> arrayList0 = new ArrayList<String>();\n    LazyList.add((Object) arrayList0, (Object) null);\n    LazyList.toStringArray(arrayList0);\n    assertEquals(1, arrayList0.size());\n    assertFalse(arrayList0.isEmpty());\n}\n}"
    },
    {
        "original_path": "hypercube1024_firefly###hypercube1024_firefly/firefly-net/src/test/java/com/fireflysource/net/http/common/model/HttpFieldsTest###testGetCSV",
        "generated_path": "HttpFields_getCSV.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.fireflysource.net.http.common.model;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.fireflysource.net.http.common.model.HttpField;\nimport com.fireflysource.net.http.common.model.HttpFields;\nimport com.fireflysource.net.http.common.model.HttpHeader;\nimport com.fireflysource.net.http.common.model.HttpHeaderValue;\nimport com.fireflysource.net.http.common.model.QuotedCSV;\nimport java.util.Enumeration;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.NoSuchElementException;\nimport java.util.function.Consumer;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.System;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class HttpFields_getCSV extends HttpFields_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test000() throws Throwable {\n    HttpFields httpFields0 = new HttpFields(2420);\n    httpFields0.contains(\"com.fireflysource.net.http.common.model.HttpFields$Itr\", \"\");\n    httpFields0.iterator();\n    HttpFields httpFields1 = new HttpFields(0);\n    httpFields0.addAll(httpFields1);\n    httpFields0.containsKey(\"com.fireflysource.net.http.common.model.HttpFields$Itr\");\n    httpFields0.remove(\"com.fireflysource.net.http.common.model.HttpFields$Itr\");\n    HttpHeader httpHeader0 = HttpHeader.IF_MATCH;\n    httpFields0.remove(httpHeader0);\n    List<String> list0 = httpFields0.getCSV(httpHeader0, false);\n    httpFields0.put(httpHeader0, \"\");\n    httpFields0.add(httpFields1);\n    HttpFields httpFields2 = new HttpFields(httpFields0);\n    httpFields0.equals(httpFields2);\n    QuotedCSV quotedCSV0 = mock(QuotedCSV.class, new ViolatedAssumptionAnswer());\n    doReturn(list0, list0, list0, list0, list0).when(quotedCSV0).getValues();\n    doReturn(false).when(quotedCSV0).isEmpty();\n    String[] stringArray0 = new String[7];\n    stringArray0[0] = \"com.fireflysource.net.http.common.model.HttpFields$Itr\";\n    stringArray0[1] = \"\";\n    stringArray0[2] = \"com.fireflysource.net.http.common.model.HttpFields$Itr\";\n    stringArray0[3] = \"com.fireflysource.net.http.common.model.HttpFields$Itr\";\n    stringArray0[4] = \"com.fireflysource.net.http.common.model.HttpFields$Itr\";\n    stringArray0[5] = \"com.fireflysource.net.http.common.model.HttpFields$Itr\";\n    stringArray0[6] = \"\";\n    httpFields2.addCSV(quotedCSV0, stringArray0);\n}\n}"
    },
    {
        "original_path": "hypercube1024_firefly###hypercube1024_firefly/firefly-common/src/test/java/com/fireflysource/common/object/TestTypeUtils###convertHexDigitTest",
        "generated_path": "TypeUtils_convertHexDigit.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.fireflysource.common.object;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.fireflysource.common.object.TypeUtils;\nimport java.io.CharArrayWriter;\nimport java.io.IOException;\nimport java.io.PipedReader;\nimport java.io.PipedWriter;\nimport java.lang.reflect.Method;\nimport java.nio.BufferOverflowException;\nimport java.nio.CharBuffer;\nimport java.nio.ReadOnlyBufferException;\nimport java.util.List;\nimport java.util.Locale;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.io.MockPrintStream;\nimport org.evosuite.runtime.mock.java.io.MockPrintWriter;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class TypeUtils_convertHexDigit extends TypeUtils_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    int int0 = TypeUtils.convertHexDigit((int) (byte) 70);\n    assertEquals(15, int0);\n}\n}"
    },
    {
        "original_path": "hypercube1024_firefly###hypercube1024_firefly/firefly-common/src/test/java/com/fireflysource/common/object/TestTypeUtils###testIsFalse",
        "generated_path": "TypeUtils_isFalse.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.fireflysource.common.object;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.fireflysource.common.object.TypeUtils;\nimport java.io.CharArrayWriter;\nimport java.io.IOException;\nimport java.io.PipedReader;\nimport java.io.PipedWriter;\nimport java.lang.reflect.Method;\nimport java.nio.BufferOverflowException;\nimport java.nio.CharBuffer;\nimport java.nio.ReadOnlyBufferException;\nimport java.util.List;\nimport java.util.Locale;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.io.MockPrintStream;\nimport org.evosuite.runtime.mock.java.io.MockPrintWriter;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class TypeUtils_isFalse extends TypeUtils_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test59() throws Throwable {\n    Boolean boolean0 = Boolean.valueOf(false);\n    assertNotNull(boolean0);\n    assertFalse(boolean0);\n    boolean boolean1 = TypeUtils.isFalse(boolean0);\n    assertTrue(boolean1);\n}\n}"
    },
    {
        "original_path": "hypercube1024_firefly###hypercube1024_firefly/firefly-common/src/test/java/com/fireflysource/common/string/TestQuotedStringTokenizer###testQuoteIfNeeded",
        "generated_path": "QuotedStringTokenizer_quoteIfNeeded.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.fireflysource.common.string;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.fireflysource.common.string.QuotedStringTokenizer;\nimport java.io.BufferedOutputStream;\nimport java.io.BufferedWriter;\nimport java.io.ByteArrayOutputStream;\nimport java.io.CharArrayWriter;\nimport java.io.DataOutputStream;\nimport java.io.File;\nimport java.io.FileDescriptor;\nimport java.io.FilterOutputStream;\nimport java.io.ObjectOutputStream;\nimport java.io.OutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.PipedOutputStream;\nimport java.io.PipedReader;\nimport java.io.PipedWriter;\nimport java.io.PrintStream;\nimport java.io.PrintWriter;\nimport java.io.StringWriter;\nimport java.io.UnsupportedEncodingException;\nimport java.io.Writer;\nimport java.net.URI;\nimport java.net.URL;\nimport java.nio.Buffer;\nimport java.nio.BufferOverflowException;\nimport java.nio.CharBuffer;\nimport java.nio.ReadOnlyBufferException;\nimport java.util.Locale;\nimport java.util.NoSuchElementException;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.Future;\nimport java.util.concurrent.TimeUnit;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.io.MockFile;\nimport org.evosuite.runtime.mock.java.io.MockFileOutputStream;\nimport org.evosuite.runtime.mock.java.io.MockFileWriter;\nimport org.evosuite.runtime.mock.java.io.MockPrintStream;\nimport org.evosuite.runtime.mock.java.io.MockPrintWriter;\nimport org.evosuite.runtime.mock.java.net.MockURI;\nimport org.evosuite.runtime.testdata.EvoSuiteFile;\nimport org.evosuite.runtime.testdata.FileSystemHandling;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class QuotedStringTokenizer_quoteIfNeeded extends QuotedStringTokenizer_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test001() throws Throwable {\n    QuotedStringTokenizer quotedStringTokenizer0 = new QuotedStringTokenizer(\"-nDVs=Fn~~WR:.l:R \", \"-nDVs=Fn~~WR:.l:R \", true, true);\n    assertTrue(quotedStringTokenizer0.getSingle());\n    assertTrue(quotedStringTokenizer0.getDouble());\n    assertEquals((-1), quotedStringTokenizer0.countTokens());\n    assertNotNull(quotedStringTokenizer0);\n    String string0 = quotedStringTokenizer0.nextToken();\n    assertTrue(quotedStringTokenizer0.getSingle());\n    assertTrue(quotedStringTokenizer0.getDouble());\n    assertEquals((-1), quotedStringTokenizer0.countTokens());\n    assertEquals(\"-\", string0);\n    assertNotNull(string0);\n    boolean boolean0 = quotedStringTokenizer0.hasMoreTokens();\n    assertTrue(quotedStringTokenizer0.getSingle());\n    assertTrue(quotedStringTokenizer0.getDouble());\n    assertEquals((-1), quotedStringTokenizer0.countTokens());\n    assertTrue(boolean0);\n    String string1 = QuotedStringTokenizer.quoteIfNeeded(\"\", \"com.fireflysource.common.object.TypeUtils\");\n    assertFalse(string1.equals((Object) string0));\n    assertEquals(\"\\\"\\\"\", string1);\n    assertNotNull(string1);\n    String string2 = quotedStringTokenizer0.nextToken(\"-nDVs=Fn~~WR:.l:R \");\n    assertFalse(string2.equals((Object) string1));\n    assertFalse(string2.equals((Object) string0));\n    assertTrue(quotedStringTokenizer0.getSingle());\n    assertTrue(quotedStringTokenizer0.getDouble());\n    assertEquals((-1), quotedStringTokenizer0.countTokens());\n    assertEquals(\"n\", string2);\n    assertNotNull(string2);\n    String string3 = quotedStringTokenizer0.nextToken(\"n\");\n    assertTrue(string3.equals((Object) string2));\n    assertFalse(string3.equals((Object) string0));\n    assertFalse(string3.equals((Object) string1));\n    assertTrue(quotedStringTokenizer0.getSingle());\n    assertTrue(quotedStringTokenizer0.getDouble());\n    assertEquals((-1), quotedStringTokenizer0.countTokens());\n    assertEquals(\"n\", string3);\n    assertNotNull(string3);\n    boolean boolean1 = quotedStringTokenizer0.hasMoreTokens();\n    assertTrue(boolean1 == boolean0);\n    assertTrue(quotedStringTokenizer0.getSingle());\n    assertTrue(quotedStringTokenizer0.getDouble());\n    assertEquals((-1), quotedStringTokenizer0.countTokens());\n    assertTrue(boolean1);\n    boolean boolean2 = QuotedStringTokenizer.isQuoted(\"Can't use quotes as delimiters: \");\n    assertFalse(boolean2 == boolean0);\n    assertFalse(boolean2 == boolean1);\n    assertFalse(boolean2);\n    boolean boolean3 = quotedStringTokenizer0.hasMoreTokens();\n    assertTrue(boolean3 == boolean0);\n    assertTrue(boolean3 == boolean1);\n    assertFalse(boolean3 == boolean2);\n    assertTrue(quotedStringTokenizer0.getSingle());\n    assertTrue(quotedStringTokenizer0.getDouble());\n    assertEquals((-1), quotedStringTokenizer0.countTokens());\n    assertTrue(boolean3);\n    boolean boolean4 = QuotedStringTokenizer.isQuoted(\"n\");\n    assertFalse(boolean4 == boolean1);\n    assertFalse(boolean4 == boolean0);\n    assertTrue(boolean4 == boolean2);\n    assertFalse(boolean4 == boolean3);\n    assertFalse(boolean4);\n    String string4 = QuotedStringTokenizer.quoteIfNeeded(\"Can't use quotes as delimiters: \", \"O+COd+U\");\n    assertFalse(string4.equals((Object) string1));\n    assertFalse(string4.equals((Object) string0));\n    assertFalse(string4.equals((Object) string2));\n    assertFalse(string4.equals((Object) string3));\n    assertEquals(\"\\\"Can't use quotes as delimiters: \\\"\", string4);\n    assertNotNull(string4);\n    boolean boolean5 = QuotedStringTokenizer.isQuoted(\"\\\"\\\"\");\n    assertTrue(boolean5 == boolean1);\n    assertTrue(boolean5 == boolean3);\n    assertTrue(boolean5 == boolean0);\n    assertFalse(boolean5 == boolean4);\n    assertFalse(boolean5 == boolean2);\n    assertTrue(boolean5);\n    String string5 = QuotedStringTokenizer.unquoteOnly(\"reactor.core.publisher.Operators\", true);\n    assertFalse(string5.equals((Object) string0));\n    assertFalse(string5.equals((Object) string2));\n    assertFalse(string5.equals((Object) string1));\n    assertFalse(string5.equals((Object) string3));\n    assertFalse(string5.equals((Object) string4));\n    assertEquals(\"reactor.core.publisher.Operators\", string5);\n    assertNotNull(string5);\n    String string6 = QuotedStringTokenizer.quoteIfNeeded(\"reactor.core.publisher.Operators\", \".7q@4;\");\n    assertFalse(string6.equals((Object) string1));\n    assertFalse(string6.equals((Object) string0));\n    assertFalse(string6.equals((Object) string2));\n    assertFalse(string6.equals((Object) string4));\n    assertFalse(string6.equals((Object) string5));\n    assertFalse(string6.equals((Object) string3));\n    assertEquals(\"\\\"reactor.core.publisher.Operators\\\"\", string6);\n    assertNotNull(string6);\n    boolean boolean6 = quotedStringTokenizer0.hasMoreTokens();\n    assertFalse(boolean6 == boolean2);\n    assertTrue(boolean6 == boolean1);\n    assertTrue(boolean6 == boolean0);\n    assertTrue(boolean6 == boolean5);\n    assertFalse(boolean6 == boolean4);\n    assertTrue(boolean6 == boolean3);\n    assertTrue(quotedStringTokenizer0.getSingle());\n    assertTrue(quotedStringTokenizer0.getDouble());\n    assertEquals((-1), quotedStringTokenizer0.countTokens());\n    assertTrue(boolean6);\n    String string7 = QuotedStringTokenizer.unquote(\"Can't use quotes as delimiters: \", false);\n    assertFalse(string7.equals((Object) string3));\n    assertFalse(string7.equals((Object) string4));\n    assertFalse(string7.equals((Object) string6));\n    assertFalse(string7.equals((Object) string5));\n    assertFalse(string7.equals((Object) string1));\n    assertFalse(string7.equals((Object) string0));\n    assertFalse(string7.equals((Object) string2));\n    assertEquals(\"Can't use quotes as delimiters: \", string7);\n    assertNotNull(string7);\n}\n}"
    },
    {
        "original_path": "hypercube1024_firefly###hypercube1024_firefly/firefly-common/src/test/java/com/fireflysource/common/string/TestStringUtils###testReplace",
        "generated_path": "StringUtils_replace.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.fireflysource.common.string;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.fireflysource.common.string.StringUtils;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.function.BiConsumer;\nimport java.util.function.BiFunction;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class StringUtils_replace extends StringUtils_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test003() throws Throwable {\n    boolean boolean0 = StringUtils.hasLength((CharSequence) \"reactor.core.publisher.FluxZip$PairwiseZipper\");\n    assertTrue(boolean0);\n    byte[] byteArray0 = StringUtils.getBytes(\"reactor.core.publisher.FluxZip$PairwiseZipper\");\n    assertEquals(45, byteArray0.length);\n    assertNotNull(byteArray0);\n    byte[] byteArray1 = StringUtils.getBytes(\"reactor.core.publisher.FluxZip$PairwiseZipper\");\n    assertEquals(45, byteArray1.length);\n    assertNotSame(byteArray1, byteArray0);\n    assertNotNull(byteArray1);\n    assertFalse(byteArray1.equals((Object) byteArray0));\n    String string0 = StringUtils.getFilenameExtension(\"reactor.core.publisher.FluxZip$PairwiseZipper\");\n    assertEquals(\"FluxZip$PairwiseZipper\", string0);\n    assertNotNull(string0);\n    boolean boolean1 = StringUtils.hasLength((CharSequence) \"reactor.core.publisher.FluxZip$PairwiseZipper\");\n    assertTrue(boolean1);\n    assertTrue(boolean1 == boolean0);\n    byte[] byteArray2 = StringUtils.getUtf8Bytes(\"reactor.core.publisher.MonoDelaySubscription\");\n    assertEquals(44, byteArray2.length);\n    assertNotSame(byteArray2, byteArray1);\n    assertNotSame(byteArray2, byteArray0);\n    assertNotNull(byteArray2);\n    assertFalse(byteArray2.equals((Object) byteArray1));\n    assertFalse(byteArray2.equals((Object) byteArray0));\n    String string1 = StringUtils.replace(\"FluxZip$PairwiseZipper\", (Object[]) null);\n    assertEquals(\"FluxZip$PairwiseZipper\", string1);\n    assertNotNull(string1);\n    assertTrue(string1.equals((Object) string0));\n    HashMap<String, Object> hashMap0 = new HashMap<String, Object>();\n    assertEquals(0, hashMap0.size());\n    assertTrue(hashMap0.isEmpty());\n    assertNotNull(hashMap0);\n    String string2 = StringUtils.replace(\"FluxZip$PairwiseZipper\", (Map<String, Object>) hashMap0);\n    assertEquals(0, hashMap0.size());\n    assertTrue(hashMap0.isEmpty());\n    assertEquals(\"FluxZip$PairwiseZipper\", string2);\n    assertNotNull(string2);\n    assertTrue(string2.equals((Object) string0));\n    assertTrue(string2.equals((Object) string1));\n    byte[] byteArray3 = StringUtils.getUtf8Bytes(\"FluxZip$PairwiseZipper\");\n    assertEquals(22, byteArray3.length);\n    assertNotSame(byteArray3, byteArray1);\n    assertNotSame(byteArray3, byteArray2);\n    assertNotSame(byteArray3, byteArray0);\n    assertNotNull(byteArray3);\n    assertFalse(byteArray3.equals((Object) byteArray1));\n    assertFalse(byteArray3.equals((Object) byteArray2));\n    assertFalse(byteArray3.equals((Object) byteArray0));\n    byte[] byteArray4 = StringUtils.getUtf8Bytes(\"9},Q9H\");\n    assertArrayEquals(new byte[] { (byte) 57, (byte) 125, (byte) 44, (byte) 81, (byte) 57, (byte) 72 }, byteArray4);\n    assertEquals(6, byteArray4.length);\n    assertNotSame(byteArray4, byteArray3);\n    assertNotSame(byteArray4, byteArray2);\n    assertNotSame(byteArray4, byteArray1);\n    assertNotSame(byteArray4, byteArray0);\n    assertNotNull(byteArray4);\n    assertFalse(byteArray4.equals((Object) byteArray3));\n    assertFalse(byteArray4.equals((Object) byteArray2));\n    assertFalse(byteArray4.equals((Object) byteArray1));\n    assertFalse(byteArray4.equals((Object) byteArray0));\n    Object[] objectArray0 = new Object[1];\n    objectArray0[0] = (Object) \"FluxZip$PairwiseZipper\";\n    String string3 = StringUtils.replace(\"{}\", objectArray0);\n    assertEquals(1, objectArray0.length);\n    assertEquals(\"FluxZip$PairwiseZipper\", string3);\n    assertNotNull(string3);\n    assertTrue(string3.equals((Object) string2));\n    assertTrue(string3.equals((Object) string1));\n    assertTrue(string3.equals((Object) string0));\n    HashMap<String, Object> hashMap1 = new HashMap<String, Object>();\n    assertTrue(hashMap1.isEmpty());\n    assertEquals(0, hashMap1.size());\n    assertNotNull(hashMap1);\n    assertTrue(hashMap1.equals((Object) hashMap0));\n    String string4 = StringUtils.replace(\"{}\", (Map<String, Object>) hashMap1);\n    assertTrue(hashMap1.isEmpty());\n    assertEquals(0, hashMap1.size());\n    assertNotSame(hashMap1, hashMap0);\n    assertEquals(\"{}\", string4);\n    assertNotNull(string4);\n    assertTrue(hashMap1.equals((Object) hashMap0));\n    assertFalse(string4.equals((Object) string1));\n    assertFalse(string4.equals((Object) string0));\n    assertFalse(string4.equals((Object) string3));\n    assertFalse(string4.equals((Object) string2));\n    String string5 = StringUtils.asciiToLowerCase(\"48^[\u007f)x-\");\n    assertEquals(\"48^[\u007f)x-\", string5);\n    assertNotNull(string5);\n    assertFalse(string5.equals((Object) string1));\n    assertFalse(string5.equals((Object) string4));\n    assertFalse(string5.equals((Object) string0));\n    assertFalse(string5.equals((Object) string3));\n    assertFalse(string5.equals((Object) string2));\n}\n}"
    },
    {
        "original_path": "hypercube1024_firefly###hypercube1024_firefly/firefly-common/src/test/java/com/fireflysource/common/collection/map/MultiMapTest###testToString",
        "generated_path": "MultiMap_toString.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.fireflysource.common.collection.map;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.fireflysource.common.collection.map.MultiMap;\nimport java.lang.reflect.Array;\nimport java.util.AbstractMap;\nimport java.util.HashMap;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class MultiMap_toString extends MultiMap_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test19() throws Throwable {\n    MultiMap<Integer> multiMap0 = new MultiMap<Integer>();\n    Integer[] integerArray0 = new Integer[4];\n    multiMap0.putValues(\"oMx2p\", integerArray0);\n    String string0 = multiMap0.toString();\n    assertEquals(\"{oMx2p=[null, null, null, null]}\", string0);\n}\n}"
    },
    {
        "original_path": "hypercube1024_firefly###hypercube1024_firefly/firefly-net/src/test/java/com/fireflysource/net/http/common/model/HttpFieldsTest###testGetValues",
        "generated_path": "HttpFields_getValues.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.fireflysource.net.http.common.model;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.fireflysource.net.http.common.model.HttpField;\nimport com.fireflysource.net.http.common.model.HttpFields;\nimport com.fireflysource.net.http.common.model.HttpHeader;\nimport com.fireflysource.net.http.common.model.HttpHeaderValue;\nimport com.fireflysource.net.http.common.model.QuotedCSV;\nimport java.util.Enumeration;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.NoSuchElementException;\nimport java.util.function.Consumer;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.System;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class HttpFields_getValues extends HttpFields_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test008() throws Throwable {\n    HttpFields httpFields0 = new HttpFields();\n    HttpHeader httpHeader0 = HttpHeader.IF_UNMODIFIED_SINCE;\n    HttpHeaderValue httpHeaderValue0 = HttpHeaderValue.PROCESSING;\n    httpFields0.put(httpHeader0, httpHeaderValue0);\n    httpFields0.toString();\n    httpFields0.putLongField(httpHeader0, 0L);\n    HttpHeader httpHeader1 = HttpHeader.SEC_WEBSOCKET_SUBPROTOCOL;\n    httpFields0.remove(httpHeader1);\n    httpFields0.spliterator();\n    List<String> list0 = httpFields0.getValuesList(httpHeader0);\n    httpFields0.put(\"If-Unmodified-Since: 102-processing\\r\\n\\r\\n\", list0);\n    httpFields0.put(\"\", \"\");\n    httpFields0.stream();\n    httpFields0.getValues(\"\");\n    HttpHeader httpHeader2 = HttpHeader.ACCEPT_CHARSET;\n    httpFields0.contains(httpHeader2, \"\");\n}\n}"
    },
    {
        "original_path": "hypercube1024_firefly###hypercube1024_firefly/firefly-net/src/test/java/com/fireflysource/net/websocket/common/utils/QuoteUtilTest###testQuoteIfNeeded",
        "generated_path": "QuoteUtil_quoteIfNeeded.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.fireflysource.net.websocket.common.utils;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.fireflysource.net.http.server.impl.router.handler.CorsConfig;\nimport com.fireflysource.net.websocket.common.utils.QuoteUtil;\nimport java.util.Collection;\nimport java.util.Iterator;\nimport java.util.Set;\nimport java.util.concurrent.LinkedBlockingQueue;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class QuoteUtil_quoteIfNeeded extends QuoteUtil_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    StringBuilder stringBuilder0 = new StringBuilder((CharSequence) \"parseOctetContent({})\");\n    assertEquals(\"parseOctetContent({})\", stringBuilder0.toString());\n    assertNotNull(stringBuilder0);\n    QuoteUtil.quoteIfNeeded(stringBuilder0, \"parseOctetContent({})\", \"\");\n    assertEquals(\"parseOctetContent({})parseOctetContent({})\", stringBuilder0.toString());\n}\n}"
    },
    {
        "original_path": "hypercube1024_firefly###hypercube1024_firefly/firefly-common/src/test/java/com/fireflysource/common/string/TestStringUtils###testHasText",
        "generated_path": "StringUtils_hasText.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.fireflysource.common.string;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.fireflysource.common.string.StringUtils;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.function.BiConsumer;\nimport java.util.function.BiFunction;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class StringUtils_hasText extends StringUtils_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test016() throws Throwable {\n    String string0 = StringUtils.escapeXML(\"/2F&^{dzurp,@v1!?,\");\n    assertEquals(\"/2F&amp;^{dzurp,@v1!?,\", string0);\n    assertNotNull(string0);\n    String string1 = StringUtils.asciiToLowerCase(\"\");\n    assertEquals(\"\", string1);\n    assertNotNull(string1);\n    assertFalse(string1.equals((Object) string0));\n    HashMap<String, Object> hashMap0 = new HashMap<String, Object>();\n    assertEquals(0, hashMap0.size());\n    assertTrue(hashMap0.isEmpty());\n    assertNotNull(hashMap0);\n    Object object0 = hashMap0.put(\"\", \"\");\n    assertEquals(1, hashMap0.size());\n    assertFalse(hashMap0.isEmpty());\n    assertNull(object0);\n    Set<String> set0 = hashMap0.keySet();\n    assertEquals(1, hashMap0.size());\n    assertFalse(hashMap0.isEmpty());\n    assertFalse(set0.isEmpty());\n    assertEquals(1, set0.size());\n    assertFalse(set0.contains(\"/2F&^{dzurp,@v1!?,\"));\n    assertTrue(set0.contains(\"\"));\n    assertNotNull(set0);\n    String string2 = StringUtils.replace(\"ybk[*g1\", (Map<String, Object>) hashMap0);\n    assertEquals(1, hashMap0.size());\n    assertFalse(hashMap0.isEmpty());\n    assertEquals(\"ybk[*g1\", string2);\n    assertNotNull(string2);\n    assertFalse(string2.equals((Object) string1));\n    assertFalse(string2.equals((Object) string0));\n    String[] stringArray0 = StringUtils.splitByWholeSeparator(\"7N1-L3PK-\", \"ybk[*g1\", 0);\n    assertEquals(1, stringArray0.length);\n    assertNotNull(stringArray0);\n    String string3 = StringUtils.replaceStr(\"\", \"rwj)\", (String) null);\n    assertEquals(\"\", string3);\n    assertNotNull(string3);\n    assertTrue(string3.equals((Object) string1));\n    assertFalse(string3.equals((Object) string2));\n    assertFalse(string3.equals((Object) string0));\n    boolean boolean0 = StringUtils.isHex(\"\", 1575, 1194);\n    assertFalse(boolean0);\n    StringUtils.append2digits((StringBuilder) null, 1194);\n    byte[] byteArray0 = StringUtils.getBytes(\"\");\n    assertArrayEquals(new byte[] {}, byteArray0);\n    assertEquals(0, byteArray0.length);\n    assertNotNull(byteArray0);\n    boolean boolean1 = StringUtils.hasText(\"$VALUES\");\n    assertTrue(boolean1);\n    assertFalse(boolean1 == boolean0);\n}\n}"
    },
    {
        "original_path": "hypercube1024_firefly###hypercube1024_firefly/firefly-common/src/test/java/com/fireflysource/common/io/TestBufferUtils###testAddCapacity",
        "generated_path": "BufferUtils_addCapacity.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.fireflysource.common.io;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.fireflysource.common.io.BufferUtils;\nimport java.io.BufferedInputStream;\nimport java.io.BufferedOutputStream;\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.File;\nimport java.io.FileDescriptor;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.io.PipedInputStream;\nimport java.io.PipedOutputStream;\nimport java.io.PrintStream;\nimport java.io.PushbackInputStream;\nimport java.io.SequenceInputStream;\nimport java.net.URI;\nimport java.net.URISyntaxException;\nimport java.nio.Buffer;\nimport java.nio.BufferOverflowException;\nimport java.nio.BufferUnderflowException;\nimport java.nio.ByteBuffer;\nimport java.nio.ByteOrder;\nimport java.nio.CharBuffer;\nimport java.nio.DoubleBuffer;\nimport java.nio.IntBuffer;\nimport java.nio.InvalidMarkException;\nimport java.nio.LongBuffer;\nimport java.nio.ReadOnlyBufferException;\nimport java.nio.ShortBuffer;\nimport java.nio.charset.Charset;\nimport java.nio.charset.IllegalCharsetNameException;\nimport java.nio.file.AccessDeniedException;\nimport java.nio.file.InvalidPathException;\nimport java.nio.file.NoSuchFileException;\nimport java.nio.file.Path;\nimport java.util.Collection;\nimport java.util.Comparator;\nimport java.util.Enumeration;\nimport java.util.Iterator;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.ListIterator;\nimport java.util.Locale;\nimport java.util.Set;\nimport java.util.Spliterator;\nimport java.util.function.Consumer;\nimport java.util.function.Predicate;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.mock.java.io.MockFile;\nimport org.evosuite.runtime.mock.java.io.MockFileInputStream;\nimport org.evosuite.runtime.mock.java.io.MockFileOutputStream;\nimport org.evosuite.runtime.mock.java.io.MockPrintStream;\nimport org.evosuite.runtime.mock.java.net.MockURI;\nimport org.evosuite.runtime.testdata.EvoSuiteFile;\nimport org.evosuite.runtime.testdata.FileSystemHandling;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class BufferUtils_addCapacity extends BufferUtils_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test099() throws Throwable {\n    ByteBuffer byteBuffer0 = BufferUtils.toBuffer((-2515L));\n    assertEquals(\"java.nio.HeapByteBuffer[pos=5 lim=32 cap=32]\", byteBuffer0.toString());\n    assertEquals(0, byteBuffer0.arrayOffset());\n    assertTrue(byteBuffer0.hasRemaining());\n    assertEquals(27, byteBuffer0.remaining());\n    assertEquals(32, byteBuffer0.capacity());\n    assertFalse(byteBuffer0.isReadOnly());\n    assertFalse(byteBuffer0.isDirect());\n    assertEquals(5, byteBuffer0.position());\n    assertTrue(byteBuffer0.hasArray());\n    assertEquals(32, byteBuffer0.limit());\n    assertNotNull(byteBuffer0);\n    ByteBuffer byteBuffer1 = BufferUtils.addCapacity(byteBuffer0, 8);\n    assertEquals(\"java.nio.HeapByteBuffer[pos=5 lim=32 cap=32]\", byteBuffer0.toString());\n    assertEquals(0, byteBuffer0.arrayOffset());\n    assertTrue(byteBuffer0.hasRemaining());\n    assertEquals(27, byteBuffer0.remaining());\n    assertEquals(32, byteBuffer0.capacity());\n    assertFalse(byteBuffer0.isReadOnly());\n    assertFalse(byteBuffer0.isDirect());\n    assertEquals(5, byteBuffer0.position());\n    assertTrue(byteBuffer0.hasArray());\n    assertEquals(32, byteBuffer0.limit());\n    assertFalse(byteBuffer1.isDirect());\n    assertEquals(13, byteBuffer1.capacity());\n    assertEquals(5, byteBuffer1.position());\n    assertEquals(0, byteBuffer1.arrayOffset());\n    assertTrue(byteBuffer1.hasRemaining());\n    assertEquals(\"java.nio.HeapByteBuffer[pos=5 lim=13 cap=13]\", byteBuffer1.toString());\n    assertEquals(13, byteBuffer1.limit());\n    assertTrue(byteBuffer1.hasArray());\n    assertFalse(byteBuffer1.isReadOnly());\n    assertEquals(8, byteBuffer1.remaining());\n    assertNotNull(byteBuffer1);\n    assertFalse(byteBuffer1.equals((Object) byteBuffer0));\n    assertNotSame(byteBuffer0, byteBuffer1);\n    assertNotSame(byteBuffer1, byteBuffer0);\n    BufferUtils.append(byteBuffer0, (byte) 14);\n    assertEquals(\"java.nio.HeapByteBuffer[pos=0 lim=28 cap=32]\", byteBuffer0.toString());\n    assertEquals(28, byteBuffer0.limit());\n    assertEquals(0, byteBuffer0.arrayOffset());\n    assertTrue(byteBuffer0.hasRemaining());\n    assertEquals(28, byteBuffer0.remaining());\n    assertEquals(32, byteBuffer0.capacity());\n    assertFalse(byteBuffer0.isReadOnly());\n    assertFalse(byteBuffer0.isDirect());\n    assertTrue(byteBuffer0.hasArray());\n    assertEquals(0, byteBuffer0.position());\n    assertFalse(byteBuffer0.equals((Object) byteBuffer1));\n    assertNotSame(byteBuffer0, byteBuffer1);\n    ByteBuffer byteBuffer2 = byteBuffer0.putDouble(8, (-3075.290848076892));\n    assertEquals(\"java.nio.HeapByteBuffer[pos=0 lim=28 cap=32]\", byteBuffer0.toString());\n    assertEquals(28, byteBuffer0.limit());\n    assertEquals(0, byteBuffer0.arrayOffset());\n    assertTrue(byteBuffer0.hasRemaining());\n    assertEquals(28, byteBuffer0.remaining());\n    assertEquals(32, byteBuffer0.capacity());\n    assertFalse(byteBuffer0.isReadOnly());\n    assertFalse(byteBuffer0.isDirect());\n    assertTrue(byteBuffer0.hasArray());\n    assertEquals(0, byteBuffer0.position());\n    assertEquals(0, byteBuffer2.arrayOffset());\n    assertEquals(28, byteBuffer2.remaining());\n    assertEquals(32, byteBuffer2.capacity());\n    assertTrue(byteBuffer2.hasArray());\n    assertFalse(byteBuffer2.isDirect());\n    assertTrue(byteBuffer2.hasRemaining());\n    assertEquals(0, byteBuffer2.position());\n    assertEquals(\"java.nio.HeapByteBuffer[pos=0 lim=28 cap=32]\", byteBuffer2.toString());\n    assertEquals(28, byteBuffer2.limit());\n    assertFalse(byteBuffer2.isReadOnly());\n    assertNotNull(byteBuffer2);\n    assertFalse(byteBuffer0.equals((Object) byteBuffer1));\n    assertFalse(byteBuffer2.equals((Object) byteBuffer1));\n    assertSame(byteBuffer0, byteBuffer2);\n    assertNotSame(byteBuffer0, byteBuffer1);\n    assertNotSame(byteBuffer2, byteBuffer1);\n    assertSame(byteBuffer2, byteBuffer0);\n    byte[] byteArray0 = new byte[24];\n    byteArray0[0] = (byte) 14;\n    byteArray0[1] = (byte) 14;\n    byteArray0[2] = (byte) 14;\n    byteArray0[3] = (byte) 14;\n    byteArray0[4] = (byte) 14;\n    byteArray0[5] = (byte) 14;\n    byteArray0[6] = (byte) 14;\n    byteArray0[7] = (byte) 14;\n    byteArray0[8] = (byte) 14;\n    int int0 = BufferUtils.fill(byteBuffer0, byteArray0, (byte) 14, 3165);\n    assertEquals(4, int0);\n    assertEquals(0, byteBuffer0.arrayOffset());\n    assertTrue(byteBuffer0.hasRemaining());\n    assertEquals(\"java.nio.HeapByteBuffer[pos=0 lim=32 cap=32]\", byteBuffer0.toString());\n    assertEquals(32, byteBuffer0.capacity());\n    assertEquals(32, byteBuffer0.remaining());\n    assertFalse(byteBuffer0.isReadOnly());\n    assertFalse(byteBuffer0.isDirect());\n    assertTrue(byteBuffer0.hasArray());\n    assertEquals(0, byteBuffer0.position());\n    assertEquals(32, byteBuffer0.limit());\n    assertFalse(byteBuffer0.equals((Object) byteBuffer1));\n    assertSame(byteBuffer0, byteBuffer2);\n    assertNotSame(byteBuffer0, byteBuffer1);\n    assertEquals(24, byteArray0.length);\n    Charset charset0 = Charset.defaultCharset();\n    assertEquals(\"GBK\", charset0.toString());\n    assertTrue(charset0.canEncode());\n    assertEquals(\"GBK\", charset0.displayName());\n    assertEquals(\"GBK\", charset0.name());\n    assertTrue(charset0.isRegistered());\n    assertNotNull(charset0);\n    ByteBuffer byteBuffer3 = BufferUtils.toDirectBuffer(\")BV@l.\", charset0);\n    assertEquals(0, byteBuffer3.position());\n    assertEquals(\"java.nio.DirectByteBuffer[pos=0 lim=6 cap=6]\", byteBuffer3.toString());\n    assertEquals(6, byteBuffer3.capacity());\n    assertEquals(6, byteBuffer3.remaining());\n    assertTrue(byteBuffer3.isDirect());\n    assertFalse(byteBuffer3.hasArray());\n    assertEquals(6, byteBuffer3.limit());\n    assertFalse(byteBuffer3.isReadOnly());\n    assertTrue(byteBuffer3.hasRemaining());\n    assertEquals(\"GBK\", charset0.toString());\n    assertTrue(charset0.canEncode());\n    assertEquals(\"GBK\", charset0.displayName());\n    assertEquals(\"GBK\", charset0.name());\n    assertTrue(charset0.isRegistered());\n    assertNotNull(byteBuffer3);\n    assertFalse(byteBuffer3.equals((Object) byteBuffer1));\n    assertFalse(byteBuffer3.equals((Object) byteBuffer2));\n    assertFalse(byteBuffer3.equals((Object) byteBuffer0));\n}\n}"
    },
    {
        "original_path": "hypercube1024_firefly###hypercube1024_firefly/firefly-common/src/test/java/com/fireflysource/common/collection/map/MultiMapTest###testAdd",
        "generated_path": "MultiMap_add.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.fireflysource.common.collection.map;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.fireflysource.common.collection.map.MultiMap;\nimport java.lang.reflect.Array;\nimport java.util.AbstractMap;\nimport java.util.HashMap;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class MultiMap_add extends MultiMap_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test22() throws Throwable {\n    MultiMap<String> multiMap0 = new MultiMap<String>();\n    multiMap0.add(\"`xnN($.f~&D|)+qIw+,\", \"jN#'+WN~\");\n    boolean boolean0 = multiMap0.containsSimpleValue(\"jN#'+WN~\");\n    assertTrue(boolean0);\n}\n}"
    },
    {
        "original_path": "hypercube1024_firefly###hypercube1024_firefly/firefly-common/src/test/java/com/fireflysource/common/concurrent/TestCompletableFutures###testDoFinally",
        "generated_path": "CompletableFutures_doFinally.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.fireflysource.common.concurrent;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.fireflysource.common.concurrent.CompletableFutures;\nimport java.io.PrintStream;\nimport java.io.PrintWriter;\nimport java.lang.reflect.Array;\nimport java.util.Locale;\nimport java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.CompletionStage;\nimport java.util.concurrent.Delayed;\nimport java.util.concurrent.Executor;\nimport java.util.concurrent.ForkJoinPool;\nimport java.util.concurrent.ForkJoinTask;\nimport java.util.concurrent.LinkedBlockingQueue;\nimport java.util.concurrent.ThreadFactory;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.TimeUnit;\nimport java.util.function.BiConsumer;\nimport java.util.function.BiFunction;\nimport java.util.function.Function;\nimport java.util.function.Supplier;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.mock.java.io.MockFile;\nimport org.evosuite.runtime.mock.java.io.MockFileOutputStream;\nimport org.evosuite.runtime.mock.java.io.MockPrintStream;\nimport org.evosuite.runtime.mock.java.lang.MockThread;\nimport org.evosuite.runtime.mock.java.lang.MockThrowable;\nimport org.evosuite.runtime.testdata.EvoSuiteFile;\nimport org.evosuite.runtime.testdata.FileSystemHandling;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class CompletableFutures_doFinally extends CompletableFutures_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    MockThrowable mockThrowable0 = new MockThrowable(\"Rv=#1\");\n    MockThrowable mockThrowable1 = new MockThrowable(\"pjR$bY?\", mockThrowable0);\n    CompletableFuture<String> completableFuture0 = CompletableFutures.failedFuture((Throwable) mockThrowable1);\n    CompletableFuture<Object> completableFuture1 = CompletableFuture.completedFuture((Object) completableFuture0);\n    CompletableFutures.doFinally((CompletionStage<Object>) completableFuture1, (BiFunction<Object, Throwable, CompletableFuture<Void>>) null);\n}\n}"
    },
    {
        "original_path": "hypercube1024_firefly###hypercube1024_firefly/firefly-net/src/test/java/com/fireflysource/net/http/common/model/HttpFieldsTest###testGetQualityCSV",
        "generated_path": "HttpFields_getQualityCSV.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.fireflysource.net.http.common.model;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.fireflysource.net.http.common.model.HttpField;\nimport com.fireflysource.net.http.common.model.HttpFields;\nimport com.fireflysource.net.http.common.model.HttpHeader;\nimport com.fireflysource.net.http.common.model.HttpHeaderValue;\nimport com.fireflysource.net.http.common.model.QuotedCSV;\nimport java.util.Enumeration;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.NoSuchElementException;\nimport java.util.function.Consumer;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.System;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class HttpFields_getQualityCSV extends HttpFields_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test004() throws Throwable {\n    HttpFields httpFields0 = new HttpFields();\n    HttpHeader httpHeader0 = HttpHeader.TRANSFER_ENCODING;\n    httpFields0.getQualityCSV(httpHeader0);\n    HttpFields httpFields1 = new HttpFields(httpFields0);\n    httpFields1.putLongField(httpHeader0, 2L);\n    Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());\n    httpFields1.forEach(consumer0);\n    httpFields1.add(\"UbACmL{`x&G3;V}G3}\", \"UbACmL{`x&G3;V}G3}\");\n    httpFields0.addAll(httpFields1);\n    httpFields1.getFieldNamesCollection();\n    HttpField httpField0 = httpFields0.remove(\"UbACmL{`x&G3;V}G3}\");\n    httpFields0.contains(httpField0);\n    httpFields1.getFieldNames();\n    httpFields1.contains(httpHeader0);\n    httpFields1.getStringField(httpHeader0);\n    httpFields0.iterator();\n    HttpHeader httpHeader1 = HttpHeader.MIME_VERSION;\n    httpFields0.getField(httpHeader1);\n    httpFields1.getStringField(\"\");\n    String[] stringArray0 = new String[1];\n    httpFields1.remove(httpHeader0);\n    stringArray0[0] = \"UbACmL{`x&G3;V}G3}\";\n    httpFields1.addCSV(httpHeader0, stringArray0);\n    httpFields0.addCSV(\"2J8Tc5e:t\", stringArray0);\n    httpFields1.getStringField(\"\");\n    httpFields1.getDateField(\"]iazf69rs/*z/n+cr\");\n}\n}"
    },
    {
        "original_path": "hypercube1024_firefly###hypercube1024_firefly/firefly-net/src/test/java/com/fireflysource/net/http/common/model/HttpFieldsTest###testAdd",
        "generated_path": "HttpFields_add.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.fireflysource.net.http.common.model;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.fireflysource.net.http.common.model.HttpField;\nimport com.fireflysource.net.http.common.model.HttpFields;\nimport com.fireflysource.net.http.common.model.HttpHeader;\nimport com.fireflysource.net.http.common.model.HttpHeaderValue;\nimport com.fireflysource.net.http.common.model.QuotedCSV;\nimport java.util.Enumeration;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.NoSuchElementException;\nimport java.util.function.Consumer;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.System;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class HttpFields_add extends HttpFields_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test001() throws Throwable {\n    HttpFields httpFields0 = new HttpFields(2180);\n    HttpHeader httpHeader0 = HttpHeader.VARY;\n    HttpHeaderValue httpHeaderValue0 = HttpHeaderValue.GZIP;\n    httpFields0.add(httpHeader0, httpHeaderValue0);\n    httpFields0.getValuesList(\"a9pkBq}$)]\\\"gk'\");\n    httpFields0.toString();\n    HttpHeader httpHeader1 = HttpHeader.VARY;\n    httpFields0.remove(httpHeader1);\n    httpFields0.contains(\";\", \";\");\n    HttpFields httpFields1 = new HttpFields(httpFields0);\n    HttpHeader httpHeader2 = HttpHeader.CACHE_CONTROL;\n    httpFields1.put(httpHeader2, \"a9pkBq}$)]\\\"gk'\");\n    HttpHeader httpHeader3 = HttpHeader.PROXY_AUTHENTICATE;\n    HttpHeaderValue httpHeaderValue1 = HttpHeaderValue.CHUNKED;\n    httpFields1.put(httpHeader3, httpHeaderValue1);\n    httpFields1.putDateField(\"a9pkBq}$)]\\\"gk'\", (long) 2180);\n    httpFields0.addAll(httpFields1);\n    httpFields0.toString();\n    httpFields0.contains(httpHeader2, \"a9pkBq}$)]\\\"gk'\");\n}\n}"
    },
    {
        "original_path": "hypercube1024_firefly###hypercube1024_firefly/firefly-common/src/test/java/com/fireflysource/common/io/TestBufferUtils###testToArray",
        "generated_path": "BufferUtils_toArray.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.fireflysource.common.io;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.fireflysource.common.io.BufferUtils;\nimport java.io.BufferedInputStream;\nimport java.io.BufferedOutputStream;\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.File;\nimport java.io.FileDescriptor;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.io.PipedInputStream;\nimport java.io.PipedOutputStream;\nimport java.io.PrintStream;\nimport java.io.PushbackInputStream;\nimport java.io.SequenceInputStream;\nimport java.net.URI;\nimport java.net.URISyntaxException;\nimport java.nio.Buffer;\nimport java.nio.BufferOverflowException;\nimport java.nio.BufferUnderflowException;\nimport java.nio.ByteBuffer;\nimport java.nio.ByteOrder;\nimport java.nio.CharBuffer;\nimport java.nio.DoubleBuffer;\nimport java.nio.IntBuffer;\nimport java.nio.InvalidMarkException;\nimport java.nio.LongBuffer;\nimport java.nio.ReadOnlyBufferException;\nimport java.nio.ShortBuffer;\nimport java.nio.charset.Charset;\nimport java.nio.charset.IllegalCharsetNameException;\nimport java.nio.file.AccessDeniedException;\nimport java.nio.file.InvalidPathException;\nimport java.nio.file.NoSuchFileException;\nimport java.nio.file.Path;\nimport java.util.Collection;\nimport java.util.Comparator;\nimport java.util.Enumeration;\nimport java.util.Iterator;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.ListIterator;\nimport java.util.Locale;\nimport java.util.Set;\nimport java.util.Spliterator;\nimport java.util.function.Consumer;\nimport java.util.function.Predicate;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.mock.java.io.MockFile;\nimport org.evosuite.runtime.mock.java.io.MockFileInputStream;\nimport org.evosuite.runtime.mock.java.io.MockFileOutputStream;\nimport org.evosuite.runtime.mock.java.io.MockPrintStream;\nimport org.evosuite.runtime.mock.java.net.MockURI;\nimport org.evosuite.runtime.testdata.EvoSuiteFile;\nimport org.evosuite.runtime.testdata.FileSystemHandling;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class BufferUtils_toArray extends BufferUtils_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test026() throws Throwable {\n    ByteBuffer byteBuffer0 = BufferUtils.toBuffer(\"ZA#s|\u007f\u007f:7@]+\");\n    assertFalse(byteBuffer0.isReadOnly());\n    assertEquals(\"java.nio.HeapByteBuffer[pos=0 lim=12 cap=12]\", byteBuffer0.toString());\n    assertFalse(byteBuffer0.isDirect());\n    assertEquals(0, byteBuffer0.arrayOffset());\n    assertEquals(12, byteBuffer0.limit());\n    assertTrue(byteBuffer0.hasRemaining());\n    assertEquals(12, byteBuffer0.capacity());\n    assertEquals(12, byteBuffer0.remaining());\n    assertEquals(0, byteBuffer0.position());\n    assertTrue(byteBuffer0.hasArray());\n    assertNotNull(byteBuffer0);\n    ByteBuffer[] byteBufferArray0 = new ByteBuffer[20];\n    byteBufferArray0[0] = byteBuffer0;\n    byteBufferArray0[1] = byteBuffer0;\n    FileSystemHandling fileSystemHandling0 = new FileSystemHandling();\n    assertNotNull(fileSystemHandling0);\n    short short0 = byteBuffer0.getShort();\n    assertEquals((short) 23105, short0);\n    assertFalse(byteBuffer0.isReadOnly());\n    assertFalse(byteBuffer0.isDirect());\n    assertEquals(0, byteBuffer0.arrayOffset());\n    assertEquals(12, byteBuffer0.limit());\n    assertTrue(byteBuffer0.hasRemaining());\n    assertEquals(12, byteBuffer0.capacity());\n    assertEquals(\"java.nio.HeapByteBuffer[pos=2 lim=12 cap=12]\", byteBuffer0.toString());\n    assertEquals(10, byteBuffer0.remaining());\n    assertTrue(byteBuffer0.hasArray());\n    assertEquals(2, byteBuffer0.position());\n    byteBufferArray0[13] = byteBuffer0;\n    byteBufferArray0[3] = byteBuffer0;\n    byteBufferArray0[4] = byteBuffer0;\n    byteBufferArray0[5] = byteBuffer0;\n    byteBufferArray0[6] = byteBuffer0;\n    byteBufferArray0[7] = byteBuffer0;\n    ByteBuffer byteBuffer1 = byteBuffer0.putLong(10000000000000L);\n    assertFalse(byteBuffer0.isReadOnly());\n    assertFalse(byteBuffer0.isDirect());\n    assertEquals(0, byteBuffer0.arrayOffset());\n    assertEquals(2, byteBuffer0.remaining());\n    assertEquals(10, byteBuffer0.position());\n    assertEquals(12, byteBuffer0.limit());\n    assertTrue(byteBuffer0.hasRemaining());\n    assertEquals(12, byteBuffer0.capacity());\n    assertEquals(\"java.nio.HeapByteBuffer[pos=10 lim=12 cap=12]\", byteBuffer0.toString());\n    assertTrue(byteBuffer0.hasArray());\n    assertTrue(byteBuffer1.hasRemaining());\n    assertTrue(byteBuffer1.hasArray());\n    assertEquals(10, byteBuffer1.position());\n    assertFalse(byteBuffer1.isDirect());\n    assertEquals(\"java.nio.HeapByteBuffer[pos=10 lim=12 cap=12]\", byteBuffer1.toString());\n    assertEquals(0, byteBuffer1.arrayOffset());\n    assertEquals(2, byteBuffer1.remaining());\n    assertEquals(12, byteBuffer1.limit());\n    assertFalse(byteBuffer1.isReadOnly());\n    assertEquals(12, byteBuffer1.capacity());\n    assertNotNull(byteBuffer1);\n    assertSame(byteBuffer0, byteBuffer1);\n    assertSame(byteBuffer1, byteBuffer0);\n    String string0 = BufferUtils.toDetailString(byteBufferArray0);\n    assertNotNull(string0);\n    assertEquals(20, byteBufferArray0.length);\n    ByteBuffer byteBuffer2 = BufferUtils.toBuffer(10000L);\n    assertEquals(32, byteBuffer2.capacity());\n    assertEquals(5, byteBuffer2.position());\n    assertFalse(byteBuffer2.isReadOnly());\n    assertFalse(byteBuffer2.isDirect());\n    assertEquals(32, byteBuffer2.limit());\n    assertTrue(byteBuffer2.hasArray());\n    assertTrue(byteBuffer2.hasRemaining());\n    assertEquals(0, byteBuffer2.arrayOffset());\n    assertEquals(\"java.nio.HeapByteBuffer[pos=5 lim=32 cap=32]\", byteBuffer2.toString());\n    assertEquals(27, byteBuffer2.remaining());\n    assertNotNull(byteBuffer2);\n    assertFalse(byteBuffer2.equals((Object) byteBuffer1));\n    assertFalse(byteBuffer2.equals((Object) byteBuffer0));\n    assertNotSame(byteBuffer2, byteBuffer1);\n    assertNotSame(byteBuffer2, byteBuffer0);\n    boolean boolean0 = BufferUtils.isFull(byteBuffer0);\n    assertTrue(boolean0);\n    assertFalse(byteBuffer0.isReadOnly());\n    assertFalse(byteBuffer0.isDirect());\n    assertEquals(0, byteBuffer0.arrayOffset());\n    assertEquals(2, byteBuffer0.remaining());\n    assertEquals(10, byteBuffer0.position());\n    assertEquals(12, byteBuffer0.limit());\n    assertTrue(byteBuffer0.hasRemaining());\n    assertEquals(12, byteBuffer0.capacity());\n    assertEquals(\"java.nio.HeapByteBuffer[pos=10 lim=12 cap=12]\", byteBuffer0.toString());\n    assertTrue(byteBuffer0.hasArray());\n    assertFalse(byteBuffer0.equals((Object) byteBuffer2));\n    assertNotSame(byteBuffer0, byteBuffer2);\n    assertSame(byteBuffer0, byteBuffer1);\n    byte[] byteArray0 = BufferUtils.toArray(byteBuffer0);\n    assertFalse(byteBuffer0.isReadOnly());\n    assertFalse(byteBuffer0.isDirect());\n    assertEquals(0, byteBuffer0.arrayOffset());\n    assertEquals(2, byteBuffer0.remaining());\n    assertEquals(10, byteBuffer0.position());\n    assertEquals(12, byteBuffer0.limit());\n    assertTrue(byteBuffer0.hasRemaining());\n    assertEquals(12, byteBuffer0.capacity());\n    assertEquals(\"java.nio.HeapByteBuffer[pos=10 lim=12 cap=12]\", byteBuffer0.toString());\n    assertTrue(byteBuffer0.hasArray());\n    assertArrayEquals(new byte[] { (byte) 93, (byte) 43 }, byteArray0);\n    assertNotNull(byteArray0);\n    assertFalse(byteBuffer0.equals((Object) byteBuffer2));\n    assertNotSame(byteBuffer0, byteBuffer2);\n    assertSame(byteBuffer0, byteBuffer1);\n    assertEquals(2, byteArray0.length);\n    int int0 = BufferUtils.length(byteBuffer0);\n    assertEquals(2, int0);\n    assertFalse(byteBuffer0.isReadOnly());\n    assertFalse(byteBuffer0.isDirect());\n    assertEquals(0, byteBuffer0.arrayOffset());\n    assertEquals(2, byteBuffer0.remaining());\n    assertEquals(10, byteBuffer0.position());\n    assertEquals(12, byteBuffer0.limit());\n    assertTrue(byteBuffer0.hasRemaining());\n    assertEquals(12, byteBuffer0.capacity());\n    assertEquals(\"java.nio.HeapByteBuffer[pos=10 lim=12 cap=12]\", byteBuffer0.toString());\n    assertTrue(byteBuffer0.hasArray());\n    assertFalse(byteBuffer0.equals((Object) byteBuffer2));\n    assertNotSame(byteBuffer0, byteBuffer2);\n    assertSame(byteBuffer0, byteBuffer1);\n    boolean boolean1 = BufferUtils.isPrefix(byteBuffer2, byteBuffer0);\n    assertFalse(boolean1);\n    assertFalse(byteBuffer0.isReadOnly());\n    assertFalse(byteBuffer0.isDirect());\n    assertEquals(0, byteBuffer0.arrayOffset());\n    assertEquals(2, byteBuffer0.remaining());\n    assertEquals(10, byteBuffer0.position());\n    assertEquals(12, byteBuffer0.limit());\n    assertTrue(byteBuffer0.hasRemaining());\n    assertEquals(12, byteBuffer0.capacity());\n    assertEquals(\"java.nio.HeapByteBuffer[pos=10 lim=12 cap=12]\", byteBuffer0.toString());\n    assertTrue(byteBuffer0.hasArray());\n    assertEquals(32, byteBuffer2.capacity());\n    assertEquals(5, byteBuffer2.position());\n    assertFalse(byteBuffer2.isReadOnly());\n    assertFalse(byteBuffer2.isDirect());\n    assertEquals(32, byteBuffer2.limit());\n    assertTrue(byteBuffer2.hasArray());\n    assertTrue(byteBuffer2.hasRemaining());\n    assertEquals(0, byteBuffer2.arrayOffset());\n    assertEquals(\"java.nio.HeapByteBuffer[pos=5 lim=32 cap=32]\", byteBuffer2.toString());\n    assertEquals(27, byteBuffer2.remaining());\n    assertFalse(byteBuffer0.equals((Object) byteBuffer2));\n    assertFalse(boolean1 == boolean0);\n    assertFalse(byteBuffer2.equals((Object) byteBuffer1));\n    assertFalse(byteBuffer2.equals((Object) byteBuffer0));\n    assertNotSame(byteBuffer0, byteBuffer2);\n    assertSame(byteBuffer0, byteBuffer1);\n    assertNotSame(byteBuffer2, byteBuffer1);\n    assertNotSame(byteBuffer2, byteBuffer0);\n}\n}"
    },
    {
        "original_path": "hypercube1024_firefly###hypercube1024_firefly/firefly-common/src/test/java/com/fireflysource/common/object/TestTypeUtils###testIsTrue",
        "generated_path": "TypeUtils_isTrue.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.fireflysource.common.object;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.fireflysource.common.object.TypeUtils;\nimport java.io.CharArrayWriter;\nimport java.io.IOException;\nimport java.io.PipedReader;\nimport java.io.PipedWriter;\nimport java.lang.reflect.Method;\nimport java.nio.BufferOverflowException;\nimport java.nio.CharBuffer;\nimport java.nio.ReadOnlyBufferException;\nimport java.util.List;\nimport java.util.Locale;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.io.MockPrintStream;\nimport org.evosuite.runtime.mock.java.io.MockPrintWriter;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class TypeUtils_isTrue extends TypeUtils_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test21() throws Throwable {\n    Boolean boolean0 = Boolean.TRUE;\n    assertNotNull(boolean0);\n    assertTrue(boolean0);\n    boolean boolean1 = TypeUtils.isTrue(boolean0);\n    assertTrue(boolean1);\n}\n}"
    },
    {
        "original_path": "hypercube1024_firefly###hypercube1024_firefly/firefly-common/src/test/java/com/fireflysource/common/collection/map/MultiMapTest###testRemoveValue",
        "generated_path": "MultiMap_removeValue.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.fireflysource.common.collection.map;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.fireflysource.common.collection.map.MultiMap;\nimport java.lang.reflect.Array;\nimport java.util.AbstractMap;\nimport java.util.HashMap;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class MultiMap_removeValue extends MultiMap_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test24() throws Throwable {\n    HashMap<String, List<LinkedList<String>>> hashMap0 = new HashMap<String, List<LinkedList<String>>>();\n    MultiMap<LinkedList<String>> multiMap0 = new MultiMap<LinkedList<String>>(hashMap0);\n    LinkedList<String> linkedList0 = new LinkedList<String>();\n    multiMap0.put(\"AZ[&LbhTt)SpURxs\", linkedList0);\n    boolean boolean0 = multiMap0.removeValue(\"AZ[&LbhTt)SpURxs\", linkedList0);\n    assertEquals(0, multiMap0.size());\n    assertTrue(boolean0);\n}\n}"
    },
    {
        "original_path": "hypercube1024_firefly###hypercube1024_firefly/firefly-common/src/test/java/com/fireflysource/common/collection/map/MultiMapTest###testPut",
        "generated_path": "MultiMap_put.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.fireflysource.common.collection.map;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.fireflysource.common.collection.map.MultiMap;\nimport java.lang.reflect.Array;\nimport java.util.AbstractMap;\nimport java.util.HashMap;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class MultiMap_put extends MultiMap_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();\n    LinkedList<String> linkedList0 = new LinkedList<String>();\n    hashMap0.put(\"\", linkedList0);\n    MultiMap<String> multiMap0 = new MultiMap<String>(hashMap0);\n    List<String> list0 = multiMap0.putValues(\"\", (List<String>) linkedList0);\n    assertEquals(0, list0.size());\n}\n}"
    },
    {
        "original_path": "hypercube1024_firefly###hypercube1024_firefly/firefly-net/src/test/java/com/fireflysource/net/http/common/model/QuotedCSVTest###testUnQuote",
        "generated_path": "QuotedCSV_unquote.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.fireflysource.net.http.common.model;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.fireflysource.net.http.common.model.QuotedCSV;\nimport java.util.Iterator;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class QuotedCSV_unquote extends QuotedCSV_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    String string0 = QuotedCSV.unquote(\"l)\\\"8l io@h[o-\");\n    assertEquals(\"l)8l io@h[o-\", string0);\n}\n}"
    },
    {
        "original_path": "helun_Ektorp###helun_Ektorp/org.ektorp/src/test/java/org/ektorp/util/JSONComparatorTest###testAreEqual",
        "generated_path": "JSONComparator_areEqual.java",
        "Compile_result": 1,
        "Test_result": 0,
        "Gen_Test": "package org.ektorp.util;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.io.Reader;\nimport java.io.StringReader;\nimport org.ektorp.util.JSONComparator;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class JSONComparator_areEqual extends JSONComparator_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void JSONComparator_areEqual() throws Throwable {\n    StringReader stringReader0 = new StringReader(\"null\");\n    // Undeclared exception!\n    try {\n        JSONComparator.areEqual((Reader) stringReader0, (Reader) stringReader0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        //\n        // java.io.IOException: Stream closed\n        //\n        verifyException(\"org.ektorp.util.JSONComparator\", e);\n    }\n}\n}"
    },
    {
        "original_path": "helun_Ektorp###helun_Ektorp/org.ektorp/src/test/java/org/ektorp/impl/StdCouchDbConnectorTest###testGetDesignDocInfo",
        "generated_path": "StdCouchDbConnector_getDesignDocInfo.java",
        "Compile_result": 1,
        "Test_result": 0,
        "Gen_Test": "package org.ektorp.impl;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport com.fasterxml.jackson.core.JsonFactory;\nimport com.fasterxml.jackson.core.JsonParser;\nimport com.fasterxml.jackson.core.JsonToken;\nimport com.fasterxml.jackson.databind.DeserializationFeature;\nimport com.fasterxml.jackson.databind.InjectableValues;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.PropertyNamingStrategy;\nimport com.fasterxml.jackson.databind.SerializationFeature;\nimport com.fasterxml.jackson.databind.node.ArrayNode;\nimport com.fasterxml.jackson.databind.node.BigIntegerNode;\nimport com.fasterxml.jackson.databind.node.BinaryNode;\nimport com.fasterxml.jackson.databind.node.BooleanNode;\nimport com.fasterxml.jackson.databind.node.DecimalNode;\nimport com.fasterxml.jackson.databind.node.DoubleNode;\nimport com.fasterxml.jackson.databind.node.FloatNode;\nimport com.fasterxml.jackson.databind.node.IntNode;\nimport com.fasterxml.jackson.databind.node.JsonNodeFactory;\nimport com.fasterxml.jackson.databind.node.JsonNodeType;\nimport com.fasterxml.jackson.databind.node.LongNode;\nimport com.fasterxml.jackson.databind.node.MissingNode;\nimport com.fasterxml.jackson.databind.node.NullNode;\nimport com.fasterxml.jackson.databind.node.ObjectNode;\nimport com.fasterxml.jackson.databind.node.POJONode;\nimport com.fasterxml.jackson.databind.node.TextNode;\nimport java.io.BufferedInputStream;\nimport java.io.ByteArrayInputStream;\nimport java.io.FileDescriptor;\nimport java.io.InputStream;\nimport java.io.ObjectInputStream;\nimport java.io.PipedInputStream;\nimport java.io.PipedOutputStream;\nimport java.io.PushbackInputStream;\nimport java.io.SequenceInputStream;\nimport java.math.BigInteger;\nimport java.net.URI;\nimport java.time.ZoneId;\nimport java.time.chrono.HijrahEra;\nimport java.util.ArrayDeque;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.LinkedHashSet;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.Stack;\nimport java.util.TreeSet;\nimport java.util.Vector;\nimport java.util.concurrent.DelayQueue;\nimport java.util.concurrent.Delayed;\nimport java.util.concurrent.ForkJoinPool;\nimport java.util.concurrent.ForkJoinTask;\nimport java.util.concurrent.LinkedBlockingDeque;\nimport java.util.concurrent.LinkedBlockingQueue;\nimport java.util.concurrent.LinkedTransferQueue;\nimport java.util.concurrent.SynchronousQueue;\nimport org.apache.http.HttpEntity;\nimport org.apache.http.HttpRequest;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.ProtocolVersion;\nimport org.apache.http.client.HttpClient;\nimport org.apache.http.client.methods.HttpDelete;\nimport org.apache.http.client.methods.HttpOptions;\nimport org.apache.http.client.methods.HttpPatch;\nimport org.apache.http.client.methods.HttpRequestWrapper;\nimport org.apache.http.conn.ClientConnectionManager;\nimport org.apache.http.entity.BufferedHttpEntity;\nimport org.apache.http.entity.ByteArrayEntity;\nimport org.apache.http.entity.ContentProducer;\nimport org.apache.http.entity.ContentType;\nimport org.apache.http.entity.EntityTemplate;\nimport org.apache.http.entity.InputStreamEntity;\nimport org.apache.http.entity.SerializableEntity;\nimport org.apache.http.entity.StringEntity;\nimport org.apache.http.message.BasicHttpResponse;\nimport org.apache.http.message.BasicStatusLine;\nimport org.apache.http.params.HttpParams;\nimport org.ektorp.AttachmentInputStream;\nimport org.ektorp.CouchDbConnector;\nimport org.ektorp.CouchDbInstance;\nimport org.ektorp.DbInfo;\nimport org.ektorp.DbPath;\nimport org.ektorp.DesignDocInfo;\nimport org.ektorp.DocumentOperationResult;\nimport org.ektorp.LocalBulkBuffer;\nimport org.ektorp.Options;\nimport org.ektorp.Page;\nimport org.ektorp.PageRequest;\nimport org.ektorp.PurgeResult;\nimport org.ektorp.Revision;\nimport org.ektorp.Security;\nimport org.ektorp.SecurityGroup;\nimport org.ektorp.Status;\nimport org.ektorp.UpdateHandlerRequest;\nimport org.ektorp.ViewQuery;\nimport org.ektorp.ViewResult;\nimport org.ektorp.changes.ChangesCommand;\nimport org.ektorp.http.ResponseCallback;\nimport org.ektorp.http.RestTemplate;\nimport org.ektorp.http.StdHttpClient;\nimport org.ektorp.http.StdResponseHandler;\nimport org.ektorp.impl.BulkDocumentWriter;\nimport org.ektorp.impl.BulkOperation;\nimport org.ektorp.impl.CachingObjectMapperFactory;\nimport org.ektorp.impl.DefaultQueryExecutor;\nimport org.ektorp.impl.InputStreamBulkEntityBulkExecutor;\nimport org.ektorp.impl.InputStreamWrapperBulkExecutor;\nimport org.ektorp.impl.JsonSerializer;\nimport org.ektorp.impl.StdCouchDbConnector;\nimport org.ektorp.impl.StdCouchDbInstance;\nimport org.ektorp.impl.StdObjectMapperFactory;\nimport org.ektorp.impl.StreamedCouchDbConnector;\nimport org.ektorp.impl.StreamingJsonSerializer;\nimport org.ektorp.impl.changes.StdDocumentChange;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.mock.java.io.MockFileInputStream;\nimport org.evosuite.runtime.mock.java.io.MockRandomAccessFile;\nimport org.evosuite.runtime.mock.java.net.MockURI;\nimport org.evosuite.runtime.testdata.EvoSuiteFile;\nimport org.evosuite.runtime.testdata.FileSystemHandling;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class StdCouchDbConnector_getDesignDocInfo extends StdCouchDbConnector_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void StdCouchDbConnector_getDesignDocInfo() throws Throwable {\n    MissingNode missingNode0 = MissingNode.getInstance();\n    assertFalse(missingNode0.isFloat());\n    assertFalse(missingNode0.isBigInteger());\n    assertNull(missingNode0.textValue());\n    assertFalse(missingNode0.isFloatingPointNumber());\n    assertFalse(missingNode0.isIntegralNumber());\n    assertEquals(JsonToken.NOT_AVAILABLE, missingNode0.asToken());\n    assertFalse(missingNode0.isInt());\n    assertFalse(missingNode0.isShort());\n    assertFalse(missingNode0.booleanValue());\n    assertFalse(missingNode0.isDouble());\n    assertFalse(missingNode0.isLong());\n    assertEquals(\"\", missingNode0.asText());\n    assertEquals(\"\", missingNode0.toString());\n    assertEquals(0, missingNode0.size());\n    assertEquals(JsonNodeType.MISSING, missingNode0.getNodeType());\n    assertNull(missingNode0.numberType());\n    assertFalse(missingNode0.isBigDecimal());\n    assertNotNull(missingNode0);\n    HttpParams httpParams0 = mock(HttpParams.class, new ViolatedAssumptionAnswer());\n    HttpClient httpClient0 = mock(HttpClient.class, new ViolatedAssumptionAnswer());\n    StdHttpClient stdHttpClient0 = new StdHttpClient(httpClient0, httpClient0);\n    assertFalse(missingNode0.isFloat());\n    assertFalse(missingNode0.isBigInteger());\n    assertNull(missingNode0.textValue());\n    assertFalse(missingNode0.isFloatingPointNumber());\n    assertFalse(missingNode0.isIntegralNumber());\n    assertEquals(JsonToken.NOT_AVAILABLE, missingNode0.asToken());\n    assertFalse(missingNode0.isInt());\n    assertFalse(missingNode0.isShort());\n    assertFalse(missingNode0.booleanValue());\n    assertFalse(missingNode0.isDouble());\n    assertFalse(missingNode0.isLong());\n    assertEquals(\"\", missingNode0.asText());\n    assertEquals(\"\", missingNode0.toString());\n    assertEquals(0, missingNode0.size());\n    assertEquals(JsonNodeType.MISSING, missingNode0.getNodeType());\n    assertNull(missingNode0.numberType());\n    assertFalse(missingNode0.isBigDecimal());\n    assertNotNull(stdHttpClient0);\n    StdCouchDbInstance stdCouchDbInstance0 = new StdCouchDbInstance(stdHttpClient0);\n    assertFalse(missingNode0.isFloat());\n    assertFalse(missingNode0.isBigInteger());\n    assertNull(missingNode0.textValue());\n    assertFalse(missingNode0.isFloatingPointNumber());\n    assertFalse(missingNode0.isIntegralNumber());\n    assertEquals(JsonToken.NOT_AVAILABLE, missingNode0.asToken());\n    assertFalse(missingNode0.isInt());\n    assertFalse(missingNode0.isShort());\n    assertFalse(missingNode0.booleanValue());\n    assertFalse(missingNode0.isDouble());\n    assertFalse(missingNode0.isLong());\n    assertEquals(\"\", missingNode0.asText());\n    assertEquals(\"\", missingNode0.toString());\n    assertEquals(0, missingNode0.size());\n    assertEquals(JsonNodeType.MISSING, missingNode0.getNodeType());\n    assertNull(missingNode0.numberType());\n    assertFalse(missingNode0.isBigDecimal());\n    assertNotNull(stdCouchDbInstance0);\n    StdCouchDbConnector stdCouchDbConnector0 = new StdCouchDbConnector(\"PyDZq,\", stdCouchDbInstance0);\n    assertFalse(missingNode0.isFloat());\n    assertFalse(missingNode0.isBigInteger());\n    assertNull(missingNode0.textValue());\n    assertFalse(missingNode0.isFloatingPointNumber());\n    assertFalse(missingNode0.isIntegralNumber());\n    assertEquals(JsonToken.NOT_AVAILABLE, missingNode0.asToken());\n    assertFalse(missingNode0.isInt());\n    assertFalse(missingNode0.isShort());\n    assertFalse(missingNode0.booleanValue());\n    assertFalse(missingNode0.isDouble());\n    assertFalse(missingNode0.isLong());\n    assertEquals(\"\", missingNode0.asText());\n    assertEquals(\"\", missingNode0.toString());\n    assertEquals(0, missingNode0.size());\n    assertEquals(JsonNodeType.MISSING, missingNode0.getNodeType());\n    assertNull(missingNode0.numberType());\n    assertFalse(missingNode0.isBigDecimal());\n    assertEquals(\"pydzq,\", stdCouchDbConnector0.getDatabaseName());\n    assertNotNull(stdCouchDbConnector0);\n    String string0 = null;\n    Stack<String> stack0 = new Stack<String>();\n    assertEquals(10, stack0.capacity());\n    assertEquals(\"[]\", stack0.toString());\n    assertEquals(0, stack0.size());\n    assertTrue(stack0.empty());\n    assertTrue(stack0.isEmpty());\n    assertFalse(stack0.contains(\"PyDZq,\"));\n    assertNotNull(stack0);\n    // Undeclared exception!\n    try {\n        stdCouchDbConnector0.getDesignDocInfo((String) null);\n        fail(\"Expecting exception: IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n        //\n        // designDocId may not be null or empty\n        //\n        verifyException(\"org.ektorp.util.Assert\", e);\n    }\n}\n}"
    },
    {
        "original_path": "helun_Ektorp###helun_Ektorp/org.ektorp/src/test/java/org/ektorp/impl/BulkDocumentWriterTest###testCreateInputStreamWrapper",
        "generated_path": "BulkDocumentWriter_createInputStreamWrapper.java",
        "Compile_result": 1,
        "Test_result": 0,
        "Gen_Test": "package org.ektorp.impl;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.fasterxml.jackson.core.util.BufferRecycler;\nimport com.fasterxml.jackson.core.util.ByteArrayBuilder;\nimport com.fasterxml.jackson.databind.Module;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport java.io.FilterOutputStream;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.io.PipedInputStream;\nimport java.io.PipedOutputStream;\nimport java.time.chrono.HijrahEra;\nimport java.util.Collection;\nimport java.util.EnumSet;\nimport java.util.HashSet;\nimport java.util.LinkedList;\nimport java.util.TreeSet;\nimport org.ektorp.http.HttpClient;\nimport org.ektorp.http.RestTemplate;\nimport org.ektorp.http.URI;\nimport org.ektorp.impl.BulkDocumentWriter;\nimport org.ektorp.impl.CachingObjectMapperFactory;\nimport org.ektorp.impl.InputStreamWrapperBulkExecutor;\nimport org.ektorp.impl.StdObjectMapperFactory;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class BulkDocumentWriter_createInputStreamWrapper extends BulkDocumentWriter_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test3() throws Throwable {\n    ObjectMapper objectMapper0 = new ObjectMapper();\n    BulkDocumentWriter bulkDocumentWriter0 = new BulkDocumentWriter(objectMapper0);\n    PipedInputStream pipedInputStream0 = new PipedInputStream(2);\n    InputStream inputStream0 = bulkDocumentWriter0.createInputStreamWrapper(false, pipedInputStream0);\n    InputStream inputStream1 = bulkDocumentWriter0.createInputStreamWrapper(true, inputStream0);\n    assertNotSame(inputStream1, inputStream0);\n}\n}"
    },
    {
        "original_path": "helun_Ektorp###helun_Ektorp/org.ektorp/src/test/java/org/ektorp/impl/StdCouchDbConnectorTest###testCallUpdateHandler",
        "generated_path": "StdCouchDbConnector_callUpdateHandler.java",
        "Compile_result": 1,
        "Test_result": 0,
        "Gen_Test": "package org.ektorp.impl;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport com.fasterxml.jackson.core.JsonFactory;\nimport com.fasterxml.jackson.core.JsonParser;\nimport com.fasterxml.jackson.core.JsonToken;\nimport com.fasterxml.jackson.databind.DeserializationFeature;\nimport com.fasterxml.jackson.databind.InjectableValues;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.PropertyNamingStrategy;\nimport com.fasterxml.jackson.databind.SerializationFeature;\nimport com.fasterxml.jackson.databind.node.ArrayNode;\nimport com.fasterxml.jackson.databind.node.BigIntegerNode;\nimport com.fasterxml.jackson.databind.node.BinaryNode;\nimport com.fasterxml.jackson.databind.node.BooleanNode;\nimport com.fasterxml.jackson.databind.node.DecimalNode;\nimport com.fasterxml.jackson.databind.node.DoubleNode;\nimport com.fasterxml.jackson.databind.node.FloatNode;\nimport com.fasterxml.jackson.databind.node.IntNode;\nimport com.fasterxml.jackson.databind.node.JsonNodeFactory;\nimport com.fasterxml.jackson.databind.node.JsonNodeType;\nimport com.fasterxml.jackson.databind.node.LongNode;\nimport com.fasterxml.jackson.databind.node.MissingNode;\nimport com.fasterxml.jackson.databind.node.NullNode;\nimport com.fasterxml.jackson.databind.node.ObjectNode;\nimport com.fasterxml.jackson.databind.node.POJONode;\nimport com.fasterxml.jackson.databind.node.TextNode;\nimport java.io.BufferedInputStream;\nimport java.io.ByteArrayInputStream;\nimport java.io.FileDescriptor;\nimport java.io.InputStream;\nimport java.io.ObjectInputStream;\nimport java.io.PipedInputStream;\nimport java.io.PipedOutputStream;\nimport java.io.PushbackInputStream;\nimport java.io.SequenceInputStream;\nimport java.math.BigInteger;\nimport java.net.URI;\nimport java.time.ZoneId;\nimport java.time.chrono.HijrahEra;\nimport java.util.ArrayDeque;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.LinkedHashSet;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.Stack;\nimport java.util.TreeSet;\nimport java.util.Vector;\nimport java.util.concurrent.DelayQueue;\nimport java.util.concurrent.Delayed;\nimport java.util.concurrent.ForkJoinPool;\nimport java.util.concurrent.ForkJoinTask;\nimport java.util.concurrent.LinkedBlockingDeque;\nimport java.util.concurrent.LinkedBlockingQueue;\nimport java.util.concurrent.LinkedTransferQueue;\nimport java.util.concurrent.SynchronousQueue;\nimport org.apache.http.HttpEntity;\nimport org.apache.http.HttpRequest;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.ProtocolVersion;\nimport org.apache.http.client.HttpClient;\nimport org.apache.http.client.methods.HttpDelete;\nimport org.apache.http.client.methods.HttpOptions;\nimport org.apache.http.client.methods.HttpPatch;\nimport org.apache.http.client.methods.HttpRequestWrapper;\nimport org.apache.http.conn.ClientConnectionManager;\nimport org.apache.http.entity.BufferedHttpEntity;\nimport org.apache.http.entity.ByteArrayEntity;\nimport org.apache.http.entity.ContentProducer;\nimport org.apache.http.entity.ContentType;\nimport org.apache.http.entity.EntityTemplate;\nimport org.apache.http.entity.InputStreamEntity;\nimport org.apache.http.entity.SerializableEntity;\nimport org.apache.http.entity.StringEntity;\nimport org.apache.http.message.BasicHttpResponse;\nimport org.apache.http.message.BasicStatusLine;\nimport org.apache.http.params.HttpParams;\nimport org.ektorp.AttachmentInputStream;\nimport org.ektorp.CouchDbConnector;\nimport org.ektorp.CouchDbInstance;\nimport org.ektorp.DbInfo;\nimport org.ektorp.DbPath;\nimport org.ektorp.DesignDocInfo;\nimport org.ektorp.DocumentOperationResult;\nimport org.ektorp.LocalBulkBuffer;\nimport org.ektorp.Options;\nimport org.ektorp.Page;\nimport org.ektorp.PageRequest;\nimport org.ektorp.PurgeResult;\nimport org.ektorp.Revision;\nimport org.ektorp.Security;\nimport org.ektorp.SecurityGroup;\nimport org.ektorp.Status;\nimport org.ektorp.UpdateHandlerRequest;\nimport org.ektorp.ViewQuery;\nimport org.ektorp.ViewResult;\nimport org.ektorp.changes.ChangesCommand;\nimport org.ektorp.http.ResponseCallback;\nimport org.ektorp.http.RestTemplate;\nimport org.ektorp.http.StdHttpClient;\nimport org.ektorp.http.StdResponseHandler;\nimport org.ektorp.impl.BulkDocumentWriter;\nimport org.ektorp.impl.BulkOperation;\nimport org.ektorp.impl.CachingObjectMapperFactory;\nimport org.ektorp.impl.DefaultQueryExecutor;\nimport org.ektorp.impl.InputStreamBulkEntityBulkExecutor;\nimport org.ektorp.impl.InputStreamWrapperBulkExecutor;\nimport org.ektorp.impl.JsonSerializer;\nimport org.ektorp.impl.StdCouchDbConnector;\nimport org.ektorp.impl.StdCouchDbInstance;\nimport org.ektorp.impl.StdObjectMapperFactory;\nimport org.ektorp.impl.StreamedCouchDbConnector;\nimport org.ektorp.impl.StreamingJsonSerializer;\nimport org.ektorp.impl.changes.StdDocumentChange;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.mock.java.io.MockFileInputStream;\nimport org.evosuite.runtime.mock.java.io.MockRandomAccessFile;\nimport org.evosuite.runtime.mock.java.net.MockURI;\nimport org.evosuite.runtime.testdata.EvoSuiteFile;\nimport org.evosuite.runtime.testdata.FileSystemHandling;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class StdCouchDbConnector_callUpdateHandler extends StdCouchDbConnector_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void StdCouchDbConnector_callUpdateHandler() throws Throwable {\n    HttpClient httpClient0 = mock(HttpClient.class, new ViolatedAssumptionAnswer());\n    StdHttpClient stdHttpClient0 = new StdHttpClient(httpClient0);\n    assertNotNull(stdHttpClient0);\n    StdCouchDbInstance stdCouchDbInstance0 = new StdCouchDbInstance(stdHttpClient0);\n    assertNotNull(stdCouchDbInstance0);\n    StdObjectMapperFactory stdObjectMapperFactory0 = new StdObjectMapperFactory();\n    assertNotNull(stdObjectMapperFactory0);\n    Options options0 = new Options();\n    assertTrue(options0.isEmpty());\n    assertNotNull(options0);\n    Options options1 = options0.includeConflicts();\n    assertFalse(options0.isEmpty());\n    assertFalse(options1.isEmpty());\n    assertSame(options0, options1);\n    assertSame(options1, options0);\n    assertNotNull(options1);\n    Options options2 = options1.param(\"|e!{QQ,_k7`F@%\", \"*tc|S#m \");\n    assertFalse(options0.isEmpty());\n    assertFalse(options1.isEmpty());\n    assertFalse(options2.isEmpty());\n    assertSame(options0, options2);\n    assertSame(options0, options1);\n    assertSame(options1, options2);\n    assertSame(options1, options0);\n    assertSame(options2, options1);\n    assertSame(options2, options0);\n    assertNotNull(options2);\n    Options options3 = options1.includeRevisions();\n    assertFalse(options0.isEmpty());\n    assertFalse(options1.isEmpty());\n    assertFalse(options3.isEmpty());\n    assertSame(options0, options3);\n    assertSame(options0, options2);\n    assertSame(options0, options1);\n    assertSame(options1, options3);\n    assertSame(options1, options2);\n    assertSame(options1, options0);\n    assertSame(options3, options2);\n    assertSame(options3, options1);\n    assertSame(options3, options0);\n    assertNotNull(options3);\n    PipedInputStream pipedInputStream0 = new PipedInputStream();\n    assertEquals(0, pipedInputStream0.available());\n    assertNotNull(pipedInputStream0);\n    Map<String, String> map0 = ZoneId.SHORT_IDS;\n    assertEquals(28, map0.size());\n    assertFalse(map0.isEmpty());\n    assertNotNull(map0);\n    StreamedCouchDbConnector streamedCouchDbConnector0 = new StreamedCouchDbConnector(\"8eZTj;\", stdCouchDbInstance0);\n    assertEquals(\"8eztj;\", streamedCouchDbConnector0.getDatabaseName());\n    assertNotNull(streamedCouchDbConnector0);\n    // Undeclared exception!\n    try {\n        streamedCouchDbConnector0.callUpdateHandler(\"\", \"!nT*6\", \"}iv4irZ0+1\\\"$h/x/\", map0);\n        fail(\"Expecting exception: IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n        //\n        // designDocID may not be null or empty\n        //\n        verifyException(\"org.ektorp.util.Assert\", e);\n    }\n}\n}"
    },
    {
        "original_path": "helun_Ektorp###helun_Ektorp/org.ektorp/src/test/java/org/ektorp/impl/changes/ContinuousChangesFeedTest###testNext",
        "generated_path": "ContinuousChangesFeed_next.java",
        "Compile_result": 1,
        "Test_result": 0,
        "Gen_Test": "package org.ektorp.impl.changes;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.io.ByteArrayInputStream;\nimport java.io.DataInputStream;\nimport java.io.InputStream;\nimport java.net.URI;\nimport java.util.concurrent.TimeUnit;\nimport org.apache.http.Header;\nimport org.apache.http.ProtocolVersion;\nimport org.apache.http.StatusLine;\nimport org.apache.http.client.HttpClient;\nimport org.apache.http.client.methods.HttpDelete;\nimport org.apache.http.entity.BufferedHttpEntity;\nimport org.apache.http.entity.ContentType;\nimport org.apache.http.entity.FileEntity;\nimport org.apache.http.entity.InputStreamEntity;\nimport org.apache.http.message.BasicHttpResponse;\nimport org.ektorp.http.HttpResponse;\nimport org.ektorp.http.StdHttpClient;\nimport org.ektorp.http.StdHttpResponse;\nimport org.ektorp.impl.changes.ContinuousChangesFeed;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.System;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.mock.java.io.MockFile;\nimport org.evosuite.runtime.mock.java.net.MockURI;\nimport org.evosuite.runtime.testdata.EvoSuiteFile;\nimport org.evosuite.runtime.testdata.FileSystemHandling;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class ContinuousChangesFeed_next extends ContinuousChangesFeed_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void ContinuousChangesFeed_next() throws Throwable {\n    byte[] byteArray0 = new byte[9];\n    byteArray0[2] = (byte) (-24);\n    byteArray0[3] = (byte) 69;\n    byte byte0 = (byte) 62;\n    byteArray0[4] = (byte) 62;\n    byteArray0[5] = (byte) (-9);\n    byteArray0[6] = (byte) 44;\n    byteArray0[7] = (byte) (-98);\n    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);\n    InputStreamEntity inputStreamEntity0 = new InputStreamEntity(byteArrayInputStream0, (byte) 0);\n    URI uRI0 = MockURI.aHttpURI;\n    HttpDelete httpDelete0 = new HttpDelete(uRI0);\n    BufferedHttpEntity bufferedHttpEntity0 = new BufferedHttpEntity(inputStreamEntity0);\n    bufferedHttpEntity0.getContentType();\n    httpDelete0.addHeader((Header) null);\n    StdHttpResponse stdHttpResponse0 = new StdHttpResponse(inputStreamEntity0, (StatusLine) null, httpDelete0, (Header) null);\n    stdHttpResponse0.releaseConnection();\n    ContinuousChangesFeed continuousChangesFeed0 = new ContinuousChangesFeed(\"Changes feed was interrupted\", stdHttpResponse0);\n    FileSystemHandling.shouldAllThrowIOExceptions();\n    byteArrayInputStream0.reset();\n    TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;\n    continuousChangesFeed0.run();\n    // Undeclared exception!\n    try {\n        continuousChangesFeed0.next();\n        fail(\"Expecting exception: IllegalStateException\");\n    } catch (IllegalStateException e) {\n        //\n        // Changes feed is not alive\n        //\n        verifyException(\"org.ektorp.impl.changes.ContinuousChangesFeed\", e);\n    }\n}\n}"
    },
    {
        "original_path": "helun_Ektorp###helun_Ektorp/org.ektorp/src/test/java/org/ektorp/impl/StdCouchDbConnectorTest###testCreate",
        "generated_path": "StdCouchDbConnector_create.java",
        "Compile_result": 1,
        "Test_result": 0,
        "Gen_Test": "package org.ektorp.impl;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport com.fasterxml.jackson.core.JsonFactory;\nimport com.fasterxml.jackson.core.JsonParser;\nimport com.fasterxml.jackson.core.JsonToken;\nimport com.fasterxml.jackson.databind.DeserializationFeature;\nimport com.fasterxml.jackson.databind.InjectableValues;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.PropertyNamingStrategy;\nimport com.fasterxml.jackson.databind.SerializationFeature;\nimport com.fasterxml.jackson.databind.node.ArrayNode;\nimport com.fasterxml.jackson.databind.node.BigIntegerNode;\nimport com.fasterxml.jackson.databind.node.BinaryNode;\nimport com.fasterxml.jackson.databind.node.BooleanNode;\nimport com.fasterxml.jackson.databind.node.DecimalNode;\nimport com.fasterxml.jackson.databind.node.DoubleNode;\nimport com.fasterxml.jackson.databind.node.FloatNode;\nimport com.fasterxml.jackson.databind.node.IntNode;\nimport com.fasterxml.jackson.databind.node.JsonNodeFactory;\nimport com.fasterxml.jackson.databind.node.JsonNodeType;\nimport com.fasterxml.jackson.databind.node.LongNode;\nimport com.fasterxml.jackson.databind.node.MissingNode;\nimport com.fasterxml.jackson.databind.node.NullNode;\nimport com.fasterxml.jackson.databind.node.ObjectNode;\nimport com.fasterxml.jackson.databind.node.POJONode;\nimport com.fasterxml.jackson.databind.node.TextNode;\nimport java.io.BufferedInputStream;\nimport java.io.ByteArrayInputStream;\nimport java.io.FileDescriptor;\nimport java.io.InputStream;\nimport java.io.ObjectInputStream;\nimport java.io.PipedInputStream;\nimport java.io.PipedOutputStream;\nimport java.io.PushbackInputStream;\nimport java.io.SequenceInputStream;\nimport java.math.BigInteger;\nimport java.net.URI;\nimport java.time.ZoneId;\nimport java.time.chrono.HijrahEra;\nimport java.util.ArrayDeque;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.LinkedHashSet;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.Stack;\nimport java.util.TreeSet;\nimport java.util.Vector;\nimport java.util.concurrent.DelayQueue;\nimport java.util.concurrent.Delayed;\nimport java.util.concurrent.ForkJoinPool;\nimport java.util.concurrent.ForkJoinTask;\nimport java.util.concurrent.LinkedBlockingDeque;\nimport java.util.concurrent.LinkedBlockingQueue;\nimport java.util.concurrent.LinkedTransferQueue;\nimport java.util.concurrent.SynchronousQueue;\nimport org.apache.http.HttpEntity;\nimport org.apache.http.HttpRequest;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.ProtocolVersion;\nimport org.apache.http.client.HttpClient;\nimport org.apache.http.client.methods.HttpDelete;\nimport org.apache.http.client.methods.HttpOptions;\nimport org.apache.http.client.methods.HttpPatch;\nimport org.apache.http.client.methods.HttpRequestWrapper;\nimport org.apache.http.conn.ClientConnectionManager;\nimport org.apache.http.entity.BufferedHttpEntity;\nimport org.apache.http.entity.ByteArrayEntity;\nimport org.apache.http.entity.ContentProducer;\nimport org.apache.http.entity.ContentType;\nimport org.apache.http.entity.EntityTemplate;\nimport org.apache.http.entity.InputStreamEntity;\nimport org.apache.http.entity.SerializableEntity;\nimport org.apache.http.entity.StringEntity;\nimport org.apache.http.message.BasicHttpResponse;\nimport org.apache.http.message.BasicStatusLine;\nimport org.apache.http.params.HttpParams;\nimport org.ektorp.AttachmentInputStream;\nimport org.ektorp.CouchDbConnector;\nimport org.ektorp.CouchDbInstance;\nimport org.ektorp.DbInfo;\nimport org.ektorp.DbPath;\nimport org.ektorp.DesignDocInfo;\nimport org.ektorp.DocumentOperationResult;\nimport org.ektorp.LocalBulkBuffer;\nimport org.ektorp.Options;\nimport org.ektorp.Page;\nimport org.ektorp.PageRequest;\nimport org.ektorp.PurgeResult;\nimport org.ektorp.Revision;\nimport org.ektorp.Security;\nimport org.ektorp.SecurityGroup;\nimport org.ektorp.Status;\nimport org.ektorp.UpdateHandlerRequest;\nimport org.ektorp.ViewQuery;\nimport org.ektorp.ViewResult;\nimport org.ektorp.changes.ChangesCommand;\nimport org.ektorp.http.ResponseCallback;\nimport org.ektorp.http.RestTemplate;\nimport org.ektorp.http.StdHttpClient;\nimport org.ektorp.http.StdResponseHandler;\nimport org.ektorp.impl.BulkDocumentWriter;\nimport org.ektorp.impl.BulkOperation;\nimport org.ektorp.impl.CachingObjectMapperFactory;\nimport org.ektorp.impl.DefaultQueryExecutor;\nimport org.ektorp.impl.InputStreamBulkEntityBulkExecutor;\nimport org.ektorp.impl.InputStreamWrapperBulkExecutor;\nimport org.ektorp.impl.JsonSerializer;\nimport org.ektorp.impl.StdCouchDbConnector;\nimport org.ektorp.impl.StdCouchDbInstance;\nimport org.ektorp.impl.StdObjectMapperFactory;\nimport org.ektorp.impl.StreamedCouchDbConnector;\nimport org.ektorp.impl.StreamingJsonSerializer;\nimport org.ektorp.impl.changes.StdDocumentChange;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.mock.java.io.MockFileInputStream;\nimport org.evosuite.runtime.mock.java.io.MockRandomAccessFile;\nimport org.evosuite.runtime.mock.java.net.MockURI;\nimport org.evosuite.runtime.testdata.EvoSuiteFile;\nimport org.evosuite.runtime.testdata.FileSystemHandling;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class StdCouchDbConnector_create extends StdCouchDbConnector_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void StdCouchDbConnector_create() throws Throwable {\n    String string0 = \"num\";\n    HttpParams httpParams0 = mock(HttpParams.class, new ViolatedAssumptionAnswer());\n    HttpClient httpClient0 = mock(HttpClient.class, new ViolatedAssumptionAnswer());\n    StdHttpClient stdHttpClient0 = new StdHttpClient(httpClient0);\n    assertNotNull(stdHttpClient0);\n    StdCouchDbInstance stdCouchDbInstance0 = new StdCouchDbInstance(stdHttpClient0);\n    assertNotNull(stdCouchDbInstance0);\n    StdCouchDbConnector stdCouchDbConnector0 = new StdCouchDbConnector(\"num\", stdCouchDbInstance0);\n    assertEquals(\"num\", stdCouchDbConnector0.getDatabaseName());\n    assertNotNull(stdCouchDbConnector0);\n    String string1 = \"Iterator can only be called once!\";\n    // Undeclared exception!\n    try {\n        stdCouchDbConnector0.create((Object) stdHttpClient0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        //\n        // Cannot resolve id accessor in class org.ektorp.http.StdHttpClient\n        //\n        verifyException(\"org.ektorp.util.Documents$MethodAccessor\", e);\n    }\n}\n}"
    },
    {
        "original_path": "helun_Ektorp###helun_Ektorp/org.ektorp/src/test/java/org/ektorp/impl/StreamedCouchDbConnectorTest###testCreate",
        "generated_path": "StreamedCouchDbConnector_create.java",
        "Compile_result": 1,
        "Test_result": 0,
        "Gen_Test": "package org.ektorp.impl;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.util.HashMap;\nimport java.util.List;\nimport org.apache.http.HttpEntity;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.ProtocolVersion;\nimport org.apache.http.client.HttpClient;\nimport org.apache.http.client.methods.HttpRequestWrapper;\nimport org.apache.http.client.methods.HttpTrace;\nimport org.apache.http.message.BasicHttpResponse;\nimport org.apache.http.message.BasicStatusLine;\nimport org.apache.http.params.HttpParams;\nimport org.ektorp.CouchDbInstance;\nimport org.ektorp.DocumentOperationResult;\nimport org.ektorp.http.StdHttpClient;\nimport org.ektorp.impl.CachingObjectMapperFactory;\nimport org.ektorp.impl.StdCouchDbInstance;\nimport org.ektorp.impl.StdObjectMapperFactory;\nimport org.ektorp.impl.StreamedCouchDbConnector;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class StreamedCouchDbConnector_create extends StreamedCouchDbConnector_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void StreamedCouchDbConnector_create() throws Throwable {\n    StdHttpClient stdHttpClient0 = new StdHttpClient((HttpClient) null, (HttpClient) null);\n    StdObjectMapperFactory stdObjectMapperFactory0 = new StdObjectMapperFactory();\n    StdCouchDbInstance stdCouchDbInstance0 = new StdCouchDbInstance(stdHttpClient0, stdObjectMapperFactory0);\n    StreamedCouchDbConnector streamedCouchDbConnector0 = new StreamedCouchDbConnector(\"org.ektorp.impl.StreamedCouchDbConnector$2\", stdCouchDbInstance0);\n    DocumentOperationResult documentOperationResult0 = DocumentOperationResult.newInstance(\"node may not be null\", \"\", (String) null);\n    // Undeclared exception!\n    try {\n        streamedCouchDbConnector0.create((Object) documentOperationResult0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        //\n        // Cannot resolve revision mutator in class org.ektorp.DocumentOperationResult\n        //\n        verifyException(\"org.ektorp.util.Documents$MethodAccessor\", e);\n    }\n}\n}"
    },
    {
        "original_path": "helun_Ektorp###helun_Ektorp/org.ektorp/src/test/java/org/ektorp/util/ReflectionUtilsTest###testFindMethod",
        "generated_path": "ReflectionUtils_findMethod.java",
        "Compile_result": 1,
        "Test_result": 0,
        "Gen_Test": "package org.ektorp.util;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.lang.annotation.Annotation;\nimport java.lang.reflect.AnnotatedElement;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.Method;\nimport java.util.Collection;\nimport org.ektorp.util.Predicate;\nimport org.ektorp.util.ReflectionUtils;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class ReflectionUtils_findMethod extends ReflectionUtils_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    Class<String> class0 = String.class;\n    Method method0 = ReflectionUtils.findMethod(class0, \"compareto\");\n    assertEquals(\"public int java.lang.String.compareTo(java.lang.Object)\", method0.toString());\n    assertNotNull(method0);\n}\n}"
    },
    {
        "original_path": "helun_Ektorp###helun_Ektorp/org.ektorp/src/test/java/org/ektorp/impl/StdCouchDbConnectorTest###testGetWithConflicts",
        "generated_path": "StdCouchDbConnector_getWithConflicts.java",
        "Compile_result": 1,
        "Test_result": 0,
        "Gen_Test": "package org.ektorp.impl;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport com.fasterxml.jackson.core.JsonFactory;\nimport com.fasterxml.jackson.core.JsonParser;\nimport com.fasterxml.jackson.core.JsonToken;\nimport com.fasterxml.jackson.databind.DeserializationFeature;\nimport com.fasterxml.jackson.databind.InjectableValues;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.PropertyNamingStrategy;\nimport com.fasterxml.jackson.databind.SerializationFeature;\nimport com.fasterxml.jackson.databind.node.ArrayNode;\nimport com.fasterxml.jackson.databind.node.BigIntegerNode;\nimport com.fasterxml.jackson.databind.node.BinaryNode;\nimport com.fasterxml.jackson.databind.node.BooleanNode;\nimport com.fasterxml.jackson.databind.node.DecimalNode;\nimport com.fasterxml.jackson.databind.node.DoubleNode;\nimport com.fasterxml.jackson.databind.node.FloatNode;\nimport com.fasterxml.jackson.databind.node.IntNode;\nimport com.fasterxml.jackson.databind.node.JsonNodeFactory;\nimport com.fasterxml.jackson.databind.node.JsonNodeType;\nimport com.fasterxml.jackson.databind.node.LongNode;\nimport com.fasterxml.jackson.databind.node.MissingNode;\nimport com.fasterxml.jackson.databind.node.NullNode;\nimport com.fasterxml.jackson.databind.node.ObjectNode;\nimport com.fasterxml.jackson.databind.node.POJONode;\nimport com.fasterxml.jackson.databind.node.TextNode;\nimport java.io.BufferedInputStream;\nimport java.io.ByteArrayInputStream;\nimport java.io.FileDescriptor;\nimport java.io.InputStream;\nimport java.io.ObjectInputStream;\nimport java.io.PipedInputStream;\nimport java.io.PipedOutputStream;\nimport java.io.PushbackInputStream;\nimport java.io.SequenceInputStream;\nimport java.math.BigInteger;\nimport java.net.URI;\nimport java.time.ZoneId;\nimport java.time.chrono.HijrahEra;\nimport java.util.ArrayDeque;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.LinkedHashSet;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.Stack;\nimport java.util.TreeSet;\nimport java.util.Vector;\nimport java.util.concurrent.DelayQueue;\nimport java.util.concurrent.Delayed;\nimport java.util.concurrent.ForkJoinPool;\nimport java.util.concurrent.ForkJoinTask;\nimport java.util.concurrent.LinkedBlockingDeque;\nimport java.util.concurrent.LinkedBlockingQueue;\nimport java.util.concurrent.LinkedTransferQueue;\nimport java.util.concurrent.SynchronousQueue;\nimport org.apache.http.HttpEntity;\nimport org.apache.http.HttpRequest;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.ProtocolVersion;\nimport org.apache.http.client.HttpClient;\nimport org.apache.http.client.methods.HttpDelete;\nimport org.apache.http.client.methods.HttpOptions;\nimport org.apache.http.client.methods.HttpPatch;\nimport org.apache.http.client.methods.HttpRequestWrapper;\nimport org.apache.http.conn.ClientConnectionManager;\nimport org.apache.http.entity.BufferedHttpEntity;\nimport org.apache.http.entity.ByteArrayEntity;\nimport org.apache.http.entity.ContentProducer;\nimport org.apache.http.entity.ContentType;\nimport org.apache.http.entity.EntityTemplate;\nimport org.apache.http.entity.InputStreamEntity;\nimport org.apache.http.entity.SerializableEntity;\nimport org.apache.http.entity.StringEntity;\nimport org.apache.http.message.BasicHttpResponse;\nimport org.apache.http.message.BasicStatusLine;\nimport org.apache.http.params.HttpParams;\nimport org.ektorp.AttachmentInputStream;\nimport org.ektorp.CouchDbConnector;\nimport org.ektorp.CouchDbInstance;\nimport org.ektorp.DbInfo;\nimport org.ektorp.DbPath;\nimport org.ektorp.DesignDocInfo;\nimport org.ektorp.DocumentOperationResult;\nimport org.ektorp.LocalBulkBuffer;\nimport org.ektorp.Options;\nimport org.ektorp.Page;\nimport org.ektorp.PageRequest;\nimport org.ektorp.PurgeResult;\nimport org.ektorp.Revision;\nimport org.ektorp.Security;\nimport org.ektorp.SecurityGroup;\nimport org.ektorp.Status;\nimport org.ektorp.UpdateHandlerRequest;\nimport org.ektorp.ViewQuery;\nimport org.ektorp.ViewResult;\nimport org.ektorp.changes.ChangesCommand;\nimport org.ektorp.http.ResponseCallback;\nimport org.ektorp.http.RestTemplate;\nimport org.ektorp.http.StdHttpClient;\nimport org.ektorp.http.StdResponseHandler;\nimport org.ektorp.impl.BulkDocumentWriter;\nimport org.ektorp.impl.BulkOperation;\nimport org.ektorp.impl.CachingObjectMapperFactory;\nimport org.ektorp.impl.DefaultQueryExecutor;\nimport org.ektorp.impl.InputStreamBulkEntityBulkExecutor;\nimport org.ektorp.impl.InputStreamWrapperBulkExecutor;\nimport org.ektorp.impl.JsonSerializer;\nimport org.ektorp.impl.StdCouchDbConnector;\nimport org.ektorp.impl.StdCouchDbInstance;\nimport org.ektorp.impl.StdObjectMapperFactory;\nimport org.ektorp.impl.StreamedCouchDbConnector;\nimport org.ektorp.impl.StreamingJsonSerializer;\nimport org.ektorp.impl.changes.StdDocumentChange;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.mock.java.io.MockFileInputStream;\nimport org.evosuite.runtime.mock.java.io.MockRandomAccessFile;\nimport org.evosuite.runtime.mock.java.net.MockURI;\nimport org.evosuite.runtime.testdata.EvoSuiteFile;\nimport org.evosuite.runtime.testdata.FileSystemHandling;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class StdCouchDbConnector_getWithConflicts extends StdCouchDbConnector_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void StdCouchDbConnector_getWithConflicts() throws Throwable {\n    HttpClient httpClient0 = mock(HttpClient.class, new ViolatedAssumptionAnswer());\n    doReturn((HttpParams) null).when(httpClient0).getParams();\n    StdHttpClient stdHttpClient0 = new StdHttpClient(httpClient0, httpClient0);\n    assertNotNull(stdHttpClient0);\n    StdCouchDbInstance stdCouchDbInstance0 = new StdCouchDbInstance(stdHttpClient0);\n    assertNotNull(stdCouchDbInstance0);\n    StdObjectMapperFactory stdObjectMapperFactory0 = new StdObjectMapperFactory();\n    assertNotNull(stdObjectMapperFactory0);\n    StreamedCouchDbConnector streamedCouchDbConnector0 = new StreamedCouchDbConnector(\"o\", stdCouchDbInstance0, stdObjectMapperFactory0);\n    assertEquals(\"o\", streamedCouchDbConnector0.getDatabaseName());\n    assertNotNull(streamedCouchDbConnector0);\n    ViewQuery viewQuery0 = new ViewQuery();\n    assertNull(viewQuery0.getDesignDocId());\n    assertNull(viewQuery0.getViewName());\n    assertEquals((-1), viewQuery0.getSkip());\n    assertFalse(viewQuery0.isIncludeDocs());\n    assertFalse(viewQuery0.isCacheOk());\n    assertFalse(viewQuery0.isUpdateSeq());\n    assertFalse(viewQuery0.isStaleOk());\n    assertEquals((-1), viewQuery0.getLimit());\n    assertNull(viewQuery0.getEndDocId());\n    assertEquals((-1), viewQuery0.getGroupLevel());\n    assertFalse(viewQuery0.isGroup());\n    assertTrue(viewQuery0.isReduce());\n    assertFalse(viewQuery0.hasMultipleKeys());\n    assertFalse(viewQuery0.isIgnoreNotFound());\n    assertNull(viewQuery0.getStartDocId());\n    assertNull(viewQuery0.getDbPath());\n    assertTrue(viewQuery0.isInclusiveEnd());\n    assertFalse(viewQuery0.isDescending());\n    assertNotNull(viewQuery0);\n    ViewQuery viewQuery1 = viewQuery0.dbPath(\".VFZQR0`9!qcT~\");\n    assertNull(viewQuery0.getDesignDocId());\n    assertNull(viewQuery0.getViewName());\n    assertEquals((-1), viewQuery0.getSkip());\n    assertFalse(viewQuery0.isIncludeDocs());\n    assertFalse(viewQuery0.isCacheOk());\n    assertFalse(viewQuery0.isUpdateSeq());\n    assertFalse(viewQuery0.isStaleOk());\n    assertEquals((-1), viewQuery0.getLimit());\n    assertNull(viewQuery0.getEndDocId());\n    assertEquals((-1), viewQuery0.getGroupLevel());\n    assertFalse(viewQuery0.isGroup());\n    assertEquals(\".VFZQR0`9!qcT~\", viewQuery0.getDbPath());\n    assertTrue(viewQuery0.isReduce());\n    assertFalse(viewQuery0.hasMultipleKeys());\n    assertFalse(viewQuery0.isIgnoreNotFound());\n    assertNull(viewQuery0.getStartDocId());\n    assertTrue(viewQuery0.isInclusiveEnd());\n    assertFalse(viewQuery0.isDescending());\n    assertFalse(viewQuery1.isStaleOk());\n    assertFalse(viewQuery1.isIgnoreNotFound());\n    assertEquals((-1), viewQuery1.getLimit());\n    assertFalse(viewQuery1.isGroup());\n    assertTrue(viewQuery1.isReduce());\n    assertEquals((-1), viewQuery1.getGroupLevel());\n    assertEquals(\".VFZQR0`9!qcT~\", viewQuery1.getDbPath());\n    assertEquals((-1), viewQuery1.getSkip());\n    assertFalse(viewQuery1.isDescending());\n    assertTrue(viewQuery1.isInclusiveEnd());\n    assertFalse(viewQuery1.isUpdateSeq());\n    assertNull(viewQuery1.getDesignDocId());\n    assertFalse(viewQuery1.isCacheOk());\n    assertNull(viewQuery1.getStartDocId());\n    assertFalse(viewQuery1.hasMultipleKeys());\n    assertFalse(viewQuery1.isIncludeDocs());\n    assertNull(viewQuery1.getEndDocId());\n    assertNull(viewQuery1.getViewName());\n    assertSame(viewQuery0, viewQuery1);\n    assertSame(viewQuery1, viewQuery0);\n    assertNotNull(viewQuery1);\n    ViewQuery viewQuery2 = viewQuery1.startKey(\".VFZQR0`9!qcT~\");\n    assertNull(viewQuery0.getDesignDocId());\n    assertNull(viewQuery0.getViewName());\n    assertEquals((-1), viewQuery0.getSkip());\n    assertFalse(viewQuery0.isIncludeDocs());\n    assertFalse(viewQuery0.isCacheOk());\n    assertFalse(viewQuery0.isUpdateSeq());\n    assertFalse(viewQuery0.isStaleOk());\n    assertEquals((-1), viewQuery0.getLimit());\n    assertNull(viewQuery0.getEndDocId());\n    assertEquals((-1), viewQuery0.getGroupLevel());\n    assertFalse(viewQuery0.isGroup());\n    assertEquals(\".VFZQR0`9!qcT~\", viewQuery0.getDbPath());\n    assertTrue(viewQuery0.isReduce());\n    assertFalse(viewQuery0.hasMultipleKeys());\n    assertFalse(viewQuery0.isIgnoreNotFound());\n    assertNull(viewQuery0.getStartDocId());\n    assertTrue(viewQuery0.isInclusiveEnd());\n    assertFalse(viewQuery0.isDescending());\n    assertFalse(viewQuery1.isStaleOk());\n    assertFalse(viewQuery1.isIgnoreNotFound());\n    assertEquals((-1), viewQuery1.getLimit());\n    assertFalse(viewQuery1.isGroup());\n    assertTrue(viewQuery1.isReduce());\n    assertEquals((-1), viewQuery1.getGroupLevel());\n    assertEquals(\".VFZQR0`9!qcT~\", viewQuery1.getDbPath());\n    assertEquals((-1), viewQuery1.getSkip());\n    assertFalse(viewQuery1.isDescending());\n    assertTrue(viewQuery1.isInclusiveEnd());\n    assertFalse(viewQuery1.isUpdateSeq());\n    assertNull(viewQuery1.getDesignDocId());\n    assertFalse(viewQuery1.isCacheOk());\n    assertNull(viewQuery1.getStartDocId());\n    assertFalse(viewQuery1.hasMultipleKeys());\n    assertFalse(viewQuery1.isIncludeDocs());\n    assertNull(viewQuery1.getEndDocId());\n    assertNull(viewQuery1.getViewName());\n    assertNull(viewQuery2.getDesignDocId());\n    assertFalse(viewQuery2.isDescending());\n    assertEquals((-1), viewQuery2.getSkip());\n    assertTrue(viewQuery2.isInclusiveEnd());\n    assertFalse(viewQuery2.hasMultipleKeys());\n    assertFalse(viewQuery2.isIncludeDocs());\n    assertNull(viewQuery2.getEndDocId());\n    assertNull(viewQuery2.getViewName());\n    assertNull(viewQuery2.getStartDocId());\n    assertFalse(viewQuery2.isStaleOk());\n    assertEquals(\".VFZQR0`9!qcT~\", viewQuery2.getDbPath());\n    assertEquals((-1), viewQuery2.getGroupLevel());\n    assertFalse(viewQuery2.isGroup());\n    assertFalse(viewQuery2.isIgnoreNotFound());\n    assertEquals((-1), viewQuery2.getLimit());\n    assertTrue(viewQuery2.isReduce());\n    assertFalse(viewQuery2.isCacheOk());\n    assertFalse(viewQuery2.isUpdateSeq());\n    assertSame(viewQuery0, viewQuery1);\n    assertSame(viewQuery0, viewQuery2);\n    assertSame(viewQuery1, viewQuery2);\n    assertSame(viewQuery1, viewQuery0);\n    assertSame(viewQuery2, viewQuery0);\n    assertSame(viewQuery2, viewQuery1);\n    assertNotNull(viewQuery2);\n    int int0 = 0;\n    String string0 = \"N8hEuw9XLHsS\\\">i\";\n    String string1 = \"\";\n    byte[] byteArray0 = new byte[6];\n    ViewQuery viewQuery3 = viewQuery1.key((float) (byte) (-127));\n    assertNull(viewQuery0.getDesignDocId());\n    assertNull(viewQuery0.getViewName());\n    assertEquals((-1), viewQuery0.getSkip());\n    assertFalse(viewQuery0.isIncludeDocs());\n    assertFalse(viewQuery0.isCacheOk());\n    assertFalse(viewQuery0.isUpdateSeq());\n    assertFalse(viewQuery0.isStaleOk());\n    assertEquals((-1), viewQuery0.getLimit());\n    assertNull(viewQuery0.getEndDocId());\n    assertEquals((-1), viewQuery0.getGroupLevel());\n    assertFalse(viewQuery0.isGroup());\n    assertEquals(\".VFZQR0`9!qcT~\", viewQuery0.getDbPath());\n    assertTrue(viewQuery0.isReduce());\n    assertFalse(viewQuery0.hasMultipleKeys());\n    assertFalse(viewQuery0.isIgnoreNotFound());\n    assertNull(viewQuery0.getStartDocId());\n    assertTrue(viewQuery0.isInclusiveEnd());\n    assertFalse(viewQuery0.isDescending());\n    assertFalse(viewQuery1.isStaleOk());\n    assertFalse(viewQuery1.isIgnoreNotFound());\n    assertEquals((-1), viewQuery1.getLimit());\n    assertFalse(viewQuery1.isGroup());\n    assertTrue(viewQuery1.isReduce());\n    assertEquals((-1), viewQuery1.getGroupLevel());\n    assertEquals(\".VFZQR0`9!qcT~\", viewQuery1.getDbPath());\n    assertEquals((-1), viewQuery1.getSkip());\n    assertFalse(viewQuery1.isDescending());\n    assertTrue(viewQuery1.isInclusiveEnd());\n    assertFalse(viewQuery1.isUpdateSeq());\n    assertNull(viewQuery1.getDesignDocId());\n    assertFalse(viewQuery1.isCacheOk());\n    assertNull(viewQuery1.getStartDocId());\n    assertFalse(viewQuery1.hasMultipleKeys());\n    assertFalse(viewQuery1.isIncludeDocs());\n    assertNull(viewQuery1.getEndDocId());\n    assertNull(viewQuery1.getViewName());\n    assertEquals(\".VFZQR0`9!qcT~\", viewQuery3.getDbPath());\n    assertFalse(viewQuery3.isStaleOk());\n    assertEquals((-1), viewQuery3.getGroupLevel());\n    assertFalse(viewQuery3.isGroup());\n    assertFalse(viewQuery3.isIgnoreNotFound());\n    assertEquals((-1), viewQuery3.getLimit());\n    assertFalse(viewQuery3.hasMultipleKeys());\n    assertFalse(viewQuery3.isIncludeDocs());\n    assertNull(viewQuery3.getViewName());\n    assertNull(viewQuery3.getStartDocId());\n    assertNull(viewQuery3.getEndDocId());\n    assertNull(viewQuery3.getDesignDocId());\n    assertEquals((-1), viewQuery3.getSkip());\n    assertFalse(viewQuery3.isDescending());\n    assertFalse(viewQuery3.isCacheOk());\n    assertTrue(viewQuery3.isInclusiveEnd());\n    assertFalse(viewQuery3.isUpdateSeq());\n    assertTrue(viewQuery3.isReduce());\n    assertSame(viewQuery0, viewQuery1);\n    assertSame(viewQuery0, viewQuery2);\n    assertSame(viewQuery0, viewQuery3);\n    assertSame(viewQuery1, viewQuery2);\n    assertSame(viewQuery1, viewQuery3);\n    assertSame(viewQuery1, viewQuery0);\n    assertSame(viewQuery3, viewQuery2);\n    assertSame(viewQuery3, viewQuery1);\n    assertSame(viewQuery3, viewQuery0);\n    assertNotNull(viewQuery3);\n    byteArray0[0] = (byte) (-127);\n    byteArray0[1] = (byte) 34;\n    byteArray0[2] = (byte) 32;\n    byteArray0[3] = (byte) 94;\n    byteArray0[4] = (byte) 18;\n    byteArray0[5] = (byte) 0;\n    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);\n    assertEquals(6, byteArray0.length);\n    assertEquals(6, byteArrayInputStream0.available());\n    assertNotNull(byteArrayInputStream0);\n    assertArrayEquals(new byte[] { (byte) (-127), (byte) 34, (byte) 32, (byte) 94, (byte) 18, (byte) 0 }, byteArray0);\n    Class<ObjectInputStream> class0 = ObjectInputStream.class;\n    // Undeclared exception!\n    try {\n        streamedCouchDbConnector0.getWithConflicts(class0, \"N8hEuw9XLHsS\\\">i\");\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        //\n        // no message in exception (getMessage() returned null)\n        //\n        verifyException(\"org.ektorp.http.StdHttpClient\", e);\n    }\n}\n}"
    },
    {
        "original_path": "HiveRunner_HiveRunner###HiveRunner_HiveRunner/src/test/java/com/klarna/hiverunner/data/TableDataBuilderTest###testCopyRow",
        "generated_path": "TableDataBuilder_copyRow.java",
        "Compile_result": 1,
        "Test_result": 0,
        "Gen_Test": "package com.klarna.hiverunner.data;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.google.common.collect.Multimap;\nimport com.klarna.hiverunner.data.FileParser;\nimport com.klarna.hiverunner.data.TableDataBuilder;\nimport java.io.File;\nimport java.nio.file.Path;\nimport java.util.List;\nimport java.util.Map;\nimport org.apache.hive.hcatalog.api.HCatTable;\nimport org.apache.hive.hcatalog.data.HCatRecord;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class TableDataBuilder_copyRow extends TableDataBuilder_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void TableDataBuilder_copyRow() throws Throwable {\n    HCatTable hCatTable0 = mock(HCatTable.class, new ViolatedAssumptionAnswer());\n    doReturn((List) null).when(hCatTable0).getCols();\n    doReturn((List) null, (List) null).when(hCatTable0).getPartCols();\n    TableDataBuilder tableDataBuilder0 = new TableDataBuilder(hCatTable0);\n    // Undeclared exception!\n    try {\n        tableDataBuilder0.copyRow();\n        fail(\"Expecting exception: IllegalStateException\");\n    } catch (IllegalStateException e) {\n        //\n        // No previous row to copy.\n        //\n        verifyException(\"com.google.common.base.Preconditions\", e);\n    }\n}\n}"
    },
    {
        "original_path": "Terracotta-OSS_offheap-store###Terracotta-OSS_offheap-store/src/test/java/org/terracotta/offheapstore/paging/UpfrontAllocatingPageSourceTest###testGetCapacity",
        "generated_path": "UpfrontAllocatingPageSource_getCapacity.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.terracotta.offheapstore.paging;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport ch.qos.logback.classic.net.SSLSocketReceiver;\nimport ch.qos.logback.classic.net.SocketReceiver;\nimport java.nio.ByteBuffer;\nimport java.util.concurrent.FutureTask;\nimport java.util.concurrent.TimeUnit;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.System;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.mock.java.lang.MockThread;\nimport org.junit.runner.RunWith;\nimport org.terracotta.offheapstore.buffersource.BufferSource;\nimport org.terracotta.offheapstore.buffersource.HeapBufferSource;\nimport org.terracotta.offheapstore.buffersource.OffHeapBufferSource;\nimport org.terracotta.offheapstore.buffersource.TimingBufferSource;\nimport org.terracotta.offheapstore.paging.OffHeapStorageArea;\nimport org.terracotta.offheapstore.paging.OffHeapStorageAreaTest;\nimport org.terracotta.offheapstore.paging.Page;\nimport org.terracotta.offheapstore.paging.PhantomReferenceLimitedPageSource;\nimport org.terracotta.offheapstore.paging.UnlimitedPageSource;\nimport org.terracotta.offheapstore.paging.UpfrontAllocatingPageSource;\nimport org.terracotta.offheapstore.paging.UpfrontAllocatingPageSourceThresholdTest;\nimport org.terracotta.offheapstore.storage.PointerSize;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class UpfrontAllocatingPageSource_getCapacity extends UpfrontAllocatingPageSource_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    OffHeapBufferSource offHeapBufferSource0 = new OffHeapBufferSource();\n    UpfrontAllocatingPageSource upfrontAllocatingPageSource0 = new UpfrontAllocatingPageSource(offHeapBufferSource0, 0L, 2574);\n    UnlimitedPageSource unlimitedPageSource0 = new UnlimitedPageSource(offHeapBufferSource0);\n    Page page0 = unlimitedPageSource0.allocate(2574, false, false, (OffHeapStorageArea) null);\n    upfrontAllocatingPageSource0.free(page0);\n    upfrontAllocatingPageSource0.getCapacity();\n    upfrontAllocatingPageSource0.free(page0);\n}\n}"
    },
    {
        "original_path": "jmeter-maven-plugin_jmeter-maven-plugin###jmeter-maven-plugin_jmeter-maven-plugin/src/test/java/com/lazerycode/jmeter/utility/UtilityFunctionsTest###humanReadableCommandLineOutputTest",
        "generated_path": "UtilityFunctions_humanReadableCommandLineOutput.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.lazerycode.jmeter.utility;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.lazerycode.jmeter.utility.UtilityFunctions;\nimport java.io.File;\nimport java.util.ConcurrentModificationException;\nimport java.util.HashMap;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.io.MockFile;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class UtilityFunctions_humanReadableCommandLineOutput extends UtilityFunctions_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test20() throws Throwable {\n    LinkedList<String> linkedList0 = new LinkedList<String>();\n    linkedList0.add(\"[\\nl$8\\r]\");\n    String string0 = UtilityFunctions.humanReadableCommandLineOutput(linkedList0);\n    assertTrue(linkedList0.contains(string0));\n}\n}"
    },
    {
        "original_path": "GoogleCloudPlatform_app-maven-plugin###GoogleCloudPlatform_app-maven-plugin/src/test/java/com/google/cloud/tools/maven/run/RunnerTest###testRunAsync",
        "generated_path": "Runner_runAsync.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "package com.google.cloud.tools.maven.run;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.google.cloud.tools.appengine.configuration.RunConfiguration;\nimport com.google.cloud.tools.maven.run.AbstractRunMojo;\nimport com.google.cloud.tools.maven.run.RunAsyncMojo;\nimport com.google.cloud.tools.maven.run.RunMojo;\nimport com.google.cloud.tools.maven.run.Runner;\nimport java.nio.file.Path;\nimport java.util.ArrayList;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class Runner_runAsync extends Runner_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void Runner_runAsync() throws Throwable {\n    RunMojo runMojo0 = new RunMojo();\n    Runner.ConfigBuilder runner_ConfigBuilder0 = new Runner.ConfigBuilder(runMojo0);\n    Runner runner0 = new Runner(runMojo0, runner_ConfigBuilder0);\n    // Undeclared exception!\n    try {\n        runner0.runAsync((-2147483645));\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        //\n        // no message in exception (getMessage() returned null)\n        //\n        verifyException(\"com.google.cloud.tools.maven.cloudsdk.CloudSdkAppEngineFactory\", e);\n    }\n}\n}"
    },
    {
        "original_path": "GoogleCloudPlatform_app-maven-plugin###GoogleCloudPlatform_app-maven-plugin/src/test/java/com/google/cloud/tools/maven/stage/AppEngineWebXmlStagerTest###testStage",
        "generated_path": "AppEngineWebXmlStager_stage.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "package com.google.cloud.tools.maven.stage;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.google.cloud.tools.maven.stage.AbstractStageMojo;\nimport com.google.cloud.tools.maven.stage.AppEngineWebXmlStager;\nimport com.google.cloud.tools.maven.stage.StageMojo;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class AppEngineWebXmlStager_stage extends AppEngineWebXmlStager_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void AppEngineWebXmlStager_stage() throws Throwable {\n    StageMojo stageMojo0 = new StageMojo();\n    AppEngineWebXmlStager appEngineWebXmlStager0 = AppEngineWebXmlStager.newAppEngineWebXmlStager(stageMojo0);\n    // Undeclared exception!\n    try {\n        appEngineWebXmlStager0.stage();\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        //\n        // no message in exception (getMessage() returned null)\n        //\n        verifyException(\"com.google.cloud.tools.maven.stage.AbstractStageMojo\", e);\n    }\n}\n}"
    },
    {
        "original_path": "davidmoten_rxjava-extras###davidmoten_rxjava-extras/src/test/java/com/github/davidmoten/rx/BytesTest###testUnzip",
        "generated_path": "Bytes_unzip.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.github.davidmoten.rx;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.github.davidmoten.rx.Bytes;\nimport com.github.davidmoten.rx.util.ZippedEntry;\nimport java.io.File;\nimport java.io.InputStream;\nimport java.util.zip.ZipInputStream;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.junit.runner.RunWith;\nimport rx.Observable;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class Bytes_unzip extends Bytes_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test2() throws Throwable {\n    ZipInputStream zipInputStream0 = mock(ZipInputStream.class, new ViolatedAssumptionAnswer());\n    Observable<ZippedEntry> observable0 = Bytes.unzip(zipInputStream0);\n    assertNotNull(observable0);\n}\n}"
    },
    {
        "original_path": "fulmicoton_multiregexp###fulmicoton_multiregexp/src/test/java/com/fulmicoton/multiregexp/MultiPatternSearcherTest###testInverseAutomaton",
        "generated_path": "MultiPatternSearcher_inverseAutomaton.java",
        "Compile_result": 1,
        "Test_result": 0,
        "Gen_Test": "package com.fulmicoton.multiregexp;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.fulmicoton.multiregexp.MultiPatternAutomaton;\nimport com.fulmicoton.multiregexp.MultiPatternSearcher;\nimport dk.brics.automaton.Automaton;\nimport java.nio.CharBuffer;\nimport java.util.LinkedList;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class MultiPatternSearcher_inverseAutomaton extends MultiPatternSearcher_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    Automaton automaton0 = Automaton.makeAnyString();\n    Automaton automaton1 = MultiPatternSearcher.inverseAutomaton(automaton0);\n    assertTrue(automaton1.equals((Object) automaton0));\n}\n}"
    },
    {
        "original_path": "bekkopen_NoCommons###bekkopen_NoCommons/src/test/java/no/bekk/bekkopen/mail/MailValidatorTest###testGetPostnummerForPoststed",
        "generated_path": "MailValidator_getPostnummerForPoststed.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package no.bekk.bekkopen.mail;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Optional;\nimport no.bekk.bekkopen.mail.MailValidator;\nimport no.bekk.bekkopen.mail.model.Kommunenavn;\nimport no.bekk.bekkopen.mail.model.Kommunenummer;\nimport no.bekk.bekkopen.mail.model.PostInfo;\nimport no.bekk.bekkopen.mail.model.Postnummer;\nimport no.bekk.bekkopen.mail.model.PostnummerKategori;\nimport no.bekk.bekkopen.mail.model.Poststed;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class MailValidator_getPostnummerForPoststed extends MailValidator_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test17() throws Throwable {\n    List<Postnummer> list0 = MailValidator.getPostnummerForPoststed(\"T[{\");\n    assertTrue(list0.isEmpty());\n}\n}"
    },
    {
        "original_path": "bekkopen_NoCommons###bekkopen_NoCommons/src/test/java/no/bekk/bekkopen/banking/KontonummerCalculatorTest###testGetKontonummerListForAccountType",
        "generated_path": "KontonummerCalculator_getKontonummerListForAccountType.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package no.bekk.bekkopen.banking;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport no.bekk.bekkopen.banking.KontonummerCalculator;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class KontonummerCalculator_getKontonummerListForAccountType extends KontonummerCalculator_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void KontonummerCalculator_getKontonummerListForAccountType() throws Throwable {\n    // Undeclared exception!\n    try {\n        KontonummerCalculator.getKontonummerListForAccountType(\"OcG\", 11);\n        fail(\"Expecting exception: IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n        //\n        // Only digits are allowed : OcG\n        //\n        verifyException(\"no.bekk.bekkopen.common.StringNumberValidator\", e);\n    }\n}\n}"
    },
    {
        "original_path": "bekkopen_NoCommons###bekkopen_NoCommons/src/test/java/no/bekk/bekkopen/person/FodselsnummerTest###testGetCentury",
        "generated_path": "Fodselsnummer_getCentury.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package no.bekk.bekkopen.person;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport no.bekk.bekkopen.person.Fodselsnummer;\nimport no.bekk.bekkopen.person.KJONN;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class Fodselsnummer_getCentury extends Fodselsnummer_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test46() throws Throwable {\n    Fodselsnummer fodselsnummer0 = new Fodselsnummer(\"KVINNE\");\n    // Undeclared exception!\n    try {\n        fodselsnummer0.getCentury();\n        fail(\"Expecting exception: StringIndexOutOfBoundsException\");\n    } catch (StringIndexOutOfBoundsException e) {\n    }\n}\n}"
    },
    {
        "original_path": "bekkopen_NoCommons###bekkopen_NoCommons/src/test/java/no/bekk/bekkopen/banking/KontonummerCalculatorTest###testGetKontonummerListForRegisternummer",
        "generated_path": "KontonummerCalculator_getKontonummerListForRegisternummer.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package no.bekk.bekkopen.banking;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport no.bekk.bekkopen.banking.KontonummerCalculator;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class KontonummerCalculator_getKontonummerListForRegisternummer extends KontonummerCalculator_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test0() throws Throwable {\n    KontonummerCalculator.getKontonummerListForRegisternummer(\"0000\", (-5609));\n}\n}"
    },
    {
        "original_path": "bekkopen_NoCommons###bekkopen_NoCommons/src/test/java/no/bekk/bekkopen/banking/KontonummerTest###testGetGroupedValue",
        "generated_path": "Kontonummer_getGroupedValue.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package no.bekk.bekkopen.banking;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport no.bekk.bekkopen.banking.Kontonummer;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class Kontonummer_getGroupedValue extends Kontonummer_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    Kontonummer kontonummer0 = new Kontonummer(\"\");\n    // Undeclared exception!\n    try {\n        kontonummer0.getGroupedValue();\n        fail(\"Expecting exception: StringIndexOutOfBoundsException\");\n    } catch (StringIndexOutOfBoundsException e) {\n    }\n}\n}"
    },
    {
        "original_path": "bekkopen_NoCommons###bekkopen_NoCommons/src/test/java/no/bekk/bekkopen/localization/TextParserTest###testReplaceNorwegianLetters",
        "generated_path": "TextParser_replaceNorwegianLetters.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package no.bekk.bekkopen.localization;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.nio.CharBuffer;\nimport no.bekk.bekkopen.localization.TextParser;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class TextParser_replaceNorwegianLetters extends TextParser_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test0() throws Throwable {\n    CharBuffer charBuffer0 = CharBuffer.allocate(0);\n    String string0 = TextParser.replaceNorwegianLetters(charBuffer0);\n    assertEquals(\"\", string0);\n}\n}"
    },
    {
        "original_path": "bekkopen_NoCommons###bekkopen_NoCommons/src/test/java/no/bekk/bekkopen/org/OrganisasjonsnummerCalculatorTest###testGetOrganisasjonsnummerList",
        "generated_path": "OrganisasjonsnummerCalculator_getOrganisasjonsnummerList.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package no.bekk.bekkopen.org;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.util.List;\nimport no.bekk.bekkopen.org.Organisasjonsnummer;\nimport no.bekk.bekkopen.org.OrganisasjonsnummerCalculator;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class OrganisasjonsnummerCalculator_getOrganisasjonsnummerList extends OrganisasjonsnummerCalculator_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test0() throws Throwable {\n    // Undeclared exception!\n    OrganisasjonsnummerCalculator.getOrganisasjonsnummerList(2104);\n}\n}"
    },
    {
        "original_path": "mikereedell_sunrisesunsetlib-java###mikereedell_sunrisesunsetlib-java/src/test/java/com/luckycatlabs/sunrisesunset/calculator/SolarEventCalculatorTest###testGetLocalTimeAsCalendar",
        "generated_path": "SolarEventCalculator_getLocalTimeAsCalendar.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "package com.luckycatlabs.sunrisesunset.calculator;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.luckycatlabs.sunrisesunset.Zenith;\nimport com.luckycatlabs.sunrisesunset.calculator.SolarEventCalculator;\nimport com.luckycatlabs.sunrisesunset.dto.Location;\nimport java.math.BigDecimal;\nimport java.math.BigInteger;\nimport java.util.Calendar;\nimport java.util.Locale;\nimport java.util.SimpleTimeZone;\nimport java.util.TimeZone;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.util.MockCalendar;\nimport org.evosuite.runtime.mock.java.util.MockGregorianCalendar;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class SolarEventCalculator_getLocalTimeAsCalendar extends SolarEventCalculator_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    Location location0 = new Location(1356.010647, 108.0);\n    SolarEventCalculator solarEventCalculator0 = new SolarEventCalculator(location0, \"\");\n    Locale locale0 = Locale.GERMAN;\n    Calendar calendar0 = MockCalendar.getInstance(locale0);\n    solarEventCalculator0.getLocalTimeAsCalendar((BigDecimal) null, calendar0);\n}\n}"
    },
    {
        "original_path": "citiususc_hipster###citiususc_hipster/hipster-core/src/test/java/es/usc/citius/lab/hipster/collection/HashQueueTest###testPoll",
        "generated_path": "HashQueue_poll.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package es.usc.citius.lab.hipster.collections;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport es.usc.citius.lab.hipster.collections.HashQueue;\nimport java.util.Iterator;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class HashQueue_poll extends HashQueue_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    HashQueue<String> hashQueue0 = new HashQueue<String>();\n    String string0 = hashQueue0.poll();\n    assertNull(string0);\n}\n}"
    },
    {
        "original_path": "citiususc_hipster###citiususc_hipster/hipster-core/src/test/java/es/usc/citius/hipster/graph/HashBasedHipsterGraphTest###testAdd",
        "generated_path": "HashBasedHipsterGraph_add.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package es.usc.citius.hipster.graph;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport es.usc.citius.hipster.graph.GraphEdge;\nimport es.usc.citius.hipster.graph.HashBasedHipsterGraph;\nimport java.lang.reflect.Array;\nimport java.util.AbstractMap;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.LinkedHashSet;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.TreeSet;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class HashBasedHipsterGraph_add extends HashBasedHipsterGraph_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    HashBasedHipsterGraph<LinkedHashSet<Set<GraphEdge<AbstractMap.SimpleEntry<Object, String>, String>>>, Set<GraphEdge<AbstractMap.SimpleEntry<Object, String>, String>>> hashBasedHipsterGraph0 = HashBasedHipsterGraph.create();\n    LinkedHashSet<Set<GraphEdge<AbstractMap.SimpleEntry<Object, String>, String>>> linkedHashSet0 = new LinkedHashSet<Set<GraphEdge<AbstractMap.SimpleEntry<Object, String>, String>>>();\n    hashBasedHipsterGraph0.add(linkedHashSet0);\n    HashMap<LinkedHashSet<Set<GraphEdge<AbstractMap.SimpleEntry<Object, String>, String>>>, Set<GraphEdge<LinkedHashSet<Set<GraphEdge<AbstractMap.SimpleEntry<Object, String>, String>>>, Set<GraphEdge<AbstractMap.SimpleEntry<Object, String>, String>>>>> hashMap0 = hashBasedHipsterGraph0.getConnected();\n    assertEquals(1, hashMap0.size());\n}\n}"
    },
    {
        "original_path": "citiususc_hipster###citiususc_hipster/hipster-extensions/src/test/java/es/usc/citius/hipster/extensions/graph/HashTableHipsterDirectedGraphTest###testConnect",
        "generated_path": "HashTableHipsterDirectedGraph_connect.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package es.usc.citius.hipster.extensions.graph;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.google.common.collect.BoundType;\nimport es.usc.citius.hipster.extensions.graph.HashTableHipsterDirectedGraph;\nimport es.usc.citius.hipster.graph.DirectedEdge;\nimport es.usc.citius.hipster.graph.GraphEdge;\nimport es.usc.citius.hipster.graph.UndirectedEdge;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class HashTableHipsterDirectedGraph_connect extends HashTableHipsterDirectedGraph_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test5() throws Throwable {\n    HashTableHipsterDirectedGraph<String, Integer> hashTableHipsterDirectedGraph0 = new HashTableHipsterDirectedGraph<String, Integer>();\n    Integer integer0 = new Integer(1849);\n    GraphEdge<String, Integer> graphEdge0 = hashTableHipsterDirectedGraph0.connect(\"\", \"*)w@qq-{EA-+V=k\", integer0);\n    assertEquals(GraphEdge.Type.DIRECTED, graphEdge0.getType());\n}\n}"
    },
    {
        "original_path": "citiususc_hipster###citiususc_hipster/hipster-extensions/src/test/java/es/usc/citius/hipster/extensions/graph/HashTableHipsterGraphTest###testConnect",
        "generated_path": "HashTableHipsterGraph_connect.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package es.usc.citius.hipster.extensions.graph;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.google.common.collect.ArrayTable;\nimport com.google.common.collect.BoundType;\nimport com.google.common.collect.ImmutableSet;\nimport es.usc.citius.hipster.extensions.graph.HashTableHipsterGraph;\nimport es.usc.citius.hipster.graph.DirectedEdge;\nimport es.usc.citius.hipster.graph.GraphEdge;\nimport es.usc.citius.hipster.graph.UndirectedEdge;\nimport java.util.Locale;\nimport java.util.Set;\nimport java.util.TreeSet;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class HashTableHipsterGraph_connect extends HashTableHipsterGraph_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test19() throws Throwable {\n    Integer integer0 = new Integer((-1687));\n    HashTableHipsterGraph<BoundType, GraphEdge<Object, DirectedEdge<Object, Object>>> hashTableHipsterGraph0 = HashTableHipsterGraph.create();\n    BoundType boundType0 = BoundType.OPEN;\n    BoundType boundType1 = BoundType.CLOSED;\n    DirectedEdge<Object, Object> directedEdge0 = (DirectedEdge<Object, Object>) mock(DirectedEdge.class, new ViolatedAssumptionAnswer());\n    DirectedEdge<Object, DirectedEdge<Object, Object>> directedEdge1 = new DirectedEdge<Object, DirectedEdge<Object, Object>>(integer0, boundType1, directedEdge0);\n    hashTableHipsterGraph0.connect(boundType0, boundType1, directedEdge1);\n    hashTableHipsterGraph0.remove(boundType1);\n    assertFalse(boundType1.equals((Object) boundType0));\n}\n}"
    },
    {
        "original_path": "citiususc_hipster###citiususc_hipster/hipster-core/src/test/java/es/usc/citius/lab/hipster/maze/Maze2DTest###testDiff",
        "generated_path": "Maze2D_diff.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package es.usc.citius.hipster.util.examples.maze;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport es.usc.citius.hipster.util.examples.maze.Maze2D;\nimport java.awt.Point;\nimport java.awt.geom.Point2D;\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.net.URI;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.LinkedHashSet;\nimport java.util.LinkedList;\nimport java.util.Map;\nimport java.util.NoSuchElementException;\nimport java.util.PriorityQueue;\nimport java.util.Set;\nimport java.util.Stack;\nimport java.util.Vector;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.io.MockFile;\nimport org.evosuite.runtime.mock.java.net.MockURI;\nimport org.evosuite.runtime.testdata.EvoSuiteFile;\nimport org.evosuite.runtime.testdata.FileSystemHandling;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class Maze2D_diff extends Maze2D_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test73() throws Throwable {\n    String[] stringArray0 = new String[3];\n    stringArray0[0] = \"GOAL\";\n    stringArray0[1] = \";}IrGPS:<ntNhCK(\";\n    stringArray0[2] = \"GOAL\";\n    Maze2D maze2D0 = new Maze2D(stringArray0);\n    Maze2D maze2D1 = new Maze2D(stringArray0);\n    Point point0 = new Point();\n    maze2D0.putObstacleRectangle(point0, point0);\n    maze2D0.diff(maze2D1);\n    Point point1 = maze2D0.getInitialLoc();\n    Maze2D.Symbol maze2D_Symbol0 = Maze2D.Symbol.GOAL;\n    maze2D0.updateLocation(point1, maze2D_Symbol0);\n}\n}"
    },
    {
        "original_path": "citiususc_hipster###citiususc_hipster/hipster-extensions/src/test/java/es/usc/citius/hipster/extensions/graph/HashTableHipsterGraphTest###testRemove",
        "generated_path": "HashTableHipsterGraph_remove.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package es.usc.citius.hipster.extensions.graph;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.google.common.collect.ArrayTable;\nimport com.google.common.collect.BoundType;\nimport com.google.common.collect.ImmutableSet;\nimport es.usc.citius.hipster.extensions.graph.HashTableHipsterGraph;\nimport es.usc.citius.hipster.graph.DirectedEdge;\nimport es.usc.citius.hipster.graph.GraphEdge;\nimport es.usc.citius.hipster.graph.UndirectedEdge;\nimport java.util.Locale;\nimport java.util.Set;\nimport java.util.TreeSet;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class HashTableHipsterGraph_remove extends HashTableHipsterGraph_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test19() throws Throwable {\n    Integer integer0 = new Integer((-1687));\n    HashTableHipsterGraph<BoundType, GraphEdge<Object, DirectedEdge<Object, Object>>> hashTableHipsterGraph0 = HashTableHipsterGraph.create();\n    BoundType boundType0 = BoundType.OPEN;\n    BoundType boundType1 = BoundType.CLOSED;\n    DirectedEdge<Object, Object> directedEdge0 = (DirectedEdge<Object, Object>) mock(DirectedEdge.class, new ViolatedAssumptionAnswer());\n    DirectedEdge<Object, DirectedEdge<Object, Object>> directedEdge1 = new DirectedEdge<Object, DirectedEdge<Object, Object>>(integer0, boundType1, directedEdge0);\n    hashTableHipsterGraph0.connect(boundType0, boundType1, directedEdge1);\n    hashTableHipsterGraph0.remove(boundType1);\n    assertFalse(boundType1.equals((Object) boundType0));\n}\n}"
    },
    {
        "original_path": "citiususc_hipster###citiususc_hipster/hipster-core/src/test/java/es/usc/citius/hipster/graph/HashBasedHipsterGraphTest###testEdgesOf",
        "generated_path": "HashBasedHipsterGraph_edgesOf.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package es.usc.citius.hipster.graph;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport es.usc.citius.hipster.graph.GraphEdge;\nimport es.usc.citius.hipster.graph.HashBasedHipsterGraph;\nimport java.lang.reflect.Array;\nimport java.util.AbstractMap;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.LinkedHashSet;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.TreeSet;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class HashBasedHipsterGraph_edgesOf extends HashBasedHipsterGraph_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    HashBasedHipsterGraph<LinkedHashSet<String>, String> hashBasedHipsterGraph0 = new HashBasedHipsterGraph<LinkedHashSet<String>, String>();\n    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();\n    Iterable<GraphEdge<LinkedHashSet<String>, String>> iterable0 = hashBasedHipsterGraph0.edgesOf(linkedHashSet0);\n    assertNotNull(iterable0);\n}\n}"
    },
    {
        "original_path": "citiususc_hipster###citiususc_hipster/hipster-core/src/test/java/es/usc/citius/hipster/graph/HashBasedHipsterGraphTest###testConnect",
        "generated_path": "HashBasedHipsterGraph_connect.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package es.usc.citius.hipster.graph;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport es.usc.citius.hipster.graph.GraphEdge;\nimport es.usc.citius.hipster.graph.HashBasedHipsterGraph;\nimport java.lang.reflect.Array;\nimport java.util.AbstractMap;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.LinkedHashSet;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.TreeSet;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class HashBasedHipsterGraph_connect extends HashBasedHipsterGraph_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test21() throws Throwable {\n    HashBasedHipsterGraph<Locale.Category, AbstractMap.SimpleImmutableEntry<Object, Integer>> hashBasedHipsterGraph0 = HashBasedHipsterGraph.create();\n    Locale.Category locale_Category0 = Locale.Category.DISPLAY;\n    Locale.Category[] locale_CategoryArray0 = new Locale.Category[8];\n    locale_CategoryArray0[0] = locale_Category0;\n    hashBasedHipsterGraph0.add(locale_CategoryArray0);\n    GraphEdge<Locale.Category, AbstractMap.SimpleImmutableEntry<Object, Integer>> graphEdge0 = hashBasedHipsterGraph0.connect(locale_Category0, locale_Category0, (AbstractMap.SimpleImmutableEntry<Object, Integer>) null);\n    assertEquals(GraphEdge.Type.UNDIRECTED, graphEdge0.getType());\n}\n}"
    },
    {
        "original_path": "citiususc_hipster###citiususc_hipster/hipster-core/src/test/java/es/usc/citius/lab/hipster/collection/HashQueueTest###testOffer",
        "generated_path": "HashQueue_offer.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package es.usc.citius.lab.hipster.collections;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport es.usc.citius.lab.hipster.collections.HashQueue;\nimport java.util.Iterator;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class HashQueue_offer extends HashQueue_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    HashQueue<Integer> hashQueue0 = new HashQueue<Integer>();\n    Integer integer0 = new Integer((-2367));\n    hashQueue0.offer(integer0);\n    int int0 = hashQueue0.size();\n    assertFalse(hashQueue0.contains(int0));\n}\n}"
    },
    {
        "original_path": "citiususc_hipster###citiususc_hipster/hipster-core/src/test/java/es/usc/citius/hipster/graph/HashBasedHipsterGraphTest###testRemove",
        "generated_path": "HashBasedHipsterGraph_remove.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package es.usc.citius.hipster.graph;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport es.usc.citius.hipster.graph.GraphEdge;\nimport es.usc.citius.hipster.graph.HashBasedHipsterGraph;\nimport java.lang.reflect.Array;\nimport java.util.AbstractMap;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.LinkedHashSet;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.TreeSet;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class HashBasedHipsterGraph_remove extends HashBasedHipsterGraph_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    HashBasedHipsterGraph<LinkedHashSet<String>, String> hashBasedHipsterGraph0 = new HashBasedHipsterGraph<LinkedHashSet<String>, String>();\n    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();\n    boolean boolean0 = hashBasedHipsterGraph0.add(linkedHashSet0);\n    boolean boolean1 = hashBasedHipsterGraph0.remove(linkedHashSet0);\n    assertTrue(boolean1 == boolean0);\n    assertTrue(boolean1);\n}\n}"
    },
    {
        "original_path": "lucastheisen_jsch-nio###lucastheisen_jsch-nio/src/test/java/com/pastdev/jsch/nio/file/UnixSshPathTest###TestGetParent",
        "generated_path": "UnixSshPath_getParent.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "package com.pastdev.jsch.nio.file;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport ch.qos.logback.classic.spi.LoggerContextVO;\nimport ch.qos.logback.classic.spi.LoggingEvent;\nimport com.pastdev.jsch.DefaultSessionFactory;\nimport com.pastdev.jsch.command.CommandRunner;\nimport com.pastdev.jsch.nio.file.AbstractSshPath;\nimport com.pastdev.jsch.nio.file.UnixSshFileSystem;\nimport com.pastdev.jsch.nio.file.UnixSshFileSystemProvider;\nimport com.pastdev.jsch.nio.file.UnixSshFileSystemWatchService;\nimport com.pastdev.jsch.nio.file.UnixSshPath;\nimport com.pastdev.jsch.nio.file.UnixSshPosixFileAttributeView;\nimport com.pastdev.jsch.nio.file.Variant;\nimport java.io.IOException;\nimport java.lang.reflect.Array;\nimport java.net.URI;\nimport java.net.URISyntaxException;\nimport java.net.URL;\nimport java.nio.ByteBuffer;\nimport java.nio.file.AccessMode;\nimport java.nio.file.LinkOption;\nimport java.nio.file.OpenOption;\nimport java.nio.file.Path;\nimport java.nio.file.WatchEvent;\nimport java.nio.file.WatchKey;\nimport java.nio.file.WatchService;\nimport java.nio.file.attribute.PosixFilePermission;\nimport java.time.ZoneId;\nimport java.util.HashMap;\nimport java.util.Hashtable;\nimport java.util.LinkedHashSet;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.concurrent.TimeUnit;\nimport java.util.function.BiConsumer;\nimport java.util.function.Consumer;\nimport javax.management.remote.JMXPrincipal;\nimport javax.security.auth.Subject;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.System;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.mock.java.io.MockFile;\nimport org.evosuite.runtime.mock.java.net.MockURI;\nimport org.evosuite.runtime.mock.java.net.MockURL;\nimport org.evosuite.runtime.testdata.EvoSuiteFile;\nimport org.evosuite.runtime.testdata.EvoSuiteLocalAddress;\nimport org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;\nimport org.evosuite.runtime.testdata.FileSystemHandling;\nimport org.evosuite.runtime.testdata.NetworkHandling;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class UnixSshPath_getParent extends UnixSshPath_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    UnixSshFileSystemProvider unixSshFileSystemProvider0 = new UnixSshFileSystemProvider();\n    assertNotNull(unixSshFileSystemProvider0);\n    assertEquals('/', UnixSshFileSystemProvider.PATH_SEPARATOR);\n    assertEquals(\"ssh.unix\", unixSshFileSystemProvider0.getScheme());\n    URI uRI0 = MockURI.URI(\"/\", \"/\", \"/\");\n    assertNotNull(uRI0);\n    assertFalse(uRI0.isAbsolute());\n    assertNull(uRI0.getHost());\n    assertNull(uRI0.getRawQuery());\n    assertNull(uRI0.getScheme());\n    assertEquals(\"/:/#/\", uRI0.toString());\n    assertFalse(uRI0.isOpaque());\n    assertEquals(\"/:/\", uRI0.getRawPath());\n    assertNull(uRI0.getRawUserInfo());\n    assertEquals((-1), uRI0.getPort());\n    assertNull(uRI0.getRawAuthority());\n    assertEquals(\"/\", uRI0.getRawFragment());\n    HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();\n    assertNotNull(hashMap0);\n    assertEquals(0, hashMap0.size());\n    assertTrue(hashMap0.isEmpty());\n    UnixSshFileSystem unixSshFileSystem0 = new UnixSshFileSystem(unixSshFileSystemProvider0, uRI0, hashMap0);\n    assertNotNull(unixSshFileSystem0);\n    assertEquals('/', UnixSshFileSystemProvider.PATH_SEPARATOR);\n    assertEquals(\"ssh.unix\", unixSshFileSystemProvider0.getScheme());\n    assertFalse(uRI0.isAbsolute());\n    assertNull(uRI0.getHost());\n    assertNull(uRI0.getRawQuery());\n    assertNull(uRI0.getScheme());\n    assertEquals(\"/:/#/\", uRI0.toString());\n    assertFalse(uRI0.isOpaque());\n    assertEquals(\"/:/\", uRI0.getRawPath());\n    assertNull(uRI0.getRawUserInfo());\n    assertEquals((-1), uRI0.getPort());\n    assertNull(uRI0.getRawAuthority());\n    assertEquals(\"/\", uRI0.getRawFragment());\n    assertEquals(0, hashMap0.size());\n    assertTrue(hashMap0.isEmpty());\n    assertTrue(unixSshFileSystem0.isOpen());\n    assertEquals(\"/\", unixSshFileSystem0.getSeparator());\n    assertFalse(unixSshFileSystem0.isReadOnly());\n    UnixSshPath unixSshPath0 = unixSshFileSystem0.getDefaultDirectory();\n    assertNotNull(unixSshPath0);\n    assertEquals('/', UnixSshFileSystemProvider.PATH_SEPARATOR);\n    assertEquals(\"ssh.unix\", unixSshFileSystemProvider0.getScheme());\n    assertFalse(uRI0.isAbsolute());\n    assertNull(uRI0.getHost());\n    assertNull(uRI0.getRawQuery());\n    assertNull(uRI0.getScheme());\n    assertEquals(\"/:/#/\", uRI0.toString());\n    assertFalse(uRI0.isOpaque());\n    assertEquals(\"/:/\", uRI0.getRawPath());\n    assertNull(uRI0.getRawUserInfo());\n    assertEquals((-1), uRI0.getPort());\n    assertNull(uRI0.getRawAuthority());\n    assertEquals(\"/\", uRI0.getRawFragment());\n    assertEquals(0, hashMap0.size());\n    assertTrue(hashMap0.isEmpty());\n    assertTrue(unixSshFileSystem0.isOpen());\n    assertEquals(\"/\", unixSshFileSystem0.getSeparator());\n    assertFalse(unixSshFileSystem0.isReadOnly());\n    assertTrue(unixSshPath0.isAbsolute());\n    assertNull(unixSshPath0.getHostname());\n    assertEquals(1, unixSshPath0.getNameCount());\n    assertEquals((-1), unixSshPath0.getPort());\n    JMXPrincipal jMXPrincipal0 = new JMXPrincipal(\"!e}bYh\");\n    assertNotNull(jMXPrincipal0);\n    boolean boolean0 = unixSshPath0.equals(jMXPrincipal0);\n    assertFalse(boolean0);\n    assertEquals('/', UnixSshFileSystemProvider.PATH_SEPARATOR);\n    assertEquals(\"ssh.unix\", unixSshFileSystemProvider0.getScheme());\n    assertFalse(uRI0.isAbsolute());\n    assertNull(uRI0.getHost());\n    assertNull(uRI0.getRawQuery());\n    assertNull(uRI0.getScheme());\n    assertEquals(\"/:/#/\", uRI0.toString());\n    assertFalse(uRI0.isOpaque());\n    assertEquals(\"/:/\", uRI0.getRawPath());\n    assertNull(uRI0.getRawUserInfo());\n    assertEquals((-1), uRI0.getPort());\n    assertNull(uRI0.getRawAuthority());\n    assertEquals(\"/\", uRI0.getRawFragment());\n    assertEquals(0, hashMap0.size());\n    assertTrue(hashMap0.isEmpty());\n    assertTrue(unixSshFileSystem0.isOpen());\n    assertEquals(\"/\", unixSshFileSystem0.getSeparator());\n    assertFalse(unixSshFileSystem0.isReadOnly());\n    assertTrue(unixSshPath0.isAbsolute());\n    assertNull(unixSshPath0.getHostname());\n    assertEquals(1, unixSshPath0.getNameCount());\n    assertEquals((-1), unixSshPath0.getPort());\n    UnixSshPath unixSshPath1 = unixSshFileSystemProvider0.checkPath(unixSshPath0);\n    assertNotNull(unixSshPath1);\n    assertSame(unixSshPath0, unixSshPath1);\n    assertSame(unixSshPath1, unixSshPath0);\n    assertEquals('/', UnixSshFileSystemProvider.PATH_SEPARATOR);\n    assertEquals(\"ssh.unix\", unixSshFileSystemProvider0.getScheme());\n    assertFalse(uRI0.isAbsolute());\n    assertNull(uRI0.getHost());\n    assertNull(uRI0.getRawQuery());\n    assertNull(uRI0.getScheme());\n    assertEquals(\"/:/#/\", uRI0.toString());\n    assertFalse(uRI0.isOpaque());\n    assertEquals(\"/:/\", uRI0.getRawPath());\n    assertNull(uRI0.getRawUserInfo());\n    assertEquals((-1), uRI0.getPort());\n    assertNull(uRI0.getRawAuthority());\n    assertEquals(\"/\", uRI0.getRawFragment());\n    assertEquals(0, hashMap0.size());\n    assertTrue(hashMap0.isEmpty());\n    assertTrue(unixSshFileSystem0.isOpen());\n    assertEquals(\"/\", unixSshFileSystem0.getSeparator());\n    assertFalse(unixSshFileSystem0.isReadOnly());\n    assertTrue(unixSshPath0.isAbsolute());\n    assertNull(unixSshPath0.getHostname());\n    assertEquals(1, unixSshPath0.getNameCount());\n    assertEquals((-1), unixSshPath0.getPort());\n    assertEquals((-1), unixSshPath1.getPort());\n    assertEquals(1, unixSshPath1.getNameCount());\n    assertNull(unixSshPath1.getHostname());\n    assertTrue(unixSshPath1.isAbsolute());\n    UnixSshPath unixSshPath2 = unixSshPath0.resolve((Path) unixSshPath1);\n    assertNotNull(unixSshPath2);\n    assertSame(unixSshPath0, unixSshPath1);\n    assertSame(unixSshPath0, unixSshPath2);\n    assertSame(unixSshPath1, unixSshPath2);\n    assertSame(unixSshPath1, unixSshPath0);\n    assertSame(unixSshPath2, unixSshPath0);\n    assertSame(unixSshPath2, unixSshPath1);\n    assertEquals('/', UnixSshFileSystemProvider.PATH_SEPARATOR);\n    assertEquals(\"ssh.unix\", unixSshFileSystemProvider0.getScheme());\n    assertFalse(uRI0.isAbsolute());\n    assertNull(uRI0.getHost());\n    assertNull(uRI0.getRawQuery());\n    assertNull(uRI0.getScheme());\n    assertEquals(\"/:/#/\", uRI0.toString());\n    assertFalse(uRI0.isOpaque());\n    assertEquals(\"/:/\", uRI0.getRawPath());\n    assertNull(uRI0.getRawUserInfo());\n    assertEquals((-1), uRI0.getPort());\n    assertNull(uRI0.getRawAuthority());\n    assertEquals(\"/\", uRI0.getRawFragment());\n    assertEquals(0, hashMap0.size());\n    assertTrue(hashMap0.isEmpty());\n    assertTrue(unixSshFileSystem0.isOpen());\n    assertEquals(\"/\", unixSshFileSystem0.getSeparator());\n    assertFalse(unixSshFileSystem0.isReadOnly());\n    assertTrue(unixSshPath0.isAbsolute());\n    assertNull(unixSshPath0.getHostname());\n    assertEquals(1, unixSshPath0.getNameCount());\n    assertEquals((-1), unixSshPath0.getPort());\n    assertEquals((-1), unixSshPath1.getPort());\n    assertEquals(1, unixSshPath1.getNameCount());\n    assertNull(unixSshPath1.getHostname());\n    assertTrue(unixSshPath1.isAbsolute());\n    assertTrue(unixSshPath2.isAbsolute());\n    assertEquals(1, unixSshPath2.getNameCount());\n    assertEquals((-1), unixSshPath2.getPort());\n    assertNull(unixSshPath2.getHostname());\n    MockFile mockFile0 = new MockFile(\"j73a@0rn7A\", \"/\");\n    assertNotNull(mockFile0);\n    Path path0 = mockFile0.toPath();\n    assertNotNull(path0);\n    assertFalse(mockFile0.canExecute());\n    assertFalse(mockFile0.canRead());\n    assertFalse(mockFile0.canWrite());\n    assertEquals(0L, mockFile0.getFreeSpace());\n    assertEquals(0L, mockFile0.length());\n    assertTrue(mockFile0.isFile());\n    assertEquals(\"D:\\\\DataWarehouse\\\\DataFiles\\\\Involved_repo (1)\\\\Involved_repo_backup\\\\lucastheisen_jsch-nio\", mockFile0.getParent());\n    assertEquals(0L, mockFile0.getTotalSpace());\n    assertFalse(mockFile0.exists());\n    assertEquals(0L, mockFile0.lastModified());\n    assertFalse(mockFile0.isDirectory());\n    assertTrue(mockFile0.isAbsolute());\n    assertEquals(0L, mockFile0.getUsableSpace());\n    assertFalse(mockFile0.isHidden());\n    UnixSshPath unixSshPath3 = unixSshPath0.resolve(path0);\n    assertFalse(unixSshPath3.equals((Object) unixSshPath0));\n    assertFalse(unixSshPath3.equals((Object) unixSshPath1));\n    assertFalse(unixSshPath3.equals((Object) unixSshPath2));\n    assertNotNull(unixSshPath3);\n    assertNotSame(unixSshPath0, unixSshPath3);\n    assertSame(unixSshPath0, unixSshPath1);\n    assertSame(unixSshPath0, unixSshPath2);\n    assertNotSame(unixSshPath3, unixSshPath0);\n    assertNotSame(unixSshPath3, unixSshPath1);\n    assertNotSame(unixSshPath3, unixSshPath2);\n    assertEquals('/', UnixSshFileSystemProvider.PATH_SEPARATOR);\n    assertEquals(\"ssh.unix\", unixSshFileSystemProvider0.getScheme());\n    assertFalse(uRI0.isAbsolute());\n    assertNull(uRI0.getHost());\n    assertNull(uRI0.getRawQuery());\n    assertNull(uRI0.getScheme());\n    assertEquals(\"/:/#/\", uRI0.toString());\n    assertFalse(uRI0.isOpaque());\n    assertEquals(\"/:/\", uRI0.getRawPath());\n    assertNull(uRI0.getRawUserInfo());\n    assertEquals((-1), uRI0.getPort());\n    assertNull(uRI0.getRawAuthority());\n    assertEquals(\"/\", uRI0.getRawFragment());\n    assertEquals(0, hashMap0.size());\n    assertTrue(hashMap0.isEmpty());\n    assertTrue(unixSshFileSystem0.isOpen());\n    assertEquals(\"/\", unixSshFileSystem0.getSeparator());\n    assertFalse(unixSshFileSystem0.isReadOnly());\n    assertTrue(unixSshPath0.isAbsolute());\n    assertNull(unixSshPath0.getHostname());\n    assertEquals(1, unixSshPath0.getNameCount());\n    assertEquals((-1), unixSshPath0.getPort());\n    assertFalse(mockFile0.canExecute());\n    assertFalse(mockFile0.canRead());\n    assertFalse(mockFile0.canWrite());\n    assertEquals(0L, mockFile0.getFreeSpace());\n    assertEquals(0L, mockFile0.length());\n    assertTrue(mockFile0.isFile());\n    assertEquals(\"D:\\\\DataWarehouse\\\\DataFiles\\\\Involved_repo (1)\\\\Involved_repo_backup\\\\lucastheisen_jsch-nio\", mockFile0.getParent());\n    assertEquals(0L, mockFile0.getTotalSpace());\n    assertFalse(mockFile0.exists());\n    assertEquals(0L, mockFile0.lastModified());\n    assertFalse(mockFile0.isDirectory());\n    assertTrue(mockFile0.isAbsolute());\n    assertEquals(0L, mockFile0.getUsableSpace());\n    assertFalse(mockFile0.isHidden());\n    assertEquals((-1), unixSshPath3.getPort());\n    assertFalse(unixSshPath3.isAbsolute());\n    assertNull(unixSshPath3.getHostname());\n    assertEquals(1, unixSshPath3.getNameCount());\n    UnixSshPath unixSshPath4 = unixSshPath3.normalize();\n    assertFalse(unixSshPath0.equals((Object) unixSshPath3));\n    assertFalse(unixSshPath3.equals((Object) unixSshPath0));\n    assertFalse(unixSshPath3.equals((Object) unixSshPath1));\n    assertFalse(unixSshPath3.equals((Object) unixSshPath2));\n    assertFalse(unixSshPath4.equals((Object) unixSshPath2));\n    assertFalse(unixSshPath4.equals((Object) unixSshPath0));\n    assertTrue(unixSshPath4.equals((Object) unixSshPath3));\n    assertFalse(unixSshPath4.equals((Object) unixSshPath1));\n    assertNotNull(unixSshPath4);\n    assertNotSame(unixSshPath0, unixSshPath4);\n    assertNotSame(unixSshPath0, unixSshPath3);\n    assertSame(unixSshPath0, unixSshPath1);\n    assertSame(unixSshPath0, unixSshPath2);\n    assertNotSame(unixSshPath3, unixSshPath4);\n    assertNotSame(unixSshPath3, unixSshPath0);\n    assertNotSame(unixSshPath3, unixSshPath1);\n    assertNotSame(unixSshPath3, unixSshPath2);\n    assertNotSame(unixSshPath4, unixSshPath2);\n    assertNotSame(unixSshPath4, unixSshPath0);\n    assertNotSame(unixSshPath4, unixSshPath1);\n    assertNotSame(unixSshPath4, unixSshPath3);\n    assertEquals('/', UnixSshFileSystemProvider.PATH_SEPARATOR);\n    assertEquals(\"ssh.unix\", unixSshFileSystemProvider0.getScheme());\n    assertFalse(uRI0.isAbsolute());\n    assertNull(uRI0.getHost());\n    assertNull(uRI0.getRawQuery());\n    assertNull(uRI0.getScheme());\n    assertEquals(\"/:/#/\", uRI0.toString());\n    assertFalse(uRI0.isOpaque());\n    assertEquals(\"/:/\", uRI0.getRawPath());\n    assertNull(uRI0.getRawUserInfo());\n    assertEquals((-1), uRI0.getPort());\n    assertNull(uRI0.getRawAuthority());\n    assertEquals(\"/\", uRI0.getRawFragment());\n    assertEquals(0, hashMap0.size());\n    assertTrue(hashMap0.isEmpty());\n    assertTrue(unixSshFileSystem0.isOpen());\n    assertEquals(\"/\", unixSshFileSystem0.getSeparator());\n    assertFalse(unixSshFileSystem0.isReadOnly());\n    assertTrue(unixSshPath0.isAbsolute());\n    assertNull(unixSshPath0.getHostname());\n    assertEquals(1, unixSshPath0.getNameCount());\n    assertEquals((-1), unixSshPath0.getPort());\n    assertFalse(mockFile0.canExecute());\n    assertFalse(mockFile0.canRead());\n    assertFalse(mockFile0.canWrite());\n    assertEquals(0L, mockFile0.getFreeSpace());\n    assertEquals(0L, mockFile0.length());\n    assertTrue(mockFile0.isFile());\n    assertEquals(\"D:\\\\DataWarehouse\\\\DataFiles\\\\Involved_repo (1)\\\\Involved_repo_backup\\\\lucastheisen_jsch-nio\", mockFile0.getParent());\n    assertEquals(0L, mockFile0.getTotalSpace());\n    assertFalse(mockFile0.exists());\n    assertEquals(0L, mockFile0.lastModified());\n    assertFalse(mockFile0.isDirectory());\n    assertTrue(mockFile0.isAbsolute());\n    assertEquals(0L, mockFile0.getUsableSpace());\n    assertFalse(mockFile0.isHidden());\n    assertEquals((-1), unixSshPath3.getPort());\n    assertFalse(unixSshPath3.isAbsolute());\n    assertNull(unixSshPath3.getHostname());\n    assertEquals(1, unixSshPath3.getNameCount());\n    assertEquals((-1), unixSshPath4.getPort());\n    assertEquals(1, unixSshPath4.getNameCount());\n    assertNull(unixSshPath4.getHostname());\n    assertFalse(unixSshPath4.isAbsolute());\n    Long long0 = new Long(911L);\n    assertEquals(911L, (long) long0);\n    assertNotNull(long0);\n    TimeUnit timeUnit0 = TimeUnit.DAYS;\n    UnixSshFileSystemWatchService unixSshFileSystemWatchService0 = UnixSshFileSystemWatchService.pollingWatchService(long0, timeUnit0);\n    assertNotNull(unixSshFileSystemWatchService0);\n    WatchEvent.Kind<String>[] watchEvent_KindArray0 = (WatchEvent.Kind<String>[]) Array.newInstance(WatchEvent.Kind.class, 0);\n    WatchEvent.Modifier[] watchEvent_ModifierArray0 = (WatchEvent.Modifier[]) Array.newInstance(WatchEvent.Modifier.class, 8);\n    watchEvent_ModifierArray0[0] = (WatchEvent.Modifier) watchEvent_ModifierArray0;\n}\n}"
    },
    {
        "original_path": "trautonen_coveralls-maven-plugin###trautonen_coveralls-maven-plugin/src/test/java/org/eluder/coveralls/maven/plugin/service/TravisTest###testGetEnvironment",
        "generated_path": "Travis_getEnvironment.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.eluder.coveralls.maven.plugin.service;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.time.ZoneId;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Properties;\nimport java.util.function.BiFunction;\nimport org.eluder.coveralls.maven.plugin.service.Travis;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class Travis_getEnvironment extends Travis_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    HashMap<String, String> hashMap0 = new HashMap<String, String>();\n    Travis travis0 = new Travis(hashMap0);\n    hashMap0.put(\"TRAVIS_PULL_REQUEST\", \"TRAVIS\");\n    Properties properties0 = travis0.getEnvironment();\n    assertEquals(1, properties0.size());\n}\n}"
    },
    {
        "original_path": "trautonen_coveralls-maven-plugin###trautonen_coveralls-maven-plugin/src/test/java/org/eluder/coveralls/maven/plugin/service/JenkinsTest###testGetEnvironment",
        "generated_path": "Jenkins_getEnvironment.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.eluder.coveralls.maven.plugin.service;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Properties;\nimport org.eluder.coveralls.maven.plugin.service.Jenkins;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class Jenkins_getEnvironment extends Jenkins_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    HashMap<String, String> hashMap0 = new HashMap<String, String>();\n    Jenkins jenkins0 = new Jenkins(hashMap0);\n    hashMap0.putIfAbsent(\"BUILD_URL\", \"BUILD_URL\");\n    Properties properties0 = jenkins0.getEnvironment();\n    assertFalse(properties0.isEmpty());\n}\n}"
    },
    {
        "original_path": "trautonen_coveralls-maven-plugin###trautonen_coveralls-maven-plugin/src/test/java/org/eluder/coveralls/maven/plugin/httpclient/CoverallsClientTest###testSubmit",
        "generated_path": "CoverallsClient_submit.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.eluder.coveralls.maven.plugin.httpclient;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.fasterxml.jackson.core.JsonFactory;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;\nimport com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;\nimport com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;\nimport com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;\nimport java.io.ByteArrayInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport org.apache.http.Header;\nimport org.apache.http.HttpEntity;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.StatusLine;\nimport org.apache.http.client.HttpClient;\nimport org.eluder.coveralls.maven.plugin.httpclient.CoverallsClient;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.mock.java.io.MockFile;\nimport org.evosuite.runtime.testdata.EvoSuiteFile;\nimport org.evosuite.runtime.testdata.FileSystemHandling;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class CoverallsClient_submit extends CoverallsClient_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void CoverallsClient_submit() throws Throwable {\n    byte[] byteArray0 = new byte[6];\n    byteArray0[0] = (byte) 36;\n    byteArray0[1] = (byte) 45;\n    byteArray0[2] = (byte) (-12);\n    EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(\"C:\\\\Users\\\\wkx\\\\AppData\\\\Local\\\\Temp\\\\@class0.tmp\");\n    FileSystemHandling.createFolder(evoSuiteFile0);\n    byteArray0[3] = (byte) 106;\n    byteArray0[4] = (byte) 105;\n    byteArray0[5] = (byte) (-85);\n    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 105, 0);\n    HttpEntity httpEntity0 = mock(HttpEntity.class, new ViolatedAssumptionAnswer());\n    doReturn(byteArrayInputStream0).when(httpEntity0).getContent();\n    doReturn((Header) null).when(httpEntity0).getContentType();\n    StatusLine statusLine0 = mock(StatusLine.class, new ViolatedAssumptionAnswer());\n    doReturn((int) (byte) 45).when(statusLine0).getStatusCode();\n    HttpResponse httpResponse0 = mock(HttpResponse.class, new ViolatedAssumptionAnswer());\n    doReturn(httpEntity0).when(httpResponse0).getEntity();\n    doReturn(statusLine0, (StatusLine) null).when(httpResponse0).getStatusLine();\n    HttpClient httpClient0 = mock(HttpClient.class, new ViolatedAssumptionAnswer());\n    doReturn(httpResponse0).when(httpClient0).execute(any(org.apache.http.client.methods.HttpUriRequest.class));\n    JsonFactory jsonFactory0 = new JsonFactory();\n    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();\n    DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();\n    BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);\n    DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);\n    ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);\n    CoverallsClient coverallsClient0 = new CoverallsClient(\"SunRsaSig\", httpClient0, objectMapper0);\n    File file0 = MockFile.createTempFile(\"@class\", (String) null);\n    // Undeclared exception!\n    try {\n        coverallsClient0.submit(file0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        //\n        // no message in exception (getMessage() returned null)\n        //\n        verifyException(\"org.eluder.coveralls.maven.plugin.httpclient.CoverallsClient\", e);\n    }\n}\n}"
    },
    {
        "original_path": "trautonen_coveralls-maven-plugin###trautonen_coveralls-maven-plugin/src/test/java/org/eluder/coveralls/maven/plugin/service/ShippableTest###testGetEnvironment",
        "generated_path": "Shippable_getEnvironment.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.eluder.coveralls.maven.plugin.service;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Properties;\nimport org.eluder.coveralls.maven.plugin.service.Shippable;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class Shippable_getEnvironment extends Shippable_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test17() throws Throwable {\n    HashMap<String, String> hashMap0 = new HashMap<String, String>();\n    Shippable shippable0 = new Shippable(hashMap0);\n    Properties properties0 = shippable0.getEnvironment();\n    assertEquals(1, properties0.size());\n}\n}"
    },
    {
        "original_path": "trautonen_coveralls-maven-plugin###trautonen_coveralls-maven-plugin/src/test/java/org/eluder/coveralls/maven/plugin/util/SourceLoaderFactoryTest###testCreateSourceLoader",
        "generated_path": "SourceLoaderFactory_createSourceLoader.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.eluder.coveralls.maven.plugin.util;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.io.File;\nimport java.nio.charset.IllegalCharsetNameException;\nimport java.util.LinkedList;\nimport org.apache.maven.project.MavenProject;\nimport org.eluder.coveralls.maven.plugin.source.SourceLoader;\nimport org.eluder.coveralls.maven.plugin.util.SourceLoaderFactory;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.io.MockFile;\nimport org.evosuite.runtime.testdata.EvoSuiteFile;\nimport org.evosuite.runtime.testdata.FileSystemHandling;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class SourceLoaderFactory_createSourceLoader extends SourceLoaderFactory_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test0() throws Throwable {\n    MavenProject mavenProject0 = new MavenProject();\n    LinkedList<MavenProject> linkedList0 = new LinkedList<MavenProject>();\n    linkedList0.add(mavenProject0);\n    mavenProject0.setCollectedProjects(linkedList0);\n    SourceLoaderFactory sourceLoaderFactory0 = new SourceLoaderFactory((File) null, mavenProject0, (String) null);\n    // Undeclared exception!\n    try {\n        sourceLoaderFactory0.createSourceLoader();\n        fail(\"Expecting exception: StackOverflowError\");\n    } catch (StackOverflowError e) {\n        //\n        // no message in exception (getMessage() returned null)\n        //\n    }\n}\n}"
    },
    {
        "original_path": "trautonen_coveralls-maven-plugin###trautonen_coveralls-maven-plugin/src/test/java/org/eluder/coveralls/maven/plugin/service/CircleTest###testGetEnvironment",
        "generated_path": "Circle_getEnvironment.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.eluder.coveralls.maven.plugin.service;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Properties;\nimport org.eluder.coveralls.maven.plugin.service.Circle;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class Circle_getEnvironment extends Circle_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    HashMap<String, String> hashMap0 = new HashMap<String, String>();\n    Circle circle0 = new Circle(hashMap0);\n    hashMap0.put(\"CIRCLE_SHA1\", \"CIRCLECI\");\n    Properties properties0 = circle0.getEnvironment();\n    assertFalse(properties0.isEmpty());\n}\n}"
    },
    {
        "original_path": "davidmoten_rxjava2-extras###davidmoten_rxjava2-extras/src/test/java/com/github/davidmoten/rx2/ObservablesTest###testCache",
        "generated_path": "Observables_cache.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.github.davidmoten.rx2;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport com.github.davidmoten.rx2.Observables;\nimport com.github.davidmoten.rx2.observable.CachedObservable;\nimport com.github.davidmoten.rx2.observable.CloseableObservableWithReset;\nimport io.reactivex.Observable;\nimport io.reactivex.Scheduler;\nimport java.util.concurrent.TimeUnit;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class Observables_cache extends Observables_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test0() throws Throwable {\n    Observable<Object> observable0 = (Observable<Object>) mock(Observable.class, new ViolatedAssumptionAnswer());\n    CachedObservable<Object> cachedObservable0 = Observables.cache(observable0);\n    TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;\n    Scheduler.Worker scheduler_Worker0 = mock(Scheduler.Worker.class, new ViolatedAssumptionAnswer());\n    Observable<Object> observable1 = Observables.cache((Observable<Object>) cachedObservable0, 9223372036854775676L, timeUnit0, scheduler_Worker0);\n    assertFalse(observable1.equals((Object) observable0));\n}\n}"
    },
    {
        "original_path": "davidmoten_rxjava2-extras###davidmoten_rxjava2-extras/src/test/java/com/github/davidmoten/rx2/BytesTest###testUnzip",
        "generated_path": "Bytes_unzip.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "package com.github.davidmoten.rx;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.github.davidmoten.rx.Bytes;\nimport com.github.davidmoten.rx.util.ZippedEntry;\nimport java.io.File;\nimport java.io.InputStream;\nimport java.util.zip.ZipInputStream;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.junit.runner.RunWith;\nimport rx.Observable;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class Bytes_unzip extends Bytes_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test2() throws Throwable {\n    ZipInputStream zipInputStream0 = mock(ZipInputStream.class, new ViolatedAssumptionAnswer());\n    Observable<ZippedEntry> observable0 = Bytes.unzip(zipInputStream0);\n    assertNotNull(observable0);\n}\n}"
    },
    {
        "original_path": "davidmoten_rxjava2-extras###davidmoten_rxjava2-extras/src/test/java/com/github/davidmoten/rx2/util/PairTest###testHashCode",
        "generated_path": "Pair_hashCode.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.github.davidmoten.rx2.util;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport com.github.davidmoten.rx2.util.Pair;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class Pair_hashCode extends Pair_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    Integer integer0 = new Integer((-1));\n    Pair<String, Integer> pair0 = new Pair<String, Integer>(\"Pair [left=, right=]\", integer0);\n    pair0.hashCode();\n}\n}"
    },
    {
        "original_path": "davidmoten_rxjava2-extras###davidmoten_rxjava2-extras/src/test/java/com/github/davidmoten/rx2/util/PairTest###testEquals",
        "generated_path": "Pair_equals.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.github.davidmoten.rx2.util;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport com.github.davidmoten.rx2.util.Pair;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class Pair_equals extends Pair_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    Pair<String, String> pair0 = new Pair<String, String>(\"\", \"\");\n    Pair<Object, Object> pair1 = new Pair<Object, Object>(\"\", pair0);\n    boolean boolean0 = pair0.equals(pair1);\n    assertFalse(boolean0);\n}\n}"
    },
    {
        "original_path": "davidmoten_rxjava2-extras###davidmoten_rxjava2-extras/src/test/java/com/github/davidmoten/rx2/util/PairTest###testToString",
        "generated_path": "Pair_toString.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.github.davidmoten.rx2.util;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport com.github.davidmoten.rx2.util.Pair;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class Pair_toString extends Pair_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test20() throws Throwable {\n    Integer integer0 = new Integer(957);\n    Pair<Integer, Integer> pair0 = Pair.create(integer0, integer0);\n    String string0 = pair0.toString();\n    assertEquals(\"Pair [left=957, right=957]\", string0);\n}\n}"
    },
    {
        "original_path": "sachin-handiekar_jInstagram###sachin-handiekar_jInstagram/src/test/java/org/jinstagram/auth/InstagramAuthServiceTest###testApiKey",
        "generated_path": "InstagramAuthService_apiKey.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.jinstagram.auth;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.net.Proxy;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.jinstagram.auth.InstagramAuthService;\nimport org.jinstagram.auth.oauth.InstagramService;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class InstagramAuthService_apiKey extends InstagramAuthService_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    InstagramAuthService instagramAuthService0 = new InstagramAuthService();\n    InstagramAuthService instagramAuthService1 = instagramAuthService0.apiSecret(\"PwP<KH}\");\n    instagramAuthService1.apiKey(\"Could not get access token\");\n    Proxy proxy0 = Proxy.NO_PROXY;\n    instagramAuthService1.proxy(proxy0);\n    InstagramService instagramService0 = instagramAuthService0.build();\n    assertEquals(\"1.0\", instagramService0.getVersion());\n}\n}"
    },
    {
        "original_path": "sachin-handiekar_jInstagram###sachin-handiekar_jInstagram/src/test/java/org/jinstagram/auth/InstagramAuthServiceTest###testScope",
        "generated_path": "InstagramAuthService_scope.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.jinstagram.auth;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.net.Proxy;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.jinstagram.auth.InstagramAuthService;\nimport org.jinstagram.auth.oauth.InstagramService;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class InstagramAuthService_scope extends InstagramAuthService_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    InstagramAuthService instagramAuthService0 = new InstagramAuthService();\n    InstagramAuthService instagramAuthService1 = instagramAuthService0.scope(\"oob\");\n    assertSame(instagramAuthService0, instagramAuthService1);\n}\n}"
    },
    {
        "original_path": "sachin-handiekar_jInstagram###sachin-handiekar_jInstagram/src/test/java/org/jinstagram/realtime/InstagramSubscriptionTest###testClientId",
        "generated_path": "InstagramSubscription_clientId.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.jinstagram.realtime;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.jinstagram.InstagramConfig;\nimport org.jinstagram.realtime.InstagramSubscription;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class InstagramSubscription_clientId extends InstagramSubscription_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test18() throws Throwable {\n    InstagramSubscription instagramSubscription0 = new InstagramSubscription();\n    InstagramSubscription instagramSubscription1 = instagramSubscription0.clientId(\"@OAutReKquest(s, %s)\");\n    assertSame(instagramSubscription0, instagramSubscription1);\n}\n}"
    },
    {
        "original_path": "sachin-handiekar_jInstagram###sachin-handiekar_jInstagram/src/test/java/org/jinstagram/auth/InstagramAuthServiceTest###testCallback",
        "generated_path": "InstagramAuthService_callback.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.jinstagram.auth;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.net.Proxy;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.jinstagram.auth.InstagramAuthService;\nimport org.jinstagram.auth.oauth.InstagramService;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class InstagramAuthService_callback extends InstagramAuthService_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    InstagramAuthService instagramAuthService0 = new InstagramAuthService();\n    InstagramAuthService instagramAuthService1 = instagramAuthService0.callback(\"oob\");\n    assertSame(instagramAuthService1, instagramAuthService0);\n}\n}"
    },
    {
        "original_path": "sachin-handiekar_jInstagram###sachin-handiekar_jInstagram/src/test/java/org/jinstagram/auth/InstagramAuthServiceTest###testApiSecret",
        "generated_path": "InstagramAuthService_apiSecret.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.jinstagram.auth;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.net.Proxy;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.jinstagram.auth.InstagramAuthService;\nimport org.jinstagram.auth.oauth.InstagramService;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class InstagramAuthService_apiSecret extends InstagramAuthService_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    InstagramAuthService instagramAuthService0 = new InstagramAuthService();\n    InstagramAuthService instagramAuthService1 = instagramAuthService0.apiSecret(\"PwP<KH}\");\n    instagramAuthService1.apiKey(\"Could not get access token\");\n    Proxy proxy0 = Proxy.NO_PROXY;\n    instagramAuthService1.proxy(proxy0);\n    InstagramService instagramService0 = instagramAuthService0.build();\n    assertEquals(\"1.0\", instagramService0.getVersion());\n}\n}"
    },
    {
        "original_path": "sachin-handiekar_jInstagram###sachin-handiekar_jInstagram/src/test/java/org/jinstagram/realtime/InstagramSubscriptionTest###testAspect",
        "generated_path": "InstagramSubscription_aspect.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.jinstagram.realtime;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.jinstagram.InstagramConfig;\nimport org.jinstagram.realtime.InstagramSubscription;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class InstagramSubscription_aspect extends InstagramSubscription_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test16() throws Throwable {\n    InstagramSubscription instagramSubscription0 = new InstagramSubscription();\n    InstagramSubscription instagramSubscription1 = instagramSubscription0.aspect(\"@OAutReKquest(s, %s)\");\n    assertSame(instagramSubscription1, instagramSubscription0);\n}\n}"
    },
    {
        "original_path": "sachin-handiekar_jInstagram###sachin-handiekar_jInstagram/src/test/java/org/jinstagram/realtime/InstagramSubscriptionTest###testClientSecret",
        "generated_path": "InstagramSubscription_clientSecret.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.jinstagram.realtime;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.jinstagram.InstagramConfig;\nimport org.jinstagram.realtime.InstagramSubscription;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class InstagramSubscription_clientSecret extends InstagramSubscription_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test17() throws Throwable {\n    InstagramSubscription instagramSubscription0 = new InstagramSubscription();\n    InstagramSubscription instagramSubscription1 = instagramSubscription0.clientSecret(\"@OAutReKquest(s, %s)\");\n    assertSame(instagramSubscription0, instagramSubscription1);\n}\n}"
    },
    {
        "original_path": "sachin-handiekar_jInstagram###sachin-handiekar_jInstagram/src/test/java/org/jinstagram/realtime/InstagramSubscriptionTest###testLatitute",
        "generated_path": "InstagramSubscription_latitute.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.jinstagram.realtime;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.jinstagram.InstagramConfig;\nimport org.jinstagram.realtime.InstagramSubscription;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class InstagramSubscription_latitute extends InstagramSubscription_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    InstagramSubscription instagramSubscription0 = new InstagramSubscription();\n    InstagramSubscription instagramSubscription1 = instagramSubscription0.latitute(\"52\");\n    assertSame(instagramSubscription0, instagramSubscription1);\n}\n}"
    },
    {
        "original_path": "sachin-handiekar_jInstagram###sachin-handiekar_jInstagram/src/test/java/org/jinstagram/realtime/InstagramSubscriptionTest###testToString",
        "generated_path": "InstagramSubscription_toString.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.jinstagram.realtime;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.jinstagram.InstagramConfig;\nimport org.jinstagram.realtime.InstagramSubscription;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class InstagramSubscription_toString extends InstagramSubscription_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    InstagramSubscription instagramSubscription0 = new InstagramSubscription();\n    String string0 = instagramSubscription0.toString();\n    assertEquals(\"InstagramSubscription [callback_url=oob]\", string0);\n}\n}"
    },
    {
        "original_path": "sachin-handiekar_jInstagram###sachin-handiekar_jInstagram/src/test/java/org/jinstagram/auth/InstagramAuthServiceTest###testBuild",
        "generated_path": "InstagramAuthService_build.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.jinstagram.auth;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.net.Proxy;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.jinstagram.auth.InstagramAuthService;\nimport org.jinstagram.auth.oauth.InstagramService;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class InstagramAuthService_build extends InstagramAuthService_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    InstagramAuthService instagramAuthService0 = new InstagramAuthService();\n    InstagramAuthService instagramAuthService1 = instagramAuthService0.apiSecret(\"PwP<KH}\");\n    instagramAuthService1.apiKey(\"Could not get access token\");\n    Proxy proxy0 = Proxy.NO_PROXY;\n    instagramAuthService1.proxy(proxy0);\n    InstagramService instagramService0 = instagramAuthService0.build();\n    assertEquals(\"1.0\", instagramService0.getVersion());\n}\n}"
    },
    {
        "original_path": "sachin-handiekar_jInstagram###sachin-handiekar_jInstagram/src/test/java/org/jinstagram/realtime/InstagramSubscriptionTest###testCallback",
        "generated_path": "InstagramSubscription_callback.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.jinstagram.realtime;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.jinstagram.InstagramConfig;\nimport org.jinstagram.realtime.InstagramSubscription;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class InstagramSubscription_callback extends InstagramSubscription_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    InstagramSubscription instagramSubscription0 = new InstagramSubscription();\n    InstagramSubscription instagramSubscription1 = instagramSubscription0.callback(\"https://api.instagram.com\");\n    assertSame(instagramSubscription1, instagramSubscription0);\n}\n}"
    },
    {
        "original_path": "sachin-handiekar_jInstagram###sachin-handiekar_jInstagram/src/test/java/org/jinstagram/realtime/InstagramSubscriptionTest###testVerifyToken",
        "generated_path": "InstagramSubscription_verifyToken.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.jinstagram.realtime;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.jinstagram.InstagramConfig;\nimport org.jinstagram.realtime.InstagramSubscription;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class InstagramSubscription_verifyToken extends InstagramSubscription_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    InstagramSubscription instagramSubscription0 = new InstagramSubscription();\n    InstagramSubscription instagramSubscription1 = instagramSubscription0.verifyToken(\"@OAutReKquest(s, %s)\");\n    assertSame(instagramSubscription0, instagramSubscription1);\n}\n}"
    },
    {
        "original_path": "sachin-handiekar_jInstagram###sachin-handiekar_jInstagram/src/test/java/org/jinstagram/realtime/InstagramSubscriptionTest###testRadius",
        "generated_path": "InstagramSubscription_radius.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.jinstagram.realtime;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.jinstagram.InstagramConfig;\nimport org.jinstagram.realtime.InstagramSubscription;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class InstagramSubscription_radius extends InstagramSubscription_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    InstagramSubscription instagramSubscription0 = new InstagramSubscription();\n    InstagramSubscription instagramSubscription1 = instagramSubscription0.radius(\"52\");\n    assertSame(instagramSubscription0, instagramSubscription1);\n}\n}"
    },
    {
        "original_path": "sachin-handiekar_jInstagram###sachin-handiekar_jInstagram/src/test/java/org/jinstagram/entity/common/InstagramErrorResponseTest###testParse",
        "generated_path": "InstagramErrorResponse_parse.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.jinstagram.entity.common;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.google.gson.Gson;\nimport java.io.IOException;\nimport java.util.HashMap;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.jinstagram.entity.common.InstagramErrorResponse;\nimport org.jinstagram.entity.common.Meta;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class InstagramErrorResponse_parse extends InstagramErrorResponse_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void InstagramErrorResponse_parse() throws Throwable {\n    Gson gson0 = new Gson();\n    // Undeclared exception!\n    try {\n        InstagramErrorResponse.parse(gson0, \",OPE>E:SyEv MTEj\");\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        //\n        // org.evosuite.runtime.mock.java.lang.MockThrowable: Unexpected value at line 1 column 2 path $\n        //\n        verifyException(\"com.google.gson.Gson\", e);\n    }\n}\n}"
    },
    {
        "original_path": "sachin-handiekar_jInstagram###sachin-handiekar_jInstagram/src/test/java/org/jinstagram/auth/InstagramAuthServiceTest###testDisplay",
        "generated_path": "InstagramAuthService_display.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.jinstagram.auth;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.net.Proxy;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.jinstagram.auth.InstagramAuthService;\nimport org.jinstagram.auth.oauth.InstagramService;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class InstagramAuthService_display extends InstagramAuthService_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    InstagramAuthService instagramAuthService0 = new InstagramAuthService();\n    InstagramAuthService instagramAuthService1 = instagramAuthService0.display(\"Could not get access token\");\n    assertSame(instagramAuthService0, instagramAuthService1);\n}\n}"
    },
    {
        "original_path": "sachin-handiekar_jInstagram###sachin-handiekar_jInstagram/src/test/java/org/jinstagram/realtime/InstagramSubscriptionTest###testLongitude",
        "generated_path": "InstagramSubscription_longitude.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.jinstagram.realtime;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.jinstagram.InstagramConfig;\nimport org.jinstagram.realtime.InstagramSubscription;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class InstagramSubscription_longitude extends InstagramSubscription_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    InstagramSubscription instagramSubscription0 = new InstagramSubscription();\n    InstagramSubscription instagramSubscription1 = instagramSubscription0.longitude(\"52\");\n    assertSame(instagramSubscription0, instagramSubscription1);\n}\n}"
    },
    {
        "original_path": "mdeverdelhan_ta4j-origins###mdeverdelhan_ta4j-origins/ta4j/src/test/java/eu/verdelhan/ta4j/indicators/statistics/PeriodicalGrowthRateIndicatorTest###testGetTotalReturn",
        "generated_path": "PeriodicalGrowthRateIndicator_getTotalReturn.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package eu.verdelhan.ta4j.indicators.statistics;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport eu.verdelhan.ta4j.BaseTick;\nimport eu.verdelhan.ta4j.BaseTimeSeries;\nimport eu.verdelhan.ta4j.BaseTradingRecord;\nimport eu.verdelhan.ta4j.Decimal;\nimport eu.verdelhan.ta4j.Indicator;\nimport eu.verdelhan.ta4j.Order;\nimport eu.verdelhan.ta4j.Tick;\nimport eu.verdelhan.ta4j.TimeSeries;\nimport eu.verdelhan.ta4j.analysis.CashFlow;\nimport eu.verdelhan.ta4j.indicators.AccelerationDecelerationIndicator;\nimport eu.verdelhan.ta4j.indicators.AroonDownIndicator;\nimport eu.verdelhan.ta4j.indicators.AroonUpIndicator;\nimport eu.verdelhan.ta4j.indicators.FisherIndicator;\nimport eu.verdelhan.ta4j.indicators.ParabolicSarIndicator;\nimport eu.verdelhan.ta4j.indicators.RAVIIndicator;\nimport eu.verdelhan.ta4j.indicators.RSIIndicator;\nimport eu.verdelhan.ta4j.indicators.SmoothedRSIIndicator;\nimport eu.verdelhan.ta4j.indicators.StochasticOscillatorDIndicator;\nimport eu.verdelhan.ta4j.indicators.StochasticOscillatorKIndicator;\nimport eu.verdelhan.ta4j.indicators.StochasticRSIIndicator;\nimport eu.verdelhan.ta4j.indicators.TripleEMAIndicator;\nimport eu.verdelhan.ta4j.indicators.WMAIndicator;\nimport eu.verdelhan.ta4j.indicators.ZLEMAIndicator;\nimport eu.verdelhan.ta4j.indicators.helpers.MaxPriceIndicator;\nimport eu.verdelhan.ta4j.indicators.helpers.MinPriceIndicator;\nimport eu.verdelhan.ta4j.indicators.statistics.PeriodicalGrowthRateIndicator;\nimport java.time.Duration;\nimport java.time.ZonedDateTime;\nimport java.util.LinkedList;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.time.MockZonedDateTime;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class PeriodicalGrowthRateIndicator_getTotalReturn extends PeriodicalGrowthRateIndicator_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    BaseTimeSeries baseTimeSeries0 = new BaseTimeSeries();\n    Duration duration0 = Duration.ofMinutes((-1L));\n    ZonedDateTime zonedDateTime0 = MockZonedDateTime.now();\n    Decimal decimal0 = Decimal.NaN;\n    BaseTick baseTick0 = new BaseTick(duration0, zonedDateTime0, decimal0, decimal0, decimal0, decimal0, decimal0);\n    baseTimeSeries0.addTick(baseTick0);\n    FisherIndicator fisherIndicator0 = new FisherIndicator(baseTimeSeries0);\n    PeriodicalGrowthRateIndicator periodicalGrowthRateIndicator0 = new PeriodicalGrowthRateIndicator(fisherIndicator0, (-2302));\n    double double0 = periodicalGrowthRateIndicator0.getTotalReturn();\n    assertEquals(Double.NaN, double0, 0.01);\n}\n}"
    },
    {
        "original_path": "datacleaner_DataCleaner###datacleaner_DataCleaner/components/http/src/test/java/org/datacleaner/components/http/HttpRequestTransformerTest###testGetOutputColumns",
        "generated_path": "HttpRequestTransformer_getOutputColumns.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "package org.datacleaner.components.http;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.lang.reflect.Array;\nimport java.nio.charset.IllegalCharsetNameException;\nimport java.nio.charset.UnsupportedCharsetException;\nimport java.util.List;\nimport org.apache.http.impl.client.CloseableHttpClient;\nimport org.datacleaner.api.InputColumn;\nimport org.datacleaner.api.InputRow;\nimport org.datacleaner.api.OutputColumns;\nimport org.datacleaner.components.http.HttpMethod;\nimport org.datacleaner.components.http.HttpRequestTransformer;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.FalsePositiveException;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.javaee.injection.Injector;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class HttpRequestTransformer_getOutputColumns extends HttpRequestTransformer_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    HttpRequestTransformer httpRequestTransformer0 = new HttpRequestTransformer();\n    Injector.inject(httpRequestTransformer0, (Class<?>) HttpRequestTransformer.class, \"charset\", (Object) \"Input\");\n    Injector.inject(httpRequestTransformer0, (Class<?>) HttpRequestTransformer.class, \"headers\", (Object) null);\n    OutputColumns outputColumns0 = httpRequestTransformer0.getOutputColumns();\n    assertEquals(2, outputColumns0.getColumnCount());\n}\n}"
    },
    {
        "original_path": "datacleaner_DataCleaner###datacleaner_DataCleaner/components/http/src/test/java/org/datacleaner/components/http/HttpRequestTransformerTest###testApplyVariablesToString",
        "generated_path": "HttpRequestTransformer_applyVariablesToString.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "package org.datacleaner.components.http;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.lang.reflect.Array;\nimport java.nio.charset.IllegalCharsetNameException;\nimport java.nio.charset.UnsupportedCharsetException;\nimport java.util.List;\nimport org.apache.http.impl.client.CloseableHttpClient;\nimport org.datacleaner.api.InputColumn;\nimport org.datacleaner.api.InputRow;\nimport org.datacleaner.api.OutputColumns;\nimport org.datacleaner.components.http.HttpMethod;\nimport org.datacleaner.components.http.HttpRequestTransformer;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.FalsePositiveException;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.javaee.injection.Injector;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class HttpRequestTransformer_applyVariablesToString extends HttpRequestTransformer_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    HttpRequestTransformer httpRequestTransformer0 = new HttpRequestTransformer();\n    Injector.inject(httpRequestTransformer0, (Class<?>) HttpRequestTransformer.class, \"charset\", (Object) \"\");\n    Injector.inject(httpRequestTransformer0, (Class<?>) HttpRequestTransformer.class, \"headers\", (Object) null);\n    InputRow inputRow0 = mock(InputRow.class, new ViolatedAssumptionAnswer());\n    String string0 = httpRequestTransformer0.applyVariablesToString(\"\", inputRow0);\n    assertNull(string0);\n}\n}"
    },
    {
        "original_path": "datacleaner_DataCleaner###datacleaner_DataCleaner/components/reference-data/src/test/java/org/datacleaner/beans/transform/RemoveDictionaryMatchesTransformerTest###testGetOutputColumns",
        "generated_path": "RemoveDictionaryMatchesTransformer_getOutputColumns.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "package org.datacleaner.beans.transform;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.util.AbstractMap;\nimport java.util.Iterator;\nimport java.util.regex.Pattern;\nimport org.datacleaner.api.InputColumn;\nimport org.datacleaner.api.InputRow;\nimport org.datacleaner.api.OutputColumns;\nimport org.datacleaner.beans.transform.RemoveDictionaryMatchesTransformer;\nimport org.datacleaner.configuration.DataCleanerConfiguration;\nimport org.datacleaner.reference.Dictionary;\nimport org.datacleaner.reference.DictionaryConnection;\nimport org.datacleaner.reference.SimpleDictionary;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.javaee.injection.Injector;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class RemoveDictionaryMatchesTransformer_getOutputColumns extends RemoveDictionaryMatchesTransformer_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    RemoveDictionaryMatchesTransformer removeDictionaryMatchesTransformer0 = new RemoveDictionaryMatchesTransformer();\n    InputColumn<Object> inputColumn0 = (InputColumn<Object>) mock(InputColumn.class, new ViolatedAssumptionAnswer());\n    doReturn((String) null).when(inputColumn0).getName();\n    Injector.inject(removeDictionaryMatchesTransformer0, (Class<?>) RemoveDictionaryMatchesTransformer.class, \"_column\", (Object) inputColumn0);\n    DataCleanerConfiguration dataCleanerConfiguration0 = mock(DataCleanerConfiguration.class, new ViolatedAssumptionAnswer());\n    Injector.inject(removeDictionaryMatchesTransformer0, (Class<?>) RemoveDictionaryMatchesTransformer.class, \"_configuration\", (Object) dataCleanerConfiguration0);\n    String[] stringArray0 = new String[3];\n    SimpleDictionary simpleDictionary0 = new SimpleDictionary(\"Dictionary\", stringArray0);\n    Injector.inject(removeDictionaryMatchesTransformer0, (Class<?>) RemoveDictionaryMatchesTransformer.class, \"_dictionary\", (Object) simpleDictionary0);\n    RemoveDictionaryMatchesTransformer.RemovedMatchesType removeDictionaryMatchesTransformer_RemovedMatchesType0 = RemoveDictionaryMatchesTransformer.RemovedMatchesType.LIST;\n    Injector.inject(removeDictionaryMatchesTransformer0, (Class<?>) RemoveDictionaryMatchesTransformer.class, \"_removedMatchesType\", (Object) removeDictionaryMatchesTransformer_RemovedMatchesType0);\n    Injector.validateBean(removeDictionaryMatchesTransformer0, (Class<?>) RemoveDictionaryMatchesTransformer.class);\n    OutputColumns outputColumns0 = removeDictionaryMatchesTransformer0.getOutputColumns();\n    assertEquals(2, outputColumns0.getColumnCount());\n}\n}"
    },
    {
        "original_path": "datacleaner_DataCleaner###datacleaner_DataCleaner/components/fuse/src/test/java/org/datacleaner/components/fuse/CoalesceUnitTest###testGetOutputDataType",
        "generated_path": "CoalesceUnit_getOutputDataType.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "package org.datacleaner.components.fuse;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.lang.reflect.Array;\nimport java.util.List;\nimport org.datacleaner.api.InputColumn;\nimport org.datacleaner.components.fuse.CoalesceUnit;\nimport org.datacleaner.data.ConstantInputColumn;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class CoalesceUnit_getOutputDataType extends CoalesceUnit_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void CoalesceUnit_getOutputDataType() throws Throwable {\n    CoalesceUnit coalesceUnit0 = new CoalesceUnit((String[]) null);\n    // Undeclared exception!\n    try {\n        coalesceUnit0.getOutputDataType();\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        //\n        // no message in exception (getMessage() returned null)\n        //\n        verifyException(\"org.datacleaner.components.fuse.CoalesceUnit\", e);\n    }\n}\n}"
    },
    {
        "original_path": "datacleaner_DataCleaner###datacleaner_DataCleaner/components/basic-transformers/src/test/java/org/datacleaner/beans/codec/HashTransformerTest###testGetOutputColumns",
        "generated_path": "HashTransformer_getOutputColumns.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "package org.datacleaner.beans.codec;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.lang.reflect.Array;\nimport org.datacleaner.api.InputColumn;\nimport org.datacleaner.api.InputRow;\nimport org.datacleaner.api.OutputColumns;\nimport org.datacleaner.beans.codec.HashTransformer;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class HashTransformer_getOutputColumns extends HashTransformer_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test3() throws Throwable {\n    InputColumn<Object>[] inputColumnArray0 = (InputColumn<Object>[]) Array.newInstance(InputColumn.class, 0);\n    HashTransformer.Algorithm hashTransformer_Algorithm0 = HashTransformer.Algorithm.SHA_512;\n    HashTransformer hashTransformer0 = new HashTransformer(inputColumnArray0, hashTransformer_Algorithm0);\n    OutputColumns outputColumns0 = hashTransformer0.getOutputColumns();\n    assertEquals(2, outputColumns0.getColumnCount());\n}\n}"
    },
    {
        "original_path": "softindex_datakernel###softindex_datakernel/core-bytebuf/src/test/java/io/datakernel/bytebuf/ByteBufTest###testGet",
        "generated_path": "ByteBuf_get.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package io.datakernel.bytebuf;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport io.datakernel.bytebuf.ByteBuf;\nimport io.datakernel.common.Recyclable;\nimport io.datakernel.common.Sliceable;\nimport java.nio.ByteBuffer;\nimport java.nio.ByteOrder;\nimport java.nio.CharBuffer;\nimport java.nio.InvalidMarkException;\nimport java.nio.charset.Charset;\nimport java.nio.charset.IllegalCharsetNameException;\nimport java.nio.charset.UnsupportedCharsetException;\nimport java.util.Set;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class ByteBuf_get extends ByteBuf_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test019() throws Throwable {\n    byte[] byteArray0 = new byte[9];\n    ByteBuf byteBuf0 = ByteBuf.wrapForReading(byteArray0);\n    assertEquals(9, byteBuf0.tail());\n    assertEquals(0, byteBuf0.head());\n    assertEquals(9, byteBuf0.limit());\n    assertEquals(9, byteArray0.length);\n    assertNotNull(byteBuf0);\n    assertArrayEquals(new byte[] { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }, byteArray0);\n    ByteBuf byteBuf1 = byteBuf0.slice();\n    assertNotSame(byteBuf0, byteBuf1);\n    assertNotSame(byteBuf1, byteBuf0);\n    assertEquals(9, byteBuf0.tail());\n    assertEquals(0, byteBuf0.head());\n    assertEquals(9, byteBuf0.limit());\n    assertEquals(0, byteBuf1.head());\n    assertEquals(9, byteBuf1.limit());\n    assertEquals(9, byteBuf1.tail());\n    assertEquals(9, byteArray0.length);\n    assertFalse(byteBuf1.equals((Object) byteBuf0));\n    assertNotNull(byteBuf1);\n    assertArrayEquals(new byte[] { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }, byteArray0);\n    int int0 = byteBuf0.find(byteArray0);\n    assertNotSame(byteBuf0, byteBuf1);\n    assertEquals(9, byteBuf0.tail());\n    assertEquals(0, byteBuf0.head());\n    assertEquals(9, byteBuf0.limit());\n    assertEquals(9, byteArray0.length);\n    assertFalse(byteBuf0.equals((Object) byteBuf1));\n    assertArrayEquals(new byte[] { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }, byteArray0);\n    assertEquals(0, int0);\n    byte byte0 = byteBuf0.get();\n    assertNotSame(byteBuf0, byteBuf1);\n    assertEquals(9, byteBuf0.tail());\n    assertEquals(1, byteBuf0.head());\n    assertEquals(9, byteBuf0.limit());\n    assertEquals(9, byteArray0.length);\n    assertFalse(byteBuf0.equals((Object) byteBuf1));\n    assertArrayEquals(new byte[] { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }, byteArray0);\n    assertEquals((byte) 0, byte0);\n    ByteBuffer byteBuffer0 = byteBuf1.toReadByteBuffer();\n    assertNotSame(byteBuf0, byteBuf1);\n    assertNotSame(byteBuf1, byteBuf0);\n    assertEquals(9, byteBuf0.tail());\n    assertEquals(1, byteBuf0.head());\n    assertEquals(9, byteBuf0.limit());\n    assertEquals(0, byteBuf1.head());\n    assertEquals(9, byteBuf1.limit());\n    assertEquals(9, byteBuf1.tail());\n    assertEquals(9, byteBuffer0.remaining());\n    assertEquals(9, byteBuffer0.capacity());\n    assertEquals(0, byteBuffer0.arrayOffset());\n    assertEquals(0, byteBuffer0.position());\n    assertFalse(byteBuffer0.isReadOnly());\n    assertTrue(byteBuffer0.hasArray());\n    assertEquals(9, byteBuffer0.limit());\n    assertFalse(byteBuffer0.isDirect());\n    assertTrue(byteBuffer0.hasRemaining());\n    assertEquals(\"java.nio.HeapByteBuffer[pos=0 lim=9 cap=9]\", byteBuffer0.toString());\n    assertEquals(9, byteArray0.length);\n    assertFalse(byteBuf0.equals((Object) byteBuf1));\n    assertFalse(byteBuf1.equals((Object) byteBuf0));\n    assertNotNull(byteBuffer0);\n    assertArrayEquals(new byte[] { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }, byteArray0);\n    short short0 = byteBuf1.readShort();\n    assertNotSame(byteBuf0, byteBuf1);\n    assertNotSame(byteBuf1, byteBuf0);\n    assertEquals(9, byteBuf0.tail());\n    assertEquals(1, byteBuf0.head());\n    assertEquals(9, byteBuf0.limit());\n    assertEquals(2, byteBuf1.head());\n    assertEquals(9, byteBuf1.limit());\n    assertEquals(9, byteBuf1.tail());\n    assertEquals(9, byteArray0.length);\n    assertFalse(byteBuf0.equals((Object) byteBuf1));\n    assertFalse(byteBuf1.equals((Object) byteBuf0));\n    assertArrayEquals(new byte[] { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }, byteArray0);\n    assertEquals((short) 0, short0);\n    byteBuf1.ofWriteByteBuffer(byteBuffer0);\n    assertNotSame(byteBuf0, byteBuf1);\n    assertNotSame(byteBuf1, byteBuf0);\n    assertEquals(9, byteBuf0.tail());\n    assertEquals(1, byteBuf0.head());\n    assertEquals(9, byteBuf0.limit());\n    assertEquals(2, byteBuf1.head());\n    assertEquals(0, byteBuf1.tail());\n    assertEquals(9, byteBuf1.limit());\n    assertEquals(9, byteBuffer0.remaining());\n    assertEquals(9, byteBuffer0.capacity());\n    assertEquals(0, byteBuffer0.arrayOffset());\n    assertEquals(0, byteBuffer0.position());\n    assertFalse(byteBuffer0.isReadOnly());\n    assertTrue(byteBuffer0.hasArray());\n    assertEquals(9, byteBuffer0.limit());\n    assertFalse(byteBuffer0.isDirect());\n    assertTrue(byteBuffer0.hasRemaining());\n    assertEquals(\"java.nio.HeapByteBuffer[pos=0 lim=9 cap=9]\", byteBuffer0.toString());\n    assertEquals(9, byteArray0.length);\n    assertFalse(byteBuf0.equals((Object) byteBuf1));\n    assertFalse(byteBuf1.equals((Object) byteBuf0));\n    assertArrayEquals(new byte[] { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }, byteArray0);\n    byteBuf0.put(byteArray0, (int) (byte) 0, 0);\n    assertNotSame(byteBuf0, byteBuf1);\n    assertEquals(9, byteBuf0.tail());\n    assertEquals(1, byteBuf0.head());\n    assertEquals(9, byteBuf0.limit());\n    assertEquals(9, byteArray0.length);\n    assertFalse(byteBuf0.equals((Object) byteBuf1));\n    assertArrayEquals(new byte[] { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }, byteArray0);\n    boolean boolean0 = byteBuf1.isContentEqual(byteArray0, (-590), 1);\n    assertNotSame(byteBuf0, byteBuf1);\n    assertNotSame(byteBuf1, byteBuf0);\n    assertEquals(9, byteBuf0.tail());\n    assertEquals(1, byteBuf0.head());\n    assertEquals(9, byteBuf0.limit());\n    assertEquals(2, byteBuf1.head());\n    assertEquals(0, byteBuf1.tail());\n    assertEquals(9, byteBuf1.limit());\n    assertEquals(9, byteArray0.length);\n    assertFalse(byteBuf0.equals((Object) byteBuf1));\n    assertFalse(byteBuf1.equals((Object) byteBuf0));\n    assertArrayEquals(new byte[] { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }, byteArray0);\n    assertFalse(boolean0);\n    byteBuf1.writeInt(1);\n    assertNotSame(byteBuf0, byteBuf1);\n    assertNotSame(byteBuf1, byteBuf0);\n    assertEquals(9, byteBuf0.tail());\n    assertEquals(1, byteBuf0.head());\n    assertEquals(9, byteBuf0.limit());\n    assertEquals(2, byteBuf1.head());\n    assertEquals(4, byteBuf1.tail());\n    assertEquals(9, byteBuf1.limit());\n    assertEquals(9, byteArray0.length);\n    assertFalse(byteBuf0.equals((Object) byteBuf1));\n    assertFalse(byteBuf1.equals((Object) byteBuf0));\n    assertArrayEquals(new byte[] { (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }, byteArray0);\n    int int1 = byteBuf0.readVarInt();\n    assertNotSame(byteBuf0, byteBuf1);\n    assertEquals(9, byteBuf0.tail());\n    assertEquals(2, byteBuf0.head());\n    assertEquals(9, byteBuf0.limit());\n    assertEquals(9, byteArray0.length);\n    assertFalse(byteBuf0.equals((Object) byteBuf1));\n    assertTrue(int1 == int0);\n    assertArrayEquals(new byte[] { (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }, byteArray0);\n    assertEquals(0, int1);\n    byteBuf1.writeByte((byte) 0);\n    assertNotSame(byteBuf0, byteBuf1);\n    assertNotSame(byteBuf1, byteBuf0);\n    assertEquals(9, byteBuf0.tail());\n    assertEquals(2, byteBuf0.head());\n    assertEquals(9, byteBuf0.limit());\n    assertEquals(2, byteBuf1.head());\n    assertEquals(5, byteBuf1.tail());\n    assertEquals(9, byteBuf1.limit());\n    assertEquals(9, byteArray0.length);\n    assertFalse(byteBuf0.equals((Object) byteBuf1));\n    assertFalse(byteBuf1.equals((Object) byteBuf0));\n    assertArrayEquals(new byte[] { (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }, byteArray0);\n}\n}"
    },
    {
        "original_path": "softindex_datakernel###softindex_datakernel/core-bytebuf/src/test/java/io/datakernel/bytebuf/ByteBufQueueTest###testAsIterator",
        "generated_path": "ByteBufQueue_asIterator.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package io.datakernel.bytebuf;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport io.datakernel.bytebuf.ByteBuf;\nimport io.datakernel.bytebuf.ByteBufQueue;\nimport io.datakernel.common.Recyclable;\nimport java.util.ArrayList;\nimport java.util.Iterator;\nimport java.util.Stack;\nimport java.util.Vector;\nimport java.util.function.Consumer;\nimport java.util.stream.Collector;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class ByteBufQueue_asIterator extends ByteBufQueue_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test33() throws Throwable {\n    ByteBufQueue byteBufQueue0 = new ByteBufQueue(1191);\n    assertNotNull(byteBufQueue0);\n    assertFalse(byteBufQueue0.isRecycled());\n    assertTrue(byteBufQueue0.isEmpty());\n    assertFalse(byteBufQueue0.hasRemaining());\n    assertEquals(0, byteBufQueue0.remainingBufs());\n    Iterator<ByteBuf> iterator0 = byteBufQueue0.asIterator();\n    assertNotNull(iterator0);\n    assertFalse(byteBufQueue0.isRecycled());\n    assertTrue(byteBufQueue0.isEmpty());\n    assertFalse(byteBufQueue0.hasRemaining());\n    assertEquals(0, byteBufQueue0.remainingBufs());\n}\n}"
    },
    {
        "original_path": "fommil_matrix-toolkits-java###fommil_matrix-toolkits-java/src/test/java/no/uib/cipr/matrix/QRTest###testFactor",
        "generated_path": "QR_factor.java",
        "Compile_result": 1,
        "Test_result": 0,
        "Gen_Test": "package no.uib.cipr.matrix;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.io.StringReader;\nimport no.uib.cipr.matrix.DenseMatrix;\nimport no.uib.cipr.matrix.DenseVector;\nimport no.uib.cipr.matrix.DenseVectorSub;\nimport no.uib.cipr.matrix.Diag;\nimport no.uib.cipr.matrix.LowerSymmBandMatrix;\nimport no.uib.cipr.matrix.LowerSymmDenseMatrix;\nimport no.uib.cipr.matrix.LowerTriangDenseMatrix;\nimport no.uib.cipr.matrix.LowerTriangPackMatrix;\nimport no.uib.cipr.matrix.Matrix;\nimport no.uib.cipr.matrix.PermutationMatrix;\nimport no.uib.cipr.matrix.QR;\nimport no.uib.cipr.matrix.SPDTridiagMatrix;\nimport no.uib.cipr.matrix.SymmTridiagMatrix;\nimport no.uib.cipr.matrix.TridiagMatrix;\nimport no.uib.cipr.matrix.UnitLowerTriangBandMatrix;\nimport no.uib.cipr.matrix.UnitLowerTriangDenseMatrix;\nimport no.uib.cipr.matrix.UnitUpperTriangBandMatrix;\nimport no.uib.cipr.matrix.UnitUpperTriangPackMatrix;\nimport no.uib.cipr.matrix.UpperSPDDenseMatrix;\nimport no.uib.cipr.matrix.UpperSPDPackMatrix;\nimport no.uib.cipr.matrix.UpperSymmDenseMatrix;\nimport no.uib.cipr.matrix.UpperSymmPackMatrix;\nimport no.uib.cipr.matrix.UpperTriangDenseMatrix;\nimport no.uib.cipr.matrix.UpperTriangPackMatrix;\nimport no.uib.cipr.matrix.Vector;\nimport no.uib.cipr.matrix.io.MatrixVectorReader;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.System;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class QR_factor extends QR_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    int int0 = 48;\n    LowerTriangPackMatrix lowerTriangPackMatrix0 = new LowerTriangPackMatrix(48);\n    QR qR0 = QR.factorize(lowerTriangPackMatrix0);\n    StringReader stringReader0 = new StringReader(\"y\u007f0q{G2r\");\n    MatrixVectorReader matrixVectorReader0 = new MatrixVectorReader(stringReader0, 48);\n    DenseMatrix denseMatrix0 = new DenseMatrix(48, 48);\n    DenseMatrix denseMatrix1 = denseMatrix0.copy();\n    // Undeclared exception!\n    qR0.factor(denseMatrix1);\n}\n}"
    },
    {
        "original_path": "fommil_matrix-toolkits-java###fommil_matrix-toolkits-java/src/test/java/no/uib/cipr/matrix/RQTest###testFactor",
        "generated_path": "RQ_factor.java",
        "Compile_result": 1,
        "Test_result": 0,
        "Gen_Test": "package no.uib.cipr.matrix;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.io.Reader;\nimport java.io.StringReader;\nimport no.uib.cipr.matrix.DenseMatrix;\nimport no.uib.cipr.matrix.DenseVector;\nimport no.uib.cipr.matrix.DenseVectorSub;\nimport no.uib.cipr.matrix.Diag;\nimport no.uib.cipr.matrix.LowerSPDBandMatrix;\nimport no.uib.cipr.matrix.LowerSPDDenseMatrix;\nimport no.uib.cipr.matrix.LowerSymmBandMatrix;\nimport no.uib.cipr.matrix.LowerSymmDenseMatrix;\nimport no.uib.cipr.matrix.LowerTriangBandMatrix;\nimport no.uib.cipr.matrix.LowerTriangDenseMatrix;\nimport no.uib.cipr.matrix.Matrix;\nimport no.uib.cipr.matrix.PermutationMatrix;\nimport no.uib.cipr.matrix.RQ;\nimport no.uib.cipr.matrix.SPDTridiagMatrix;\nimport no.uib.cipr.matrix.SymmTridiagMatrix;\nimport no.uib.cipr.matrix.TridiagMatrix;\nimport no.uib.cipr.matrix.UnitLowerTriangPackMatrix;\nimport no.uib.cipr.matrix.UnitUpperTriangDenseMatrix;\nimport no.uib.cipr.matrix.UnitUpperTriangPackMatrix;\nimport no.uib.cipr.matrix.UpperSPDBandMatrix;\nimport no.uib.cipr.matrix.UpperSPDPackMatrix;\nimport no.uib.cipr.matrix.UpperSymmBandMatrix;\nimport no.uib.cipr.matrix.UpperTriangDenseMatrix;\nimport no.uib.cipr.matrix.UpperTriangPackMatrix;\nimport no.uib.cipr.matrix.Vector;\nimport no.uib.cipr.matrix.io.MatrixVectorReader;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.System;\nimport org.evosuite.runtime.testdata.EvoSuiteFile;\nimport org.evosuite.runtime.testdata.FileSystemHandling;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class RQ_factor extends RQ_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    UnitUpperTriangPackMatrix unitUpperTriangPackMatrix0 = new UnitUpperTriangPackMatrix(22);\n    LowerSPDDenseMatrix lowerSPDDenseMatrix0 = new LowerSPDDenseMatrix(unitUpperTriangPackMatrix0);\n    LowerSPDDenseMatrix lowerSPDDenseMatrix1 = lowerSPDDenseMatrix0.copy();\n    RQ.factorize(lowerSPDDenseMatrix1);\n    DenseMatrix denseMatrix0 = new DenseMatrix(lowerSPDDenseMatrix1, true);\n    RQ rQ0 = RQ.factorize(denseMatrix0);\n    UpperTriangDenseMatrix upperTriangDenseMatrix0 = new UpperTriangDenseMatrix(22);\n    RQ rQ1 = rQ0.factor(denseMatrix0);\n    rQ1.factor(denseMatrix0);\n}\n}"
    },
    {
        "original_path": "fommil_matrix-toolkits-java###fommil_matrix-toolkits-java/src/test/java/no/uib/cipr/matrix/LQTest###testFactor",
        "generated_path": "LQ_factor.java",
        "Compile_result": 1,
        "Test_result": 0,
        "Gen_Test": "package no.uib.cipr.matrix;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.io.StringReader;\nimport no.uib.cipr.matrix.BandMatrix;\nimport no.uib.cipr.matrix.DenseMatrix;\nimport no.uib.cipr.matrix.DenseVector;\nimport no.uib.cipr.matrix.DenseVectorSub;\nimport no.uib.cipr.matrix.Diag;\nimport no.uib.cipr.matrix.LQ;\nimport no.uib.cipr.matrix.LowerSPDPackMatrix;\nimport no.uib.cipr.matrix.LowerTriangBandMatrix;\nimport no.uib.cipr.matrix.LowerTriangDenseMatrix;\nimport no.uib.cipr.matrix.LowerTriangPackMatrix;\nimport no.uib.cipr.matrix.Matrix;\nimport no.uib.cipr.matrix.PermutationMatrix;\nimport no.uib.cipr.matrix.SymmTridiagMatrix;\nimport no.uib.cipr.matrix.UnitLowerTriangDenseMatrix;\nimport no.uib.cipr.matrix.UnitUpperTriangBandMatrix;\nimport no.uib.cipr.matrix.UpperSymmBandMatrix;\nimport no.uib.cipr.matrix.UpperTriangDenseMatrix;\nimport no.uib.cipr.matrix.UpperTriangPackMatrix;\nimport no.uib.cipr.matrix.Vector;\nimport no.uib.cipr.matrix.io.MatrixVectorReader;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.System;\nimport org.evosuite.runtime.testdata.EvoSuiteFile;\nimport org.evosuite.runtime.testdata.FileSystemHandling;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class LQ_factor extends LQ_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    DenseMatrix denseMatrix0 = new DenseMatrix(977, 977);\n    FileSystemHandling.appendLineToFile((EvoSuiteFile) null, \"ia\");\n    LQ lQ0 = new LQ(977, 977);\n    lQ0.getL();\n    // Undeclared exception!\n    lQ0.factor(denseMatrix0);\n}\n}"
    },
    {
        "original_path": "fommil_matrix-toolkits-java###fommil_matrix-toolkits-java/src/test/java/no/uib/cipr/matrix/QLTest###testFactor",
        "generated_path": "QL_factor.java",
        "Compile_result": 1,
        "Test_result": 0,
        "Gen_Test": "package no.uib.cipr.matrix;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.io.StringReader;\nimport java.util.function.Consumer;\nimport no.uib.cipr.matrix.DenseMatrix;\nimport no.uib.cipr.matrix.DenseVector;\nimport no.uib.cipr.matrix.DenseVectorSub;\nimport no.uib.cipr.matrix.Diag;\nimport no.uib.cipr.matrix.LowerTriangBandMatrix;\nimport no.uib.cipr.matrix.LowerTriangDenseMatrix;\nimport no.uib.cipr.matrix.Matrix;\nimport no.uib.cipr.matrix.PermutationMatrix;\nimport no.uib.cipr.matrix.QL;\nimport no.uib.cipr.matrix.SPDTridiagMatrix;\nimport no.uib.cipr.matrix.SymmTridiagMatrix;\nimport no.uib.cipr.matrix.UnitLowerTriangDenseMatrix;\nimport no.uib.cipr.matrix.UpLo;\nimport no.uib.cipr.matrix.UpperSymmDenseMatrix;\nimport no.uib.cipr.matrix.UpperTriangBandMatrix;\nimport no.uib.cipr.matrix.UpperTriangDenseMatrix;\nimport no.uib.cipr.matrix.Vector;\nimport no.uib.cipr.matrix.io.MatrixVectorReader;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.System;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class QL_factor extends QL_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    UpperTriangDenseMatrix upperTriangDenseMatrix0 = new UpperTriangDenseMatrix(1);\n    assertTrue(upperTriangDenseMatrix0.isSquare());\n    assertEquals(1, upperTriangDenseMatrix0.numColumns());\n    assertEquals(1, upperTriangDenseMatrix0.numRows());\n    assertNotNull(upperTriangDenseMatrix0);\n    QL qL0 = QL.factorize(upperTriangDenseMatrix0);\n    assertTrue(upperTriangDenseMatrix0.isSquare());\n    assertEquals(1, upperTriangDenseMatrix0.numColumns());\n    assertEquals(1, upperTriangDenseMatrix0.numRows());\n    assertNotNull(qL0);\n    DenseMatrix denseMatrix0 = new DenseMatrix(upperTriangDenseMatrix0, true);\n    assertTrue(upperTriangDenseMatrix0.isSquare());\n    assertEquals(1, upperTriangDenseMatrix0.numColumns());\n    assertEquals(1, upperTriangDenseMatrix0.numRows());\n    assertTrue(denseMatrix0.isSquare());\n    assertEquals(1, denseMatrix0.numRows());\n    assertEquals(1, denseMatrix0.numColumns());\n    assertNotNull(denseMatrix0);\n    QL qL1 = qL0.factor(denseMatrix0);\n    assertTrue(upperTriangDenseMatrix0.isSquare());\n    assertEquals(1, upperTriangDenseMatrix0.numColumns());\n    assertEquals(1, upperTriangDenseMatrix0.numRows());\n    assertTrue(denseMatrix0.isSquare());\n    assertEquals(1, denseMatrix0.numRows());\n    assertEquals(1, denseMatrix0.numColumns());\n    assertNotNull(qL1);\n    assertSame(qL0, qL1);\n    assertSame(qL1, qL0);\n    LowerTriangDenseMatrix lowerTriangDenseMatrix0 = qL1.getL();\n    assertTrue(upperTriangDenseMatrix0.isSquare());\n    assertEquals(1, upperTriangDenseMatrix0.numColumns());\n    assertEquals(1, upperTriangDenseMatrix0.numRows());\n    assertTrue(denseMatrix0.isSquare());\n    assertEquals(1, denseMatrix0.numRows());\n    assertEquals(1, denseMatrix0.numColumns());\n    assertEquals(1, lowerTriangDenseMatrix0.numColumns());\n    assertTrue(lowerTriangDenseMatrix0.isSquare());\n    assertEquals(1, lowerTriangDenseMatrix0.numRows());\n    assertNotNull(lowerTriangDenseMatrix0);\n    assertSame(qL0, qL1);\n    assertSame(qL1, qL0);\n}\n}"
    },
    {
        "original_path": "Stratio_stratio-connector-commons###Stratio_stratio-connector-commons/connector-commons/src/test/java/com/stratio/connector/commons/util/ManifestUtilTest###testGetConectorName",
        "generated_path": "ManifestUtil_getConectorName.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.stratio.connector.commons.util;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.stratio.connector.commons.util.ManifestUtil;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class ManifestUtil_getConectorName extends ManifestUtil_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test3() throws Throwable {\n    // Undeclared exception!\n    try {\n        ManifestUtil.getConectorName((String) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        //\n        // no message in exception (getMessage() returned null)\n        //\n    }\n}\n}"
    },
    {
        "original_path": "psjava_psjava###psjava_psjava/src/test/java/org/psjava/formula/MaxInIterableTest###testMax",
        "generated_path": "MaxInIterable_max.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.psjava.formula;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.util.ArrayDeque;\nimport java.util.ArrayList;\nimport java.util.Comparator;\nimport java.util.ConcurrentModificationException;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.PriorityQueue;\nimport java.util.SortedSet;\nimport java.util.Stack;\nimport java.util.TreeSet;\nimport java.util.Vector;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.junit.runner.RunWith;\nimport org.psjava.formula.MaxInIterable;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class MaxInIterable_max extends MaxInIterable_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test0() throws Throwable {\n    Vector<Integer> vector0 = new Vector<Integer>(1, 1);\n    Integer integer0 = new Integer((-1));\n    vector0.add(integer0);\n    vector0.add(integer0);\n    Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());\n    doReturn(0).when(comparator0).compare(anyInt(), anyInt());\n    Integer integer1 = MaxInIterable.max((Iterable<Integer>) vector0, comparator0);\n    assertTrue(vector0.contains(integer1));\n}\n}"
    },
    {
        "original_path": "psjava_psjava###psjava_psjava/src/test/java/org/psjava/ds/numbersystrem/FractionNumberSystemTest###testAreEqual",
        "generated_path": "FractionNumberSystem_areEqual.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.psjava.ds.numbersystrem;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.junit.runner.RunWith;\nimport org.psjava.ds.numbersystrem.Fraction;\nimport org.psjava.ds.numbersystrem.FractionNumberSystem;\nimport org.psjava.ds.numbersystrem.IntegerDivisableNumberSystem;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class FractionNumberSystem_areEqual extends FractionNumberSystem_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    IntegerDivisableNumberSystem<Fraction<Object>> integerDivisableNumberSystem0 = (IntegerDivisableNumberSystem<Fraction<Object>>) mock(IntegerDivisableNumberSystem.class, new ViolatedAssumptionAnswer());\n    doReturn((Object) null, (Object) null).when(integerDivisableNumberSystem0).multiply(nullable(org.psjava.ds.numbersystrem.Fraction.class), nullable(org.psjava.ds.numbersystrem.Fraction.class));\n    doReturn(false).when(integerDivisableNumberSystem0).areEqual(nullable(org.psjava.ds.numbersystrem.Fraction.class), nullable(org.psjava.ds.numbersystrem.Fraction.class));\n    FractionNumberSystem<Fraction<Object>> fractionNumberSystem0 = FractionNumberSystem.newInstance(integerDivisableNumberSystem0);\n    Fraction<Fraction<Object>> fraction0 = (Fraction<Fraction<Object>>) mock(Fraction.class, new ViolatedAssumptionAnswer());\n    boolean boolean0 = fractionNumberSystem0.areEqual(fraction0, fraction0);\n    assertFalse(boolean0);\n}\n}"
    },
    {
        "original_path": "psjava_psjava###psjava_psjava/src/test/java/org/psjava/algo/graph/DistanceCalculatorInRootedTreeTest###testCalc",
        "generated_path": "DistanceCalculatorInRootedTree_calc.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.psjava.algo.graph;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.util.function.Function;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.junit.runner.RunWith;\nimport org.psjava.algo.graph.DistanceCalculatorInRootedTree;\nimport org.psjava.algo.graph.LowestCommonAncestorAlgorithm;\nimport org.psjava.ds.SimpleDirectedWeightedEdge;\nimport org.psjava.ds.graph.RootedTree;\nimport org.psjava.ds.map.MutableMap;\nimport org.psjava.ds.map.MutableMapFactory;\nimport org.psjava.ds.numbersystrem.AddableNumberSystem;\nimport org.psjava.ds.numbersystrem.IntegerNumberSystem;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class DistanceCalculatorInRootedTree_calc extends DistanceCalculatorInRootedTree_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void DistanceCalculatorInRootedTree_calc() throws Throwable {\n    IntegerNumberSystem integerNumberSystem0 = IntegerNumberSystem.getInstance();\n    MutableMapFactory mutableMapFactory0 = mock(MutableMapFactory.class, new ViolatedAssumptionAnswer());\n    doReturn((MutableMap) null, (MutableMap) null, (MutableMap) null).when(mutableMapFactory0).create();\n    DistanceCalculatorInRootedTree distanceCalculatorInRootedTree0 = new DistanceCalculatorInRootedTree((LowestCommonAncestorAlgorithm) null, mutableMapFactory0);\n    // Undeclared exception!\n    try {\n        distanceCalculatorInRootedTree0.calc((RootedTree<Object, SimpleDirectedWeightedEdge<Object, Integer>>) null, (Function<SimpleDirectedWeightedEdge<Object, Integer>, Integer>) null, (AddableNumberSystem<Integer>) integerNumberSystem0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        //\n        // no message in exception (getMessage() returned null)\n        //\n        verifyException(\"org.psjava.algo.graph.DistanceCalculatorInRootedTree\", e);\n    }\n}\n}"
    },
    {
        "original_path": "psjava_psjava###psjava_psjava/src/test/java/org/psjava/ds/numbersystrem/GuavasLongMathTest###testCheckedAdd",
        "generated_path": "GuavasLongMath_checkedAdd.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.psjava.ds.numbersystrem;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport org.psjava.ds.numbersystrem.GuavasLongMath;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class GuavasLongMath_checkedAdd extends GuavasLongMath_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    long long0 = GuavasLongMath.checkedAdd((-9223372036854775808L), 0L);\n    assertEquals((-9223372036854775808L), long0);\n}\n}"
    },
    {
        "original_path": "psjava_psjava###psjava_psjava/src/test/java/org/psjava/ds/map/hashtable/OpenAddressingHashTableMapTest###testCalcBucketSize",
        "generated_path": "OpenAddressingHashTableMap_calcBucketSize.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.psjava.ds.map.hashtable;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.lang.reflect.Array;\nimport java.util.Iterator;\nimport java.util.Spliterator;\nimport java.util.function.Consumer;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.junit.runner.RunWith;\nimport org.psjava.ds.KeyValuePair;\nimport org.psjava.ds.map.hashtable.HashProber;\nimport org.psjava.ds.map.hashtable.OpenAddressingHashTableMap;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class OpenAddressingHashTableMap_calcBucketSize extends OpenAddressingHashTableMap_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    HashProber hashProber0 = mock(HashProber.class, new ViolatedAssumptionAnswer());\n    OpenAddressingHashTableMap<OpenAddressingHashTableMap.Entry<String, Object>, String> openAddressingHashTableMap0 = new OpenAddressingHashTableMap<OpenAddressingHashTableMap.Entry<String, Object>, String>(hashProber0, 700);\n    assertTrue(openAddressingHashTableMap0.isEmpty());\n    assertEquals(0, openAddressingHashTableMap0.size());\n    assertNotNull(openAddressingHashTableMap0);\n    openAddressingHashTableMap0.load = (-18);\n    assertEquals((-18), openAddressingHashTableMap0.size());\n    assertFalse(openAddressingHashTableMap0.isEmpty());\n    OpenAddressingHashTableMap.Entry<String, Object> openAddressingHashTableMap_Entry0 = new OpenAddressingHashTableMap.Entry<String, Object>(\"I\", openAddressingHashTableMap0, (-18));\n    assertEquals((-18), openAddressingHashTableMap0.size());\n    assertFalse(openAddressingHashTableMap0.isEmpty());\n    assertNotNull(openAddressingHashTableMap_Entry0);\n    String string0 = openAddressingHashTableMap_Entry0.toString();\n    assertEquals((-18), openAddressingHashTableMap0.size());\n    assertFalse(openAddressingHashTableMap0.isEmpty());\n    assertNotNull(string0);\n    openAddressingHashTableMap0.addOrReplace(openAddressingHashTableMap_Entry0, \"\");\n    assertEquals((-18), openAddressingHashTableMap0.size());\n    assertFalse(openAddressingHashTableMap0.isEmpty());\n    OpenAddressingHashTableMap.Entry<String, Object> openAddressingHashTableMap_Entry1 = new OpenAddressingHashTableMap.Entry<String, Object>(\"I\", openAddressingHashTableMap0, 700);\n    assertFalse(openAddressingHashTableMap_Entry1.equals((Object) openAddressingHashTableMap_Entry0));\n    assertEquals((-18), openAddressingHashTableMap0.size());\n    assertFalse(openAddressingHashTableMap0.isEmpty());\n    assertNotNull(openAddressingHashTableMap_Entry1);\n    String string1 = openAddressingHashTableMap_Entry1.getKey();\n    assertEquals(\"I\", string1);\n    assertFalse(openAddressingHashTableMap_Entry1.equals((Object) openAddressingHashTableMap_Entry0));\n    assertFalse(string1.equals((Object) string0));\n    assertNotSame(openAddressingHashTableMap_Entry1, openAddressingHashTableMap_Entry0);\n    assertEquals((-18), openAddressingHashTableMap0.size());\n    assertFalse(openAddressingHashTableMap0.isEmpty());\n    assertNotNull(string1);\n    openAddressingHashTableMap_Entry1.keyOrNull = \"I\";\n    assertEquals((-18), openAddressingHashTableMap0.size());\n    assertFalse(openAddressingHashTableMap0.isEmpty());\n    openAddressingHashTableMap_Entry1.keyHash = 700;\n    assertEquals((-18), openAddressingHashTableMap0.size());\n    assertFalse(openAddressingHashTableMap0.isEmpty());\n    OpenAddressingHashTableMap openAddressingHashTableMap1 = (OpenAddressingHashTableMap) openAddressingHashTableMap_Entry1.getValue();\n    assertFalse(openAddressingHashTableMap_Entry1.equals((Object) openAddressingHashTableMap_Entry0));\n    assertNotSame(openAddressingHashTableMap_Entry1, openAddressingHashTableMap_Entry0);\n    assertEquals((-18), openAddressingHashTableMap0.size());\n    assertFalse(openAddressingHashTableMap0.isEmpty());\n    assertFalse(openAddressingHashTableMap1.isEmpty());\n    assertEquals((-18), openAddressingHashTableMap1.size());\n    assertNotNull(openAddressingHashTableMap1);\n    openAddressingHashTableMap0.remove(openAddressingHashTableMap_Entry1);\n    assertFalse(openAddressingHashTableMap_Entry1.equals((Object) openAddressingHashTableMap_Entry0));\n    assertNotSame(openAddressingHashTableMap_Entry1, openAddressingHashTableMap_Entry0);\n    assertEquals((-18), openAddressingHashTableMap0.size());\n    assertFalse(openAddressingHashTableMap0.isEmpty());\n    Spliterator<KeyValuePair<OpenAddressingHashTableMap.Entry<String, Object>, String>> spliterator0 = openAddressingHashTableMap0.spliterator();\n    assertEquals((-18), openAddressingHashTableMap0.size());\n    assertFalse(openAddressingHashTableMap0.isEmpty());\n    assertNotNull(spliterator0);\n    boolean boolean0 = openAddressingHashTableMap0.isEmpty();\n    assertFalse(boolean0);\n    assertEquals((-18), openAddressingHashTableMap0.size());\n    assertFalse(openAddressingHashTableMap0.isEmpty());\n    HashProber hashProber1 = mock(HashProber.class, new ViolatedAssumptionAnswer());\n    OpenAddressingHashTableMap<Object, Integer> openAddressingHashTableMap2 = new OpenAddressingHashTableMap<Object, Integer>(hashProber1, 414);\n    assertTrue(openAddressingHashTableMap2.isEmpty());\n    assertEquals(0, openAddressingHashTableMap2.size());\n    assertNotNull(openAddressingHashTableMap2);\n    openAddressingHashTableMap2.load = 700;\n    assertEquals(700, openAddressingHashTableMap2.size());\n    assertFalse(openAddressingHashTableMap2.isEmpty());\n    openAddressingHashTableMap2.remove(openAddressingHashTableMap0);\n    assertEquals((-18), openAddressingHashTableMap0.size());\n    assertFalse(openAddressingHashTableMap0.isEmpty());\n    assertEquals(700, openAddressingHashTableMap2.size());\n    assertFalse(openAddressingHashTableMap2.isEmpty());\n    boolean boolean1 = openAddressingHashTableMap2.isEmpty();\n    assertFalse(boolean1);\n    assertTrue(boolean1 == boolean0);\n    assertEquals(700, openAddressingHashTableMap2.size());\n    assertFalse(openAddressingHashTableMap2.isEmpty());\n    HashProber hashProber2 = mock(HashProber.class, new ViolatedAssumptionAnswer());\n    OpenAddressingHashTableMap<OpenAddressingHashTableMap.Entry<Integer, Integer>, OpenAddressingHashTableMap.Entry<Object, Object>> openAddressingHashTableMap3 = new OpenAddressingHashTableMap<OpenAddressingHashTableMap.Entry<Integer, Integer>, OpenAddressingHashTableMap.Entry<Object, Object>>(hashProber2, 414);\n    assertTrue(openAddressingHashTableMap3.isEmpty());\n    assertEquals(0, openAddressingHashTableMap3.size());\n    assertNotNull(openAddressingHashTableMap3);\n    int int0 = openAddressingHashTableMap3.size();\n    assertEquals(0, int0);\n    assertTrue(openAddressingHashTableMap3.isEmpty());\n    assertEquals(0, openAddressingHashTableMap3.size());\n    HashProber hashProber3 = mock(HashProber.class, new ViolatedAssumptionAnswer());\n    OpenAddressingHashTableMap<String, Integer> openAddressingHashTableMap4 = new OpenAddressingHashTableMap<String, Integer>(hashProber3, 700);\n    assertTrue(openAddressingHashTableMap4.isEmpty());\n    assertEquals(0, openAddressingHashTableMap4.size());\n    assertNotNull(openAddressingHashTableMap4);\n    boolean boolean2 = openAddressingHashTableMap4.equals(openAddressingHashTableMap3);\n    assertTrue(boolean2);\n    assertFalse(boolean2 == boolean1);\n    assertFalse(boolean2 == boolean0);\n    assertTrue(openAddressingHashTableMap3.isEmpty());\n    assertEquals(0, openAddressingHashTableMap3.size());\n    assertTrue(openAddressingHashTableMap4.isEmpty());\n    assertEquals(0, openAddressingHashTableMap4.size());\n    boolean boolean3 = openAddressingHashTableMap4.containsKey((String) null);\n    assertFalse(boolean3);\n    assertFalse(boolean3 == boolean2);\n    assertTrue(boolean3 == boolean1);\n    assertTrue(boolean3 == boolean0);\n    assertTrue(openAddressingHashTableMap4.isEmpty());\n    assertEquals(0, openAddressingHashTableMap4.size());\n    int int1 = OpenAddressingHashTableMap.calcBucketSize(414);\n    assertEquals(1024, int1);\n    assertFalse(int1 == int0);\n    OpenAddressingHashTableMap<OpenAddressingHashTableMap.Entry<String, Object>, Object> openAddressingHashTableMap5 = new OpenAddressingHashTableMap<OpenAddressingHashTableMap.Entry<String, Object>, Object>((HashProber) null, 700);\n    assertEquals(0, openAddressingHashTableMap5.size());\n    assertTrue(openAddressingHashTableMap5.isEmpty());\n    assertNotNull(openAddressingHashTableMap5);\n    boolean boolean4 = openAddressingHashTableMap5.isEmpty();\n    assertTrue(boolean4);\n    assertFalse(boolean4 == boolean1);\n    assertFalse(boolean4 == boolean3);\n    assertFalse(boolean4 == boolean0);\n    assertTrue(boolean4 == boolean2);\n    assertEquals(0, openAddressingHashTableMap5.size());\n    assertTrue(openAddressingHashTableMap5.isEmpty());\n    OpenAddressingHashTableMap<Object, OpenAddressingHashTableMap.Entry<String, Object>> openAddressingHashTableMap6 = new OpenAddressingHashTableMap<Object, OpenAddressingHashTableMap.Entry<String, Object>>((HashProber) null, 700);\n    assertEquals(0, openAddressingHashTableMap6.size());\n    assertTrue(openAddressingHashTableMap6.isEmpty());\n    assertNotNull(openAddressingHashTableMap6);\n    // Undeclared exception!\n    openAddressingHashTableMap6.hashCode();\n}\n}"
    },
    {
        "original_path": "blueconic_browscap-java###blueconic_browscap-java/src/test/java/com/blueconic/browscap/impl/RuleTest###testRequires",
        "generated_path": "Rule_requires.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.blueconic.browscap.impl;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.blueconic.browscap.BrowsCapField;\nimport com.blueconic.browscap.Capabilities;\nimport com.blueconic.browscap.impl.CapabilitiesImpl;\nimport com.blueconic.browscap.impl.Literal;\nimport com.blueconic.browscap.impl.Mapper;\nimport com.blueconic.browscap.impl.Rule;\nimport com.blueconic.browscap.impl.SearchableString;\nimport java.util.LinkedList;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class Rule_requires extends Rule_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test28() throws Throwable {\n    Literal[] literalArray0 = new Literal[21];\n    Literal literal0 = new Literal(\"g|)L)BJO\\\"0M#[@s@\", 0);\n    literalArray0[4] = literal0;\n    String[] stringArray0 = new String[9];\n    LinkedList<BrowsCapField> linkedList0 = new LinkedList<BrowsCapField>();\n    Mapper mapper0 = new Mapper(linkedList0);\n    CapabilitiesImpl capabilitiesImpl0 = new CapabilitiesImpl(stringArray0, mapper0);\n    Rule rule0 = new Rule((Literal) null, literalArray0, literalArray0[5], \"g|)L)BJO\\\"0M#[@s@\", capabilitiesImpl0);\n    boolean boolean0 = rule0.requires(\"g|)L)BJO\\\"0M#[@s@\");\n    assertTrue(boolean0);\n}\n}"
    },
    {
        "original_path": "blueconic_browscap-java###blueconic_browscap-java/src/test/java/com/blueconic/browscap/impl/UserAgentFileParserTest###testCreateRule",
        "generated_path": "UserAgentFileParser_createRule.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.blueconic.browscap.impl;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.blueconic.browscap.BrowsCapField;\nimport com.blueconic.browscap.Capabilities;\nimport com.blueconic.browscap.UserAgentParser;\nimport com.blueconic.browscap.impl.CapabilitiesImpl;\nimport com.blueconic.browscap.impl.Literal;\nimport com.blueconic.browscap.impl.LiteralDomain;\nimport com.blueconic.browscap.impl.Mapper;\nimport com.blueconic.browscap.impl.Rule;\nimport com.blueconic.browscap.impl.UserAgentFileParser;\nimport java.io.Reader;\nimport java.io.StringReader;\nimport java.util.Collection;\nimport java.util.ConcurrentModificationException;\nimport java.util.HashMap;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class UserAgentFileParser_createRule extends UserAgentFileParser_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    HashMap<BrowsCapField, BrowsCapField> hashMap0 = new HashMap<BrowsCapField, BrowsCapField>();\n    BrowsCapField browsCapField0 = BrowsCapField.AOL_VERSION;\n    BrowsCapField browsCapField1 = hashMap0.put(browsCapField0, browsCapField0);\n    Set<BrowsCapField> set0 = hashMap0.keySet();\n    BrowsCapField browsCapField2 = BrowsCapField.BROWSER;\n    hashMap0.put(browsCapField2, browsCapField1);\n    UserAgentFileParser userAgentFileParser0 = new UserAgentFileParser(set0);\n    String[] stringArray0 = new String[1];\n    Mapper mapper0 = new Mapper(set0);\n    CapabilitiesImpl capabilitiesImpl0 = new CapabilitiesImpl(stringArray0, mapper0);\n    Rule rule0 = userAgentFileParser0.createRule(\"*\", capabilitiesImpl0);\n    assertNotNull(rule0);\n}\n}"
    },
    {
        "original_path": "blueconic_browscap-java###blueconic_browscap-java/src/test/java/com/blueconic/browscap/impl/UserAgentFileParserTest###testGetValue",
        "generated_path": "UserAgentFileParser_getValue.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.blueconic.browscap.impl;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.blueconic.browscap.BrowsCapField;\nimport com.blueconic.browscap.Capabilities;\nimport com.blueconic.browscap.UserAgentParser;\nimport com.blueconic.browscap.impl.CapabilitiesImpl;\nimport com.blueconic.browscap.impl.Literal;\nimport com.blueconic.browscap.impl.LiteralDomain;\nimport com.blueconic.browscap.impl.Mapper;\nimport com.blueconic.browscap.impl.Rule;\nimport com.blueconic.browscap.impl.UserAgentFileParser;\nimport java.io.Reader;\nimport java.io.StringReader;\nimport java.util.Collection;\nimport java.util.ConcurrentModificationException;\nimport java.util.HashMap;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class UserAgentFileParser_getValue extends UserAgentFileParser_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    LinkedList<BrowsCapField> linkedList0 = new LinkedList<BrowsCapField>();\n    UserAgentFileParser userAgentFileParser0 = new UserAgentFileParser(linkedList0);\n    String string0 = userAgentFileParser0.getValue(\" %_ZJ)[xn]Ei\");\n    assertNotNull(string0);\n    assertEquals(\"%_ZJ)[xn]Ei\", string0);\n}\n}"
    },
    {
        "original_path": "blueconic_browscap-java###blueconic_browscap-java/src/test/java/com/blueconic/browscap/impl/SearchableStringTest###testGetIndices",
        "generated_path": "SearchableString_getIndices.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.blueconic.browscap.impl;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.blueconic.browscap.impl.Literal;\nimport com.blueconic.browscap.impl.SearchableString;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class SearchableString_getIndices extends SearchableString_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    SearchableString searchableString0 = new SearchableString(\"com.blQeconichbrocsgap]im5l.Liteal\", 1559);\n    Literal literal0 = new Literal(\"5\", 54);\n    int[] intArray0 = searchableString0.getIndices(literal0);\n    assertArrayEquals(new int[] { 25 }, intArray0);\n    assertNotNull(intArray0);\n}\n}"
    },
    {
        "original_path": "twilio_twilio-java###twilio_twilio-java/src/test/java/com/twilio/jwt/taskrouter/PolicyUtilsTest###testDefaultWorkerPolicies",
        "generated_path": "PolicyUtils_defaultWorkerPolicies.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "package com.twilio.jwt.taskrouter;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport com.twilio.jwt.taskrouter.Policy;\nimport com.twilio.jwt.taskrouter.PolicyUtils;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class PolicyUtils_defaultWorkerPolicies extends PolicyUtils_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test1() throws Throwable {\n    List<Policy> list0 = PolicyUtils.defaultWorkerPolicies(\"4a>X5a)_v'g|*c;(\", \"https://event-bridge.twilio.com/v1/wschannels\");\n    assertEquals(4, list0.size());\n}\n}"
    },
    {
        "original_path": "twilio_twilio-java###twilio_twilio-java/src/test/java/com/twilio/http/HttpUtilityTest###getUserAgentStringTest",
        "generated_path": "HttpUtility_getUserAgentString.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "package com.twilio.http;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport com.twilio.http.HttpUtility;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class HttpUtility_getUserAgentString extends HttpUtility_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test2() throws Throwable {\n    String string0 = HttpUtility.getUserAgentString((List<String>) null);\n    assertEquals(\"twilio-java/9.4.0 (Windows 11 amd64) java/1.8.0_371\", string0);\n}\n}"
    },
    {
        "original_path": "twilio_twilio-java###twilio_twilio-java/src/test/java/com/twilio/http/RequestTest###testConstructURL",
        "generated_path": "Request_constructURL.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "package com.twilio.http;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.twilio.http.HttpMethod;\nimport com.twilio.http.Request;\nimport java.net.URL;\nimport java.time.Clock;\nimport java.time.LocalDate;\nimport java.time.LocalDateTime;\nimport java.time.LocalTime;\nimport java.time.ZoneId;\nimport java.time.ZoneOffset;\nimport java.time.ZonedDateTime;\nimport java.util.Collection;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.Set;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.time.MockClock;\nimport org.evosuite.runtime.mock.java.time.MockLocalDate;\nimport org.evosuite.runtime.mock.java.time.MockLocalDateTime;\nimport org.evosuite.runtime.mock.java.time.MockLocalTime;\nimport org.evosuite.runtime.mock.java.time.MockZonedDateTime;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class Request_constructURL extends Request_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test21() throws Throwable {\n    HttpMethod httpMethod0 = HttpMethod.OPTIONS;\n    Request request0 = new Request(httpMethod0, \"KG\", \"\", \"\");\n    request0.addQueryParam((String) null, \"KG\");\n    // Undeclared exception!\n    try {\n        request0.constructURL();\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        //\n        // no message in exception (getMessage() returned null)\n        //\n    }\n}\n}"
    },
    {
        "original_path": "twilio_twilio-java###twilio_twilio-java/src/test/java/com/twilio/security/RequestValidatorTest###testValidateBody",
        "generated_path": "RequestValidator_validateBody.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "package com.twilio.security;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.twilio.security.RequestValidator;\nimport java.net.URISyntaxException;\nimport java.util.Map;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class RequestValidator_validateBody extends RequestValidator_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    RequestValidator requestValidator0 = new RequestValidator(\"@'\\\":y\\\"l;a%ly8UZ\");\n    boolean boolean0 = requestValidator0.validateBody(\"@'\\\":y\\\"l;a%ly8UZ\", \"K%\");\n    assertFalse(boolean0);\n}\n}"
    },
    {
        "original_path": "twilio_twilio-java###twilio_twilio-java/src/test/java/com/twilio/http/TwilioRestClientTest###testRequest",
        "generated_path": "TwilioRestClient_request.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "package com.twilio.http;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.twilio.http.HttpClient;\nimport com.twilio.http.Request;\nimport com.twilio.http.Response;\nimport com.twilio.http.TwilioRestClient;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class TwilioRestClient_request extends TwilioRestClient_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    TwilioRestClient.Builder twilioRestClient_Builder0 = new TwilioRestClient.Builder(\"l+[,i3e0*1tN6X`d\", \"l+[,i3e0*1tN6X`d\");\n    HttpClient httpClient0 = mock(HttpClient.class, new ViolatedAssumptionAnswer());\n    doReturn((Response) null).when(httpClient0).reliableRequest(any(com.twilio.http.Request.class));\n    TwilioRestClient.Builder twilioRestClient_Builder1 = twilioRestClient_Builder0.httpClient(httpClient0);\n    TwilioRestClient twilioRestClient0 = new TwilioRestClient(twilioRestClient_Builder1);\n    Request request0 = mock(Request.class, new ViolatedAssumptionAnswer());\n    Response response0 = twilioRestClient0.request(request0);\n    assertNull(response0);\n}\n}"
    },
    {
        "original_path": "twilio_twilio-java###twilio_twilio-java/src/test/java/com/twilio/security/RequestValidatorTest###testValidate",
        "generated_path": "RequestValidator_validate.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "package com.twilio.security;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.twilio.security.RequestValidator;\nimport java.net.URISyntaxException;\nimport java.util.Map;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class RequestValidator_validate extends RequestValidator_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    RequestValidator requestValidator0 = new RequestValidator(\"@'\\\":y\\\"l;a%ly8UZ\");\n    boolean boolean0 = requestValidator0.validate(\"tV:r\", (Map<String, String>) null, \"\");\n    assertFalse(boolean0);\n}\n}"
    },
    {
        "original_path": "twilio_twilio-java###twilio_twilio-java/src/test/java/com/twilio/jwt/taskrouter/PolicyUtilsTest###testDefaultEventBridgePolicies",
        "generated_path": "PolicyUtils_defaultEventBridgePolicies.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "package com.twilio.jwt.taskrouter;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport com.twilio.jwt.taskrouter.Policy;\nimport com.twilio.jwt.taskrouter.PolicyUtils;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class PolicyUtils_defaultEventBridgePolicies extends PolicyUtils_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test0() throws Throwable {\n    List<Policy> list0 = PolicyUtils.defaultEventBridgePolicies(\")b^5b??<!+zQ\", \"/\");\n    assertFalse(list0.isEmpty());\n}\n}"
    },
    {
        "original_path": "twilio_twilio-java###twilio_twilio-java/src/test/java/com/twilio/jwt/taskrouter/PolicyTest###testToJson",
        "generated_path": "Policy_toJson.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "package com.twilio.jwt.taskrouter;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport com.twilio.http.HttpMethod;\nimport com.twilio.jwt.taskrouter.FilterRequirement;\nimport com.twilio.jwt.taskrouter.Policy;\nimport java.util.Map;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class Policy_toJson extends Policy_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test18() throws Throwable {\n    Policy.Builder policy_Builder0 = new Policy.Builder();\n    Policy policy0 = policy_Builder0.build();\n    String string0 = policy0.toJson();\n    assertEquals(\"{\\\"allow\\\":true,\\\"method\\\":\\\"GET\\\"}\", string0);\n}\n}"
    },
    {
        "original_path": "kurbatov_firmata4j###kurbatov_firmata4j/src/test/java/org/firmata4j/firmata/fsm/FiniteStateMachineTest###testHandle",
        "generated_path": "FiniteStateMachine_handle.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.firmata4j.fsm;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.util.Map;\nimport java.util.concurrent.Executor;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.lang.MockThread;\nimport org.firmata4j.Consumer;\nimport org.firmata4j.firmata.FirmataWatchdog;\nimport org.firmata4j.firmata.parser.ParsingAnalogMappingState;\nimport org.firmata4j.firmata.parser.ParsingAnalogMessageState;\nimport org.firmata4j.firmata.parser.ParsingCapabilityResponseState;\nimport org.firmata4j.firmata.parser.ParsingFirmwareMessageState;\nimport org.firmata4j.firmata.parser.ParsingI2CMessageState;\nimport org.firmata4j.firmata.parser.ParsingStringMessageState;\nimport org.firmata4j.fsm.Event;\nimport org.firmata4j.fsm.FiniteStateMachine;\nimport org.firmata4j.fsm.State;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class FiniteStateMachine_handle extends FiniteStateMachine_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    Class<ParsingCapabilityResponseState> class0 = ParsingCapabilityResponseState.class;\n    FiniteStateMachine finiteStateMachine0 = new FiniteStateMachine(class0);\n    Event event0 = new Event();\n    finiteStateMachine0.handle(event0);\n}\n}"
    },
    {
        "original_path": "aerogear-attic_aerogear-otp-java###aerogear-attic_aerogear-otp-java/src/test/java/org/jboss/aerogear/security/otp/api/Base32Test###testRandom",
        "generated_path": "Base32_random.java",
        "Compile_result": 1,
        "Test_result": 0,
        "Gen_Test": "package org.jboss.aerogear.security.otp.api;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.jboss.aerogear.security.otp.api.Base32;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class Base32_random extends Base32_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test17() throws Throwable {\n    String string0 = Base32.random();\n    assertEquals(\"AAAAAAABAAAAAAQA\", string0);\n}\n}"
    },
    {
        "original_path": "aerogear-attic_aerogear-otp-java###aerogear-attic_aerogear-otp-java/src/test/java/org/jboss/aerogear/security/otp/api/HmacTest###testDigest",
        "generated_path": "Hmac_digest.java",
        "Compile_result": 1,
        "Test_result": 0,
        "Gen_Test": "package org.jboss.aerogear.security.otp.api;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.jboss.aerogear.security.otp.api.Hash;\nimport org.jboss.aerogear.security.otp.api.Hmac;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class Hmac_digest extends Hmac_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test0() throws Throwable {\n    Hash hash0 = Hash.SHA1;\n    byte[] byteArray0 = new byte[1];\n    Hmac hmac0 = new Hmac(hash0, byteArray0, (byte) 0);\n    byte[] byteArray1 = hmac0.digest();\n    assertNotSame(byteArray0, byteArray1);\n}\n}"
    },
    {
        "original_path": "aerogear-attic_aerogear-otp-java###aerogear-attic_aerogear-otp-java/src/test/java/org/jboss/aerogear/security/otp/api/ClockTest###testGetCurrentInterval",
        "generated_path": "Clock_getCurrentInterval.java",
        "Compile_result": 1,
        "Test_result": 0,
        "Gen_Test": "package org.jboss.aerogear.security.otp.api;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.jboss.aerogear.security.otp.api.Clock;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class Clock_getCurrentInterval extends Clock_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test0() throws Throwable {\n    Clock clock0 = new Clock(850);\n    long long0 = clock0.getCurrentInterval();\n    assertEquals(1979394L, long0);\n}\n}"
    },
    {
        "original_path": "gwtbootstrap3_gwtbootstrap3###gwtbootstrap3_gwtbootstrap3/gwtbootstrap3/src/test/java/org/gwtbootstrap3/client/ui/base/helper/EnumHelperTest###testFromStyleName",
        "generated_path": "EnumHelper_fromStyleName.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.gwtbootstrap3.client.ui.base.helper;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport com.google.gwt.dom.client.Style;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.gwtbootstrap3.client.ui.base.helper.EnumHelper;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class EnumHelper_fromStyleName extends EnumHelper_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test0() throws Throwable {\n    Class<Style.ListStyleType> class0 = Style.ListStyleType.class;\n    Style.ListStyleType style_ListStyleType0 = Style.ListStyleType.LOWER_ROMAN;\n    Style.ListStyleType style_ListStyleType1 = EnumHelper.fromStyleName(\"decimal\", class0, style_ListStyleType0);\n    assertFalse(style_ListStyleType1.equals((Object) style_ListStyleType0));\n}\n}"
    },
    {
        "original_path": "gwtbootstrap3_gwtbootstrap3###gwtbootstrap3_gwtbootstrap3/gwtbootstrap3/src/test/java/org/gwtbootstrap3/client/ui/base/helper/StyleHelperTest###testContainsStyle",
        "generated_path": "StyleHelper_containsStyle.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.gwtbootstrap3.client.ui.base.helper;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.google.gwt.dom.client.Style;\nimport com.google.gwt.user.client.ui.UIObject;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.gwtbootstrap3.client.ui.ModalSize;\nimport org.gwtbootstrap3.client.ui.base.helper.StyleHelper;\nimport org.gwtbootstrap3.client.ui.constants.DeviceSize;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class StyleHelper_containsStyle extends StyleHelper_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    boolean boolean0 = StyleHelper.containsStyle(\"detachNow() called on a widget not currently in the detach list\", \"b\");\n    assertFalse(boolean0);\n}\n}"
    },
    {
        "original_path": "asterisk-java_asterisk-java###asterisk-java_asterisk-java/src/test/java/org/asteriskjava/manager/internal/ResponseBuilderImplTest###testBuildResponse",
        "generated_path": "ResponseBuilderImpl_buildResponse.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.asteriskjava.manager.internal;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.util.HashMap;\nimport java.util.LinkedList;\nimport java.util.Map;\nimport java.util.Set;\nimport org.asteriskjava.manager.internal.ResponseBuilderImpl;\nimport org.asteriskjava.manager.response.CommandResponse;\nimport org.asteriskjava.manager.response.ManagerResponse;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class ResponseBuilderImpl_buildResponse extends ResponseBuilderImpl_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    ResponseBuilderImpl responseBuilderImpl0 = new ResponseBuilderImpl();\n    HashMap<String, Object> hashMap0 = new HashMap<String, Object>();\n    Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>) hashMap0.entrySet();\n    hashMap0.put(\"7e:plivV3l?0rPr'*\", set0);\n    Class<CommandResponse> class0 = CommandResponse.class;\n    // Undeclared exception!\n    try {\n        responseBuilderImpl0.buildResponse(class0, hashMap0);\n        fail(\"Expecting exception: StackOverflowError\");\n    } catch (StackOverflowError e) {\n        //\n        // no message in exception (getMessage() returned null)\n        //\n    }\n}\n}"
    },
    {
        "original_path": "asterisk-java_asterisk-java###asterisk-java_asterisk-java/src/test/java/org/asteriskjava/fastagi/ScriptEngineMappingStrategyTest###testSearchFile",
        "generated_path": "ScriptEngineMappingStrategy_searchFile.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.asteriskjava.fastagi;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.io.Reader;\nimport java.net.URI;\nimport javax.script.ScriptEngine;\nimport javax.script.ScriptEngineManager;\nimport javax.script.SimpleBindings;\nimport org.asteriskjava.fastagi.AgiOperations;\nimport org.asteriskjava.fastagi.AgiRequest;\nimport org.asteriskjava.fastagi.AgiScript;\nimport org.asteriskjava.fastagi.ScriptEngineMappingStrategy;\nimport org.asteriskjava.fastagi.SimpleAgiRequest;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.io.MockFile;\nimport org.evosuite.runtime.mock.java.net.MockURI;\nimport org.evosuite.runtime.testdata.EvoSuiteFile;\nimport org.evosuite.runtime.testdata.FileSystemHandling;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class ScriptEngineMappingStrategy_searchFile extends ScriptEngineMappingStrategy_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(\"channel\");\n    FileSystemHandling.appendStringToFile(evoSuiteFile0, \"'\");\n    String[] stringArray0 = new String[6];\n    stringArray0[0] = \"\";\n    ScriptEngineMappingStrategy scriptEngineMappingStrategy0 = new ScriptEngineMappingStrategy(stringArray0, stringArray0);\n    File file0 = scriptEngineMappingStrategy0.searchFile(\"channel\", stringArray0);\n    assertTrue(file0.isFile());\n    assertNotNull(file0);\n}\n}"
    },
    {
        "original_path": "asterisk-java_asterisk-java###asterisk-java_asterisk-java/src/test/java/org/asteriskjava/manager/response/SipShowPeerResponseTest###testSetQualifyFreq",
        "generated_path": "SipShowPeerResponse_setQualifyFreq.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.asteriskjava.manager.response;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.util.HashMap;\nimport java.util.Map;\nimport org.asteriskjava.manager.response.SipShowPeerResponse;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class SipShowPeerResponse_setQualifyFreq extends SipShowPeerResponse_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test095() throws Throwable {\n    SipShowPeerResponse sipShowPeerResponse0 = new SipShowPeerResponse();\n    // Undeclared exception!\n    try {\n        sipShowPeerResponse0.setQualifyFreq((String) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n    }\n}\n}"
    },
    {
        "original_path": "asterisk-java_asterisk-java###asterisk-java_asterisk-java/src/test/java/org/asteriskjava/fastagi/internal/AgiRequestImplTest###testGetParameter",
        "generated_path": "AgiRequestImpl_getParameter.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.asteriskjava.fastagi.internal;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.net.InetAddress;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.HashSet;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.Stack;\nimport java.util.Vector;\nimport org.asteriskjava.AsteriskVersion;\nimport org.asteriskjava.fastagi.internal.AgiRequestImpl;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.net.MockInetAddress;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class AgiRequestImpl_getParameter extends AgiRequestImpl_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test27() throws Throwable {\n    LinkedList<String> linkedList0 = new LinkedList<String>();\n    AgiRequestImpl agiRequestImpl0 = new AgiRequestImpl(linkedList0);\n    agiRequestImpl0.getParameter(\"agi_2zR}U:BD$|<SDtLW]\");\n    String[] stringArray0 = agiRequestImpl0.getParameterValues((String) null);\n    assertEquals(0, stringArray0.length);\n}\n}"
    },
    {
        "original_path": "asterisk-java_asterisk-java###asterisk-java_asterisk-java/src/test/java/org/asteriskjava/live/CallerIdTest###testValueOf",
        "generated_path": "CallerId_valueOf.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.asteriskjava.live;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport org.asteriskjava.live.CallerId;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class CallerId_valueOf extends CallerId_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    // Undeclared exception!\n    try {\n        CallerId.valueOf(\"yJ>&;[\\\"n|OP'x)<.'^m\");\n        fail(\"Expecting exception: StringIndexOutOfBoundsException\");\n    } catch (StringIndexOutOfBoundsException e) {\n    }\n}\n}"
    },
    {
        "original_path": "asterisk-java_asterisk-java###asterisk-java_asterisk-java/src/test/java/org/asteriskjava/util/AstUtilTest###testIsTrue",
        "generated_path": "AstUtil_isTrue.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.asteriskjava.util;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport org.asteriskjava.util.AstUtil;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class AstUtil_isTrue extends AstUtil_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    Boolean boolean0 = Boolean.TRUE;\n    boolean boolean1 = AstUtil.isTrue(boolean0);\n    assertTrue(boolean1);\n}\n}"
    },
    {
        "original_path": "asterisk-java_asterisk-java###asterisk-java_asterisk-java/src/test/java/org/asteriskjava/fastagi/ResourceBundleMappingStrategyTest###testDetermineScript",
        "generated_path": "ResourceBundleMappingStrategy_determineScript.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.asteriskjava.fastagi;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport org.asteriskjava.fastagi.AgiRequest;\nimport org.asteriskjava.fastagi.AgiScript;\nimport org.asteriskjava.fastagi.ResourceBundleMappingStrategy;\nimport org.asteriskjava.fastagi.SimpleAgiRequest;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class ResourceBundleMappingStrategy_determineScript extends ResourceBundleMappingStrategy_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test1() throws Throwable {\n    ResourceBundleMappingStrategy resourceBundleMappingStrategy0 = new ResourceBundleMappingStrategy();\n    SimpleAgiRequest simpleAgiRequest0 = new SimpleAgiRequest((String) null);\n    resourceBundleMappingStrategy0.determineScript((AgiRequest) simpleAgiRequest0);\n    resourceBundleMappingStrategy0.setShareInstances(false);\n    // Undeclared exception!\n    try {\n        resourceBundleMappingStrategy0.determineScript((AgiRequest) simpleAgiRequest0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        //\n        // no message in exception (getMessage() returned null)\n        //\n    }\n}\n}"
    },
    {
        "original_path": "asterisk-java_asterisk-java###asterisk-java_asterisk-java/src/test/java/org/asteriskjava/manager/internal/ManagerConnectionImplTest###testIsShowVersionCommandAction",
        "generated_path": "ManagerConnectionImpl_isShowVersionCommandAction.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.asteriskjava.manager.internal;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.nio.charset.Charset;\nimport java.util.Date;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.Future;\nimport java.util.concurrent.TimeUnit;\nimport org.asteriskjava.manager.ManagerConnectionState;\nimport org.asteriskjava.manager.ManagerEventListener;\nimport org.asteriskjava.manager.ManagerEventListenerProxy;\nimport org.asteriskjava.manager.SendActionCallback;\nimport org.asteriskjava.manager.SendEventGeneratingActionCallback;\nimport org.asteriskjava.manager.action.AgiAction;\nimport org.asteriskjava.manager.action.ChangeMonitorAction;\nimport org.asteriskjava.manager.action.CommandAction;\nimport org.asteriskjava.manager.action.ConfbridgeListAction;\nimport org.asteriskjava.manager.action.ConfbridgeListRoomsAction;\nimport org.asteriskjava.manager.action.ConfbridgeStartRecordAction;\nimport org.asteriskjava.manager.action.DbDelAction;\nimport org.asteriskjava.manager.action.DbGetAction;\nimport org.asteriskjava.manager.action.EventGeneratingAction;\nimport org.asteriskjava.manager.action.GetVarAction;\nimport org.asteriskjava.manager.action.HangupAction;\nimport org.asteriskjava.manager.action.ManagerAction;\nimport org.asteriskjava.manager.action.MessageSendAction;\nimport org.asteriskjava.manager.action.MixMonitorMuteAction;\nimport org.asteriskjava.manager.action.PJSipShowContactsAction;\nimport org.asteriskjava.manager.action.ParkAction;\nimport org.asteriskjava.manager.action.ParkedCallsAction;\nimport org.asteriskjava.manager.action.QueueStatusAction;\nimport org.asteriskjava.manager.action.QueueSummaryAction;\nimport org.asteriskjava.manager.action.SetVarAction;\nimport org.asteriskjava.manager.action.ShowDialplanAction;\nimport org.asteriskjava.manager.action.SkypeBuddiesAction;\nimport org.asteriskjava.manager.action.SkypeChatSendAction;\nimport org.asteriskjava.manager.action.SkypeLicenseListAction;\nimport org.asteriskjava.manager.action.SkypeRemoveBuddyAction;\nimport org.asteriskjava.manager.action.UnpauseMonitorAction;\nimport org.asteriskjava.manager.action.UserEventAction;\nimport org.asteriskjava.manager.action.ZapShowChannelsAction;\nimport org.asteriskjava.manager.action.ZapTransferAction;\nimport org.asteriskjava.manager.event.AgentCalledEvent;\nimport org.asteriskjava.manager.event.AgentsCompleteEvent;\nimport org.asteriskjava.manager.event.AlarmClearEvent;\nimport org.asteriskjava.manager.event.AntennaLevelEvent;\nimport org.asteriskjava.manager.event.AuthDetail;\nimport org.asteriskjava.manager.event.BridgeExecEvent;\nimport org.asteriskjava.manager.event.BridgeMergeEvent;\nimport org.asteriskjava.manager.event.CdrEvent;\nimport org.asteriskjava.manager.event.CelEvent;\nimport org.asteriskjava.manager.event.ChanSpyStartEvent;\nimport org.asteriskjava.manager.event.ChanSpyStopEvent;\nimport org.asteriskjava.manager.event.ChannelReloadEvent;\nimport org.asteriskjava.manager.event.ConfbridgeListRoomsEvent;\nimport org.asteriskjava.manager.event.ConfbridgeTalkingEvent;\nimport org.asteriskjava.manager.event.CoreShowChannelEvent;\nimport org.asteriskjava.manager.event.DahdiShowChannelsCompleteEvent;\nimport org.asteriskjava.manager.event.DahdiShowChannelsEvent;\nimport org.asteriskjava.manager.event.DialEvent;\nimport org.asteriskjava.manager.event.DisconnectEvent;\nimport org.asteriskjava.manager.event.DongleCENDEvent;\nimport org.asteriskjava.manager.event.DongleNewSMSBase64Event;\nimport org.asteriskjava.manager.event.DongleStatusEvent;\nimport org.asteriskjava.manager.event.EndpointListComplete;\nimport org.asteriskjava.manager.event.ExtensionStatusEvent;\nimport org.asteriskjava.manager.event.HangupRequestEvent;\nimport org.asteriskjava.manager.event.JitterBufStatsEvent;\nimport org.asteriskjava.manager.event.LogChannelEvent;\nimport org.asteriskjava.manager.event.ManagerEvent;\nimport org.asteriskjava.manager.event.MeetMeEndEvent;\nimport org.asteriskjava.manager.event.MeetMeMuteEvent;\nimport org.asteriskjava.manager.event.MessageWaitingEvent;\nimport org.asteriskjava.manager.event.MusicOnHoldStopEvent;\nimport org.asteriskjava.manager.event.NewChannelEvent;\nimport org.asteriskjava.manager.event.NewConnectedLineEvent;\nimport org.asteriskjava.manager.event.NewStateEvent;\nimport org.asteriskjava.manager.event.ParkedCallGiveUpEvent;\nimport org.asteriskjava.manager.event.PausedEvent;\nimport org.asteriskjava.manager.event.PriEventEvent;\nimport org.asteriskjava.manager.event.ProtocolIdentifierReceivedEvent;\nimport org.asteriskjava.manager.event.QueueEntryEvent;\nimport org.asteriskjava.manager.event.QueueMemberPauseEvent;\nimport org.asteriskjava.manager.event.QueueMemberStatusEvent;\nimport org.asteriskjava.manager.event.ReloadEvent;\nimport org.asteriskjava.manager.event.RenameEvent;\nimport org.asteriskjava.manager.event.RtcpReceivedEvent;\nimport org.asteriskjava.manager.event.RtcpSentEvent;\nimport org.asteriskjava.manager.event.RtpReceiverStatEvent;\nimport org.asteriskjava.manager.event.ShowDialplanCompleteEvent;\nimport org.asteriskjava.manager.event.ShutdownEvent;\nimport org.asteriskjava.manager.event.SkypeBuddyListCompleteEvent;\nimport org.asteriskjava.manager.event.SkypeLicenseEvent;\nimport org.asteriskjava.manager.event.T38FaxStatusEvent;\nimport org.asteriskjava.manager.event.ZapShowChannelsCompleteEvent;\nimport org.asteriskjava.manager.internal.AsyncEventPump;\nimport org.asteriskjava.manager.internal.ManagerConnectionImpl;\nimport org.asteriskjava.manager.internal.ManagerWriter;\nimport org.asteriskjava.manager.response.ChallengeResponse;\nimport org.asteriskjava.manager.response.CommandResponse;\nimport org.asteriskjava.manager.response.CoreSettingsResponse;\nimport org.asteriskjava.manager.response.ManagerResponse;\nimport org.asteriskjava.util.DateUtil;\nimport org.asteriskjava.util.LogFactory;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.mock.java.util.MockDate;\nimport org.evosuite.runtime.testdata.EvoSuiteFile;\nimport org.evosuite.runtime.testdata.FileSystemHandling;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class ManagerConnectionImpl_isShowVersionCommandAction extends ManagerConnectionImpl_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test43() throws Throwable {\n    ManagerConnectionImpl managerConnectionImpl0 = new ManagerConnectionImpl();\n    managerConnectionImpl0.isShowVersionCommandAction((ManagerAction) null);\n}\n}"
    },
    {
        "original_path": "asterisk-java_asterisk-java###asterisk-java_asterisk-java/src/test/java/org/asteriskjava/fastagi/ClassNameMappingStrategyTest###testDetermineScript",
        "generated_path": "ClassNameMappingStrategy_determineScript.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.asteriskjava.fastagi;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport org.asteriskjava.fastagi.AgiRequest;\nimport org.asteriskjava.fastagi.AgiScript;\nimport org.asteriskjava.fastagi.ClassNameMappingStrategy;\nimport org.asteriskjava.fastagi.SimpleAgiRequest;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class ClassNameMappingStrategy_determineScript extends ClassNameMappingStrategy_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test0() throws Throwable {\n    ClassNameMappingStrategy classNameMappingStrategy0 = new ClassNameMappingStrategy();\n    SimpleAgiRequest simpleAgiRequest0 = new SimpleAgiRequest();\n    AgiScript agiScript0 = classNameMappingStrategy0.determineScript((AgiRequest) simpleAgiRequest0);\n    assertNull(agiScript0);\n}\n}"
    },
    {
        "original_path": "asterisk-java_asterisk-java###asterisk-java_asterisk-java/src/test/java/org/asteriskjava/util/AstUtilTest###testIsNull",
        "generated_path": "AstUtil_isNull.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.asteriskjava.util;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport org.asteriskjava.util.AstUtil;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class AstUtil_isNull extends AstUtil_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    boolean boolean0 = AstUtil.isNull(\"<not set>\");\n    assertTrue(boolean0);\n}\n}"
    },
    {
        "original_path": "asterisk-java_asterisk-java###asterisk-java_asterisk-java/src/test/java/org/asteriskjava/fastagi/ScriptEngineMappingStrategyTest###testGetExtension",
        "generated_path": "ScriptEngineMappingStrategy_getExtension.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.asteriskjava.fastagi;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.io.Reader;\nimport java.net.URI;\nimport javax.script.ScriptEngine;\nimport javax.script.ScriptEngineManager;\nimport javax.script.SimpleBindings;\nimport org.asteriskjava.fastagi.AgiOperations;\nimport org.asteriskjava.fastagi.AgiRequest;\nimport org.asteriskjava.fastagi.AgiScript;\nimport org.asteriskjava.fastagi.ScriptEngineMappingStrategy;\nimport org.asteriskjava.fastagi.SimpleAgiRequest;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.io.MockFile;\nimport org.evosuite.runtime.mock.java.net.MockURI;\nimport org.evosuite.runtime.testdata.EvoSuiteFile;\nimport org.evosuite.runtime.testdata.FileSystemHandling;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class ScriptEngineMappingStrategy_getExtension extends ScriptEngineMappingStrategy_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    String string0 = ScriptEngineMappingStrategy.getExtension(\"channel\");\n    assertNull(string0);\n}\n}"
    },
    {
        "original_path": "asterisk-java_asterisk-java###asterisk-java_asterisk-java/src/test/java/org/asteriskjava/fastagi/internal/AgiChannelImplTest###testSendCommand",
        "generated_path": "AgiChannelImpl_sendCommand.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.asteriskjava.fastagi.internal;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport org.asteriskjava.AsteriskVersion;\nimport org.asteriskjava.fastagi.AgiReader;\nimport org.asteriskjava.fastagi.AgiRequest;\nimport org.asteriskjava.fastagi.AgiWriter;\nimport org.asteriskjava.fastagi.SimpleAgiRequest;\nimport org.asteriskjava.fastagi.command.SayTimeCommand;\nimport org.asteriskjava.fastagi.command.SpeechUnloadGrammarCommand;\nimport org.asteriskjava.fastagi.internal.AgiChannelImpl;\nimport org.asteriskjava.fastagi.internal.AsyncAgiWriter;\nimport org.asteriskjava.fastagi.internal.FastAgiReader;\nimport org.asteriskjava.fastagi.internal.FastAgiWriter;\nimport org.asteriskjava.fastagi.reply.AgiReply;\nimport org.asteriskjava.manager.DefaultManagerConnection;\nimport org.asteriskjava.manager.ManagerConnection;\nimport org.asteriskjava.util.SocketConnectionFacade;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class AgiChannelImpl_sendCommand extends AgiChannelImpl_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void AgiChannelImpl_sendCommand() throws Throwable {\n    SimpleAgiRequest simpleAgiRequest0 = new SimpleAgiRequest(\"Grammar '\");\n    AgiChannelImpl agiChannelImpl0 = new AgiChannelImpl(simpleAgiRequest0, (AgiWriter) null, (AgiReader) null);\n    SayTimeCommand sayTimeCommand0 = new SayTimeCommand(2000L, \"Grammar '\");\n    // Undeclared exception!\n    try {\n        agiChannelImpl0.sendCommand(sayTimeCommand0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        //\n        // no message in exception (getMessage() returned null)\n        //\n        verifyException(\"org.asteriskjava.fastagi.internal.AgiChannelImpl\", e);\n    }\n}\n}"
    },
    {
        "original_path": "asterisk-java_asterisk-java###asterisk-java_asterisk-java/src/test/java/org/asteriskjava/manager/event/T38FaxStatusEventTest###testStripUnit",
        "generated_path": "T38FaxStatusEvent_stripUnit.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.asteriskjava.manager.event;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.time.chrono.ThaiBuddhistDate;\nimport java.util.Locale;\nimport org.asteriskjava.manager.event.T38FaxStatusEvent;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class T38FaxStatusEvent_stripUnit extends T38FaxStatusEvent_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    Object object0 = new Object();\n    T38FaxStatusEvent t38FaxStatusEvent0 = new T38FaxStatusEvent(object0);\n    String string0 = t38FaxStatusEvent0.stripUnit(\"\");\n    assertNull(string0);\n}\n}"
    },
    {
        "original_path": "asterisk-java_asterisk-java###asterisk-java_asterisk-java/src/test/java/org/asteriskjava/fastagi/internal/AgiRequestImplTest###testGetArguments",
        "generated_path": "AgiRequestImpl_getArguments.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.asteriskjava.fastagi.internal;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.net.InetAddress;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.HashSet;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.Stack;\nimport java.util.Vector;\nimport org.asteriskjava.AsteriskVersion;\nimport org.asteriskjava.fastagi.internal.AgiRequestImpl;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.net.MockInetAddress;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class AgiRequestImpl_getArguments extends AgiRequestImpl_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test26() throws Throwable {\n    ArrayList<String> arrayList0 = new ArrayList<String>();\n    AgiRequestImpl agiRequestImpl0 = new AgiRequestImpl(arrayList0);\n    agiRequestImpl0.getArguments();\n    String[] stringArray0 = agiRequestImpl0.getArguments();\n    assertEquals(0, stringArray0.length);\n}\n}"
    },
    {
        "original_path": "asterisk-java_asterisk-java###asterisk-java_asterisk-java/src/test/java/org/asteriskjava/live/CallerIdTest###testToString",
        "generated_path": "CallerId_toString.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.asteriskjava.live;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport org.asteriskjava.live.CallerId;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class CallerId_toString extends CallerId_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test17() throws Throwable {\n    CallerId callerId0 = CallerId.valueOf(\"Hg\");\n    String string0 = callerId0.toString();\n    assertEquals(\"\\\"Hg\\\"\", string0);\n}\n}"
    },
    {
        "original_path": "Azure_azure-functions-java-worker###Azure_azure-functions-java-worker/src/test/java/com/microsoft/azure/functions/worker/broker/tests/CoreTypeResolverTest###testIsValidOutputType",
        "generated_path": "CoreTypeResolver_isValidOutputType.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.microsoft.azure.functions.worker.broker;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.microsoft.azure.functions.worker.broker.CoreTypeResolver;\nimport java.lang.annotation.Annotation;\nimport java.lang.reflect.Parameter;\nimport java.lang.reflect.Type;\nimport java.lang.reflect.WildcardType;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.junit.runner.RunWith;\nimport org.mockito.internal.util.reflection.GenericMetadataSupport;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class CoreTypeResolver_isValidOutputType extends CoreTypeResolver_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    boolean boolean0 = CoreTypeResolver.isValidOutputType((Type) null);\n    assertFalse(boolean0);\n}\n}"
    },
    {
        "original_path": "bpsm_edn-java###bpsm_edn-java/src/test/java/us/bpsm/edn/parser/InstantUtilsTest###testParse",
        "generated_path": "InstantUtils_parse.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package us.bpsm.edn.parser;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.sql.Timestamp;\nimport java.util.Date;\nimport java.util.GregorianCalendar;\nimport java.util.TimeZone;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.util.MockGregorianCalendar;\nimport org.junit.runner.RunWith;\nimport us.bpsm.edn.parser.InstantUtils;\nimport us.bpsm.edn.parser.ParsedInstant;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class InstantUtils_parse extends InstantUtils_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    // Undeclared exception!\n    try {\n        InstantUtils.parse((String) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        //\n        // no message in exception (getMessage() returned null)\n        //\n    }\n}\n}"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/FavoritesInterfaceTest###testGetContext",
        "generated_path": "FavoritesInterface_getContext.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.flickr4java.flickr.favorites;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.flickr4java.flickr.REST;\nimport com.flickr4java.flickr.Transport;\nimport com.flickr4java.flickr.favorites.FavoritesInterface;\nimport java.nio.charset.Charset;\nimport java.time.ZoneId;\nimport java.util.LinkedHashSet;\nimport java.util.Locale;\nimport java.util.Set;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class FavoritesInterface_getContext extends FavoritesInterface_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void FavoritesInterface_getContext() throws Throwable {\n    REST rEST0 = new REST(\"_o.\", (-1301));\n    FavoritesInterface favoritesInterface0 = new FavoritesInterface(\" i\", \"eRjZf7!XF/uKE=0\", rEST0);\n    // Undeclared exception!\n    try {\n        favoritesInterface0.getContext(\" i\", \"\");\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        //\n        // java.net.UnknownServiceException: protocol doesn't support output\n        //\n        verifyException(\"com.flickr4java.flickr.REST\", e);\n    }\n}\n}"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/PhotosInterfaceTest###testGetRecent",
        "generated_path": "PhotosInterface_getRecent.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.flickr4java.flickr.photos;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.flickr4java.flickr.REST;\nimport com.flickr4java.flickr.Transport;\nimport com.flickr4java.flickr.photos.Permissions;\nimport com.flickr4java.flickr.photos.Photo;\nimport com.flickr4java.flickr.photos.PhotosInterface;\nimport com.flickr4java.flickr.photos.SearchParameters;\nimport com.flickr4java.flickr.photos.geo.GeoInterface;\nimport java.nio.charset.Charset;\nimport java.time.Instant;\nimport java.time.ZoneId;\nimport java.util.Date;\nimport java.util.LinkedHashSet;\nimport java.util.Locale;\nimport java.util.Set;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.time.MockInstant;\nimport org.evosuite.runtime.mock.java.util.MockDate;\nimport org.evosuite.runtime.testdata.EvoSuiteURL;\nimport org.evosuite.runtime.testdata.NetworkHandling;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class PhotosInterface_getRecent extends PhotosInterface_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void PhotosInterface_getRecent() throws Throwable {\n    REST rEST0 = new REST(\"3z#v (OpbkI3\", 0);\n    assertFalse(rEST0.isProxyAuth());\n    assertEquals(\"https\", rEST0.getScheme());\n    assertEquals(\"REST\", rEST0.getTransportType());\n    assertEquals(\"/services/rest/\", rEST0.getPath());\n    assertEquals(0, rEST0.getPort());\n    assertEquals(\"3z#v (OpbkI3\", rEST0.getHost());\n    assertNotNull(rEST0);\n    PhotosInterface photosInterface0 = new PhotosInterface(\"server\", \"server\", rEST0);\n    assertFalse(rEST0.isProxyAuth());\n    assertEquals(\"https\", rEST0.getScheme());\n    assertEquals(\"REST\", rEST0.getTransportType());\n    assertEquals(\"/services/rest/\", rEST0.getPath());\n    assertEquals(0, rEST0.getPort());\n    assertEquals(\"3z#v (OpbkI3\", rEST0.getHost());\n    assertNotNull(photosInterface0);\n    try {\n        photosInterface0.getRecent((Set<String>) null, 0, (-423));\n        fail(\"Expecting exception: Exception\");\n    } catch (Exception e) {\n        //\n        // 105: Received 'Not Found' error from Flickr with status 404\n        //\n        verifyException(\"com.flickr4java.flickr.REST\", e);\n    }\n}\n}"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/PoolsInterfaceTest###testGetGroups",
        "generated_path": "PoolsInterface_getGroups.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.flickr4java.flickr.groups.pools;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.flickr4java.flickr.REST;\nimport com.flickr4java.flickr.Transport;\nimport com.flickr4java.flickr.groups.pools.PoolsInterface;\nimport java.nio.charset.Charset;\nimport java.util.LinkedHashSet;\nimport java.util.Locale;\nimport java.util.Set;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class PoolsInterface_getGroups extends PoolsInterface_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void PoolsInterface_getGroups() throws Throwable {\n    REST rEST0 = new REST(\"-opa&UW:*QW>GZ2\", 109);\n    PoolsInterface poolsInterface0 = new PoolsInterface(\"-opa&UW:*QW>GZ2\", \"-opa&UW:*QW>GZ2\", rEST0);\n    // Undeclared exception!\n    try {\n        poolsInterface0.getGroups();\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        //\n        // java.net.MalformedURLException: For input string: \\\"*QW>GZ2\\\"\n        //\n        verifyException(\"com.flickr4java.flickr.REST\", e);\n    }\n}\n}"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/TagsInterfaceTest###testGetListPhoto",
        "generated_path": "TagsInterface_getListPhoto.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.flickr4java.flickr.tags;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.flickr4java.flickr.REST;\nimport com.flickr4java.flickr.Transport;\nimport com.flickr4java.flickr.tags.TagsInterface;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class TagsInterface_getListPhoto extends TagsInterface_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void TagsInterface_getListPhoto() throws Throwable {\n    REST rEST0 = new REST(\"i`g\", 0);\n    rEST0.setScheme(\"<7F\");\n    TagsInterface tagsInterface0 = new TagsInterface(\"i`g\", \"<7F\", rEST0);\n    // Undeclared exception!\n    try {\n        tagsInterface0.getListPhoto(\"REST\");\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        //\n        // java.net.MalformedURLException: no protocol: <7F://i`g/services/rest/?method=flickr.tags.getListPhoto&photo_id=REST&api_key=i%60g\n        //\n        verifyException(\"com.flickr4java.flickr.REST\", e);\n    }\n}\n}"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/PlacesInterfaceTest###testGetTopPlacesList",
        "generated_path": "PlacesInterface_getTopPlacesList.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.flickr4java.flickr.places;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.flickr4java.flickr.REST;\nimport com.flickr4java.flickr.Transport;\nimport com.flickr4java.flickr.places.PlacesInterface;\nimport java.time.Instant;\nimport java.util.Date;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.time.MockInstant;\nimport org.evosuite.runtime.mock.java.util.MockDate;\nimport org.evosuite.runtime.testdata.EvoSuiteURL;\nimport org.evosuite.runtime.testdata.NetworkHandling;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class PlacesInterface_getTopPlacesList extends PlacesInterface_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void PlacesInterface_getTopPlacesList() throws Throwable {\n    REST rEST0 = new REST(\"place\");\n    PlacesInterface placesInterface0 = new PlacesInterface(\"place\", \"place\", rEST0);\n    EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL(\"https://place/services/rest/?date=1887-04-22&woe_id=%29w%23fww%40ka3eVF%7DzcO&method=flickr.places.getTopPlacesList&place_type=neighbourhood&place_id=%29w%23fww%40ka3eVF%7DzcO&api_key=place\");\n    NetworkHandling.createRemoteTextFile(evoSuiteURL0, \"up.flickr.com\");\n    MockDate mockDate0 = new MockDate((-14), 6, 296);\n    // Undeclared exception!\n    try {\n        placesInterface0.getTopPlacesList(22, mockDate0, \")w#fww@ka3eVF}zcO\", \")w#fww@ka3eVF}zcO\");\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        //\n        // org.xml.sax.SAXParseException; lineNumber: 1; columnNumber: 1; Content is not allowed in prolog.\n        //\n        verifyException(\"com.flickr4java.flickr.REST\", e);\n    }\n}\n}"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/PhotosetsInterfaceTest###testEditPhotos",
        "generated_path": "PhotosetsInterface_editPhotos.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.flickr4java.flickr.photosets;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.flickr4java.flickr.REST;\nimport com.flickr4java.flickr.Transport;\nimport com.flickr4java.flickr.photosets.PhotosetsInterface;\nimport java.time.ZoneId;\nimport java.util.Locale;\nimport java.util.Set;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class PhotosetsInterface_editPhotos extends PhotosetsInterface_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void PhotosetsInterface_editPhotos() throws Throwable {\n    REST rEST0 = new REST();\n    PhotosetsInterface photosetsInterface0 = new PhotosetsInterface(\"2n})BGIe \\\"o&!\", \"zEcN\", rEST0);\n    String[] stringArray0 = new String[4];\n    // Undeclared exception!\n    try {\n        photosetsInterface0.editPhotos(\"MddK-T{c\", \"flickr.photosets.getPhotos\", stringArray0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        //\n        // java.net.UnknownServiceException: protocol doesn't support output\n        //\n        verifyException(\"com.flickr4java.flickr.REST\", e);\n    }\n}\n}"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/GeoInterfaceTest###testSetLocation",
        "generated_path": "GeoInterface_setLocation.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.flickr4java.flickr.photos.geo;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.flickr4java.flickr.REST;\nimport com.flickr4java.flickr.Transport;\nimport com.flickr4java.flickr.photos.GeoData;\nimport com.flickr4java.flickr.photos.geo.GeoInterface;\nimport com.flickr4java.flickr.photos.geo.GeoPermissions;\nimport java.time.ZoneId;\nimport java.util.LinkedHashSet;\nimport java.util.Set;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class GeoInterface_setLocation extends GeoInterface_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void GeoInterface_setLocation() throws Throwable {\n    REST rEST0 = new REST();\n    GeoInterface geoInterface0 = new GeoInterface(\"Bc:d74@6I>k;h2s|\", \"Bc:d74@6I>k;h2s|\", rEST0);\n    GeoData geoData0 = new GeoData();\n    geoData0.setAccuracy((-3123));\n    // Undeclared exception!\n    try {\n        geoInterface0.setLocation(\"P\", geoData0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        //\n        // java.net.UnknownServiceException: protocol doesn't support output\n        //\n        verifyException(\"com.flickr4java.flickr.REST\", e);\n    }\n}\n}"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/MachinetagsInterfaceTest###testGetPredicates",
        "generated_path": "MachinetagsInterface_getPredicates.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.flickr4java.flickr.machinetags;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.flickr4java.flickr.REST;\nimport com.flickr4java.flickr.Transport;\nimport com.flickr4java.flickr.machinetags.MachinetagsInterface;\nimport java.util.Date;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.util.MockDate;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class MachinetagsInterface_getPredicates extends MachinetagsInterface_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void MachinetagsInterface_getPredicates() throws Throwable {\n    MachinetagsInterface machinetagsInterface0 = new MachinetagsInterface(\"\", \"there were problems while writting to the debug stream\", (Transport) null);\n    // Undeclared exception!\n    try {\n        machinetagsInterface0.getPredicates(\"there were problems while writting to the debug stream\", 308, 0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        //\n        // no message in exception (getMessage() returned null)\n        //\n        verifyException(\"com.flickr4java.flickr.machinetags.MachinetagsInterface\", e);\n    }\n}\n}"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/OAuthUtilitiesTest###testCreateOAuthService",
        "generated_path": "OAuthUtilities_createOAuthService.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.flickr4java.flickr.util;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.flickr4java.flickr.Flickr;\nimport com.flickr4java.flickr.util.OAuthUtilities;\nimport com.github.scribejava.apis.MediaWikiApi;\nimport com.github.scribejava.core.httpclient.jdk.JDKHttpClient;\nimport com.github.scribejava.core.httpclient.jdk.JDKHttpClientConfig;\nimport com.github.scribejava.core.model.OAuthRequest;\nimport com.github.scribejava.core.model.Verb;\nimport com.github.scribejava.core.oauth.OAuth10aService;\nimport java.io.PipedOutputStream;\nimport java.util.HashMap;\nimport java.util.Map;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class OAuthUtilities_createOAuthService extends OAuthUtilities_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test1() throws Throwable {\n    Integer integer0 = new Integer(0);\n    Integer integer1 = new Integer(2447);\n    OAuth10aService oAuth10aService0 = OAuthUtilities.createOAuthService(\";*=5Kf1u}&x$F~9Kfn~\", \";*=5Kf1u}&x$F~9Kfn~\", integer0, integer1);\n    assertEquals(\"1.0\", oAuth10aService0.getVersion());\n}\n}"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/CamerasInterfaceTest###testGetBrands",
        "generated_path": "CamerasInterface_getBrands.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.flickr4java.flickr.cameras;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.flickr4java.flickr.REST;\nimport com.flickr4java.flickr.Transport;\nimport com.flickr4java.flickr.cameras.CamerasInterface;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class CamerasInterface_getBrands extends CamerasInterface_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void CamerasInterface_getBrands() throws Throwable {\n    REST rEST0 = new REST(\"response status code: %s\", 16384);\n    CamerasInterface camerasInterface0 = new CamerasInterface(\"joVyd|wH\", \"9@&f1)\", rEST0);\n    // Undeclared exception!\n    try {\n        camerasInterface0.getBrands();\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        //\n        // java.net.MalformedURLException: For input string: \\\" %s\\\"\n        //\n        verifyException(\"com.flickr4java.flickr.REST\", e);\n    }\n}\n}"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/TestInterfaceTest###testLogin",
        "generated_path": "TestInterface_login.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.flickr4java.flickr.test;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.flickr4java.flickr.REST;\nimport com.flickr4java.flickr.Transport;\nimport com.flickr4java.flickr.test.TestInterface;\nimport com.flickr4java.flickr.uploader.UploadMetaData;\nimport java.util.HashMap;\nimport java.util.Map;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class TestInterface_login extends TestInterface_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void TestInterface_login() throws Throwable {\n    REST rEST0 = new REST(\"method\");\n    TestInterface testInterface0 = new TestInterface(\"method\", \"method\", rEST0);\n    // Undeclared exception!\n    try {\n        testInterface0.login();\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        //\n        // java.net.UnknownServiceException: protocol doesn't support output\n        //\n        verifyException(\"com.flickr4java.flickr.REST\", e);\n    }\n}\n}"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/CommonsInterfaceTest###testGetInstitutions",
        "generated_path": "CommonsInterface_getInstitutions.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.flickr4java.flickr.commons;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.flickr4java.flickr.REST;\nimport com.flickr4java.flickr.Transport;\nimport com.flickr4java.flickr.commons.CommonsInterface;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class CommonsInterface_getInstitutions extends CommonsInterface_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void CommonsInterface_getInstitutions() throws Throwable {\n    REST rEST0 = new REST(\"P6/'w\");\n    rEST0.setScheme(\"\");\n    CommonsInterface commonsInterface0 = new CommonsInterface(\"j$\", \"j$\", rEST0);\n    // Undeclared exception!\n    try {\n        commonsInterface0.getInstitutions();\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        //\n        // java.net.MalformedURLException: no protocol: ://P6/'w/services/rest/?method=flickr.commons.getInstitutions&api_key=j%24\n        //\n        verifyException(\"com.flickr4java.flickr.REST\", e);\n    }\n}\n}"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/TestInterfaceTest###testEcho",
        "generated_path": "TestInterface_echo.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.flickr4java.flickr.test;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.flickr4java.flickr.REST;\nimport com.flickr4java.flickr.Transport;\nimport com.flickr4java.flickr.test.TestInterface;\nimport com.flickr4java.flickr.uploader.UploadMetaData;\nimport java.util.HashMap;\nimport java.util.Map;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class TestInterface_echo extends TestInterface_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void TestInterface_echo() throws Throwable {\n    REST rEST0 = new REST(\"api_key\", 0);\n    TestInterface testInterface0 = new TestInterface(\"api_key\", \"api_key\", rEST0);\n    UploadMetaData uploadMetaData0 = UploadMetaData.replace(false, \"flickr.test.login\");\n    Map<String, String> map0 = uploadMetaData0.getUploadParameters();\n    // Undeclared exception!\n    try {\n        testInterface0.echo(map0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        //\n        // java.net.UnknownServiceException: protocol doesn't support output\n        //\n        verifyException(\"com.flickr4java.flickr.REST\", e);\n    }\n}\n}"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/PlacesInterfaceTest###testGetInfoByUrl",
        "generated_path": "PlacesInterface_getInfoByUrl.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.flickr4java.flickr.places;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.flickr4java.flickr.REST;\nimport com.flickr4java.flickr.Transport;\nimport com.flickr4java.flickr.places.PlacesInterface;\nimport java.time.Instant;\nimport java.util.Date;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.time.MockInstant;\nimport org.evosuite.runtime.mock.java.util.MockDate;\nimport org.evosuite.runtime.testdata.EvoSuiteURL;\nimport org.evosuite.runtime.testdata.NetworkHandling;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class PlacesInterface_getInfoByUrl extends PlacesInterface_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void PlacesInterface_getInfoByUrl() throws Throwable {\n    REST rEST0 = new REST(\"QhmcJ}*Mza>T%M:dk]\");\n    PlacesInterface placesInterface0 = new PlacesInterface(\"woe_name\", \"woe_name\", rEST0);\n    // Undeclared exception!\n    try {\n        placesInterface0.getInfoByUrl(\"\");\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        //\n        // java.net.MalformedURLException: For input string: \\\"dk]\\\"\n        //\n        verifyException(\"com.flickr4java.flickr.REST\", e);\n    }\n}\n}"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/PlacesInterfaceTest###testResolvePlaceUrl",
        "generated_path": "PlacesInterface_resolvePlaceURL.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.flickr4java.flickr.places;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.flickr4java.flickr.REST;\nimport com.flickr4java.flickr.Transport;\nimport com.flickr4java.flickr.places.PlacesInterface;\nimport java.time.Instant;\nimport java.util.Date;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.time.MockInstant;\nimport org.evosuite.runtime.mock.java.util.MockDate;\nimport org.evosuite.runtime.testdata.EvoSuiteURL;\nimport org.evosuite.runtime.testdata.NetworkHandling;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class PlacesInterface_resolvePlaceURL extends PlacesInterface_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void PlacesInterface_resolvePlaceURL() throws Throwable {\n    REST rEST0 = new REST();\n    PlacesInterface placesInterface0 = new PlacesInterface(\"date\", \"date\", rEST0);\n    rEST0.setScheme(\"date\");\n    // Undeclared exception!\n    try {\n        placesInterface0.resolvePlaceURL(\"}3*qd:$7]pNr!0=%a\");\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        //\n        // java.net.MalformedURLException: unknown protocol: date\n        //\n        verifyException(\"com.flickr4java.flickr.REST\", e);\n    }\n}\n}"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/UrlsInterfaceTest###testLookupGroup",
        "generated_path": "UrlsInterface_lookupGroup.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.flickr4java.flickr.urls;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.flickr4java.flickr.REST;\nimport com.flickr4java.flickr.Transport;\nimport com.flickr4java.flickr.urls.UrlsInterface;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class UrlsInterface_lookupGroup extends UrlsInterface_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void UrlsInterface_lookupGroup() throws Throwable {\n    REST rEST0 = new REST();\n    UrlsInterface urlsInterface0 = new UrlsInterface(\"groupname\", \"title\", rEST0);\n    rEST0.setScheme(\"flickr.urls.lookupUser\");\n    // Undeclared exception!\n    try {\n        urlsInterface0.lookupGroup(\"\");\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        //\n        // java.net.MalformedURLException: unknown protocol: flickr.urls.lookupuser\n        //\n        verifyException(\"com.flickr4java.flickr.REST\", e);\n    }\n}\n}"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/PeopleInterfaceTest###testFindByEmail",
        "generated_path": "PeopleInterface_findByEmail.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.flickr4java.flickr.people;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.flickr4java.flickr.REST;\nimport com.flickr4java.flickr.Transport;\nimport com.flickr4java.flickr.people.PeopleInterface;\nimport java.awt.Dimension;\nimport java.awt.Point;\nimport java.awt.Rectangle;\nimport java.awt.geom.Line2D;\nimport java.awt.geom.Rectangle2D;\nimport java.nio.charset.Charset;\nimport java.time.ZoneId;\nimport java.util.Date;\nimport java.util.LinkedHashSet;\nimport java.util.Locale;\nimport java.util.Set;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.util.MockDate;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class PeopleInterface_findByEmail extends PeopleInterface_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void PeopleInterface_findByEmail() throws Throwable {\n    REST rEST0 = new REST();\n    rEST0.setScheme(\"toLf\");\n    PeopleInterface peopleInterface0 = new PeopleInterface(\"toLf\", \"REST\", rEST0);\n    // Undeclared exception!\n    try {\n        peopleInterface0.findByEmail(\"ci\");\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        //\n        // java.net.MalformedURLException: unknown protocol: tolf\n        //\n        verifyException(\"com.flickr4java.flickr.REST\", e);\n    }\n}\n}"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/PandaInterfaceTest###testGetList",
        "generated_path": "PandaInterface_getList.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.flickr4java.flickr.panda;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.flickr4java.flickr.REST;\nimport com.flickr4java.flickr.Transport;\nimport com.flickr4java.flickr.panda.Panda;\nimport com.flickr4java.flickr.panda.PandaInterface;\nimport java.nio.charset.Charset;\nimport java.util.LinkedHashSet;\nimport java.util.Set;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class PandaInterface_getList extends PandaInterface_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void PandaInterface_getList() throws Throwable {\n    REST rEST0 = new REST(\"base string is: %s\", 1394);\n    PandaInterface pandaInterface0 = new PandaInterface(\"base string is: %s\", \"base string is: %s\", rEST0);\n    // Undeclared exception!\n    try {\n        pandaInterface0.getList();\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        //\n        // java.net.MalformedURLException: For input string: \\\" %s\\\"\n        //\n        verifyException(\"com.flickr4java.flickr.REST\", e);\n    }\n}\n}"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/GalleriesInterfaceTest###testCreate",
        "generated_path": "GalleriesInterface_create.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.flickr4java.flickr.galleries;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.flickr4java.flickr.REST;\nimport com.flickr4java.flickr.Transport;\nimport com.flickr4java.flickr.galleries.GalleriesInterface;\nimport java.time.ZoneId;\nimport java.util.Locale;\nimport java.util.Set;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class GalleriesInterface_create extends GalleriesInterface_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void GalleriesInterface_create() throws Throwable {\n    REST rEST0 = new REST();\n    GalleriesInterface galleriesInterface0 = new GalleriesInterface(\"bU\", \"bU\", rEST0);\n    // Undeclared exception!\n    try {\n        galleriesInterface0.create(\"<9uG\u007fU(|y\", \"REST\", \"<9uG\u007fU(|y\");\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        //\n        // java.net.UnknownServiceException: protocol doesn't support output\n        //\n        verifyException(\"com.flickr4java.flickr.REST\", e);\n    }\n}\n}"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/TagsInterfaceTest###testGetClusterPhotos",
        "generated_path": "TagsInterface_getClusterPhotos.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.flickr4java.flickr.tags;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.flickr4java.flickr.REST;\nimport com.flickr4java.flickr.Transport;\nimport com.flickr4java.flickr.tags.TagsInterface;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class TagsInterface_getClusterPhotos extends TagsInterface_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void TagsInterface_getClusterPhotos() throws Throwable {\n    REST rEST0 = new REST(\"\", 10);\n    rEST0.setScheme(\"\");\n    TagsInterface tagsInterface0 = new TagsInterface(\"*+Z3Hy\", \"*+Z3Hy\", rEST0);\n    // Undeclared exception!\n    try {\n        tagsInterface0.getClusterPhotos((String) null, \"\");\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        //\n        // java.net.MalformedURLException: no protocol: :///services/rest/?cluster_id=&method=flickr.tags.getClusterPhotos&tag=null&api_key=%2A%2BZ3Hy\n        //\n        verifyException(\"com.flickr4java.flickr.REST\", e);\n    }\n}\n}"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/PrefsInterfaceTest###testGetGeoPerms",
        "generated_path": "PrefsInterface_getGeoPerms.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.flickr4java.flickr.prefs;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.flickr4java.flickr.REST;\nimport com.flickr4java.flickr.Transport;\nimport com.flickr4java.flickr.prefs.PrefsInterface;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class PrefsInterface_getGeoPerms extends PrefsInterface_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void PrefsInterface_getGeoPerms() throws Throwable {\n    REST rEST0 = new REST(\"setting token to: %s\", 0);\n    PrefsInterface prefsInterface0 = new PrefsInterface(\"setting token to: %s\", \"setting token to: %s\", rEST0);\n    // Undeclared exception!\n    try {\n        prefsInterface0.getGeoPerms();\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        //\n        // java.net.MalformedURLException: For input string: \\\" %s\\\"\n        //\n        verifyException(\"com.flickr4java.flickr.REST\", e);\n    }\n}\n}"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/LicensesInterfaceTest###testGetInfo",
        "generated_path": "LicensesInterface_getInfo.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.flickr4java.flickr.photos.licenses;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.flickr4java.flickr.REST;\nimport com.flickr4java.flickr.Transport;\nimport com.flickr4java.flickr.photos.licenses.LicensesInterface;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class LicensesInterface_getInfo extends LicensesInterface_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void LicensesInterface_getInfo() throws Throwable {\n    REST rEST0 = new REST(\";W~*9vrne@>L='Q\u007f\");\n    LicensesInterface licensesInterface0 = new LicensesInterface(\";W~*9vrne@>L='Q\u007f\", \"}c|+`=!&,\", rEST0);\n    // Undeclared exception!\n    try {\n        licensesInterface0.getInfo();\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        //\n        // java.net.MalformedURLException: Illegal character found in host: control char (code=127)\n        //\n        verifyException(\"com.flickr4java.flickr.REST\", e);\n    }\n}\n}"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/PhotosetsInterfaceTest###testGetInfo",
        "generated_path": "PhotosetsInterface_getInfo.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.flickr4java.flickr.photosets;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.flickr4java.flickr.REST;\nimport com.flickr4java.flickr.Transport;\nimport com.flickr4java.flickr.photosets.PhotosetsInterface;\nimport java.time.ZoneId;\nimport java.util.Locale;\nimport java.util.Set;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class PhotosetsInterface_getInfo extends PhotosetsInterface_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void PhotosetsInterface_getInfo() throws Throwable {\n    REST rEST0 = new REST(\"O'%\u007f|~us{y#5%V\");\n    PhotosetsInterface photosetsInterface0 = new PhotosetsInterface(\"photos\", \"O'%\u007f|~us{y#5%V\", rEST0);\n    // Undeclared exception!\n    try {\n        photosetsInterface0.getInfo(\"REST\");\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        //\n        // java.net.MalformedURLException: Illegal character found in host: control char (code=127)\n        //\n        verifyException(\"com.flickr4java.flickr.REST\", e);\n    }\n}\n}"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/ActivityInterfaceTest###testUserComments",
        "generated_path": "ActivityInterface_userComments.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.flickr4java.flickr.activity;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.flickr4java.flickr.REST;\nimport com.flickr4java.flickr.Transport;\nimport com.flickr4java.flickr.activity.ActivityInterface;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class ActivityInterface_userComments extends ActivityInterface_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void ActivityInterface_userComments() throws Throwable {\n    REST rEST0 = new REST();\n    ActivityInterface activityInterface0 = new ActivityInterface(\"C;A=;<`~P>+W^HH\", \"C;A=;<`~P>+W^HH\", rEST0);\n    try {\n        activityInterface0.userComments(7, (-1253));\n        fail(\"Expecting exception: Exception\");\n    } catch (Exception e) {\n        //\n        // 105: Received 'Not Found' error from Flickr with status 404\n        //\n        verifyException(\"com.flickr4java.flickr.REST\", e);\n    }\n}\n}"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/PhotosInterfaceTest###testSetMeta",
        "generated_path": "PhotosInterface_setMeta.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.flickr4java.flickr.photos;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.flickr4java.flickr.REST;\nimport com.flickr4java.flickr.Transport;\nimport com.flickr4java.flickr.photos.Permissions;\nimport com.flickr4java.flickr.photos.Photo;\nimport com.flickr4java.flickr.photos.PhotosInterface;\nimport com.flickr4java.flickr.photos.SearchParameters;\nimport com.flickr4java.flickr.photos.geo.GeoInterface;\nimport java.nio.charset.Charset;\nimport java.time.Instant;\nimport java.time.ZoneId;\nimport java.util.Date;\nimport java.util.LinkedHashSet;\nimport java.util.Locale;\nimport java.util.Set;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.time.MockInstant;\nimport org.evosuite.runtime.mock.java.util.MockDate;\nimport org.evosuite.runtime.testdata.EvoSuiteURL;\nimport org.evosuite.runtime.testdata.NetworkHandling;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class PhotosInterface_setMeta extends PhotosInterface_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void PhotosInterface_setMeta() throws Throwable {\n    REST rEST0 = new REST();\n    assertEquals(\"api.flickr.com\", rEST0.getHost());\n    assertFalse(rEST0.isProxyAuth());\n    assertEquals(\"https\", rEST0.getScheme());\n    assertEquals(\"REST\", rEST0.getTransportType());\n    assertEquals(\"/services/rest/\", rEST0.getPath());\n    assertEquals(443, rEST0.getPort());\n    assertNotNull(rEST0);\n    PhotosInterface photosInterface0 = new PhotosInterface(\"Qf_8Va%`??Jm=8QVQ\", \"Qf_8Va%`??Jm=8QVQ\", rEST0);\n    assertEquals(\"api.flickr.com\", rEST0.getHost());\n    assertFalse(rEST0.isProxyAuth());\n    assertEquals(\"https\", rEST0.getScheme());\n    assertEquals(\"REST\", rEST0.getTransportType());\n    assertEquals(\"/services/rest/\", rEST0.getPath());\n    assertEquals(443, rEST0.getPort());\n    assertNotNull(photosInterface0);\n    // Undeclared exception!\n    try {\n        photosInterface0.setMeta(\"pool_count\", \"=\", \"pool_count\");\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        //\n        // java.net.UnknownServiceException: protocol doesn't support output\n        //\n        verifyException(\"com.flickr4java.flickr.REST\", e);\n    }\n}\n}"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/CamerasInterfaceTest###testGetBrandModels",
        "generated_path": "CamerasInterface_getBrandModels.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.flickr4java.flickr.cameras;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.flickr4java.flickr.REST;\nimport com.flickr4java.flickr.Transport;\nimport com.flickr4java.flickr.cameras.CamerasInterface;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class CamerasInterface_getBrandModels extends CamerasInterface_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void CamerasInterface_getBrandModels() throws Throwable {\n    REST rEST0 = new REST(\"\", 0);\n    rEST0.setPath(\"G:X=rv\u007fA\");\n    CamerasInterface camerasInterface0 = new CamerasInterface(\"'4aj\", \"'4aj\", rEST0);\n    // Undeclared exception!\n    try {\n        camerasInterface0.getBrandModels(\"'4aj\");\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        //\n        // java.net.MalformedURLException: For input string: \\\"X=rv\u007fA\\\"\n        //\n        verifyException(\"com.flickr4java.flickr.REST\", e);\n    }\n}\n}"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/PeopleInterfaceTest###testGetPublicGroups",
        "generated_path": "PeopleInterface_getPublicGroups.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.flickr4java.flickr.people;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.flickr4java.flickr.REST;\nimport com.flickr4java.flickr.Transport;\nimport com.flickr4java.flickr.people.PeopleInterface;\nimport java.awt.Dimension;\nimport java.awt.Point;\nimport java.awt.Rectangle;\nimport java.awt.geom.Line2D;\nimport java.awt.geom.Rectangle2D;\nimport java.nio.charset.Charset;\nimport java.time.ZoneId;\nimport java.util.Date;\nimport java.util.LinkedHashSet;\nimport java.util.Locale;\nimport java.util.Set;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.util.MockDate;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class PeopleInterface_getPublicGroups extends PeopleInterface_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void PeopleInterface_getPublicGroups() throws Throwable {\n    REST rEST0 = new REST();\n    PeopleInterface peopleInterface0 = new PeopleInterface(\"ffnOfdn\", \"ffnOfdn\", rEST0);\n    rEST0.setScheme(\"toLf\");\n    // Undeclared exception!\n    try {\n        peopleInterface0.getPublicGroups(\"REST\");\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        //\n        // java.net.MalformedURLException: unknown protocol: tolf\n        //\n        verifyException(\"com.flickr4java.flickr.REST\", e);\n    }\n}\n}"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/GroupsInterfaceTest###testGetInfo",
        "generated_path": "GroupsInterface_getInfo.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.flickr4java.flickr.groups;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.flickr4java.flickr.REST;\nimport com.flickr4java.flickr.Transport;\nimport com.flickr4java.flickr.groups.GroupsInterface;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class GroupsInterface_getInfo extends GroupsInterface_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void GroupsInterface_getInfo() throws Throwable {\n    REST rEST0 = new REST(\"scope\", 16384);\n    rEST0.setScheme(\"scope\");\n    GroupsInterface groupsInterface0 = new GroupsInterface(\"scope\", \"scope\", rEST0);\n    // Undeclared exception!\n    try {\n        groupsInterface0.getInfo(\"REST\");\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        //\n        // java.net.MalformedURLException: unknown protocol: scope\n        //\n        verifyException(\"com.flickr4java.flickr.REST\", e);\n    }\n}\n}"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/GeoInterfaceTest###testGetLocation",
        "generated_path": "GeoInterface_getLocation.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.flickr4java.flickr.photos.geo;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.flickr4java.flickr.REST;\nimport com.flickr4java.flickr.Transport;\nimport com.flickr4java.flickr.photos.GeoData;\nimport com.flickr4java.flickr.photos.geo.GeoInterface;\nimport com.flickr4java.flickr.photos.geo.GeoPermissions;\nimport java.time.ZoneId;\nimport java.util.LinkedHashSet;\nimport java.util.Set;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class GeoInterface_getLocation extends GeoInterface_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void GeoInterface_getLocation() throws Throwable {\n    REST rEST0 = new REST(\"isfamily\");\n    rEST0.setScheme(\"n00V\");\n    GeoInterface geoInterface0 = new GeoInterface(\"q^Z5>rh/-9}w\", \"q^Z5>rh/-9}w\", rEST0);\n    // Undeclared exception!\n    try {\n        geoInterface0.getLocation(\"up.flickr.com\");\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        //\n        // java.net.MalformedURLException: unknown protocol: n00v\n        //\n        verifyException(\"com.flickr4java.flickr.REST\", e);\n    }\n}\n}"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/PhotosInterfaceTest###testGetUntagged",
        "generated_path": "PhotosInterface_getUntagged.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.flickr4java.flickr.photos;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.flickr4java.flickr.REST;\nimport com.flickr4java.flickr.Transport;\nimport com.flickr4java.flickr.photos.Permissions;\nimport com.flickr4java.flickr.photos.Photo;\nimport com.flickr4java.flickr.photos.PhotosInterface;\nimport com.flickr4java.flickr.photos.SearchParameters;\nimport com.flickr4java.flickr.photos.geo.GeoInterface;\nimport java.nio.charset.Charset;\nimport java.time.Instant;\nimport java.time.ZoneId;\nimport java.util.Date;\nimport java.util.LinkedHashSet;\nimport java.util.Locale;\nimport java.util.Set;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.time.MockInstant;\nimport org.evosuite.runtime.mock.java.util.MockDate;\nimport org.evosuite.runtime.testdata.EvoSuiteURL;\nimport org.evosuite.runtime.testdata.NetworkHandling;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class PhotosInterface_getUntagged extends PhotosInterface_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void PhotosInterface_getUntagged() throws Throwable {\n    REST rEST0 = new REST();\n    assertEquals(\"/services/rest/\", rEST0.getPath());\n    assertEquals(\"REST\", rEST0.getTransportType());\n    assertFalse(rEST0.isProxyAuth());\n    assertEquals(\"api.flickr.com\", rEST0.getHost());\n    assertEquals(443, rEST0.getPort());\n    assertEquals(\"https\", rEST0.getScheme());\n    assertNotNull(rEST0);\n    PhotosInterface photosInterface0 = new PhotosInterface(\"pages\", \"pages\", rEST0);\n    assertEquals(\"/services/rest/\", rEST0.getPath());\n    assertEquals(\"REST\", rEST0.getTransportType());\n    assertFalse(rEST0.isProxyAuth());\n    assertEquals(\"api.flickr.com\", rEST0.getHost());\n    assertEquals(443, rEST0.getPort());\n    assertEquals(\"https\", rEST0.getScheme());\n    assertNotNull(photosInterface0);\n    try {\n        photosInterface0.getUntagged(0, (-896));\n        fail(\"Expecting exception: Exception\");\n    } catch (Exception e) {\n        //\n        // 105: Received 'Not Found' error from Flickr with status 404\n        //\n        verifyException(\"com.flickr4java.flickr.REST\", e);\n    }\n}\n}"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/StatsInterfaceTest###testGetPopularPhotos",
        "generated_path": "StatsInterface_getPopularPhotos.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.flickr4java.flickr.stats;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.flickr4java.flickr.REST;\nimport com.flickr4java.flickr.Transport;\nimport com.flickr4java.flickr.stats.StatsInterface;\nimport com.flickr4java.flickr.stats.StatsSort;\nimport java.time.Instant;\nimport java.util.Date;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.time.MockInstant;\nimport org.evosuite.runtime.mock.java.util.MockDate;\nimport org.evosuite.runtime.testdata.EvoSuiteURL;\nimport org.evosuite.runtime.testdata.NetworkHandling;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class StatsInterface_getPopularPhotos extends StatsInterface_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void StatsInterface_getPopularPhotos() throws Throwable {\n    REST rEST0 = new REST(\"5r|6I\u007fl3cBFAw?\");\n    StatsInterface statsInterface0 = new StatsInterface(\"^-bOq3mTsi6wdVXnO\", \"xQE!P+1Lj^`fy)Qc\", rEST0);\n    StatsSort statsSort0 = StatsSort.views;\n    // Undeclared exception!\n    try {\n        statsInterface0.getPopularPhotos((Date) null, statsSort0, 0, 0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        //\n        // java.net.MalformedURLException: Illegal character found in host: control char (code=127)\n        //\n        verifyException(\"com.flickr4java.flickr.REST\", e);\n    }\n}\n}"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/PhotosInterfaceTest###testGetNotInSet",
        "generated_path": "PhotosInterface_getNotInSet.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.flickr4java.flickr.photos;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.flickr4java.flickr.REST;\nimport com.flickr4java.flickr.Transport;\nimport com.flickr4java.flickr.photos.Permissions;\nimport com.flickr4java.flickr.photos.Photo;\nimport com.flickr4java.flickr.photos.PhotosInterface;\nimport com.flickr4java.flickr.photos.SearchParameters;\nimport com.flickr4java.flickr.photos.geo.GeoInterface;\nimport java.nio.charset.Charset;\nimport java.time.Instant;\nimport java.time.ZoneId;\nimport java.util.Date;\nimport java.util.LinkedHashSet;\nimport java.util.Locale;\nimport java.util.Set;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.time.MockInstant;\nimport org.evosuite.runtime.mock.java.util.MockDate;\nimport org.evosuite.runtime.testdata.EvoSuiteURL;\nimport org.evosuite.runtime.testdata.NetworkHandling;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class PhotosInterface_getNotInSet extends PhotosInterface_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void PhotosInterface_getNotInSet() throws Throwable {\n    REST rEST0 = new REST();\n    assertEquals(\"/services/rest/\", rEST0.getPath());\n    assertFalse(rEST0.isProxyAuth());\n    assertEquals(\"REST\", rEST0.getTransportType());\n    assertEquals(443, rEST0.getPort());\n    assertEquals(\"https\", rEST0.getScheme());\n    assertEquals(\"api.flickr.com\", rEST0.getHost());\n    assertNotNull(rEST0);\n    PhotosInterface photosInterface0 = new PhotosInterface(\"flickr.photos.recentlyUpdated\", \"flickr.photos.recentlyUpdated\", rEST0);\n    assertEquals(\"/services/rest/\", rEST0.getPath());\n    assertFalse(rEST0.isProxyAuth());\n    assertEquals(\"REST\", rEST0.getTransportType());\n    assertEquals(443, rEST0.getPort());\n    assertEquals(\"https\", rEST0.getScheme());\n    assertEquals(\"api.flickr.com\", rEST0.getHost());\n    assertNotNull(photosInterface0);\n    try {\n        photosInterface0.getNotInSet((-2750), (-2750));\n        fail(\"Expecting exception: Exception\");\n    } catch (Exception e) {\n        //\n        // 105: Received 'Not Found' error from Flickr with status 404\n        //\n        verifyException(\"com.flickr4java.flickr.REST\", e);\n    }\n}\n}"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/PrefsInterfaceTest###testGetSafetyLevel",
        "generated_path": "PrefsInterface_getSafetyLevel.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.flickr4java.flickr.prefs;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.flickr4java.flickr.REST;\nimport com.flickr4java.flickr.Transport;\nimport com.flickr4java.flickr.prefs.PrefsInterface;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class PrefsInterface_getSafetyLevel extends PrefsInterface_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void PrefsInterface_getSafetyLevel() throws Throwable {\n    REST rEST0 = new REST(\"l{XKl#W_xs<\", (-891));\n    rEST0.setScheme(\"\");\n    PrefsInterface prefsInterface0 = new PrefsInterface(\"l{XKl#W_xs<\", \"l{XKl#W_xs<\", rEST0);\n    // Undeclared exception!\n    try {\n        prefsInterface0.getSafetyLevel();\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        //\n        // java.net.MalformedURLException: no protocol: ://l{XKl#W_xs</services/rest/?method=flickr.prefs.getSafetyLevel&api_key=l%7BXKl%23W_xs%3C\n        //\n        verifyException(\"com.flickr4java.flickr.REST\", e);\n    }\n}\n}"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/PeopleInterfaceTest###testGetPhotosOf",
        "generated_path": "PeopleInterface_getPhotosOf.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.flickr4java.flickr.people;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.flickr4java.flickr.REST;\nimport com.flickr4java.flickr.Transport;\nimport com.flickr4java.flickr.people.PeopleInterface;\nimport java.awt.Dimension;\nimport java.awt.Point;\nimport java.awt.Rectangle;\nimport java.awt.geom.Line2D;\nimport java.awt.geom.Rectangle2D;\nimport java.nio.charset.Charset;\nimport java.time.ZoneId;\nimport java.util.Date;\nimport java.util.LinkedHashSet;\nimport java.util.Locale;\nimport java.util.Set;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.util.MockDate;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class PeopleInterface_getPhotosOf extends PeopleInterface_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void PeopleInterface_getPhotosOf() throws Throwable {\n    REST rEST0 = new REST((String) null, (-2032));\n    PeopleInterface peopleInterface0 = new PeopleInterface((String) null, (String) null, rEST0);\n    Charset charset0 = Charset.defaultCharset();\n    Set<String> set0 = charset0.aliases();\n    // Undeclared exception!\n    try {\n        peopleInterface0.getPhotosOf(\"REST\", (String) null, set0, (-2032), 4);\n        fail(\"Expecting exception: IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n        //\n        // Invalid Api key\n        //\n        verifyException(\"com.github.scribejava.core.utils.Preconditions\", e);\n    }\n}\n}"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/GalleriesInterfaceTest###testGetList",
        "generated_path": "GalleriesInterface_getList.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.flickr4java.flickr.galleries;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.flickr4java.flickr.REST;\nimport com.flickr4java.flickr.Transport;\nimport com.flickr4java.flickr.galleries.GalleriesInterface;\nimport java.time.ZoneId;\nimport java.util.Locale;\nimport java.util.Set;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class GalleriesInterface_getList extends GalleriesInterface_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void GalleriesInterface_getList() throws Throwable {\n    REST rEST0 = new REST(\"/.OH352W=\\\"TR7]mCA\");\n    GalleriesInterface galleriesInterface0 = new GalleriesInterface(\"method\", \"/.OH352W=\\\"TR7]mCA\", rEST0);\n    // Undeclared exception!\n    try {\n        galleriesInterface0.getList(\"method\", 3673, 0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        //\n        // java.net.UnknownServiceException: protocol doesn't support output\n        //\n        verifyException(\"com.flickr4java.flickr.REST\", e);\n    }\n}\n}"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/TagsInterfaceTest###testGetListUser",
        "generated_path": "TagsInterface_getListUser.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.flickr4java.flickr.tags;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.flickr4java.flickr.REST;\nimport com.flickr4java.flickr.Transport;\nimport com.flickr4java.flickr.tags.TagsInterface;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class TagsInterface_getListUser extends TagsInterface_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void TagsInterface_getListUser() throws Throwable {\n    REST rEST0 = new REST(\"`\u007f]Fl,7<c^6\");\n    TagsInterface tagsInterface0 = new TagsInterface(\"`\u007f]Fl,7<c^6\", \"`\u007f]Fl,7<c^6\", rEST0);\n    // Undeclared exception!\n    try {\n        tagsInterface0.getListUser(\"up.flickr.com\");\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        //\n        // java.net.MalformedURLException: Illegal character found in host: control char (code=127)\n        //\n        verifyException(\"com.flickr4java.flickr.REST\", e);\n    }\n}\n}"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/GeoInterfaceTest###testGetPerms",
        "generated_path": "GeoInterface_getPerms.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.flickr4java.flickr.photos.geo;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.flickr4java.flickr.REST;\nimport com.flickr4java.flickr.Transport;\nimport com.flickr4java.flickr.photos.GeoData;\nimport com.flickr4java.flickr.photos.geo.GeoInterface;\nimport com.flickr4java.flickr.photos.geo.GeoPermissions;\nimport java.time.ZoneId;\nimport java.util.LinkedHashSet;\nimport java.util.Set;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class GeoInterface_getPerms extends GeoInterface_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void GeoInterface_getPerms() throws Throwable {\n    REST rEST0 = new REST(\"\\\"1EeC!:An'PQJCz7\", 0);\n    GeoInterface geoInterface0 = new GeoInterface(\"lat\", \"lat\", rEST0);\n    // Undeclared exception!\n    try {\n        geoInterface0.getPerms(\"vE\");\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        //\n        // java.net.MalformedURLException: For input string: \\\"An'PQJCz7\\\"\n        //\n        verifyException(\"com.flickr4java.flickr.REST\", e);\n    }\n}\n}"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/GalleriesInterfaceTest###testGetInfo",
        "generated_path": "GalleriesInterface_getInfo.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.flickr4java.flickr.galleries;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.flickr4java.flickr.REST;\nimport com.flickr4java.flickr.Transport;\nimport com.flickr4java.flickr.galleries.GalleriesInterface;\nimport java.time.ZoneId;\nimport java.util.Locale;\nimport java.util.Set;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class GalleriesInterface_getInfo extends GalleriesInterface_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void GalleriesInterface_getInfo() throws Throwable {\n    REST rEST0 = new REST(\"SQ3eY\");\n    GalleriesInterface galleriesInterface0 = new GalleriesInterface(\"SQ3eY\", \"SQ3eY\", rEST0);\n    // Undeclared exception!\n    try {\n        galleriesInterface0.getInfo(\"flickr.galleries.editPhoto\");\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        //\n        // java.net.UnknownServiceException: protocol doesn't support output\n        //\n        verifyException(\"com.flickr4java.flickr.REST\", e);\n    }\n}\n}"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/PlacesInterfaceTest###testGetInfo",
        "generated_path": "PlacesInterface_getInfo.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.flickr4java.flickr.places;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.flickr4java.flickr.REST;\nimport com.flickr4java.flickr.Transport;\nimport com.flickr4java.flickr.places.PlacesInterface;\nimport java.time.Instant;\nimport java.util.Date;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.time.MockInstant;\nimport org.evosuite.runtime.mock.java.util.MockDate;\nimport org.evosuite.runtime.testdata.EvoSuiteURL;\nimport org.evosuite.runtime.testdata.NetworkHandling;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class PlacesInterface_getInfo extends PlacesInterface_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void PlacesInterface_getInfo() throws Throwable {\n    REST rEST0 = new REST(\"p@^`<WO*TDi\");\n    PlacesInterface placesInterface0 = new PlacesInterface(\"gKLvZ'Uu2li(e-\", \"gKLvZ'Uu2li(e-\", rEST0);\n    EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL(\"https://p@^`<WO*TDi/services/rest/?woe_id=up.flickr.com&method=flickr.places.getInfo&place_id=&api_key=gKLvZ%27Uu2li%28e-\");\n    NetworkHandling.createRemoteTextFile(evoSuiteURL0, \"REST\");\n    // Undeclared exception!\n    try {\n        placesInterface0.getInfo(\"\", \"up.flickr.com\");\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        //\n        // org.xml.sax.SAXParseException; lineNumber: 1; columnNumber: 1; Content is not allowed in prolog.\n        //\n        verifyException(\"com.flickr4java.flickr.REST\", e);\n    }\n}\n}"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/OAuthUtilitiesTest###testBuildMultipartRequest",
        "generated_path": "OAuthUtilities_buildMultipartRequest.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.flickr4java.flickr.util;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.flickr4java.flickr.Flickr;\nimport com.flickr4java.flickr.util.OAuthUtilities;\nimport com.github.scribejava.apis.MediaWikiApi;\nimport com.github.scribejava.core.httpclient.jdk.JDKHttpClient;\nimport com.github.scribejava.core.httpclient.jdk.JDKHttpClientConfig;\nimport com.github.scribejava.core.model.OAuthRequest;\nimport com.github.scribejava.core.model.Verb;\nimport com.github.scribejava.core.oauth.OAuth10aService;\nimport java.io.PipedOutputStream;\nimport java.util.HashMap;\nimport java.util.Map;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class OAuthUtilities_buildMultipartRequest extends OAuthUtilities_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test8() throws Throwable {\n    HashMap<String, String> hashMap0 = new HashMap<String, String>();\n    OAuthRequest oAuthRequest0 = OAuthUtilities.buildMultipartRequest(hashMap0, \"+\u007f[X<FBw\");\n    Integer integer0 = new Integer(50);\n    OAuth10aService oAuth10aService0 = OAuthUtilities.createOAuthService(\"+\u007f[X<FBw\", \"+\u007f[X<FBw\", integer0, integer0);\n    OAuthUtilities.signRequest(oAuth10aService0, oAuthRequest0, (String) null);\n    assertEquals(\"1.0\", oAuth10aService0.getVersion());\n}\n}"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/PlacesInterfaceTest###testResolvePlaceId",
        "generated_path": "PlacesInterface_resolvePlaceId.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.flickr4java.flickr.places;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.flickr4java.flickr.REST;\nimport com.flickr4java.flickr.Transport;\nimport com.flickr4java.flickr.places.PlacesInterface;\nimport java.time.Instant;\nimport java.util.Date;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.time.MockInstant;\nimport org.evosuite.runtime.mock.java.util.MockDate;\nimport org.evosuite.runtime.testdata.EvoSuiteURL;\nimport org.evosuite.runtime.testdata.NetworkHandling;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class PlacesInterface_resolvePlaceId extends PlacesInterface_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void PlacesInterface_resolvePlaceId() throws Throwable {\n    REST rEST0 = new REST(\"i9E\\\"X+L=bfJ>HBc0:y>\", 22);\n    PlacesInterface placesInterface0 = new PlacesInterface(\"*C\", \"*C\", rEST0);\n    // Undeclared exception!\n    try {\n        placesInterface0.resolvePlaceId(\"up.flickr.com\");\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        //\n        // java.net.MalformedURLException: For input string: \\\"y>\\\"\n        //\n        verifyException(\"com.flickr4java.flickr.REST\", e);\n    }\n}\n}"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/ContactsInterfaceTest###testGetList",
        "generated_path": "ContactsInterface_getList.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.flickr4java.flickr.contacts;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.flickr4java.flickr.REST;\nimport com.flickr4java.flickr.Transport;\nimport com.flickr4java.flickr.contacts.ContactsInterface;\nimport java.util.Date;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.util.MockDate;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class ContactsInterface_getList extends ContactsInterface_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void ContactsInterface_getList() throws Throwable {\n    REST rEST0 = new REST(\"nsid\");\n    rEST0.setScheme(\"nsid\");\n    ContactsInterface contactsInterface0 = new ContactsInterface(\"nsid\", \"nsid\", rEST0);\n    // Undeclared exception!\n    try {\n        contactsInterface0.getList();\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        //\n        // java.net.MalformedURLException: unknown protocol: nsid\n        //\n        verifyException(\"com.flickr4java.flickr.REST\", e);\n    }\n}\n}"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/ActivityInterfaceTest###testUserPhotos",
        "generated_path": "ActivityInterface_userPhotos.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.flickr4java.flickr.activity;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.flickr4java.flickr.REST;\nimport com.flickr4java.flickr.Transport;\nimport com.flickr4java.flickr.activity.ActivityInterface;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class ActivityInterface_userPhotos extends ActivityInterface_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void ActivityInterface_userPhotos() throws Throwable {\n    REST rEST0 = new REST();\n    ActivityInterface activityInterface0 = new ActivityInterface(\"Timeframe-argument to getUserPhotos() not valid\", \"Timeframe-argument to getUserPhotos() not valid\", rEST0);\n    try {\n        activityInterface0.userPhotos(3559, (-226), \"up.flickr.com\");\n        fail(\"Expecting exception: Exception\");\n    } catch (Exception e) {\n        //\n        // 0: Timeframe-argument to getUserPhotos() not valid\n        //\n        verifyException(\"com.flickr4java.flickr.activity.ActivityInterface\", e);\n    }\n}\n}"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/TagsInterfaceTest###testGetRelated",
        "generated_path": "TagsInterface_getRelated.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.flickr4java.flickr.tags;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.flickr4java.flickr.REST;\nimport com.flickr4java.flickr.Transport;\nimport com.flickr4java.flickr.tags.TagsInterface;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class TagsInterface_getRelated extends TagsInterface_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void TagsInterface_getRelated() throws Throwable {\n    REST rEST0 = new REST(\":q&%Z%&\");\n    TagsInterface tagsInterface0 = new TagsInterface(\"iuTT;D2:z+'\", \":q&%Z%&\", rEST0);\n    // Undeclared exception!\n    try {\n        tagsInterface0.getRelated(\"K#3`q^!58g;\u007fwOt^\");\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        //\n        // java.net.MalformedURLException: For input string: \\\"q&%Z%&\\\"\n        //\n        verifyException(\"com.flickr4java.flickr.REST\", e);\n    }\n}\n}"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/UrlsInterfaceTest###testGetUserPhotos",
        "generated_path": "UrlsInterface_getUserPhotos.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.flickr4java.flickr.urls;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.flickr4java.flickr.REST;\nimport com.flickr4java.flickr.Transport;\nimport com.flickr4java.flickr.urls.UrlsInterface;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class UrlsInterface_getUserPhotos extends UrlsInterface_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void UrlsInterface_getUserPhotos() throws Throwable {\n    REST rEST0 = new REST(\"i';)b8:PS\", 129);\n    UrlsInterface urlsInterface0 = new UrlsInterface(\"i';)b8:PS\", \"=+`\", rEST0);\n    // Undeclared exception!\n    try {\n        urlsInterface0.getUserPhotos(\"kLv3Fx^=edCl.s\");\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        //\n        // java.net.MalformedURLException: For input string: \\\"PS\\\"\n        //\n        verifyException(\"com.flickr4java.flickr.REST\", e);\n    }\n}\n}"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/PlacesInterfaceTest###testPlacesForUser",
        "generated_path": "PlacesInterface_placesForUser.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.flickr4java.flickr.places;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.flickr4java.flickr.REST;\nimport com.flickr4java.flickr.Transport;\nimport com.flickr4java.flickr.places.PlacesInterface;\nimport java.time.Instant;\nimport java.util.Date;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.time.MockInstant;\nimport org.evosuite.runtime.mock.java.util.MockDate;\nimport org.evosuite.runtime.testdata.EvoSuiteURL;\nimport org.evosuite.runtime.testdata.NetworkHandling;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class PlacesInterface_placesForUser extends PlacesInterface_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void PlacesInterface_placesForUser() throws Throwable {\n    REST rEST0 = new REST();\n    PlacesInterface placesInterface0 = new PlacesInterface(\"eZQ,ey3$\", \"eZQ,ey3$\", rEST0);\n    MockDate mockDate0 = new MockDate(2, 23, 7, 2, 154, 4164);\n    MockDate mockDate1 = new MockDate();\n    try {\n        placesInterface0.placesForUser(7, \"Gs5YxJ!qD2\u007fq\\\"S?<C}I\", \"up.flickr.com\", \"Gs5YxJ!qD2\u007fq\\\"S?<C}I\", mockDate0, mockDate0, mockDate0, mockDate1);\n        fail(\"Expecting exception: Exception\");\n    } catch (Exception e) {\n        //\n        // 105: Received 'Not Found' error from Flickr with status 404\n        //\n        verifyException(\"com.flickr4java.flickr.REST\", e);\n    }\n}\n}"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/PhotosInterfaceTest###testGetPerms",
        "generated_path": "PhotosInterface_getPerms.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.flickr4java.flickr.photos;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.flickr4java.flickr.REST;\nimport com.flickr4java.flickr.Transport;\nimport com.flickr4java.flickr.photos.Permissions;\nimport com.flickr4java.flickr.photos.Photo;\nimport com.flickr4java.flickr.photos.PhotosInterface;\nimport com.flickr4java.flickr.photos.SearchParameters;\nimport com.flickr4java.flickr.photos.geo.GeoInterface;\nimport java.nio.charset.Charset;\nimport java.time.Instant;\nimport java.time.ZoneId;\nimport java.util.Date;\nimport java.util.LinkedHashSet;\nimport java.util.Locale;\nimport java.util.Set;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.time.MockInstant;\nimport org.evosuite.runtime.mock.java.util.MockDate;\nimport org.evosuite.runtime.testdata.EvoSuiteURL;\nimport org.evosuite.runtime.testdata.NetworkHandling;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class PhotosInterface_getPerms extends PhotosInterface_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void PhotosInterface_getPerms() throws Throwable {\n    REST rEST0 = new REST(\"true\");\n    assertEquals(\"REST\", rEST0.getTransportType());\n    assertEquals(\"https\", rEST0.getScheme());\n    assertEquals(\"true\", rEST0.getHost());\n    assertEquals(443, rEST0.getPort());\n    assertFalse(rEST0.isProxyAuth());\n    assertEquals(\"/services/rest/\", rEST0.getPath());\n    assertNotNull(rEST0);\n    rEST0.setScheme(\"oauth_consumer_key\");\n    assertEquals(\"REST\", rEST0.getTransportType());\n    assertEquals(\"oauth_consumer_key\", rEST0.getScheme());\n    assertEquals(\"true\", rEST0.getHost());\n    assertEquals(443, rEST0.getPort());\n    assertFalse(rEST0.isProxyAuth());\n    assertEquals(\"/services/rest/\", rEST0.getPath());\n    PhotosInterface photosInterface0 = new PhotosInterface(\"dERA!&B5{tT'&u\", \"dERA!&B5{tT'&u\", rEST0);\n    assertEquals(\"REST\", rEST0.getTransportType());\n    assertEquals(\"oauth_consumer_key\", rEST0.getScheme());\n    assertEquals(\"true\", rEST0.getHost());\n    assertEquals(443, rEST0.getPort());\n    assertFalse(rEST0.isProxyAuth());\n    assertEquals(\"/services/rest/\", rEST0.getPath());\n    assertNotNull(photosInterface0);\n    // Undeclared exception!\n    try {\n        photosInterface0.getPerms(\"flickr.photos.geo.getLocation\");\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        //\n        // java.net.MalformedURLException: no protocol: oauth_consumer_key://true/services/rest/?method=flickr.photos.getPerms&photo_id=flickr.photos.geo.getLocation&api_key=dERA%21%26B5%7BtT%27%26u\n        //\n        verifyException(\"com.flickr4java.flickr.REST\", e);\n    }\n}\n}"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/PeopleInterfaceTest###testGetGroups",
        "generated_path": "PeopleInterface_getGroups.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.flickr4java.flickr.people;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.flickr4java.flickr.REST;\nimport com.flickr4java.flickr.Transport;\nimport com.flickr4java.flickr.people.PeopleInterface;\nimport java.awt.Dimension;\nimport java.awt.Point;\nimport java.awt.Rectangle;\nimport java.awt.geom.Line2D;\nimport java.awt.geom.Rectangle2D;\nimport java.nio.charset.Charset;\nimport java.time.ZoneId;\nimport java.util.Date;\nimport java.util.LinkedHashSet;\nimport java.util.Locale;\nimport java.util.Set;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.util.MockDate;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class PeopleInterface_getGroups extends PeopleInterface_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void PeopleInterface_getGroups() throws Throwable {\n    REST rEST0 = new REST(\"S\\\";$cU\u007f)X,A2D\");\n    PeopleInterface peopleInterface0 = new PeopleInterface(\"S\\\";$cU\u007f)X,A2D\", \"ThJ9=-7D^S3\", rEST0);\n    // Undeclared exception!\n    try {\n        peopleInterface0.getGroups(\"up.flickr.com\");\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        //\n        // java.net.MalformedURLException: Illegal character found in host: control char (code=127)\n        //\n        verifyException(\"com.flickr4java.flickr.REST\", e);\n    }\n}\n}"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/PlacesInterfaceTest###testGetChildrenWithPhotosPublic",
        "generated_path": "PlacesInterface_getChildrenWithPhotosPublic.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.flickr4java.flickr.places;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.flickr4java.flickr.REST;\nimport com.flickr4java.flickr.Transport;\nimport com.flickr4java.flickr.places.PlacesInterface;\nimport java.time.Instant;\nimport java.util.Date;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.time.MockInstant;\nimport org.evosuite.runtime.mock.java.util.MockDate;\nimport org.evosuite.runtime.testdata.EvoSuiteURL;\nimport org.evosuite.runtime.testdata.NetworkHandling;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class PlacesInterface_getChildrenWithPhotosPublic extends PlacesInterface_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void PlacesInterface_getChildrenWithPhotosPublic() throws Throwable {\n    REST rEST0 = new REST();\n    EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL(\"https://api.flickr.com/services/rest/?woe_id=&method=flickr.places.getChildrenWithPhotosPublic&place_id=%27%2Bh%28J%27W%21kDg5U%40Z%2B%3C&api_key=%27%2Bh%28J%27W%21kDg5U%40Z%2B%3C\");\n    NetworkHandling.createRemoteTextFile(evoSuiteURL0, \"ZMg1W3<\");\n    PlacesInterface placesInterface0 = new PlacesInterface(\"'+h(J'W!kDg5U@Z+<\", \"tags\", rEST0);\n    // Undeclared exception!\n    try {\n        placesInterface0.getChildrenWithPhotosPublic(\"'+h(J'W!kDg5U@Z+<\", \"\");\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        //\n        // org.xml.sax.SAXParseException; lineNumber: 1; columnNumber: 1; Content is not allowed in prolog.\n        //\n        verifyException(\"com.flickr4java.flickr.REST\", e);\n    }\n}\n}"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/CollectionsInterfaceTest###testGetInfo",
        "generated_path": "CollectionsInterface_getInfo.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.flickr4java.flickr.collections;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.flickr4java.flickr.REST;\nimport com.flickr4java.flickr.Transport;\nimport com.flickr4java.flickr.collections.CollectionsInterface;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class CollectionsInterface_getInfo extends CollectionsInterface_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void CollectionsInterface_getInfo() throws Throwable {\n    REST rEST0 = new REST(\"\");\n    CollectionsInterface collectionsInterface0 = new CollectionsInterface(\"Zlh\\\"pO+M;Z*XE3\", \"re_@CCb]ngu!/GAc*2\", rEST0);\n    rEST0.setScheme(\"re_@CCb]ngu!/GAc*2\");\n    // Undeclared exception!\n    try {\n        collectionsInterface0.getInfo(\"\");\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        //\n        // java.net.MalformedURLException: no protocol: re_@CCb]ngu!/GAc*2:///services/rest/?collection_id=&method=flickr.collections.getInfo&api_key=Zlh%22pO%2BM%3BZ%2AXE3\n        //\n        verifyException(\"com.flickr4java.flickr.REST\", e);\n    }\n}\n}"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/PhotosInterfaceTest###testGetExif",
        "generated_path": "PhotosInterface_getExif.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.flickr4java.flickr.photos;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.flickr4java.flickr.REST;\nimport com.flickr4java.flickr.Transport;\nimport com.flickr4java.flickr.photos.Permissions;\nimport com.flickr4java.flickr.photos.Photo;\nimport com.flickr4java.flickr.photos.PhotosInterface;\nimport com.flickr4java.flickr.photos.SearchParameters;\nimport com.flickr4java.flickr.photos.geo.GeoInterface;\nimport java.nio.charset.Charset;\nimport java.time.Instant;\nimport java.time.ZoneId;\nimport java.util.Date;\nimport java.util.LinkedHashSet;\nimport java.util.Locale;\nimport java.util.Set;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.time.MockInstant;\nimport org.evosuite.runtime.mock.java.util.MockDate;\nimport org.evosuite.runtime.testdata.EvoSuiteURL;\nimport org.evosuite.runtime.testdata.NetworkHandling;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class PhotosInterface_getExif extends PhotosInterface_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void PhotosInterface_getExif() throws Throwable {\n    REST rEST0 = new REST(\"[sTdmH\\\"\");\n    assertEquals(\"/services/rest/\", rEST0.getPath());\n    assertEquals(443, rEST0.getPort());\n    assertEquals(\"[sTdmH\\\"\", rEST0.getHost());\n    assertEquals(\"REST\", rEST0.getTransportType());\n    assertFalse(rEST0.isProxyAuth());\n    assertEquals(\"https\", rEST0.getScheme());\n    assertNotNull(rEST0);\n    PhotosInterface photosInterface0 = new PhotosInterface(\"2MS{1Gplrhh&6[czn2q\", \"b=?KA6v!(]xQJ\", rEST0);\n    assertEquals(\"/services/rest/\", rEST0.getPath());\n    assertEquals(443, rEST0.getPort());\n    assertEquals(\"[sTdmH\\\"\", rEST0.getHost());\n    assertEquals(\"REST\", rEST0.getTransportType());\n    assertFalse(rEST0.isProxyAuth());\n    assertEquals(\"https\", rEST0.getScheme());\n    assertNotNull(photosInterface0);\n    // Undeclared exception!\n    try {\n        photosInterface0.getExif(\";n0X\", \"'>SFr>_`y\");\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        //\n        // java.net.MalformedURLException: Invalid authority field: [sTdmH\\\"\n        //\n        verifyException(\"com.flickr4java.flickr.REST\", e);\n    }\n}\n}"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/BlogsInterfaceTest###testGetServices",
        "generated_path": "BlogsInterface_getServices.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.flickr4java.flickr.blogs;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.flickr4java.flickr.REST;\nimport com.flickr4java.flickr.Transport;\nimport com.flickr4java.flickr.blogs.BlogsInterface;\nimport com.flickr4java.flickr.photos.Photo;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class BlogsInterface_getServices extends BlogsInterface_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void BlogsInterface_getServices() throws Throwable {\n    REST rEST0 = new REST(\"9MG[>[T\u007fUSgEh<mO\");\n    BlogsInterface blogsInterface0 = new BlogsInterface(\"9MG[>[T\u007fUSgEh<mO\", \"9MG[>[T\u007fUSgEh<mO\", rEST0);\n    // Undeclared exception!\n    try {\n        blogsInterface0.getServices();\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        //\n        // java.net.MalformedURLException: Illegal character found in host: control char (code=127)\n        //\n        verifyException(\"com.flickr4java.flickr.REST\", e);\n    }\n}\n}"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/PhotosInterfaceTest###testGetContext",
        "generated_path": "PhotosInterface_getContext.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.flickr4java.flickr.photos;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.flickr4java.flickr.REST;\nimport com.flickr4java.flickr.Transport;\nimport com.flickr4java.flickr.photos.Permissions;\nimport com.flickr4java.flickr.photos.Photo;\nimport com.flickr4java.flickr.photos.PhotosInterface;\nimport com.flickr4java.flickr.photos.SearchParameters;\nimport com.flickr4java.flickr.photos.geo.GeoInterface;\nimport java.nio.charset.Charset;\nimport java.time.Instant;\nimport java.time.ZoneId;\nimport java.util.Date;\nimport java.util.LinkedHashSet;\nimport java.util.Locale;\nimport java.util.Set;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.time.MockInstant;\nimport org.evosuite.runtime.mock.java.util.MockDate;\nimport org.evosuite.runtime.testdata.EvoSuiteURL;\nimport org.evosuite.runtime.testdata.NetworkHandling;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class PhotosInterface_getContext extends PhotosInterface_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void PhotosInterface_getContext() throws Throwable {\n    REST rEST0 = new REST(\"3Z\u007fp` 4\", 5718);\n    assertEquals(\"3Z\u007fp` 4\", rEST0.getHost());\n    assertEquals(5718, rEST0.getPort());\n    assertEquals(\"/services/rest/\", rEST0.getPath());\n    assertFalse(rEST0.isProxyAuth());\n    assertEquals(\"REST\", rEST0.getTransportType());\n    assertEquals(\"https\", rEST0.getScheme());\n    assertNotNull(rEST0);\n    PhotosInterface photosInterface0 = new PhotosInterface(\"3Z\u007fp` 4\", \"3Z\u007fp` 4\", rEST0);\n    assertEquals(\"3Z\u007fp` 4\", rEST0.getHost());\n    assertEquals(5718, rEST0.getPort());\n    assertEquals(\"/services/rest/\", rEST0.getPath());\n    assertFalse(rEST0.isProxyAuth());\n    assertEquals(\"REST\", rEST0.getTransportType());\n    assertEquals(\"https\", rEST0.getScheme());\n    assertNotNull(photosInterface0);\n    // Undeclared exception!\n    try {\n        photosInterface0.getContext(\"\");\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        //\n        // java.net.MalformedURLException: Illegal character found in host: control char (code=127)\n        //\n        verifyException(\"com.flickr4java.flickr.REST\", e);\n    }\n}\n}"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/MachinetagsInterfaceTest###testGetRecentValues",
        "generated_path": "MachinetagsInterface_getRecentValues.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.flickr4java.flickr.machinetags;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.flickr4java.flickr.REST;\nimport com.flickr4java.flickr.Transport;\nimport com.flickr4java.flickr.machinetags.MachinetagsInterface;\nimport java.util.Date;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.util.MockDate;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class MachinetagsInterface_getRecentValues extends MachinetagsInterface_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void MachinetagsInterface_getRecentValues() throws Throwable {\n    REST rEST0 = new REST();\n    MachinetagsInterface machinetagsInterface0 = new MachinetagsInterface(\"k-WXXu*.=-xjyjw\\\"\", \"k-WXXu*.=-xjyjw\\\"\", rEST0);\n    rEST0.setPath(\"@g8w\u007fX^\");\n    // Undeclared exception!\n    try {\n        machinetagsInterface0.getRecentValues(\"@g8w\u007fX^\", \"\", (Date) null);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        //\n        // java.net.MalformedURLException: Illegal character found in host: control char (code=127)\n        //\n        verifyException(\"com.flickr4java.flickr.REST\", e);\n    }\n}\n}"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/PlacesInterfaceTest###testPlacesForBoundingBox",
        "generated_path": "PlacesInterface_placesForBoundingBox.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.flickr4java.flickr.places;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.flickr4java.flickr.REST;\nimport com.flickr4java.flickr.Transport;\nimport com.flickr4java.flickr.places.PlacesInterface;\nimport java.time.Instant;\nimport java.util.Date;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.time.MockInstant;\nimport org.evosuite.runtime.mock.java.util.MockDate;\nimport org.evosuite.runtime.testdata.EvoSuiteURL;\nimport org.evosuite.runtime.testdata.NetworkHandling;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class PlacesInterface_placesForBoundingBox extends PlacesInterface_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void PlacesInterface_placesForBoundingBox() throws Throwable {\n    REST rEST0 = new REST();\n    PlacesInterface placesInterface0 = new PlacesInterface(\"F{}`P{6+j%0T\", \"F{}`P{6+j%0T\", rEST0);\n    try {\n        placesInterface0.placesForBoundingBox(1175, \"[:Fu&SB\");\n        fail(\"Expecting exception: Exception\");\n    } catch (Exception e) {\n        //\n        // 33: Not a valid place type\n        //\n        verifyException(\"com.flickr4java.flickr.places.PlacesInterface\", e);\n    }\n}\n}"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/BlogsInterfaceTest###testGetList",
        "generated_path": "BlogsInterface_getList.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.flickr4java.flickr.blogs;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.flickr4java.flickr.REST;\nimport com.flickr4java.flickr.Transport;\nimport com.flickr4java.flickr.blogs.BlogsInterface;\nimport com.flickr4java.flickr.photos.Photo;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class BlogsInterface_getList extends BlogsInterface_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void BlogsInterface_getList() throws Throwable {\n    REST rEST0 = new REST();\n    BlogsInterface blogsInterface0 = new BlogsInterface(\"REST\", \"up.flickr.com\", rEST0);\n    // Undeclared exception!\n    try {\n        blogsInterface0.getList();\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        //\n        // java.net.UnknownServiceException: protocol doesn't support output\n        //\n        verifyException(\"com.flickr4java.flickr.REST\", e);\n    }\n}\n}"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/OAuthUtilitiesTest###testBuildNormalPostRequest",
        "generated_path": "OAuthUtilities_buildNormalPostRequest.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.flickr4java.flickr.util;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.flickr4java.flickr.Flickr;\nimport com.flickr4java.flickr.util.OAuthUtilities;\nimport com.github.scribejava.apis.MediaWikiApi;\nimport com.github.scribejava.core.httpclient.jdk.JDKHttpClient;\nimport com.github.scribejava.core.httpclient.jdk.JDKHttpClientConfig;\nimport com.github.scribejava.core.model.OAuthRequest;\nimport com.github.scribejava.core.model.Verb;\nimport com.github.scribejava.core.oauth.OAuth10aService;\nimport java.io.PipedOutputStream;\nimport java.util.HashMap;\nimport java.util.Map;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class OAuthUtilities_buildNormalPostRequest extends OAuthUtilities_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test6() throws Throwable {\n    HashMap<String, OAuthUtilities> hashMap0 = new HashMap<String, OAuthUtilities>();\n    Flickr.debugRequest = true;\n    OAuth10aService oAuth10aService0 = OAuthUtilities.createOAuthService(\"Gyx&lI hQi5LVUs\", \"Gyx&lI hQi5LVUs\", (Integer) null, (Integer) null);\n    OAuthRequest oAuthRequest0 = OAuthUtilities.buildNormalPostRequest(hashMap0, \"Gyx&lI hQi5LVUs\");\n    OAuthUtilities.signRequest(oAuth10aService0, oAuthRequest0, \"Gyx&lI hQi5LVUs\");\n    assertEquals(\"1.0\", oAuth10aService0.getVersion());\n}\n}"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/PhotosInterfaceTest###testSetSafetyLevel",
        "generated_path": "PhotosInterface_setSafetyLevel.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.flickr4java.flickr.photos;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.flickr4java.flickr.REST;\nimport com.flickr4java.flickr.Transport;\nimport com.flickr4java.flickr.photos.Permissions;\nimport com.flickr4java.flickr.photos.Photo;\nimport com.flickr4java.flickr.photos.PhotosInterface;\nimport com.flickr4java.flickr.photos.SearchParameters;\nimport com.flickr4java.flickr.photos.geo.GeoInterface;\nimport java.nio.charset.Charset;\nimport java.time.Instant;\nimport java.time.ZoneId;\nimport java.util.Date;\nimport java.util.LinkedHashSet;\nimport java.util.Locale;\nimport java.util.Set;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.time.MockInstant;\nimport org.evosuite.runtime.mock.java.util.MockDate;\nimport org.evosuite.runtime.testdata.EvoSuiteURL;\nimport org.evosuite.runtime.testdata.NetworkHandling;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class PhotosInterface_setSafetyLevel extends PhotosInterface_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void PhotosInterface_setSafetyLevel() throws Throwable {\n    PhotosInterface photosInterface0 = new PhotosInterface(\"perpage\", \"perpage\", (Transport) null);\n    assertNotNull(photosInterface0);\n    Boolean boolean0 = new Boolean(false);\n    assertNotNull(boolean0);\n    assertFalse(boolean0);\n    // Undeclared exception!\n    try {\n        photosInterface0.setSafetyLevel(\"G\", \"G\", boolean0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        //\n        // no message in exception (getMessage() returned null)\n        //\n        verifyException(\"com.flickr4java.flickr.photos.PhotosInterface\", e);\n    }\n}\n}"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/CommentsInterfaceTest###testGetList",
        "generated_path": "CommentsInterface_getList.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.flickr4java.flickr.photos.comments;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.flickr4java.flickr.REST;\nimport com.flickr4java.flickr.Transport;\nimport com.flickr4java.flickr.photos.comments.CommentsInterface;\nimport java.nio.charset.Charset;\nimport java.time.ZoneId;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.LinkedHashSet;\nimport java.util.Locale;\nimport java.util.Set;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.util.MockDate;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class CommentsInterface_getList extends CommentsInterface_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void CommentsInterface_getList() throws Throwable {\n    REST rEST0 = new REST(\"_amtOn+87zEVE`h:~7S\");\n    CommentsInterface commentsInterface0 = new CommentsInterface(\"_amtOn+87zEVE`h:~7S\", \"|LUg_-L <\", rEST0);\n    // Undeclared exception!\n    try {\n        commentsInterface0.getList(\"REST\");\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        //\n        // java.net.MalformedURLException: For input string: \\\"~7S\\\"\n        //\n        verifyException(\"com.flickr4java.flickr.REST\", e);\n    }\n}\n}"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/UrlsInterfaceTest###testLookupGallery",
        "generated_path": "UrlsInterface_lookupGallery.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.flickr4java.flickr.urls;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.flickr4java.flickr.REST;\nimport com.flickr4java.flickr.Transport;\nimport com.flickr4java.flickr.urls.UrlsInterface;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class UrlsInterface_lookupGallery extends UrlsInterface_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void UrlsInterface_lookupGallery() throws Throwable {\n    REST rEST0 = new REST(\"sYNM_OF(/s#m6Iq'rY\");\n    UrlsInterface urlsInterface0 = new UrlsInterface(\"count_videos\", \",^^a\", rEST0);\n    rEST0.setScheme((String) null);\n    // Undeclared exception!\n    try {\n        urlsInterface0.lookupGallery(\"count_videos\");\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        //\n        // java.net.MalformedURLException: unknown protocol: null\n        //\n        verifyException(\"com.flickr4java.flickr.REST\", e);\n    }\n}\n}"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/PhotosInterfaceTest###testSetContentType",
        "generated_path": "PhotosInterface_setContentType.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.flickr4java.flickr.photos;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.flickr4java.flickr.REST;\nimport com.flickr4java.flickr.Transport;\nimport com.flickr4java.flickr.photos.Permissions;\nimport com.flickr4java.flickr.photos.Photo;\nimport com.flickr4java.flickr.photos.PhotosInterface;\nimport com.flickr4java.flickr.photos.SearchParameters;\nimport com.flickr4java.flickr.photos.geo.GeoInterface;\nimport java.nio.charset.Charset;\nimport java.time.Instant;\nimport java.time.ZoneId;\nimport java.util.Date;\nimport java.util.LinkedHashSet;\nimport java.util.Locale;\nimport java.util.Set;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.time.MockInstant;\nimport org.evosuite.runtime.mock.java.util.MockDate;\nimport org.evosuite.runtime.testdata.EvoSuiteURL;\nimport org.evosuite.runtime.testdata.NetworkHandling;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class PhotosInterface_setContentType extends PhotosInterface_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void PhotosInterface_setContentType() throws Throwable {\n    REST rEST0 = new REST();\n    assertEquals(443, rEST0.getPort());\n    assertEquals(\"/services/rest/\", rEST0.getPath());\n    assertEquals(\"REST\", rEST0.getTransportType());\n    assertFalse(rEST0.isProxyAuth());\n    assertEquals(\"https\", rEST0.getScheme());\n    assertEquals(\"api.flickr.com\", rEST0.getHost());\n    assertNotNull(rEST0);\n    PhotosInterface photosInterface0 = new PhotosInterface(\"com.flickr4java.flickr.REST\", \"com.flickr4java.flickr.REST\", rEST0);\n    assertEquals(443, rEST0.getPort());\n    assertEquals(\"/services/rest/\", rEST0.getPath());\n    assertEquals(\"REST\", rEST0.getTransportType());\n    assertFalse(rEST0.isProxyAuth());\n    assertEquals(\"https\", rEST0.getScheme());\n    assertEquals(\"api.flickr.com\", rEST0.getHost());\n    assertNotNull(photosInterface0);\n    // Undeclared exception!\n    try {\n        photosInterface0.setContentType(\"REST\", \"HZYrLu9vq0/Vi\");\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        //\n        // java.net.UnknownServiceException: protocol doesn't support output\n        //\n        verifyException(\"com.flickr4java.flickr.REST\", e);\n    }\n}\n}"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/OAuthUtilitiesTest###testSignRequest",
        "generated_path": "OAuthUtilities_signRequest.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.flickr4java.flickr.util;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.flickr4java.flickr.Flickr;\nimport com.flickr4java.flickr.util.OAuthUtilities;\nimport com.github.scribejava.apis.MediaWikiApi;\nimport com.github.scribejava.core.httpclient.jdk.JDKHttpClient;\nimport com.github.scribejava.core.httpclient.jdk.JDKHttpClientConfig;\nimport com.github.scribejava.core.model.OAuthRequest;\nimport com.github.scribejava.core.model.Verb;\nimport com.github.scribejava.core.oauth.OAuth10aService;\nimport java.io.PipedOutputStream;\nimport java.util.HashMap;\nimport java.util.Map;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class OAuthUtilities_signRequest extends OAuthUtilities_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test6() throws Throwable {\n    HashMap<String, OAuthUtilities> hashMap0 = new HashMap<String, OAuthUtilities>();\n    Flickr.debugRequest = true;\n    OAuth10aService oAuth10aService0 = OAuthUtilities.createOAuthService(\"Gyx&lI hQi5LVUs\", \"Gyx&lI hQi5LVUs\", (Integer) null, (Integer) null);\n    OAuthRequest oAuthRequest0 = OAuthUtilities.buildNormalPostRequest(hashMap0, \"Gyx&lI hQi5LVUs\");\n    OAuthUtilities.signRequest(oAuth10aService0, oAuthRequest0, \"Gyx&lI hQi5LVUs\");\n    assertEquals(\"1.0\", oAuth10aService0.getVersion());\n}\n}"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/StatsInterfaceTest###testGetCsvFiles",
        "generated_path": "StatsInterface_getCSVFiles.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.flickr4java.flickr.stats;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.flickr4java.flickr.REST;\nimport com.flickr4java.flickr.Transport;\nimport com.flickr4java.flickr.stats.StatsInterface;\nimport com.flickr4java.flickr.stats.StatsSort;\nimport java.time.Instant;\nimport java.util.Date;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.time.MockInstant;\nimport org.evosuite.runtime.mock.java.util.MockDate;\nimport org.evosuite.runtime.testdata.EvoSuiteURL;\nimport org.evosuite.runtime.testdata.NetworkHandling;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class StatsInterface_getCSVFiles extends StatsInterface_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void StatsInterface_getCSVFiles() throws Throwable {\n    REST rEST0 = new REST(\":g,\", 0);\n    StatsInterface statsInterface0 = new StatsInterface(\":g,\", \":g,\", rEST0);\n    // Undeclared exception!\n    try {\n        statsInterface0.getCSVFiles();\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        //\n        // java.net.MalformedURLException: For input string: \\\"g,\\\"\n        //\n        verifyException(\"com.flickr4java.flickr.REST\", e);\n    }\n}\n}"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/MachinetagsInterfaceTest###testGetNamespaces",
        "generated_path": "MachinetagsInterface_getNamespaces.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.flickr4java.flickr.machinetags;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.flickr4java.flickr.REST;\nimport com.flickr4java.flickr.Transport;\nimport com.flickr4java.flickr.machinetags.MachinetagsInterface;\nimport java.util.Date;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.util.MockDate;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class MachinetagsInterface_getNamespaces extends MachinetagsInterface_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void MachinetagsInterface_getNamespaces() throws Throwable {\n    REST rEST0 = new REST(\"c\", 0);\n    MachinetagsInterface machinetagsInterface0 = new MachinetagsInterface(\"c\", \"c\", rEST0);\n    try {\n        machinetagsInterface0.getNamespaces(\"REST\", 0, 0);\n        fail(\"Expecting exception: Exception\");\n    } catch (Exception e) {\n        //\n        // 105: Received 'Not Found' error from Flickr with status 404\n        //\n        verifyException(\"com.flickr4java.flickr.REST\", e);\n    }\n}\n}"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/PhotosInterfaceTest###testGetInfo",
        "generated_path": "PhotosInterface_getInfo.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.flickr4java.flickr.photos;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.flickr4java.flickr.REST;\nimport com.flickr4java.flickr.Transport;\nimport com.flickr4java.flickr.photos.Permissions;\nimport com.flickr4java.flickr.photos.Photo;\nimport com.flickr4java.flickr.photos.PhotosInterface;\nimport com.flickr4java.flickr.photos.SearchParameters;\nimport com.flickr4java.flickr.photos.geo.GeoInterface;\nimport java.nio.charset.Charset;\nimport java.time.Instant;\nimport java.time.ZoneId;\nimport java.util.Date;\nimport java.util.LinkedHashSet;\nimport java.util.Locale;\nimport java.util.Set;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.time.MockInstant;\nimport org.evosuite.runtime.mock.java.util.MockDate;\nimport org.evosuite.runtime.testdata.EvoSuiteURL;\nimport org.evosuite.runtime.testdata.NetworkHandling;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class PhotosInterface_getInfo extends PhotosInterface_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void PhotosInterface_getInfo() throws Throwable {\n    REST rEST0 = new REST(\"(\u007f1FHA,w`$*D6\", 531);\n    assertFalse(rEST0.isProxyAuth());\n    assertEquals(\"https\", rEST0.getScheme());\n    assertEquals(531, rEST0.getPort());\n    assertEquals(\"(\u007f1FHA,w`$*D6\", rEST0.getHost());\n    assertEquals(\"REST\", rEST0.getTransportType());\n    assertEquals(\"/services/rest/\", rEST0.getPath());\n    assertNotNull(rEST0);\n    PhotosInterface photosInterface0 = new PhotosInterface(\"(\u007f1FHA,w`$*D6\", \"com.flickr4java.flickr.FlickrException\", rEST0);\n    assertFalse(rEST0.isProxyAuth());\n    assertEquals(\"https\", rEST0.getScheme());\n    assertEquals(531, rEST0.getPort());\n    assertEquals(\"(\u007f1FHA,w`$*D6\", rEST0.getHost());\n    assertEquals(\"REST\", rEST0.getTransportType());\n    assertEquals(\"/services/rest/\", rEST0.getPath());\n    assertNotNull(photosInterface0);\n    // Undeclared exception!\n    try {\n        photosInterface0.getInfo(\"\\\"Q3^&L5z -\", \"com.flickr4java.flickr.FlickrException\");\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        //\n        // java.net.MalformedURLException: Illegal character found in host: control char (code=127)\n        //\n        verifyException(\"com.flickr4java.flickr.REST\", e);\n    }\n}\n}"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/PoolsInterfaceTest###testGetContext",
        "generated_path": "PoolsInterface_getContext.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.flickr4java.flickr.groups.pools;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.flickr4java.flickr.REST;\nimport com.flickr4java.flickr.Transport;\nimport com.flickr4java.flickr.groups.pools.PoolsInterface;\nimport java.nio.charset.Charset;\nimport java.util.LinkedHashSet;\nimport java.util.Locale;\nimport java.util.Set;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class PoolsInterface_getContext extends PoolsInterface_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void PoolsInterface_getContext() throws Throwable {\n    REST rEST0 = new REST(\"hH,6:!5\");\n    PoolsInterface poolsInterface0 = new PoolsInterface(\"up.flickr.com\", \"#Ak>* N%blW\", rEST0);\n    // Undeclared exception!\n    try {\n        poolsInterface0.getContext(\":\", \"*r:ifR[Ai2?#C\");\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        //\n        // java.net.MalformedURLException: For input string: \\\"!5\\\"\n        //\n        verifyException(\"com.flickr4java.flickr.REST\", e);\n    }\n}\n}"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/FavoritesInterfaceTest###testGetList",
        "generated_path": "FavoritesInterface_getList.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.flickr4java.flickr.favorites;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.flickr4java.flickr.REST;\nimport com.flickr4java.flickr.Transport;\nimport com.flickr4java.flickr.favorites.FavoritesInterface;\nimport java.nio.charset.Charset;\nimport java.time.ZoneId;\nimport java.util.LinkedHashSet;\nimport java.util.Locale;\nimport java.util.Set;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class FavoritesInterface_getList extends FavoritesInterface_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void FavoritesInterface_getList() throws Throwable {\n    REST rEST0 = new REST(\"IEG \");\n    FavoritesInterface favoritesInterface0 = new FavoritesInterface(\"IEG \", \"IEG \", rEST0);\n    Set<String> set0 = ZoneId.getAvailableZoneIds();\n    try {\n        favoritesInterface0.getList(\"\", (-4009), (-2131), set0);\n        fail(\"Expecting exception: Exception\");\n    } catch (Exception e) {\n        //\n        // 105: Received 'Not Found' error from Flickr with status 404\n        //\n        verifyException(\"com.flickr4java.flickr.REST\", e);\n    }\n}\n}"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/PlacesInterfaceTest###testPlacesForTags",
        "generated_path": "PlacesInterface_placesForTags.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.flickr4java.flickr.places;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.flickr4java.flickr.REST;\nimport com.flickr4java.flickr.Transport;\nimport com.flickr4java.flickr.places.PlacesInterface;\nimport java.time.Instant;\nimport java.util.Date;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.time.MockInstant;\nimport org.evosuite.runtime.mock.java.util.MockDate;\nimport org.evosuite.runtime.testdata.EvoSuiteURL;\nimport org.evosuite.runtime.testdata.NetworkHandling;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class PlacesInterface_placesForTags extends PlacesInterface_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void PlacesInterface_placesForTags() throws Throwable {\n    PlacesInterface placesInterface0 = new PlacesInterface(\"#!qT1dn1 \", \"emtDW)hdk3\", (Transport) null);\n    String[] stringArray0 = new String[9];\n    Instant instant0 = MockInstant.ofEpochMilli(0);\n    Date date0 = Date.from(instant0);\n    MockDate mockDate0 = new MockDate();\n    // Undeclared exception!\n    try {\n        placesInterface0.placesForTags(1530, \"\u007fx4z;=XTs XZ.^-NY+J\", \"emtDW)hdk3\", \"\u007fx4z;=XTs XZ.^-NY+J\", stringArray0, \"#!qT1dn1 \", \"\", \"D\u007fz=SZtz~80d|J}!t2_\", date0, mockDate0, mockDate0, mockDate0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        //\n        // no message in exception (getMessage() returned null)\n        //\n        verifyException(\"com.flickr4java.flickr.places.PlacesInterface\", e);\n    }\n}\n}"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/PrefsInterfaceTest###testGetHidden",
        "generated_path": "PrefsInterface_getHidden.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.flickr4java.flickr.prefs;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.flickr4java.flickr.REST;\nimport com.flickr4java.flickr.Transport;\nimport com.flickr4java.flickr.prefs.PrefsInterface;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class PrefsInterface_getHidden extends PrefsInterface_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void PrefsInterface_getHidden() throws Throwable {\n    REST rEST0 = new REST(\"GET: \", (-1582));\n    PrefsInterface prefsInterface0 = new PrefsInterface(\"t.H0xSZ|X,2:`0\", \"flickr.prefs.getSafetyLevel\", rEST0);\n    // Undeclared exception!\n    try {\n        prefsInterface0.getHidden();\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        //\n        // java.net.MalformedURLException: For input string: \\\" \\\"\n        //\n        verifyException(\"com.flickr4java.flickr.REST\", e);\n    }\n}\n}"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/GroupsInterfaceTest###testSearch",
        "generated_path": "GroupsInterface_search.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.flickr4java.flickr.groups;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.flickr4java.flickr.REST;\nimport com.flickr4java.flickr.Transport;\nimport com.flickr4java.flickr.groups.GroupsInterface;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class GroupsInterface_search extends GroupsInterface_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void GroupsInterface_search() throws Throwable {\n    REST rEST0 = new REST(\"y;2yN;|!P8@DxM\");\n    GroupsInterface groupsInterface0 = new GroupsInterface(\"method\", \"method\", rEST0);\n    try {\n        groupsInterface0.search(\"REST\", (-1822), 1);\n        fail(\"Expecting exception: Exception\");\n    } catch (Exception e) {\n        //\n        // 105: Received 'Not Found' error from Flickr with status 404\n        //\n        verifyException(\"com.flickr4java.flickr.REST\", e);\n    }\n}\n}"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/ContactsInterfaceTest###testGetPublicList",
        "generated_path": "ContactsInterface_getPublicList.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.flickr4java.flickr.contacts;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.flickr4java.flickr.REST;\nimport com.flickr4java.flickr.Transport;\nimport com.flickr4java.flickr.contacts.ContactsInterface;\nimport java.util.Date;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.util.MockDate;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class ContactsInterface_getPublicList extends ContactsInterface_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void ContactsInterface_getPublicList() throws Throwable {\n    REST rEST0 = new REST(\"online\", (-1926));\n    rEST0.setScheme(\"online\");\n    ContactsInterface contactsInterface0 = new ContactsInterface(\"online\", \"online\", rEST0);\n    // Undeclared exception!\n    try {\n        contactsInterface0.getPublicList(\"REST\");\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        //\n        // java.net.MalformedURLException: unknown protocol: online\n        //\n        verifyException(\"com.flickr4java.flickr.REST\", e);\n    }\n}\n}"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/PhotosInterfaceTest###testGetCounts",
        "generated_path": "PhotosInterface_getCounts.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.flickr4java.flickr.photos;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.flickr4java.flickr.REST;\nimport com.flickr4java.flickr.Transport;\nimport com.flickr4java.flickr.photos.Permissions;\nimport com.flickr4java.flickr.photos.Photo;\nimport com.flickr4java.flickr.photos.PhotosInterface;\nimport com.flickr4java.flickr.photos.SearchParameters;\nimport com.flickr4java.flickr.photos.geo.GeoInterface;\nimport java.nio.charset.Charset;\nimport java.time.Instant;\nimport java.time.ZoneId;\nimport java.util.Date;\nimport java.util.LinkedHashSet;\nimport java.util.Locale;\nimport java.util.Set;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.time.MockInstant;\nimport org.evosuite.runtime.mock.java.util.MockDate;\nimport org.evosuite.runtime.testdata.EvoSuiteURL;\nimport org.evosuite.runtime.testdata.NetworkHandling;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class PhotosInterface_getCounts extends PhotosInterface_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void PhotosInterface_getCounts() throws Throwable {\n    REST rEST0 = new REST();\n    assertEquals(\"api.flickr.com\", rEST0.getHost());\n    assertFalse(rEST0.isProxyAuth());\n    assertEquals(\"REST\", rEST0.getTransportType());\n    assertEquals(\"/services/rest/\", rEST0.getPath());\n    assertEquals(443, rEST0.getPort());\n    assertEquals(\"https\", rEST0.getScheme());\n    assertNotNull(rEST0);\n    PhotosInterface photosInterface0 = new PhotosInterface(\"pag`es\", \"pag`es\", rEST0);\n    assertEquals(\"api.flickr.com\", rEST0.getHost());\n    assertFalse(rEST0.isProxyAuth());\n    assertEquals(\"REST\", rEST0.getTransportType());\n    assertEquals(\"/services/rest/\", rEST0.getPath());\n    assertEquals(443, rEST0.getPort());\n    assertEquals(\"https\", rEST0.getScheme());\n    assertNotNull(photosInterface0);\n    Date[] dateArray0 = new Date[0];\n    try {\n        photosInterface0.getCounts(dateArray0, dateArray0);\n        fail(\"Expecting exception: Exception\");\n    } catch (Exception e) {\n        //\n        // 105: Received 'Not Found' error from Flickr with status 404\n        //\n        verifyException(\"com.flickr4java.flickr.REST\", e);\n    }\n}\n}"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/TagsInterfaceTest###testGetHotList",
        "generated_path": "TagsInterface_getHotList.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.flickr4java.flickr.tags;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.flickr4java.flickr.REST;\nimport com.flickr4java.flickr.Transport;\nimport com.flickr4java.flickr.tags.TagsInterface;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class TagsInterface_getHotList extends TagsInterface_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void TagsInterface_getHotList() throws Throwable {\n    REST rEST0 = new REST(\"v[7>mTF9B6N\u007f\");\n    TagsInterface tagsInterface0 = new TagsInterface(\"v[7>mTF9B6N\u007f\", \"v[7>mTF9B6N\u007f\", rEST0);\n    // Undeclared exception!\n    try {\n        tagsInterface0.getHotList(\"REST\", 2278);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        //\n        // java.net.MalformedURLException: Illegal character found in host: control char (code=127)\n        //\n        verifyException(\"com.flickr4java.flickr.REST\", e);\n    }\n}\n}"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/PhotosInterfaceTest###testSetTags",
        "generated_path": "PhotosInterface_setTags.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.flickr4java.flickr.photos;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.flickr4java.flickr.REST;\nimport com.flickr4java.flickr.Transport;\nimport com.flickr4java.flickr.photos.Permissions;\nimport com.flickr4java.flickr.photos.Photo;\nimport com.flickr4java.flickr.photos.PhotosInterface;\nimport com.flickr4java.flickr.photos.SearchParameters;\nimport com.flickr4java.flickr.photos.geo.GeoInterface;\nimport java.nio.charset.Charset;\nimport java.time.Instant;\nimport java.time.ZoneId;\nimport java.util.Date;\nimport java.util.LinkedHashSet;\nimport java.util.Locale;\nimport java.util.Set;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.time.MockInstant;\nimport org.evosuite.runtime.mock.java.util.MockDate;\nimport org.evosuite.runtime.testdata.EvoSuiteURL;\nimport org.evosuite.runtime.testdata.NetworkHandling;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class PhotosInterface_setTags extends PhotosInterface_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void PhotosInterface_setTags() throws Throwable {\n    REST rEST0 = new REST(\"t6=5m4K<U)5|L\");\n    assertFalse(rEST0.isProxyAuth());\n    assertEquals(\"REST\", rEST0.getTransportType());\n    assertEquals(\"/services/rest/\", rEST0.getPath());\n    assertEquals(\"t6=5m4K<U)5|L\", rEST0.getHost());\n    assertEquals(443, rEST0.getPort());\n    assertEquals(\"https\", rEST0.getScheme());\n    assertNotNull(rEST0);\n    PhotosInterface photosInterface0 = new PhotosInterface(\"t6=5m4K<U)5|L\", \"t6=5m4K<U)5|L\", rEST0);\n    assertFalse(rEST0.isProxyAuth());\n    assertEquals(\"REST\", rEST0.getTransportType());\n    assertEquals(\"/services/rest/\", rEST0.getPath());\n    assertEquals(\"t6=5m4K<U)5|L\", rEST0.getHost());\n    assertEquals(443, rEST0.getPort());\n    assertEquals(\"https\", rEST0.getScheme());\n    assertNotNull(photosInterface0);\n    String[] stringArray0 = new String[2];\n    // Undeclared exception!\n    try {\n        photosInterface0.setTags(\"up.flickr.com\", stringArray0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        //\n        // java.net.UnknownServiceException: protocol doesn't support output\n        //\n        verifyException(\"com.flickr4java.flickr.REST\", e);\n    }\n}\n}"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/PhotosetsInterfaceTest###testOrderSets",
        "generated_path": "PhotosetsInterface_orderSets.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.flickr4java.flickr.photosets;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.flickr4java.flickr.REST;\nimport com.flickr4java.flickr.Transport;\nimport com.flickr4java.flickr.photosets.PhotosetsInterface;\nimport java.time.ZoneId;\nimport java.util.Locale;\nimport java.util.Set;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class PhotosetsInterface_orderSets extends PhotosetsInterface_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void PhotosetsInterface_orderSets() throws Throwable {\n    REST rEST0 = new REST(\"k5e\");\n    PhotosetsInterface photosetsInterface0 = new PhotosetsInterface(\"IZ>K<>DT{OAt4\", \"k5e\", rEST0);\n    String[] stringArray0 = new String[4];\n    // Undeclared exception!\n    try {\n        photosetsInterface0.orderSets(stringArray0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        //\n        // java.net.UnknownServiceException: protocol doesn't support output\n        //\n        verifyException(\"com.flickr4java.flickr.REST\", e);\n    }\n}\n}"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/PeopleInterfaceTest###testGetInfo",
        "generated_path": "PeopleInterface_getInfo.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.flickr4java.flickr.people;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.flickr4java.flickr.REST;\nimport com.flickr4java.flickr.Transport;\nimport com.flickr4java.flickr.people.PeopleInterface;\nimport java.awt.Dimension;\nimport java.awt.Point;\nimport java.awt.Rectangle;\nimport java.awt.geom.Line2D;\nimport java.awt.geom.Rectangle2D;\nimport java.nio.charset.Charset;\nimport java.time.ZoneId;\nimport java.util.Date;\nimport java.util.LinkedHashSet;\nimport java.util.Locale;\nimport java.util.Set;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.util.MockDate;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class PeopleInterface_getInfo extends PeopleInterface_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void PeopleInterface_getInfo() throws Throwable {\n    REST rEST0 = new REST(\"timezone_id\", 17);\n    PeopleInterface peopleInterface0 = new PeopleInterface(\"9?%3py\", \"9[LsVI\", rEST0);\n    rEST0.setScheme(\"flickr.people.getUploadStatus\");\n    // Undeclared exception!\n    try {\n        peopleInterface0.getInfo(\"com.flickr4java.flickr.photos.Editability\");\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        //\n        // java.net.MalformedURLException: unknown protocol: flickr.people.getuploadstatus\n        //\n        verifyException(\"com.flickr4java.flickr.REST\", e);\n    }\n}\n}"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/PandaInterfaceTest###testGetPhotos",
        "generated_path": "PandaInterface_getPhotos.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.flickr4java.flickr.panda;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.flickr4java.flickr.REST;\nimport com.flickr4java.flickr.Transport;\nimport com.flickr4java.flickr.panda.Panda;\nimport com.flickr4java.flickr.panda.PandaInterface;\nimport java.nio.charset.Charset;\nimport java.util.LinkedHashSet;\nimport java.util.Set;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class PandaInterface_getPhotos extends PandaInterface_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void PandaInterface_getPhotos() throws Throwable {\n    REST rEST0 = new REST(\"Not dumping response to file as method not found in request for URL {}\", 0);\n    PandaInterface pandaInterface0 = new PandaInterface(\"LH\", \"LH\", rEST0);\n    Panda panda0 = new Panda();\n    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();\n    rEST0.setScheme(\"LH\");\n    // Undeclared exception!\n    try {\n        pandaInterface0.getPhotos(panda0, linkedHashSet0, 0, 0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        //\n        // java.net.MalformedURLException: unknown protocol: lh\n        //\n        verifyException(\"com.flickr4java.flickr.REST\", e);\n    }\n}\n}"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/PeopleInterfaceTest###testGetPhotos",
        "generated_path": "PeopleInterface_getPhotos.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.flickr4java.flickr.people;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.flickr4java.flickr.REST;\nimport com.flickr4java.flickr.Transport;\nimport com.flickr4java.flickr.people.PeopleInterface;\nimport java.awt.Dimension;\nimport java.awt.Point;\nimport java.awt.Rectangle;\nimport java.awt.geom.Line2D;\nimport java.awt.geom.Rectangle2D;\nimport java.nio.charset.Charset;\nimport java.time.ZoneId;\nimport java.util.Date;\nimport java.util.LinkedHashSet;\nimport java.util.Locale;\nimport java.util.Set;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.util.MockDate;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class PeopleInterface_getPhotos extends PeopleInterface_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void PeopleInterface_getPhotos() throws Throwable {\n    REST rEST0 = new REST();\n    PeopleInterface peopleInterface0 = new PeopleInterface(\"DuS5:6\", \"\", rEST0);\n    MockDate mockDate0 = new MockDate(1000L);\n    Locale locale0 = Locale.ROOT;\n    Set<String> set0 = locale0.getUnicodeLocaleAttributes();\n    // Undeclared exception!\n    try {\n        peopleInterface0.getPhotos(\"\", \"\", (Date) null, (Date) null, (Date) null, mockDate0, \"1\\\"Ig]/y~V[tq!GLT\", \"1\\\"Ig]/y~V[tq!GLT\", set0, 0, 1);\n        fail(\"Expecting exception: IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n        //\n        // Invalid Api secret\n        //\n        verifyException(\"com.github.scribejava.core.utils.Preconditions\", e);\n    }\n}\n}"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/PeopleInterfaceTest###testFindByUsername",
        "generated_path": "PeopleInterface_findByUsername.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.flickr4java.flickr.people;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.flickr4java.flickr.REST;\nimport com.flickr4java.flickr.Transport;\nimport com.flickr4java.flickr.people.PeopleInterface;\nimport java.awt.Dimension;\nimport java.awt.Point;\nimport java.awt.Rectangle;\nimport java.awt.geom.Line2D;\nimport java.awt.geom.Rectangle2D;\nimport java.nio.charset.Charset;\nimport java.time.ZoneId;\nimport java.util.Date;\nimport java.util.LinkedHashSet;\nimport java.util.Locale;\nimport java.util.Set;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.util.MockDate;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class PeopleInterface_findByUsername extends PeopleInterface_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void PeopleInterface_findByUsername() throws Throwable {\n    REST rEST0 = new REST(\"8::f}E_(tIm[jjt`L6r\", (-27));\n    PeopleInterface peopleInterface0 = new PeopleInterface(\"DI6<N:Vz=q_Z\u007fSr\", \"O\\\"q2`j2497s:kB+d41\", rEST0);\n    // Undeclared exception!\n    try {\n        peopleInterface0.findByUsername(\"\");\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        //\n        // java.net.MalformedURLException: For input string: \\\":f}E_(tIm[jjt`L6r\\\"\n        //\n        verifyException(\"com.flickr4java.flickr.REST\", e);\n    }\n}\n}"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/UrlsInterfaceTest###testLookupUser",
        "generated_path": "UrlsInterface_lookupUser.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.flickr4java.flickr.urls;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.flickr4java.flickr.REST;\nimport com.flickr4java.flickr.Transport;\nimport com.flickr4java.flickr.urls.UrlsInterface;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class UrlsInterface_lookupUser extends UrlsInterface_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void UrlsInterface_lookupUser() throws Throwable {\n    REST rEST0 = new REST(\"9c\u007f40_j*xFU1BczTG\", 0);\n    UrlsInterface urlsInterface0 = new UrlsInterface(\"9c\u007f40_j*xFU1BczTG\", \"9c\u007f40_j*xFU1BczTG\", rEST0);\n    // Undeclared exception!\n    try {\n        urlsInterface0.lookupUser(\"REST\");\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        //\n        // java.net.MalformedURLException: Illegal character found in host: control char (code=127)\n        //\n        verifyException(\"com.flickr4java.flickr.REST\", e);\n    }\n}\n}"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/FavoritesInterfaceTest###testGetPublicList",
        "generated_path": "FavoritesInterface_getPublicList.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.flickr4java.flickr.favorites;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.flickr4java.flickr.REST;\nimport com.flickr4java.flickr.Transport;\nimport com.flickr4java.flickr.favorites.FavoritesInterface;\nimport java.nio.charset.Charset;\nimport java.time.ZoneId;\nimport java.util.LinkedHashSet;\nimport java.util.Locale;\nimport java.util.Set;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class FavoritesInterface_getPublicList extends FavoritesInterface_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void FavoritesInterface_getPublicList() throws Throwable {\n    REST rEST0 = new REST(\"5(1:oK-\");\n    FavoritesInterface favoritesInterface0 = new FavoritesInterface(\"image.jpg\", \",\", rEST0);\n    Locale locale0 = Locale.CANADA;\n    Set<String> set0 = locale0.getUnicodeLocaleAttributes();\n    // Undeclared exception!\n    try {\n        favoritesInterface0.getPublicList(\",\", (-44), (-44), set0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        //\n        // java.net.MalformedURLException: For input string: \\\"oK-\\\"\n        //\n        verifyException(\"com.flickr4java.flickr.REST\", e);\n    }\n}\n}"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/PlacesInterfaceTest###testPlacesForContacts",
        "generated_path": "PlacesInterface_placesForContacts.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.flickr4java.flickr.places;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.flickr4java.flickr.REST;\nimport com.flickr4java.flickr.Transport;\nimport com.flickr4java.flickr.places.PlacesInterface;\nimport java.time.Instant;\nimport java.util.Date;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.time.MockInstant;\nimport org.evosuite.runtime.mock.java.util.MockDate;\nimport org.evosuite.runtime.testdata.EvoSuiteURL;\nimport org.evosuite.runtime.testdata.NetworkHandling;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class PlacesInterface_placesForContacts extends PlacesInterface_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void PlacesInterface_placesForContacts() throws Throwable {\n    PlacesInterface placesInterface0 = new PlacesInterface(\"\", \"8\", (Transport) null);\n    // Undeclared exception!\n    try {\n        placesInterface0.placesForContacts(12, \"9.w}%]T{:IqDz\", \"8\", \"8\", \"9.w}%]T{:IqDz\");\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        //\n        // no message in exception (getMessage() returned null)\n        //\n        verifyException(\"com.flickr4java.flickr.places.PlacesInterface\", e);\n    }\n}\n}"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/PrefsInterfaceTest###testGetContentType",
        "generated_path": "PrefsInterface_getContentType.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.flickr4java.flickr.prefs;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.flickr4java.flickr.REST;\nimport com.flickr4java.flickr.Transport;\nimport com.flickr4java.flickr.prefs.PrefsInterface;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class PrefsInterface_getContentType extends PrefsInterface_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void PrefsInterface_getContentType() throws Throwable {\n    REST rEST0 = new REST(\"::\");\n    PrefsInterface prefsInterface0 = new PrefsInterface(\"::\", \"::\", rEST0);\n    // Undeclared exception!\n    try {\n        prefsInterface0.getContentType();\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        //\n        // java.net.MalformedURLException: For input string: \\\":\\\"\n        //\n        verifyException(\"com.flickr4java.flickr.REST\", e);\n    }\n}\n}"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/UrlsInterfaceTest###testGetUserProfile",
        "generated_path": "UrlsInterface_getUserProfile.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.flickr4java.flickr.urls;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.flickr4java.flickr.REST;\nimport com.flickr4java.flickr.Transport;\nimport com.flickr4java.flickr.urls.UrlsInterface;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class UrlsInterface_getUserProfile extends UrlsInterface_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void UrlsInterface_getUserProfile() throws Throwable {\n    REST rEST0 = new REST(\"[/ngKd6->\");\n    UrlsInterface urlsInterface0 = new UrlsInterface(\"[/ngKd6->\", \"[/ngKd6->\", rEST0);\n    // Undeclared exception!\n    try {\n        urlsInterface0.getUserProfile(\"\");\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        //\n        // java.net.MalformedURLException: Invalid authority field: [\n        //\n        verifyException(\"com.flickr4java.flickr.REST\", e);\n    }\n}\n}"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/MachinetagsInterfaceTest###testGetPairs",
        "generated_path": "MachinetagsInterface_getPairs.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.flickr4java.flickr.machinetags;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.flickr4java.flickr.REST;\nimport com.flickr4java.flickr.Transport;\nimport com.flickr4java.flickr.machinetags.MachinetagsInterface;\nimport java.util.Date;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.util.MockDate;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class MachinetagsInterface_getPairs extends MachinetagsInterface_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void MachinetagsInterface_getPairs() throws Throwable {\n    REST rEST0 = new REST(\"\", 0);\n    MachinetagsInterface machinetagsInterface0 = new MachinetagsInterface(\"page\", \"\", rEST0);\n    // Undeclared exception!\n    try {\n        machinetagsInterface0.getPairs(\"up.flickr.com\", \"\", 0, 0);\n        fail(\"Expecting exception: IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n        //\n        // Invalid Api secret\n        //\n        verifyException(\"com.github.scribejava.core.utils.Preconditions\", e);\n    }\n}\n}"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/PlacesInterfaceTest###testGetPlaceTypes",
        "generated_path": "PlacesInterface_getPlaceTypes.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.flickr4java.flickr.places;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.flickr4java.flickr.REST;\nimport com.flickr4java.flickr.Transport;\nimport com.flickr4java.flickr.places.PlacesInterface;\nimport java.time.Instant;\nimport java.util.Date;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.time.MockInstant;\nimport org.evosuite.runtime.mock.java.util.MockDate;\nimport org.evosuite.runtime.testdata.EvoSuiteURL;\nimport org.evosuite.runtime.testdata.NetworkHandling;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class PlacesInterface_getPlaceTypes extends PlacesInterface_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void PlacesInterface_getPlaceTypes() throws Throwable {\n    REST rEST0 = new REST(\":\\\"4 UV:q,R0eliQ\");\n    PlacesInterface placesInterface0 = new PlacesInterface(\":\\\"4 UV:q,R0eliQ\", \":\\\"4 UV:q,R0eliQ\", rEST0);\n    // Undeclared exception!\n    try {\n        placesInterface0.getPlaceTypes();\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        //\n        // java.net.MalformedURLException: For input string: \\\"\\\"4 UV:q,R0eliQ\\\"\n        //\n        verifyException(\"com.flickr4java.flickr.REST\", e);\n    }\n}\n}"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/CommentsInterfaceTest###testGetRecentForContacts",
        "generated_path": "CommentsInterface_getRecentForContacts.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.flickr4java.flickr.photos.comments;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.flickr4java.flickr.REST;\nimport com.flickr4java.flickr.Transport;\nimport com.flickr4java.flickr.photos.comments.CommentsInterface;\nimport java.nio.charset.Charset;\nimport java.time.ZoneId;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.LinkedHashSet;\nimport java.util.Locale;\nimport java.util.Set;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.util.MockDate;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class CommentsInterface_getRecentForContacts extends CommentsInterface_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void CommentsInterface_getRecentForContacts() throws Throwable {\n    CommentsInterface commentsInterface0 = new CommentsInterface(\"oRM@\", \"oRM@\", (Transport) null);\n    MockDate mockDate0 = new MockDate(3690, (-528), (-528));\n    ArrayList<String> arrayList0 = new ArrayList<String>(0);\n    Set<String> set0 = ZoneId.getAvailableZoneIds();\n    // Undeclared exception!\n    try {\n        commentsInterface0.getRecentForContacts(mockDate0, arrayList0, set0, 0, 3690);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        //\n        // no message in exception (getMessage() returned null)\n        //\n        verifyException(\"com.flickr4java.flickr.photos.comments.CommentsInterface\", e);\n    }\n}\n}"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/MembersInterfaceTest###testGetList",
        "generated_path": "MembersInterface_getList.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.flickr4java.flickr.groups.members;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.flickr4java.flickr.REST;\nimport com.flickr4java.flickr.groups.members.MembersInterface;\nimport java.util.LinkedHashSet;\nimport java.util.Set;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class MembersInterface_getList extends MembersInterface_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void MembersInterface_getList() throws Throwable {\n    REST rEST0 = new REST();\n    MembersInterface membersInterface0 = new MembersInterface(\"nsid\", \"nsid\", rEST0);\n    try {\n        membersInterface0.getList(\"nsid\", (Set<String>) null, 319, 319);\n        fail(\"Expecting exception: Exception\");\n    } catch (Exception e) {\n        //\n        // 105: Received 'Not Found' error from Flickr with status 404\n        //\n        verifyException(\"com.flickr4java.flickr.REST\", e);\n    }\n}\n}"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/StatsInterfaceTest###testGetTotalViews",
        "generated_path": "StatsInterface_getTotalViews.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.flickr4java.flickr.stats;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.flickr4java.flickr.REST;\nimport com.flickr4java.flickr.Transport;\nimport com.flickr4java.flickr.stats.StatsInterface;\nimport com.flickr4java.flickr.stats.StatsSort;\nimport java.time.Instant;\nimport java.util.Date;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.time.MockInstant;\nimport org.evosuite.runtime.mock.java.util.MockDate;\nimport org.evosuite.runtime.testdata.EvoSuiteURL;\nimport org.evosuite.runtime.testdata.NetworkHandling;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class StatsInterface_getTotalViews extends StatsInterface_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void StatsInterface_getTotalViews() throws Throwable {\n    REST rEST0 = new REST(\"n\\\":}!~cJ-4his'x[#\");\n    StatsInterface statsInterface0 = new StatsInterface(\"safety_level\", \"safety_level\", rEST0);\n    MockDate mockDate0 = new MockDate(251, 251, (-770), 2639, (-325), 2639);\n    // Undeclared exception!\n    try {\n        statsInterface0.getTotalViews(mockDate0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        //\n        // java.net.MalformedURLException: For input string: \\\"}!~cJ-4his'x[\\\"\n        //\n        verifyException(\"com.flickr4java.flickr.REST\", e);\n    }\n}\n}"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/UrlsInterfaceTest###testGetGroup",
        "generated_path": "UrlsInterface_getGroup.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.flickr4java.flickr.urls;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.flickr4java.flickr.REST;\nimport com.flickr4java.flickr.Transport;\nimport com.flickr4java.flickr.urls.UrlsInterface;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class UrlsInterface_getGroup extends UrlsInterface_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void UrlsInterface_getGroup() throws Throwable {\n    REST rEST0 = new REST(\">9,[+8f,R:..ouO3tBr\");\n    UrlsInterface urlsInterface0 = new UrlsInterface(\">9,[+8f,R:..ouO3tBr\", \">9,[+8f,R:..ouO3tBr\", rEST0);\n    // Undeclared exception!\n    try {\n        urlsInterface0.getGroup(\">9,[+8f,R:..ouO3tBr\");\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        //\n        // java.net.MalformedURLException: For input string: \\\"..ouO3tBr\\\"\n        //\n        verifyException(\"com.flickr4java.flickr.REST\", e);\n    }\n}\n}"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/PeopleInterfaceTest###testGetUploadStatus",
        "generated_path": "PeopleInterface_getUploadStatus.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.flickr4java.flickr.people;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.flickr4java.flickr.REST;\nimport com.flickr4java.flickr.Transport;\nimport com.flickr4java.flickr.people.PeopleInterface;\nimport java.awt.Dimension;\nimport java.awt.Point;\nimport java.awt.Rectangle;\nimport java.awt.geom.Line2D;\nimport java.awt.geom.Rectangle2D;\nimport java.nio.charset.Charset;\nimport java.time.ZoneId;\nimport java.util.Date;\nimport java.util.LinkedHashSet;\nimport java.util.Locale;\nimport java.util.Set;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.util.MockDate;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class PeopleInterface_getUploadStatus extends PeopleInterface_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void PeopleInterface_getUploadStatus() throws Throwable {\n    REST rEST0 = new REST(\"\u007fOKfj\", (-1));\n    PeopleInterface peopleInterface0 = new PeopleInterface(\"\u007fOKfj\", \"\u007fOKfj\", rEST0);\n    // Undeclared exception!\n    try {\n        peopleInterface0.getUploadStatus();\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        //\n        // java.net.MalformedURLException: Illegal character found in host: control char (code=127)\n        //\n        verifyException(\"com.flickr4java.flickr.REST\", e);\n    }\n}\n}"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/MachinetagsInterfaceTest###testGetValues",
        "generated_path": "MachinetagsInterface_getValues.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.flickr4java.flickr.machinetags;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.flickr4java.flickr.REST;\nimport com.flickr4java.flickr.Transport;\nimport com.flickr4java.flickr.machinetags.MachinetagsInterface;\nimport java.util.Date;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.util.MockDate;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class MachinetagsInterface_getValues extends MachinetagsInterface_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void MachinetagsInterface_getValues() throws Throwable {\n    REST rEST0 = new REST(\"signing request: %s\", (-2670));\n    MachinetagsInterface machinetagsInterface0 = new MachinetagsInterface(\"signing request: %s\", \"signing request: %s\", rEST0);\n    // Undeclared exception!\n    try {\n        machinetagsInterface0.getValues(\"\", \"flickr.machinetags.getNamespaces\", 1326, (-460));\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        //\n        // java.net.MalformedURLException: For input string: \\\" %s\\\"\n        //\n        verifyException(\"com.flickr4java.flickr.REST\", e);\n    }\n}\n}"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/PhotosInterfaceTest###testGetContactsPhotos",
        "generated_path": "PhotosInterface_getContactsPhotos.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.flickr4java.flickr.photos;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.flickr4java.flickr.REST;\nimport com.flickr4java.flickr.Transport;\nimport com.flickr4java.flickr.photos.Permissions;\nimport com.flickr4java.flickr.photos.Photo;\nimport com.flickr4java.flickr.photos.PhotosInterface;\nimport com.flickr4java.flickr.photos.SearchParameters;\nimport com.flickr4java.flickr.photos.geo.GeoInterface;\nimport java.nio.charset.Charset;\nimport java.time.Instant;\nimport java.time.ZoneId;\nimport java.util.Date;\nimport java.util.LinkedHashSet;\nimport java.util.Locale;\nimport java.util.Set;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.time.MockInstant;\nimport org.evosuite.runtime.mock.java.util.MockDate;\nimport org.evosuite.runtime.testdata.EvoSuiteURL;\nimport org.evosuite.runtime.testdata.NetworkHandling;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class PhotosInterface_getContactsPhotos extends PhotosInterface_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void PhotosInterface_getContactsPhotos() throws Throwable {\n    REST rEST0 = new REST(\"flickr.photos.geo.batchCorrectLocation\", 0);\n    assertEquals(\"https\", rEST0.getScheme());\n    assertEquals(\"/services/rest/\", rEST0.getPath());\n    assertEquals(\"flickr.photos.geo.batchCorrectLocation\", rEST0.getHost());\n    assertEquals(0, rEST0.getPort());\n    assertEquals(\"REST\", rEST0.getTransportType());\n    assertFalse(rEST0.isProxyAuth());\n    assertNotNull(rEST0);\n    PhotosInterface photosInterface0 = new PhotosInterface(\"t(8]OM)%j-z\", \"t(8]OM)%j-z\", rEST0);\n    assertEquals(\"https\", rEST0.getScheme());\n    assertEquals(\"/services/rest/\", rEST0.getPath());\n    assertEquals(\"flickr.photos.geo.batchCorrectLocation\", rEST0.getHost());\n    assertEquals(0, rEST0.getPort());\n    assertEquals(\"REST\", rEST0.getTransportType());\n    assertFalse(rEST0.isProxyAuth());\n    assertNotNull(photosInterface0);\n    try {\n        photosInterface0.getContactsPhotos(0, true, true, true);\n        fail(\"Expecting exception: Exception\");\n    } catch (Exception e) {\n        //\n        // 105: Received 'Not Found' error from Flickr with status 404\n        //\n        verifyException(\"com.flickr4java.flickr.REST\", e);\n    }\n}\n}"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/PhotosetsInterfaceTest###testGetContext",
        "generated_path": "PhotosetsInterface_getContext.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.flickr4java.flickr.photosets;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.flickr4java.flickr.REST;\nimport com.flickr4java.flickr.Transport;\nimport com.flickr4java.flickr.photosets.PhotosetsInterface;\nimport java.time.ZoneId;\nimport java.util.Locale;\nimport java.util.Set;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class PhotosetsInterface_getContext extends PhotosetsInterface_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void PhotosetsInterface_getContext() throws Throwable {\n    REST rEST0 = new REST(\"count_comments\");\n    PhotosetsInterface photosetsInterface0 = new PhotosetsInterface(\"DHOU\", \"count_comments\", rEST0);\n    rEST0.setScheme(\"flickr.photosets.editPhotos\");\n    // Undeclared exception!\n    try {\n        photosetsInterface0.getContext(\"count_comments\", \"\");\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        //\n        // java.net.MalformedURLException: unknown protocol: flickr.photosets.editphotos\n        //\n        verifyException(\"com.flickr4java.flickr.REST\", e);\n    }\n}\n}"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/ReflectionInterfaceTest###testGetMethods",
        "generated_path": "ReflectionInterface_getMethods.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.flickr4java.flickr.reflection;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.flickr4java.flickr.REST;\nimport com.flickr4java.flickr.Transport;\nimport com.flickr4java.flickr.reflection.ReflectionInterface;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class ReflectionInterface_getMethods extends ReflectionInterface_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void ReflectionInterface_getMethods() throws Throwable {\n    REST rEST0 = new REST();\n    ReflectionInterface reflectionInterface0 = new ReflectionInterface(\"error\", \"error\", rEST0);\n    rEST0.setPath(\"~\u007f'\");\n    // Undeclared exception!\n    try {\n        reflectionInterface0.getMethods();\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        //\n        // java.net.MalformedURLException: Illegal character found in host: control char (code=127)\n        //\n        verifyException(\"com.flickr4java.flickr.REST\", e);\n    }\n}\n}"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/PhotosInterfaceTest###testSearch",
        "generated_path": "PhotosInterface_search.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.flickr4java.flickr.photos;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.flickr4java.flickr.REST;\nimport com.flickr4java.flickr.Transport;\nimport com.flickr4java.flickr.photos.Permissions;\nimport com.flickr4java.flickr.photos.Photo;\nimport com.flickr4java.flickr.photos.PhotosInterface;\nimport com.flickr4java.flickr.photos.SearchParameters;\nimport com.flickr4java.flickr.photos.geo.GeoInterface;\nimport java.nio.charset.Charset;\nimport java.time.Instant;\nimport java.time.ZoneId;\nimport java.util.Date;\nimport java.util.LinkedHashSet;\nimport java.util.Locale;\nimport java.util.Set;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.time.MockInstant;\nimport org.evosuite.runtime.mock.java.util.MockDate;\nimport org.evosuite.runtime.testdata.EvoSuiteURL;\nimport org.evosuite.runtime.testdata.NetworkHandling;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class PhotosInterface_search extends PhotosInterface_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void PhotosInterface_search() throws Throwable {\n    REST rEST0 = new REST(\"flickr.photos.removeTag\", (-163));\n    assertFalse(rEST0.isProxyAuth());\n    assertEquals((-163), rEST0.getPort());\n    assertEquals(\"/services/rest/\", rEST0.getPath());\n    assertEquals(\"flickr.photos.removeTag\", rEST0.getHost());\n    assertEquals(\"REST\", rEST0.getTransportType());\n    assertEquals(\"https\", rEST0.getScheme());\n    assertNotNull(rEST0);\n    PhotosInterface photosInterface0 = new PhotosInterface(\"flickr.photos.removeTag\", \"flickr.photos.removeTag\", rEST0);\n    assertFalse(rEST0.isProxyAuth());\n    assertEquals((-163), rEST0.getPort());\n    assertEquals(\"/services/rest/\", rEST0.getPath());\n    assertEquals(\"flickr.photos.removeTag\", rEST0.getHost());\n    assertEquals(\"REST\", rEST0.getTransportType());\n    assertEquals(\"https\", rEST0.getScheme());\n    assertNotNull(photosInterface0);\n    SearchParameters searchParameters0 = new SearchParameters();\n    assertEquals((-1.0), searchParameters0.getRadius(), 0.01);\n    assertFalse(searchParameters0.getInGallery());\n    assertNull(searchParameters0.getPlaceId());\n    assertNull(searchParameters0.getTagMode());\n    assertNull(searchParameters0.getLatitude());\n    assertEquals(0, searchParameters0.getAccuracy());\n    assertNull(searchParameters0.getLongitude());\n    assertNull(searchParameters0.getText());\n    assertNull(searchParameters0.getMachineTagMode());\n    assertNull(searchParameters0.getContacts());\n    assertEquals(0, searchParameters0.getSort());\n    assertFalse(searchParameters0.getHasGeo());\n    assertNull(searchParameters0.getMedia());\n    assertFalse(searchParameters0.getIsGetty());\n    assertNull(searchParameters0.getSafeSearch());\n    assertEquals(0, searchParameters0.getPrivacyFilter());\n    assertFalse(searchParameters0.getIsCommons());\n    assertNull(searchParameters0.getRadiusUnits());\n    assertNull(searchParameters0.getLicense());\n    assertNull(searchParameters0.getWoeId());\n    assertNull(searchParameters0.getGroupId());\n    assertNull(searchParameters0.getUserId());\n    assertNotNull(searchParameters0);\n    assertEquals(6, SearchParameters.RELEVANCE);\n    assertEquals(5, SearchParameters.INTERESTINGNESS_ASC);\n    assertEquals(0, SearchParameters.DATE_POSTED_DESC);\n    assertEquals(3, SearchParameters.DATE_TAKEN_ASC);\n    assertEquals(2, SearchParameters.DATE_TAKEN_DESC);\n    assertEquals(4, SearchParameters.INTERESTINGNESS_DESC);\n    assertEquals(1, SearchParameters.DATE_POSTED_ASC);\n    try {\n        photosInterface0.search(searchParameters0, 11, (-439));\n        fail(\"Expecting exception: Exception\");\n    } catch (Exception e) {\n        //\n        // 105: Received 'Not Found' error from Flickr with status 404\n        //\n        verifyException(\"com.flickr4java.flickr.REST\", e);\n    }\n}\n}"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/PlacesInterfaceTest###testTagsForPlace",
        "generated_path": "PlacesInterface_tagsForPlace.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.flickr4java.flickr.places;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.flickr4java.flickr.REST;\nimport com.flickr4java.flickr.Transport;\nimport com.flickr4java.flickr.places.PlacesInterface;\nimport java.time.Instant;\nimport java.util.Date;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.time.MockInstant;\nimport org.evosuite.runtime.mock.java.util.MockDate;\nimport org.evosuite.runtime.testdata.EvoSuiteURL;\nimport org.evosuite.runtime.testdata.NetworkHandling;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class PlacesInterface_tagsForPlace extends PlacesInterface_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void PlacesInterface_tagsForPlace() throws Throwable {\n    REST rEST0 = new REST(\"query\", 22);\n    PlacesInterface placesInterface0 = new PlacesInterface(\"\", \"\", rEST0);\n    MockDate mockDate0 = new MockDate(0, 22, 22, 1729, 1729, 22);\n    MockDate mockDate1 = new MockDate(22, 1729, (-155), 1546, 1729);\n    // Undeclared exception!\n    try {\n        placesInterface0.tagsForPlace(\"3ZG,5<%\", \"up.flickr.com\", mockDate0, mockDate0, (Date) null, mockDate1);\n        fail(\"Expecting exception: IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n        //\n        // Invalid Api key\n        //\n        verifyException(\"com.github.scribejava.core.utils.Preconditions\", e);\n    }\n}\n}"
    },
    {
        "original_path": "jroyalty_jglm###jroyalty_jglm/src/test/java/com/hackoeur/jglm/Vec3Test###testGetUnitVector",
        "generated_path": "Vec3_getUnitVector.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.hackoeur.jglm;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.hackoeur.jglm.Mat3;\nimport com.hackoeur.jglm.Vec;\nimport com.hackoeur.jglm.Vec3;\nimport com.hackoeur.jglm.Vec4;\nimport java.nio.FloatBuffer;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class Vec3_getUnitVector extends Vec3_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test41() throws Throwable {\n    Vec3 vec3_0 = new Vec3(1.5F, 433.082F, 433.082F);\n    Vec3 vec3_1 = vec3_0.getNegated();\n    Vec3 vec3_2 = vec3_1.getUnitVector();\n    assertEquals((-0.7071034F), vec3_2.getY(), 0.01F);\n    assertEquals((-0.002449086F), vec3_2.getX(), 0.01F);\n    assertEquals(0.99999636F, vec3_2.getLengthSquared(), 0.01F);\n    assertEquals((-0.7071034F), vec3_2.getZ(), 0.01F);\n}\n}"
    },
    {
        "original_path": "jroyalty_jglm###jroyalty_jglm/src/test/java/com/hackoeur/jglm/MatricesTest###testOrtho2d",
        "generated_path": "Matrices_ortho2d.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.hackoeur.jglm;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.hackoeur.jglm.Mat3;\nimport com.hackoeur.jglm.Mat4;\nimport com.hackoeur.jglm.Matrices;\nimport com.hackoeur.jglm.Vec3;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class Matrices_ortho2d extends Matrices_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    Mat4 mat4_0 = Matrices.ortho2d((-2484.9287F), 0.0F, 2097.5295F, (-2484.9287F));\n    assertEquals(4, mat4_0.getNumRows());\n}\n}"
    },
    {
        "original_path": "jroyalty_jglm###jroyalty_jglm/src/test/java/com/hackoeur/jglm/Mat3Test###testGetColumns",
        "generated_path": "Mat3_getColumns.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.hackoeur.jglm;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.hackoeur.jglm.Mat;\nimport com.hackoeur.jglm.Mat3;\nimport com.hackoeur.jglm.Mat4;\nimport com.hackoeur.jglm.Vec3;\nimport com.hackoeur.jglm.Vec4;\nimport java.nio.BufferUnderflowException;\nimport java.nio.FloatBuffer;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class Mat3_getColumns extends Mat3_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test48() throws Throwable {\n    Vec3 vec3_0 = Vec3.VEC3_ZERO;\n    Mat3 mat3_0 = new Mat3(vec3_0, vec3_0, vec3_0);\n    Iterable<Vec3> iterable0 = mat3_0.getColumns();\n    boolean boolean0 = mat3_0.equals(iterable0);\n    assertFalse(boolean0);\n}\n}"
    },
    {
        "original_path": "jroyalty_jglm###jroyalty_jglm/src/test/java/com/hackoeur/jglm/MatricesTest###testLookAt",
        "generated_path": "Matrices_lookAt.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.hackoeur.jglm;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.hackoeur.jglm.Mat3;\nimport com.hackoeur.jglm.Mat4;\nimport com.hackoeur.jglm.Matrices;\nimport com.hackoeur.jglm.Vec3;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class Matrices_lookAt extends Matrices_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    Vec3 vec3_0 = Vec3.VEC3_ZERO;\n    Mat4 mat4_0 = Matrices.lookAt(vec3_0, vec3_0, vec3_0);\n    assertEquals(4, mat4_0.getNumRows());\n}\n}"
    },
    {
        "original_path": "jroyalty_jglm###jroyalty_jglm/src/test/java/com/hackoeur/jglm/MatricesTest###testRotate",
        "generated_path": "Matrices_rotate.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.hackoeur.jglm;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.hackoeur.jglm.Mat3;\nimport com.hackoeur.jglm.Mat4;\nimport com.hackoeur.jglm.Matrices;\nimport com.hackoeur.jglm.Vec3;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class Matrices_rotate extends Matrices_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    Vec3 vec3_0 = new Vec3(2863.4697F, 2863.4697F, 2863.4697F);\n    Mat4 mat4_0 = Matrices.rotate(2863.4697F, vec3_0);\n    assertEquals(4, mat4_0.getNumRows());\n}\n}"
    },
    {
        "original_path": "jroyalty_jglm###jroyalty_jglm/src/test/java/com/hackoeur/jglm/Mat4Test###testTranslate",
        "generated_path": "Mat4_translate.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.hackoeur.jglm;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.hackoeur.jglm.Mat;\nimport com.hackoeur.jglm.Mat3;\nimport com.hackoeur.jglm.Mat4;\nimport com.hackoeur.jglm.Vec3;\nimport com.hackoeur.jglm.Vec4;\nimport java.nio.BufferUnderflowException;\nimport java.nio.FloatBuffer;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class Mat4_translate extends Mat4_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    Mat4 mat4_0 = new Mat4(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, (-808.63F), (-2164.78F), (-177.38834F), 0.0F, (-177.38834F), 0.0F, 2708.7854F, (-808.63F), 1310.0F, 2708.7854F);\n    Vec3 vec3_0 = new Vec3(0.0F, 0.0F, (-679.1294F));\n    Mat4 mat4_1 = mat4_0.translate(vec3_0);\n    assertNotSame(mat4_0, mat4_1);\n}\n}"
    },
    {
        "original_path": "jroyalty_jglm###jroyalty_jglm/src/test/java/com/hackoeur/jglm/MatricesTest###testPerspective",
        "generated_path": "Matrices_perspective.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.hackoeur.jglm;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.hackoeur.jglm.Mat3;\nimport com.hackoeur.jglm.Mat4;\nimport com.hackoeur.jglm.Matrices;\nimport com.hackoeur.jglm.Vec3;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class Matrices_perspective extends Matrices_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    Mat4 mat4_0 = Matrices.perspective((-3.4028235E38F), (-3.4028235E38F), (-3496.3435F), (-3.4028235E38F));\n    assertEquals(4, mat4_0.getNumRows());\n}\n}"
    },
    {
        "original_path": "jroyalty_jglm###jroyalty_jglm/src/test/java/com/hackoeur/jglm/MatricesTest###testOrtho",
        "generated_path": "Matrices_ortho.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.hackoeur.jglm;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.hackoeur.jglm.Mat3;\nimport com.hackoeur.jglm.Mat4;\nimport com.hackoeur.jglm.Matrices;\nimport com.hackoeur.jglm.Vec3;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class Matrices_ortho extends Matrices_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    Mat4 mat4_0 = Matrices.ortho((-188.14726F), (-188.14726F), (-188.14726F), (-1921.394F), (-1921.394F), (-1921.394F));\n    assertEquals(4, mat4_0.getNumColumns());\n}\n}"
    },
    {
        "original_path": "jroyalty_jglm###jroyalty_jglm/src/test/java/com/hackoeur/jglm/Mat4Test###testGetColumns",
        "generated_path": "Mat4_getColumns.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.hackoeur.jglm;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.hackoeur.jglm.Mat;\nimport com.hackoeur.jglm.Mat3;\nimport com.hackoeur.jglm.Mat4;\nimport com.hackoeur.jglm.Vec3;\nimport com.hackoeur.jglm.Vec4;\nimport java.nio.BufferUnderflowException;\nimport java.nio.FloatBuffer;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class Mat4_getColumns extends Mat4_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test80() throws Throwable {\n    Mat4 mat4_0 = Mat4.MAT4_ZERO;\n    Iterable<Vec3> iterable0 = mat4_0.getColumns();\n    assertNotNull(iterable0);\n}\n}"
    },
    {
        "original_path": "CycloneDX_cyclonedx-core-java###CycloneDX_cyclonedx-core-java/src/test/java/org/cyclonedx/util/BomUtilsTest###calculateHashesTest",
        "generated_path": "BomUtils_calculateHashes.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.cyclonedx.util;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.io.File;\nimport java.nio.file.AccessDeniedException;\nimport java.nio.file.InvalidPathException;\nimport java.nio.file.NoSuchFileException;\nimport java.util.List;\nimport org.cyclonedx.CycloneDxSchema;\nimport org.cyclonedx.model.Hash;\nimport org.cyclonedx.util.BomUtils;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.io.MockFile;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class BomUtils_calculateHashes extends BomUtils_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    MockFile mockFile0 = new MockFile(\"\");\n    mockFile0.createNewFile();\n    mockFile0.delete();\n    CycloneDxSchema.Version cycloneDxSchema_Version0 = CycloneDxSchema.Version.VERSION_13;\n    try {\n        BomUtils.calculateHashes(mockFile0, cycloneDxSchema_Version0);\n        fail(\"Expecting exception: AccessDeniedException\");\n    } catch (AccessDeniedException e) {\n    }\n}\n}"
    },
    {
        "original_path": "IMSGlobal_basiclti-util-java###IMSGlobal_basiclti-util-java/src/test/java/org/imsglobal/lti/BasicLTIUtilTest###testGetRealPath",
        "generated_path": "BasicLTIUtil_getRealPath.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "package org.imsglobal.lti;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.io.BufferedInputStream;\nimport java.io.ByteArrayInputStream;\nimport java.io.FileDescriptor;\nimport java.io.FileNotFoundException;\nimport java.io.OutputStream;\nimport java.io.PipedInputStream;\nimport java.io.PipedOutputStream;\nimport java.io.StringWriter;\nimport java.time.ZoneId;\nimport java.util.Enumeration;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Properties;\nimport java.util.function.BiConsumer;\nimport java.util.function.BiFunction;\nimport java.util.function.Function;\nimport javax.servlet.http.Cookie;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletRequestWrapper;\nimport net.oauth.OAuth;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.System;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.mock.java.io.MockFileInputStream;\nimport org.evosuite.runtime.mock.java.io.MockFileOutputStream;\nimport org.evosuite.runtime.testdata.EvoSuiteFile;\nimport org.evosuite.runtime.testdata.FileSystemHandling;\nimport org.imsglobal.lti.BasicLTIUtil;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class BasicLTIUtil_getRealPath extends BasicLTIUtil_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    Map<String, String> map0 = ZoneId.SHORT_IDS;\n    Properties properties0 = BasicLTIUtil.convertToProperties(map0);\n    Properties properties1 = new Properties(properties0);\n    Map<String, String> map1 = BasicLTIUtil.convertToMap(properties1);\n    properties1.putIfAbsent(properties0, map1);\n    Object object0 = new Object();\n    properties1.put(map0, object0);\n    BasicLTIUtil.parseDescriptor(map1, map0, \"&X%@_$Kj\");\n    BasicLTIUtil.isSpecifiedPropertyName(\"saCa;V)hQ|J-@G*3\");\n    String string0 = BasicLTIUtil.postLaunchHTML(map0, \"&X%@_$Kj\", true);\n    BasicLTIUtil.htmlspecialchars(\"&X%@_$Kj\");\n    String string1 = null;\n    // Undeclared exception!\n    try {\n        BasicLTIUtil.getRealPath(string0, (String) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        //\n        // no message in exception (getMessage() returned null)\n        //\n    }\n}\n}"
    },
    {
        "original_path": "MagicTheGathering_mtg-sdk-java###MagicTheGathering_mtg-sdk-java/src/test/java/io/magicthegathering/javasdk/api/SetAPITest###testGetSet",
        "generated_path": "SetAPI_getSet.java",
        "Compile_result": 1,
        "Test_result": 0,
        "Gen_Test": "package io.magicthegathering.javasdk.api;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport io.magicthegathering.javasdk.api.SetAPI;\nimport java.util.LinkedList;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class SetAPI_getSet extends SetAPI_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void SetAPI_getSet() throws Throwable {\n    // Undeclared exception!\n    try {\n        SetAPI.getSet(\"\");\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        //\n        // no message in exception (getMessage() returned null)\n        //\n        verifyException(\"okhttp3.internal.connection.StreamAllocation\", e);\n    }\n}\n}"
    },
    {
        "original_path": "MagicTheGathering_mtg-sdk-java###MagicTheGathering_mtg-sdk-java/src/test/java/io/magicthegathering/javasdk/api/SetAPITest###testGetAllSetsWithCards",
        "generated_path": "SetAPI_getAllSetsWithCards.java",
        "Compile_result": 1,
        "Test_result": 0,
        "Gen_Test": "package io.magicthegathering.javasdk.api;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport io.magicthegathering.javasdk.api.SetAPI;\nimport java.util.LinkedList;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class SetAPI_getAllSetsWithCards extends SetAPI_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void SetAPI_getAllSetsWithCards() throws Throwable {\n    // Undeclared exception!\n    try {\n        SetAPI.getAllSetsWithCards();\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        //\n        // no message in exception (getMessage() returned null)\n        //\n        verifyException(\"okhttp3.internal.connection.StreamAllocation\", e);\n    }\n}\n}"
    },
    {
        "original_path": "perwendel_spark###perwendel_spark/src/test/java/spark/utils/SparkUtilsTest###testConvertRouteToList",
        "generated_path": "SparkUtils_convertRouteToList.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package spark.utils;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport spark.utils.SparkUtils;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class SparkUtils_convertRouteToList extends SparkUtils_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test0() throws Throwable {\n    List<String> list0 = SparkUtils.convertRouteToList(\"cG/I3HA7?T[X\");\n    assertFalse(list0.contains(\"cG/I3HA7?T[X\"));\n    assertEquals(2, list0.size());\n}\n}"
    },
    {
        "original_path": "perwendel_spark###perwendel_spark/src/test/java/spark/embeddedserver/jetty/SocketConnectorFactoryTest###testCreateSocketConnector",
        "generated_path": "SocketConnectorFactory_createSocketConnector.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package spark.embeddedserver.jetty;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport org.eclipse.jetty.server.Server;\nimport org.eclipse.jetty.server.ServerConnector;\nimport org.eclipse.jetty.util.thread.MonitoredQueuedThreadPool;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport spark.embeddedserver.jetty.SocketConnectorFactory;\nimport spark.ssl.SslStores;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class SocketConnectorFactory_createSocketConnector extends SocketConnectorFactory_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test0() throws Throwable {\n    Server server0 = new Server((-1344));\n    ServerConnector serverConnector0 = SocketConnectorFactory.createSocketConnector(server0, \"STARTING\", 0, false);\n    assertEquals(3600000L, serverConnector0.getIdleTimeout());\n    assertEquals(0, serverConnector0.getPort());\n}\n}"
    },
    {
        "original_path": "perwendel_spark###perwendel_spark/src/test/java/spark/embeddedserver/jetty/SocketConnectorFactoryTest###testCreateSecureSocketConnector",
        "generated_path": "SocketConnectorFactory_createSecureSocketConnector.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package spark.embeddedserver.jetty;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport org.eclipse.jetty.server.Server;\nimport org.eclipse.jetty.server.ServerConnector;\nimport org.eclipse.jetty.util.thread.MonitoredQueuedThreadPool;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport spark.embeddedserver.jetty.SocketConnectorFactory;\nimport spark.ssl.SslStores;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class SocketConnectorFactory_createSecureSocketConnector extends SocketConnectorFactory_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test4() throws Throwable {\n    Server server0 = new Server(0);\n    SslStores sslStores0 = SslStores.create(\"\", \"FAILED\", \"STOPPING\", \"A72,q}}Ot\u007f\", true);\n    ServerConnector serverConnector0 = SocketConnectorFactory.createSecureSocketConnector(server0, \".\\\"1Xg-2pOy:Est\", 0, sslStores0, true);\n    assertEquals(3600000L, serverConnector0.getIdleTimeout());\n    assertEquals(0, serverConnector0.getPort());\n}\n}"
    },
    {
        "original_path": "perwendel_spark###perwendel_spark/src/test/java/spark/utils/MimeParseTest###testBestMatch",
        "generated_path": "MimeParse_bestMatch.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package spark.utils;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.util.Collection;\nimport java.util.HashSet;\nimport java.util.LinkedHashSet;\nimport java.util.LinkedList;\nimport java.util.TreeSet;\nimport java.util.concurrent.LinkedBlockingQueue;\nimport java.util.concurrent.PriorityBlockingQueue;\nimport java.util.concurrent.TimeUnit;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport spark.utils.MimeParse;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class MimeParse_bestMatch extends MimeParse_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    LinkedList<String> linkedList0 = new LinkedList<String>();\n    linkedList0.add(\"\");\n    String string0 = MimeParse.bestMatch(linkedList0, \"/Ejm>8Hw.!'!m~\");\n    assertEquals(\"\", string0);\n}\n}"
    },
    {
        "original_path": "perwendel_spark###perwendel_spark/src/test/java/spark/SessionTest###testAttributes",
        "generated_path": "Session_attributes.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package spark;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport javax.servlet.http.HttpSession;\nimport org.eclipse.jetty.server.session.DefaultSessionCache;\nimport org.eclipse.jetty.server.session.NullSessionCache;\nimport org.eclipse.jetty.server.session.SessionData;\nimport org.eclipse.jetty.server.session.SessionHandler;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport spark.Request;\nimport spark.Session;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class Session_attributes extends Session_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void Session_attributes() throws Throwable {\n    SessionHandler sessionHandler0 = new SessionHandler();\n    DefaultSessionCache defaultSessionCache0 = new DefaultSessionCache(sessionHandler0);\n    org.eclipse.jetty.server.session.Session session0 = defaultSessionCache0.newSession((SessionData) null);\n    Request request0 = new Request();\n    Session session1 = new Session(session0, request0);\n    // Undeclared exception!\n    try {\n        session1.attributes();\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        //\n        // no message in exception (getMessage() returned null)\n        //\n        verifyException(\"org.eclipse.jetty.server.session.Session\", e);\n    }\n}\n}"
    },
    {
        "original_path": "jqno_equalsverifier###jqno_equalsverifier/equalsverifier-core/src/test/java/nl/jqno/equalsverifier/internal/prefabvalues/TypeTagTest###testToString",
        "generated_path": "TypeTag_toString.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package nl.jqno.equalsverifier.internal.prefabvalues;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.lang.reflect.Field;\nimport java.util.List;\nimport nl.jqno.equalsverifier.internal.prefabvalues.TypeTag;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class TypeTag_toString extends TypeTag_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    TypeTag typeTag0 = TypeTag.NULL;\n    String string0 = typeTag0.toString();\n    assertEquals(\"NullType\", string0);\n}\n}"
    },
    {
        "original_path": "NanoHttpd_nanohttpd###NanoHttpd_nanohttpd/core/src/test/java/org/nanohttpd/junit/protocols/http/CookieTest###testGetHTTPTime",
        "generated_path": "Cookie_getHTTPTime.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.nanohttpd.protocols.http.content;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport org.nanohttpd.protocols.http.content.Cookie;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class Cookie_getHTTPTime extends Cookie_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test0() throws Throwable {\n    String string0 = Cookie.getHTTPTime(0);\n    assertEquals(\"Fri, 14 Feb 2014 20:21:21 GMT\", string0);\n}\n}"
    },
    {
        "original_path": "protostuff_protostuff###protostuff_protostuff/protostuff-core/src/test/java/io/protostuff/ProtobufOutputTest###testComputeRawVarint32Size",
        "generated_path": "ProtobufOutput_computeRawVarint32Size.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package io.protostuff;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport io.protostuff.ByteArrayInput;\nimport io.protostuff.ByteString;\nimport io.protostuff.CodedInput;\nimport io.protostuff.GraphCodedInput;\nimport io.protostuff.LinkedBuffer;\nimport io.protostuff.ProtobufOutput;\nimport io.protostuff.ProtostuffOutput;\nimport io.protostuff.Schema;\nimport io.protostuff.WriteSession;\nimport java.io.ByteArrayOutputStream;\nimport java.io.DataOutput;\nimport java.io.DataOutputStream;\nimport java.io.IOException;\nimport java.io.OutputStream;\nimport java.nio.ByteBuffer;\nimport java.nio.CharBuffer;\nimport java.nio.ReadOnlyBufferException;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.mock.java.io.MockFileOutputStream;\nimport org.evosuite.runtime.mock.java.io.MockPrintStream;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class ProtobufOutput_computeRawVarint32Size extends ProtobufOutput_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test080() throws Throwable {\n    int int0 = ProtobufOutput.computeRawVarint32Size(2097152);\n    assertEquals(4, int0);\n}\n}"
    },
    {
        "original_path": "protostuff_protostuff###protostuff_protostuff/protostuff-core/src/test/java/io/protostuff/LinkBufferTest###testGetBuffers",
        "generated_path": "LinkBuffer_getBuffers.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package io.protostuff;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport io.protostuff.LinkBuffer;\nimport java.nio.BufferOverflowException;\nimport java.nio.ByteBuffer;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class LinkBuffer_getBuffers extends LinkBuffer_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test35() throws Throwable {\n    LinkBuffer linkBuffer0 = new LinkBuffer(1160);\n    linkBuffer0.finish();\n    linkBuffer0.getBuffers();\n    assertEquals(1160, linkBuffer0.allocSize);\n}\n}"
    },
    {
        "original_path": "protostuff_protostuff###protostuff_protostuff/protostuff-core/src/test/java/io/protostuff/ProtobufOutputTest###testWriteRawLittleEndian64",
        "generated_path": "ProtobufOutput_writeRawLittleEndian64.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package io.protostuff;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport io.protostuff.ByteArrayInput;\nimport io.protostuff.ByteString;\nimport io.protostuff.CodedInput;\nimport io.protostuff.GraphCodedInput;\nimport io.protostuff.LinkedBuffer;\nimport io.protostuff.ProtobufOutput;\nimport io.protostuff.ProtostuffOutput;\nimport io.protostuff.Schema;\nimport io.protostuff.WriteSession;\nimport java.io.ByteArrayOutputStream;\nimport java.io.DataOutput;\nimport java.io.DataOutputStream;\nimport java.io.IOException;\nimport java.io.OutputStream;\nimport java.nio.ByteBuffer;\nimport java.nio.CharBuffer;\nimport java.nio.ReadOnlyBufferException;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.mock.java.io.MockFileOutputStream;\nimport org.evosuite.runtime.mock.java.io.MockPrintStream;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class ProtobufOutput_writeRawLittleEndian64 extends ProtobufOutput_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test012() throws Throwable {\n    byte[] byteArray0 = ProtobufOutput.getTagAndRawLittleEndian32Bytes((-624), 0);\n    assertNotNull(byteArray0);\n    assertArrayEquals(new byte[] { (byte) (-112), (byte) (-5), (byte) (-1), (byte) (-1), (byte) 15, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }, byteArray0);\n    assertEquals(9, byteArray0.length);\n    int int0 = ProtobufOutput.writeRawLittleEndian64((-624), byteArray0, 0);\n    assertEquals(8, int0);\n    assertArrayEquals(new byte[] { (byte) (-112), (byte) (-3), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) 0 }, byteArray0);\n    assertEquals(9, byteArray0.length);\n}\n}"
    },
    {
        "original_path": "protostuff_protostuff###protostuff_protostuff/protostuff-core/src/test/java/io/protostuff/ProtobufOutputTest###testComputeRawVarint64Size",
        "generated_path": "ProtobufOutput_computeRawVarint64Size.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package io.protostuff;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport io.protostuff.ByteArrayInput;\nimport io.protostuff.ByteString;\nimport io.protostuff.CodedInput;\nimport io.protostuff.GraphCodedInput;\nimport io.protostuff.LinkedBuffer;\nimport io.protostuff.ProtobufOutput;\nimport io.protostuff.ProtostuffOutput;\nimport io.protostuff.Schema;\nimport io.protostuff.WriteSession;\nimport java.io.ByteArrayOutputStream;\nimport java.io.DataOutput;\nimport java.io.DataOutputStream;\nimport java.io.IOException;\nimport java.io.OutputStream;\nimport java.nio.ByteBuffer;\nimport java.nio.CharBuffer;\nimport java.nio.ReadOnlyBufferException;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.mock.java.io.MockFileOutputStream;\nimport org.evosuite.runtime.mock.java.io.MockPrintStream;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class ProtobufOutput_computeRawVarint64Size extends ProtobufOutput_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test077() throws Throwable {\n    int int0 = ProtobufOutput.computeRawVarint64Size(1823L);\n    assertEquals(2, int0);\n}\n}"
    },
    {
        "original_path": "protostuff_protostuff###protostuff_protostuff/protostuff-core/src/test/java/io/protostuff/ProtobufOutputTest###testGetTagAndRawVarInt32Bytes",
        "generated_path": "ProtobufOutput_getTagAndRawVarInt32Bytes.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package io.protostuff;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport io.protostuff.ByteArrayInput;\nimport io.protostuff.ByteString;\nimport io.protostuff.CodedInput;\nimport io.protostuff.GraphCodedInput;\nimport io.protostuff.LinkedBuffer;\nimport io.protostuff.ProtobufOutput;\nimport io.protostuff.ProtostuffOutput;\nimport io.protostuff.Schema;\nimport io.protostuff.WriteSession;\nimport java.io.ByteArrayOutputStream;\nimport java.io.DataOutput;\nimport java.io.DataOutputStream;\nimport java.io.IOException;\nimport java.io.OutputStream;\nimport java.nio.ByteBuffer;\nimport java.nio.CharBuffer;\nimport java.nio.ReadOnlyBufferException;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.mock.java.io.MockFileOutputStream;\nimport org.evosuite.runtime.mock.java.io.MockPrintStream;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class ProtobufOutput_getTagAndRawVarInt32Bytes extends ProtobufOutput_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test116() throws Throwable {\n    byte[] byteArray0 = ProtobufOutput.getTagAndRawVarInt32Bytes(0, 1679);\n    assertNotNull(byteArray0);\n    assertArrayEquals(new byte[] { (byte) 0, (byte) (-113), (byte) 13 }, byteArray0);\n    assertEquals(3, byteArray0.length);\n}\n}"
    },
    {
        "original_path": "protostuff_protostuff###protostuff_protostuff/protostuff-core/src/test/java/io/protostuff/ProtobufOutputTest###testWriteRawVarInt32",
        "generated_path": "ProtobufOutput_writeRawVarInt32.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package io.protostuff;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport io.protostuff.ByteArrayInput;\nimport io.protostuff.ByteString;\nimport io.protostuff.CodedInput;\nimport io.protostuff.GraphCodedInput;\nimport io.protostuff.LinkedBuffer;\nimport io.protostuff.ProtobufOutput;\nimport io.protostuff.ProtostuffOutput;\nimport io.protostuff.Schema;\nimport io.protostuff.WriteSession;\nimport java.io.ByteArrayOutputStream;\nimport java.io.DataOutput;\nimport java.io.DataOutputStream;\nimport java.io.IOException;\nimport java.io.OutputStream;\nimport java.nio.ByteBuffer;\nimport java.nio.CharBuffer;\nimport java.nio.ReadOnlyBufferException;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.mock.java.io.MockFileOutputStream;\nimport org.evosuite.runtime.mock.java.io.MockPrintStream;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class ProtobufOutput_writeRawVarInt32 extends ProtobufOutput_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test010() throws Throwable {\n    byte[] byteArray0 = new byte[5];\n    ProtobufOutput.writeRawVarInt32((-1393), byteArray0, 0);\n    assertArrayEquals(new byte[] { (byte) (-113), (byte) (-11), (byte) (-1), (byte) (-1), (byte) 15 }, byteArray0);\n    assertEquals(5, byteArray0.length);\n}\n}"
    },
    {
        "original_path": "protostuff_protostuff###protostuff_protostuff/protostuff-core/src/test/java/io/protostuff/ProtobufOutputTest###testGetTagAndRawVarInt64Bytes",
        "generated_path": "ProtobufOutput_getTagAndRawVarInt64Bytes.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package io.protostuff;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport io.protostuff.ByteArrayInput;\nimport io.protostuff.ByteString;\nimport io.protostuff.CodedInput;\nimport io.protostuff.GraphCodedInput;\nimport io.protostuff.LinkedBuffer;\nimport io.protostuff.ProtobufOutput;\nimport io.protostuff.ProtostuffOutput;\nimport io.protostuff.Schema;\nimport io.protostuff.WriteSession;\nimport java.io.ByteArrayOutputStream;\nimport java.io.DataOutput;\nimport java.io.DataOutputStream;\nimport java.io.IOException;\nimport java.io.OutputStream;\nimport java.nio.ByteBuffer;\nimport java.nio.CharBuffer;\nimport java.nio.ReadOnlyBufferException;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.mock.java.io.MockFileOutputStream;\nimport org.evosuite.runtime.mock.java.io.MockPrintStream;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class ProtobufOutput_getTagAndRawVarInt64Bytes extends ProtobufOutput_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test003() throws Throwable {\n    byte[] byteArray0 = ProtobufOutput.getTagAndRawVarInt64Bytes((-1281), (-268435456L));\n    assertNotNull(byteArray0);\n    assertEquals(15, byteArray0.length);\n}\n}"
    },
    {
        "original_path": "protostuff_protostuff###protostuff_protostuff/protostuff-core/src/test/java/io/protostuff/ProtobufOutputTest###testGetTagAndRawLittleEndian32Bytes",
        "generated_path": "ProtobufOutput_getTagAndRawLittleEndian32Bytes.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package io.protostuff;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport io.protostuff.ByteArrayInput;\nimport io.protostuff.ByteString;\nimport io.protostuff.CodedInput;\nimport io.protostuff.GraphCodedInput;\nimport io.protostuff.LinkedBuffer;\nimport io.protostuff.ProtobufOutput;\nimport io.protostuff.ProtostuffOutput;\nimport io.protostuff.Schema;\nimport io.protostuff.WriteSession;\nimport java.io.ByteArrayOutputStream;\nimport java.io.DataOutput;\nimport java.io.DataOutputStream;\nimport java.io.IOException;\nimport java.io.OutputStream;\nimport java.nio.ByteBuffer;\nimport java.nio.CharBuffer;\nimport java.nio.ReadOnlyBufferException;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.mock.java.io.MockFileOutputStream;\nimport org.evosuite.runtime.mock.java.io.MockPrintStream;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class ProtobufOutput_getTagAndRawLittleEndian32Bytes extends ProtobufOutput_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test012() throws Throwable {\n    byte[] byteArray0 = ProtobufOutput.getTagAndRawLittleEndian32Bytes((-624), 0);\n    assertNotNull(byteArray0);\n    assertArrayEquals(new byte[] { (byte) (-112), (byte) (-5), (byte) (-1), (byte) (-1), (byte) 15, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }, byteArray0);\n    assertEquals(9, byteArray0.length);\n    int int0 = ProtobufOutput.writeRawLittleEndian64((-624), byteArray0, 0);\n    assertEquals(8, int0);\n    assertArrayEquals(new byte[] { (byte) (-112), (byte) (-3), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) 0 }, byteArray0);\n    assertEquals(9, byteArray0.length);\n}\n}"
    },
    {
        "original_path": "protostuff_protostuff###protostuff_protostuff/protostuff-core/src/test/java/io/protostuff/ProtobufOutputTest###testWriteRawLittleEndian32",
        "generated_path": "ProtobufOutput_writeRawLittleEndian32.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package io.protostuff;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport io.protostuff.ByteArrayInput;\nimport io.protostuff.ByteString;\nimport io.protostuff.CodedInput;\nimport io.protostuff.GraphCodedInput;\nimport io.protostuff.LinkedBuffer;\nimport io.protostuff.ProtobufOutput;\nimport io.protostuff.ProtostuffOutput;\nimport io.protostuff.Schema;\nimport io.protostuff.WriteSession;\nimport java.io.ByteArrayOutputStream;\nimport java.io.DataOutput;\nimport java.io.DataOutputStream;\nimport java.io.IOException;\nimport java.io.OutputStream;\nimport java.nio.ByteBuffer;\nimport java.nio.CharBuffer;\nimport java.nio.ReadOnlyBufferException;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.mock.java.io.MockFileOutputStream;\nimport org.evosuite.runtime.mock.java.io.MockPrintStream;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class ProtobufOutput_writeRawLittleEndian32 extends ProtobufOutput_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test087() throws Throwable {\n    byte[] byteArray0 = new byte[9];\n    int int0 = ProtobufOutput.writeRawLittleEndian32(885, byteArray0, (byte) 0);\n    assertEquals(4, int0);\n    assertArrayEquals(new byte[] { (byte) 117, (byte) 3, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }, byteArray0);\n    assertEquals(9, byteArray0.length);\n}\n}"
    },
    {
        "original_path": "protostuff_protostuff###protostuff_protostuff/protostuff-core/src/test/java/io/protostuff/ProtobufOutputTest###testGetTagAndRawLittleEndian64Bytes",
        "generated_path": "ProtobufOutput_getTagAndRawLittleEndian64Bytes.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package io.protostuff;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport io.protostuff.ByteArrayInput;\nimport io.protostuff.ByteString;\nimport io.protostuff.CodedInput;\nimport io.protostuff.GraphCodedInput;\nimport io.protostuff.LinkedBuffer;\nimport io.protostuff.ProtobufOutput;\nimport io.protostuff.ProtostuffOutput;\nimport io.protostuff.Schema;\nimport io.protostuff.WriteSession;\nimport java.io.ByteArrayOutputStream;\nimport java.io.DataOutput;\nimport java.io.DataOutputStream;\nimport java.io.IOException;\nimport java.io.OutputStream;\nimport java.nio.ByteBuffer;\nimport java.nio.CharBuffer;\nimport java.nio.ReadOnlyBufferException;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.mock.java.io.MockFileOutputStream;\nimport org.evosuite.runtime.mock.java.io.MockPrintStream;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class ProtobufOutput_getTagAndRawLittleEndian64Bytes extends ProtobufOutput_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test002() throws Throwable {\n    byte[] byteArray0 = ProtobufOutput.getTagAndRawLittleEndian64Bytes((byte) (-1), (-665L));\n    assertNotNull(byteArray0);\n    assertEquals(13, byteArray0.length);\n}\n}"
    },
    {
        "original_path": "protostuff_protostuff###protostuff_protostuff/protostuff-core/src/test/java/io/protostuff/ProtobufOutputTest###testGetRawVarInt32Bytes",
        "generated_path": "ProtobufOutput_getRawVarInt32Bytes.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package io.protostuff;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport io.protostuff.ByteArrayInput;\nimport io.protostuff.ByteString;\nimport io.protostuff.CodedInput;\nimport io.protostuff.GraphCodedInput;\nimport io.protostuff.LinkedBuffer;\nimport io.protostuff.ProtobufOutput;\nimport io.protostuff.ProtostuffOutput;\nimport io.protostuff.Schema;\nimport io.protostuff.WriteSession;\nimport java.io.ByteArrayOutputStream;\nimport java.io.DataOutput;\nimport java.io.DataOutputStream;\nimport java.io.IOException;\nimport java.io.OutputStream;\nimport java.nio.ByteBuffer;\nimport java.nio.CharBuffer;\nimport java.nio.ReadOnlyBufferException;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.mock.java.io.MockFileOutputStream;\nimport org.evosuite.runtime.mock.java.io.MockPrintStream;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class ProtobufOutput_getRawVarInt32Bytes extends ProtobufOutput_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test001() throws Throwable {\n    byte[] byteArray0 = ProtobufOutput.getRawVarInt32Bytes((-1713));\n    assertNotNull(byteArray0);\n    assertArrayEquals(new byte[] { (byte) (-49), (byte) (-14), (byte) (-1), (byte) (-1), (byte) 15 }, byteArray0);\n    assertEquals(5, byteArray0.length);\n}\n}"
    },
    {
        "original_path": "alexxiyang_shiro-redis###alexxiyang_shiro-redis/src/test/java/org/crazycake/shiro/RedisSessionDAOTest###testUpdate",
        "generated_path": "RedisSessionDAO_update.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.crazycake.shiro;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.io.Serializable;\nimport java.time.temporal.ChronoField;\nimport org.apache.shiro.session.Session;\nimport org.apache.shiro.session.mgt.eis.SessionIdGenerator;\nimport org.crazycake.shiro.RedisClusterManager;\nimport org.crazycake.shiro.RedisManager;\nimport org.crazycake.shiro.RedisSentinelManager;\nimport org.crazycake.shiro.RedisSessionDAO;\nimport org.crazycake.shiro.common.SessionInMemory;\nimport org.crazycake.shiro.serializer.RedisSerializer;\nimport org.crazycake.shiro.serializer.StringSerializer;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.Random;\nimport org.evosuite.runtime.System;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.testdata.EvoSuiteLocalAddress;\nimport org.evosuite.runtime.testdata.NetworkHandling;\nimport org.junit.runner.RunWith;\nimport redis.clients.jedis.HostAndPort;\nimport redis.clients.jedis.Protocol;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class RedisSessionDAO_update extends RedisSessionDAO_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void RedisSessionDAO_update() throws Throwable {\n    RedisSessionDAO redisSessionDAO0 = new RedisSessionDAO();\n    try {\n        redisSessionDAO0.update((Session) null);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        //\n        // session or session id is null\n        //\n        verifyException(\"org.crazycake.shiro.RedisSessionDAO\", e);\n    }\n}\n}"
    },
    {
        "original_path": "alexxiyang_shiro-redis###alexxiyang_shiro-redis/src/test/java/org/crazycake/shiro/RedisSessionDAOTest###testDelete",
        "generated_path": "RedisSessionDAO_delete.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.crazycake.shiro;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.io.Serializable;\nimport java.time.temporal.ChronoField;\nimport org.apache.shiro.session.Session;\nimport org.apache.shiro.session.mgt.eis.SessionIdGenerator;\nimport org.crazycake.shiro.RedisClusterManager;\nimport org.crazycake.shiro.RedisManager;\nimport org.crazycake.shiro.RedisSentinelManager;\nimport org.crazycake.shiro.RedisSessionDAO;\nimport org.crazycake.shiro.common.SessionInMemory;\nimport org.crazycake.shiro.serializer.RedisSerializer;\nimport org.crazycake.shiro.serializer.StringSerializer;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.Random;\nimport org.evosuite.runtime.System;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.testdata.EvoSuiteLocalAddress;\nimport org.evosuite.runtime.testdata.NetworkHandling;\nimport org.junit.runner.RunWith;\nimport redis.clients.jedis.HostAndPort;\nimport redis.clients.jedis.Protocol;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class RedisSessionDAO_delete extends RedisSessionDAO_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test22() throws Throwable {\n    RedisSessionDAO redisSessionDAO0 = new RedisSessionDAO();\n    assertTrue(redisSessionDAO0.getSessionInMemoryEnabled());\n    redisSessionDAO0.setSessionInMemoryEnabled(false);\n    redisSessionDAO0.delete((Session) null);\n    assertFalse(redisSessionDAO0.getSessionInMemoryEnabled());\n}\n}"
    },
    {
        "original_path": "alexxiyang_shiro-redis###alexxiyang_shiro-redis/src/test/java/org/crazycake/shiro/RedisSessionDAOTest###testGetActiveSessions",
        "generated_path": "RedisSessionDAO_getActiveSessions.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.crazycake.shiro;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.io.Serializable;\nimport java.time.temporal.ChronoField;\nimport org.apache.shiro.session.Session;\nimport org.apache.shiro.session.mgt.eis.SessionIdGenerator;\nimport org.crazycake.shiro.RedisClusterManager;\nimport org.crazycake.shiro.RedisManager;\nimport org.crazycake.shiro.RedisSentinelManager;\nimport org.crazycake.shiro.RedisSessionDAO;\nimport org.crazycake.shiro.common.SessionInMemory;\nimport org.crazycake.shiro.serializer.RedisSerializer;\nimport org.crazycake.shiro.serializer.StringSerializer;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.Random;\nimport org.evosuite.runtime.System;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.testdata.EvoSuiteLocalAddress;\nimport org.evosuite.runtime.testdata.NetworkHandling;\nimport org.junit.runner.RunWith;\nimport redis.clients.jedis.HostAndPort;\nimport redis.clients.jedis.Protocol;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class RedisSessionDAO_getActiveSessions extends RedisSessionDAO_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test17() throws Throwable {\n    RedisSessionDAO redisSessionDAO0 = new RedisSessionDAO();\n    RedisClusterManager redisClusterManager0 = new RedisClusterManager();\n    StringSerializer stringSerializer0 = new StringSerializer();\n    redisSessionDAO0.setRedisManager(redisClusterManager0);\n    redisSessionDAO0.getActiveSessions();\n    redisSessionDAO0.getValueSerializer();\n    redisSessionDAO0.getActiveSessions();\n    redisSessionDAO0.getSessionInMemoryEnabled();\n    stringSerializer0.setCharset(\"Yq*aXx1=(O'g$d+j\");\n    RedisSerializer redisSerializer0 = redisSessionDAO0.getKeySerializer();\n    redisSessionDAO0.setKeySerializer(stringSerializer0);\n    redisSessionDAO0.getValueSerializer();\n    redisSessionDAO0.setExpire((-213));\n    redisSessionDAO0.setRedisManager(redisClusterManager0);\n    redisSessionDAO0.setValueSerializer(redisSerializer0);\n    redisSessionDAO0.getActiveSessions();\n    Protocol.Command protocol_Command0 = Protocol.Command.ZPOPMAX;\n    redisSessionDAO0.doReadSession(protocol_Command0);\n    assertEquals((-213), redisSessionDAO0.getExpire());\n}\n}"
    },
    {
        "original_path": "neoremind_fluent-validator###neoremind_fluent-validator/fluent-validator/src/test/java/com/baidu/unbiz/fluentvalidator/util/ReflectionUtilTest###testGetAnnotationFields",
        "generated_path": "ReflectionUtil_getAnnotationFields.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.baidu.unbiz.fluentvalidator.util;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.baidu.unbiz.fluentvalidator.util.ReflectionUtil;\nimport java.lang.annotation.Annotation;\nimport java.lang.reflect.Array;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.Method;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class ReflectionUtil_getAnnotationFields extends ReflectionUtil_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    Class<Annotation> class0 = Annotation.class;\n    Field[] fieldArray0 = ReflectionUtil.getAnnotationFields(class0, class0);\n    assertNull(fieldArray0);\n}\n}"
    },
    {
        "original_path": "neoremind_fluent-validator###neoremind_fluent-validator/fluent-validator/src/test/java/com/baidu/unbiz/fluentvalidator/util/ArrayUtilTest###testHasIntersection",
        "generated_path": "ArrayUtil_hasIntersection.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.baidu.unbiz.fluentvalidator.util;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.baidu.unbiz.fluentvalidator.util.ArrayUtil;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class ArrayUtil_hasIntersection extends ArrayUtil_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    Object[] objectArray0 = new Object[2];\n    Object object0 = new Object();\n    objectArray0[0] = object0;\n    objectArray0[1] = object0;\n    Object[] objectArray1 = new Object[5];\n    boolean boolean0 = ArrayUtil.hasIntersection(objectArray0, objectArray1);\n    assertFalse(boolean0);\n}\n}"
    },
    {
        "original_path": "abel533_Mapper###abel533_Mapper/core/src/test/java/tk/mybatis/mapper/util/StringUtilTest###testCamelhumpToUnderline",
        "generated_path": "StringUtil_camelhumpToUnderline.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package tk.mybatis.mapper.util;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport tk.mybatis.mapper.code.Style;\nimport tk.mybatis.mapper.util.StringUtil;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class StringUtil_camelhumpToUnderline extends StringUtil_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    String string0 = StringUtil.camelhumpToUnderline(\"2]iDF5Zc\");\n    assertEquals(\"2]i_d_f5_zc\", string0);\n}\n}"
    },
    {
        "original_path": "abel533_Mapper###abel533_Mapper/core/src/test/java/tk/mybatis/mapper/util/StringUtilTest###testUnderlineToCamelhump",
        "generated_path": "StringUtil_underlineToCamelhump.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package tk.mybatis.mapper.util;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport tk.mybatis.mapper.code.Style;\nimport tk.mybatis.mapper.util.StringUtil;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class StringUtil_underlineToCamelhump extends StringUtil_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    String string0 = StringUtil.underlineToCamelhump(\"-#_g<<_g__h\");\n    assertEquals(\"-#G<<G_H\", string0);\n}\n}"
    },
    {
        "original_path": "matteobaccan_owner###matteobaccan_owner/owner/src/test/java/org/aeonbits/owner/util/UtilTest###testReverse",
        "generated_path": "Util_reverse.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.aeonbits.owner.util;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.lang.reflect.Array;\nimport java.lang.reflect.Method;\nimport java.net.URI;\nimport java.net.URISyntaxException;\nimport java.util.Collection;\nimport java.util.IllegalFormatConversionException;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.MissingFormatArgumentException;\nimport java.util.Properties;\nimport java.util.UnknownFormatConversionException;\nimport org.aeonbits.owner.Config;\nimport org.aeonbits.owner.util.Util;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.System;\nimport org.evosuite.runtime.mock.java.io.MockFile;\nimport org.evosuite.runtime.mock.java.lang.MockThrowable;\nimport org.evosuite.runtime.mock.java.net.MockURI;\nimport org.evosuite.runtime.testdata.EvoSuiteFile;\nimport org.evosuite.runtime.testdata.FileSystemHandling;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class Util_reverse extends Util_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    Locale.LanguageRange[] locale_LanguageRangeArray0 = new Locale.LanguageRange[0];\n    Locale.LanguageRange[] locale_LanguageRangeArray1 = Util.reverse(locale_LanguageRangeArray0);\n    assertNotSame(locale_LanguageRangeArray1, locale_LanguageRangeArray0);\n}\n}"
    },
    {
        "original_path": "Stratio_cassandra-lucene-index###Stratio_cassandra-lucene-index/plugin/src/test/java/com/stratio/cassandra/lucene/schema/mapping/FloatMapperTest###testIndexedField",
        "generated_path": "FloatMapper_indexedField.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.stratio.cassandra.lucene.schema.mapping;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.stratio.cassandra.lucene.schema.mapping.FloatMapper;\nimport java.util.Optional;\nimport org.apache.lucene.document.Field;\nimport org.apache.lucene.search.SortField;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class FloatMapper_indexedField extends FloatMapper_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    Boolean boolean0 = Boolean.FALSE;\n    Float float0 = FloatMapper.DEFAULT_BOOST;\n    FloatMapper floatMapper0 = new FloatMapper(\"k^ZJH|f;4lea&)i\", \"k^ZJH|f;4lea&)i\", boolean0, float0);\n    Optional<Field> optional0 = floatMapper0.indexedField(\"k^ZJH|f;4lea&)i\", float0);\n    assertNotNull(optional0);\n}\n}"
    },
    {
        "original_path": "Stratio_cassandra-lucene-index###Stratio_cassandra-lucene-index/plugin/src/test/java/com/stratio/cassandra/lucene/search/sort/SimpleSortFieldTest###testHashCode",
        "generated_path": "SimpleSortField_hashCode.java",
        "Compile_result": 1,
        "Test_result": 0,
        "Gen_Test": "package com.stratio.cassandra.lucene.search.sort;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.stratio.cassandra.lucene.schema.Schema;\nimport com.stratio.cassandra.lucene.schema.mapping.Mapper;\nimport com.stratio.cassandra.lucene.search.sort.SimpleSortField;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Set;\nimport org.apache.lucene.analysis.Analyzer;\nimport org.apache.lucene.analysis.eu.BasqueAnalyzer;\nimport org.apache.lucene.analysis.hy.ArmenianAnalyzer;\nimport org.apache.lucene.analysis.util.CharArraySet;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class SimpleSortField_hashCode extends SimpleSortField_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    Boolean boolean0 = Boolean.TRUE;\n    SimpleSortField simpleSortField0 = new SimpleSortField(\"^Mlpg\", boolean0);\n    simpleSortField0.hashCode();\n}\n}"
    },
    {
        "original_path": "Stratio_cassandra-lucene-index###Stratio_cassandra-lucene-index/plugin/src/test/java/com/stratio/cassandra/lucene/schema/mapping/DoubleMapperTest###testIndexedField",
        "generated_path": "DoubleMapper_indexedField.java",
        "Compile_result": 1,
        "Test_result": 0,
        "Gen_Test": "package com.stratio.cassandra.lucene.schema.mapping;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.stratio.cassandra.lucene.schema.mapping.DoubleMapper;\nimport java.util.Optional;\nimport org.apache.lucene.document.Field;\nimport org.apache.lucene.search.SortField;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class DoubleMapper_indexedField extends DoubleMapper_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    Boolean boolean0 = new Boolean(false);\n    DoubleMapper doubleMapper0 = new DoubleMapper(\"t'>,c`pq0\\\",h\\\"|Ji-JA\", \"t'>,c`pq0\\\",h\\\"|Ji-JA\", boolean0, (Float) null);\n    Double double0 = new Double((double) doubleMapper0.boost);\n    Optional<Field> optional0 = doubleMapper0.indexedField(\"DoubleMapper{field=t'>,c`pq0\\\",h\\\"|Ji-JA, validated=false, column=t'>,c`pq0\\\",h\\\"|Ji-JA, boost=1.0}\", double0);\n    assertNotNull(optional0);\n}\n}"
    },
    {
        "original_path": "Stratio_cassandra-lucene-index###Stratio_cassandra-lucene-index/plugin/src/test/java/com/stratio/cassandra/lucene/search/SearchTest###testValidate",
        "generated_path": "Search_validate.java",
        "Compile_result": 1,
        "Test_result": 0,
        "Gen_Test": "package com.stratio.cassandra.lucene.search;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.stratio.cassandra.lucene.IndexPagingState;\nimport com.stratio.cassandra.lucene.schema.Schema;\nimport com.stratio.cassandra.lucene.schema.mapping.IntegerMapper;\nimport com.stratio.cassandra.lucene.schema.mapping.Mapper;\nimport com.stratio.cassandra.lucene.search.Search;\nimport com.stratio.cassandra.lucene.search.condition.Condition;\nimport com.stratio.cassandra.lucene.search.condition.DateRangeCondition;\nimport com.stratio.cassandra.lucene.search.condition.FuzzyCondition;\nimport com.stratio.cassandra.lucene.search.condition.PrefixCondition;\nimport com.stratio.cassandra.lucene.search.sort.SimpleSortField;\nimport com.stratio.cassandra.lucene.search.sort.SortField;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Hashtable;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.Stack;\nimport java.util.Vector;\nimport org.apache.cassandra.service.pager.PagingState;\nimport org.apache.lucene.analysis.Analyzer;\nimport org.apache.lucene.analysis.ar.ArabicAnalyzer;\nimport org.apache.lucene.analysis.ca.CatalanAnalyzer;\nimport org.apache.lucene.analysis.fr.FrenchAnalyzer;\nimport org.apache.lucene.analysis.hu.HungarianAnalyzer;\nimport org.apache.lucene.analysis.miscellaneous.PerFieldAnalyzerWrapper;\nimport org.apache.lucene.analysis.nl.DutchAnalyzer;\nimport org.apache.lucene.analysis.ru.RussianAnalyzer;\nimport org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapper;\nimport org.apache.lucene.analysis.util.CharArraySet;\nimport org.apache.lucene.index.Term;\nimport org.apache.lucene.search.BooleanQuery;\nimport org.apache.lucene.search.Query;\nimport org.apache.lucene.search.RegexpQuery;\nimport org.apache.lucene.util.BytesRefBuilder;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.hyperic.sigar.pager.ListPageFetcher;\nimport org.hyperic.sigar.pager.PageControl;\nimport org.hyperic.sigar.pager.PageList;\nimport org.hyperic.sigar.pager.StaticPageFetcher;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class Search_validate extends Search_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    ArrayList<SortField> arrayList0 = new ArrayList<SortField>();\n    IndexPagingState indexPagingState0 = new IndexPagingState(1600);\n    Boolean boolean0 = Boolean.TRUE;\n    Search search0 = new Search((List<Condition>) null, (List<Condition>) null, arrayList0, indexPagingState0, boolean0);\n    Search search1 = search0.validate((Schema) null);\n    assertFalse(search1.usesRelevance());\n}\n}"
    },
    {
        "original_path": "Stratio_cassandra-lucene-index###Stratio_cassandra-lucene-index/plugin/src/test/java/com/stratio/cassandra/lucene/schema/mapping/LongMapperTest###testIndexedField",
        "generated_path": "LongMapper_indexedField.java",
        "Compile_result": 1,
        "Test_result": 0,
        "Gen_Test": "package com.stratio.cassandra.lucene.schema.mapping;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.stratio.cassandra.lucene.schema.mapping.LongMapper;\nimport java.util.Optional;\nimport org.apache.lucene.document.Field;\nimport org.apache.lucene.search.SortField;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.util.MockDate;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class LongMapper_indexedField extends LongMapper_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    Boolean boolean0 = new Boolean(\"7Wq_O8 =%)gh&\");\n    Float float0 = LongMapper.DEFAULT_BOOST;\n    LongMapper longMapper0 = new LongMapper(\"Field '{}' with value '{}' can not be parsed as long\", \"Field '{}' with value '{}' can not be parsed as long\", boolean0, float0);\n    Long long0 = new Long(0L);\n    Optional<Field> optional0 = longMapper0.indexedField(\"Field '{}' with value '{}' can not be parsed as long\", long0);\n    assertNotNull(optional0);\n}\n}"
    },
    {
        "original_path": "Stratio_cassandra-lucene-index###Stratio_cassandra-lucene-index/plugin/src/test/java/com/stratio/cassandra/lucene/search/sort/GeoDistanceSortFieldTest###testHashCode",
        "generated_path": "GeoDistanceSortField_hashCode.java",
        "Compile_result": 1,
        "Test_result": 0,
        "Gen_Test": "package com.stratio.cassandra.lucene.search.sort;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.stratio.cassandra.lucene.schema.Schema;\nimport com.stratio.cassandra.lucene.schema.mapping.Mapper;\nimport com.stratio.cassandra.lucene.search.sort.GeoDistanceSortField;\nimport java.io.StringReader;\nimport java.util.HashMap;\nimport java.util.Set;\nimport org.apache.lucene.analysis.Analyzer;\nimport org.apache.lucene.analysis.standard.ClassicAnalyzer;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class GeoDistanceSortField_hashCode extends GeoDistanceSortField_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    GeoDistanceSortField geoDistanceSortField0 = new GeoDistanceSortField(\"_+\", (Boolean) null, (-1.0), 1.0);\n    geoDistanceSortField0.hashCode();\n    assertEquals((-1.0), geoDistanceSortField0.latitude, 0.01);\n    assertEquals(1.0, geoDistanceSortField0.longitude, 0.01);\n}\n}"
    },
    {
        "original_path": "Stratio_cassandra-lucene-index###Stratio_cassandra-lucene-index/plugin/src/test/java/com/stratio/cassandra/lucene/search/sort/SimpleSortFieldTest###testEquals",
        "generated_path": "SimpleSortField_equals.java",
        "Compile_result": 1,
        "Test_result": 0,
        "Gen_Test": "package com.stratio.cassandra.lucene.search.sort;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.stratio.cassandra.lucene.schema.Schema;\nimport com.stratio.cassandra.lucene.schema.mapping.Mapper;\nimport com.stratio.cassandra.lucene.search.sort.SimpleSortField;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Set;\nimport org.apache.lucene.analysis.Analyzer;\nimport org.apache.lucene.analysis.eu.BasqueAnalyzer;\nimport org.apache.lucene.analysis.hy.ArmenianAnalyzer;\nimport org.apache.lucene.analysis.util.CharArraySet;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class SimpleSortField_equals extends SimpleSortField_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    Boolean boolean0 = Boolean.TRUE;\n    SimpleSortField simpleSortField0 = new SimpleSortField(\"fgvj;yrat'j&{f\", boolean0);\n    SimpleSortField simpleSortField1 = new SimpleSortField(\" [ABORTED]\", boolean0);\n    boolean boolean1 = simpleSortField0.equals(simpleSortField1);\n    assertFalse(boolean1);\n}\n}"
    },
    {
        "original_path": "Stratio_cassandra-lucene-index###Stratio_cassandra-lucene-index/plugin/src/test/java/com/stratio/cassandra/lucene/schema/mapping/IntegerMapperTest###testIndexedField",
        "generated_path": "IntegerMapper_indexedField.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.stratio.cassandra.lucene.schema.mapping;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.stratio.cassandra.lucene.schema.mapping.IntegerMapper;\nimport java.util.Optional;\nimport org.apache.lucene.document.Field;\nimport org.apache.lucene.search.SortField;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.util.MockDate;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class IntegerMapper_indexedField extends IntegerMapper_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    Boolean boolean0 = Boolean.FALSE;\n    Float float0 = IntegerMapper.DEFAULT_BOOST;\n    IntegerMapper integerMapper0 = new IntegerMapper(\"<X@uIVlZqG5qH7aG7c\", \"<X@uIVlZqG5qH7aG7c\", boolean0, float0);\n    Short short0 = new Short((short) 3);\n    Integer integer0 = integerMapper0.doBase(\"<X@uIVlZqG5qH7aG7c\", short0);\n    Optional<Field> optional0 = integerMapper0.indexedField(\"<X@uIVlZqG5qH7aG7c\", integer0);\n    assertNotNull(optional0);\n}\n}"
    },
    {
        "original_path": "Stratio_cassandra-lucene-index###Stratio_cassandra-lucene-index/plugin/src/test/java/com/stratio/cassandra/lucene/search/SearchTest###testPostProcessingFields",
        "generated_path": "Search_postProcessingFields.java",
        "Compile_result": 1,
        "Test_result": 0,
        "Gen_Test": "package com.stratio.cassandra.lucene.search;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.stratio.cassandra.lucene.IndexPagingState;\nimport com.stratio.cassandra.lucene.schema.Schema;\nimport com.stratio.cassandra.lucene.schema.mapping.IntegerMapper;\nimport com.stratio.cassandra.lucene.schema.mapping.Mapper;\nimport com.stratio.cassandra.lucene.search.Search;\nimport com.stratio.cassandra.lucene.search.condition.Condition;\nimport com.stratio.cassandra.lucene.search.condition.DateRangeCondition;\nimport com.stratio.cassandra.lucene.search.condition.FuzzyCondition;\nimport com.stratio.cassandra.lucene.search.condition.PrefixCondition;\nimport com.stratio.cassandra.lucene.search.sort.SimpleSortField;\nimport com.stratio.cassandra.lucene.search.sort.SortField;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Hashtable;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.Stack;\nimport java.util.Vector;\nimport org.apache.cassandra.service.pager.PagingState;\nimport org.apache.lucene.analysis.Analyzer;\nimport org.apache.lucene.analysis.ar.ArabicAnalyzer;\nimport org.apache.lucene.analysis.ca.CatalanAnalyzer;\nimport org.apache.lucene.analysis.fr.FrenchAnalyzer;\nimport org.apache.lucene.analysis.hu.HungarianAnalyzer;\nimport org.apache.lucene.analysis.miscellaneous.PerFieldAnalyzerWrapper;\nimport org.apache.lucene.analysis.nl.DutchAnalyzer;\nimport org.apache.lucene.analysis.ru.RussianAnalyzer;\nimport org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapper;\nimport org.apache.lucene.analysis.util.CharArraySet;\nimport org.apache.lucene.index.Term;\nimport org.apache.lucene.search.BooleanQuery;\nimport org.apache.lucene.search.Query;\nimport org.apache.lucene.search.RegexpQuery;\nimport org.apache.lucene.util.BytesRefBuilder;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.hyperic.sigar.pager.ListPageFetcher;\nimport org.hyperic.sigar.pager.PageControl;\nimport org.hyperic.sigar.pager.PageList;\nimport org.hyperic.sigar.pager.StaticPageFetcher;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class Search_postProcessingFields extends Search_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    LinkedList<Condition> linkedList0 = new LinkedList<Condition>();\n    ListPageFetcher listPageFetcher0 = new ListPageFetcher(linkedList0);\n    PageControl pageControl0 = new PageControl();\n    PageList pageList0 = listPageFetcher0.getPage(pageControl0);\n    IndexPagingState indexPagingState0 = new IndexPagingState(0);\n    Boolean boolean0 = Boolean.valueOf(\"\");\n    Search search0 = new Search(linkedList0, pageList0, pageList0, indexPagingState0, boolean0);\n    Set<String> set0 = search0.postProcessingFields();\n    assertEquals(0, set0.size());\n}\n}"
    },
    {
        "original_path": "Stratio_cassandra-lucene-index###Stratio_cassandra-lucene-index/plugin/src/test/java/com/stratio/cassandra/lucene/search/sort/GeoDistanceSortFieldTest###testEquals",
        "generated_path": "GeoDistanceSortField_equals.java",
        "Compile_result": 1,
        "Test_result": 0,
        "Gen_Test": "package com.stratio.cassandra.lucene.search.sort;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.stratio.cassandra.lucene.schema.Schema;\nimport com.stratio.cassandra.lucene.schema.mapping.Mapper;\nimport com.stratio.cassandra.lucene.search.sort.GeoDistanceSortField;\nimport java.io.StringReader;\nimport java.util.HashMap;\nimport java.util.Set;\nimport org.apache.lucene.analysis.Analyzer;\nimport org.apache.lucene.analysis.standard.ClassicAnalyzer;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class GeoDistanceSortField_equals extends GeoDistanceSortField_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    GeoDistanceSortField geoDistanceSortField0 = new GeoDistanceSortField(\"ColumnFamilies\", (Boolean) null, 0.0, 38.8);\n    GeoDistanceSortField geoDistanceSortField1 = new GeoDistanceSortField(\"[p~B,HT=EhB\", (Boolean) false, 38.8, 38.8);\n    boolean boolean0 = geoDistanceSortField0.equals(geoDistanceSortField1);\n    assertEquals(38.8, geoDistanceSortField1.latitude, 0.01);\n    assertFalse(boolean0);\n    assertEquals(38.8, geoDistanceSortField0.longitude, 0.01);\n}\n}"
    },
    {
        "original_path": "jmrozanec_cron-utils###jmrozanec_cron-utils/src/test/java/com/cronutils/model/time/generator/BetweenFieldValueGeneratorTest###testGenerateNextValue",
        "generated_path": "BetweenFieldValueGenerator_generateNextValue.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.cronutils.model.time.generator;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.cronutils.model.field.CronField;\nimport com.cronutils.model.field.CronFieldName;\nimport com.cronutils.model.field.constraint.FieldConstraints;\nimport com.cronutils.model.field.expression.And;\nimport com.cronutils.model.field.expression.Between;\nimport com.cronutils.model.field.expression.FieldExpression;\nimport com.cronutils.model.field.expression.On;\nimport com.cronutils.model.field.expression.visitor.FieldExpressionVisitorAdaptor;\nimport com.cronutils.model.field.expression.visitor.ValidationFieldExpressionVisitor;\nimport com.cronutils.model.field.value.FieldValue;\nimport com.cronutils.model.field.value.IntegerFieldValue;\nimport com.cronutils.model.field.value.SpecialChar;\nimport com.cronutils.model.field.value.SpecialCharFieldValue;\nimport com.cronutils.model.time.generator.BetweenFieldValueGenerator;\nimport com.cronutils.model.time.generator.FieldValueGenerator;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.LinkedHashSet;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.TreeSet;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class BetweenFieldValueGenerator_generateNextValue extends BetweenFieldValueGenerator_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    CronFieldName cronFieldName0 = CronFieldName.DAY_OF_YEAR;\n    HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();\n    HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();\n    HashSet<SpecialChar> hashSet0 = new HashSet<SpecialChar>();\n    FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, hashSet0, (-1), (-1), false);\n    ValidationFieldExpressionVisitor validationFieldExpressionVisitor0 = new ValidationFieldExpressionVisitor(fieldConstraints0);\n    IntegerFieldValue integerFieldValue0 = new IntegerFieldValue((-1));\n    Between between0 = new Between(integerFieldValue0, integerFieldValue0);\n    Between between1 = validationFieldExpressionVisitor0.visit(between0);\n    CronField cronField0 = new CronField(cronFieldName0, between1, fieldConstraints0);\n    BetweenFieldValueGenerator betweenFieldValueGenerator0 = new BetweenFieldValueGenerator(cronField0);\n    betweenFieldValueGenerator0.isMatch((-2705));\n    betweenFieldValueGenerator0.generateCandidatesNotIncludingIntervalExtremes((-1), (-1));\n    cronField0.toString();\n    betweenFieldValueGenerator0.isMatch(26);\n    betweenFieldValueGenerator0.generateCandidatesNotIncludingIntervalExtremes(2064, 2064);\n    betweenFieldValueGenerator0.isMatch((-2705));\n    betweenFieldValueGenerator0.generateNextValue((-1119));\n}\n}"
    },
    {
        "original_path": "jmrozanec_cron-utils###jmrozanec_cron-utils/src/test/java/com/cronutils/model/time/generator/AndFieldValueGeneratorTest###testGenerateCandidatesNotIncludingIntervalExtremes",
        "generated_path": "AndFieldValueGenerator_generateCandidatesNotIncludingIntervalExtremes.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.cronutils.model.time.generator;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.cronutils.model.field.CronField;\nimport com.cronutils.model.field.CronFieldName;\nimport com.cronutils.model.field.constraint.FieldConstraints;\nimport com.cronutils.model.field.expression.And;\nimport com.cronutils.model.field.expression.Between;\nimport com.cronutils.model.field.expression.Every;\nimport com.cronutils.model.field.expression.FieldExpression;\nimport com.cronutils.model.field.expression.On;\nimport com.cronutils.model.field.value.IntegerFieldValue;\nimport com.cronutils.model.field.value.SpecialChar;\nimport com.cronutils.model.field.value.SpecialCharFieldValue;\nimport com.cronutils.model.time.generator.AndFieldValueGenerator;\nimport java.util.EnumSet;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.LinkedHashSet;\nimport java.util.List;\nimport java.util.TreeSet;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class AndFieldValueGenerator_generateCandidatesNotIncludingIntervalExtremes extends AndFieldValueGenerator_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    CronFieldName cronFieldName0 = CronFieldName.DAY_OF_MONTH;\n    IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(0);\n    On on0 = new On(integerFieldValue0);\n    Between between0 = new Between(integerFieldValue0, integerFieldValue0);\n    And and0 = on0.and(between0);\n    HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();\n    HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();\n    HashSet<SpecialChar> hashSet0 = new HashSet<SpecialChar>();\n    FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, hashSet0, 0, 0, false);\n    CronField cronField0 = new CronField(cronFieldName0, and0, fieldConstraints0);\n    AndFieldValueGenerator andFieldValueGenerator0 = new AndFieldValueGenerator(cronField0);\n    List<Integer> list0 = andFieldValueGenerator0.generateCandidatesNotIncludingIntervalExtremes((-21), (-3));\n    assertFalse(list0.contains(0));\n}\n}"
    },
    {
        "original_path": "jmrozanec_cron-utils###jmrozanec_cron-utils/src/test/java/com/cronutils/model/time/generator/EveryDayOfWeekValueGeneratorTest###testGenerateNextValue",
        "generated_path": "EveryDayOfWeekValueGenerator_generateNextValue.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.cronutils.model.time.generator;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.cronutils.mapper.WeekDay;\nimport com.cronutils.model.field.CronField;\nimport com.cronutils.model.field.CronFieldName;\nimport com.cronutils.model.field.constraint.FieldConstraints;\nimport com.cronutils.model.field.expression.And;\nimport com.cronutils.model.field.expression.Every;\nimport com.cronutils.model.field.expression.FieldExpression;\nimport com.cronutils.model.field.expression.visitor.FieldExpressionVisitorAdaptor;\nimport com.cronutils.model.field.value.IntegerFieldValue;\nimport com.cronutils.model.field.value.SpecialChar;\nimport com.cronutils.model.time.generator.EveryDayOfWeekValueGenerator;\nimport com.cronutils.model.time.generator.FieldValueGenerator;\nimport java.time.DateTimeException;\nimport java.util.EnumSet;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.LinkedHashSet;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class EveryDayOfWeekValueGenerator_generateNextValue extends EveryDayOfWeekValueGenerator_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    CronFieldName cronFieldName0 = CronFieldName.DAY_OF_WEEK;\n    FieldExpressionVisitorAdaptor fieldExpressionVisitorAdaptor0 = new FieldExpressionVisitorAdaptor();\n    FieldExpression.questionMark();\n    Every every0 = new Every((IntegerFieldValue) null);\n    FieldExpression fieldExpression0 = fieldExpressionVisitorAdaptor0.visit(every0);\n    HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();\n    HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();\n    SpecialChar specialChar0 = SpecialChar.QUESTION_MARK;\n    EnumSet<SpecialChar> enumSet0 = EnumSet.of(specialChar0, specialChar0, specialChar0);\n    FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, enumSet0, 6, 6, false);\n    CronField cronField0 = new CronField(cronFieldName0, fieldExpression0, fieldConstraints0);\n    WeekDay weekDay0 = new WeekDay(0, false);\n    EveryDayOfWeekValueGenerator everyDayOfWeekValueGenerator0 = new EveryDayOfWeekValueGenerator(cronField0, 6, 6, weekDay0);\n    everyDayOfWeekValueGenerator0.isMatch(0);\n    everyDayOfWeekValueGenerator0.generateCandidates(0, 6);\n    everyDayOfWeekValueGenerator0.generateCandidatesNotIncludingIntervalExtremes(125, 565);\n    int int0 = FieldValueGenerator.NO_VALUE;\n    everyDayOfWeekValueGenerator0.generatePreviousValue(6);\n    // Undeclared exception!\n    everyDayOfWeekValueGenerator0.generateNextValue(Integer.MIN_VALUE);\n}\n}"
    },
    {
        "original_path": "jmrozanec_cron-utils###jmrozanec_cron-utils/src/test/java/com/cronutils/model/time/generator/EveryDayOfWeekValueGeneratorTest###testGenerateCandidatesNotIncludingIntervalExtremes",
        "generated_path": "EveryDayOfWeekValueGenerator_generateCandidatesNotIncludingIntervalExtremes.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.cronutils.model.time.generator;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.cronutils.mapper.WeekDay;\nimport com.cronutils.model.field.CronField;\nimport com.cronutils.model.field.CronFieldName;\nimport com.cronutils.model.field.constraint.FieldConstraints;\nimport com.cronutils.model.field.expression.And;\nimport com.cronutils.model.field.expression.Every;\nimport com.cronutils.model.field.expression.FieldExpression;\nimport com.cronutils.model.field.expression.visitor.FieldExpressionVisitorAdaptor;\nimport com.cronutils.model.field.value.IntegerFieldValue;\nimport com.cronutils.model.field.value.SpecialChar;\nimport com.cronutils.model.time.generator.EveryDayOfWeekValueGenerator;\nimport com.cronutils.model.time.generator.FieldValueGenerator;\nimport java.time.DateTimeException;\nimport java.util.EnumSet;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.LinkedHashSet;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class EveryDayOfWeekValueGenerator_generateCandidatesNotIncludingIntervalExtremes extends EveryDayOfWeekValueGenerator_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    CronFieldName cronFieldName0 = CronFieldName.DAY_OF_WEEK;\n    Every every0 = new Every((IntegerFieldValue) null);\n    HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();\n    HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();\n    SpecialChar specialChar0 = SpecialChar.QUESTION_MARK;\n    EnumSet<SpecialChar> enumSet0 = EnumSet.of(specialChar0, specialChar0, specialChar0);\n    FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, enumSet0, 0, 6, false);\n    CronField cronField0 = new CronField(cronFieldName0, every0, fieldConstraints0);\n    WeekDay weekDay0 = new WeekDay(0, false);\n    EveryDayOfWeekValueGenerator everyDayOfWeekValueGenerator0 = new EveryDayOfWeekValueGenerator(cronField0, 6, 6, weekDay0);\n    everyDayOfWeekValueGenerator0.generateCandidatesNotIncludingIntervalExtremes(0, 7);\n}\n}"
    },
    {
        "original_path": "jmrozanec_cron-utils###jmrozanec_cron-utils/src/test/java/com/cronutils/model/time/generator/EveryFieldValueGeneratorTest###testGeneratePreviousValue",
        "generated_path": "EveryFieldValueGenerator_generatePreviousValue.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.cronutils.model.time.generator;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.cronutils.model.field.CronField;\nimport com.cronutils.model.field.CronFieldName;\nimport com.cronutils.model.field.constraint.FieldConstraints;\nimport com.cronutils.model.field.expression.And;\nimport com.cronutils.model.field.expression.Every;\nimport com.cronutils.model.field.expression.FieldExpression;\nimport com.cronutils.model.field.expression.On;\nimport com.cronutils.model.field.expression.visitor.FieldExpressionVisitorAdaptor;\nimport com.cronutils.model.field.expression.visitor.ValidationFieldExpressionVisitor;\nimport com.cronutils.model.field.value.IntegerFieldValue;\nimport com.cronutils.model.field.value.SpecialChar;\nimport com.cronutils.model.field.value.SpecialCharFieldValue;\nimport com.cronutils.model.time.generator.EveryFieldValueGenerator;\nimport java.util.EnumSet;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.LinkedHashSet;\nimport java.util.TreeSet;\nimport java.util.function.BiFunction;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class EveryFieldValueGenerator_generatePreviousValue extends EveryFieldValueGenerator_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    CronFieldName cronFieldName0 = CronFieldName.HOUR;\n    IntegerFieldValue integerFieldValue0 = new IntegerFieldValue((-6381));\n    Every every0 = new Every(integerFieldValue0);\n    HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();\n    HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();\n    LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();\n    FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, (-6381), 5, true);\n    CronField cronField0 = new CronField(cronFieldName0, every0, fieldConstraints0);\n    hashMap0.entrySet();\n    EveryFieldValueGenerator everyFieldValueGenerator0 = new EveryFieldValueGenerator(cronField0);\n    Integer integer0 = new Integer((-6381));\n    hashMap1.put((Integer) null, integer0);\n    everyFieldValueGenerator0.generatePreviousValue((-6381));\n    SpecialChar specialChar0 = SpecialChar.HASH;\n    linkedHashSet0.add(specialChar0);\n    everyFieldValueGenerator0.offset();\n    everyFieldValueGenerator0.generatePreviousValue(0);\n    CronField.createFieldComparator();\n    everyFieldValueGenerator0.generatePreviousValue(1);\n    everyFieldValueGenerator0.isMatch((-6381));\n    everyFieldValueGenerator0.generateCandidatesNotIncludingIntervalExtremes(5, 0);\n    everyFieldValueGenerator0.offset();\n    everyFieldValueGenerator0.generateCandidatesNotIncludingIntervalExtremes(421, 5);\n    everyFieldValueGenerator0.generatePreviousValue((-1));\n    everyFieldValueGenerator0.generatePreviousValue(5);\n}\n}"
    },
    {
        "original_path": "jmrozanec_cron-utils###jmrozanec_cron-utils/src/test/java/com/cronutils/model/time/generator/FieldValueGeneratorFactoryTest###testCreateDayOfWeekValueGeneratorInstance",
        "generated_path": "FieldValueGeneratorFactory_createDayOfWeekValueGeneratorInstance.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.cronutils.model.time.generator;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.cronutils.mapper.WeekDay;\nimport com.cronutils.model.field.CronField;\nimport com.cronutils.model.field.CronFieldName;\nimport com.cronutils.model.field.constraint.FieldConstraints;\nimport com.cronutils.model.field.expression.And;\nimport com.cronutils.model.field.expression.Between;\nimport com.cronutils.model.field.expression.Every;\nimport com.cronutils.model.field.expression.FieldExpression;\nimport com.cronutils.model.field.expression.On;\nimport com.cronutils.model.field.value.FieldValue;\nimport com.cronutils.model.field.value.IntegerFieldValue;\nimport com.cronutils.model.field.value.SpecialChar;\nimport com.cronutils.model.field.value.SpecialCharFieldValue;\nimport com.cronutils.model.time.generator.FieldValueGenerator;\nimport com.cronutils.model.time.generator.FieldValueGeneratorFactory;\nimport java.io.Serializable;\nimport java.time.DateTimeException;\nimport java.util.EnumSet;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.LinkedHashSet;\nimport java.util.TreeSet;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class FieldValueGeneratorFactory_createDayOfWeekValueGeneratorInstance extends FieldValueGeneratorFactory_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    CronFieldName cronFieldName0 = CronFieldName.DAY_OF_WEEK;\n    IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(2);\n    SpecialChar specialChar0 = SpecialChar.NONE;\n    SpecialCharFieldValue specialCharFieldValue0 = new SpecialCharFieldValue(specialChar0);\n    On on0 = new On(integerFieldValue0, specialCharFieldValue0, integerFieldValue0);\n    HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();\n    HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();\n    LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();\n    FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 2, (-2891), true);\n    CronField cronField0 = new CronField(cronFieldName0, on0, fieldConstraints0);\n    WeekDay weekDay0 = new WeekDay(1781, true);\n    FieldValueGenerator fieldValueGenerator0 = FieldValueGeneratorFactory.createDayOfWeekValueGeneratorInstance(cronField0, (-2891), 726, weekDay0);\n    assertNotNull(fieldValueGenerator0);\n}\n}"
    },
    {
        "original_path": "jmrozanec_cron-utils###jmrozanec_cron-utils/src/test/java/com/cronutils/model/time/generator/EveryDayOfWeekValueGeneratorTest###testGeneratePreviousValue",
        "generated_path": "EveryDayOfWeekValueGenerator_generatePreviousValue.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.cronutils.model.time.generator;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.cronutils.mapper.WeekDay;\nimport com.cronutils.model.field.CronField;\nimport com.cronutils.model.field.CronFieldName;\nimport com.cronutils.model.field.constraint.FieldConstraints;\nimport com.cronutils.model.field.expression.And;\nimport com.cronutils.model.field.expression.Every;\nimport com.cronutils.model.field.expression.FieldExpression;\nimport com.cronutils.model.field.expression.visitor.FieldExpressionVisitorAdaptor;\nimport com.cronutils.model.field.value.IntegerFieldValue;\nimport com.cronutils.model.field.value.SpecialChar;\nimport com.cronutils.model.time.generator.EveryDayOfWeekValueGenerator;\nimport com.cronutils.model.time.generator.FieldValueGenerator;\nimport java.time.DateTimeException;\nimport java.util.EnumSet;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.LinkedHashSet;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class EveryDayOfWeekValueGenerator_generatePreviousValue extends EveryDayOfWeekValueGenerator_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    CronFieldName cronFieldName0 = CronFieldName.DAY_OF_WEEK;\n    IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(7);\n    Every every0 = new Every(integerFieldValue0);\n    HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();\n    HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();\n    LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();\n    FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, (-2263), 1314, true);\n    CronField cronField0 = new CronField(cronFieldName0, every0, fieldConstraints0);\n    WeekDay weekDay0 = new WeekDay(1314, true);\n    EveryDayOfWeekValueGenerator everyDayOfWeekValueGenerator0 = new EveryDayOfWeekValueGenerator(cronField0, 7, 7, weekDay0);\n    everyDayOfWeekValueGenerator0.generatePreviousValue(7);\n}\n}"
    },
    {
        "original_path": "jmrozanec_cron-utils###jmrozanec_cron-utils/src/test/java/com/cronutils/model/time/generator/OnFieldValueGeneratorTest###testGenerateCandidatesNotIncludingIntervalExtremes",
        "generated_path": "OnFieldValueGenerator_generateCandidatesNotIncludingIntervalExtremes.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.cronutils.model.time.generator;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.cronutils.model.field.CronField;\nimport com.cronutils.model.field.CronFieldName;\nimport com.cronutils.model.field.constraint.FieldConstraints;\nimport com.cronutils.model.field.expression.And;\nimport com.cronutils.model.field.expression.Every;\nimport com.cronutils.model.field.expression.On;\nimport com.cronutils.model.field.value.IntegerFieldValue;\nimport com.cronutils.model.field.value.SpecialChar;\nimport com.cronutils.model.field.value.SpecialCharFieldValue;\nimport com.cronutils.model.time.generator.OnFieldValueGenerator;\nimport java.util.EnumSet;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.LinkedHashSet;\nimport java.util.List;\nimport java.util.TreeSet;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class OnFieldValueGenerator_generateCandidatesNotIncludingIntervalExtremes extends OnFieldValueGenerator_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    CronFieldName cronFieldName0 = CronFieldName.SECOND;\n    IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(0);\n    SpecialChar specialChar0 = SpecialChar.LW;\n    SpecialCharFieldValue specialCharFieldValue0 = new SpecialCharFieldValue(specialChar0);\n    On on0 = new On(integerFieldValue0, specialCharFieldValue0, integerFieldValue0);\n    HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>(1);\n    HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();\n    LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();\n    FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 0, 1, true);\n    CronField cronField0 = new CronField(cronFieldName0, on0, fieldConstraints0);\n    OnFieldValueGenerator onFieldValueGenerator0 = new OnFieldValueGenerator(cronField0);\n    List<Integer> list0 = onFieldValueGenerator0.generateCandidatesNotIncludingIntervalExtremes((-2377), 0);\n    assertEquals(0, list0.size());\n}\n}"
    },
    {
        "original_path": "jmrozanec_cron-utils###jmrozanec_cron-utils/src/test/java/com/cronutils/parser/CronParserFieldTest###testParse",
        "generated_path": "CronParserField_parse.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.cronutils.parser;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.cronutils.model.field.CronFieldName;\nimport com.cronutils.model.field.constraint.FieldConstraints;\nimport com.cronutils.model.field.value.SpecialChar;\nimport com.cronutils.parser.CronParserField;\nimport java.util.Comparator;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.LinkedHashSet;\nimport java.util.TreeSet;\nimport java.util.regex.PatternSyntaxException;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class CronParserField_parse extends CronParserField_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    CronFieldName cronFieldName0 = CronFieldName.DAY_OF_WEEK;\n    HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();\n    HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();\n    LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();\n    FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, (-41), (-41), true);\n    CronParserField cronParserField0 = new CronParserField(cronFieldName0, fieldConstraints0, true);\n    cronParserField0.parse(\"L\");\n    assertTrue(cronParserField0.isOptional());\n}\n}"
    },
    {
        "original_path": "jmrozanec_cron-utils###jmrozanec_cron-utils/src/test/java/com/cronutils/model/time/generator/AlwaysFieldValueGeneratorTest###testGenerateCandidatesNotIncludingIntervalExtremes",
        "generated_path": "AlwaysFieldValueGenerator_generateCandidatesNotIncludingIntervalExtremes.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.cronutils.model.time.generator;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.cronutils.model.field.CronField;\nimport com.cronutils.model.field.CronFieldName;\nimport com.cronutils.model.field.constraint.FieldConstraints;\nimport com.cronutils.model.field.expression.And;\nimport com.cronutils.model.field.expression.FieldExpression;\nimport com.cronutils.model.field.value.SpecialChar;\nimport com.cronutils.model.time.generator.AlwaysFieldValueGenerator;\nimport java.util.EnumSet;\nimport java.util.HashMap;\nimport java.util.LinkedHashSet;\nimport java.util.List;\nimport java.util.Stack;\nimport java.util.TreeSet;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class AlwaysFieldValueGenerator_generateCandidatesNotIncludingIntervalExtremes extends AlwaysFieldValueGenerator_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    CronFieldName cronFieldName0 = CronFieldName.DAY_OF_YEAR;\n    FieldExpression fieldExpression0 = FieldExpression.always();\n    HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();\n    HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();\n    Stack<SpecialChar> stack0 = new Stack<SpecialChar>();\n    LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>(stack0);\n    FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 0, (-1234), false);\n    CronField cronField0 = new CronField(cronFieldName0, fieldExpression0, fieldConstraints0);\n    AlwaysFieldValueGenerator alwaysFieldValueGenerator0 = new AlwaysFieldValueGenerator(cronField0);\n    List<Integer> list0 = alwaysFieldValueGenerator0.generateCandidatesNotIncludingIntervalExtremes(1, 1);\n    assertEquals(0, list0.size());\n}\n}"
    },
    {
        "original_path": "jmrozanec_cron-utils###jmrozanec_cron-utils/src/test/java/com/cronutils/model/definition/CronDefinitionBuilderTest###testRegister",
        "generated_path": "CronDefinitionBuilder_register.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.cronutils.model.definition;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.cronutils.model.CronType;\nimport com.cronutils.model.definition.CronConstraint;\nimport com.cronutils.model.definition.CronDefinition;\nimport com.cronutils.model.definition.CronDefinitionBuilder;\nimport com.cronutils.model.field.CronFieldName;\nimport com.cronutils.model.field.constraint.FieldConstraints;\nimport com.cronutils.model.field.definition.FieldDayOfWeekDefinitionBuilder;\nimport com.cronutils.model.field.definition.FieldDefinition;\nimport com.cronutils.model.field.definition.FieldDefinitionBuilder;\nimport com.cronutils.model.field.definition.FieldQuestionMarkDefinitionBuilder;\nimport com.cronutils.model.field.definition.FieldSpecialCharsDefinitionBuilder;\nimport com.cronutils.model.field.value.SpecialChar;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.TreeSet;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class CronDefinitionBuilder_register extends CronDefinitionBuilder_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void CronDefinitionBuilder_register() throws Throwable {\n    CronDefinitionBuilder cronDefinitionBuilder0 = CronDefinitionBuilder.defineCron();\n    CronFieldName cronFieldName0 = CronFieldName.MINUTE;\n    HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();\n    HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();\n    HashSet<SpecialChar> hashSet0 = new HashSet<SpecialChar>();\n    FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, hashSet0, 1, (-853), false);\n    FieldDefinition fieldDefinition0 = new FieldDefinition(cronFieldName0, fieldConstraints0);\n    cronDefinitionBuilder0.register(fieldDefinition0);\n    // Undeclared exception!\n    try {\n        cronDefinitionBuilder0.register((FieldDefinition) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        //\n        // no message in exception (getMessage() returned null)\n        //\n        verifyException(\"com.cronutils.model.definition.CronDefinitionBuilder\", e);\n    }\n}\n}"
    },
    {
        "original_path": "jmrozanec_cron-utils###jmrozanec_cron-utils/src/test/java/com/cronutils/model/time/generator/FieldValueGeneratorFactoryTest###testForCronField",
        "generated_path": "FieldValueGeneratorFactory_forCronField.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.cronutils.model.time.generator;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.cronutils.mapper.WeekDay;\nimport com.cronutils.model.field.CronField;\nimport com.cronutils.model.field.CronFieldName;\nimport com.cronutils.model.field.constraint.FieldConstraints;\nimport com.cronutils.model.field.expression.And;\nimport com.cronutils.model.field.expression.Between;\nimport com.cronutils.model.field.expression.Every;\nimport com.cronutils.model.field.expression.FieldExpression;\nimport com.cronutils.model.field.expression.On;\nimport com.cronutils.model.field.value.FieldValue;\nimport com.cronutils.model.field.value.IntegerFieldValue;\nimport com.cronutils.model.field.value.SpecialChar;\nimport com.cronutils.model.field.value.SpecialCharFieldValue;\nimport com.cronutils.model.time.generator.FieldValueGenerator;\nimport com.cronutils.model.time.generator.FieldValueGeneratorFactory;\nimport java.io.Serializable;\nimport java.time.DateTimeException;\nimport java.util.EnumSet;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.LinkedHashSet;\nimport java.util.TreeSet;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class FieldValueGeneratorFactory_forCronField extends FieldValueGeneratorFactory_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    CronFieldName cronFieldName0 = CronFieldName.YEAR;\n    IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(0);\n    On on0 = new On(integerFieldValue0);\n    HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();\n    HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();\n    LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();\n    FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 0, (-203), false);\n    CronField cronField0 = new CronField(cronFieldName0, on0, fieldConstraints0);\n    FieldValueGenerator fieldValueGenerator0 = FieldValueGeneratorFactory.forCronField(cronField0);\n    assertNotNull(fieldValueGenerator0);\n}\n}"
    },
    {
        "original_path": "jmrozanec_cron-utils###jmrozanec_cron-utils/src/test/java/com/cronutils/model/time/generator/OnDayOfMonthValueGeneratorTest###testGeneratePreviousValue",
        "generated_path": "OnDayOfMonthValueGenerator_generatePreviousValue.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.cronutils.model.time.generator;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.cronutils.model.field.CronField;\nimport com.cronutils.model.field.CronFieldName;\nimport com.cronutils.model.field.constraint.FieldConstraints;\nimport com.cronutils.model.field.expression.And;\nimport com.cronutils.model.field.expression.On;\nimport com.cronutils.model.field.value.IntegerFieldValue;\nimport com.cronutils.model.field.value.SpecialChar;\nimport com.cronutils.model.field.value.SpecialCharFieldValue;\nimport com.cronutils.model.time.generator.OnDayOfMonthValueGenerator;\nimport java.time.DateTimeException;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.LinkedHashSet;\nimport java.util.TreeSet;\nimport java.util.Vector;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class OnDayOfMonthValueGenerator_generatePreviousValue extends OnDayOfMonthValueGenerator_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    CronFieldName cronFieldName0 = CronFieldName.DAY_OF_MONTH;\n    IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(91);\n    SpecialChar specialChar0 = SpecialChar.L;\n    SpecialCharFieldValue specialCharFieldValue0 = new SpecialCharFieldValue(specialChar0);\n    On on0 = new On(integerFieldValue0, specialCharFieldValue0, integerFieldValue0);\n    HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();\n    HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();\n    TreeSet<SpecialChar> treeSet0 = new TreeSet<SpecialChar>();\n    FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, treeSet0, 91, 19, false);\n    CronField cronField0 = new CronField(cronFieldName0, on0, fieldConstraints0);\n    OnDayOfMonthValueGenerator onDayOfMonthValueGenerator0 = new OnDayOfMonthValueGenerator(cronField0, 5, 5);\n    int int0 = onDayOfMonthValueGenerator0.generatePreviousValue(2340);\n    assertEquals((-60), int0);\n}\n}"
    },
    {
        "original_path": "jmrozanec_cron-utils###jmrozanec_cron-utils/src/test/java/com/cronutils/model/time/generator/EveryFieldValueGeneratorTest###testIsMatch",
        "generated_path": "EveryFieldValueGenerator_isMatch.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.cronutils.model.time.generator;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.cronutils.model.field.CronField;\nimport com.cronutils.model.field.CronFieldName;\nimport com.cronutils.model.field.constraint.FieldConstraints;\nimport com.cronutils.model.field.expression.And;\nimport com.cronutils.model.field.expression.Every;\nimport com.cronutils.model.field.expression.FieldExpression;\nimport com.cronutils.model.field.expression.On;\nimport com.cronutils.model.field.expression.visitor.FieldExpressionVisitorAdaptor;\nimport com.cronutils.model.field.expression.visitor.ValidationFieldExpressionVisitor;\nimport com.cronutils.model.field.value.IntegerFieldValue;\nimport com.cronutils.model.field.value.SpecialChar;\nimport com.cronutils.model.field.value.SpecialCharFieldValue;\nimport com.cronutils.model.time.generator.EveryFieldValueGenerator;\nimport java.util.EnumSet;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.LinkedHashSet;\nimport java.util.TreeSet;\nimport java.util.function.BiFunction;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class EveryFieldValueGenerator_isMatch extends EveryFieldValueGenerator_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    CronFieldName cronFieldName0 = CronFieldName.HOUR;\n    IntegerFieldValue integerFieldValue0 = new IntegerFieldValue((-6381));\n    Every every0 = new Every(integerFieldValue0);\n    HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();\n    HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();\n    LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();\n    FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, (-6381), 5, true);\n    CronField cronField0 = new CronField(cronFieldName0, every0, fieldConstraints0);\n    hashMap0.entrySet();\n    EveryFieldValueGenerator everyFieldValueGenerator0 = new EveryFieldValueGenerator(cronField0);\n    Integer integer0 = new Integer((-6381));\n    hashMap1.put((Integer) null, integer0);\n    everyFieldValueGenerator0.generatePreviousValue((-6381));\n    SpecialChar specialChar0 = SpecialChar.HASH;\n    linkedHashSet0.add(specialChar0);\n    everyFieldValueGenerator0.offset();\n    everyFieldValueGenerator0.generatePreviousValue(0);\n    CronField.createFieldComparator();\n    everyFieldValueGenerator0.generatePreviousValue(1);\n    everyFieldValueGenerator0.isMatch((-6381));\n    everyFieldValueGenerator0.generateCandidatesNotIncludingIntervalExtremes(5, 0);\n    everyFieldValueGenerator0.offset();\n    everyFieldValueGenerator0.generateCandidatesNotIncludingIntervalExtremes(421, 5);\n    everyFieldValueGenerator0.generatePreviousValue((-1));\n    everyFieldValueGenerator0.generatePreviousValue(5);\n}\n}"
    },
    {
        "original_path": "jmrozanec_cron-utils###jmrozanec_cron-utils/src/test/java/com/cronutils/model/time/generator/BetweenFieldValueGeneratorTest###testGeneratePreviousValue",
        "generated_path": "BetweenFieldValueGenerator_generatePreviousValue.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.cronutils.model.time.generator;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.cronutils.model.field.CronField;\nimport com.cronutils.model.field.CronFieldName;\nimport com.cronutils.model.field.constraint.FieldConstraints;\nimport com.cronutils.model.field.expression.And;\nimport com.cronutils.model.field.expression.Between;\nimport com.cronutils.model.field.expression.FieldExpression;\nimport com.cronutils.model.field.expression.On;\nimport com.cronutils.model.field.expression.visitor.FieldExpressionVisitorAdaptor;\nimport com.cronutils.model.field.expression.visitor.ValidationFieldExpressionVisitor;\nimport com.cronutils.model.field.value.FieldValue;\nimport com.cronutils.model.field.value.IntegerFieldValue;\nimport com.cronutils.model.field.value.SpecialChar;\nimport com.cronutils.model.field.value.SpecialCharFieldValue;\nimport com.cronutils.model.time.generator.BetweenFieldValueGenerator;\nimport com.cronutils.model.time.generator.FieldValueGenerator;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.LinkedHashSet;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.TreeSet;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class BetweenFieldValueGenerator_generatePreviousValue extends BetweenFieldValueGenerator_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(0);\n    Between between0 = new Between(integerFieldValue0, integerFieldValue0);\n    HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();\n    HashSet<SpecialChar> hashSet0 = new HashSet<SpecialChar>();\n    CronFieldName cronFieldName0 = CronFieldName.MINUTE;\n    HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();\n    FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap1, hashMap0, hashSet0, 1210, (-2645), true);\n    CronField cronField0 = new CronField(cronFieldName0, between0, fieldConstraints0);\n    BetweenFieldValueGenerator betweenFieldValueGenerator0 = new BetweenFieldValueGenerator(cronField0);\n    betweenFieldValueGenerator0.generatePreviousValue(34);\n}\n}"
    },
    {
        "original_path": "jmrozanec_cron-utils###jmrozanec_cron-utils/src/test/java/com/cronutils/model/time/generator/FieldValueGeneratorTest###testGenerateCandidates",
        "generated_path": "FieldValueGenerator_generateCandidates.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.cronutils.model.time.generator;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.cronutils.model.field.CronField;\nimport com.cronutils.model.field.CronFieldName;\nimport com.cronutils.model.field.constraint.FieldConstraints;\nimport com.cronutils.model.field.expression.And;\nimport com.cronutils.model.field.expression.FieldExpression;\nimport com.cronutils.model.field.value.SpecialChar;\nimport com.cronutils.model.time.generator.AlwaysFieldValueGenerator;\nimport com.cronutils.model.time.generator.AndFieldValueGenerator;\nimport com.cronutils.model.time.generator.NullFieldValueGenerator;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.LinkedHashSet;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class FieldValueGenerator_generateCandidates extends FieldValueGenerator_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    CronFieldName cronFieldName0 = CronFieldName.YEAR;\n    FieldExpression fieldExpression0 = FieldExpression.always();\n    HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();\n    HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();\n    HashSet<SpecialChar> hashSet0 = new HashSet<SpecialChar>();\n    FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, hashSet0, (-1180), 1047, true);\n    CronField cronField0 = new CronField(cronFieldName0, fieldExpression0, fieldConstraints0);\n    AlwaysFieldValueGenerator alwaysFieldValueGenerator0 = new AlwaysFieldValueGenerator(cronField0);\n    List<Integer> list0 = alwaysFieldValueGenerator0.generateCandidates(8, 0);\n    assertTrue(list0.contains(0));\n    assertEquals(2, list0.size());\n}\n}"
    },
    {
        "original_path": "jmrozanec_cron-utils###jmrozanec_cron-utils/src/test/java/com/cronutils/model/field/expression/EveryTest###testAsString",
        "generated_path": "Every_asString.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.cronutils.model.field.expression;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.cronutils.model.field.constraint.FieldConstraints;\nimport com.cronutils.model.field.expression.And;\nimport com.cronutils.model.field.expression.Every;\nimport com.cronutils.model.field.expression.FieldExpression;\nimport com.cronutils.model.field.expression.FieldExpressionTest;\nimport com.cronutils.model.field.expression.On;\nimport com.cronutils.model.field.expression.visitor.FieldExpressionVisitor;\nimport com.cronutils.model.field.expression.visitor.FieldExpressionVisitorAdaptor;\nimport com.cronutils.model.field.expression.visitor.ValidationFieldExpressionVisitor;\nimport com.cronutils.model.field.value.IntegerFieldValue;\nimport com.cronutils.model.field.value.SpecialChar;\nimport com.cronutils.model.field.value.SpecialCharFieldValue;\nimport java.util.HashMap;\nimport java.util.LinkedHashSet;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class Every_asString extends Every_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    FieldExpressionVisitorAdaptor fieldExpressionVisitorAdaptor0 = new FieldExpressionVisitorAdaptor();\n    And and0 = new And();\n    FieldExpression fieldExpression0 = fieldExpressionVisitorAdaptor0.visit(and0);\n    IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(2090);\n    Every every0 = new Every(fieldExpression0, integerFieldValue0);\n    fieldExpression0.and(every0);\n    // Undeclared exception!\n    try {\n        every0.asString();\n        fail(\"Expecting exception: StackOverflowError\");\n    } catch (StackOverflowError e) {\n        //\n        // no message in exception (getMessage() returned null)\n        //\n    }\n}\n}"
    },
    {
        "original_path": "jmrozanec_cron-utils###jmrozanec_cron-utils/src/test/java/com/cronutils/model/time/generator/EveryDayOfWeekValueGeneratorTest###testIsMatch",
        "generated_path": "EveryDayOfWeekValueGenerator_isMatch.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.cronutils.model.time.generator;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.cronutils.mapper.WeekDay;\nimport com.cronutils.model.field.CronField;\nimport com.cronutils.model.field.CronFieldName;\nimport com.cronutils.model.field.constraint.FieldConstraints;\nimport com.cronutils.model.field.expression.And;\nimport com.cronutils.model.field.expression.Every;\nimport com.cronutils.model.field.expression.FieldExpression;\nimport com.cronutils.model.field.expression.visitor.FieldExpressionVisitorAdaptor;\nimport com.cronutils.model.field.value.IntegerFieldValue;\nimport com.cronutils.model.field.value.SpecialChar;\nimport com.cronutils.model.time.generator.EveryDayOfWeekValueGenerator;\nimport com.cronutils.model.time.generator.FieldValueGenerator;\nimport java.time.DateTimeException;\nimport java.util.EnumSet;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.LinkedHashSet;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class EveryDayOfWeekValueGenerator_isMatch extends EveryDayOfWeekValueGenerator_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    CronFieldName cronFieldName0 = CronFieldName.DAY_OF_WEEK;\n    FieldExpressionVisitorAdaptor fieldExpressionVisitorAdaptor0 = new FieldExpressionVisitorAdaptor();\n    FieldExpression.questionMark();\n    Every every0 = new Every((IntegerFieldValue) null);\n    FieldExpression fieldExpression0 = fieldExpressionVisitorAdaptor0.visit(every0);\n    HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();\n    HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();\n    SpecialChar specialChar0 = SpecialChar.QUESTION_MARK;\n    EnumSet<SpecialChar> enumSet0 = EnumSet.of(specialChar0, specialChar0, specialChar0);\n    FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, enumSet0, 6, 6, false);\n    CronField cronField0 = new CronField(cronFieldName0, fieldExpression0, fieldConstraints0);\n    WeekDay weekDay0 = new WeekDay(0, false);\n    EveryDayOfWeekValueGenerator everyDayOfWeekValueGenerator0 = new EveryDayOfWeekValueGenerator(cronField0, 6, 6, weekDay0);\n    everyDayOfWeekValueGenerator0.isMatch(0);\n    everyDayOfWeekValueGenerator0.generateCandidates(0, 6);\n    everyDayOfWeekValueGenerator0.generateCandidatesNotIncludingIntervalExtremes(125, 565);\n    int int0 = FieldValueGenerator.NO_VALUE;\n    everyDayOfWeekValueGenerator0.generatePreviousValue(6);\n    // Undeclared exception!\n    everyDayOfWeekValueGenerator0.generateNextValue(Integer.MIN_VALUE);\n}\n}"
    },
    {
        "original_path": "jmrozanec_cron-utils###jmrozanec_cron-utils/src/test/java/com/cronutils/model/time/generator/OnDayOfMonthValueGeneratorTest###testGenerateNextValue",
        "generated_path": "OnDayOfMonthValueGenerator_generateNextValue.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.cronutils.model.time.generator;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.cronutils.model.field.CronField;\nimport com.cronutils.model.field.CronFieldName;\nimport com.cronutils.model.field.constraint.FieldConstraints;\nimport com.cronutils.model.field.expression.And;\nimport com.cronutils.model.field.expression.On;\nimport com.cronutils.model.field.value.IntegerFieldValue;\nimport com.cronutils.model.field.value.SpecialChar;\nimport com.cronutils.model.field.value.SpecialCharFieldValue;\nimport com.cronutils.model.time.generator.OnDayOfMonthValueGenerator;\nimport java.time.DateTimeException;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.LinkedHashSet;\nimport java.util.TreeSet;\nimport java.util.Vector;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class OnDayOfMonthValueGenerator_generateNextValue extends OnDayOfMonthValueGenerator_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    CronFieldName cronFieldName0 = CronFieldName.DAY_OF_MONTH;\n    IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(93);\n    SpecialChar specialChar0 = SpecialChar.L;\n    SpecialCharFieldValue specialCharFieldValue0 = new SpecialCharFieldValue(specialChar0);\n    On on0 = new On(integerFieldValue0, specialCharFieldValue0, integerFieldValue0);\n    HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();\n    HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();\n    TreeSet<SpecialChar> treeSet0 = new TreeSet<SpecialChar>();\n    FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, treeSet0, 93, 5, false);\n    CronField cronField0 = new CronField(cronFieldName0, on0, fieldConstraints0);\n    OnDayOfMonthValueGenerator onDayOfMonthValueGenerator0 = new OnDayOfMonthValueGenerator(cronField0, 5, 5);\n    int int0 = onDayOfMonthValueGenerator0.generateNextValue((-3000));\n    assertEquals((-62), int0);\n}\n}"
    },
    {
        "original_path": "jmrozanec_cron-utils###jmrozanec_cron-utils/src/test/java/com/cronutils/model/time/generator/EveryFieldValueGeneratorTest###testGenerateNextValue",
        "generated_path": "EveryFieldValueGenerator_generateNextValue.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.cronutils.model.time.generator;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.cronutils.model.field.CronField;\nimport com.cronutils.model.field.CronFieldName;\nimport com.cronutils.model.field.constraint.FieldConstraints;\nimport com.cronutils.model.field.expression.And;\nimport com.cronutils.model.field.expression.Every;\nimport com.cronutils.model.field.expression.FieldExpression;\nimport com.cronutils.model.field.expression.On;\nimport com.cronutils.model.field.expression.visitor.FieldExpressionVisitorAdaptor;\nimport com.cronutils.model.field.expression.visitor.ValidationFieldExpressionVisitor;\nimport com.cronutils.model.field.value.IntegerFieldValue;\nimport com.cronutils.model.field.value.SpecialChar;\nimport com.cronutils.model.field.value.SpecialCharFieldValue;\nimport com.cronutils.model.time.generator.EveryFieldValueGenerator;\nimport java.util.EnumSet;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.LinkedHashSet;\nimport java.util.TreeSet;\nimport java.util.function.BiFunction;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class EveryFieldValueGenerator_generateNextValue extends EveryFieldValueGenerator_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    CronFieldName cronFieldName0 = CronFieldName.MONTH;\n    IntegerFieldValue integerFieldValue0 = new IntegerFieldValue((-4));\n    Every every0 = new Every(integerFieldValue0);\n    HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();\n    integerFieldValue0.getValue();\n    HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();\n    Integer integer0 = new Integer((-4));\n    TreeSet<SpecialChar> treeSet0 = new TreeSet<SpecialChar>();\n    FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, treeSet0, (-4), (-4), false);\n    CronField cronField0 = new CronField(cronFieldName0, every0, fieldConstraints0);\n    Integer integer1 = new Integer((-464));\n    hashMap1.put(integer1, integer1);\n    EveryFieldValueGenerator everyFieldValueGenerator0 = new EveryFieldValueGenerator(cronField0);\n    every0.asString();\n    int int0 = everyFieldValueGenerator0.to;\n    cronField0.toString();\n    everyFieldValueGenerator0.matchesFieldExpressionClass(every0);\n    SpecialChar specialChar0 = SpecialChar.NONE;\n    treeSet0.add(specialChar0);\n    everyFieldValueGenerator0.generateNextValue((-2169));\n    everyFieldValueGenerator0.generateCandidatesNotIncludingIntervalExtremes(405, (-4));\n    everyFieldValueGenerator0.offset();\n    everyFieldValueGenerator0.generatePreviousValue(1207);\n    everyFieldValueGenerator0.generatePreviousValue((-4));\n    everyFieldValueGenerator0.generateCandidatesNotIncludingIntervalExtremes(0, 0);\n}\n}"
    },
    {
        "original_path": "jmrozanec_cron-utils###jmrozanec_cron-utils/src/test/java/com/cronutils/model/time/generator/OnFieldValueGeneratorTest###testGenerateNextValue",
        "generated_path": "OnFieldValueGenerator_generateNextValue.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.cronutils.model.time.generator;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.cronutils.model.field.CronField;\nimport com.cronutils.model.field.CronFieldName;\nimport com.cronutils.model.field.constraint.FieldConstraints;\nimport com.cronutils.model.field.expression.And;\nimport com.cronutils.model.field.expression.Every;\nimport com.cronutils.model.field.expression.On;\nimport com.cronutils.model.field.value.IntegerFieldValue;\nimport com.cronutils.model.field.value.SpecialChar;\nimport com.cronutils.model.field.value.SpecialCharFieldValue;\nimport com.cronutils.model.time.generator.OnFieldValueGenerator;\nimport java.util.EnumSet;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.LinkedHashSet;\nimport java.util.List;\nimport java.util.TreeSet;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class OnFieldValueGenerator_generateNextValue extends OnFieldValueGenerator_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    CronFieldName cronFieldName0 = CronFieldName.SECOND;\n    IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(0);\n    SpecialChar specialChar0 = SpecialChar.NONE;\n    SpecialCharFieldValue specialCharFieldValue0 = new SpecialCharFieldValue(specialChar0);\n    On on0 = new On(integerFieldValue0, specialCharFieldValue0, integerFieldValue0);\n    HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();\n    HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();\n    LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();\n    FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, (-2131), (-2131), true);\n    CronField cronField0 = new CronField(cronFieldName0, on0, fieldConstraints0);\n    OnFieldValueGenerator onFieldValueGenerator0 = new OnFieldValueGenerator(cronField0);\n    int int0 = onFieldValueGenerator0.generateNextValue((-1));\n    assertEquals(0, int0);\n}\n}"
    },
    {
        "original_path": "jmrozanec_cron-utils###jmrozanec_cron-utils/src/test/java/com/cronutils/model/time/generator/AndFieldValueGeneratorTest###testIsMatch",
        "generated_path": "AndFieldValueGenerator_isMatch.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.cronutils.model.time.generator;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.cronutils.model.field.CronField;\nimport com.cronutils.model.field.CronFieldName;\nimport com.cronutils.model.field.constraint.FieldConstraints;\nimport com.cronutils.model.field.expression.And;\nimport com.cronutils.model.field.expression.Between;\nimport com.cronutils.model.field.expression.Every;\nimport com.cronutils.model.field.expression.FieldExpression;\nimport com.cronutils.model.field.expression.On;\nimport com.cronutils.model.field.value.IntegerFieldValue;\nimport com.cronutils.model.field.value.SpecialChar;\nimport com.cronutils.model.field.value.SpecialCharFieldValue;\nimport com.cronutils.model.time.generator.AndFieldValueGenerator;\nimport java.util.EnumSet;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.LinkedHashSet;\nimport java.util.List;\nimport java.util.TreeSet;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class AndFieldValueGenerator_isMatch extends AndFieldValueGenerator_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test22() throws Throwable {\n    CronFieldName cronFieldName0 = CronFieldName.HOUR;\n    And and0 = new And();\n    HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();\n    HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();\n    IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(2004);\n    Every every0 = new Every(integerFieldValue0);\n    and0.and(every0);\n    HashSet<SpecialChar> hashSet0 = new HashSet<SpecialChar>();\n    FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, hashSet0, (-1694), (-1694), false);\n    CronField cronField0 = new CronField(cronFieldName0, and0, fieldConstraints0);\n    AndFieldValueGenerator andFieldValueGenerator0 = new AndFieldValueGenerator(cronField0);\n    boolean boolean0 = andFieldValueGenerator0.isMatch((-1824));\n    assertFalse(boolean0);\n}\n}"
    },
    {
        "original_path": "jmrozanec_cron-utils###jmrozanec_cron-utils/src/test/java/com/cronutils/model/time/generator/OnFieldValueGeneratorTest###testGeneratePreviousValue",
        "generated_path": "OnFieldValueGenerator_generatePreviousValue.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.cronutils.model.time.generator;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.cronutils.model.field.CronField;\nimport com.cronutils.model.field.CronFieldName;\nimport com.cronutils.model.field.constraint.FieldConstraints;\nimport com.cronutils.model.field.expression.And;\nimport com.cronutils.model.field.expression.Every;\nimport com.cronutils.model.field.expression.On;\nimport com.cronutils.model.field.value.IntegerFieldValue;\nimport com.cronutils.model.field.value.SpecialChar;\nimport com.cronutils.model.field.value.SpecialCharFieldValue;\nimport com.cronutils.model.time.generator.OnFieldValueGenerator;\nimport java.util.EnumSet;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.LinkedHashSet;\nimport java.util.List;\nimport java.util.TreeSet;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class OnFieldValueGenerator_generatePreviousValue extends OnFieldValueGenerator_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    CronFieldName cronFieldName0 = CronFieldName.DAY_OF_MONTH;\n    IntegerFieldValue integerFieldValue0 = new IntegerFieldValue(0);\n    SpecialChar specialChar0 = SpecialChar.LW;\n    SpecialCharFieldValue specialCharFieldValue0 = new SpecialCharFieldValue(specialChar0);\n    On on0 = new On(integerFieldValue0, specialCharFieldValue0, integerFieldValue0);\n    HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>(1);\n    HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();\n    LinkedHashSet<SpecialChar> linkedHashSet0 = new LinkedHashSet<SpecialChar>();\n    FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, linkedHashSet0, 0, 1, true);\n    CronField cronField0 = new CronField(cronFieldName0, on0, fieldConstraints0);\n    OnFieldValueGenerator onFieldValueGenerator0 = new OnFieldValueGenerator(cronField0);\n    int int0 = onFieldValueGenerator0.generatePreviousValue(1);\n    assertEquals(0, int0);\n}\n}"
    },
    {
        "original_path": "jmrozanec_cron-utils###jmrozanec_cron-utils/src/test/java/com/cronutils/model/time/generator/EveryFieldValueGeneratorTest###testGenerateCandidatesNotIncludingIntervalExtremes",
        "generated_path": "EveryFieldValueGenerator_generateCandidatesNotIncludingIntervalExtremes.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.cronutils.model.time.generator;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.cronutils.model.field.CronField;\nimport com.cronutils.model.field.CronFieldName;\nimport com.cronutils.model.field.constraint.FieldConstraints;\nimport com.cronutils.model.field.expression.And;\nimport com.cronutils.model.field.expression.Every;\nimport com.cronutils.model.field.expression.FieldExpression;\nimport com.cronutils.model.field.expression.On;\nimport com.cronutils.model.field.expression.visitor.FieldExpressionVisitorAdaptor;\nimport com.cronutils.model.field.expression.visitor.ValidationFieldExpressionVisitor;\nimport com.cronutils.model.field.value.IntegerFieldValue;\nimport com.cronutils.model.field.value.SpecialChar;\nimport com.cronutils.model.field.value.SpecialCharFieldValue;\nimport com.cronutils.model.time.generator.EveryFieldValueGenerator;\nimport java.util.EnumSet;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.LinkedHashSet;\nimport java.util.TreeSet;\nimport java.util.function.BiFunction;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class EveryFieldValueGenerator_generateCandidatesNotIncludingIntervalExtremes extends EveryFieldValueGenerator_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    IntegerFieldValue integerFieldValue0 = new IntegerFieldValue((-1714));\n    Every every0 = new Every(integerFieldValue0);\n    HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();\n    HashSet<SpecialChar> hashSet0 = new HashSet<SpecialChar>();\n    integerFieldValue0.toString();\n    Integer integer0 = new Integer(590);\n    hashMap0.put(\"-1714\", (Integer) null);\n    Integer integer1 = Integer.decode(\"-1714\");\n    hashMap0.put(\"\", integer1);\n    FieldExpression fieldExpression0 = FieldExpression.always();\n    every0.and(fieldExpression0);\n    CronFieldName cronFieldName0 = CronFieldName.YEAR;\n    HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();\n    FieldConstraints fieldConstraints0 = new FieldConstraints(hashMap0, hashMap1, hashSet0, (-1), 2293, false);\n    CronField cronField0 = new CronField(cronFieldName0, every0, fieldConstraints0);\n    EveryFieldValueGenerator everyFieldValueGenerator0 = new EveryFieldValueGenerator(cronField0);\n    everyFieldValueGenerator0.generateCandidatesNotIncludingIntervalExtremes(675, (-536));\n}\n}"
    },
    {
        "original_path": "jfaster_mango###jfaster_mango/src/test/java/org/jfaster/mango/binding/BindingParameterTest###testEquals",
        "generated_path": "BindingParameter_equals.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.jfaster.mango.binding;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.jfaster.mango.binding.BindingParameter;\nimport org.jfaster.mango.util.jdbc.JdbcType;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class BindingParameter_equals extends BindingParameter_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    JdbcType jdbcType0 = JdbcType.JAVA_OBJECT;\n    BindingParameter bindingParameter0 = BindingParameter.create(\".\", \".\", jdbcType0);\n    JdbcType jdbcType1 = JdbcType.REF;\n    BindingParameter bindingParameter1 = new BindingParameter(\".\", \".\", jdbcType1);\n    boolean boolean0 = bindingParameter0.equals(bindingParameter1);\n    assertFalse(boolean0);\n}\n}"
    },
    {
        "original_path": "jfaster_mango###jfaster_mango/src/test/java/org/jfaster/mango/util/reflect/ReflectionTest###testGetAnnotations",
        "generated_path": "Reflection_getAnnotations.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.jfaster.mango.util.reflect;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.google.common.collect.BoundType;\nimport java.beans.EventHandler;\nimport java.lang.annotation.Annotation;\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.InvocationHandler;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.jfaster.mango.support.MockRename;\nimport org.jfaster.mango.support.MockSQL;\nimport org.jfaster.mango.util.reflect.Reflection;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class Reflection_getAnnotations extends Reflection_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    Class<Integer> class0 = Integer.class;\n    List<Annotation> list0 = Reflection.getAnnotations(class0);\n    Class<Object> class1 = Object.class;\n    Reflection.getAnnotations(class1, list0);\n    assertEquals(0, list0.size());\n}\n}"
    },
    {
        "original_path": "jfaster_mango###jfaster_mango/src/test/java/org/jfaster/mango/parser/ParserTest###testParse",
        "generated_path": "Parser_parse.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.jfaster.mango.parser;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.io.InputStream;\nimport java.io.Reader;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.jfaster.mango.parser.Parser;\nimport org.jfaster.mango.parser.ParserTokenManager;\nimport org.jfaster.mango.parser.Token;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class Parser_parse extends Parser_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void Parser_parse() throws Throwable {\n    InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());\n    doReturn((-1285)).when(inputStream0).read(any(byte[].class), anyInt(), anyInt());\n    Parser parser0 = new Parser(inputStream0);\n    try {\n        parser0.parse();\n        fail(\"Expecting exception: Exception\");\n    } catch (Exception e) {\n        //\n        // Encountered \\\"<EOF>\\\" at line 0, column 0.\\r\n        // Was expecting one of:\\r\n        //     \\\"insert\\\" ...\\r\n        //     \\\"delete\\\" ...\\r\n        //     \\\"update\\\" ...\\r\n        //     \\\"select\\\" ...\\r\n        //     \\\"replace\\\" ...\\r\n        //     \\\"merge\\\" ...\\r\n        //     \\\"truncate\\\" ...\\r\n        //\n        //\n        verifyException(\"org.jfaster.mango.parser.Parser\", e);\n    }\n}\n}"
    },
    {
        "original_path": "jfaster_mango###jfaster_mango/src/test/java/org/jfaster/mango/util/reflect/TypeTokenTest###testGetRawType",
        "generated_path": "TypeToken_getRawType.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.jfaster.mango.util.reflect;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.alibaba.fastjson.util.ParameterizedTypeImpl;\nimport java.lang.reflect.Type;\nimport java.util.List;\nimport java.util.NoSuchElementException;\nimport java.util.Set;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.jfaster.mango.util.reflect.TypeParameter;\nimport org.jfaster.mango.util.reflect.TypeToken;\nimport org.jfaster.mango.util.reflect.Types;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class TypeToken_getRawType extends TypeToken_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test31() throws Throwable {\n    Class<String> class0 = String.class;\n    TypeToken<String> typeToken0 = TypeToken.of(class0);\n    typeToken0.getRawType();\n}\n}"
    },
    {
        "original_path": "jfaster_mango###jfaster_mango/src/test/java/org/jfaster/mango/binding/DefaultInvocationContextTest###testTrim",
        "generated_path": "DefaultInvocationContext_trim.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.jfaster.mango.binding;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.util.List;\nimport java.util.concurrent.Delayed;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.hsqldb.types.CharacterType;\nimport org.hsqldb.types.Type;\nimport org.jfaster.mango.binding.BindingParameter;\nimport org.jfaster.mango.binding.BindingParameterInvoker;\nimport org.jfaster.mango.binding.BoundSql;\nimport org.jfaster.mango.binding.DefaultInvocationContext;\nimport org.jfaster.mango.binding.TransferableBindingParameterInvoker;\nimport org.jfaster.mango.type.TypeHandler;\nimport org.jfaster.mango.util.jdbc.JdbcType;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class DefaultInvocationContext_trim extends DefaultInvocationContext_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    DefaultInvocationContext defaultInvocationContext0 = DefaultInvocationContext.create();\n    defaultInvocationContext0.trim(\"\");\n    assertNull(defaultInvocationContext0.getGlobalTable());\n}\n}"
    },
    {
        "original_path": "jfaster_mango###jfaster_mango/src/test/java/org/jfaster/mango/util/reflect/TypeTokenTest###testResolveType",
        "generated_path": "TypeToken_resolveType.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.jfaster.mango.util.reflect;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.alibaba.fastjson.util.ParameterizedTypeImpl;\nimport java.lang.reflect.Type;\nimport java.util.List;\nimport java.util.NoSuchElementException;\nimport java.util.Set;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.jfaster.mango.util.reflect.TypeParameter;\nimport org.jfaster.mango.util.reflect.TypeToken;\nimport org.jfaster.mango.util.reflect.Types;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class TypeToken_resolveType extends TypeToken_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    Class<ParameterizedTypeImpl> class0 = ParameterizedTypeImpl.class;\n    TypeToken<String> typeToken0 = TypeToken.of((Class<String>) null);\n    // Undeclared exception!\n    try {\n        typeToken0.resolveType(class0);\n        fail(\"Expecting exception: AssertionError\");\n    } catch (AssertionError e) {\n        //\n        // must have been one of the known types\n        //\n    }\n}\n}"
    },
    {
        "original_path": "jfaster_mango###jfaster_mango/src/test/java/org/jfaster/mango/util/reflect/TypeTokenTest###testGetTypes",
        "generated_path": "TypeToken_getTypes.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.jfaster.mango.util.reflect;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.alibaba.fastjson.util.ParameterizedTypeImpl;\nimport java.lang.reflect.Type;\nimport java.util.List;\nimport java.util.NoSuchElementException;\nimport java.util.Set;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.jfaster.mango.util.reflect.TypeParameter;\nimport org.jfaster.mango.util.reflect.TypeToken;\nimport org.jfaster.mango.util.reflect.Types;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class TypeToken_getTypes extends TypeToken_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test44() throws Throwable {\n    Class<String> class0 = String.class;\n    TypeToken<String> typeToken0 = TypeToken.of(class0);\n    Set<TypeToken<?>> set0 = typeToken0.getTypes();\n    assertEquals(5, set0.size());\n}\n}"
    },
    {
        "original_path": "google_jimfs###google_jimfs/jimfs/src/test/java/com/google/common/jimfs/JimfsFileChannelTest###testTransferFrom",
        "generated_path": "JimfsFileChannel_transferFrom.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.google.common.jimfs;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.google.common.collect.ImmutableSet;\nimport com.google.common.collect.ImmutableSortedSet;\nimport com.google.common.jimfs.Configuration;\nimport com.google.common.jimfs.Directory;\nimport com.google.common.jimfs.FakeFileTimeSource;\nimport com.google.common.jimfs.Feature;\nimport com.google.common.jimfs.FileFactory;\nimport com.google.common.jimfs.FileSystemState;\nimport com.google.common.jimfs.FileTree;\nimport com.google.common.jimfs.HeapDisk;\nimport com.google.common.jimfs.JimfsFileChannel;\nimport com.google.common.jimfs.Name;\nimport com.google.common.jimfs.RegularFile;\nimport com.google.common.jimfs.SystemFileTimeSource;\nimport com.google.common.jimfs.UnixPathType;\nimport java.io.FileDescriptor;\nimport java.net.ProtocolFamily;\nimport java.nio.ByteBuffer;\nimport java.nio.MappedByteBuffer;\nimport java.nio.channels.AsynchronousFileChannel;\nimport java.nio.channels.DatagramChannel;\nimport java.nio.channels.FileChannel;\nimport java.nio.channels.NonReadableChannelException;\nimport java.nio.channels.NonWritableChannelException;\nimport java.nio.channels.WritableByteChannel;\nimport java.nio.charset.Charset;\nimport java.nio.file.ClosedFileSystemException;\nimport java.nio.file.LinkOption;\nimport java.nio.file.OpenOption;\nimport java.nio.file.StandardOpenOption;\nimport java.nio.file.attribute.FileTime;\nimport java.time.Instant;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Comparator;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.LinkedHashSet;\nimport java.util.LinkedList;\nimport java.util.ListIterator;\nimport java.util.PriorityQueue;\nimport java.util.Set;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.Future;\nimport java.util.concurrent.LinkedBlockingQueue;\nimport java.util.concurrent.PriorityBlockingQueue;\nimport java.util.concurrent.SynchronousQueue;\nimport java.util.concurrent.TimeUnit;\nimport java.util.function.Function;\nimport java.util.function.UnaryOperator;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.mock.java.io.MockFileOutputStream;\nimport org.evosuite.runtime.mock.java.lang.MockThread;\nimport org.evosuite.runtime.mock.java.net.MockInetSocketAddress;\nimport org.evosuite.runtime.mock.java.time.MockInstant;\nimport org.evosuite.runtime.testdata.EvoSuiteFile;\nimport org.evosuite.runtime.testdata.FileSystemHandling;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class JimfsFileChannel_transferFrom extends JimfsFileChannel_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void JimfsFileChannel_transferFrom() throws Throwable {\n    Configuration configuration0 = Configuration.osX();\n    HeapDisk heapDisk0 = new HeapDisk(configuration0);\n    SystemFileTimeSource systemFileTimeSource0 = SystemFileTimeSource.INSTANCE;\n    FileFactory fileFactory0 = new FileFactory(heapDisk0, systemFileTimeSource0);\n    RegularFile regularFile0 = fileFactory0.createRegularFile();\n    OpenOption[] openOptionArray0 = new OpenOption[8];\n    StandardOpenOption standardOpenOption0 = StandardOpenOption.CREATE;\n    openOptionArray0[0] = (OpenOption) standardOpenOption0;\n    StandardOpenOption standardOpenOption1 = StandardOpenOption.APPEND;\n    openOptionArray0[1] = (OpenOption) standardOpenOption1;\n    StandardOpenOption standardOpenOption2 = StandardOpenOption.DSYNC;\n    openOptionArray0[2] = (OpenOption) standardOpenOption2;\n    LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;\n    openOptionArray0[3] = (OpenOption) linkOption0;\n    StandardOpenOption standardOpenOption3 = StandardOpenOption.TRUNCATE_EXISTING;\n    openOptionArray0[4] = (OpenOption) standardOpenOption3;\n    StandardOpenOption standardOpenOption4 = StandardOpenOption.APPEND;\n    openOptionArray0[5] = (OpenOption) standardOpenOption4;\n    StandardOpenOption standardOpenOption5 = StandardOpenOption.TRUNCATE_EXISTING;\n    openOptionArray0[6] = (OpenOption) standardOpenOption5;\n    StandardOpenOption standardOpenOption6 = StandardOpenOption.DSYNC;\n    openOptionArray0[7] = (OpenOption) standardOpenOption6;\n    ImmutableSet<OpenOption> immutableSet0 = ImmutableSet.copyOf(openOptionArray0);\n    ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());\n    MockThread mockThread0 = new MockThread(threadGroup0, \"fE\");\n    FileSystemState fileSystemState0 = new FileSystemState(systemFileTimeSource0, mockThread0);\n    JimfsFileChannel jimfsFileChannel0 = new JimfsFileChannel(regularFile0, immutableSet0, fileSystemState0);\n    JimfsFileChannel jimfsFileChannel1 = new JimfsFileChannel(regularFile0, immutableSet0, fileSystemState0);\n    // Undeclared exception!\n    try {\n        jimfsFileChannel0.transferFrom(jimfsFileChannel1, (-836L), (-836L));\n        fail(\"Expecting exception: IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n        //\n        // java.lang.String@0000000023 must not be negative: java.lang.Long@0000000024\n        //\n        verifyException(\"com.google.common.base.Preconditions\", e);\n    }\n}\n}"
    },
    {
        "original_path": "google_jimfs###google_jimfs/jimfs/src/test/java/com/google/common/jimfs/DirectoryTest###testSnapshot",
        "generated_path": "Directory_snapshot.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.google.common.jimfs;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.google.common.collect.ImmutableSortedSet;\nimport com.google.common.jimfs.Configuration;\nimport com.google.common.jimfs.Directory;\nimport com.google.common.jimfs.DirectoryEntry;\nimport com.google.common.jimfs.FakeFileTimeSource;\nimport com.google.common.jimfs.FileFactory;\nimport com.google.common.jimfs.FileSystemState;\nimport com.google.common.jimfs.HeapDisk;\nimport com.google.common.jimfs.Name;\nimport com.google.common.jimfs.RegularFile;\nimport com.google.common.jimfs.SystemFileTimeSource;\nimport java.nio.file.attribute.FileTime;\nimport java.util.concurrent.TimeUnit;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.mock.java.lang.MockThread;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class Directory_snapshot extends Directory_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test26() throws Throwable {\n    Name name0 = Name.create(\"\", \": \");\n    Directory directory0 = Directory.createRoot((-3831), (FileTime) null, name0);\n    DirectoryEntry directoryEntry0 = new DirectoryEntry(directory0, name0, directory0);\n    assertTrue(directory0.isEmpty());\n    directory0.put(directoryEntry0);\n    ImmutableSortedSet<Name> immutableSortedSet0 = directory0.snapshot();\n    assertTrue(immutableSortedSet0.contains(name0));\n}\n}"
    },
    {
        "original_path": "google_jimfs###google_jimfs/jimfs/src/test/java/com/google/common/jimfs/DirectoryTest###testRemove",
        "generated_path": "Directory_remove.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.google.common.jimfs;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.google.common.collect.ImmutableSortedSet;\nimport com.google.common.jimfs.Configuration;\nimport com.google.common.jimfs.Directory;\nimport com.google.common.jimfs.DirectoryEntry;\nimport com.google.common.jimfs.FakeFileTimeSource;\nimport com.google.common.jimfs.FileFactory;\nimport com.google.common.jimfs.FileSystemState;\nimport com.google.common.jimfs.HeapDisk;\nimport com.google.common.jimfs.Name;\nimport com.google.common.jimfs.RegularFile;\nimport com.google.common.jimfs.SystemFileTimeSource;\nimport java.nio.file.attribute.FileTime;\nimport java.util.concurrent.TimeUnit;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.mock.java.lang.MockThread;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class Directory_remove extends Directory_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;\n    FileTime fileTime0 = FileTime.from((long) (-537), timeUnit0);\n    Directory directory0 = Directory.create((-537), fileTime0);\n    Name name0 = Name.SELF;\n    DirectoryEntry directoryEntry0 = directory0.remove(name0);\n    assertNotNull(directoryEntry0);\n    int int0 = directory0.entryCount();\n    assertEquals(0, int0);\n    assertEquals((-537), directory0.id());\n}\n}"
    },
    {
        "original_path": "google_jimfs###google_jimfs/jimfs/src/test/java/com/google/common/jimfs/HeapDiskTest###testAllocate",
        "generated_path": "HeapDisk_allocate.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.google.common.jimfs;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.google.common.jimfs.Configuration;\nimport com.google.common.jimfs.FakeFileTimeSource;\nimport com.google.common.jimfs.FileFactory;\nimport com.google.common.jimfs.FileSystemState;\nimport com.google.common.jimfs.HeapDisk;\nimport com.google.common.jimfs.RegularFile;\nimport com.google.common.jimfs.SystemFileTimeSource;\nimport java.io.IOException;\nimport java.nio.file.attribute.FileTime;\nimport java.util.concurrent.TimeUnit;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.mock.java.lang.MockThread;\nimport org.evosuite.runtime.testdata.EvoSuiteFile;\nimport org.evosuite.runtime.testdata.FileSystemHandling;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class HeapDisk_allocate extends HeapDisk_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    FileSystemHandling.appendStringToFile((EvoSuiteFile) null, \"com.google.common.collect.RegularImmutableMap$EntrySet\");\n    int int0 = 252;\n    HeapDisk heapDisk0 = new HeapDisk(274, 274, 96);\n    RegularFile regularFile0 = heapDisk0.blockCache;\n    regularFile0.unlinked();\n    heapDisk0.allocate(regularFile0, 252);\n    heapDisk0.free(regularFile0, int0);\n}\n}"
    },
    {
        "original_path": "google_jimfs###google_jimfs/jimfs/src/test/java/com/google/common/jimfs/JimfsFileChannelTest###testSize",
        "generated_path": "JimfsFileChannel_size.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.google.common.jimfs;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.google.common.collect.ImmutableSet;\nimport com.google.common.collect.ImmutableSortedSet;\nimport com.google.common.jimfs.Configuration;\nimport com.google.common.jimfs.Directory;\nimport com.google.common.jimfs.FakeFileTimeSource;\nimport com.google.common.jimfs.Feature;\nimport com.google.common.jimfs.FileFactory;\nimport com.google.common.jimfs.FileSystemState;\nimport com.google.common.jimfs.FileTree;\nimport com.google.common.jimfs.HeapDisk;\nimport com.google.common.jimfs.JimfsFileChannel;\nimport com.google.common.jimfs.Name;\nimport com.google.common.jimfs.RegularFile;\nimport com.google.common.jimfs.SystemFileTimeSource;\nimport com.google.common.jimfs.UnixPathType;\nimport java.io.FileDescriptor;\nimport java.net.ProtocolFamily;\nimport java.nio.ByteBuffer;\nimport java.nio.MappedByteBuffer;\nimport java.nio.channels.AsynchronousFileChannel;\nimport java.nio.channels.DatagramChannel;\nimport java.nio.channels.FileChannel;\nimport java.nio.channels.NonReadableChannelException;\nimport java.nio.channels.NonWritableChannelException;\nimport java.nio.channels.WritableByteChannel;\nimport java.nio.charset.Charset;\nimport java.nio.file.ClosedFileSystemException;\nimport java.nio.file.LinkOption;\nimport java.nio.file.OpenOption;\nimport java.nio.file.StandardOpenOption;\nimport java.nio.file.attribute.FileTime;\nimport java.time.Instant;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Comparator;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.LinkedHashSet;\nimport java.util.LinkedList;\nimport java.util.ListIterator;\nimport java.util.PriorityQueue;\nimport java.util.Set;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.Future;\nimport java.util.concurrent.LinkedBlockingQueue;\nimport java.util.concurrent.PriorityBlockingQueue;\nimport java.util.concurrent.SynchronousQueue;\nimport java.util.concurrent.TimeUnit;\nimport java.util.function.Function;\nimport java.util.function.UnaryOperator;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.mock.java.io.MockFileOutputStream;\nimport org.evosuite.runtime.mock.java.lang.MockThread;\nimport org.evosuite.runtime.mock.java.net.MockInetSocketAddress;\nimport org.evosuite.runtime.mock.java.time.MockInstant;\nimport org.evosuite.runtime.testdata.EvoSuiteFile;\nimport org.evosuite.runtime.testdata.FileSystemHandling;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class JimfsFileChannel_size extends JimfsFileChannel_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void JimfsFileChannel_size() throws Throwable {\n    int int0 = 21;\n    HeapDisk heapDisk0 = new HeapDisk(1091, 1091, 21);\n    RegularFile regularFile0 = heapDisk0.blockCache;\n    HashSet<OpenOption> hashSet0 = new HashSet<OpenOption>();\n    FakeFileTimeSource fakeFileTimeSource0 = new FakeFileTimeSource();\n    FakeFileTimeSource fakeFileTimeSource1 = fakeFileTimeSource0.randomize();\n    ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());\n    MockThread mockThread0 = new MockThread(threadGroup0, (Runnable) null);\n    MockThread mockThread1 = new MockThread(mockThread0);\n    fakeFileTimeSource1.randomize();\n    MockThread mockThread2 = new MockThread(threadGroup0, mockThread1, \"position\", 1091);\n    regularFile0.toString();\n    FileSystemState fileSystemState0 = new FileSystemState(fakeFileTimeSource1, mockThread2);\n    fileSystemState0.checkOpen();\n    FileTime fileTime0 = fileSystemState0.now();\n    regularFile0.toString();\n    JimfsFileChannel jimfsFileChannel0 = new JimfsFileChannel(regularFile0, hashSet0, fileSystemState0);\n    jimfsFileChannel0.size();\n    Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = MockThread.getDefaultUncaughtExceptionHandler();\n    fakeFileTimeSource1.setNow(fileTime0);\n    MockThread.setDefaultUncaughtExceptionHandler(thread_UncaughtExceptionHandler0);\n    jimfsFileChannel0.position();\n    // Undeclared exception!\n    try {\n        jimfsFileChannel0.tryLock(10000000000000000L, 1343L, false);\n        fail(\"Expecting exception: NonWritableChannelException\");\n    } catch (NonWritableChannelException e) {\n        //\n        // no message in exception (getMessage() returned null)\n        //\n        verifyException(\"com.google.common.jimfs.JimfsFileChannel\", e);\n    }\n}\n}"
    },
    {
        "original_path": "google_jimfs###google_jimfs/jimfs/src/test/java/com/google/common/jimfs/DirectoryTest###testGet",
        "generated_path": "Directory_get.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.google.common.jimfs;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.google.common.collect.ImmutableSortedSet;\nimport com.google.common.jimfs.Configuration;\nimport com.google.common.jimfs.Directory;\nimport com.google.common.jimfs.DirectoryEntry;\nimport com.google.common.jimfs.FakeFileTimeSource;\nimport com.google.common.jimfs.FileFactory;\nimport com.google.common.jimfs.FileSystemState;\nimport com.google.common.jimfs.HeapDisk;\nimport com.google.common.jimfs.Name;\nimport com.google.common.jimfs.RegularFile;\nimport com.google.common.jimfs.SystemFileTimeSource;\nimport java.nio.file.attribute.FileTime;\nimport java.util.concurrent.TimeUnit;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.mock.java.lang.MockThread;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class Directory_get extends Directory_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test27() throws Throwable {\n    FakeFileTimeSource fakeFileTimeSource0 = new FakeFileTimeSource();\n    ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());\n    MockThread mockThread0 = new MockThread(threadGroup0, \"T!gfXZ0%i.+\");\n    FileSystemState fileSystemState0 = new FileSystemState(fakeFileTimeSource0, mockThread0);\n    FileTime fileTime0 = fileSystemState0.now();\n    Name name0 = Name.simple(\"T!gfXZ0%i.+\");\n    Directory directory0 = Directory.createRoot(4, fileTime0, name0);\n    DirectoryEntry directoryEntry0 = directory0.get(name0);\n    assertTrue(directory0.isEmpty());\n    assertEquals(4, directory0.id());\n    assertNull(directoryEntry0);\n}\n}"
    },
    {
        "original_path": "google_jimfs###google_jimfs/jimfs/src/test/java/com/google/common/jimfs/DirectoryTest###testLink",
        "generated_path": "Directory_link.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.google.common.jimfs;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.google.common.collect.ImmutableSortedSet;\nimport com.google.common.jimfs.Configuration;\nimport com.google.common.jimfs.Directory;\nimport com.google.common.jimfs.DirectoryEntry;\nimport com.google.common.jimfs.FakeFileTimeSource;\nimport com.google.common.jimfs.FileFactory;\nimport com.google.common.jimfs.FileSystemState;\nimport com.google.common.jimfs.HeapDisk;\nimport com.google.common.jimfs.Name;\nimport com.google.common.jimfs.RegularFile;\nimport com.google.common.jimfs.SystemFileTimeSource;\nimport java.nio.file.attribute.FileTime;\nimport java.util.concurrent.TimeUnit;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.mock.java.lang.MockThread;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class Directory_link extends Directory_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    HeapDisk heapDisk0 = new HeapDisk(46, 46, 46);\n    FakeFileTimeSource fakeFileTimeSource0 = new FakeFileTimeSource();\n    FileFactory fileFactory0 = new FileFactory(heapDisk0, fakeFileTimeSource0);\n    Directory directory0 = fileFactory0.createDirectory();\n    Name name0 = Name.create(\"~W-y5U\", \" ?tr4JST\\tnf\u007fy~j82e\");\n    RegularFile regularFile0 = heapDisk0.blockCache;\n    directory0.link(name0, regularFile0);\n    assertTrue(directory0.isEmpty());\n}\n}"
    },
    {
        "original_path": "OpenHFT_Chronicle-Map###OpenHFT_Chronicle-Map/src/test/java/net/openhft/chronicle/map/BuildVersionTest###testVersion",
        "generated_path": "BuildVersion_version.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package net.openhft.chronicle.hash.impl.util;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport net.openhft.chronicle.hash.impl.util.BuildVersion;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class BuildVersion_version extends BuildVersion_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test0() throws Throwable {\n    BuildVersion.version();\n    String string0 = BuildVersion.version();\n    assertNotNull(string0);\n    assertEquals(\"3.24ea3-SNAPSHOT\", string0);\n}\n}"
    },
    {
        "original_path": "OpenHFT_Chronicle-Map###OpenHFT_Chronicle-Map/src/test/java/net/openhft/chronicle/hash/serialization/impl/ByteBufferDataAccessTest###getUsingTest",
        "generated_path": "ByteBufferDataAccess_getUsing.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package net.openhft.chronicle.hash.serialization.impl;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.nio.ByteBuffer;\nimport java.nio.CharBuffer;\nimport java.nio.charset.Charset;\nimport net.openhft.chronicle.bytes.HexDumpBytes;\nimport net.openhft.chronicle.bytes.RandomDataInput;\nimport net.openhft.chronicle.bytes.util.BinaryLengthLength;\nimport net.openhft.chronicle.hash.serialization.DataAccess;\nimport net.openhft.chronicle.hash.serialization.impl.ByteBufferDataAccess;\nimport net.openhft.chronicle.wire.AbstractWire;\nimport net.openhft.chronicle.wire.HashWire;\nimport net.openhft.chronicle.wire.TextWire;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class ByteBufferDataAccess_getUsing extends ByteBufferDataAccess_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void ByteBufferDataAccess_getUsing() throws Throwable {\n    ByteBufferDataAccess byteBufferDataAccess0 = new ByteBufferDataAccess();\n    HexDumpBytes hexDumpBytes0 = new HexDumpBytes();\n    ByteBuffer byteBuffer0 = hexDumpBytes0.toTemporaryDirectByteBuffer();\n    // Undeclared exception!\n    try {\n        byteBufferDataAccess0.getUsing(byteBuffer0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        //\n        // no message in exception (getMessage() returned null)\n        //\n        verifyException(\"net.openhft.chronicle.hash.serialization.impl.ByteBufferDataAccess\", e);\n    }\n}\n}"
    },
    {
        "original_path": "devnied_EMV-NFC-Paycard-Enrollment###devnied_EMV-NFC-Paycard-Enrollment/library/src/test/java/com/github/devnied/emvnfccard/utils/TlvUtilTest###testParseTagAndLength",
        "generated_path": "TlvUtil_parseTagAndLength.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.github.devnied.emvnfccard.utils;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.github.devnied.emvnfccard.enums.TagValueTypeEnum;\nimport com.github.devnied.emvnfccard.iso7816emv.ITag;\nimport com.github.devnied.emvnfccard.iso7816emv.TLV;\nimport com.github.devnied.emvnfccard.iso7816emv.TagAndLength;\nimport com.github.devnied.emvnfccard.iso7816emv.impl.TagImpl;\nimport com.github.devnied.emvnfccard.utils.TlvUtil;\nimport java.io.BufferedInputStream;\nimport java.io.ByteArrayInputStream;\nimport java.io.InputStream;\nimport java.io.PipedInputStream;\nimport java.io.SequenceInputStream;\nimport java.util.LinkedList;\nimport java.util.List;\nimport net.sf.scuba.tlv.TLVInputStream;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class TlvUtil_parseTagAndLength extends TlvUtil_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    byte[] byteArray0 = new byte[2];\n    byteArray0[0] = (byte) (-107);\n    byteArray0[1] = (byte) 104;\n    List<TagAndLength> list0 = TlvUtil.parseTagAndLength(byteArray0);\n    int int0 = TlvUtil.getLength(list0);\n    assertEquals(104, int0);\n}\n}"
    },
    {
        "original_path": "devnied_EMV-NFC-Paycard-Enrollment###devnied_EMV-NFC-Paycard-Enrollment/library/src/test/java/com/github/devnied/emvnfccard/utils/TlvUtilTest###testGetLength",
        "generated_path": "TlvUtil_getLength.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.github.devnied.emvnfccard.utils;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.github.devnied.emvnfccard.enums.TagValueTypeEnum;\nimport com.github.devnied.emvnfccard.iso7816emv.ITag;\nimport com.github.devnied.emvnfccard.iso7816emv.TLV;\nimport com.github.devnied.emvnfccard.iso7816emv.TagAndLength;\nimport com.github.devnied.emvnfccard.iso7816emv.impl.TagImpl;\nimport com.github.devnied.emvnfccard.utils.TlvUtil;\nimport java.io.BufferedInputStream;\nimport java.io.ByteArrayInputStream;\nimport java.io.InputStream;\nimport java.io.PipedInputStream;\nimport java.io.SequenceInputStream;\nimport java.util.LinkedList;\nimport java.util.List;\nimport net.sf.scuba.tlv.TLVInputStream;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class TlvUtil_getLength extends TlvUtil_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    byte[] byteArray0 = new byte[2];\n    byteArray0[0] = (byte) (-107);\n    byteArray0[1] = (byte) 104;\n    List<TagAndLength> list0 = TlvUtil.parseTagAndLength(byteArray0);\n    int int0 = TlvUtil.getLength(list0);\n    assertEquals(104, int0);\n}\n}"
    },
    {
        "original_path": "devnied_EMV-NFC-Paycard-Enrollment###devnied_EMV-NFC-Paycard-Enrollment/library/src/test/java/com/github/devnied/emvnfccard/utils/TlvUtilTest###testGetFormattedTagAndLength",
        "generated_path": "TlvUtil_getFormattedTagAndLength.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.github.devnied.emvnfccard.utils;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.github.devnied.emvnfccard.enums.TagValueTypeEnum;\nimport com.github.devnied.emvnfccard.iso7816emv.ITag;\nimport com.github.devnied.emvnfccard.iso7816emv.TLV;\nimport com.github.devnied.emvnfccard.iso7816emv.TagAndLength;\nimport com.github.devnied.emvnfccard.iso7816emv.impl.TagImpl;\nimport com.github.devnied.emvnfccard.utils.TlvUtil;\nimport java.io.BufferedInputStream;\nimport java.io.ByteArrayInputStream;\nimport java.io.InputStream;\nimport java.io.PipedInputStream;\nimport java.io.SequenceInputStream;\nimport java.util.LinkedList;\nimport java.util.List;\nimport net.sf.scuba.tlv.TLVInputStream;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class TlvUtil_getFormattedTagAndLength extends TlvUtil_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test21() throws Throwable {\n    // Undeclared exception!\n    try {\n        TlvUtil.getFormattedTagAndLength((byte[]) null, 351);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        //\n        // no message in exception (getMessage() returned null)\n        //\n    }\n}\n}"
    },
    {
        "original_path": "skyscreamer_JSONassert###skyscreamer_JSONassert/src/test/java/org/skyscreamer/jsonassert/comparator/JSONCompareUtilTest###testGetCardinalityMap",
        "generated_path": "JSONCompareUtil_getCardinalityMap.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.skyscreamer.jsonassert.comparator;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.util.Collection;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.json.JSONArray;\nimport org.json.JSONObject;\nimport org.junit.runner.RunWith;\nimport org.skyscreamer.jsonassert.comparator.JSONCompareUtil;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class JSONCompareUtil_getCardinalityMap extends JSONCompareUtil_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test22() throws Throwable {\n    JSONArray jSONArray0 = new JSONArray();\n    jSONArray0.put(1759, 2347.071308);\n    List<Object> list0 = JSONCompareUtil.jsonArrayToList(jSONArray0);\n    Map<Object, Integer> map0 = JSONCompareUtil.getCardinalityMap((Collection<Object>) list0);\n    assertTrue(list0.contains(2347.071308));\n    assertEquals(1760, list0.size());\n    assertEquals(2, map0.size());\n}\n}"
    },
    {
        "original_path": "rackerlabs_blueflood###rackerlabs_blueflood/blueflood-core/src/test/java/com/rackspacecloud/blueflood/eventemitter/EmitterTest###testOn",
        "generated_path": "Emitter_on.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.rackspacecloud.blueflood.eventemitter;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.rackspacecloud.blueflood.eventemitter.Emitter;\nimport java.util.List;\nimport java.util.concurrent.Future;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class Emitter_on extends Emitter_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    Emitter<Object> emitter0 = new Emitter<Object>();\n    Emitter.Listener<String> emitter_Listener0 = (Emitter.Listener<String>) mock(Emitter.Listener.class, new ViolatedAssumptionAnswer());\n    // Undeclared exception!\n    try {\n        emitter0.on((String) null, emitter_Listener0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        //\n        // no message in exception (getMessage() returned null)\n        //\n    }\n}\n}"
    },
    {
        "original_path": "rackerlabs_blueflood###rackerlabs_blueflood/blueflood-core/src/test/java/com/rackspacecloud/blueflood/types/BluefloodTimerRollupTest###testMax",
        "generated_path": "BluefloodTimerRollup_max.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.rackspacecloud.blueflood.types;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.rackspacecloud.blueflood.types.Average;\nimport com.rackspacecloud.blueflood.types.BasicRollup;\nimport com.rackspacecloud.blueflood.types.BluefloodTimerRollup;\nimport com.rackspacecloud.blueflood.types.MaxValue;\nimport com.rackspacecloud.blueflood.types.MinValue;\nimport com.rackspacecloud.blueflood.types.Points;\nimport com.rackspacecloud.blueflood.types.SimpleNumber;\nimport com.rackspacecloud.blueflood.types.Variance;\nimport java.io.IOException;\nimport java.util.Collection;\nimport java.util.LinkedList;\nimport java.util.Map;\nimport java.util.NoSuchElementException;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class BluefloodTimerRollup_max extends BluefloodTimerRollup_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test088() throws Throwable {\n    Long long0 = new Long((-1L));\n    LinkedList<Number> linkedList0 = new LinkedList<Number>();\n    linkedList0.add((Number) long0);\n    Number number0 = BluefloodTimerRollup.max(linkedList0);\n    assertEquals((-1L), number0);\n}\n}"
    },
    {
        "original_path": "rackerlabs_blueflood###rackerlabs_blueflood/blueflood-core/src/test/java/com/rackspacecloud/blueflood/io/serializers/metrics/SlotStateSerDesTest###testGranularityFromStateCol",
        "generated_path": "SlotStateSerDes_granularityFromStateCol.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.rackspacecloud.blueflood.io.serializers.metrics;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.rackspacecloud.blueflood.io.serializers.metrics.SlotStateSerDes;\nimport com.rackspacecloud.blueflood.rollup.Granularity;\nimport com.rackspacecloud.blueflood.service.SlotState;\nimport com.rackspacecloud.blueflood.service.UpdateStamp;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class SlotStateSerDes_granularityFromStateCol extends SlotStateSerDes_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void SlotStateSerDes_granularityFromStateCol() throws Throwable {\n    // Undeclared exception!\n    try {\n        SlotStateSerDes.granularityFromStateCol((String) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        //\n        // no message in exception (getMessage() returned null)\n        //\n        verifyException(\"com.rackspacecloud.blueflood.io.serializers.metrics.SlotStateSerDes\", e);\n    }\n}\n}"
    },
    {
        "original_path": "rackerlabs_blueflood###rackerlabs_blueflood/blueflood-core/src/test/java/com/rackspacecloud/blueflood/types/BluefloodTimerRollupTest###testSum",
        "generated_path": "BluefloodTimerRollup_sum.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.rackspacecloud.blueflood.types;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.rackspacecloud.blueflood.types.Average;\nimport com.rackspacecloud.blueflood.types.BasicRollup;\nimport com.rackspacecloud.blueflood.types.BluefloodTimerRollup;\nimport com.rackspacecloud.blueflood.types.MaxValue;\nimport com.rackspacecloud.blueflood.types.MinValue;\nimport com.rackspacecloud.blueflood.types.Points;\nimport com.rackspacecloud.blueflood.types.SimpleNumber;\nimport com.rackspacecloud.blueflood.types.Variance;\nimport java.io.IOException;\nimport java.util.Collection;\nimport java.util.LinkedList;\nimport java.util.Map;\nimport java.util.NoSuchElementException;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class BluefloodTimerRollup_sum extends BluefloodTimerRollup_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test130() throws Throwable {\n    Float float0 = new Float(1087.7594F);\n    LinkedList<Number> linkedList0 = new LinkedList<Number>();\n    linkedList0.add((Number) float0);\n    linkedList0.addFirst(float0);\n    Number number0 = BluefloodTimerRollup.sum(linkedList0);\n    assertEquals(2175.518798828125, number0);\n}\n}"
    },
    {
        "original_path": "rackerlabs_blueflood###rackerlabs_blueflood/blueflood-core/src/test/java/com/rackspacecloud/blueflood/io/serializers/metrics/SlotKeySerDesTest###testGranularityFromSlotKey",
        "generated_path": "SlotKeySerDes_granularityFromSlotKey.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.rackspacecloud.blueflood.io.serializers.metrics;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.rackspacecloud.blueflood.io.serializers.metrics.SlotKeySerDes;\nimport com.rackspacecloud.blueflood.rollup.Granularity;\nimport com.rackspacecloud.blueflood.rollup.SlotKey;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class SlotKeySerDes_granularityFromSlotKey extends SlotKeySerDes_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void SlotKeySerDes_granularityFromSlotKey() throws Throwable {\n    // Undeclared exception!\n    try {\n        SlotKeySerDes.granularityFromSlotKey((String) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        //\n        // no message in exception (getMessage() returned null)\n        //\n        verifyException(\"com.rackspacecloud.blueflood.io.serializers.metrics.SlotKeySerDes\", e);\n    }\n}\n}"
    },
    {
        "original_path": "rackerlabs_blueflood###rackerlabs_blueflood/blueflood-core/src/test/java/com/rackspacecloud/blueflood/eventemitter/EmitterTest###testOnce",
        "generated_path": "Emitter_once.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.rackspacecloud.blueflood.eventemitter;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.rackspacecloud.blueflood.eventemitter.Emitter;\nimport java.util.List;\nimport java.util.concurrent.Future;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class Emitter_once extends Emitter_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    Emitter<String> emitter0 = new Emitter<String>();\n    Emitter.Listener<String> emitter_Listener0 = (Emitter.Listener<String>) mock(Emitter.Listener.class, new ViolatedAssumptionAnswer());\n    emitter0.once(\"\", emitter_Listener0);\n    List<Emitter.Listener> list0 = (List<Emitter.Listener>) emitter0.listeners(\"\");\n    assertFalse(list0.isEmpty());\n}\n}"
    },
    {
        "original_path": "rackerlabs_blueflood###rackerlabs_blueflood/blueflood-http/src/test/java/com/rackspacecloud/blueflood/tracker/TrackerTest###testTrackResponse",
        "generated_path": "Tracker_trackResponse.java",
        "Compile_result": 1,
        "Test_result": 0,
        "Gen_Test": "package com.rackspacecloud.blueflood.tracker;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.rackspacecloud.blueflood.tracker.Tracker;\nimport com.rackspacecloud.blueflood.types.Locator;\nimport com.rackspacecloud.blueflood.types.Metric;\nimport com.rackspacecloud.blueflood.utils.TimeValue;\nimport io.netty.handler.codec.http.FullHttpResponse;\nimport io.netty.handler.codec.http.HttpRequest;\nimport java.util.Set;\nimport java.util.Stack;\nimport java.util.Vector;\nimport java.util.concurrent.TimeUnit;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class Tracker_trackResponse extends Tracker_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    Tracker tracker0 = Tracker.getInstance();\n    tracker0.trackResponse((HttpRequest) null, (FullHttpResponse) null);\n    assertFalse(tracker0.getIsTrackingDelayedMetrics());\n}\n}"
    },
    {
        "original_path": "rackerlabs_blueflood###rackerlabs_blueflood/blueflood-core/src/test/java/com/rackspacecloud/blueflood/io/SearchResultTest###testEquals",
        "generated_path": "SearchResult_equals.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.rackspacecloud.blueflood.io;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.rackspacecloud.blueflood.io.SearchResult;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class SearchResult_equals extends SearchResult_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    SearchResult searchResult0 = new SearchResult(\",;FPC\", \",;FPC\", \",;FPC\");\n    SearchResult searchResult1 = new SearchResult(\",;FPC\", \",;FPC\", \",;FPC\");\n    boolean boolean0 = searchResult0.equals(searchResult1);\n    assertTrue(boolean0);\n}\n}"
    },
    {
        "original_path": "Esri_geometry-api-java###Esri_geometry-api-java/src/test/java/com/esri/core/geometry/TestEnvelope###testMerge",
        "generated_path": "Envelope_merge.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.esri.core.geometry;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.esri.core.geometry.Clipper;\nimport com.esri.core.geometry.EditShape;\nimport com.esri.core.geometry.Envelope;\nimport com.esri.core.geometry.Envelope1D;\nimport com.esri.core.geometry.Envelope2D;\nimport com.esri.core.geometry.Envelope3D;\nimport com.esri.core.geometry.Geometry;\nimport com.esri.core.geometry.Line;\nimport com.esri.core.geometry.MultiPathImpl;\nimport com.esri.core.geometry.MultiPoint;\nimport com.esri.core.geometry.MultiPointImpl;\nimport com.esri.core.geometry.PlaneSweepCrackerHelper;\nimport com.esri.core.geometry.Point;\nimport com.esri.core.geometry.Point2D;\nimport com.esri.core.geometry.Point3D;\nimport com.esri.core.geometry.Polygon;\nimport com.esri.core.geometry.Polyline;\nimport com.esri.core.geometry.RasterizedGeometry2D;\nimport com.esri.core.geometry.RasterizedGeometry2DImpl;\nimport com.esri.core.geometry.RingOrientationFixer;\nimport com.esri.core.geometry.SegmentIntersector;\nimport com.esri.core.geometry.SweepComparator;\nimport com.esri.core.geometry.TopoGraph;\nimport com.esri.core.geometry.Transformation2D;\nimport com.esri.core.geometry.Transformation3D;\nimport com.esri.core.geometry.VertexDescription;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class Envelope_merge extends Envelope_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test001() throws Throwable {\n    Envelope2D envelope2D0 = Envelope2D.construct(0.0, 0.0, (-1904.507830164828), (-1904.507830164828));\n    Envelope envelope0 = new Envelope(envelope2D0);\n    TopoGraph topoGraph0 = new TopoGraph();\n    TopoGraph.ClusterSweepMonikerComparator topoGraph_ClusterSweepMonikerComparator0 = new TopoGraph.ClusterSweepMonikerComparator(topoGraph0);\n    Point2D point2D0 = topoGraph_ClusterSweepMonikerComparator0.m_point;\n    envelope2D0.merge(point2D0);\n    envelope0.hasZ();\n    envelope0.getCenterX();\n}\n}"
    },
    {
        "original_path": "Esri_geometry-api-java###Esri_geometry-api-java/src/test/java/com/esri/core/geometry/TestPoint###testReplaceNaNs",
        "generated_path": "Point_replaceNaNs.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.esri.core.geometry;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.esri.core.geometry.EditShape;\nimport com.esri.core.geometry.Envelope;\nimport com.esri.core.geometry.Envelope1D;\nimport com.esri.core.geometry.Envelope2D;\nimport com.esri.core.geometry.Envelope3D;\nimport com.esri.core.geometry.Geometry;\nimport com.esri.core.geometry.Line;\nimport com.esri.core.geometry.MultiPathImpl;\nimport com.esri.core.geometry.PlaneSweepCrackerHelper;\nimport com.esri.core.geometry.Point;\nimport com.esri.core.geometry.Point2D;\nimport com.esri.core.geometry.Point3D;\nimport com.esri.core.geometry.Polyline;\nimport com.esri.core.geometry.RasterizedGeometry2DImpl;\nimport com.esri.core.geometry.RingOrientationFixer;\nimport com.esri.core.geometry.SegmentIntersector;\nimport com.esri.core.geometry.Transformation2D;\nimport com.esri.core.geometry.Transformation3D;\nimport com.esri.core.geometry.VertexDescription;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class Point_replaceNaNs extends Point_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test004() throws Throwable {\n    Point point0 = new Point((-2248.4086389), 1641.2373947829142, (-1.0));\n    point0.replaceNaNs(2, 2);\n    Point point1 = (Point) point0.createInstance();\n    point0.copyTo(point1);\n    assertNotSame(point1, point0);\n    assertEquals(1641.2373947829142, point1.getY(), 0.01);\n}\n}"
    },
    {
        "original_path": "JCTools_JCTools###JCTools_JCTools/jctools-core/src/test/java/org/jctools/util/PaddedAtomicLongTest###testGetAndUpdate",
        "generated_path": "PaddedAtomicLong_getAndUpdate.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.jctools.util;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.util.function.LongBinaryOperator;\nimport java.util.function.LongUnaryOperator;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.jctools.util.PaddedAtomicLong;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class PaddedAtomicLong_getAndUpdate extends PaddedAtomicLong_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    PaddedAtomicLong paddedAtomicLong0 = new PaddedAtomicLong();\n    paddedAtomicLong0.getAndIncrement();\n    LongUnaryOperator longUnaryOperator0 = LongUnaryOperator.identity();\n    long long0 = paddedAtomicLong0.getAndUpdate(longUnaryOperator0);\n    assertEquals(1L, paddedAtomicLong0.get());\n    assertEquals(1L, long0);\n}\n}"
    },
    {
        "original_path": "JCTools_JCTools###JCTools_JCTools/jctools-core/src/test/java/org/jctools/util/PaddedAtomicLongTest###testAccumulateAndGet",
        "generated_path": "PaddedAtomicLong_accumulateAndGet.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.jctools.util;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.util.function.LongBinaryOperator;\nimport java.util.function.LongUnaryOperator;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.jctools.util.PaddedAtomicLong;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class PaddedAtomicLong_accumulateAndGet extends PaddedAtomicLong_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    PaddedAtomicLong paddedAtomicLong0 = new PaddedAtomicLong();\n    LongBinaryOperator longBinaryOperator0 = mock(LongBinaryOperator.class, new ViolatedAssumptionAnswer());\n    doReturn((long) (byte) 25).when(longBinaryOperator0).applyAsLong(anyLong(), anyLong());\n    paddedAtomicLong0.accumulateAndGet((byte) 25, longBinaryOperator0);\n    long long0 = paddedAtomicLong0.longValue();\n    assertEquals(25.0, paddedAtomicLong0.doubleValue(), 0.01);\n    assertEquals(25L, long0);\n}\n}"
    },
    {
        "original_path": "JCTools_JCTools###JCTools_JCTools/jctools-core/src/test/java/org/jctools/util/PaddedAtomicLongTest###testGetAndAccumulate",
        "generated_path": "PaddedAtomicLong_getAndAccumulate.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.jctools.util;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.util.function.LongBinaryOperator;\nimport java.util.function.LongUnaryOperator;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.jctools.util.PaddedAtomicLong;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class PaddedAtomicLong_getAndAccumulate extends PaddedAtomicLong_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test17() throws Throwable {\n    PaddedAtomicLong paddedAtomicLong0 = new PaddedAtomicLong();\n    paddedAtomicLong0.incrementAndGet();\n    LongBinaryOperator longBinaryOperator0 = mock(LongBinaryOperator.class, new ViolatedAssumptionAnswer());\n    doReturn(1L).when(longBinaryOperator0).applyAsLong(anyLong(), anyLong());\n    long long0 = paddedAtomicLong0.getAndAccumulate(1L, longBinaryOperator0);\n    assertEquals((short) 1, paddedAtomicLong0.shortValue());\n    assertEquals(1L, long0);\n}\n}"
    },
    {
        "original_path": "JCTools_JCTools###JCTools_JCTools/jctools-core/src/test/java/org/jctools/util/PaddedAtomicLongTest###testUpdateAndGet",
        "generated_path": "PaddedAtomicLong_updateAndGet.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.jctools.util;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.util.function.LongBinaryOperator;\nimport java.util.function.LongUnaryOperator;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.jctools.util.PaddedAtomicLong;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class PaddedAtomicLong_updateAndGet extends PaddedAtomicLong_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    PaddedAtomicLong paddedAtomicLong0 = new PaddedAtomicLong();\n    paddedAtomicLong0.incrementAndGet();\n    LongUnaryOperator longUnaryOperator0 = LongUnaryOperator.identity();\n    long long0 = paddedAtomicLong0.updateAndGet(longUnaryOperator0);\n    assertEquals(1L, paddedAtomicLong0.longValue());\n    assertEquals(1L, long0);\n}\n}"
    },
    {
        "original_path": "OWASP_java-html-sanitizer###OWASP_java-html-sanitizer/src/test/java/org/owasp/html/HtmlElementTablesTest###testImpliedElements",
        "generated_path": "HtmlElementTables_impliedElements.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.owasp.html;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.util.ArrayList;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport org.owasp.html.HtmlElementTables;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class HtmlElementTables_impliedElements extends HtmlElementTables_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    HtmlElementTables htmlElementTables0 = HtmlElementTables.get();\n    htmlElementTables0.impliedElements((byte) 112, 3);\n}\n}"
    },
    {
        "original_path": "OWASP_java-html-sanitizer###OWASP_java-html-sanitizer/src/test/java/org/owasp/html/HtmlPolicyBuilderTest###testAllowUrlProtocols",
        "generated_path": "HtmlPolicyBuilder_allowUrlProtocols.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.owasp.html;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.google.common.base.Predicate;\nimport com.google.common.collect.ImmutableBiMap;\nimport com.google.common.collect.ImmutableSet;\nimport com.google.common.collect.ImmutableSortedSet;\nimport java.io.PipedWriter;\nimport java.io.StringWriter;\nimport java.util.ArrayDeque;\nimport java.util.ArrayList;\nimport java.util.Comparator;\nimport java.util.HashSet;\nimport java.util.LinkedHashSet;\nimport java.util.Locale;\nimport java.util.Set;\nimport java.util.regex.Pattern;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.mock.java.io.MockPrintWriter;\nimport org.junit.runner.RunWith;\nimport org.owasp.html.AttributePolicy;\nimport org.owasp.html.CssSchema;\nimport org.owasp.html.ElementAndAttributePolicies;\nimport org.owasp.html.ElementAndAttributePolicyBasedSanitizerPolicy;\nimport org.owasp.html.ElementPolicy;\nimport org.owasp.html.ElementPolicyTest;\nimport org.owasp.html.Handler;\nimport org.owasp.html.HtmlChangeListener;\nimport org.owasp.html.HtmlPolicyBuilder;\nimport org.owasp.html.HtmlSanitizer;\nimport org.owasp.html.HtmlStreamEventProcessor;\nimport org.owasp.html.HtmlStreamEventReceiver;\nimport org.owasp.html.HtmlStreamRenderer;\nimport org.owasp.html.JoinedAttributePolicy;\nimport org.owasp.html.JoinedElementPolicy;\nimport org.owasp.html.PolicyFactory;\nimport org.owasp.html.StandardUrlAttributePolicy;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class HtmlPolicyBuilder_allowUrlProtocols extends HtmlPolicyBuilder_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    HtmlPolicyBuilder htmlPolicyBuilder0 = new HtmlPolicyBuilder();\n    String[] stringArray0 = new String[8];\n    stringArray0[0] = \"codebase\";\n    stringArray0[1] = \"icon\";\n    stringArray0[2] = \"mediumturquoise\";\n    stringArray0[3] = \"c%*(\";\n    stringArray0[4] = \"data\";\n    stringArray0[5] = \"zM3O p6^h\";\n    stringArray0[6] = \"href\";\n    stringArray0[7] = \"preserveAspectRatio\";\n    HtmlPolicyBuilder htmlPolicyBuilder1 = htmlPolicyBuilder0.allowUrlProtocols(stringArray0);\n    assertSame(htmlPolicyBuilder0, htmlPolicyBuilder1);\n}\n}"
    },
    {
        "original_path": "OWASP_java-html-sanitizer###OWASP_java-html-sanitizer/src/test/java/org/owasp/html/CssGrammarTest###testCssContent",
        "generated_path": "CssGrammar_cssContent.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.owasp.html;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport org.owasp.html.CssGrammar;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class CssGrammar_cssContent extends CssGrammar_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    String string0 = CssGrammar.cssContent(\"\\\"yvKgtR|!\");\n    assertEquals(\"\\\"yvKgtR|!\", string0);\n}\n}"
    },
    {
        "original_path": "docker-java_docker-java###docker-java_docker-java/docker-java/src/test/java/com/github/dockerjava/api/model/DeviceTest###testParse",
        "generated_path": "Device_parse.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.github.dockerjava.api.model;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.github.dockerjava.api.model.Device;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class Device_parse extends Device_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    Device device0 = Device.parse(\" nc:R bzk,JR\");\n    device0.hashCode();\n    assertEquals(\"rwm\", device0.getcGroupPermissions());\n    assertEquals(\"R bzk,JR\", device0.getPathInContainer());\n    assertEquals(\"nc\", device0.getPathOnHost());\n}\n}"
    },
    {
        "original_path": "docker-java_docker-java###docker-java_docker-java/docker-java/src/test/java/com/github/dockerjava/core/NameParserTest###testValidateRepoName",
        "generated_path": "NameParser_validateRepoName.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.github.dockerjava.core;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.github.dockerjava.core.NameParser;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class NameParser_validateRepoName extends NameParser_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    // Undeclared exception!\n    try {\n        NameParser.validateRepoName((String) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        //\n        // no message in exception (getMessage() returned null)\n        //\n    }\n}\n}"
    },
    {
        "original_path": "docker-java_docker-java###docker-java_docker-java/docker-java/src/test/java/com/github/dockerjava/api/model/IdentifierTest###testFromCompoundString",
        "generated_path": "Identifier_fromCompoundString.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.github.dockerjava.api.model;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.github.dockerjava.api.model.Identifier;\nimport com.github.dockerjava.api.model.Repository;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class Identifier_fromCompoundString extends Identifier_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    Identifier identifier0 = Identifier.fromCompoundString(\"n/98::isM\");\n    assertNotNull(identifier0);\n}\n}"
    },
    {
        "original_path": "docker-java_docker-java###docker-java_docker-java/docker-java/src/test/java/com/github/dockerjava/core/GoLangFileMatchTest###testMatch",
        "generated_path": "GoLangFileMatch_match.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.github.dockerjava.core;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.github.dockerjava.core.GoLangFileMatch;\nimport java.io.File;\nimport java.util.LinkedList;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.io.MockFile;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class GoLangFileMatch_match extends GoLangFileMatch_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    GoLangFileMatch.match(\"**| JYOwA<$#\", \"V'T$H4%\");\n    LinkedList<String> linkedList0 = new LinkedList<String>();\n    List<String> list0 = GoLangFileMatch.match((List<String>) linkedList0, \")*\");\n    File file0 = MockFile.createTempFile(\"V'T$H4%\", \"\");\n    GoLangFileMatch.match(list0, file0);\n    linkedList0.add(\"4~}fu%[ L]Xe>vTQe4*\");\n    GoLangFileMatch.match((List<String>) linkedList0, \"V'T$H4%\");\n    boolean boolean0 = GoLangFileMatch.match((List<String>) linkedList0, file0);\n    GoLangFileMatch.match((List<String>) linkedList0, file0);\n    GoLangFileMatch.match(\")*\", \")*\");\n    linkedList0.removeFirstOccurrence(\"\");\n    File file1 = MockFile.createTempFile(\"QDcM\u007f?vlDm'rx6%$CvF\", \"\");\n    GoLangFileMatch.match((List<String>) linkedList0, file1);\n    linkedList0.offerLast(\"4~}fu%[ L]Xe>vTQe4*\");\n    GoLangFileMatch.match(\"\", file0);\n    GoLangFileMatch.match(\"V'T$H4%\", \"QDcM\u007f?vlDm'rx6%$CvF\");\n    GoLangFileMatch.match(list0, file0);\n    MockFile mockFile0 = new MockFile(\"\", \"QDcM\u007f?vlDm'rx6%$CvF\");\n    mockFile0.setWritable(true);\n    GoLangFileMatch.match(\"V'T$H4%\", (File) mockFile0);\n    GoLangFileMatch.match(list0, file1);\n    List<String> list1 = GoLangFileMatch.match((List<String>) linkedList0, \"**| JYOwA<$#\");\n    GoLangFileMatch.match(\"V'T$H4%\", \"\");\n    GoLangFileMatch.match(\"\", \"\");\n    boolean boolean1 = GoLangFileMatch.match(\"**| JYOwA<$#\", \"\");\n    assertTrue(boolean1 == boolean0);\n    List<String> list2 = GoLangFileMatch.match(list1, \"com.google.common.cache.LocalCache$StrongValueReference\");\n    assertFalse(list2.contains(\"4~}fu%[ L]Xe>vTQe4*\"));\n}\n}"
    },
    {
        "original_path": "ysc_word###ysc_word/src/test/java/org/apdplat/word/dictionary/impl/DictionaryTrieTest###testPrefix",
        "generated_path": "DictionaryTrie_prefix.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.apdplat.word.dictionary.impl;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.util.Collection;\nimport java.util.LinkedList;\nimport java.util.List;\nimport org.apdplat.word.dictionary.impl.DictionaryTrie;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class DictionaryTrie_prefix extends DictionaryTrie_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    DictionaryTrie dictionaryTrie0 = new DictionaryTrie();\n    dictionaryTrie0.prefix(\"\");\n    dictionaryTrie0.contains(\"ramBytesUsed mismatch : \", 16, 16);\n    dictionaryTrie0.prefix(\"\");\n    // Undeclared exception!\n    dictionaryTrie0.clear();\n}\n}"
    },
    {
        "original_path": "ysc_word###ysc_word/src/test/java/org/apdplat/word/recognition/RecognitionToolTest###testIsEnglishAndNumberMix",
        "generated_path": "RecognitionTool_isEnglishAndNumberMix.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.apdplat.word.recognition;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport org.apdplat.word.recognition.RecognitionTool;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class RecognitionTool_isEnglishAndNumberMix extends RecognitionTool_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    int int0 = 3;\n    boolean boolean0 = RecognitionTool.isNumber('c');\n    assertFalse(boolean0);\n    int int1 = 19971;\n    boolean boolean1 = RecognitionTool.isFraction(\"org.apdplat.word.util.DirectoryWatcher\", 3, (int) 'c');\n    assertFalse(boolean1);\n    assertTrue(boolean1 == boolean0);\n    int int2 = 2;\n    // Undeclared exception!\n    try {\n        RecognitionTool.isEnglishAndNumberMix(\"0.08%\", 2259, 2);\n        fail(\"Expecting exception: StringIndexOutOfBoundsException\");\n    } catch (StringIndexOutOfBoundsException e) {\n    }\n}\n}"
    },
    {
        "original_path": "ysc_word###ysc_word/src/test/java/org/apdplat/word/recognition/RecognitionToolTest###testIsQuantifier",
        "generated_path": "RecognitionTool_isQuantifier.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.apdplat.word.recognition;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport org.apdplat.word.recognition.RecognitionTool;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class RecognitionTool_isQuantifier extends RecognitionTool_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    String[] stringArray0 = new String[8];\n    stringArray0[0] = \"{$S@9S\";\n    stringArray0[1] = \"\";\n    stringArray0[2] = \",\";\n    stringArray0[3] = \")x\u007fsWY@UsR\";\n    stringArray0[4] = \"l\";\n    stringArray0[5] = \",\";\n    stringArray0[6] = \"\\u8BC6\\u522B\\u51FA\\u82F1\\u6587\\u5355\\u8BCD\\uFF1A\";\n    stringArray0[7] = \"\";\n    RecognitionTool.main(stringArray0);\n    assertEquals(8, stringArray0.length);\n    boolean boolean0 = RecognitionTool.isQuantifier(\",\", 1, 1);\n    assertFalse(boolean0);\n    boolean boolean1 = RecognitionTool.isEnglishAndNumberMix(\"{$S@9S\", 1, 0);\n    assertTrue(boolean1);\n    assertFalse(boolean1 == boolean0);\n    boolean boolean2 = RecognitionTool.isEnglish('}');\n    assertFalse(boolean2);\n    assertTrue(boolean2 == boolean0);\n    assertFalse(boolean2 == boolean1);\n    boolean boolean3 = RecognitionTool.isQuantifier(\"\");\n    assertFalse(boolean3);\n    assertFalse(boolean3 == boolean1);\n    assertTrue(boolean3 == boolean2);\n    assertTrue(boolean3 == boolean0);\n    boolean boolean4 = RecognitionTool.isNumber('}');\n    assertFalse(boolean4);\n    assertTrue(boolean4 == boolean0);\n    assertTrue(boolean4 == boolean3);\n    assertTrue(boolean4 == boolean2);\n    assertFalse(boolean4 == boolean1);\n    // Undeclared exception!\n    try {\n        RecognitionTool.isNumber(\",\", (-304), 0);\n        fail(\"Expecting exception: StringIndexOutOfBoundsException\");\n    } catch (StringIndexOutOfBoundsException e) {\n    }\n}\n}"
    },
    {
        "original_path": "ysc_word###ysc_word/src/test/java/org/apdplat/word/recognition/RecognitionToolTest###testIsNumber",
        "generated_path": "RecognitionTool_isNumber.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.apdplat.word.recognition;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport org.apdplat.word.recognition.RecognitionTool;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class RecognitionTool_isNumber extends RecognitionTool_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    String string0 = \"\\u6CE8\\u610F\\uFF1A\\u672A\\u542F\\u7528\\u81EA\\u52A8\\u68C0\\u6D4B\\u529F\\u80FD\\uFF01\\u5982\\u9700\\u542F\\u7528\\uFF0C\\u8BF7\\u5728word.local.conf\\u6587\\u4EF6\\u4E2D\\u6307\\u5B9A\\u914D\\u7F6E\\u9879auto.detect=true\";\n    int int0 = 2;\n    boolean boolean0 = RecognitionTool.isNumber(\"\\u6CE8\\u610F\\uFF1A\\u672A\\u542F\\u7528\\u81EA\\u52A8\\u68C0\\u6D4B\\u529F\\u80FD\\uFF01\\u5982\\u9700\\u542F\\u7528\\uFF0C\\u8BF7\\u5728word.local.conf\\u6587\\u4EF6\\u4E2D\\u6307\\u5B9A\\u914D\\u7F6E\\u9879auto.detect=true\", 2, 2);\n    assertFalse(boolean0);\n    char char0 = 'a';\n    boolean boolean1 = RecognitionTool.isEnglish('a');\n    assertTrue(boolean1);\n    assertFalse(boolean1 == boolean0);\n    boolean boolean2 = RecognitionTool.isFraction(\"\\u6CE8\\u610F\\uFF1A\\u672A\\u542F\\u7528\\u81EA\\u52A8\\u68C0\\u6D4B\\u529F\\u80FD\\uFF01\\u5982\\u9700\\u542F\\u7528\\uFF0C\\u8BF7\\u5728word.local.conf\\u6587\\u4EF6\\u4E2D\\u6307\\u5B9A\\u914D\\u7F6E\\u9879auto.detect=true\", 2, 2);\n    assertFalse(boolean2);\n    assertFalse(boolean2 == boolean1);\n    assertTrue(boolean2 == boolean0);\n    int int1 = (-1088);\n    // Undeclared exception!\n    try {\n        RecognitionTool.recog(\"\\u6CE8\\u610F\\uFF1A\\u672A\\u542F\\u7528\\u81EA\\u52A8\\u68C0\\u6D4B\\u529F\\u80FD\\uFF01\\u5982\\u9700\\u542F\\u7528\\uFF0C\\u8BF7\\u5728word.local.conf\\u6587\\u4EF6\\u4E2D\\u6307\\u5B9A\\u914D\\u7F6E\\u9879auto.detect=true\", 2, (-1088));\n        fail(\"Expecting exception: StringIndexOutOfBoundsException\");\n    } catch (StringIndexOutOfBoundsException e) {\n    }\n}\n}"
    },
    {
        "original_path": "ysc_word###ysc_word/src/test/java/org/apdplat/word/recognition/RecognitionToolTest###testIsChineseNumber",
        "generated_path": "RecognitionTool_isChineseNumber.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.apdplat.word.recognition;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport org.apdplat.word.recognition.RecognitionTool;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class RecognitionTool_isChineseNumber extends RecognitionTool_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    String string0 = \"\\u8BC6\\u522B\\u51FA\\u82F1\\u6587\\u5B57\\u6BCD\\u548C\\u6570\\u5B57\\u6DF7\\u5408\\u4E32\\uFF1A\";\n    int int0 = 3;\n    int int1 = (-1620);\n    // Undeclared exception!\n    try {\n        RecognitionTool.isChineseNumber(\"\\u8BC6\\u522B\\u51FA\\u82F1\\u6587\\u5B57\\u6BCD\\u548C\\u6570\\u5B57\\u6DF7\\u5408\\u4E32\\uFF1A\", 3, (-1620));\n        fail(\"Expecting exception: StringIndexOutOfBoundsException\");\n    } catch (StringIndexOutOfBoundsException e) {\n    }\n}\n}"
    },
    {
        "original_path": "ysc_word###ysc_word/src/test/java/org/apdplat/word/recognition/RecognitionToolTest###testIsEnglish",
        "generated_path": "RecognitionTool_isEnglish.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.apdplat.word.recognition;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport org.apdplat.word.recognition.RecognitionTool;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class RecognitionTool_isEnglish extends RecognitionTool_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    String[] stringArray0 = new String[15];\n    stringArray0[0] = \"%'6[DmqV9fOqqTyp\";\n    stringArray0[1] = \"l <[)b\";\n    stringArray0[2] = \"\";\n    stringArray0[3] = \"\";\n    stringArray0[4] = \"\";\n    stringArray0[5] = \"7s\\\"zrC;Y^i'X|I(\";\n    stringArray0[6] = \"4WV1SIrHj/u\";\n    stringArray0[7] = \"2zECh$3g\";\n    stringArray0[8] = \"';^1vpjp8%[nd:\u007f]\";\n    RecognitionTool.main(stringArray0);\n    assertEquals(15, stringArray0.length);\n    boolean boolean0 = RecognitionTool.isEnglish(\"?GH#k;jFu\", 1, 294);\n    assertFalse(boolean0);\n}\n}"
    },
    {
        "original_path": "ysc_word###ysc_word/src/test/java/org/apdplat/word/util/DoubleArrayGenericTrieTest###testClear",
        "generated_path": "DoubleArrayGenericTrie_clear.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.apdplat.word.util;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.function.BiFunction;\nimport org.apdplat.word.util.DoubleArrayGenericTrie;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class DoubleArrayGenericTrie_clear extends DoubleArrayGenericTrie_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    DoubleArrayGenericTrie doubleArrayGenericTrie0 = new DoubleArrayGenericTrie();\n    doubleArrayGenericTrie0.clear();\n    doubleArrayGenericTrie0.clear();\n    HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();\n    doubleArrayGenericTrie0.putAll(hashMap0);\n    Integer integer0 = new Integer(9);\n    hashMap0.put(\"\\u7AE0\\u5B50\\u6021\", integer0);\n    doubleArrayGenericTrie0.get(\"\\u7AE0\\u5B50\\u6021\", 65000, 65000);\n    doubleArrayGenericTrie0.get(\"\\u7AE0\\u5B50\\u6021\", 65000, 49);\n    doubleArrayGenericTrie0.get(\".&awIK%Sp8,\");\n    doubleArrayGenericTrie0.clear();\n    doubleArrayGenericTrie0.putAll(hashMap0);\n    doubleArrayGenericTrie0.get(\"\\u7AE0\\u5B50\\u6021\");\n    String[] stringArray0 = new String[2];\n    stringArray0[0] = \"\\u7AE0\\u5B50\\u6021\";\n    stringArray0[1] = \"\\u7AE0\\u5B50\\u6021\";\n    DoubleArrayGenericTrie.main(stringArray0);\n    // Undeclared exception!\n    try {\n        doubleArrayGenericTrie0.get(\"\\u7AE0\\u5B50\\u6021\", Integer.MIN_VALUE, 1000);\n        fail(\"Expecting exception: StringIndexOutOfBoundsException\");\n    } catch (StringIndexOutOfBoundsException e) {\n    }\n}\n}"
    },
    {
        "original_path": "jmxtrans_jmxtrans###jmxtrans_jmxtrans/jmxtrans-utils/src/test/java/com/googlecode/jmxtrans/util/NumberUtilsTest###testIsNumeric",
        "generated_path": "NumberUtils_isNumeric.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "package com.googlecode.jmxtrans.util;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport com.googlecode.jmxtrans.util.NumberUtils;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class NumberUtils_isNumeric extends NumberUtils_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    boolean boolean0 = NumberUtils.isNumeric(\"5lL@\");\n    assertFalse(boolean0);\n}\n}"
    },
    {
        "original_path": "jmxtrans_jmxtrans###jmxtrans_jmxtrans/jmxtrans-utils/src/test/java/com/googlecode/jmxtrans/util/NumberUtilsTest###testIsValidNumber",
        "generated_path": "NumberUtils_isValidNumber.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "package com.googlecode.jmxtrans.util;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport com.googlecode.jmxtrans.util.NumberUtils;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class NumberUtils_isValidNumber extends NumberUtils_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    Double double0 = new Double(0.0);\n    boolean boolean0 = NumberUtils.isValidNumber((Number) double0);\n    assertTrue(boolean0);\n}\n}"
    },
    {
        "original_path": "jmxtrans_jmxtrans###jmxtrans_jmxtrans/jmxtrans-core/src/test/java/com/googlecode/jmxtrans/scheduler/ServerSchedulerTest###testSchedule",
        "generated_path": "ServerScheduler_schedule.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "package com.googlecode.jmxtrans.scheduler;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.google.common.collect.ImmutableList;\nimport com.googlecode.jmxtrans.cli.JmxTransConfiguration;\nimport com.googlecode.jmxtrans.connections.JMXConnection;\nimport com.googlecode.jmxtrans.connections.JmxConnectionProvider;\nimport com.googlecode.jmxtrans.executors.CommonExecutorRepository;\nimport com.googlecode.jmxtrans.executors.ExecutorFactory;\nimport com.googlecode.jmxtrans.executors.SeparateExecutorRepository;\nimport com.googlecode.jmxtrans.jmx.ResultProcessor;\nimport com.googlecode.jmxtrans.model.OutputWriter;\nimport com.googlecode.jmxtrans.model.Query;\nimport com.googlecode.jmxtrans.model.Server;\nimport com.googlecode.jmxtrans.scheduler.ServerScheduler;\nimport com.jayway.awaitility.core.FieldSupplierBuilder;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.IllegalFormatConversionException;\nimport java.util.List;\nimport java.util.concurrent.Callable;\nimport java.util.concurrent.ScheduledThreadPoolExecutor;\nimport java.util.concurrent.ThreadFactory;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport org.apache.commons.pool.KeyedObjectPool;\nimport org.apache.commons.pool.impl.StackKeyedObjectPool;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.mock.java.lang.MockThread;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class ServerScheduler_schedule extends ServerScheduler_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test1() throws Throwable {\n    JmxTransConfiguration jmxTransConfiguration0 = new JmxTransConfiguration();\n    ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();\n    ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(597, threadPoolExecutor_CallerRunsPolicy0);\n    ExecutorFactory executorFactory0 = new ExecutorFactory(597, 597, \">rpI|TSx\");\n    ExecutorFactory.threadFactory((String) null);\n    SeparateExecutorRepository separateExecutorRepository0 = new SeparateExecutorRepository(executorFactory0);\n    ResultProcessor resultProcessor0 = new ResultProcessor(separateExecutorRepository0);\n    ServerScheduler serverScheduler0 = new ServerScheduler(jmxTransConfiguration0, scheduledThreadPoolExecutor0, separateExecutorRepository0, resultProcessor0);\n    serverScheduler0.unscheduleAll();\n    serverScheduler0.unscheduleAll();\n    Integer integer0 = new Integer(597);\n    ArrayList<Query> arrayList0 = new ArrayList<Query>();\n    OutputWriter[] outputWriterArray0 = new OutputWriter[4];\n    OutputWriter outputWriter0 = mock(OutputWriter.class, new ViolatedAssumptionAnswer());\n    outputWriterArray0[0] = outputWriter0;\n    outputWriterArray0[1] = outputWriter0;\n    outputWriterArray0[2] = outputWriter0;\n    outputWriterArray0[3] = outputWriter0;\n    ImmutableList<OutputWriter> immutableList0 = ImmutableList.copyOf(outputWriterArray0);\n    StackKeyedObjectPool<JmxConnectionProvider, JMXConnection> stackKeyedObjectPool0 = new StackKeyedObjectPool<JmxConnectionProvider, JMXConnection>(597, 1128);\n    Server server0 = new Server(\">rpI|TSx\", \"weblogic\", (String) null, \"zNd{Pq7P?Jw?C>_;s\", \"zNd{Pq7P?Jw?C>_;s\", \"com.googlecode.jmxtrans.scheduler.ServerScheduler$1\", \"com.googlecode.jmxtrans.scheduler.ServerScheduler$1\", (String) null, \"_H*q>bqr|'_]>\", integer0, true, true, (List<Query>) arrayList0, immutableList0, (KeyedObjectPool<JmxConnectionProvider, JMXConnection>) stackKeyedObjectPool0);\n    serverScheduler0.schedule(server0);\n    serverScheduler0.schedule(server0);\n    serverScheduler0.schedule(server0);\n}\n}"
    },
    {
        "original_path": "w3c_epubcheck###w3c_epubcheck/src/test/java/com/adobe/epubcheck/util/PathUtilTest###testRemoveWorkingDirectory",
        "generated_path": "PathUtil_removeWorkingDirectory.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.adobe.epubcheck.util;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport com.adobe.epubcheck.util.PathUtil;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class PathUtil_removeWorkingDirectory extends PathUtil_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test0() throws Throwable {\n    String string0 = PathUtil.removeWorkingDirectory(\"s|pS+ak%7tB%BG=^\");\n    assertEquals(\"s|pS+ak%7tB%BG=^\", string0);\n}\n}"
    },
    {
        "original_path": "wstrange_GoogleAuth###wstrange_GoogleAuth/src/test/java/com/warrenstrange/googleauth/GoogleAuthenticatorQRGeneratorTest###testGetOtpAuthTotpURL",
        "generated_path": "GoogleAuthenticatorQRGenerator_getOtpAuthTotpURL.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.warrenstrange.googleauth;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.warrenstrange.googleauth.GoogleAuthenticatorConfig;\nimport com.warrenstrange.googleauth.GoogleAuthenticatorKey;\nimport com.warrenstrange.googleauth.GoogleAuthenticatorQRGenerator;\nimport com.warrenstrange.googleauth.HmacHashFunction;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class GoogleAuthenticatorQRGenerator_getOtpAuthTotpURL extends GoogleAuthenticatorQRGenerator_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test0() throws Throwable {\n    HmacHashFunction hmacHashFunction0 = HmacHashFunction.HmacSHA256;\n    GoogleAuthenticatorConfig googleAuthenticatorConfig0 = mock(GoogleAuthenticatorConfig.class, new ViolatedAssumptionAnswer());\n    doReturn(0).when(googleAuthenticatorConfig0).getCodeDigits();\n    doReturn(hmacHashFunction0).when(googleAuthenticatorConfig0).getHmacHashFunction();\n    doReturn(0L).when(googleAuthenticatorConfig0).getTimeStepSizeInMillis();\n    GoogleAuthenticatorKey googleAuthenticatorKey0 = mock(GoogleAuthenticatorKey.class, new ViolatedAssumptionAnswer());\n    doReturn(googleAuthenticatorConfig0).when(googleAuthenticatorKey0).getConfig();\n    doReturn(\"\u007f\").when(googleAuthenticatorKey0).getKey();\n    String string0 = GoogleAuthenticatorQRGenerator.getOtpAuthTotpURL(\"\u007f\", \"HmacSHA512\", googleAuthenticatorKey0);\n    assertEquals(\"otpauth://totp/%7F:HmacSHA512?secret=%7F&issuer=%7F&algorithm=SHA256&digits=0&period=0\", string0);\n}\n}"
    },
    {
        "original_path": "magro_memcached-session-manager###magro_memcached-session-manager/core/src/test/java/de/javakaffee/web/msm/MemcachedNodesManagerTest###testGetNextAvailableNodeId",
        "generated_path": "MemcachedNodesManager_getNextAvailableNodeId.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package de.javakaffee.web.msm;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport de.javakaffee.web.msm.MemcachedNodesManager;\nimport de.javakaffee.web.msm.NodeAvailabilityCache;\nimport de.javakaffee.web.msm.NodeIdList;\nimport de.javakaffee.web.msm.StorageKeyFormat;\nimport java.net.InetSocketAddress;\nimport java.util.LinkedHashMap;\nimport java.util.LinkedList;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.mock.java.net.MockInetSocketAddress;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class MemcachedNodesManager_getNextAvailableNodeId extends MemcachedNodesManager_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test33() throws Throwable {\n    String[] stringArray0 = new String[3];\n    stringArray0[0] = \"\";\n    stringArray0[1] = \"\";\n    NodeIdList nodeIdList0 = new NodeIdList(stringArray0);\n    LinkedHashMap<InetSocketAddress, String> linkedHashMap0 = new LinkedHashMap<InetSocketAddress, String>();\n    StorageKeyFormat storageKeyFormat0 = StorageKeyFormat.of((String) null, \"[^-.]+-[^.]+(.[^.]+)?\", (String) null, \"H|8Dj\");\n    MemcachedNodesManager.StorageClientCallback memcachedNodesManager_StorageClientCallback0 = mock(MemcachedNodesManager.StorageClientCallback.class, new ViolatedAssumptionAnswer());\n    MemcachedNodesManager memcachedNodesManager0 = new MemcachedNodesManager(\"\", nodeIdList0, nodeIdList0, linkedHashMap0, storageKeyFormat0, memcachedNodesManager_StorageClientCallback0);\n    String string0 = memcachedNodesManager0.getNextAvailableNodeId(\"\");\n    assertNull(string0);\n}\n}"
    },
    {
        "original_path": "magro_memcached-session-manager###magro_memcached-session-manager/core/src/test/java/de/javakaffee/web/msm/MemcachedNodesManagerTest###testGetNodeId",
        "generated_path": "MemcachedNodesManager_getNodeId.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package de.javakaffee.web.msm;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport de.javakaffee.web.msm.MemcachedNodesManager;\nimport de.javakaffee.web.msm.NodeAvailabilityCache;\nimport de.javakaffee.web.msm.NodeIdList;\nimport de.javakaffee.web.msm.StorageKeyFormat;\nimport java.net.InetSocketAddress;\nimport java.util.LinkedHashMap;\nimport java.util.LinkedList;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.mock.java.net.MockInetSocketAddress;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class MemcachedNodesManager_getNodeId extends MemcachedNodesManager_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void MemcachedNodesManager_getNodeId() throws Throwable {\n    MemcachedNodesManager.StorageClientCallback memcachedNodesManager_StorageClientCallback0 = mock(MemcachedNodesManager.StorageClientCallback.class, new ViolatedAssumptionAnswer());\n    StorageKeyFormat storageKeyFormat0 = StorageKeyFormat.ofHost(\"~-0Es\");\n    MemcachedNodesManager memcachedNodesManager0 = MemcachedNodesManager.createFor(\"rediss://W\", \"host.hash\", storageKeyFormat0, memcachedNodesManager_StorageClientCallback0);\n    MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(1030);\n    try {\n        memcachedNodesManager0.getNodeId(mockInetSocketAddress0);\n        fail(\"Expecting exception: IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n        //\n        // SocketAddress /192.168.1.42:1030 not known (registered addresses: []).\n        //\n        verifyException(\"de.javakaffee.web.msm.MemcachedNodesManager\", e);\n    }\n}\n}"
    },
    {
        "original_path": "magro_memcached-session-manager###magro_memcached-session-manager/core/src/test/java/de/javakaffee/web/msm/MemcachedNodesManagerTest###testChangeSessionIdForTomcatFailover",
        "generated_path": "MemcachedNodesManager_changeSessionIdForTomcatFailover.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package de.javakaffee.web.msm;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport de.javakaffee.web.msm.MemcachedNodesManager;\nimport de.javakaffee.web.msm.NodeAvailabilityCache;\nimport de.javakaffee.web.msm.NodeIdList;\nimport de.javakaffee.web.msm.StorageKeyFormat;\nimport java.net.InetSocketAddress;\nimport java.util.LinkedHashMap;\nimport java.util.LinkedList;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.mock.java.net.MockInetSocketAddress;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class MemcachedNodesManager_changeSessionIdForTomcatFailover extends MemcachedNodesManager_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    String[] stringArray0 = new String[4];\n    stringArray0[0] = \"\";\n    stringArray0[1] = \"\";\n    stringArray0[2] = \"\";\n    stringArray0[3] = \"\";\n    NodeIdList nodeIdList0 = NodeIdList.create(stringArray0);\n    LinkedHashMap<InetSocketAddress, String> linkedHashMap0 = new LinkedHashMap<InetSocketAddress, String>();\n    StorageKeyFormat storageKeyFormat0 = StorageKeyFormat.of(\"\", \"\", \"de.javakaffee.web.msm.SessionIdFormat\", (String) null);\n    MemcachedNodesManager.StorageClientCallback memcachedNodesManager_StorageClientCallback0 = mock(MemcachedNodesManager.StorageClientCallback.class, new ViolatedAssumptionAnswer());\n    MemcachedNodesManager memcachedNodesManager0 = new MemcachedNodesManager(\"\", nodeIdList0, nodeIdList0, linkedHashMap0, storageKeyFormat0, memcachedNodesManager_StorageClientCallback0);\n    String string0 = memcachedNodesManager0.changeSessionIdForTomcatFailover(\"\", \"\");\n    assertEquals(\"\", string0);\n}\n}"
    },
    {
        "original_path": "magro_memcached-session-manager###magro_memcached-session-manager/core/src/test/java/de/javakaffee/web/msm/SessionIdFormatTest###testCreateSessionId",
        "generated_path": "SessionIdFormat_createSessionId.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package de.javakaffee.web.msm;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport de.javakaffee.web.msm.SessionIdFormat;\nimport de.javakaffee.web.msm.StorageKeyFormat;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class SessionIdFormat_createSessionId extends SessionIdFormat_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    SessionIdFormat sessionIdFormat0 = new SessionIdFormat();\n    String string0 = sessionIdFormat0.createSessionId(\".\", \"\");\n    assertEquals(\"-.\", string0);\n}\n}"
    },
    {
        "original_path": "magro_memcached-session-manager###magro_memcached-session-manager/core/src/test/java/de/javakaffee/web/msm/SessionIdFormatTest###testExtractMemcachedId",
        "generated_path": "SessionIdFormat_extractMemcachedId.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package de.javakaffee.web.msm;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport de.javakaffee.web.msm.SessionIdFormat;\nimport de.javakaffee.web.msm.StorageKeyFormat;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class SessionIdFormat_extractMemcachedId extends SessionIdFormat_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    SessionIdFormat sessionIdFormat0 = new SessionIdFormat();\n    String string0 = sessionIdFormat0.extractMemcachedId(\".XZ@2#7[g-P-d$^X\\\"7x\");\n    assertNull(string0);\n}\n}"
    },
    {
        "original_path": "jcodec_jcodec###jcodec_jcodec/src/test/java/org/jcodec/containers/mp4/SampleOffsetUtilsTest###testGetChunkBySample",
        "generated_path": "SampleOffsetUtils_getChunkBySample.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.jcodec.containers.mp4;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.io.MockFile;\nimport org.jcodec.containers.mp4.SampleOffsetUtils;\nimport org.jcodec.containers.mp4.boxes.ChunkOffsetsBox;\nimport org.jcodec.containers.mp4.boxes.Header;\nimport org.jcodec.containers.mp4.boxes.SampleSizesBox;\nimport org.jcodec.containers.mp4.boxes.SampleToChunkBox;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class SampleOffsetUtils_getChunkBySample extends SampleOffsetUtils_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    SampleToChunkBox.SampleToChunkEntry[] sampleToChunkBox_SampleToChunkEntryArray0 = new SampleToChunkBox.SampleToChunkEntry[1];\n    SampleToChunkBox.SampleToChunkEntry sampleToChunkBox_SampleToChunkEntry0 = new SampleToChunkBox.SampleToChunkEntry(0L, 32, 224);\n    sampleToChunkBox_SampleToChunkEntryArray0[0] = sampleToChunkBox_SampleToChunkEntry0;\n    SampleToChunkBox sampleToChunkBox0 = SampleToChunkBox.createSampleToChunkBox(sampleToChunkBox_SampleToChunkEntryArray0);\n    long[] longArray0 = new long[9];\n    ChunkOffsetsBox chunkOffsetsBox0 = ChunkOffsetsBox.createChunkOffsetsBox(longArray0);\n    SampleOffsetUtils.getChunkBySample(224, chunkOffsetsBox0, sampleToChunkBox0);\n}\n}"
    },
    {
        "original_path": "jcodec_jcodec###jcodec_jcodec/src/test/java/org/jcodec/codecs/h264/CoeffTransformerTest###testQuantizeDC2x2",
        "generated_path": "CoeffTransformer_quantizeDC2x2.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.jcodec.codecs.h264.decode;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.jcodec.codecs.h264.decode.CoeffTransformer;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class CoeffTransformer_quantizeDC2x2 extends CoeffTransformer_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    CoeffTransformer coeffTransformer0 = new CoeffTransformer();\n    int[] intArray0 = new int[4];\n    intArray0[0] = (-1558);\n    CoeffTransformer.zigzag4x4 = intArray0;\n    CoeffTransformer.quantizeDC2x2(coeffTransformer0.zigzag4x4, 905);\n}\n}"
    },
    {
        "original_path": "jcodec_jcodec###jcodec_jcodec/src/test/java/org/jcodec/common/io/ByteBufferSeekableByteChannelTest###testWrite",
        "generated_path": "ByteBufferSeekableByteChannel_write.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.jcodec.common.io;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.nio.ByteBuffer;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.jcodec.common.io.ByteBufferSeekableByteChannel;\nimport org.jcodec.common.io.SeekableByteChannel;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class ByteBufferSeekableByteChannel_write extends ByteBufferSeekableByteChannel_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test19() throws Throwable {\n    ByteBuffer byteBuffer0 = mock(ByteBuffer.class, new ViolatedAssumptionAnswer());\n    ByteBuffer byteBuffer1 = mock(ByteBuffer.class, new ViolatedAssumptionAnswer());\n    doReturn(byteBuffer0).when(byteBuffer1).duplicate();\n    doReturn(\"Z\").when(byteBuffer1).toString();\n    ByteBuffer byteBuffer2 = mock(ByteBuffer.class, new ViolatedAssumptionAnswer());\n    doReturn(byteBuffer1).when(byteBuffer2).duplicate();\n    doReturn((ByteBuffer) null).when(byteBuffer2).put(any(java.nio.ByteBuffer.class));\n    ByteBufferSeekableByteChannel byteBufferSeekableByteChannel0 = ByteBufferSeekableByteChannel.writeToByteBuffer(byteBuffer2);\n    ByteBuffer byteBuffer3 = byteBufferSeekableByteChannel0.getContents();\n    int int0 = byteBufferSeekableByteChannel0.write(byteBuffer3);\n    assertEquals(0, int0);\n    assertEquals(0L, byteBufferSeekableByteChannel0.size());\n    assertTrue(byteBufferSeekableByteChannel0.isOpen());\n}\n}"
    },
    {
        "original_path": "jcodec_jcodec###jcodec_jcodec/src/test/java/org/jcodec/movtool/MoovVersionsTest###testRollback",
        "generated_path": "MoovVersions_rollback.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.jcodec.movtool;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.NoSuchElementException;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.mock.java.io.MockFile;\nimport org.evosuite.runtime.testdata.EvoSuiteFile;\nimport org.evosuite.runtime.testdata.FileSystemHandling;\nimport org.jcodec.containers.mp4.MP4Util;\nimport org.jcodec.containers.mp4.boxes.Box;\nimport org.jcodec.containers.mp4.boxes.Header;\nimport org.jcodec.containers.mp4.boxes.MovieBox;\nimport org.jcodec.containers.mp4.boxes.NodeBox;\nimport org.jcodec.movtool.MoovVersions;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class MoovVersions_rollback extends MoovVersions_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void MoovVersions_rollback() throws Throwable {\n    EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(\"a|_ YjLG\");\n    FileSystemHandling.appendStringToFile(evoSuiteFile0, \"w>n+L\");\n    MockFile mockFile0 = new MockFile((File) null, \"a|_ YjLG\");\n    MovieBox movieBox0 = MovieBox.createMovieBox();\n    MP4Util.Atom mP4Util_Atom0 = new MP4Util.Atom(movieBox0.header, 134217728);\n    // Undeclared exception!\n    try {\n        MoovVersions.rollback(mockFile0, mP4Util_Atom0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        //\n        // no message in exception (getMessage() returned null)\n        //\n        verifyException(\"org.jcodec.movtool.MoovVersions\", e);\n    }\n}\n}"
    },
    {
        "original_path": "jcodec_jcodec###jcodec_jcodec/src/test/java/org/jcodec/containers/mp4/SampleOffsetUtilsTest###testGetSamplesInChunk",
        "generated_path": "SampleOffsetUtils_getSamplesInChunk.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.jcodec.containers.mp4;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.io.MockFile;\nimport org.jcodec.containers.mp4.SampleOffsetUtils;\nimport org.jcodec.containers.mp4.boxes.ChunkOffsetsBox;\nimport org.jcodec.containers.mp4.boxes.Header;\nimport org.jcodec.containers.mp4.boxes.SampleSizesBox;\nimport org.jcodec.containers.mp4.boxes.SampleToChunkBox;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class SampleOffsetUtils_getSamplesInChunk extends SampleOffsetUtils_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    SampleToChunkBox.SampleToChunkEntry[] sampleToChunkBox_SampleToChunkEntryArray0 = new SampleToChunkBox.SampleToChunkEntry[5];\n    SampleToChunkBox.SampleToChunkEntry sampleToChunkBox_SampleToChunkEntry0 = new SampleToChunkBox.SampleToChunkEntry((-869), (-869), (-869));\n    sampleToChunkBox_SampleToChunkEntryArray0[0] = sampleToChunkBox_SampleToChunkEntry0;\n    SampleToChunkBox.SampleToChunkEntry sampleToChunkBox_SampleToChunkEntry1 = new SampleToChunkBox.SampleToChunkEntry(1526L, (-869), (-869));\n    sampleToChunkBox_SampleToChunkEntryArray0[1] = sampleToChunkBox_SampleToChunkEntry1;\n    SampleToChunkBox sampleToChunkBox0 = SampleToChunkBox.createSampleToChunkBox(sampleToChunkBox_SampleToChunkEntryArray0);\n    SampleOffsetUtils.getSamplesInChunk((-869), sampleToChunkBox0);\n}\n}"
    },
    {
        "original_path": "jcodec_jcodec###jcodec_jcodec/src/test/java/org/jcodec/containers/mkv/SeekHeadFactoryTest###testEstimeteSeekSize",
        "generated_path": "SeekHeadFactory_estimeteSeekSize.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.jcodec.containers.mkv;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.jcodec.containers.mkv.SeekHeadFactory;\nimport org.jcodec.containers.mkv.boxes.EbmlBase;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class SeekHeadFactory_estimeteSeekSize extends SeekHeadFactory_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    int int0 = SeekHeadFactory.estimeteSeekSize((-15), (-15));\n    assertEquals(0, int0);\n}\n}"
    },
    {
        "original_path": "jcodec_jcodec###jcodec_jcodec/src/test/java/org/jcodec/codecs/h264/CABACTest###testReadIntraChromaPredMode",
        "generated_path": "CABAC_readIntraChromaPredMode.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.jcodec.codecs.h264.io;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.jcodec.codecs.common.biari.MDecoder;\nimport org.jcodec.codecs.common.biari.MEncoder;\nimport org.jcodec.codecs.h264.H264Const;\nimport org.jcodec.codecs.h264.decode.CABACContst;\nimport org.jcodec.codecs.h264.io.CABAC;\nimport org.jcodec.codecs.h264.io.model.MBType;\nimport org.jcodec.codecs.h264.io.model.SliceType;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class CABAC_readIntraChromaPredMode extends CABAC_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test008() throws Throwable {\n    CABAC cABAC0 = new CABAC(791);\n    MDecoder mDecoder0 = mock(MDecoder.class, new ViolatedAssumptionAnswer());\n    doReturn(1216, 0).when(mDecoder0).decodeBin(anyInt());\n    CABACContst.cabac_context_init_I_B = cABAC0.tmp;\n    MBType mBType0 = mock(MBType.class, new ViolatedAssumptionAnswer());\n    doReturn(true).when(mBType0).isIntra();\n    cABAC0.readIntraChromaPredMode(mDecoder0, 7, mBType0, mBType0, true, false);\n}\n}"
    },
    {
        "original_path": "jcodec_jcodec###jcodec_jcodec/src/test/java/org/jcodec/movtool/MoovVersionsTest###testUndo",
        "generated_path": "MoovVersions_undo.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.jcodec.movtool;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.NoSuchElementException;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.mock.java.io.MockFile;\nimport org.evosuite.runtime.testdata.EvoSuiteFile;\nimport org.evosuite.runtime.testdata.FileSystemHandling;\nimport org.jcodec.containers.mp4.MP4Util;\nimport org.jcodec.containers.mp4.boxes.Box;\nimport org.jcodec.containers.mp4.boxes.Header;\nimport org.jcodec.containers.mp4.boxes.MovieBox;\nimport org.jcodec.containers.mp4.boxes.NodeBox;\nimport org.jcodec.movtool.MoovVersions;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class MoovVersions_undo extends MoovVersions_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void MoovVersions_undo() throws Throwable {\n    // Undeclared exception!\n    try {\n        MoovVersions.undo((File) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        //\n        // no message in exception (getMessage() returned null)\n        //\n        verifyException(\"org.evosuite.runtime.mock.java.io.MockFileInputStream\", e);\n    }\n}\n}"
    },
    {
        "original_path": "jcodec_jcodec###jcodec_jcodec/src/test/java/org/jcodec/codecs/h264/CoeffTransformerTest###testQuantizeDC4x4",
        "generated_path": "CoeffTransformer_quantizeDC4x4.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.jcodec.codecs.h264.decode;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.jcodec.codecs.h264.decode.CoeffTransformer;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class CoeffTransformer_quantizeDC4x4 extends CoeffTransformer_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    CoeffTransformer coeffTransformer0 = new CoeffTransformer();\n    CoeffTransformer.reorderDC4x4(coeffTransformer0.invZigzag4x4);\n    int[][] intArray0 = new int[6][0];\n    intArray0[0] = coeffTransformer0.zigzag4x4;\n    CoeffTransformer.quantizeDC4x4(coeffTransformer0.zigzag8x8, 0);\n}\n}"
    },
    {
        "original_path": "jcodec_jcodec###jcodec_jcodec/src/test/java/org/jcodec/codecs/mpeg12/MPEGDecoderTest###testProbe",
        "generated_path": "MPEGDecoder_probe.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.jcodec.codecs.mpeg12;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.nio.ByteBuffer;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.jcodec.codecs.mpeg12.MPEGDecoder;\nimport org.jcodec.codecs.mpeg12.MPEGPred;\nimport org.jcodec.codecs.mpeg12.bitstream.PictureHeader;\nimport org.jcodec.codecs.mpeg12.bitstream.SequenceHeader;\nimport org.jcodec.common.io.BitReader;\nimport org.jcodec.common.io.VLC;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class MPEGDecoder_probe extends MPEGDecoder_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test37() throws Throwable {\n    ByteBuffer byteBuffer0 = mock(ByteBuffer.class, new ViolatedAssumptionAnswer());\n    ByteBuffer byteBuffer1 = mock(ByteBuffer.class, new ViolatedAssumptionAnswer());\n    doReturn(byteBuffer0).when(byteBuffer1).duplicate();\n    int int0 = MPEGDecoder.probe(byteBuffer1);\n    assertEquals(0, int0);\n}\n}"
    },
    {
        "original_path": "jcodec_jcodec###jcodec_jcodec/src/test/java/org/jcodec/common/io/ByteBufferSeekableByteChannelTest###testRead",
        "generated_path": "ByteBufferSeekableByteChannel_read.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.jcodec.common.io;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.nio.ByteBuffer;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.jcodec.common.io.ByteBufferSeekableByteChannel;\nimport org.jcodec.common.io.SeekableByteChannel;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class ByteBufferSeekableByteChannel_read extends ByteBufferSeekableByteChannel_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    ByteBuffer byteBuffer0 = mock(ByteBuffer.class, new ViolatedAssumptionAnswer());\n    ByteBufferSeekableByteChannel byteBufferSeekableByteChannel0 = ByteBufferSeekableByteChannel.writeToByteBuffer(byteBuffer0);\n    ByteBuffer byteBuffer1 = mock(ByteBuffer.class, new ViolatedAssumptionAnswer());\n    int int0 = byteBufferSeekableByteChannel0.read(byteBuffer1);\n    assertTrue(byteBufferSeekableByteChannel0.isOpen());\n    assertEquals((-1), int0);\n}\n}"
    },
    {
        "original_path": "jcodec_jcodec###jcodec_jcodec/src/test/java/org/jcodec/containers/dpx/DPXReaderTest###testTryParseISO8601Date",
        "generated_path": "DPXReader_tryParseISO8601Date.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.jcodec.containers.dpx;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.nio.BufferUnderflowException;\nimport java.nio.ByteBuffer;\nimport java.util.Date;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.mock.java.io.MockFile;\nimport org.evosuite.runtime.testdata.EvoSuiteFile;\nimport org.evosuite.runtime.testdata.FileSystemHandling;\nimport org.jcodec.common.io.ByteBufferSeekableByteChannel;\nimport org.jcodec.common.io.SeekableByteChannel;\nimport org.jcodec.containers.dpx.DPXReader;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class DPXReader_tryParseISO8601Date extends DPXReader_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    Date date0 = DPXReader.tryParseISO8601Date(\"org.jcodec.common.io.ByteBufferSeekableByteChannel\");\n    assertNull(date0);\n}\n}"
    },
    {
        "original_path": "jcodec_jcodec###jcodec_jcodec/src/test/java/org/jcodec/containers/mkv/EbmlUtilTest###testComputeLength",
        "generated_path": "EbmlUtil_computeLength.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.jcodec.containers.mkv.util;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.nio.ByteBuffer;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.jcodec.containers.mkv.util.EbmlUtil;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class EbmlUtil_computeLength extends EbmlUtil_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    byte[] byteArray0 = EbmlUtil.ebmlEncodeLen(508L, 3419);\n    EbmlUtil.toHexString(byteArray0);\n    EbmlUtil.computeLength((byte) (-15));\n    EbmlUtil.toHexString(byteArray0);\n    // Undeclared exception!\n    EbmlUtil.toHexString(byteArray0);\n}\n}"
    },
    {
        "original_path": "jcodec_jcodec###jcodec_jcodec/src/test/java/org/jcodec/containers/mp4/SampleOffsetUtilsTest###testGetFirstSampleAtChunk",
        "generated_path": "SampleOffsetUtils_getFirstSampleAtChunk.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.jcodec.containers.mp4;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.io.MockFile;\nimport org.jcodec.containers.mp4.SampleOffsetUtils;\nimport org.jcodec.containers.mp4.boxes.ChunkOffsetsBox;\nimport org.jcodec.containers.mp4.boxes.Header;\nimport org.jcodec.containers.mp4.boxes.SampleSizesBox;\nimport org.jcodec.containers.mp4.boxes.SampleToChunkBox;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class SampleOffsetUtils_getFirstSampleAtChunk extends SampleOffsetUtils_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    long[] longArray0 = new long[6];\n    ChunkOffsetsBox chunkOffsetsBox0 = ChunkOffsetsBox.createChunkOffsetsBox(longArray0);\n    SampleToChunkBox.SampleToChunkEntry[] sampleToChunkBox_SampleToChunkEntryArray0 = new SampleToChunkBox.SampleToChunkEntry[2];\n    SampleToChunkBox.SampleToChunkEntry sampleToChunkBox_SampleToChunkEntry0 = new SampleToChunkBox.SampleToChunkEntry(0L, (-1268), (-1));\n    sampleToChunkBox_SampleToChunkEntryArray0[0] = sampleToChunkBox_SampleToChunkEntry0;\n    sampleToChunkBox_SampleToChunkEntryArray0[1] = sampleToChunkBox_SampleToChunkEntry0;\n    SampleToChunkBox sampleToChunkBox0 = SampleToChunkBox.createSampleToChunkBox(sampleToChunkBox_SampleToChunkEntryArray0);\n    SampleOffsetUtils.getFirstSampleAtChunk((-1), sampleToChunkBox0, chunkOffsetsBox0);\n}\n}"
    },
    {
        "original_path": "jcodec_jcodec###jcodec_jcodec/src/test/java/org/jcodec/containers/mp4/SegmentIndexBoxTest###testParse",
        "generated_path": "SegmentIndexBox_parse.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.jcodec.containers.mp4.boxes;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.nio.Buffer;\nimport java.nio.BufferOverflowException;\nimport java.nio.BufferUnderflowException;\nimport java.nio.ByteBuffer;\nimport java.nio.ByteOrder;\nimport java.nio.ReadOnlyBufferException;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.testdata.EvoSuiteFile;\nimport org.evosuite.runtime.testdata.FileSystemHandling;\nimport org.jcodec.containers.mp4.boxes.AVC1Box;\nimport org.jcodec.containers.mp4.boxes.AudioSampleEntry;\nimport org.jcodec.containers.mp4.boxes.Box;\nimport org.jcodec.containers.mp4.boxes.Header;\nimport org.jcodec.containers.mp4.boxes.SegmentIndexBox;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class SegmentIndexBox_parse extends SegmentIndexBox_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    SegmentIndexBox segmentIndexBox0 = SegmentIndexBox.createSegmentIndexBox();\n    ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(457);\n    byteBuffer0.putChar('O');\n    byte[] byteArray0 = new byte[1];\n    ByteBuffer byteBuffer1 = byteBuffer0.put((int) (byte) 22, (byte) 22);\n    segmentIndexBox0.parse(byteBuffer1);\n    segmentIndexBox0.doWrite(byteBuffer0);\n    segmentIndexBox0.toString();\n    SegmentIndexBox.createSegmentIndexBox();\n}\n}"
    },
    {
        "original_path": "jcodec_jcodec###jcodec_jcodec/src/test/java/org/jcodec/containers/mp4/muxer/MP4MuxerTest###testAddTrackWithId",
        "generated_path": "MP4Muxer_addTrackWithId.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.jcodec.containers.mp4.muxer;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.io.FileDescriptor;\nimport java.net.URI;\nimport java.nio.Buffer;\nimport java.nio.BufferOverflowException;\nimport java.nio.ByteBuffer;\nimport java.nio.ByteOrder;\nimport java.nio.ReadOnlyBufferException;\nimport java.nio.channels.FileChannel;\nimport java.nio.channels.NonWritableChannelException;\nimport java.util.Collection;\nimport java.util.LinkedHashSet;\nimport java.util.LinkedList;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.System;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.mock.java.io.MockFile;\nimport org.evosuite.runtime.mock.java.io.MockFileInputStream;\nimport org.evosuite.runtime.mock.java.io.MockRandomAccessFile;\nimport org.evosuite.runtime.mock.java.net.MockURI;\nimport org.evosuite.runtime.testdata.EvoSuiteFile;\nimport org.evosuite.runtime.testdata.FileSystemHandling;\nimport org.jcodec.common.AudioCodecMeta;\nimport org.jcodec.common.AudioFormat;\nimport org.jcodec.common.Codec;\nimport org.jcodec.common.TrackType;\nimport org.jcodec.common.VideoCodecMeta;\nimport org.jcodec.common.io.ByteBufferSeekableByteChannel;\nimport org.jcodec.common.io.FileChannelWrapper;\nimport org.jcodec.common.io.SeekableByteChannel;\nimport org.jcodec.common.model.ColorSpace;\nimport org.jcodec.common.model.Label;\nimport org.jcodec.common.model.Packet;\nimport org.jcodec.common.model.Rational;\nimport org.jcodec.common.model.Size;\nimport org.jcodec.common.model.TapeTimecode;\nimport org.jcodec.containers.mp4.Brand;\nimport org.jcodec.containers.mp4.MP4TrackType;\nimport org.jcodec.containers.mp4.boxes.Box;\nimport org.jcodec.containers.mp4.boxes.FileTypeBox;\nimport org.jcodec.containers.mp4.boxes.Header;\nimport org.jcodec.containers.mp4.boxes.MetaValue;\nimport org.jcodec.containers.mp4.boxes.MovieBox;\nimport org.jcodec.containers.mp4.boxes.MovieFragmentBox;\nimport org.jcodec.containers.mp4.boxes.PixelAspectExt;\nimport org.jcodec.containers.mp4.boxes.SegmentTypeBox;\nimport org.jcodec.containers.mp4.boxes.TrakBox;\nimport org.jcodec.containers.mp4.boxes.UdtaBox;\nimport org.jcodec.containers.mp4.muxer.AbstractMP4MuxerTrack;\nimport org.jcodec.containers.mp4.muxer.CodecMP4MuxerTrack;\nimport org.jcodec.containers.mp4.muxer.MP4Muxer;\nimport org.jcodec.containers.mp4.muxer.MP4MuxerTrack;\nimport org.jcodec.containers.mp4.muxer.PCMMP4MuxerTrack;\nimport org.jcodec.containers.mp4.muxer.TimecodeMP4MuxerTrack;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class MP4Muxer_addTrackWithId extends MP4Muxer_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test25() throws Throwable {\n    ByteBuffer byteBuffer0 = ByteBuffer.allocate(41);\n    assertNotNull(byteBuffer0);\n    assertEquals(0, byteBuffer0.position());\n    assertEquals(\"java.nio.HeapByteBuffer[pos=0 lim=41 cap=41]\", byteBuffer0.toString());\n    assertEquals(41, byteBuffer0.remaining());\n    assertTrue(byteBuffer0.hasArray());\n    assertFalse(byteBuffer0.isReadOnly());\n    assertTrue(byteBuffer0.hasRemaining());\n    assertEquals(41, byteBuffer0.capacity());\n    assertFalse(byteBuffer0.isDirect());\n    assertEquals(0, byteBuffer0.arrayOffset());\n    assertEquals(41, byteBuffer0.limit());\n    ByteBufferSeekableByteChannel byteBufferSeekableByteChannel0 = ByteBufferSeekableByteChannel.readFromByteBuffer(byteBuffer0);\n    assertNotNull(byteBufferSeekableByteChannel0);\n    assertEquals(0, byteBuffer0.position());\n    assertEquals(\"java.nio.HeapByteBuffer[pos=0 lim=41 cap=41]\", byteBuffer0.toString());\n    assertEquals(41, byteBuffer0.remaining());\n    assertTrue(byteBuffer0.hasArray());\n    assertFalse(byteBuffer0.isReadOnly());\n    assertTrue(byteBuffer0.hasRemaining());\n    assertEquals(41, byteBuffer0.capacity());\n    assertFalse(byteBuffer0.isDirect());\n    assertEquals(0, byteBuffer0.arrayOffset());\n    assertEquals(41, byteBuffer0.limit());\n    assertEquals(41L, byteBufferSeekableByteChannel0.size());\n    assertTrue(byteBufferSeekableByteChannel0.isOpen());\n    SeekableByteChannel seekableByteChannel0 = byteBufferSeekableByteChannel0.setPosition(41);\n    assertNotNull(seekableByteChannel0);\n    assertFalse(byteBuffer0.hasRemaining());\n    assertTrue(byteBuffer0.hasArray());\n    assertEquals(41, byteBuffer0.position());\n    assertEquals(\"java.nio.HeapByteBuffer[pos=41 lim=41 cap=41]\", byteBuffer0.toString());\n    assertFalse(byteBuffer0.isReadOnly());\n    assertEquals(0, byteBuffer0.remaining());\n    assertEquals(41, byteBuffer0.capacity());\n    assertFalse(byteBuffer0.isDirect());\n    assertEquals(0, byteBuffer0.arrayOffset());\n    assertEquals(41, byteBuffer0.limit());\n    assertEquals(41L, byteBufferSeekableByteChannel0.size());\n    assertTrue(byteBufferSeekableByteChannel0.isOpen());\n    assertEquals(41L, seekableByteChannel0.size());\n    assertTrue(seekableByteChannel0.isOpen());\n    assertSame(byteBufferSeekableByteChannel0, seekableByteChannel0);\n    assertSame(seekableByteChannel0, byteBufferSeekableByteChannel0);\n    Brand brand0 = Brand.MP4;\n    assertNotNull(brand0);\n    MP4Muxer mP4Muxer0 = MP4Muxer.createMP4Muxer(seekableByteChannel0, brand0);\n    assertNotNull(mP4Muxer0);\n    assertFalse(byteBuffer0.hasRemaining());\n    assertTrue(byteBuffer0.hasArray());\n    assertEquals(41, byteBuffer0.position());\n    assertEquals(\"java.nio.HeapByteBuffer[pos=41 lim=41 cap=41]\", byteBuffer0.toString());\n    assertFalse(byteBuffer0.isReadOnly());\n    assertEquals(0, byteBuffer0.remaining());\n    assertEquals(41, byteBuffer0.capacity());\n    assertFalse(byteBuffer0.isDirect());\n    assertEquals(0, byteBuffer0.arrayOffset());\n    assertEquals(41, byteBuffer0.limit());\n    assertEquals(41L, byteBufferSeekableByteChannel0.size());\n    assertTrue(byteBufferSeekableByteChannel0.isOpen());\n    assertEquals(41L, seekableByteChannel0.size());\n    assertTrue(seekableByteChannel0.isOpen());\n    assertEquals(1, mP4Muxer0.getNextTrackId());\n    assertSame(byteBufferSeekableByteChannel0, seekableByteChannel0);\n    assertSame(seekableByteChannel0, byteBufferSeekableByteChannel0);\n    FileTypeBox fileTypeBox0 = brand0.getFileTypeBox();\n    assertEquals(134217728, Box.MAX_BOX_SIZE);\n    assertNotNull(fileTypeBox0);\n    assertEquals(\"isom\", fileTypeBox0.getMajorBrand());\n    assertEquals(\"ftyp\", fileTypeBox0.fourcc());\n    assertEquals(\"ftyp\", fileTypeBox0.getFourcc());\n    MP4Muxer mP4Muxer1 = new MP4Muxer(byteBufferSeekableByteChannel0, fileTypeBox0);\n    assertFalse(mP4Muxer1.equals((Object) mP4Muxer0));\n    assertEquals(134217728, Box.MAX_BOX_SIZE);\n    assertNotNull(mP4Muxer1);\n    assertFalse(byteBuffer0.hasRemaining());\n    assertTrue(byteBuffer0.hasArray());\n    assertEquals(41, byteBuffer0.position());\n    assertEquals(\"java.nio.HeapByteBuffer[pos=41 lim=41 cap=41]\", byteBuffer0.toString());\n    assertFalse(byteBuffer0.isReadOnly());\n    assertEquals(0, byteBuffer0.remaining());\n    assertEquals(41, byteBuffer0.capacity());\n    assertFalse(byteBuffer0.isDirect());\n    assertEquals(0, byteBuffer0.arrayOffset());\n    assertEquals(41, byteBuffer0.limit());\n    assertEquals(41L, byteBufferSeekableByteChannel0.size());\n    assertTrue(byteBufferSeekableByteChannel0.isOpen());\n    assertEquals(\"isom\", fileTypeBox0.getMajorBrand());\n    assertEquals(\"ftyp\", fileTypeBox0.fourcc());\n    assertEquals(\"ftyp\", fileTypeBox0.getFourcc());\n    assertEquals(1, mP4Muxer1.getNextTrackId());\n    TimecodeMP4MuxerTrack timecodeMP4MuxerTrack0 = mP4Muxer1.addTimecodeTrack();\n    assertFalse(mP4Muxer1.equals((Object) mP4Muxer0));\n    assertEquals(134217728, Box.MAX_BOX_SIZE);\n    assertNotNull(timecodeMP4MuxerTrack0);\n    assertFalse(byteBuffer0.hasRemaining());\n    assertTrue(byteBuffer0.hasArray());\n    assertEquals(41, byteBuffer0.position());\n    assertEquals(\"java.nio.HeapByteBuffer[pos=41 lim=41 cap=41]\", byteBuffer0.toString());\n    assertFalse(byteBuffer0.isReadOnly());\n    assertEquals(0, byteBuffer0.remaining());\n    assertEquals(41, byteBuffer0.capacity());\n    assertFalse(byteBuffer0.isDirect());\n    assertEquals(0, byteBuffer0.arrayOffset());\n    assertEquals(41, byteBuffer0.limit());\n    assertEquals(41L, byteBufferSeekableByteChannel0.size());\n    assertTrue(byteBufferSeekableByteChannel0.isOpen());\n    assertEquals(\"isom\", fileTypeBox0.getMajorBrand());\n    assertEquals(\"ftyp\", fileTypeBox0.fourcc());\n    assertEquals(\"ftyp\", fileTypeBox0.getFourcc());\n    assertEquals(2, mP4Muxer1.getNextTrackId());\n    assertEquals(1, timecodeMP4MuxerTrack0.getTrackId());\n    assertFalse(timecodeMP4MuxerTrack0.isAudio());\n    assertFalse(timecodeMP4MuxerTrack0.isVideo());\n    assertTrue(timecodeMP4MuxerTrack0.isTimecode());\n    assertEquals(0L, timecodeMP4MuxerTrack0.getTrackTotalDuration());\n    assertSame(byteBufferSeekableByteChannel0, seekableByteChannel0);\n    assertNotSame(mP4Muxer1, mP4Muxer0);\n    TrakBox trakBox0 = new TrakBox(fileTypeBox0.header);\n    assertEquals(134217728, Box.MAX_BOX_SIZE);\n    assertEquals(134217728, Box.MAX_BOX_SIZE);\n    assertNotNull(trakBox0);\n    assertEquals(\"isom\", fileTypeBox0.getMajorBrand());\n    assertEquals(\"ftyp\", fileTypeBox0.fourcc());\n    assertEquals(\"ftyp\", fileTypeBox0.getFourcc());\n    assertEquals(\"ftyp\", trakBox0.getFourcc());\n    assertEquals(\"trak\", trakBox0.fourcc());\n    timecodeMP4MuxerTrack0.tapt(trakBox0);\n    assertFalse(mP4Muxer1.equals((Object) mP4Muxer0));\n    assertEquals(134217728, Box.MAX_BOX_SIZE);\n    assertEquals(134217728, Box.MAX_BOX_SIZE);\n    assertFalse(byteBuffer0.hasRemaining());\n    assertTrue(byteBuffer0.hasArray());\n    assertEquals(41, byteBuffer0.position());\n    assertEquals(\"java.nio.HeapByteBuffer[pos=41 lim=41 cap=41]\", byteBuffer0.toString());\n    assertFalse(byteBuffer0.isReadOnly());\n    assertEquals(0, byteBuffer0.remaining());\n    assertEquals(41, byteBuffer0.capacity());\n    assertFalse(byteBuffer0.isDirect());\n    assertEquals(0, byteBuffer0.arrayOffset());\n    assertEquals(41, byteBuffer0.limit());\n    assertEquals(41L, byteBufferSeekableByteChannel0.size());\n    assertTrue(byteBufferSeekableByteChannel0.isOpen());\n    assertEquals(\"isom\", fileTypeBox0.getMajorBrand());\n    assertEquals(\"ftyp\", fileTypeBox0.fourcc());\n    assertEquals(\"ftyp\", fileTypeBox0.getFourcc());\n    assertEquals(2, mP4Muxer1.getNextTrackId());\n    assertEquals(1, timecodeMP4MuxerTrack0.getTrackId());\n    assertFalse(timecodeMP4MuxerTrack0.isAudio());\n    assertFalse(timecodeMP4MuxerTrack0.isVideo());\n    assertTrue(timecodeMP4MuxerTrack0.isTimecode());\n    assertEquals(0L, timecodeMP4MuxerTrack0.getTrackTotalDuration());\n    assertEquals(\"ftyp\", trakBox0.getFourcc());\n    assertEquals(\"trak\", trakBox0.fourcc());\n    assertSame(byteBufferSeekableByteChannel0, seekableByteChannel0);\n    assertNotSame(mP4Muxer1, mP4Muxer0);\n    TimecodeMP4MuxerTrack timecodeMP4MuxerTrack1 = mP4Muxer0.addTrack(timecodeMP4MuxerTrack0);\n    assertFalse(mP4Muxer0.equals((Object) mP4Muxer1));\n    assertFalse(mP4Muxer1.equals((Object) mP4Muxer0));\n    assertEquals(134217728, Box.MAX_BOX_SIZE);\n    assertNotNull(timecodeMP4MuxerTrack1);\n    assertFalse(byteBuffer0.hasRemaining());\n    assertTrue(byteBuffer0.hasArray());\n    assertEquals(41, byteBuffer0.position());\n    assertEquals(\"java.nio.HeapByteBuffer[pos=41 lim=41 cap=41]\", byteBuffer0.toString());\n    assertFalse(byteBuffer0.isReadOnly());\n    assertEquals(0, byteBuffer0.remaining());\n    assertEquals(41, byteBuffer0.capacity());\n    assertFalse(byteBuffer0.isDirect());\n    assertEquals(0, byteBuffer0.arrayOffset());\n    assertEquals(41, byteBuffer0.limit());\n    assertEquals(41L, byteBufferSeekableByteChannel0.size());\n    assertTrue(byteBufferSeekableByteChannel0.isOpen());\n    assertEquals(41L, seekableByteChannel0.size());\n    assertTrue(seekableByteChannel0.isOpen());\n    assertEquals(2, mP4Muxer0.getNextTrackId());\n    assertEquals(\"isom\", fileTypeBox0.getMajorBrand());\n    assertEquals(\"ftyp\", fileTypeBox0.fourcc());\n    assertEquals(\"ftyp\", fileTypeBox0.getFourcc());\n    assertEquals(2, mP4Muxer1.getNextTrackId());\n    assertEquals(1, timecodeMP4MuxerTrack0.getTrackId());\n    assertFalse(timecodeMP4MuxerTrack0.isAudio());\n    assertFalse(timecodeMP4MuxerTrack0.isVideo());\n    assertTrue(timecodeMP4MuxerTrack0.isTimecode());\n    assertEquals(0L, timecodeMP4MuxerTrack0.getTrackTotalDuration());\n    assertFalse(timecodeMP4MuxerTrack1.isVideo());\n    assertTrue(timecodeMP4MuxerTrack1.isTimecode());\n    assertEquals(1, timecodeMP4MuxerTrack1.getTrackId());\n    assertFalse(timecodeMP4MuxerTrack1.isAudio());\n    assertEquals(0L, timecodeMP4MuxerTrack1.getTrackTotalDuration());\n    assertSame(byteBufferSeekableByteChannel0, seekableByteChannel0);\n    assertSame(seekableByteChannel0, byteBufferSeekableByteChannel0);\n    assertNotSame(mP4Muxer0, mP4Muxer1);\n    assertNotSame(mP4Muxer1, mP4Muxer0);\n    assertSame(timecodeMP4MuxerTrack0, timecodeMP4MuxerTrack1);\n    assertSame(timecodeMP4MuxerTrack1, timecodeMP4MuxerTrack0);\n    AudioFormat audioFormat0 = AudioFormat.MONO_44K_S24_BE;\n    assertNotNull(audioFormat0);\n    assertEquals(44100, audioFormat0.getSampleRate());\n    assertEquals((short) 3, audioFormat0.getFrameSize());\n    assertEquals(44100, audioFormat0.getFrameRate());\n    assertTrue(audioFormat0.isBigEndian());\n    assertEquals(24, audioFormat0.getSampleSizeInBits());\n    assertEquals(1, audioFormat0.getChannels());\n    assertTrue(audioFormat0.isSigned());\n    PCMMP4MuxerTrack pCMMP4MuxerTrack0 = mP4Muxer0.addPCMAudioTrack(audioFormat0);\n    assertFalse(mP4Muxer0.equals((Object) mP4Muxer1));\n    assertNotNull(pCMMP4MuxerTrack0);\n    assertFalse(byteBuffer0.hasRemaining());\n    assertTrue(byteBuffer0.hasArray());\n    assertEquals(41, byteBuffer0.position());\n    assertEquals(\"java.nio.HeapByteBuffer[pos=41 lim=41 cap=41]\", byteBuffer0.toString());\n    assertFalse(byteBuffer0.isReadOnly());\n    assertEquals(0, byteBuffer0.remaining());\n    assertEquals(41, byteBuffer0.capacity());\n    assertFalse(byteBuffer0.isDirect());\n    assertEquals(0, byteBuffer0.arrayOffset());\n    assertEquals(41, byteBuffer0.limit());\n    assertEquals(41L, byteBufferSeekableByteChannel0.size());\n    assertTrue(byteBufferSeekableByteChannel0.isOpen());\n    assertEquals(41L, seekableByteChannel0.size());\n    assertTrue(seekableByteChannel0.isOpen());\n    assertEquals(3, mP4Muxer0.getNextTrackId());\n    assertEquals(44100, audioFormat0.getSampleRate());\n    assertEquals((short) 3, audioFormat0.getFrameSize());\n    assertEquals(44100, audioFormat0.getFrameRate());\n    assertTrue(audioFormat0.isBigEndian());\n    assertEquals(24, audioFormat0.getSampleSizeInBits());\n    assertEquals(1, audioFormat0.getChannels());\n    assertTrue(audioFormat0.isSigned());\n    assertEquals(0L, pCMMP4MuxerTrack0.getTrackTotalDuration());\n    assertEquals(2, pCMMP4MuxerTrack0.getTrackId());\n    assertFalse(pCMMP4MuxerTrack0.isTimecode());\n    assertFalse(pCMMP4MuxerTrack0.isVideo());\n    assertTrue(pCMMP4MuxerTrack0.isAudio());\n    assertSame(byteBufferSeekableByteChannel0, seekableByteChannel0);\n    assertSame(seekableByteChannel0, byteBufferSeekableByteChannel0);\n    assertNotSame(mP4Muxer0, mP4Muxer1);\n    MP4Muxer mP4Muxer2 = MP4Muxer.createMP4MuxerToChannel(seekableByteChannel0);\n    assertFalse(mP4Muxer2.equals((Object) mP4Muxer1));\n    assertFalse(mP4Muxer2.equals((Object) mP4Muxer0));\n    assertNotNull(mP4Muxer2);\n    assertFalse(byteBuffer0.hasRemaining());\n    assertTrue(byteBuffer0.hasArray());\n    assertEquals(41, byteBuffer0.position());\n    assertEquals(\"java.nio.HeapByteBuffer[pos=41 lim=41 cap=41]\", byteBuffer0.toString());\n    assertFalse(byteBuffer0.isReadOnly());\n    assertEquals(0, byteBuffer0.remaining());\n    assertEquals(41, byteBuffer0.capacity());\n    assertFalse(byteBuffer0.isDirect());\n    assertEquals(0, byteBuffer0.arrayOffset());\n    assertEquals(41, byteBuffer0.limit());\n    assertEquals(41L, byteBufferSeekableByteChannel0.size());\n    assertTrue(byteBufferSeekableByteChannel0.isOpen());\n    assertEquals(41L, seekableByteChannel0.size());\n    assertTrue(seekableByteChannel0.isOpen());\n    assertEquals(1, mP4Muxer2.getNextTrackId());\n    assertSame(byteBufferSeekableByteChannel0, seekableByteChannel0);\n    assertSame(seekableByteChannel0, byteBufferSeekableByteChannel0);\n    assertNotSame(mP4Muxer2, mP4Muxer1);\n    assertNotSame(mP4Muxer2, mP4Muxer0);\n    mP4Muxer0.out = (SeekableByteChannel) byteBufferSeekableByteChannel0;\n    assertFalse(byteBuffer0.hasRemaining());\n    assertTrue(byteBuffer0.hasArray());\n    assertEquals(41, byteBuffer0.position());\n    assertEquals(\"java.nio.HeapByteBuffer[pos=41 lim=41 cap=41]\", byteBuffer0.toString());\n    assertFalse(byteBuffer0.isReadOnly());\n    assertEquals(0, byteBuffer0.remaining());\n    assertEquals(41, byteBuffer0.capacity());\n    assertFalse(byteBuffer0.isDirect());\n    assertEquals(0, byteBuffer0.arrayOffset());\n    assertEquals(41, byteBuffer0.limit());\n    assertEquals(41L, byteBufferSeekableByteChannel0.size());\n    assertTrue(byteBufferSeekableByteChannel0.isOpen());\n    assertEquals(41L, seekableByteChannel0.size());\n    assertTrue(seekableByteChannel0.isOpen());\n    assertEquals(3, mP4Muxer0.getNextTrackId());\n    assertEquals(41L, mP4Muxer0.out.size());\n    assertTrue(mP4Muxer0.out.isOpen());\n    MP4Muxer mP4Muxer3 = MP4Muxer.createMP4MuxerToChannel(mP4Muxer0.out);\n    assertFalse(mP4Muxer0.equals((Object) mP4Muxer2));\n    assertFalse(mP4Muxer0.equals((Object) mP4Muxer1));\n    assertFalse(mP4Muxer3.equals((Object) mP4Muxer1));\n    assertFalse(mP4Muxer3.equals((Object) mP4Muxer2));\n    assertFalse(mP4Muxer3.equals((Object) mP4Muxer0));\n    assertNotNull(mP4Muxer3);\n    assertFalse(byteBuffer0.hasRemaining());\n    assertTrue(byteBuffer0.hasArray());\n    assertEquals(41, byteBuffer0.position());\n    assertEquals(\"java.nio.HeapByteBuffer[pos=41 lim=41 cap=41]\", byteBuffer0.toString());\n    assertFalse(byteBuffer0.isReadOnly());\n    assertEquals(0, byteBuffer0.remaining());\n    assertEquals(41, byteBuffer0.capacity());\n    assertFalse(byteBuffer0.isDirect());\n    assertEquals(0, byteBuffer0.arrayOffset());\n    assertEquals(41, byteBuffer0.limit());\n    assertEquals(41L, byteBufferSeekableByteChannel0.size());\n    assertTrue(byteBufferSeekableByteChannel0.isOpen());\n    assertEquals(41L, seekableByteChannel0.size());\n    assertTrue(seekableByteChannel0.isOpen());\n    assertEquals(3, mP4Muxer0.getNextTrackId());\n    assertEquals(41L, mP4Muxer0.out.size());\n    assertTrue(mP4Muxer0.out.isOpen());\n    assertEquals(1, mP4Muxer3.getNextTrackId());\n    assertSame(byteBufferSeekableByteChannel0, seekableByteChannel0);\n    assertSame(seekableByteChannel0, byteBufferSeekableByteChannel0);\n    assertNotSame(mP4Muxer0, mP4Muxer2);\n    assertNotSame(mP4Muxer0, mP4Muxer1);\n    assertNotSame(mP4Muxer0, mP4Muxer3);\n    assertNotSame(mP4Muxer3, mP4Muxer1);\n    assertNotSame(mP4Muxer3, mP4Muxer2);\n    assertNotSame(mP4Muxer3, mP4Muxer0);\n    AbstractMP4MuxerTrack abstractMP4MuxerTrack0 = mP4Muxer3.getVideoTrack();\n    assertFalse(mP4Muxer0.equals((Object) mP4Muxer2));\n    assertFalse(mP4Muxer0.equals((Object) mP4Muxer1));\n    assertFalse(mP4Muxer0.equals((Object) mP4Muxer3));\n    assertFalse(mP4Muxer3.equals((Object) mP4Muxer1));\n    assertFalse(mP4Muxer3.equals((Object) mP4Muxer2));\n    assertFalse(mP4Muxer3.equals((Object) mP4Muxer0));\n    assertNull(abstractMP4MuxerTrack0);\n    assertFalse(byteBuffer0.hasRemaining());\n    assertTrue(byteBuffer0.hasArray());\n    assertEquals(41, byteBuffer0.position());\n    assertEquals(\"java.nio.HeapByteBuffer[pos=41 lim=41 cap=41]\", byteBuffer0.toString());\n    assertFalse(byteBuffer0.isReadOnly());\n    assertEquals(0, byteBuffer0.remaining());\n    assertEquals(41, byteBuffer0.capacity());\n    assertFalse(byteBuffer0.isDirect());\n    assertEquals(0, byteBuffer0.arrayOffset());\n    assertEquals(41, byteBuffer0.limit());\n    assertEquals(41L, byteBufferSeekableByteChannel0.size());\n    assertTrue(byteBufferSeekableByteChannel0.isOpen());\n    assertEquals(41L, seekableByteChannel0.size());\n    assertTrue(seekableByteChannel0.isOpen());\n    assertEquals(3, mP4Muxer0.getNextTrackId());\n    assertEquals(41L, mP4Muxer0.out.size());\n    assertTrue(mP4Muxer0.out.isOpen());\n    assertEquals(1, mP4Muxer3.getNextTrackId());\n    assertSame(byteBufferSeekableByteChannel0, seekableByteChannel0);\n    assertSame(seekableByteChannel0, byteBufferSeekableByteChannel0);\n    assertNotSame(mP4Muxer0, mP4Muxer2);\n    assertNotSame(mP4Muxer0, mP4Muxer1);\n    assertNotSame(mP4Muxer0, mP4Muxer3);\n    assertNotSame(mP4Muxer3, mP4Muxer1);\n    assertNotSame(mP4Muxer3, mP4Muxer2);\n    assertNotSame(mP4Muxer3, mP4Muxer0);\n    AbstractMP4MuxerTrack abstractMP4MuxerTrack1 = mP4Muxer1.getTimecodeTrack();\n    assertFalse(mP4Muxer1.equals((Object) mP4Muxer2));\n    assertFalse(mP4Muxer1.equals((Object) mP4Muxer3));\n    assertFalse(mP4Muxer1.equals((Object) mP4Muxer0));\n    assertEquals(134217728, Box.MAX_BOX_SIZE);\n    assertNotNull(abstractMP4MuxerTrack1);\n    assertFalse(byteBuffer0.hasRemaining());\n    assertTrue(byteBuffer0.hasArray());\n    assertEquals(41, byteBuffer0.position());\n    assertEquals(\"java.nio.HeapByteBuffer[pos=41 lim=41 cap=41]\", byteBuffer0.toString());\n    assertFalse(byteBuffer0.isReadOnly());\n    assertEquals(0, byteBuffer0.remaining());\n    assertEquals(41, byteBuffer0.capacity());\n    assertFalse(byteBuffer0.isDirect());\n    assertEquals(0, byteBuffer0.arrayOffset());\n    assertEquals(41, byteBuffer0.limit());\n    assertTrue(abstractMP4MuxerTrack1.isTimecode());\n    assertEquals(1, abstractMP4MuxerTrack1.getTrackId());\n    assertFalse(abstractMP4MuxerTrack1.isAudio());\n    assertFalse(abstractMP4MuxerTrack1.isVideo());\n    assertEquals(0L, abstractMP4MuxerTrack1.getTrackTotalDuration());\n    assertEquals(41L, byteBufferSeekableByteChannel0.size());\n    assertTrue(byteBufferSeekableByteChannel0.isOpen());\n    assertEquals(\"isom\", fileTypeBox0.getMajorBrand());\n    assertEquals(\"ftyp\", fileTypeBox0.fourcc());\n    assertEquals(\"ftyp\", fileTypeBox0.getFourcc());\n    assertEquals(2, mP4Muxer1.getNextTrackId());\n    assertSame(abstractMP4MuxerTrack1, timecodeMP4MuxerTrack0);\n    assertSame(abstractMP4MuxerTrack1, timecodeMP4MuxerTrack1);\n    assertSame(byteBufferSeekableByteChannel0, seekableByteChannel0);\n    assertNotSame(mP4Muxer1, mP4Muxer2);\n    assertNotSame(mP4Muxer1, mP4Muxer3);\n    assertNotSame(mP4Muxer1, mP4Muxer0);\n    String string0 = \"clcp\";\n    int int0 = (-819);\n    AudioFormat audioFormat1 = AudioFormat.NCH_44K_S24_LE(int0);\n    assertFalse(audioFormat1.equals((Object) audioFormat0));\n    assertNotNull(audioFormat1);\n    assertEquals(44100, audioFormat1.getSampleRate());\n    assertEquals((short) (-2457), audioFormat1.getFrameSize());\n    assertEquals((-819), audioFormat1.getChannels());\n    assertEquals(44100, audioFormat1.getFrameRate());\n    assertEquals(24, audioFormat1.getSampleSizeInBits());\n    assertFalse(audioFormat1.isBigEndian());\n    assertTrue(audioFormat1.isSigned());\n    assertNotSame(audioFormat1, audioFormat0);\n    MP4MuxerTrack mP4MuxerTrack0 = mP4Muxer0.addMetaTrack(string0, string0);\n    assertFalse(mP4Muxer0.equals((Object) mP4Muxer2));\n    assertFalse(mP4Muxer0.equals((Object) mP4Muxer1));\n    assertFalse(mP4Muxer0.equals((Object) mP4Muxer3));\n    assertNotNull(mP4MuxerTrack0);\n    assertFalse(byteBuffer0.hasRemaining());\n    assertTrue(byteBuffer0.hasArray());\n    assertEquals(41, byteBuffer0.position());\n    assertEquals(\"java.nio.HeapByteBuffer[pos=41 lim=41 cap=41]\", byteBuffer0.toString());\n    assertFalse(byteBuffer0.isReadOnly());\n    assertEquals(0, byteBuffer0.remaining());\n    assertEquals(41, byteBuffer0.capacity());\n    assertFalse(byteBuffer0.isDirect());\n    assertEquals(0, byteBuffer0.arrayOffset());\n    assertEquals(41, byteBuffer0.limit());\n    assertEquals(41L, byteBufferSeekableByteChannel0.size());\n    assertTrue(byteBufferSeekableByteChannel0.isOpen());\n    assertEquals(41L, seekableByteChannel0.size());\n    assertTrue(seekableByteChannel0.isOpen());\n    assertEquals(4, mP4Muxer0.getNextTrackId());\n    assertEquals(0L, mP4MuxerTrack0.getTrackTotalDuration());\n    assertFalse(mP4MuxerTrack0.isTimecode());\n    assertFalse(mP4MuxerTrack0.isVideo());\n    assertEquals(3, mP4MuxerTrack0.getTrackId());\n    assertFalse(mP4MuxerTrack0.isAudio());\n    assertSame(byteBufferSeekableByteChannel0, seekableByteChannel0);\n    assertSame(seekableByteChannel0, byteBufferSeekableByteChannel0);\n    assertNotSame(mP4Muxer0, mP4Muxer2);\n    assertNotSame(mP4Muxer0, mP4Muxer1);\n    assertNotSame(mP4Muxer0, mP4Muxer3);\n    MovieBox movieBox0 = mP4Muxer1.finalizeHeader();\n    assertFalse(mP4Muxer1.equals((Object) mP4Muxer2));\n    assertFalse(mP4Muxer1.equals((Object) mP4Muxer3));\n    assertFalse(mP4Muxer1.equals((Object) mP4Muxer0));\n    assertEquals(134217728, Box.MAX_BOX_SIZE);\n    assertEquals(134217728, Box.MAX_BOX_SIZE);\n    assertNotNull(movieBox0);\n    assertFalse(byteBuffer0.hasRemaining());\n    assertTrue(byteBuffer0.hasArray());\n    assertEquals(41, byteBuffer0.position());\n    assertEquals(\"java.nio.HeapByteBuffer[pos=41 lim=41 cap=41]\", byteBuffer0.toString());\n    assertFalse(byteBuffer0.isReadOnly());\n    assertEquals(0, byteBuffer0.remaining());\n    assertEquals(41, byteBuffer0.capacity());\n    assertFalse(byteBuffer0.isDirect());\n    assertEquals(0, byteBuffer0.arrayOffset());\n    assertEquals(41, byteBuffer0.limit());\n    assertEquals(41L, byteBufferSeekableByteChannel0.size());\n    assertTrue(byteBufferSeekableByteChannel0.isOpen());\n    assertEquals(\"isom\", fileTypeBox0.getMajorBrand());\n    assertEquals(\"ftyp\", fileTypeBox0.fourcc());\n    assertEquals(\"ftyp\", fileTypeBox0.getFourcc());\n    assertEquals(\"moov\", movieBox0.fourcc());\n    assertEquals(\"moov\", movieBox0.getFourcc());\n    assertEquals(2, mP4Muxer1.getNextTrackId());\n    assertSame(byteBufferSeekableByteChannel0, seekableByteChannel0);\n    assertNotSame(mP4Muxer1, mP4Muxer2);\n    assertNotSame(mP4Muxer1, mP4Muxer3);\n    assertNotSame(mP4Muxer1, mP4Muxer0);\n    Buffer buffer0 = byteBuffer0.flip();\n    assertNotNull(buffer0);\n    assertEquals(0, byteBuffer0.position());\n    assertEquals(\"java.nio.HeapByteBuffer[pos=0 lim=41 cap=41]\", byteBuffer0.toString());\n    assertEquals(41, byteBuffer0.remaining());\n    assertTrue(byteBuffer0.hasArray());\n    assertFalse(byteBuffer0.isReadOnly());\n    assertTrue(byteBuffer0.hasRemaining());\n    assertEquals(41, byteBuffer0.capacity());\n    assertFalse(byteBuffer0.isDirect());\n    assertEquals(0, byteBuffer0.arrayOffset());\n    assertEquals(41, byteBuffer0.limit());\n    assertFalse(buffer0.isReadOnly());\n    assertEquals(0, buffer0.arrayOffset());\n    assertTrue(buffer0.hasRemaining());\n    assertEquals(41, buffer0.limit());\n    assertEquals(41, buffer0.capacity());\n    assertEquals(0, buffer0.position());\n    assertTrue(buffer0.hasArray());\n    assertFalse(buffer0.isDirect());\n    assertEquals(41, buffer0.remaining());\n    fileTypeBox0.write(byteBuffer0);\n    assertEquals(134217728, Box.MAX_BOX_SIZE);\n    assertEquals(\"java.nio.HeapByteBuffer[pos=32 lim=41 cap=41]\", byteBuffer0.toString());\n    assertEquals(32, byteBuffer0.position());\n    assertEquals(9, byteBuffer0.remaining());\n    assertTrue(byteBuffer0.hasArray());\n    assertFalse(byteBuffer0.isReadOnly());\n    assertTrue(byteBuffer0.hasRemaining());\n    assertEquals(41, byteBuffer0.capacity());\n    assertFalse(byteBuffer0.isDirect());\n    assertEquals(0, byteBuffer0.arrayOffset());\n    assertEquals(41, byteBuffer0.limit());\n    assertEquals(\"isom\", fileTypeBox0.getMajorBrand());\n    assertEquals(\"ftyp\", fileTypeBox0.fourcc());\n    assertEquals(\"ftyp\", fileTypeBox0.getFourcc());\n    MP4MuxerTrack mP4MuxerTrack1 = mP4Muxer1.addMetaTrack(string0, string0);\n    assertFalse(mP4Muxer1.equals((Object) mP4Muxer2));\n    assertFalse(mP4Muxer1.equals((Object) mP4Muxer3));\n    assertFalse(mP4Muxer1.equals((Object) mP4Muxer0));\n    assertFalse(mP4MuxerTrack1.equals((Object) mP4MuxerTrack0));\n    assertEquals(134217728, Box.MAX_BOX_SIZE);\n    assertNotNull(mP4MuxerTrack1);\n    assertEquals(\"java.nio.HeapByteBuffer[pos=32 lim=41 cap=41]\", byteBuffer0.toString());\n    assertEquals(32, byteBuffer0.position());\n    assertEquals(9, byteBuffer0.remaining());\n    assertTrue(byteBuffer0.hasArray());\n    assertFalse(byteBuffer0.isReadOnly());\n    assertTrue(byteBuffer0.hasRemaining());\n    assertEquals(41, byteBuffer0.capacity());\n    assertFalse(byteBuffer0.isDirect());\n    assertEquals(0, byteBuffer0.arrayOffset());\n    assertEquals(41, byteBuffer0.limit());\n    assertEquals(41L, byteBufferSeekableByteChannel0.size());\n    assertTrue(byteBufferSeekableByteChannel0.isOpen());\n    assertEquals(\"isom\", fileTypeBox0.getMajorBrand());\n    assertEquals(\"ftyp\", fileTypeBox0.fourcc());\n    assertEquals(\"ftyp\", fileTypeBox0.getFourcc());\n    assertEquals(3, mP4Muxer1.getNextTrackId());\n    assertFalse(mP4MuxerTrack1.isAudio());\n    assertEquals(2, mP4MuxerTrack1.getTrackId());\n    assertFalse(mP4MuxerTrack1.isTimecode());\n    assertEquals(0L, mP4MuxerTrack1.getTrackTotalDuration());\n    assertFalse(mP4MuxerTrack1.isVideo());\n    assertSame(byteBufferSeekableByteChannel0, seekableByteChannel0);\n    assertNotSame(mP4Muxer1, mP4Muxer2);\n    assertNotSame(mP4Muxer1, mP4Muxer3);\n    assertNotSame(mP4Muxer1, mP4Muxer0);\n    assertNotSame(mP4MuxerTrack1, mP4MuxerTrack0);\n    MovieBox movieBox1 = new MovieBox(movieBox0.header);\n    assertFalse(mP4Muxer1.equals((Object) mP4Muxer2));\n    assertFalse(mP4Muxer1.equals((Object) mP4Muxer3));\n    assertFalse(mP4Muxer1.equals((Object) mP4Muxer0));\n    assertFalse(movieBox1.equals((Object) movieBox0));\n    assertEquals(134217728, Box.MAX_BOX_SIZE);\n    assertEquals(134217728, Box.MAX_BOX_SIZE);\n    assertEquals(134217728, Box.MAX_BOX_SIZE);\n    assertNotNull(movieBox1);\n    assertEquals(\"java.nio.HeapByteBuffer[pos=32 lim=41 cap=41]\", byteBuffer0.toString());\n    assertEquals(32, byteBuffer0.position());\n    assertEquals(9, byteBuffer0.remaining());\n    assertTrue(byteBuffer0.hasArray());\n    assertFalse(byteBuffer0.isReadOnly());\n    assertTrue(byteBuffer0.hasRemaining());\n    assertEquals(41, byteBuffer0.capacity());\n    assertFalse(byteBuffer0.isDirect());\n    assertEquals(0, byteBuffer0.arrayOffset());\n    assertEquals(41, byteBuffer0.limit());\n    assertEquals(41L, byteBufferSeekableByteChannel0.size());\n    assertTrue(byteBufferSeekableByteChannel0.isOpen());\n    assertEquals(\"isom\", fileTypeBox0.getMajorBrand());\n    assertEquals(\"ftyp\", fileTypeBox0.fourcc());\n    assertEquals(\"ftyp\", fileTypeBox0.getFourcc());\n    assertEquals(\"moov\", movieBox0.fourcc());\n    assertEquals(\"moov\", movieBox0.getFourcc());\n    assertEquals(3, mP4Muxer1.getNextTrackId());\n    assertEquals(\"moov\", movieBox1.getFourcc());\n    assertEquals(\"moov\", movieBox1.fourcc());\n    PCMMP4MuxerTrack pCMMP4MuxerTrack1 = mP4Muxer0.addPCMAudioTrack(audioFormat0);\n    assertFalse(mP4Muxer0.equals((Object) mP4Muxer2));\n    assertFalse(mP4Muxer0.equals((Object) mP4Muxer1));\n    assertFalse(mP4Muxer0.equals((Object) mP4Muxer3));\n    assertFalse(pCMMP4MuxerTrack1.equals((Object) pCMMP4MuxerTrack0));\n    assertFalse(audioFormat0.equals((Object) audioFormat1));\n    assertNotNull(pCMMP4MuxerTrack1);\n    assertEquals(\"java.nio.HeapByteBuffer[pos=32 lim=41 cap=41]\", byteBuffer0.toString());\n    assertEquals(32, byteBuffer0.position());\n    assertEquals(9, byteBuffer0.remaining());\n    assertTrue(byteBuffer0.hasArray());\n    assertFalse(byteBuffer0.isReadOnly());\n    assertTrue(byteBuffer0.hasRemaining());\n    assertEquals(41, byteBuffer0.capacity());\n    assertFalse(byteBuffer0.isDirect());\n    assertEquals(0, byteBuffer0.arrayOffset());\n    assertEquals(41, byteBuffer0.limit());\n    assertEquals(41L, byteBufferSeekableByteChannel0.size());\n    assertTrue(byteBufferSeekableByteChannel0.isOpen());\n    assertEquals(41L, seekableByteChannel0.size());\n    assertTrue(seekableByteChannel0.isOpen());\n    assertEquals(5, mP4Muxer0.getNextTrackId());\n    assertEquals(4, pCMMP4MuxerTrack1.getTrackId());\n    assertFalse(pCMMP4MuxerTrack1.isVideo());\n    assertFalse(pCMMP4MuxerTrack1.isTimecode());\n    assertEquals(0L, pCMMP4MuxerTrack1.getTrackTotalDuration());\n    assertTrue(pCMMP4MuxerTrack1.isAudio());\n    assertEquals(44100, audioFormat0.getSampleRate());\n    assertEquals((short) 3, audioFormat0.getFrameSize());\n    assertEquals(44100, audioFormat0.getFrameRate());\n    assertTrue(audioFormat0.isBigEndian());\n    assertEquals(24, audioFormat0.getSampleSizeInBits());\n    assertEquals(1, audioFormat0.getChannels());\n    assertTrue(audioFormat0.isSigned());\n    assertSame(byteBufferSeekableByteChannel0, seekableByteChannel0);\n    assertSame(seekableByteChannel0, byteBufferSeekableByteChannel0);\n    assertNotSame(mP4Muxer0, mP4Muxer2);\n    assertNotSame(mP4Muxer0, mP4Muxer1);\n    assertNotSame(mP4Muxer0, mP4Muxer3);\n    assertNotSame(pCMMP4MuxerTrack1, pCMMP4MuxerTrack0);\n    assertNotSame(audioFormat0, audioFormat1);\n    MP4Muxer mP4Muxer4 = MP4Muxer.createMP4MuxerToChannel(mP4Muxer0.out);\n    assertFalse(mP4Muxer0.equals((Object) mP4Muxer2));\n    assertFalse(mP4Muxer0.equals((Object) mP4Muxer1));\n    assertFalse(mP4Muxer0.equals((Object) mP4Muxer3));\n    assertFalse(mP4Muxer4.equals((Object) mP4Muxer3));\n    assertFalse(mP4Muxer4.equals((Object) mP4Muxer1));\n    assertFalse(mP4Muxer4.equals((Object) mP4Muxer0));\n    assertFalse(mP4Muxer4.equals((Object) mP4Muxer2));\n    assertNotNull(mP4Muxer4);\n    assertFalse(byteBuffer0.hasRemaining());\n    assertTrue(byteBuffer0.hasArray());\n    assertEquals(41, byteBuffer0.position());\n    assertEquals(\"java.nio.HeapByteBuffer[pos=41 lim=41 cap=41]\", byteBuffer0.toString());\n    assertFalse(byteBuffer0.isReadOnly());\n    assertEquals(0, byteBuffer0.remaining());\n    assertEquals(41, byteBuffer0.capacity());\n    assertFalse(byteBuffer0.isDirect());\n    assertEquals(0, byteBuffer0.arrayOffset());\n    assertEquals(41, byteBuffer0.limit());\n    assertEquals(41L, byteBufferSeekableByteChannel0.size());\n    assertTrue(byteBufferSeekableByteChannel0.isOpen());\n    assertEquals(41L, seekableByteChannel0.size());\n    assertTrue(seekableByteChannel0.isOpen());\n    assertEquals(5, mP4Muxer0.getNextTrackId());\n    assertEquals(1, mP4Muxer4.getNextTrackId());\n    assertSame(byteBufferSeekableByteChannel0, seekableByteChannel0);\n    assertSame(seekableByteChannel0, byteBufferSeekableByteChannel0);\n    assertNotSame(mP4Muxer0, mP4Muxer2);\n    assertNotSame(mP4Muxer0, mP4Muxer1);\n    assertNotSame(mP4Muxer0, mP4Muxer3);\n    assertNotSame(mP4Muxer0, mP4Muxer4);\n    assertNotSame(mP4Muxer4, mP4Muxer3);\n    assertNotSame(mP4Muxer4, mP4Muxer1);\n    assertNotSame(mP4Muxer4, mP4Muxer0);\n    assertNotSame(mP4Muxer4, mP4Muxer2);\n    MP4Muxer mP4Muxer5 = MP4Muxer.createMP4Muxer(seekableByteChannel0, brand0);\n    assertFalse(mP4Muxer5.equals((Object) mP4Muxer4));\n    assertFalse(mP4Muxer5.equals((Object) mP4Muxer3));\n    assertFalse(mP4Muxer5.equals((Object) mP4Muxer0));\n    assertFalse(mP4Muxer5.equals((Object) mP4Muxer1));\n    assertFalse(mP4Muxer5.equals((Object) mP4Muxer2));\n    assertNotNull(mP4Muxer5);\n    assertFalse(byteBuffer0.hasRemaining());\n    assertTrue(byteBuffer0.hasArray());\n    assertEquals(41, byteBuffer0.position());\n    assertEquals(\"java.nio.HeapByteBuffer[pos=41 lim=41 cap=41]\", byteBuffer0.toString());\n    assertFalse(byteBuffer0.isReadOnly());\n    assertEquals(0, byteBuffer0.remaining());\n    assertEquals(41, byteBuffer0.capacity());\n    assertFalse(byteBuffer0.isDirect());\n    assertEquals(0, byteBuffer0.arrayOffset());\n    assertEquals(41, byteBuffer0.limit());\n    assertEquals(41L, byteBufferSeekableByteChannel0.size());\n    assertTrue(byteBufferSeekableByteChannel0.isOpen());\n    assertEquals(41L, seekableByteChannel0.size());\n    assertTrue(seekableByteChannel0.isOpen());\n    assertEquals(1, mP4Muxer5.getNextTrackId());\n    assertSame(byteBufferSeekableByteChannel0, seekableByteChannel0);\n    assertSame(seekableByteChannel0, byteBufferSeekableByteChannel0);\n    assertNotSame(mP4Muxer5, mP4Muxer4);\n    assertNotSame(mP4Muxer5, mP4Muxer3);\n    assertNotSame(mP4Muxer5, mP4Muxer0);\n    assertNotSame(mP4Muxer5, mP4Muxer1);\n    assertNotSame(mP4Muxer5, mP4Muxer2);\n    MP4TrackType mP4TrackType0 = MP4TrackType.CHAPTERS;\n    assertNotNull(mP4TrackType0);\n    assertEquals(\"chap\", mP4TrackType0.getHandler());\n    assertEquals(TrackType.OTHER, mP4TrackType0.getTrackType());\n    Codec codec0 = Codec.MP1;\n    assertNotNull(codec0);\n    assertFalse(codec0.isPcm());\n    assertEquals(\"MP1\", codec0.name());\n    assertEquals(TrackType.AUDIO, codec0.getType());\n    assertEquals(\"MP1\", codec0.toString());\n    CodecMP4MuxerTrack codecMP4MuxerTrack0 = mP4Muxer3.addTrackWithId(mP4TrackType0, codec0, fileTypeBox0.MAX_BOX_SIZE);\n    assertFalse(mP4Muxer0.equals((Object) mP4Muxer5));\n    assertFalse(mP4Muxer0.equals((Object) mP4Muxer2));\n    assertFalse(mP4Muxer0.equals((Object) mP4Muxer1));\n    assertFalse(mP4Muxer0.equals((Object) mP4Muxer3));\n    assertFalse(mP4Muxer0.equals((Object) mP4Muxer4));\n    assertFalse(mP4Muxer3.equals((Object) mP4Muxer1));\n    assertFalse(mP4Muxer3.equals((Object) mP4Muxer4));\n    assertFalse(mP4Muxer3.equals((Object) mP4Muxer2));\n    assertFalse(mP4Muxer3.equals((Object) mP4Muxer5));\n    assertFalse(mP4Muxer3.equals((Object) mP4Muxer0));\n    assertEquals(134217728, Box.MAX_BOX_SIZE);\n    assertNotNull(codecMP4MuxerTrack0);\n    assertFalse(codecMP4MuxerTrack0.isTimecode());\n    assertFalse(codecMP4MuxerTrack0.isVideo());\n    assertEquals(134217728, codecMP4MuxerTrack0.getTrackId());\n    assertFalse(codecMP4MuxerTrack0.isAudio());\n    assertEquals(0L, codecMP4MuxerTrack0.getTrackTotalDuration());\n    assertFalse(byteBuffer0.hasRemaining());\n    assertTrue(byteBuffer0.hasArray());\n    assertEquals(41, byteBuffer0.position());\n    assertEquals(\"java.nio.HeapByteBuffer[pos=41 lim=41 cap=41]\", byteBuffer0.toString());\n    assertFalse(byteBuffer0.isReadOnly());\n    assertEquals(0, byteBuffer0.remaining());\n    assertEquals(41, byteBuffer0.capacity());\n    assertFalse(byteBuffer0.isDirect());\n    assertEquals(0, byteBuffer0.arrayOffset());\n    assertEquals(41, byteBuffer0.limit());\n    assertEquals(41L, byteBufferSeekableByteChannel0.size());\n    assertTrue(byteBufferSeekableByteChannel0.isOpen());\n    assertEquals(41L, seekableByteChannel0.size());\n    assertTrue(seekableByteChannel0.isOpen());\n    assertEquals(5, mP4Muxer0.getNextTrackId());\n    assertEquals(\"isom\", fileTypeBox0.getMajorBrand());\n    assertEquals(\"ftyp\", fileTypeBox0.fourcc());\n    assertEquals(\"ftyp\", fileTypeBox0.getFourcc());\n    assertEquals(\"chap\", mP4TrackType0.getHandler());\n    assertEquals(TrackType.OTHER, mP4TrackType0.getTrackType());\n    assertEquals(41L, mP4Muxer0.out.size());\n    assertTrue(mP4Muxer0.out.isOpen());\n    assertFalse(codec0.isPcm());\n    assertEquals(\"MP1\", codec0.name());\n    assertEquals(TrackType.AUDIO, codec0.getType());\n    assertEquals(\"MP1\", codec0.toString());\n    assertEquals(134217729, mP4Muxer3.getNextTrackId());\n    assertSame(byteBufferSeekableByteChannel0, seekableByteChannel0);\n    assertSame(seekableByteChannel0, byteBufferSeekableByteChannel0);\n    assertNotSame(mP4Muxer0, mP4Muxer5);\n    assertNotSame(mP4Muxer0, mP4Muxer2);\n    assertNotSame(mP4Muxer0, mP4Muxer1);\n    assertNotSame(mP4Muxer0, mP4Muxer3);\n    assertNotSame(mP4Muxer0, mP4Muxer4);\n    assertNotSame(mP4Muxer3, mP4Muxer1);\n    assertNotSame(mP4Muxer3, mP4Muxer4);\n    assertNotSame(mP4Muxer3, mP4Muxer2);\n    assertNotSame(mP4Muxer3, mP4Muxer5);\n    assertNotSame(mP4Muxer3, mP4Muxer0);\n    CodecMP4MuxerTrack codecMP4MuxerTrack1 = mP4Muxer3.addTrack((CodecMP4MuxerTrack) abstractMP4MuxerTrack1);\n    assertFalse(mP4Muxer0.equals((Object) mP4Muxer5));\n    assertFalse(mP4Muxer0.equals((Object) mP4Muxer2));\n    assertFalse(mP4Muxer0.equals((Object) mP4Muxer1));\n    assertFalse(mP4Muxer0.equals((Object) mP4Muxer3));\n    assertFalse(mP4Muxer0.equals((Object) mP4Muxer4));\n    assertFalse(mP4Muxer1.equals((Object) mP4Muxer5));\n    assertFalse(mP4Muxer1.equals((Object) mP4Muxer2));\n    assertFalse(mP4Muxer1.equals((Object) mP4Muxer3));\n    assertFalse(mP4Muxer1.equals((Object) mP4Muxer4));\n    assertFalse(mP4Muxer1.equals((Object) mP4Muxer0));\n    assertFalse(mP4Muxer3.equals((Object) mP4Muxer1));\n    assertFalse(mP4Muxer3.equals((Object) mP4Muxer4));\n    assertFalse(mP4Muxer3.equals((Object) mP4Muxer2));\n    assertFalse(mP4Muxer3.equals((Object) mP4Muxer5));\n    assertFalse(mP4Muxer3.equals((Object) mP4Muxer0));\n    assertEquals(134217728, Box.MAX_BOX_SIZE);\n    assertNotNull(codecMP4MuxerTrack1);\n    assertFalse(byteBuffer0.hasRemaining());\n    assertTrue(byteBuffer0.hasArray());\n    assertEquals(41, byteBuffer0.position());\n    assertEquals(\"java.nio.HeapByteBuffer[pos=41 lim=41 cap=41]\", byteBuffer0.toString());\n    assertFalse(byteBuffer0.isReadOnly());\n    assertEquals(0, byteBuffer0.remaining());\n    assertEquals(41, byteBuffer0.capacity());\n    assertFalse(byteBuffer0.isDirect());\n    assertEquals(0, byteBuffer0.arrayOffset());\n    assertEquals(41, byteBuffer0.limit());\n    assertEquals(1, codecMP4MuxerTrack1.getTrackId());\n    assertFalse(codecMP4MuxerTrack1.isVideo());\n    assertFalse(codecMP4MuxerTrack1.isAudio());\n    assertTrue(codecMP4MuxerTrack1.isTimecode());\n    assertEquals(0L, codecMP4MuxerTrack1.getTrackTotalDuration());\n    assertTrue(abstractMP4MuxerTrack1.isTimecode());\n    assertEquals(1, abstractMP4MuxerTrack1.getTrackId());\n    assertFalse(abstractMP4MuxerTrack1.isAudio());\n    assertFalse(abstractMP4MuxerTrack1.isVideo());\n    assertEquals(0L, abstractMP4MuxerTrack1.getTrackTotalDuration());\n    assertEquals(41L, byteBufferSeekableByteChannel0.size());\n    assertTrue(byteBufferSeekableByteChannel0.isOpen());\n    assertEquals(41L, seekableByteChannel0.size());\n    assertTrue(seekableByteChannel0.isOpen());\n    assertEquals(5, mP4Muxer0.getNextTrackId());\n    assertEquals(\"isom\", fileTypeBox0.getMajorBrand());\n    assertEquals(\"ftyp\", fileTypeBox0.fourcc());\n    assertEquals(\"ftyp\", fileTypeBox0.getFourcc());\n    assertEquals(3, mP4Muxer1.getNextTrackId());\n    assertEquals(41L, mP4Muxer0.out.size());\n    assertTrue(mP4Muxer0.out.isOpen());\n    assertEquals(134217729, mP4Muxer3.getNextTrackId());\n    assertSame(codecMP4MuxerTrack1, timecodeMP4MuxerTrack0);\n    assertSame(codecMP4MuxerTrack1, abstractMP4MuxerTrack1);\n    assertSame(codecMP4MuxerTrack1, timecodeMP4MuxerTrack1);\n    assertSame(abstractMP4MuxerTrack1, codecMP4MuxerTrack1);\n    assertSame(abstractMP4MuxerTrack1, timecodeMP4MuxerTrack0);\n    assertSame(abstractMP4MuxerTrack1, timecodeMP4MuxerTrack1);\n    assertSame(byteBufferSeekableByteChannel0, seekableByteChannel0);\n    assertSame(seekableByteChannel0, byteBufferSeekableByteChannel0);\n    assertNotSame(mP4Muxer0, mP4Muxer5);\n    assertNotSame(mP4Muxer0, mP4Muxer2);\n    assertNotSame(mP4Muxer0, mP4Muxer1);\n    assertNotSame(mP4Muxer0, mP4Muxer3);\n    assertNotSame(mP4Muxer0, mP4Muxer4);\n    assertNotSame(mP4Muxer1, mP4Muxer5);\n    assertNotSame(mP4Muxer1, mP4Muxer2);\n    assertNotSame(mP4Muxer1, mP4Muxer3);\n    assertNotSame(mP4Muxer1, mP4Muxer4);\n    assertNotSame(mP4Muxer1, mP4Muxer0);\n    assertNotSame(mP4Muxer3, mP4Muxer1);\n    assertNotSame(mP4Muxer3, mP4Muxer4);\n    assertNotSame(mP4Muxer3, mP4Muxer2);\n    assertNotSame(mP4Muxer3, mP4Muxer5);\n    assertNotSame(mP4Muxer3, mP4Muxer0);\n    int int1 = 1624;\n    CodecMP4MuxerTrack codecMP4MuxerTrack2 = mP4Muxer4.addTrackWithId(mP4TrackType0, codec0, int1);\n    assertFalse(int1 == int0);\n    assertFalse(codecMP4MuxerTrack2.equals((Object) codecMP4MuxerTrack0));\n    assertFalse(mP4Muxer0.equals((Object) mP4Muxer5));\n    assertFalse(mP4Muxer0.equals((Object) mP4Muxer2));\n    assertFalse(mP4Muxer0.equals((Object) mP4Muxer1));\n    assertFalse(mP4Muxer0.equals((Object) mP4Muxer3));\n    assertFalse(mP4Muxer0.equals((Object) mP4Muxer4));\n    assertFalse(mP4Muxer4.equals((Object) mP4Muxer3));\n    assertFalse(mP4Muxer4.equals((Object) mP4Muxer1));\n    assertFalse(mP4Muxer4.equals((Object) mP4Muxer0));\n    assertFalse(mP4Muxer4.equals((Object) mP4Muxer2));\n    assertFalse(mP4Muxer4.equals((Object) mP4Muxer5));\n    assertNotNull(codecMP4MuxerTrack2);\n    assertFalse(byteBuffer0.hasRemaining());\n    assertTrue(byteBuffer0.hasArray());\n    assertEquals(41, byteBuffer0.position());\n    assertEquals(\"java.nio.HeapByteBuffer[pos=41 lim=41 cap=41]\", byteBuffer0.toString());\n    assertFalse(byteBuffer0.isReadOnly());\n    assertEquals(0, byteBuffer0.remaining());\n    assertEquals(41, byteBuffer0.capacity());\n    assertFalse(byteBuffer0.isDirect());\n    assertEquals(0, byteBuffer0.arrayOffset());\n    assertEquals(41, byteBuffer0.limit());\n    assertEquals(41L, byteBufferSeekableByteChannel0.size());\n    assertTrue(byteBufferSeekableByteChannel0.isOpen());\n    assertEquals(41L, seekableByteChannel0.size());\n    assertTrue(seekableByteChannel0.isOpen());\n    assertFalse(codecMP4MuxerTrack2.isAudio());\n    assertFalse(codecMP4MuxerTrack2.isTimecode());\n    assertFalse(codecMP4MuxerTrack2.isVideo());\n    assertEquals(1624, codecMP4MuxerTrack2.getTrackId());\n    assertEquals(0L, codecMP4MuxerTrack2.getTrackTotalDuration());\n    assertEquals(5, mP4Muxer0.getNextTrackId());\n    assertEquals(1625, mP4Muxer4.getNextTrackId());\n    assertEquals(\"chap\", mP4TrackType0.getHandler());\n    assertEquals(TrackType.OTHER, mP4TrackType0.getTrackType());\n    assertFalse(codec0.isPcm());\n    assertEquals(\"MP1\", codec0.name());\n    assertEquals(TrackType.AUDIO, codec0.getType());\n    assertEquals(\"MP1\", codec0.toString());\n    assertSame(byteBufferSeekableByteChannel0, seekableByteChannel0);\n    assertSame(seekableByteChannel0, byteBufferSeekableByteChannel0);\n    assertNotSame(codecMP4MuxerTrack2, codecMP4MuxerTrack0);\n    assertNotSame(mP4Muxer0, mP4Muxer5);\n    assertNotSame(mP4Muxer0, mP4Muxer2);\n    assertNotSame(mP4Muxer0, mP4Muxer1);\n    assertNotSame(mP4Muxer0, mP4Muxer3);\n    assertNotSame(mP4Muxer0, mP4Muxer4);\n    assertNotSame(mP4Muxer4, mP4Muxer3);\n    assertNotSame(mP4Muxer4, mP4Muxer1);\n    assertNotSame(mP4Muxer4, mP4Muxer0);\n    assertNotSame(mP4Muxer4, mP4Muxer2);\n    assertNotSame(mP4Muxer4, mP4Muxer5);\n}\n}"
    },
    {
        "original_path": "jcodec_jcodec###jcodec_jcodec/src/test/java/org/jcodec/codecs/vpx/vp9/ModeInfoTest###testReadSkipFlag",
        "generated_path": "ModeInfo_readSkipFlag.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.jcodec.codecs.vpx.vp9;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.jcodec.codecs.vpx.VPXBooleanDecoder;\nimport org.jcodec.codecs.vpx.vp9.DecodingContext;\nimport org.jcodec.codecs.vpx.vp9.ModeInfo;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class ModeInfo_readSkipFlag extends ModeInfo_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test47() throws Throwable {\n    ModeInfo modeInfo0 = new ModeInfo(0, false, 154, 0, 0, 0);\n    VPXBooleanDecoder vPXBooleanDecoder0 = mock(VPXBooleanDecoder.class, new ViolatedAssumptionAnswer());\n    doReturn(2885).when(vPXBooleanDecoder0).readBit(anyInt());\n    boolean[] booleanArray0 = new boolean[4];\n    short[] shortArray0 = new short[1];\n    DecodingContext decodingContext0 = mock(DecodingContext.class, new ViolatedAssumptionAnswer());\n    doReturn(booleanArray0).when(decodingContext0).getAboveSkipped();\n    doReturn(booleanArray0).when(decodingContext0).getLeftSkipped();\n    doReturn((-803)).when(decodingContext0).getMiTileStartCol();\n    doReturn(shortArray0).when(decodingContext0).getSkipProbs();\n    boolean boolean0 = modeInfo0.readSkipFlag(0, 0, 0, vPXBooleanDecoder0, decodingContext0);\n    assertEquals(0, modeInfo0.getSubModes());\n    assertEquals(0, modeInfo0.getSegmentId());\n    assertEquals(0, modeInfo0.getYMode());\n    assertEquals(154, modeInfo0.getTxSize());\n    assertFalse(modeInfo0.isSkip());\n    assertEquals(0, modeInfo0.getUvMode());\n    assertFalse(boolean0);\n}\n}"
    },
    {
        "original_path": "jcodec_jcodec###jcodec_jcodec/src/test/java/org/jcodec/movtool/MoovVersionsTest###testAddVersion",
        "generated_path": "MoovVersions_addVersion.java",
        "Compile_result": 1,
        "Test_result": 0,
        "Gen_Test": "package org.jcodec.movtool;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.NoSuchElementException;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.mock.java.io.MockFile;\nimport org.evosuite.runtime.testdata.EvoSuiteFile;\nimport org.evosuite.runtime.testdata.FileSystemHandling;\nimport org.jcodec.containers.mp4.MP4Util;\nimport org.jcodec.containers.mp4.boxes.Box;\nimport org.jcodec.containers.mp4.boxes.Header;\nimport org.jcodec.containers.mp4.boxes.MovieBox;\nimport org.jcodec.containers.mp4.boxes.NodeBox;\nimport org.jcodec.movtool.MoovVersions;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class MoovVersions_addVersion extends MoovVersions_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    MockFile mockFile0 = new MockFile((File) null, \"a|_ YjLG\");\n    MovieBox movieBox0 = MovieBox.createMovieBox();\n    LinkedList<String> linkedList0 = new LinkedList<String>();\n    List<Box> list0 = movieBox0.getBoxes();\n    NodeBox.findBox(movieBox0, linkedList0, list0);\n    // Undeclared exception!\n    MoovVersions.addVersion(mockFile0, movieBox0);\n}\n}"
    },
    {
        "original_path": "jcodec_jcodec###jcodec_jcodec/src/test/java/org/jcodec/common/model/RationalTest###testParse",
        "generated_path": "Rational_parse.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.jcodec.common.model;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.jcodec.common.model.Rational;\nimport org.jcodec.common.model.RationalLarge;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class Rational_parse extends Rational_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test038() throws Throwable {\n    Rational rational0 = Rational.parse(\"1/1\");\n    assertEquals(1.0, rational0.toDouble(), 0.01);\n}\n}"
    },
    {
        "original_path": "jcodec_jcodec###jcodec_jcodec/src/test/java/org/jcodec/codecs/h264/CoeffTransformerTest###testQuantizeAC",
        "generated_path": "CoeffTransformer_quantizeAC.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.jcodec.codecs.h264.decode;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.jcodec.codecs.h264.decode.CoeffTransformer;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class CoeffTransformer_quantizeAC extends CoeffTransformer_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test16() throws Throwable {\n    CoeffTransformer coeffTransformer0 = new CoeffTransformer();\n    CoeffTransformer.invDC2x2(coeffTransformer0.invZigzag4x4);\n    CoeffTransformer.quantizeAC(coeffTransformer0.invZigzag8x8, 10);\n}\n}"
    },
    {
        "original_path": "jcodec_jcodec###jcodec_jcodec/src/test/java/org/jcodec/codecs/vpx/vp9/InterModeInfoTest###testReadInterMode",
        "generated_path": "InterModeInfo_readInterMode.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.jcodec.codecs.vpx.vp9;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.jcodec.codecs.vpx.VPXBooleanDecoder;\nimport org.jcodec.codecs.vpx.vp9.DecodingContext;\nimport org.jcodec.codecs.vpx.vp9.InterModeInfo;\nimport org.jcodec.codecs.vpx.vp9.ModeInfo;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class InterModeInfo_readInterMode extends InterModeInfo_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void InterModeInfo_readInterMode() throws Throwable {\n    int int0 = (-359);\n    int int1 = (-1841);\n    int int2 = (-1596);\n    int int3 = 2;\n    InterModeInfo interModeInfo0 = new InterModeInfo((-359), true, (-1841), (-1596), (-107), 2);\n    assertNotNull(interModeInfo0);\n    assertEquals((-1596), interModeInfo0.getYMode());\n    assertEquals(0L, interModeInfo0.getMvl0());\n    assertTrue(interModeInfo0.isSkip());\n    assertEquals(0L, interModeInfo0.getMvl3());\n    assertEquals(2, interModeInfo0.getUvMode());\n    assertEquals(0L, interModeInfo0.getMvl1());\n    assertEquals(0L, interModeInfo0.getMvl2());\n    assertTrue(interModeInfo0.isInter());\n    assertEquals((-359), interModeInfo0.getSegmentId());\n    assertEquals((-107), interModeInfo0.getSubModes());\n    assertEquals((-1841), interModeInfo0.getTxSize());\n    int int4 = 1393;\n    VPXBooleanDecoder vPXBooleanDecoder0 = mock(VPXBooleanDecoder.class, new ViolatedAssumptionAnswer());\n    DecodingContext decodingContext0 = mock(DecodingContext.class, new ViolatedAssumptionAnswer());\n    doReturn((int[]) null).when(decodingContext0).getAboveModes();\n    doReturn((int[]) null).when(decodingContext0).getLeftModes();\n    doReturn(0).when(decodingContext0).getMiTileStartCol();\n    doReturn(0).when(decodingContext0).getMiTileWidth();\n    // Undeclared exception!\n    try {\n        interModeInfo0.readInterMode((-1854), 1332, 12, vPXBooleanDecoder0, decodingContext0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        //\n        // no message in exception (getMessage() returned null)\n        //\n        verifyException(\"org.jcodec.codecs.vpx.vp9.InterModeInfo\", e);\n    }\n}\n}"
    },
    {
        "original_path": "jcodec_jcodec###jcodec_jcodec/src/test/java/org/jcodec/movtool/StripTest###testCutChunksToGaps",
        "generated_path": "Strip_cutChunksToGaps.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.jcodec.movtool;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.System;\nimport org.evosuite.runtime.testdata.EvoSuiteFile;\nimport org.evosuite.runtime.testdata.FileSystemHandling;\nimport org.jcodec.common.Tuple;\nimport org.jcodec.common.model.RationalLarge;\nimport org.jcodec.containers.mp4.Chunk;\nimport org.jcodec.containers.mp4.boxes.Box;\nimport org.jcodec.containers.mp4.boxes.Edit;\nimport org.jcodec.containers.mp4.boxes.Header;\nimport org.jcodec.containers.mp4.boxes.MediaHeaderBox;\nimport org.jcodec.containers.mp4.boxes.MovieBox;\nimport org.jcodec.containers.mp4.boxes.MovieHeaderBox;\nimport org.jcodec.containers.mp4.boxes.TrakBox;\nimport org.jcodec.movtool.Strip;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class Strip_cutChunksToGaps extends Strip_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void Strip_cutChunksToGaps() throws Throwable {\n    // Undeclared exception!\n    try {\n        Strip.cutChunksToGaps((List<Chunk>) null, (List<Tuple._2<Long, Long>>) null, (List<Tuple._2<Long, Long>>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        //\n        // no message in exception (getMessage() returned null)\n        //\n        verifyException(\"org.jcodec.movtool.Strip\", e);\n    }\n}\n}"
    },
    {
        "original_path": "jcodec_jcodec###jcodec_jcodec/src/test/java/org/jcodec/containers/mkv/EbmlUtilTest###testEbmlLength",
        "generated_path": "EbmlUtil_ebmlLength.java",
        "Compile_result": 1,
        "Test_result": 0,
        "Gen_Test": "package org.jcodec.containers.mkv.util;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.nio.ByteBuffer;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.jcodec.containers.mkv.util.EbmlUtil;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class EbmlUtil_ebmlLength extends EbmlUtil_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    int int0 = EbmlUtil.computeLength((byte) 1);\n    assertEquals(8, int0);\n    EbmlUtil ebmlUtil0 = new EbmlUtil();\n    int int1 = EbmlUtil.ebmlLength(0L);\n    assertTrue(int1 == int0);\n    assertEquals(1, int1);\n}\n}"
    },
    {
        "original_path": "soabase_exhibitor###soabase_exhibitor/exhibitor-core/src/test/java/com/netflix/exhibitor/core/state/TestMonitorRunningInstance###testServerListHasChanged",
        "generated_path": "MonitorRunningInstance_serverListHasChanged.java",
        "Compile_result": 1,
        "Test_result": 0,
        "Gen_Test": "package com.netflix.exhibitor.core.state;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.netflix.exhibitor.core.Exhibitor;\nimport com.netflix.exhibitor.core.activity.ActivityLog;\nimport com.netflix.exhibitor.core.activity.ActivityQueue;\nimport com.netflix.exhibitor.core.config.ConfigManager;\nimport com.netflix.exhibitor.core.config.InstanceConfig;\nimport com.netflix.exhibitor.core.controlpanel.ControlPanelValues;\nimport com.netflix.exhibitor.core.state.InstanceState;\nimport com.netflix.exhibitor.core.state.MonitorRunningInstance;\nimport com.netflix.exhibitor.core.state.ServerList;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class MonitorRunningInstance_serverListHasChanged extends MonitorRunningInstance_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    ActivityQueue activityQueue0 = mock(ActivityQueue.class, new ViolatedAssumptionAnswer());\n    InstanceConfig instanceConfig0 = mock(InstanceConfig.class, new ViolatedAssumptionAnswer());\n    doReturn(0).when(instanceConfig0).getInt(any(com.netflix.exhibitor.core.config.IntConfigs.class));\n    ConfigManager configManager0 = mock(ConfigManager.class, new ViolatedAssumptionAnswer());\n    doReturn(instanceConfig0).when(configManager0).getConfig();\n    Exhibitor exhibitor0 = mock(Exhibitor.class, new ViolatedAssumptionAnswer());\n    doReturn(activityQueue0).when(exhibitor0).getActivityQueue();\n    doReturn(configManager0).when(exhibitor0).getConfigManager();\n    doReturn((ActivityLog) null).when(exhibitor0).getLog();\n    MonitorRunningInstance monitorRunningInstance0 = new MonitorRunningInstance(exhibitor0);\n    boolean boolean0 = monitorRunningInstance0.serverListHasChanged((InstanceState) null, (InstanceState) null);\n    assertFalse(boolean0);\n    assertFalse(monitorRunningInstance0.isCurrentlyLeader());\n    assertEquals(1, monitorRunningInstance0.getRestartCount());\n}\n}"
    },
    {
        "original_path": "jhy_jsoup###jhy_jsoup/src/test/java/org/jsoup/nodes/ElementTest###testWholeText",
        "generated_path": "Element_wholeText.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.jsoup.nodes;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.io.BufferedOutputStream;\nimport java.io.BufferedWriter;\nimport java.io.ByteArrayOutputStream;\nimport java.io.CharArrayWriter;\nimport java.io.File;\nimport java.io.FileDescriptor;\nimport java.io.InputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.PipedOutputStream;\nimport java.io.PrintWriter;\nimport java.io.PushbackInputStream;\nimport java.io.Reader;\nimport java.io.StringReader;\nimport java.io.StringWriter;\nimport java.io.Writer;\nimport java.net.URL;\nimport java.nio.CharBuffer;\nimport java.nio.charset.Charset;\nimport java.nio.charset.IllegalCharsetNameException;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.HashSet;\nimport java.util.LinkedHashSet;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.Stack;\nimport java.util.TreeSet;\nimport java.util.Vector;\nimport java.util.concurrent.LinkedBlockingQueue;\nimport java.util.function.Consumer;\nimport java.util.regex.Pattern;\nimport java.util.regex.PatternSyntaxException;\nimport org.eclipse.jetty.io.LeakTrackingByteBufferPool;\nimport org.eclipse.jetty.io.MappedByteBufferPool;\nimport org.eclipse.jetty.util.IncludeExclude;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.mock.java.io.MockFile;\nimport org.evosuite.runtime.mock.java.io.MockFileInputStream;\nimport org.evosuite.runtime.mock.java.io.MockFileWriter;\nimport org.evosuite.runtime.mock.java.io.MockPrintStream;\nimport org.evosuite.runtime.mock.java.io.MockPrintWriter;\nimport org.evosuite.runtime.mock.java.io.MockRandomAccessFile;\nimport org.evosuite.runtime.mock.java.net.MockURL;\nimport org.evosuite.runtime.testdata.EvoSuiteFile;\nimport org.evosuite.runtime.testdata.FileSystemHandling;\nimport org.jsoup.Connection;\nimport org.jsoup.helper.HttpConnection;\nimport org.jsoup.nodes.Attribute;\nimport org.jsoup.nodes.Attributes;\nimport org.jsoup.nodes.CDataNode;\nimport org.jsoup.nodes.Comment;\nimport org.jsoup.nodes.DataNode;\nimport org.jsoup.nodes.Document;\nimport org.jsoup.nodes.DocumentType;\nimport org.jsoup.nodes.Element;\nimport org.jsoup.nodes.Entities;\nimport org.jsoup.nodes.FormElement;\nimport org.jsoup.nodes.LeafNode;\nimport org.jsoup.nodes.Node;\nimport org.jsoup.nodes.PseudoTextElement;\nimport org.jsoup.nodes.TextNode;\nimport org.jsoup.nodes.XmlDeclaration;\nimport org.jsoup.parser.ParseSettings;\nimport org.jsoup.parser.Parser;\nimport org.jsoup.parser.Tag;\nimport org.jsoup.select.Elements;\nimport org.jsoup.select.Evaluator;\nimport org.jsoup.select.NodeFilter;\nimport org.jsoup.select.NodeVisitor;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class Element_wholeText extends Element_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test155() throws Throwable {\n    Document document0 = Parser.parse(\"\", \"No elements matched the query '%s' in the document.\");\n    document0.hasAttr(\"\");\n    Document document1 = (Document) document0.lastElementSibling();\n    document0.hasAttr(\"\");\n    Node[] nodeArray0 = new Node[0];\n    Document document2 = (Document) document0.val(\"No elements matched the query '%s' in the document.\");\n    document1.siblingIndex = 0;\n    document1.dataset();\n    Document document3 = (Document) document0.doClone(document1);\n    document1.clone();\n    Document document4 = (Document) document3.clearAttributes();\n    Document document5 = (Document) document4.text(\"\");\n    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(\"No elements matched the query '%s' in the document.\");\n    document0.html(mockPrintWriter0);\n    document5.className();\n    Document document6 = (Document) document2.attr(\"\", true);\n    document6.appendElement(\"noresize\");\n    document0.parents();\n    document4.getAllElements();\n    document1.appendElement(\"noresize\");\n    document3.cssSelector();\n    document1.getElementsByAttributeValueNot(\"/N]HG\", \"5kk0>l@i{X*K>\u007f\");\n    document5.id();\n    document1.textNodes();\n    document1.appendTo(document4);\n    document4.wholeText();\n}\n}"
    },
    {
        "original_path": "jhy_jsoup###jhy_jsoup/src/test/java/org/jsoup/nodes/ElementTest###testHasText",
        "generated_path": "Element_hasText.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.jsoup.nodes;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.io.BufferedOutputStream;\nimport java.io.BufferedWriter;\nimport java.io.ByteArrayOutputStream;\nimport java.io.CharArrayWriter;\nimport java.io.File;\nimport java.io.FileDescriptor;\nimport java.io.InputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.PipedOutputStream;\nimport java.io.PrintWriter;\nimport java.io.PushbackInputStream;\nimport java.io.Reader;\nimport java.io.StringReader;\nimport java.io.StringWriter;\nimport java.io.Writer;\nimport java.net.URL;\nimport java.nio.CharBuffer;\nimport java.nio.charset.Charset;\nimport java.nio.charset.IllegalCharsetNameException;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.HashSet;\nimport java.util.LinkedHashSet;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.Stack;\nimport java.util.TreeSet;\nimport java.util.Vector;\nimport java.util.concurrent.LinkedBlockingQueue;\nimport java.util.function.Consumer;\nimport java.util.regex.Pattern;\nimport java.util.regex.PatternSyntaxException;\nimport org.eclipse.jetty.io.LeakTrackingByteBufferPool;\nimport org.eclipse.jetty.io.MappedByteBufferPool;\nimport org.eclipse.jetty.util.IncludeExclude;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.mock.java.io.MockFile;\nimport org.evosuite.runtime.mock.java.io.MockFileInputStream;\nimport org.evosuite.runtime.mock.java.io.MockFileWriter;\nimport org.evosuite.runtime.mock.java.io.MockPrintStream;\nimport org.evosuite.runtime.mock.java.io.MockPrintWriter;\nimport org.evosuite.runtime.mock.java.io.MockRandomAccessFile;\nimport org.evosuite.runtime.mock.java.net.MockURL;\nimport org.evosuite.runtime.testdata.EvoSuiteFile;\nimport org.evosuite.runtime.testdata.FileSystemHandling;\nimport org.jsoup.Connection;\nimport org.jsoup.helper.HttpConnection;\nimport org.jsoup.nodes.Attribute;\nimport org.jsoup.nodes.Attributes;\nimport org.jsoup.nodes.CDataNode;\nimport org.jsoup.nodes.Comment;\nimport org.jsoup.nodes.DataNode;\nimport org.jsoup.nodes.Document;\nimport org.jsoup.nodes.DocumentType;\nimport org.jsoup.nodes.Element;\nimport org.jsoup.nodes.Entities;\nimport org.jsoup.nodes.FormElement;\nimport org.jsoup.nodes.LeafNode;\nimport org.jsoup.nodes.Node;\nimport org.jsoup.nodes.PseudoTextElement;\nimport org.jsoup.nodes.TextNode;\nimport org.jsoup.nodes.XmlDeclaration;\nimport org.jsoup.parser.ParseSettings;\nimport org.jsoup.parser.Parser;\nimport org.jsoup.parser.Tag;\nimport org.jsoup.select.Elements;\nimport org.jsoup.select.Evaluator;\nimport org.jsoup.select.NodeFilter;\nimport org.jsoup.select.NodeVisitor;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class Element_hasText extends Element_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test040() throws Throwable {\n    Document document0 = Parser.parse(\" -JR&.,X|PJmT\", \" -JR&.,X|PJmT\");\n    document0.siblingNodes();\n    int int0 = 3696;\n    document0.hasText();\n    document0.getElementsByIndexLessThan(3696);\n    // Undeclared exception!\n    try {\n        document0.getElementsMatchingOwnText((String) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        //\n        // no message in exception (getMessage() returned null)\n        //\n    }\n}\n}"
    },
    {
        "original_path": "jhy_jsoup###jhy_jsoup/src/test/java/org/jsoup/nodes/ElementTest###testClosest",
        "generated_path": "Element_closest.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.jsoup.nodes;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.io.BufferedOutputStream;\nimport java.io.BufferedWriter;\nimport java.io.ByteArrayOutputStream;\nimport java.io.CharArrayWriter;\nimport java.io.File;\nimport java.io.FileDescriptor;\nimport java.io.InputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.PipedOutputStream;\nimport java.io.PrintWriter;\nimport java.io.PushbackInputStream;\nimport java.io.Reader;\nimport java.io.StringReader;\nimport java.io.StringWriter;\nimport java.io.Writer;\nimport java.net.URL;\nimport java.nio.CharBuffer;\nimport java.nio.charset.Charset;\nimport java.nio.charset.IllegalCharsetNameException;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.HashSet;\nimport java.util.LinkedHashSet;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.Stack;\nimport java.util.TreeSet;\nimport java.util.Vector;\nimport java.util.concurrent.LinkedBlockingQueue;\nimport java.util.function.Consumer;\nimport java.util.regex.Pattern;\nimport java.util.regex.PatternSyntaxException;\nimport org.eclipse.jetty.io.LeakTrackingByteBufferPool;\nimport org.eclipse.jetty.io.MappedByteBufferPool;\nimport org.eclipse.jetty.util.IncludeExclude;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.mock.java.io.MockFile;\nimport org.evosuite.runtime.mock.java.io.MockFileInputStream;\nimport org.evosuite.runtime.mock.java.io.MockFileWriter;\nimport org.evosuite.runtime.mock.java.io.MockPrintStream;\nimport org.evosuite.runtime.mock.java.io.MockPrintWriter;\nimport org.evosuite.runtime.mock.java.io.MockRandomAccessFile;\nimport org.evosuite.runtime.mock.java.net.MockURL;\nimport org.evosuite.runtime.testdata.EvoSuiteFile;\nimport org.evosuite.runtime.testdata.FileSystemHandling;\nimport org.jsoup.Connection;\nimport org.jsoup.helper.HttpConnection;\nimport org.jsoup.nodes.Attribute;\nimport org.jsoup.nodes.Attributes;\nimport org.jsoup.nodes.CDataNode;\nimport org.jsoup.nodes.Comment;\nimport org.jsoup.nodes.DataNode;\nimport org.jsoup.nodes.Document;\nimport org.jsoup.nodes.DocumentType;\nimport org.jsoup.nodes.Element;\nimport org.jsoup.nodes.Entities;\nimport org.jsoup.nodes.FormElement;\nimport org.jsoup.nodes.LeafNode;\nimport org.jsoup.nodes.Node;\nimport org.jsoup.nodes.PseudoTextElement;\nimport org.jsoup.nodes.TextNode;\nimport org.jsoup.nodes.XmlDeclaration;\nimport org.jsoup.parser.ParseSettings;\nimport org.jsoup.parser.Parser;\nimport org.jsoup.parser.Tag;\nimport org.jsoup.select.Elements;\nimport org.jsoup.select.Evaluator;\nimport org.jsoup.select.NodeFilter;\nimport org.jsoup.select.NodeVisitor;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class Element_closest extends Element_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test097() throws Throwable {\n    Element element0 = new Element(\"a\\\"ENs-7}\");\n    Evaluator.IndexGreaterThan evaluator_IndexGreaterThan0 = new Evaluator.IndexGreaterThan(128);\n    element0.closest((Evaluator) evaluator_IndexGreaterThan0);\n}\n}"
    },
    {
        "original_path": "jhy_jsoup###jhy_jsoup/src/test/java/org/jsoup/nodes/ElementTest###testGetElementById",
        "generated_path": "Element_getElementById.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.jsoup.nodes;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.io.BufferedOutputStream;\nimport java.io.BufferedWriter;\nimport java.io.ByteArrayOutputStream;\nimport java.io.CharArrayWriter;\nimport java.io.File;\nimport java.io.FileDescriptor;\nimport java.io.InputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.PipedOutputStream;\nimport java.io.PrintWriter;\nimport java.io.PushbackInputStream;\nimport java.io.Reader;\nimport java.io.StringReader;\nimport java.io.StringWriter;\nimport java.io.Writer;\nimport java.net.URL;\nimport java.nio.CharBuffer;\nimport java.nio.charset.Charset;\nimport java.nio.charset.IllegalCharsetNameException;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.HashSet;\nimport java.util.LinkedHashSet;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.Stack;\nimport java.util.TreeSet;\nimport java.util.Vector;\nimport java.util.concurrent.LinkedBlockingQueue;\nimport java.util.function.Consumer;\nimport java.util.regex.Pattern;\nimport java.util.regex.PatternSyntaxException;\nimport org.eclipse.jetty.io.LeakTrackingByteBufferPool;\nimport org.eclipse.jetty.io.MappedByteBufferPool;\nimport org.eclipse.jetty.util.IncludeExclude;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.mock.java.io.MockFile;\nimport org.evosuite.runtime.mock.java.io.MockFileInputStream;\nimport org.evosuite.runtime.mock.java.io.MockFileWriter;\nimport org.evosuite.runtime.mock.java.io.MockPrintStream;\nimport org.evosuite.runtime.mock.java.io.MockPrintWriter;\nimport org.evosuite.runtime.mock.java.io.MockRandomAccessFile;\nimport org.evosuite.runtime.mock.java.net.MockURL;\nimport org.evosuite.runtime.testdata.EvoSuiteFile;\nimport org.evosuite.runtime.testdata.FileSystemHandling;\nimport org.jsoup.Connection;\nimport org.jsoup.helper.HttpConnection;\nimport org.jsoup.nodes.Attribute;\nimport org.jsoup.nodes.Attributes;\nimport org.jsoup.nodes.CDataNode;\nimport org.jsoup.nodes.Comment;\nimport org.jsoup.nodes.DataNode;\nimport org.jsoup.nodes.Document;\nimport org.jsoup.nodes.DocumentType;\nimport org.jsoup.nodes.Element;\nimport org.jsoup.nodes.Entities;\nimport org.jsoup.nodes.FormElement;\nimport org.jsoup.nodes.LeafNode;\nimport org.jsoup.nodes.Node;\nimport org.jsoup.nodes.PseudoTextElement;\nimport org.jsoup.nodes.TextNode;\nimport org.jsoup.nodes.XmlDeclaration;\nimport org.jsoup.parser.ParseSettings;\nimport org.jsoup.parser.Parser;\nimport org.jsoup.parser.Tag;\nimport org.jsoup.select.Elements;\nimport org.jsoup.select.Evaluator;\nimport org.jsoup.select.NodeFilter;\nimport org.jsoup.select.NodeVisitor;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class Element_getElementById extends Element_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test079() throws Throwable {\n    Element element0 = new Element(\"\u007fU;y^x?6giVdMaR\");\n    element0.getElementById(\"\u007fU;y^x?6giVdMaR\");\n    element0.lastElementChild();\n    element0.getElementsByAttributeValueEnding(\"ezL>|T?}[D\", \"\u007fU;y^x?6giVdMaR\");\n}\n}"
    },
    {
        "original_path": "jhy_jsoup###jhy_jsoup/src/test/java/org/jsoup/nodes/DocumentTest###testClone",
        "generated_path": "Document_clone.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.jsoup.nodes;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.io.Reader;\nimport java.io.StringReader;\nimport java.nio.charset.Charset;\nimport java.nio.charset.CharsetEncoder;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.jsoup.Connection;\nimport org.jsoup.helper.HttpConnection;\nimport org.jsoup.nodes.CDataNode;\nimport org.jsoup.nodes.Comment;\nimport org.jsoup.nodes.Document;\nimport org.jsoup.nodes.Element;\nimport org.jsoup.nodes.Entities;\nimport org.jsoup.nodes.Node;\nimport org.jsoup.nodes.XmlDeclaration;\nimport org.jsoup.parser.Parser;\nimport org.jsoup.select.Evaluator;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class Document_clone extends Document_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test37() throws Throwable {\n    Document document0 = Document.createShell(\"/fGKy#Ad8z=.W\\\"8x}V\");\n    Charset charset0 = document0.charset();\n    assertFalse(document0.updateMetaCharsetElement());\n    document0.charset(charset0);\n    document0.clone();\n    assertTrue(document0.updateMetaCharsetElement());\n}\n}"
    },
    {
        "original_path": "jhy_jsoup###jhy_jsoup/src/test/java/org/jsoup/nodes/ElementTest###testAppendTo",
        "generated_path": "Element_appendTo.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.jsoup.nodes;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.io.BufferedOutputStream;\nimport java.io.BufferedWriter;\nimport java.io.ByteArrayOutputStream;\nimport java.io.CharArrayWriter;\nimport java.io.File;\nimport java.io.FileDescriptor;\nimport java.io.InputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.PipedOutputStream;\nimport java.io.PrintWriter;\nimport java.io.PushbackInputStream;\nimport java.io.Reader;\nimport java.io.StringReader;\nimport java.io.StringWriter;\nimport java.io.Writer;\nimport java.net.URL;\nimport java.nio.CharBuffer;\nimport java.nio.charset.Charset;\nimport java.nio.charset.IllegalCharsetNameException;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.HashSet;\nimport java.util.LinkedHashSet;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.Stack;\nimport java.util.TreeSet;\nimport java.util.Vector;\nimport java.util.concurrent.LinkedBlockingQueue;\nimport java.util.function.Consumer;\nimport java.util.regex.Pattern;\nimport java.util.regex.PatternSyntaxException;\nimport org.eclipse.jetty.io.LeakTrackingByteBufferPool;\nimport org.eclipse.jetty.io.MappedByteBufferPool;\nimport org.eclipse.jetty.util.IncludeExclude;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.mock.java.io.MockFile;\nimport org.evosuite.runtime.mock.java.io.MockFileInputStream;\nimport org.evosuite.runtime.mock.java.io.MockFileWriter;\nimport org.evosuite.runtime.mock.java.io.MockPrintStream;\nimport org.evosuite.runtime.mock.java.io.MockPrintWriter;\nimport org.evosuite.runtime.mock.java.io.MockRandomAccessFile;\nimport org.evosuite.runtime.mock.java.net.MockURL;\nimport org.evosuite.runtime.testdata.EvoSuiteFile;\nimport org.evosuite.runtime.testdata.FileSystemHandling;\nimport org.jsoup.Connection;\nimport org.jsoup.helper.HttpConnection;\nimport org.jsoup.nodes.Attribute;\nimport org.jsoup.nodes.Attributes;\nimport org.jsoup.nodes.CDataNode;\nimport org.jsoup.nodes.Comment;\nimport org.jsoup.nodes.DataNode;\nimport org.jsoup.nodes.Document;\nimport org.jsoup.nodes.DocumentType;\nimport org.jsoup.nodes.Element;\nimport org.jsoup.nodes.Entities;\nimport org.jsoup.nodes.FormElement;\nimport org.jsoup.nodes.LeafNode;\nimport org.jsoup.nodes.Node;\nimport org.jsoup.nodes.PseudoTextElement;\nimport org.jsoup.nodes.TextNode;\nimport org.jsoup.nodes.XmlDeclaration;\nimport org.jsoup.parser.ParseSettings;\nimport org.jsoup.parser.Parser;\nimport org.jsoup.parser.Tag;\nimport org.jsoup.select.Elements;\nimport org.jsoup.select.Evaluator;\nimport org.jsoup.select.NodeFilter;\nimport org.jsoup.select.NodeVisitor;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class Element_appendTo extends Element_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test000() throws Throwable {\n    Document document0 = Parser.parse(\"\", \"No elements matched the query '%s' in the document.\");\n    document0.hasAttr(\"\");\n    document0.getElementsByIndexLessThan(220);\n    Document document1 = (Document) document0.lastElementSibling();\n    document0.hasAttr(\"\");\n    Node[] nodeArray0 = new Node[0];\n    document1.addChildren(220, nodeArray0);\n    Document document2 = (Document) document0.val(\"No elements matched the query '%s' in the document.\");\n    document1.siblingIndex = 0;\n    document1.dataset();\n    Document document3 = (Document) document0.doClone(document1);\n    document3.appendTo(document0);\n    Document document4 = (Document) document3.clearAttributes();\n    Document document5 = (Document) document4.text(\"\");\n    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(\"No elements matched the query '%s' in the document.\");\n    document4.dataNodes();\n    document0.html(mockPrintWriter0);\n    document5.className();\n    Document document6 = (Document) document2.attr(\"\", true);\n    document6.appendElement(\"noresize\");\n    document3.append(\"**$=,9wy>h\");\n    document0.parents();\n    document3.cssSelector();\n    // Undeclared exception!\n    try {\n        document1.getElementsByAttributeValueNot(\"/N]HG\", \"5kk0>l@i{X*K>\u007f\");\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        //\n        // no message in exception (getMessage() returned null)\n        //\n    }\n}\n}"
    },
    {
        "original_path": "jhy_jsoup###jhy_jsoup/src/test/java/org/jsoup/nodes/ElementTest###testPrependText",
        "generated_path": "Element_prependText.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.jsoup.nodes;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.io.BufferedOutputStream;\nimport java.io.BufferedWriter;\nimport java.io.ByteArrayOutputStream;\nimport java.io.CharArrayWriter;\nimport java.io.File;\nimport java.io.FileDescriptor;\nimport java.io.InputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.PipedOutputStream;\nimport java.io.PrintWriter;\nimport java.io.PushbackInputStream;\nimport java.io.Reader;\nimport java.io.StringReader;\nimport java.io.StringWriter;\nimport java.io.Writer;\nimport java.net.URL;\nimport java.nio.CharBuffer;\nimport java.nio.charset.Charset;\nimport java.nio.charset.IllegalCharsetNameException;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.HashSet;\nimport java.util.LinkedHashSet;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.Stack;\nimport java.util.TreeSet;\nimport java.util.Vector;\nimport java.util.concurrent.LinkedBlockingQueue;\nimport java.util.function.Consumer;\nimport java.util.regex.Pattern;\nimport java.util.regex.PatternSyntaxException;\nimport org.eclipse.jetty.io.LeakTrackingByteBufferPool;\nimport org.eclipse.jetty.io.MappedByteBufferPool;\nimport org.eclipse.jetty.util.IncludeExclude;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.mock.java.io.MockFile;\nimport org.evosuite.runtime.mock.java.io.MockFileInputStream;\nimport org.evosuite.runtime.mock.java.io.MockFileWriter;\nimport org.evosuite.runtime.mock.java.io.MockPrintStream;\nimport org.evosuite.runtime.mock.java.io.MockPrintWriter;\nimport org.evosuite.runtime.mock.java.io.MockRandomAccessFile;\nimport org.evosuite.runtime.mock.java.net.MockURL;\nimport org.evosuite.runtime.testdata.EvoSuiteFile;\nimport org.evosuite.runtime.testdata.FileSystemHandling;\nimport org.jsoup.Connection;\nimport org.jsoup.helper.HttpConnection;\nimport org.jsoup.nodes.Attribute;\nimport org.jsoup.nodes.Attributes;\nimport org.jsoup.nodes.CDataNode;\nimport org.jsoup.nodes.Comment;\nimport org.jsoup.nodes.DataNode;\nimport org.jsoup.nodes.Document;\nimport org.jsoup.nodes.DocumentType;\nimport org.jsoup.nodes.Element;\nimport org.jsoup.nodes.Entities;\nimport org.jsoup.nodes.FormElement;\nimport org.jsoup.nodes.LeafNode;\nimport org.jsoup.nodes.Node;\nimport org.jsoup.nodes.PseudoTextElement;\nimport org.jsoup.nodes.TextNode;\nimport org.jsoup.nodes.XmlDeclaration;\nimport org.jsoup.parser.ParseSettings;\nimport org.jsoup.parser.Parser;\nimport org.jsoup.parser.Tag;\nimport org.jsoup.select.Elements;\nimport org.jsoup.select.Evaluator;\nimport org.jsoup.select.NodeFilter;\nimport org.jsoup.select.NodeVisitor;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class Element_prependText extends Element_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void Element_prependText() throws Throwable {\n    Document document0 = new Document(\"ApXIsLop\");\n    Element element0 = document0.text(\"\");\n    document0.prependText(\"~9q\\\"c7P\u007fH;||JY{}6\");\n    Document document1 = (Document) element0.removeAttr(\"~9q\\\"c7P\u007fH;||JY{}6\");\n    element0.getElementsByAttributeValueNot(\"ApXIsLop\", \"~9q\\\"c7P\u007fH;||JY{}6\");\n    MockFile mockFile0 = new MockFile(\"qC\");\n    MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, false);\n    int int0 = 46;\n    Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();\n    String string0 = \"\";\n    document1.getElementsByIndexEquals(46);\n    // Undeclared exception!\n    try {\n        document0.select((Evaluator) null);\n        fail(\"Expecting exception: IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n        //\n        // Object must not be null\n        //\n        verifyException(\"org.jsoup.helper.Validate\", e);\n    }\n}\n}"
    },
    {
        "original_path": "haraldk_TwelveMonkeys###haraldk_TwelveMonkeys/common/common-io/src/test/java/com/twelvemonkeys/io/LittleEndianDataInputStreamTest###testReadInt",
        "generated_path": "LittleEndianDataInputStream_readInt.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.twelvemonkeys.io;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.twelvemonkeys.io.LittleEndianDataInputStream;\nimport java.io.BufferedInputStream;\nimport java.io.ByteArrayInputStream;\nimport java.io.DataInputStream;\nimport java.io.EOFException;\nimport java.io.FilterInputStream;\nimport java.io.IOException;\nimport java.io.PipedInputStream;\nimport java.io.PushbackInputStream;\nimport java.io.SequenceInputStream;\nimport java.io.UTFDataFormatException;\nimport java.util.Enumeration;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.mock.java.io.MockFileInputStream;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class LittleEndianDataInputStream_readInt extends LittleEndianDataInputStream_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    byte[] byteArray0 = new byte[7];\n    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);\n    LittleEndianDataInputStream littleEndianDataInputStream0 = new LittleEndianDataInputStream(byteArrayInputStream0);\n    int int0 = littleEndianDataInputStream0.readInt();\n    assertEquals(0, int0);\n}\n}"
    },
    {
        "original_path": "haraldk_TwelveMonkeys###haraldk_TwelveMonkeys/imageio/imageio-clippath/src/test/java/com/twelvemonkeys/imageio/path/PathsTest###testReadClipped",
        "generated_path": "Paths_readClipped.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.twelvemonkeys.imageio.path;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.twelvemonkeys.imageio.path.Paths;\nimport java.awt.Shape;\nimport java.awt.geom.Path2D;\nimport java.awt.geom.Rectangle2D;\nimport java.awt.image.BufferedImage;\nimport java.awt.image.RenderedImage;\nimport java.io.BufferedInputStream;\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.SequenceInputStream;\nimport javax.imageio.stream.ImageOutputStream;\nimport javax.imageio.stream.MemoryCacheImageInputStream;\nimport javax.imageio.stream.MemoryCacheImageOutputStream;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.io.MockPrintStream;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class Paths_readClipped extends Paths_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test4() throws Throwable {\n    byte[] byteArray0 = new byte[8];\n    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte) 118);\n    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);\n    BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);\n    MemoryCacheImageInputStream memoryCacheImageInputStream0 = new MemoryCacheImageInputStream(bufferedInputStream0);\n    BufferedImage bufferedImage0 = Paths.readClipped(memoryCacheImageInputStream0);\n    assertNull(bufferedImage0);\n}\n}"
    },
    {
        "original_path": "haraldk_TwelveMonkeys###haraldk_TwelveMonkeys/imageio/imageio-core/src/test/java/com/twelvemonkeys/imageio/stream/BufferedChannelImageInputStreamTest###testRead",
        "generated_path": "BufferedChannelImageInputStream_read.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.twelvemonkeys.imageio.stream;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.twelvemonkeys.imageio.stream.BufferedChannelImageInputStream;\nimport com.twelvemonkeys.imageio.stream.Cache;\nimport com.twelvemonkeys.imageio.stream.MemoryCache;\nimport java.io.ByteArrayInputStream;\nimport java.io.EOFException;\nimport java.io.File;\nimport java.io.FileDescriptor;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.io.PipedInputStream;\nimport java.io.RandomAccessFile;\nimport java.io.SequenceInputStream;\nimport java.nio.ByteOrder;\nimport java.nio.channels.FileChannel;\nimport java.nio.file.AccessDeniedException;\nimport java.nio.file.NoSuchFileException;\nimport java.nio.file.Path;\nimport java.util.Enumeration;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.mock.java.io.MockFile;\nimport org.evosuite.runtime.mock.java.io.MockFileInputStream;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class BufferedChannelImageInputStream_read extends BufferedChannelImageInputStream_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    Enumeration<FileInputStream> enumeration0 = (Enumeration<FileInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());\n    doReturn(false).when(enumeration0).hasMoreElements();\n    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);\n    MemoryCache memoryCache0 = new MemoryCache(sequenceInputStream0);\n    BufferedChannelImageInputStream bufferedChannelImageInputStream0 = new BufferedChannelImageInputStream(memoryCache0);\n    int int0 = bufferedChannelImageInputStream0.read();\n    assertEquals((-1), int0);\n}\n}"
    },
    {
        "original_path": "haraldk_TwelveMonkeys###haraldk_TwelveMonkeys/imageio/imageio-metadata/src/test/java/com/twelvemonkeys/imageio/metadata/tiff/RationalTest###testPlus",
        "generated_path": "Rational_plus.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "package org.jcodec.common.model;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.jcodec.common.model.Rational;\nimport org.jcodec.common.model.RationalLarge;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class Rational_plus extends Rational_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test033() throws Throwable {\n    Rational rational0 = new Rational((-1186), 32);\n    Rational rational1 = Rational.ZERO;\n    Rational rational2 = rational0.ZERO.plus(rational1);\n    assertTrue(rational2.equals((Object) rational1));\n    assertEquals((-1186), rational0.num);\n}\n}"
    },
    {
        "original_path": "haraldk_TwelveMonkeys###haraldk_TwelveMonkeys/common/common-image/src/test/java/com/twelvemonkeys/image/ImageUtilTest###testBrightness",
        "generated_path": "ImageUtil_brightness.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.twelvemonkeys.image;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.twelvemonkeys.image.ImageUtil;\nimport java.awt.Color;\nimport java.awt.GraphicsConfiguration;\nimport java.awt.Image;\nimport java.awt.SystemColor;\nimport java.awt.image.BufferedImage;\nimport java.awt.image.ColorModel;\nimport java.awt.image.IndexColorModel;\nimport java.awt.image.PixelGrabber;\nimport java.awt.image.RenderedImage;\nimport java.io.InputStream;\nimport java.io.PushbackInputStream;\nimport javax.swing.tree.DefaultTreeCellRenderer;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class ImageUtil_brightness extends ImageUtil_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    ImageUtil.brightness((Image) null, 0.0F);\n}\n}"
    },
    {
        "original_path": "haraldk_TwelveMonkeys###haraldk_TwelveMonkeys/imageio/imageio-core/src/test/java/com/twelvemonkeys/imageio/stream/BufferedFileImageInputStreamTest###testRead",
        "generated_path": "BufferedFileImageInputStream_read.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.twelvemonkeys.imageio.stream;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.twelvemonkeys.imageio.stream.BufferedFileImageInputStream;\nimport java.io.EOFException;\nimport java.io.IOException;\nimport java.io.RandomAccessFile;\nimport java.nio.ByteOrder;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.mock.java.io.MockFile;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class BufferedFileImageInputStream_read extends BufferedFileImageInputStream_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    RandomAccessFile randomAccessFile0 = mock(RandomAccessFile.class, new ViolatedAssumptionAnswer());\n    doReturn(8).when(randomAccessFile0).read(any(byte[].class), anyInt(), anyInt());\n    BufferedFileImageInputStream bufferedFileImageInputStream0 = new BufferedFileImageInputStream(randomAccessFile0);\n    bufferedFileImageInputStream0.readUnsignedShort();\n    int int0 = bufferedFileImageInputStream0.read();\n    assertEquals(0, int0);\n}\n}"
    },
    {
        "original_path": "haraldk_TwelveMonkeys###haraldk_TwelveMonkeys/contrib/src/test/java/com/twelvemonkeys/contrib/tiff/TIFFUtilitiesTest###testSplit",
        "generated_path": "TIFFUtilities_split.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.twelvemonkeys.contrib.tiff;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.twelvemonkeys.contrib.tiff.TIFFUtilities;\nimport java.io.DataInputStream;\nimport java.io.File;\nimport java.io.InputStream;\nimport java.io.PushbackInputStream;\nimport java.util.List;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.Future;\nimport java.util.concurrent.TimeUnit;\nimport javax.imageio.stream.ImageOutputStream;\nimport javax.imageio.stream.MemoryCacheImageInputStream;\nimport javax.imageio.stream.MemoryCacheImageOutputStream;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.io.MockFile;\nimport org.evosuite.runtime.mock.java.io.MockPrintStream;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class TIFFUtilities_split extends TIFFUtilities_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void TIFFUtilities_split() throws Throwable {\n    MockFile mockFile0 = new MockFile(\"9G.([-\", \"9G.([-\");\n    // Undeclared exception!\n    try {\n        TIFFUtilities.split(mockFile0, mockFile0);\n        fail(\"Expecting exception: IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n        //\n        // input may not be null\n        //\n        verifyException(\"com.twelvemonkeys.lang.Validate\", e);\n    }\n}\n}"
    },
    {
        "original_path": "haraldk_TwelveMonkeys###haraldk_TwelveMonkeys/imageio/imageio-metadata/src/test/java/com/twelvemonkeys/imageio/metadata/iptc/IPTCWriterTest###testWrite",
        "generated_path": "IPTCWriter_write.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.twelvemonkeys.imageio.metadata.iptc;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.twelvemonkeys.imageio.metadata.Directory;\nimport com.twelvemonkeys.imageio.metadata.Entry;\nimport com.twelvemonkeys.imageio.metadata.iptc.IPTCWriter;\nimport java.util.Iterator;\nimport javax.imageio.stream.ImageOutputStream;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class IPTCWriter_write extends IPTCWriter_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test1() throws Throwable {\n    IPTCWriter iPTCWriter0 = new IPTCWriter();\n    Iterator<Entry> iterator0 = (Iterator<Entry>) mock(Iterator.class, new ViolatedAssumptionAnswer());\n    doReturn(false).when(iterator0).hasNext();\n    Directory directory0 = mock(Directory.class, new ViolatedAssumptionAnswer());\n    doReturn(iterator0).when(directory0).iterator();\n    ImageOutputStream imageOutputStream0 = mock(ImageOutputStream.class, new ViolatedAssumptionAnswer());\n    boolean boolean0 = iPTCWriter0.write(directory0, imageOutputStream0);\n    assertFalse(boolean0);\n}\n}"
    },
    {
        "original_path": "haraldk_TwelveMonkeys###haraldk_TwelveMonkeys/common/common-lang/src/test/java/com/twelvemonkeys/lang/StringUtilTest###testIsEmpty",
        "generated_path": "StringUtil_isEmpty.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "package tk.mybatis.mapper.util;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport tk.mybatis.mapper.code.Style;\nimport tk.mybatis.mapper.util.StringUtil;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class StringUtil_isEmpty extends StringUtil_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test20() throws Throwable {\n    boolean boolean0 = StringUtil.isEmpty(\"\");\n    assertTrue(boolean0);\n}\n}"
    },
    {
        "original_path": "haraldk_TwelveMonkeys###haraldk_TwelveMonkeys/imageio/imageio-core/src/test/java/com/twelvemonkeys/imageio/stream/BufferedImageInputStreamTest###testReadBits",
        "generated_path": "BufferedImageInputStream_readBits.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.twelvemonkeys.imageio.stream;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.twelvemonkeys.imageio.stream.BufferedImageInputStream;\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.EOFException;\nimport java.io.FileDescriptor;\nimport java.io.IOException;\nimport java.io.PipedInputStream;\nimport java.io.PipedOutputStream;\nimport java.io.PushbackInputStream;\nimport java.io.SequenceInputStream;\nimport javax.imageio.stream.MemoryCacheImageInputStream;\nimport javax.imageio.stream.MemoryCacheImageOutputStream;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.io.MockFileInputStream;\nimport org.evosuite.runtime.mock.java.io.MockFileOutputStream;\nimport org.evosuite.runtime.mock.java.io.MockPrintStream;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class BufferedImageInputStream_readBits extends BufferedImageInputStream_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    byte[] byteArray0 = new byte[16];\n    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);\n    MemoryCacheImageInputStream memoryCacheImageInputStream0 = new MemoryCacheImageInputStream(byteArrayInputStream0);\n    BufferedImageInputStream bufferedImageInputStream0 = new BufferedImageInputStream(memoryCacheImageInputStream0);\n    long long0 = bufferedImageInputStream0.readBits((byte) 24);\n    assertEquals(0, byteArrayInputStream0.available());\n    assertEquals(0L, long0);\n}\n}"
    },
    {
        "original_path": "haraldk_TwelveMonkeys###haraldk_TwelveMonkeys/imageio/imageio-core/src/test/java/com/twelvemonkeys/imageio/stream/DirectImageInputStreamTest###testRead",
        "generated_path": "DirectImageInputStream_read.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.twelvemonkeys.imageio.stream;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.twelvemonkeys.imageio.stream.DirectImageInputStream;\nimport java.io.ByteArrayInputStream;\nimport java.io.PipedInputStream;\nimport java.io.PipedOutputStream;\nimport java.io.SequenceInputStream;\nimport java.util.Enumeration;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.mock.java.io.MockFileInputStream;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class DirectImageInputStream_read extends DirectImageInputStream_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    byte[] byteArray0 = new byte[4];\n    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);\n    DirectImageInputStream directImageInputStream0 = new DirectImageInputStream(byteArrayInputStream0, (byte) 92);\n    directImageInputStream0.read();\n    assertEquals(1L, directImageInputStream0.getFlushedPosition());\n}\n}"
    },
    {
        "original_path": "haraldk_TwelveMonkeys###haraldk_TwelveMonkeys/imageio/imageio-core/src/test/java/com/twelvemonkeys/imageio/color/ColorProfilesTest###testIsOffendingColorProfile",
        "generated_path": "ColorProfiles_isOffendingColorProfile.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.twelvemonkeys.imageio.color;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.twelvemonkeys.imageio.color.ColorProfiles;\nimport java.awt.color.ICC_Profile;\nimport java.io.BufferedInputStream;\nimport java.io.FileDescriptor;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.io.MockFileInputStream;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class ColorProfiles_isOffendingColorProfile extends ColorProfiles_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    ICC_Profile iCC_Profile0 = ICC_Profile.getInstance(1001);\n    boolean boolean0 = ColorProfiles.isOffendingColorProfile(iCC_Profile0);\n    assertFalse(boolean0);\n}\n}"
    },
    {
        "original_path": "haraldk_TwelveMonkeys###haraldk_TwelveMonkeys/imageio/imageio-core/src/test/java/com/twelvemonkeys/imageio/stream/BufferedFileImageInputStreamTest###testClose",
        "generated_path": "BufferedFileImageInputStream_close.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.twelvemonkeys.imageio.stream;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.twelvemonkeys.imageio.stream.BufferedFileImageInputStream;\nimport java.io.EOFException;\nimport java.io.IOException;\nimport java.io.RandomAccessFile;\nimport java.nio.ByteOrder;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.mock.java.io.MockFile;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class BufferedFileImageInputStream_close extends BufferedFileImageInputStream_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    RandomAccessFile randomAccessFile0 = mock(RandomAccessFile.class, new ViolatedAssumptionAnswer());\n    BufferedFileImageInputStream bufferedFileImageInputStream0 = new BufferedFileImageInputStream(randomAccessFile0);\n    bufferedFileImageInputStream0.close();\n}\n}"
    },
    {
        "original_path": "haraldk_TwelveMonkeys###haraldk_TwelveMonkeys/imageio/imageio-core/src/test/java/com/twelvemonkeys/imageio/stream/ByteArrayImageInputStreamTest###testRead",
        "generated_path": "ByteArrayImageInputStream_read.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.twelvemonkeys.imageio.stream;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.twelvemonkeys.imageio.stream.ByteArrayImageInputStream;\nimport java.io.EOFException;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class ByteArrayImageInputStream_read extends ByteArrayImageInputStream_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test2() throws Throwable {\n    byte[] byteArray0 = new byte[0];\n    ByteArrayImageInputStream byteArrayImageInputStream0 = new ByteArrayImageInputStream(byteArray0);\n    int int0 = byteArrayImageInputStream0.read();\n    assertEquals((-1), int0);\n}\n}"
    },
    {
        "original_path": "haraldk_TwelveMonkeys###haraldk_TwelveMonkeys/imageio/imageio-core/src/test/java/com/twelvemonkeys/imageio/stream/BufferedImageInputStreamTest###testReadBit",
        "generated_path": "BufferedImageInputStream_readBit.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.twelvemonkeys.imageio.stream;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.twelvemonkeys.imageio.stream.BufferedImageInputStream;\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.EOFException;\nimport java.io.FileDescriptor;\nimport java.io.IOException;\nimport java.io.PipedInputStream;\nimport java.io.PipedOutputStream;\nimport java.io.PushbackInputStream;\nimport java.io.SequenceInputStream;\nimport javax.imageio.stream.MemoryCacheImageInputStream;\nimport javax.imageio.stream.MemoryCacheImageOutputStream;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.io.MockFileInputStream;\nimport org.evosuite.runtime.mock.java.io.MockFileOutputStream;\nimport org.evosuite.runtime.mock.java.io.MockPrintStream;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class BufferedImageInputStream_readBit extends BufferedImageInputStream_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    byte[] byteArray0 = new byte[16];\n    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);\n    MemoryCacheImageInputStream memoryCacheImageInputStream0 = new MemoryCacheImageInputStream(byteArrayInputStream0);\n    BufferedImageInputStream bufferedImageInputStream0 = new BufferedImageInputStream(memoryCacheImageInputStream0);\n    int int0 = bufferedImageInputStream0.readBit();\n    assertEquals(0, byteArrayInputStream0.available());\n    assertEquals(0, int0);\n}\n}"
    },
    {
        "original_path": "haraldk_TwelveMonkeys###haraldk_TwelveMonkeys/common/common-io/src/test/java/com/twelvemonkeys/io/LittleEndianDataInputStreamTest###testReadBoolean",
        "generated_path": "LittleEndianDataInputStream_readBoolean.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.twelvemonkeys.io;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.twelvemonkeys.io.LittleEndianDataInputStream;\nimport java.io.BufferedInputStream;\nimport java.io.ByteArrayInputStream;\nimport java.io.DataInputStream;\nimport java.io.EOFException;\nimport java.io.FilterInputStream;\nimport java.io.IOException;\nimport java.io.PipedInputStream;\nimport java.io.PushbackInputStream;\nimport java.io.SequenceInputStream;\nimport java.io.UTFDataFormatException;\nimport java.util.Enumeration;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.mock.java.io.MockFileInputStream;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class LittleEndianDataInputStream_readBoolean extends LittleEndianDataInputStream_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    byte[] byteArray0 = new byte[3];\n    byteArray0[0] = (byte) 65;\n    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);\n    LittleEndianDataInputStream littleEndianDataInputStream0 = new LittleEndianDataInputStream(byteArrayInputStream0);\n    boolean boolean0 = littleEndianDataInputStream0.readBoolean();\n    assertTrue(boolean0);\n}\n}"
    },
    {
        "original_path": "haraldk_TwelveMonkeys###haraldk_TwelveMonkeys/servlet/src/test/java/com/twelvemonkeys/servlet/image/IIOProviderContextListenerTest###testContextDestroyed",
        "generated_path": "IIOProviderContextListener_contextDestroyed.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.twelvemonkeys.servlet.image;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.twelvemonkeys.servlet.image.IIOProviderContextListener;\nimport javax.servlet.ServletContext;\nimport javax.servlet.ServletContextEvent;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class IIOProviderContextListener_contextDestroyed extends IIOProviderContextListener_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test1() throws Throwable {\n    IIOProviderContextListener iIOProviderContextListener0 = new IIOProviderContextListener();\n    ServletContext servletContext0 = mock(ServletContext.class, new ViolatedAssumptionAnswer());\n    ServletContextEvent servletContextEvent0 = new ServletContextEvent(servletContext0);\n    iIOProviderContextListener0.contextDestroyed(servletContextEvent0);\n}\n}"
    },
    {
        "original_path": "haraldk_TwelveMonkeys###haraldk_TwelveMonkeys/common/common-io/src/test/java/com/twelvemonkeys/io/LittleEndianDataInputStreamTest###testReadShort",
        "generated_path": "LittleEndianDataInputStream_readShort.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.twelvemonkeys.io;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.twelvemonkeys.io.LittleEndianDataInputStream;\nimport java.io.BufferedInputStream;\nimport java.io.ByteArrayInputStream;\nimport java.io.DataInputStream;\nimport java.io.EOFException;\nimport java.io.FilterInputStream;\nimport java.io.IOException;\nimport java.io.PipedInputStream;\nimport java.io.PushbackInputStream;\nimport java.io.SequenceInputStream;\nimport java.io.UTFDataFormatException;\nimport java.util.Enumeration;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.mock.java.io.MockFileInputStream;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class LittleEndianDataInputStream_readShort extends LittleEndianDataInputStream_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    byte[] byteArray0 = new byte[8];\n    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);\n    BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);\n    LittleEndianDataInputStream littleEndianDataInputStream0 = new LittleEndianDataInputStream(bufferedInputStream0);\n    short short0 = littleEndianDataInputStream0.readShort();\n    assertEquals((short) 0, short0);\n}\n}"
    },
    {
        "original_path": "haraldk_TwelveMonkeys###haraldk_TwelveMonkeys/imageio/imageio-core/src/test/java/com/twelvemonkeys/imageio/stream/SubImageInputStreamTest###testSeek",
        "generated_path": "SubImageInputStream_seek.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.twelvemonkeys.imageio.stream;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.twelvemonkeys.imageio.stream.SubImageInputStream;\nimport java.io.BufferedOutputStream;\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.EOFException;\nimport java.io.PipedInputStream;\nimport java.io.PipedOutputStream;\nimport javax.imageio.stream.MemoryCacheImageInputStream;\nimport javax.imageio.stream.MemoryCacheImageOutputStream;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.io.MockFileOutputStream;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class SubImageInputStream_seek extends SubImageInputStream_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();\n    MemoryCacheImageOutputStream memoryCacheImageOutputStream0 = new MemoryCacheImageOutputStream(byteArrayOutputStream0);\n    SubImageInputStream subImageInputStream0 = new SubImageInputStream(memoryCacheImageOutputStream0, 0L);\n    subImageInputStream0.seek(0L);\n}\n}"
    },
    {
        "original_path": "haraldk_TwelveMonkeys###haraldk_TwelveMonkeys/imageio/imageio-tiff/src/test/java/com/twelvemonkeys/imageio/plugins/tiff/BitPaddingStreamTest###testSkip",
        "generated_path": "BitPaddingStream_skip.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.twelvemonkeys.imageio.plugins.tiff;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.twelvemonkeys.imageio.plugins.tiff.BitPaddingStream;\nimport java.io.BufferedInputStream;\nimport java.io.ByteArrayInputStream;\nimport java.io.DataInputStream;\nimport java.io.FileDescriptor;\nimport java.io.InputStream;\nimport java.io.PipedInputStream;\nimport java.io.PipedOutputStream;\nimport java.io.PushbackInputStream;\nimport java.io.SequenceInputStream;\nimport java.nio.BufferUnderflowException;\nimport java.nio.ByteOrder;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.io.MockFileInputStream;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class BitPaddingStream_skip extends BitPaddingStream_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    PipedInputStream pipedInputStream0 = new PipedInputStream(22);\n    BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 22);\n    ByteOrder byteOrder0 = ByteOrder.nativeOrder();\n    BitPaddingStream bitPaddingStream0 = new BitPaddingStream(bufferedInputStream0, 0, 22, 0, byteOrder0);\n    long long0 = bitPaddingStream0.skip(22);\n    assertEquals(0L, long0);\n}\n}"
    },
    {
        "original_path": "haraldk_TwelveMonkeys###haraldk_TwelveMonkeys/common/common-io/src/test/java/com/twelvemonkeys/io/LittleEndianDataInputStreamTest###testReadUnsignedShort",
        "generated_path": "LittleEndianDataInputStream_readUnsignedShort.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.twelvemonkeys.io;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.twelvemonkeys.io.LittleEndianDataInputStream;\nimport java.io.BufferedInputStream;\nimport java.io.ByteArrayInputStream;\nimport java.io.DataInputStream;\nimport java.io.EOFException;\nimport java.io.FilterInputStream;\nimport java.io.IOException;\nimport java.io.PipedInputStream;\nimport java.io.PushbackInputStream;\nimport java.io.SequenceInputStream;\nimport java.io.UTFDataFormatException;\nimport java.util.Enumeration;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.mock.java.io.MockFileInputStream;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class LittleEndianDataInputStream_readUnsignedShort extends LittleEndianDataInputStream_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void LittleEndianDataInputStream_readUnsignedShort() throws Throwable {\n    Enumeration<MockFileInputStream> enumeration0 = (Enumeration<MockFileInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());\n    doReturn(false).when(enumeration0).hasMoreElements();\n    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);\n    LittleEndianDataInputStream littleEndianDataInputStream0 = new LittleEndianDataInputStream(sequenceInputStream0);\n    try {\n        littleEndianDataInputStream0.readUnsignedShort();\n        fail(\"Expecting exception: EOFException\");\n    } catch (EOFException e) {\n        //\n        // no message in exception (getMessage() returned null)\n        //\n        verifyException(\"com.twelvemonkeys.io.LittleEndianDataInputStream\", e);\n    }\n}\n}"
    },
    {
        "original_path": "haraldk_TwelveMonkeys###haraldk_TwelveMonkeys/imageio/imageio-tiff/src/test/java/com/twelvemonkeys/imageio/plugins/tiff/TIFFImageMetadataTest###testSetFromTree",
        "generated_path": "TIFFImageMetadata_setFromTree.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.twelvemonkeys.imageio.plugins.tiff;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.twelvemonkeys.imageio.metadata.Directory;\nimport com.twelvemonkeys.imageio.metadata.Entry;\nimport com.twelvemonkeys.imageio.plugins.tiff.TIFFImageMetadata;\nimport java.util.Collection;\nimport java.util.Iterator;\nimport javax.imageio.metadata.IIOMetadataNode;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class TIFFImageMetadata_setFromTree extends TIFFImageMetadata_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test18() throws Throwable {\n    TIFFImageMetadata tIFFImageMetadata0 = new TIFFImageMetadata();\n    IIOMetadataNode iIOMetadataNode0 = tIFFImageMetadata0.getNativeTree();\n    tIFFImageMetadata0.setFromTree(\"com_sun_media_imageio_plugins_tiff_image_1.0\", iIOMetadataNode0);\n    assertFalse(tIFFImageMetadata0.isReadOnly());\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/net/NetUtilTest###isInRangeTest",
        "generated_path": "NetUtil_isInRange.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package cn.hutool.core.net;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.lang.Filter;\nimport cn.hutool.core.net.NetUtil;\nimport cn.hutool.core.net.PassAuth;\nimport cn.hutool.core.net.UserPassAuthenticator;\nimport java.math.BigInteger;\nimport java.net.Authenticator;\nimport java.net.Inet6Address;\nimport java.net.InetAddress;\nimport java.net.InetSocketAddress;\nimport java.net.NetworkInterface;\nimport java.nio.ByteBuffer;\nimport java.util.LinkedHashSet;\nimport java.util.Set;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.Future;\nimport java.util.concurrent.TimeUnit;\nimport java.util.function.Consumer;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.mock.java.net.MockInetAddress;\nimport org.evosuite.runtime.mock.java.net.MockInetSocketAddress;\nimport org.evosuite.runtime.mock.java.net.MockNetworkInterface;\nimport org.evosuite.runtime.mock.java.util.MockRandom;\nimport org.evosuite.runtime.testdata.EvoSuiteLocalAddress;\nimport org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;\nimport org.evosuite.runtime.testdata.NetworkHandling;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class NetUtil_isInRange extends NetUtil_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void NetUtil_isInRange() throws Throwable {\n    NetUtil.longToIpv4(1343L);\n    NetUtil.isUsableLocalPort((-586));\n    String string0 = \"Ez_64GP_6wuWmX P*}/\";\n    // Undeclared exception!\n    try {\n        NetUtil.isInRange(\"0.0.5.63\", \"Ez_64GP_6wuWmX P*}/\");\n        fail(\"Expecting exception: NumberFormatException\");\n    } catch (NumberFormatException e) {\n        //\n        // For input string: \\\"\\\"\n        //\n        verifyException(\"java.lang.NumberFormatException\", e);\n    }\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/img/ImgTest###scaleTest",
        "generated_path": "Img_scale.java",
        "Compile_result": 1,
        "Test_result": 0,
        "Gen_Test": "package cn.hutool.core.img;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.img.Img;\nimport cn.hutool.core.io.resource.BytesResource;\nimport cn.hutool.core.io.resource.CharSequenceResource;\nimport cn.hutool.core.io.resource.ClassPathResource;\nimport cn.hutool.core.io.resource.FileResource;\nimport cn.hutool.core.io.resource.InputStreamResource;\nimport cn.hutool.core.io.resource.MultiFileResource;\nimport cn.hutool.core.io.resource.MultiResource;\nimport cn.hutool.core.io.resource.Resource;\nimport cn.hutool.core.io.resource.StringResource;\nimport cn.hutool.core.io.resource.UrlResource;\nimport cn.hutool.core.io.resource.VfsResource;\nimport java.awt.BasicStroke;\nimport java.awt.Button;\nimport java.awt.Color;\nimport java.awt.ComponentOrientation;\nimport java.awt.Dimension;\nimport java.awt.Font;\nimport java.awt.Frame;\nimport java.awt.Graphics;\nimport java.awt.GraphicsConfiguration;\nimport java.awt.Image;\nimport java.awt.Point;\nimport java.awt.Rectangle;\nimport java.awt.RenderingHints;\nimport java.awt.ScrollPane;\nimport java.awt.Stroke;\nimport java.awt.SystemColor;\nimport java.awt.TextArea;\nimport java.awt.color.ColorSpace;\nimport java.awt.color.ICC_ColorSpace;\nimport java.awt.color.ICC_Profile;\nimport java.awt.event.InputMethodEvent;\nimport java.awt.event.MouseEvent;\nimport java.awt.font.TextHitInfo;\nimport java.awt.geom.AffineTransform;\nimport java.awt.geom.Dimension2D;\nimport java.awt.geom.Point2D;\nimport java.awt.geom.Rectangle2D;\nimport java.awt.image.AffineTransformOp;\nimport java.awt.image.BufferedImage;\nimport java.awt.image.ColorConvertOp;\nimport java.awt.image.ColorModel;\nimport java.awt.image.ConvolveOp;\nimport java.awt.image.DataBuffer;\nimport java.awt.image.DataBufferDouble;\nimport java.awt.image.DirectColorModel;\nimport java.awt.image.IndexColorModel;\nimport java.awt.image.Kernel;\nimport java.awt.image.Raster;\nimport java.awt.image.RasterFormatException;\nimport java.awt.image.RescaleOp;\nimport java.awt.image.TileObserver;\nimport java.awt.image.WritableRaster;\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.DataOutputStream;\nimport java.io.File;\nimport java.io.FileDescriptor;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.io.PipedInputStream;\nimport java.io.PipedOutputStream;\nimport java.io.PrintStream;\nimport java.io.SequenceInputStream;\nimport java.net.URI;\nimport java.net.URL;\nimport java.nio.charset.Charset;\nimport java.nio.file.Path;\nimport java.text.AttributedCharacterIterator;\nimport java.time.Month;\nimport java.util.Enumeration;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.Hashtable;\nimport java.util.LinkedHashSet;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.Stack;\nimport java.util.Vector;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.Future;\nimport java.util.concurrent.TimeUnit;\nimport javax.imageio.stream.FileImageInputStream;\nimport javax.imageio.stream.FileImageOutputStream;\nimport javax.imageio.stream.ImageInputStream;\nimport javax.imageio.stream.ImageOutputStream;\nimport javax.imageio.stream.MemoryCacheImageInputStream;\nimport javax.imageio.stream.MemoryCacheImageOutputStream;\nimport javax.swing.Box;\nimport javax.swing.DebugGraphics;\nimport javax.swing.DefaultComboBoxModel;\nimport javax.swing.JEditorPane;\nimport javax.swing.JFormattedTextField;\nimport javax.swing.JFrame;\nimport javax.swing.JInternalFrame;\nimport javax.swing.JList;\nimport javax.swing.JOptionPane;\nimport javax.swing.JPasswordField;\nimport javax.swing.JScrollPane;\nimport javax.swing.JTabbedPane;\nimport javax.swing.JTable;\nimport javax.swing.JTextPane;\nimport javax.swing.JToolBar;\nimport javax.swing.JTree;\nimport javax.swing.JViewport;\nimport javax.swing.plaf.basic.BasicEditorPaneUI;\nimport javax.swing.plaf.metal.MetalTabbedPaneUI;\nimport javax.swing.plaf.multi.MultiLabelUI;\nimport javax.swing.plaf.multi.MultiTabbedPaneUI;\nimport javax.swing.plaf.synth.SynthTreeUI;\nimport javax.swing.table.DefaultTableModel;\nimport javax.swing.text.DefaultCaret;\nimport javax.swing.text.DefaultStyledDocument;\nimport javax.swing.text.Element;\nimport javax.swing.text.JTextComponent;\nimport javax.swing.text.LabelView;\nimport javax.swing.text.MutableAttributeSet;\nimport javax.swing.text.Position;\nimport javax.swing.text.Segment;\nimport javax.swing.text.StringContent;\nimport javax.swing.text.Style;\nimport javax.swing.text.StyleContext;\nimport javax.swing.text.StyledEditorKit;\nimport javax.swing.tree.DefaultTreeCellRenderer;\nimport javax.swing.tree.FixedHeightLayoutCache;\nimport javax.swing.tree.TreePath;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.mock.java.io.MockFile;\nimport org.evosuite.runtime.mock.java.io.MockFileInputStream;\nimport org.evosuite.runtime.mock.java.io.MockFileOutputStream;\nimport org.evosuite.runtime.mock.java.io.MockPrintStream;\nimport org.evosuite.runtime.mock.java.io.MockRandomAccessFile;\nimport org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;\nimport org.evosuite.runtime.mock.java.net.MockURI;\nimport org.evosuite.runtime.mock.java.net.MockURL;\nimport org.evosuite.runtime.testdata.EvoSuiteFile;\nimport org.evosuite.runtime.testdata.EvoSuiteURL;\nimport org.evosuite.runtime.testdata.FileSystemHandling;\nimport org.evosuite.runtime.testdata.NetworkHandling;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class Img_scale extends Img_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test005() throws Throwable {\n    FileSystemHandling.appendLineToFile((EvoSuiteFile) null, \"nKf.M0!k)88\");\n    Img img0 = new Img((BufferedImage) null, \"*?I%-\u007fhQmQeGa+}\u007fc\");\n    int int0 = (-507);\n    Img img1 = img0.setQuality((double) (-507));\n    MockFile mockFile0 = new MockFile((String) null, \"OutputStream is null !\");\n    Path path0 = mockFile0.toPath();\n    Img.from(path0);\n    SystemColor systemColor0 = SystemColor.infoText;\n    img0.setBackgroundColor(systemColor0);\n    img1.scale(int0, int0, int0);\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/NumberUtilTest###parseLongTest",
        "generated_path": "NumberUtil_parseLong.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package cn.hutool.core.util;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.util.NumberUtil;\nimport java.math.BigDecimal;\nimport java.math.BigInteger;\nimport java.math.MathContext;\nimport java.math.RoundingMode;\nimport java.text.DecimalFormat;\nimport java.text.DecimalFormatSymbols;\nimport java.util.Collection;\nimport java.util.LinkedHashSet;\nimport java.util.LinkedList;\nimport java.util.function.Consumer;\nimport java.util.function.UnaryOperator;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.Random;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.mock.java.util.MockRandom;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class NumberUtil_parseLong extends NumberUtil_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test163() throws Throwable {\n    boolean boolean0 = NumberUtil.isLong(\"Foo\");\n    assertFalse(boolean0);\n    boolean boolean1 = NumberUtil.isBeside(1584L, 1584L);\n    assertTrue(boolean1 == boolean0);\n    assertFalse(boolean1);\n    double double0 = NumberUtil.sub(1.0F, (-1.0F));\n    assertEquals(2.0, double0, 0.01);\n    boolean boolean2 = NumberUtil.isEven((-1900));\n    assertFalse(boolean2 == boolean0);\n    assertFalse(boolean2 == boolean1);\n    assertTrue(boolean2);\n    long long0 = NumberUtil.parseLong(\"2ny,BP\");\n    assertEquals(2L, long0);\n    Double double1 = new Double((-1.0));\n    assertNotNull(double1);\n    assertNotEquals((double) double1, (double) double0, 0.01);\n    assertEquals((-1.0), (double) double1, 0.01);\n    String string0 = NumberUtil.roundStr(1.0, (-1724));\n    assertNotNull(string0);\n    assertEquals(\"1\", string0);\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/io/unit/DataSizeUtilTest###formatTest",
        "generated_path": "DataSizeUtil_format.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package cn.hutool.core.io.unit;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.io.unit.DataSizeUtil;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class DataSizeUtil_format extends DataSizeUtil_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test0() throws Throwable {\n    String string0 = DataSizeUtil.format(1259L);\n    assertEquals(\"1.23 KB\", string0);\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/NumberUtilTest###isLongTest",
        "generated_path": "NumberUtil_isLong.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package cn.hutool.core.util;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.util.NumberUtil;\nimport java.math.BigDecimal;\nimport java.math.BigInteger;\nimport java.math.MathContext;\nimport java.math.RoundingMode;\nimport java.text.DecimalFormat;\nimport java.text.DecimalFormatSymbols;\nimport java.util.Collection;\nimport java.util.LinkedHashSet;\nimport java.util.LinkedList;\nimport java.util.function.Consumer;\nimport java.util.function.UnaryOperator;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.Random;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.mock.java.util.MockRandom;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class NumberUtil_isLong extends NumberUtil_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test163() throws Throwable {\n    boolean boolean0 = NumberUtil.isLong(\"Foo\");\n    assertFalse(boolean0);\n    boolean boolean1 = NumberUtil.isBeside(1584L, 1584L);\n    assertTrue(boolean1 == boolean0);\n    assertFalse(boolean1);\n    double double0 = NumberUtil.sub(1.0F, (-1.0F));\n    assertEquals(2.0, double0, 0.01);\n    boolean boolean2 = NumberUtil.isEven((-1900));\n    assertFalse(boolean2 == boolean0);\n    assertFalse(boolean2 == boolean1);\n    assertTrue(boolean2);\n    long long0 = NumberUtil.parseLong(\"2ny,BP\");\n    assertEquals(2L, long0);\n    Double double1 = new Double((-1.0));\n    assertNotNull(double1);\n    assertNotEquals((double) double1, (double) double0, 0.01);\n    assertEquals((-1.0), (double) double1, 0.01);\n    String string0 = NumberUtil.roundStr(1.0, (-1724));\n    assertNotNull(string0);\n    assertEquals(\"1\", string0);\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/NumberUtilTest###isIntegerTest",
        "generated_path": "NumberUtil_isInteger.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package cn.hutool.core.util;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.util.NumberUtil;\nimport java.math.BigDecimal;\nimport java.math.BigInteger;\nimport java.math.MathContext;\nimport java.math.RoundingMode;\nimport java.text.DecimalFormat;\nimport java.text.DecimalFormatSymbols;\nimport java.util.Collection;\nimport java.util.LinkedHashSet;\nimport java.util.LinkedList;\nimport java.util.function.Consumer;\nimport java.util.function.UnaryOperator;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.Random;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.mock.java.util.MockRandom;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class NumberUtil_isInteger extends NumberUtil_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void NumberUtil_isInteger() throws Throwable {\n    NumberUtil.add(0.0F, (-1010.5653F));\n    NumberUtil.isInteger(\"Dcp+&zd@X\u007f#>& R\");\n    NumberUtil.isOdd((-1128));\n    NumberUtil.compare((long) (-1128), (-1395L));\n    RoundingMode roundingMode0 = RoundingMode.HALF_UP;\n    NumberUtil.roundStr(1.0, (-21), roundingMode0);\n    byte[] byteArray0 = new byte[4];\n    byteArray0[0] = (byte) (-21);\n    byteArray0[1] = (byte) (-47);\n    byte byte0 = (byte) (-15);\n    byteArray0[2] = (byte) (-15);\n    byteArray0[3] = (byte) (-101);\n    int int0 = (-1206);\n    // Undeclared exception!\n    try {\n        NumberUtil.fromUnsignedByteArray(byteArray0, (-1206), (-568));\n        fail(\"Expecting exception: NegativeArraySizeException\");\n    } catch (NegativeArraySizeException e) {\n        //\n        // no message in exception (getMessage() returned null)\n        //\n        verifyException(\"cn.hutool.core.util.NumberUtil\", e);\n    }\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/annotation/AliasAnnotationPostProcessorTest###processTest",
        "generated_path": "AliasAnnotationPostProcessor_process.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package cn.hutool.core.annotation;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.annotation.AliasAnnotationPostProcessor;\nimport cn.hutool.core.annotation.AnnotationSynthesizer;\nimport cn.hutool.core.annotation.SynthesizedAnnotation;\nimport java.util.Map;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class AliasAnnotationPostProcessor_process extends AliasAnnotationPostProcessor_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void AliasAnnotationPostProcessor_process() throws Throwable {\n    AliasAnnotationPostProcessor aliasAnnotationPostProcessor0 = new AliasAnnotationPostProcessor();\n    SynthesizedAnnotation synthesizedAnnotation0 = mock(SynthesizedAnnotation.class, new ViolatedAssumptionAnswer());\n    doReturn((Map) null).when(synthesizedAnnotation0).getAttributes();\n    AnnotationSynthesizer annotationSynthesizer0 = mock(AnnotationSynthesizer.class, new ViolatedAssumptionAnswer());\n    // Undeclared exception!\n    try {\n        aliasAnnotationPostProcessor0.process(synthesizedAnnotation0, annotationSynthesizer0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        //\n        // no message in exception (getMessage() returned null)\n        //\n        verifyException(\"cn.hutool.core.annotation.AliasAnnotationPostProcessor\", e);\n    }\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/DesensitizedUtilTest###addressTest",
        "generated_path": "DesensitizedUtil_address.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package cn.hutool.core.util;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.util.DesensitizedUtil;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class DesensitizedUtil_address extends DesensitizedUtil_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    String string0 = DesensitizedUtil.address(\"BGvSk[\", 0);\n    assertEquals(\"BGvSk[\", string0);\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/map/BiMapTest###computeIfAbsentTest",
        "generated_path": "BiMap_computeIfAbsent.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package cn.hutool.core.map;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.annotation.AnnotationProxy;\nimport cn.hutool.core.annotation.CacheableSynthesizedAnnotationAttributeProcessor;\nimport cn.hutool.core.annotation.GenericSynthesizedAggregateAnnotation;\nimport cn.hutool.core.annotation.GenericSynthesizedAnnotation;\nimport cn.hutool.core.annotation.Hierarchical;\nimport cn.hutool.core.annotation.SynthesizedAnnotationPostProcessor;\nimport cn.hutool.core.annotation.SynthesizedAnnotationSelector;\nimport cn.hutool.core.annotation.scanner.AbstractTypeAnnotationScanner;\nimport cn.hutool.core.annotation.scanner.AnnotationScanner;\nimport cn.hutool.core.annotation.scanner.ElementAnnotationScanner;\nimport cn.hutool.core.annotation.scanner.EmptyAnnotationScanner;\nimport cn.hutool.core.annotation.scanner.FieldAnnotationScanner;\nimport cn.hutool.core.annotation.scanner.GenericAnnotationScanner;\nimport cn.hutool.core.annotation.scanner.MetaAnnotationScanner;\nimport cn.hutool.core.annotation.scanner.MethodAnnotationScanner;\nimport cn.hutool.core.annotation.scanner.TypeAnnotationScanner;\nimport cn.hutool.core.map.BiMap;\nimport java.lang.annotation.Annotation;\nimport java.lang.reflect.AnnotatedElement;\nimport java.util.Collection;\nimport java.util.Comparator;\nimport java.util.HashMap;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.function.BiConsumer;\nimport java.util.function.BiFunction;\nimport java.util.function.Consumer;\nimport java.util.function.Function;\nimport java.util.function.Predicate;\nimport java.util.function.UnaryOperator;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.junit.runner.Description;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class BiMap_computeIfAbsent extends BiMap_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();\n    BiMap<Object, Object> biMap0 = new BiMap<Object, Object>(hashMap0);\n    Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());\n    biMap0.forEach(consumer0);\n    Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());\n    UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();\n    UnaryOperator.identity();\n    UnaryOperator.identity();\n    hashMap0.computeIfAbsent(biMap0, unaryOperator0);\n    // Undeclared exception!\n    try {\n        biMap0.computeIfAbsent(hashMap0, function0);\n        fail(\"Expecting exception: StackOverflowError\");\n    } catch (StackOverflowError e) {\n        //\n        // no message in exception (getMessage() returned null)\n        //\n    }\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/io/FileUtilTest###touchTest",
        "generated_path": "FileUtil_touch.java",
        "Compile_result": 1,
        "Test_result": 0,
        "Gen_Test": "package cn.hutool.core.io;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.io.FileUtil;\nimport cn.hutool.core.io.LineHandler;\nimport cn.hutool.core.io.file.FileMode;\nimport cn.hutool.core.io.file.FileReader;\nimport cn.hutool.core.io.file.LineSeparator;\nimport cn.hutool.core.io.file.PathUtil;\nimport cn.hutool.core.io.file.Tailer;\nimport java.io.BufferedInputStream;\nimport java.io.BufferedOutputStream;\nimport java.io.BufferedWriter;\nimport java.io.ByteArrayInputStream;\nimport java.io.DataInputStream;\nimport java.io.DataOutputStream;\nimport java.io.File;\nimport java.io.FileDescriptor;\nimport java.io.FileFilter;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.io.PipedInputStream;\nimport java.io.PipedOutputStream;\nimport java.io.PrintStream;\nimport java.io.PushbackInputStream;\nimport java.io.RandomAccessFile;\nimport java.io.SequenceInputStream;\nimport java.net.URI;\nimport java.net.URL;\nimport java.net.URLStreamHandler;\nimport java.nio.ByteBuffer;\nimport java.nio.CharBuffer;\nimport java.nio.charset.Charset;\nimport java.nio.charset.IllegalCharsetNameException;\nimport java.nio.charset.UnsupportedCharsetException;\nimport java.nio.file.InvalidPathException;\nimport java.nio.file.Path;\nimport java.nio.file.StandardCopyOption;\nimport java.util.Collection;\nimport java.util.Comparator;\nimport java.util.Enumeration;\nimport java.util.HashMap;\nimport java.util.LinkedHashSet;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.Future;\nimport java.util.concurrent.TimeUnit;\nimport java.util.function.BiConsumer;\nimport java.util.function.Consumer;\nimport java.util.function.Predicate;\nimport java.util.zip.Adler32;\nimport java.util.zip.Checksum;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.mock.java.io.MockFile;\nimport org.evosuite.runtime.mock.java.io.MockFileInputStream;\nimport org.evosuite.runtime.mock.java.io.MockFileOutputStream;\nimport org.evosuite.runtime.mock.java.io.MockPrintStream;\nimport org.evosuite.runtime.mock.java.io.MockRandomAccessFile;\nimport org.evosuite.runtime.mock.java.net.MockURI;\nimport org.evosuite.runtime.mock.java.net.MockURL;\nimport org.evosuite.runtime.testdata.EvoSuiteFile;\nimport org.evosuite.runtime.testdata.EvoSuiteURL;\nimport org.evosuite.runtime.testdata.FileSystemHandling;\nimport org.evosuite.runtime.testdata.NetworkHandling;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class FileUtil_touch extends FileUtil_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void FileUtil_touch() throws Throwable {\n    String string0 = \"qU\";\n    File file0 = FileUtil.touch(\"qU\");\n    Tailer.ConsoleLineHandler tailer_ConsoleLineHandler0 = new Tailer.ConsoleLineHandler();\n    // Undeclared exception!\n    try {\n        FileUtil.tail(file0, (LineHandler) tailer_ConsoleLineHandler0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        //\n        // Path [D:\\\\] is not a file !\n        //\n        verifyException(\"cn.hutool.core.io.file.Tailer\", e);\n    }\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/DesensitizedUtilTest###desensitizedTest",
        "generated_path": "DesensitizedUtil_desensitized.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package cn.hutool.core.util;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.util.DesensitizedUtil;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class DesensitizedUtil_desensitized extends DesensitizedUtil_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    DesensitizedUtil.DesensitizedType desensitizedUtil_DesensitizedType0 = DesensitizedUtil.DesensitizedType.BANK_CARD;\n    String string0 = DesensitizedUtil.desensitized(\"r********\", desensitizedUtil_DesensitizedType0);\n    assertEquals(\"r*** * ****\", string0);\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/ObjectUtilTest###containsTest",
        "generated_path": "ObjectUtil_contains.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package cn.hutool.core.util;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.annotation.scanner.AbstractTypeAnnotationScanner;\nimport cn.hutool.core.annotation.scanner.MethodAnnotationScanner;\nimport cn.hutool.core.util.ObjectUtil;\nimport java.awt.BufferCapabilities;\nimport java.awt.Dimension;\nimport java.awt.ImageCapabilities;\nimport java.awt.Insets;\nimport java.awt.PageAttributes;\nimport java.awt.Point;\nimport java.awt.Rectangle;\nimport java.awt.RenderingHints;\nimport java.awt.geom.AffineTransform;\nimport java.awt.geom.Dimension2D;\nimport java.awt.geom.Point2D;\nimport java.awt.geom.Rectangle2D;\nimport java.io.ByteArrayOutputStream;\nimport java.io.File;\nimport java.io.PrintStream;\nimport java.lang.reflect.Array;\nimport java.net.HttpCookie;\nimport java.nio.CharBuffer;\nimport java.sql.BatchUpdateException;\nimport java.sql.ClientInfoStatus;\nimport java.sql.DataTruncation;\nimport java.sql.Date;\nimport java.sql.SQLClientInfoException;\nimport java.sql.SQLDataException;\nimport java.sql.SQLException;\nimport java.sql.SQLFeatureNotSupportedException;\nimport java.sql.SQLIntegrityConstraintViolationException;\nimport java.sql.SQLInvalidAuthorizationSpecException;\nimport java.sql.SQLNonTransientConnectionException;\nimport java.sql.SQLNonTransientException;\nimport java.sql.SQLSyntaxErrorException;\nimport java.sql.SQLTimeoutException;\nimport java.sql.SQLTransactionRollbackException;\nimport java.sql.SQLTransientConnectionException;\nimport java.sql.SQLTransientException;\nimport java.sql.SQLWarning;\nimport java.sql.Time;\nimport java.sql.Timestamp;\nimport java.text.BreakIterator;\nimport java.text.ChoiceFormat;\nimport java.text.Collator;\nimport java.text.DateFormatSymbols;\nimport java.text.DecimalFormat;\nimport java.text.DecimalFormatSymbols;\nimport java.text.FieldPosition;\nimport java.text.Format;\nimport java.text.NumberFormat;\nimport java.text.RuleBasedCollator;\nimport java.text.StringCharacterIterator;\nimport java.time.DateTimeException;\nimport java.time.Instant;\nimport java.time.LocalDate;\nimport java.time.LocalDateTime;\nimport java.time.LocalTime;\nimport java.time.Month;\nimport java.time.chrono.ChronoLocalDate;\nimport java.time.temporal.ChronoField;\nimport java.util.ArrayDeque;\nimport java.util.BitSet;\nimport java.util.Collection;\nimport java.util.Hashtable;\nimport java.util.IdentityHashMap;\nimport java.util.LinkedHashMap;\nimport java.util.LinkedHashSet;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Properties;\nimport java.util.SimpleTimeZone;\nimport java.util.Spliterator;\nimport java.util.Stack;\nimport java.util.StringTokenizer;\nimport java.util.TimeZone;\nimport java.util.TreeMap;\nimport java.util.Vector;\nimport java.util.function.Consumer;\nimport java.util.function.Function;\nimport java.util.function.Supplier;\nimport java.util.function.UnaryOperator;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.mock.java.io.MockFile;\nimport org.evosuite.runtime.mock.java.io.MockPrintStream;\nimport org.evosuite.runtime.mock.java.lang.MockThrowable;\nimport org.evosuite.runtime.mock.java.text.MockDateFormat;\nimport org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;\nimport org.evosuite.runtime.mock.java.time.MockInstant;\nimport org.evosuite.runtime.mock.java.time.MockLocalDate;\nimport org.evosuite.runtime.mock.java.time.MockLocalDateTime;\nimport org.evosuite.runtime.mock.java.time.MockLocalTime;\nimport org.evosuite.runtime.mock.java.util.MockDate;\nimport org.evosuite.runtime.mock.java.util.MockGregorianCalendar;\nimport org.junit.runner.RunWith;\nimport sun.awt.SunHints;\nimport sun.util.calendar.ZoneInfo;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class ObjectUtil_contains extends ObjectUtil_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test21() throws Throwable {\n    Supplier<SQLFeatureNotSupportedException> supplier0 = (Supplier<SQLFeatureNotSupportedException>) mock(Supplier.class, new ViolatedAssumptionAnswer());\n    doReturn((Object) null).when(supplier0).get();\n    SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(\"|,?s>yS-(hd6}90\", \"\", 1253);\n    SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(\"\", \"mmy _9\u007f\\\"IOu8,/\", 1253, sQLNonTransientConnectionException0);\n    sQLTimeoutException0.addSuppressed(sQLNonTransientConnectionException0);\n    SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(\"\", \"\", sQLTimeoutException0);\n    SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(\"mmy _9\u007f\\\"IOu8,/\", \"mmy _9\u007f\\\"IOu8,/\", sQLInvalidAuthorizationSpecException0);\n    ObjectUtil.defaultIfEmpty(\"C@8kq59<\", (Supplier<? extends SQLFeatureNotSupportedException>) supplier0, sQLFeatureNotSupportedException0);\n    Date date0 = new Date(1253);\n    boolean boolean0 = ObjectUtil.contains(\"mmy _9\u007f\\\"IOu8,/\", date0);\n    ObjectUtil objectUtil0 = new ObjectUtil();\n    Function<CharSequence, SQLDataException> function0 = (Function<CharSequence, SQLDataException>) mock(Function.class, new ViolatedAssumptionAnswer());\n    doReturn((Object) null).when(function0).apply(any(java.lang.CharSequence.class));\n    SQLDataException sQLDataException0 = new SQLDataException(\"\", \"\", 1253, sQLNonTransientConnectionException0);\n    ObjectUtil.defaultIfEmpty(\"S>c[zF_\", (Function<CharSequence, ? extends SQLDataException>) function0, sQLDataException0);\n    Integer integer0 = new Integer(1253);\n    boolean boolean1 = ObjectUtil.contains(integer0, sQLDataException0);\n    assertTrue(boolean1 == boolean0);\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-http/src/test/java/cn/hutool/http/HttpGlobalConfigTest###allowPatchTest",
        "generated_path": "HttpGlobalConfig_allowPatch.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package cn.hutool.http;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport cn.hutool.http.HttpGlobalConfig;\nimport java.net.CookieManager;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class HttpGlobalConfig_allowPatch extends HttpGlobalConfig_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    HttpGlobalConfig.allowPatch();\n    HttpGlobalConfig.allowPatch();\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/text/CharSequenceUtilTest###commonPrefixTest",
        "generated_path": "CharSequenceUtil_commonPrefix.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package cn.hutool.core.text;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.lang.Filter;\nimport cn.hutool.core.lang.func.Func1;\nimport cn.hutool.core.text.CharSequenceUtil;\nimport cn.hutool.core.text.StrBuilder;\nimport cn.hutool.core.util.DesensitizedUtil;\nimport java.io.StringWriter;\nimport java.nio.BufferUnderflowException;\nimport java.nio.ByteBuffer;\nimport java.nio.CharBuffer;\nimport java.nio.charset.Charset;\nimport java.nio.charset.IllegalCharsetNameException;\nimport java.nio.charset.UnsupportedCharsetException;\nimport java.util.Comparator;\nimport java.util.LinkedHashSet;\nimport java.util.List;\nimport java.util.PriorityQueue;\nimport java.util.SortedSet;\nimport java.util.TreeSet;\nimport java.util.Vector;\nimport java.util.function.Function;\nimport java.util.function.Predicate;\nimport java.util.function.UnaryOperator;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\nimport java.util.regex.PatternSyntaxException;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class CharSequenceUtil_commonPrefix extends CharSequenceUtil_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test039() throws Throwable {\n    StringBuffer stringBuffer0 = new StringBuffer(1580);\n    stringBuffer0.reverse();\n    CharSequenceUtil.cleanBlank(stringBuffer0);\n    String[] stringArray0 = new String[8];\n    stringArray0[0] = \"\";\n    stringArray0[1] = \"\";\n    stringArray0[2] = \"\";\n    stringArray0[3] = \"\";\n    stringArray0[4] = \"\";\n    stringArray0[5] = \"\";\n    stringArray0[6] = \"Required String length is too large: \";\n    stringArray0[7] = \"()[Ljava/lang/String;\";\n    CharSequenceUtil.firstNonBlank(stringArray0);\n    CharSequenceUtil.split((CharSequence) \"Required String length is too large: \", 'q');\n    CharSequenceUtil.equalsAny((CharSequence) \"Required String length is too large: \", (CharSequence[]) stringArray0);\n    CharSequenceUtil.trimEnd(\"Required String length is too large: \");\n    CharSequenceUtil.commonPrefix(\"\", \"Required String length is too large: \");\n    cn.hutool.core.lang.Matcher<Character> matcher0 = (cn.hutool.core.lang.Matcher<Character>) mock(cn.hutool.core.lang.Matcher.class, new ViolatedAssumptionAnswer());\n    CharSequenceUtil.isAllCharMatch(\"\", matcher0);\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/codec/Base64Test###isBase64Test",
        "generated_path": "Base64_isBase64.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package cn.hutool.core.codec;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.codec.Base64;\nimport java.io.BufferedInputStream;\nimport java.io.BufferedOutputStream;\nimport java.io.ByteArrayInputStream;\nimport java.io.File;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.io.PushbackInputStream;\nimport java.io.SequenceInputStream;\nimport java.nio.CharBuffer;\nimport java.nio.charset.Charset;\nimport java.nio.charset.IllegalCharsetNameException;\nimport java.nio.charset.UnsupportedCharsetException;\nimport java.util.Enumeration;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.mock.java.io.MockFile;\nimport org.evosuite.runtime.mock.java.io.MockPrintStream;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class Base64_isBase64 extends Base64_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test62() throws Throwable {\n    byte[] byteArray0 = new byte[4];\n    byte[] byteArray1 = Base64.encode(byteArray0, false);\n    boolean boolean0 = Base64.isBase64(byteArray1);\n    assertTrue(boolean0);\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/DesensitizedUtilTest###emailTest",
        "generated_path": "DesensitizedUtil_email.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package cn.hutool.core.util;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.util.DesensitizedUtil;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class DesensitizedUtil_email extends DesensitizedUtil_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    String string0 = DesensitizedUtil.email(\"IPV4\");\n    assertEquals(\"IPV4\", string0);\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/NumberUtilTest###isDoubleTest",
        "generated_path": "NumberUtil_isDouble.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package cn.hutool.core.util;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.util.NumberUtil;\nimport java.math.BigDecimal;\nimport java.math.BigInteger;\nimport java.math.MathContext;\nimport java.math.RoundingMode;\nimport java.text.DecimalFormat;\nimport java.text.DecimalFormatSymbols;\nimport java.util.Collection;\nimport java.util.LinkedHashSet;\nimport java.util.LinkedList;\nimport java.util.function.Consumer;\nimport java.util.function.UnaryOperator;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.Random;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.mock.java.util.MockRandom;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class NumberUtil_isDouble extends NumberUtil_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test077() throws Throwable {\n    int int0 = NumberUtil.parseInt((String) null);\n    assertEquals(0, int0);\n    int int1 = NumberUtil.compare((short) 2, (short) 0);\n    assertFalse(int1 == int0);\n    assertEquals(2, int1);\n    float[] floatArray0 = new float[9];\n    floatArray0[0] = (float) (short) 0;\n    floatArray0[1] = (float) 2;\n    floatArray0[2] = (float) (short) 0;\n    floatArray0[3] = (float) 0;\n    floatArray0[4] = 1.0F;\n    floatArray0[5] = (float) 0;\n    floatArray0[6] = (float) (short) 0;\n    floatArray0[7] = (float) 2;\n    floatArray0[8] = (float) 2;\n    float float0 = NumberUtil.min(floatArray0);\n    assertEquals(0.0F, float0, 0.01F);\n    assertArrayEquals(new float[] { 0.0F, 2.0F, 0.0F, 0.0F, 1.0F, 0.0F, 0.0F, 2.0F, 2.0F }, floatArray0, 0.01F);\n    assertEquals(9, floatArray0.length);\n    NumberUtil.isDouble(\"0xN4=\");\n    BigDecimal[] bigDecimalArray0 = new BigDecimal[1];\n    BigDecimal bigDecimal0 = new BigDecimal(281474976710656L);\n    bigDecimalArray0[0] = bigDecimal0;\n    NumberUtil.sub(bigDecimalArray0);\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/math/ArrangementTest###selectTest",
        "generated_path": "Arrangement_select.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package cn.hutool.core.math;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.math.Arrangement;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class Arrangement_select extends Arrangement_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    String[] stringArray0 = new String[8];\n    stringArray0[0] = \"Kj\\\"t[6**8\";\n    stringArray0[1] = \"34{9IxLa}~\\\"A\u007f<:-.Q\";\n    stringArray0[2] = \"cn.hutool.core.math.Arrangement\";\n    stringArray0[3] = \"\";\n    stringArray0[4] = \"#\";\n    stringArray0[5] = \"^~Iy===\";\n    stringArray0[6] = \"\";\n    stringArray0[7] = \"A$\";\n    Arrangement arrangement0 = new Arrangement(stringArray0);\n    // Undeclared exception!\n    arrangement0.select(3350);\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/text/CharSequenceUtilTest###endWithTest",
        "generated_path": "CharSequenceUtil_endWith.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package cn.hutool.core.text;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.lang.Filter;\nimport cn.hutool.core.lang.func.Func1;\nimport cn.hutool.core.text.CharSequenceUtil;\nimport cn.hutool.core.text.StrBuilder;\nimport cn.hutool.core.util.DesensitizedUtil;\nimport java.io.StringWriter;\nimport java.nio.BufferUnderflowException;\nimport java.nio.ByteBuffer;\nimport java.nio.CharBuffer;\nimport java.nio.charset.Charset;\nimport java.nio.charset.IllegalCharsetNameException;\nimport java.nio.charset.UnsupportedCharsetException;\nimport java.util.Comparator;\nimport java.util.LinkedHashSet;\nimport java.util.List;\nimport java.util.PriorityQueue;\nimport java.util.SortedSet;\nimport java.util.TreeSet;\nimport java.util.Vector;\nimport java.util.function.Function;\nimport java.util.function.Predicate;\nimport java.util.function.UnaryOperator;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\nimport java.util.regex.PatternSyntaxException;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class CharSequenceUtil_endWith extends CharSequenceUtil_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test002() throws Throwable {\n    CharSequenceUtil.genSetter((CharSequence) null);\n    CharSequenceUtil.replace((CharSequence) null, (CharSequence) null, (CharSequence) null, false);\n    CharSequence[] charSequenceArray0 = new CharSequence[6];\n    charSequenceArray0[0] = (CharSequence) null;\n    charSequenceArray0[1] = (CharSequence) null;\n    charSequenceArray0[2] = (CharSequence) null;\n    charSequenceArray0[3] = null;\n    CharSequenceUtil.center(charSequenceArray0[0], 0, '4');\n    charSequenceArray0[4] = (CharSequence) null;\n    charSequenceArray0[5] = (CharSequence) null;\n    StringBuilder stringBuilder0 = CharSequenceUtil.builder(charSequenceArray0);\n    CharSequenceUtil.startWith((CharSequence) stringBuilder0, '<');\n    CharSequenceUtil.containsAnyIgnoreCase((CharSequence) null, charSequenceArray0);\n    CharSequenceUtil.count(charSequenceArray0[5], charSequenceArray0[1]);\n    CharSequenceUtil.replace((CharSequence) null, (CharSequence) null, charSequenceArray0[1]);\n    CharSequenceUtil.endWith((CharSequence) null, '<');\n    CharSequenceUtil.splitTrim((CharSequence) null, (CharSequence) null);\n    CharSequenceUtil.trimStart(charSequenceArray0[3]);\n    StringBuffer stringBuffer0 = new StringBuffer(0);\n    CharSequenceUtil.endWith((CharSequence) stringBuffer0, charSequenceArray0[4], false, true);\n    CharSequenceUtil.startWith(charSequenceArray0[5], '4');\n    CharSequenceUtil.removePreAndLowerFirst((CharSequence) stringBuffer0, charSequenceArray0[3]);\n    Function<String, Object> function0 = (Function<String, Object>) mock(Function.class, new ViolatedAssumptionAnswer());\n    CharSequenceUtil.split((CharSequence) null, '6', 12, false, function0);\n    // Undeclared exception!\n    try {\n        Pattern.compile((String) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        //\n        // no message in exception (getMessage() returned null)\n        //\n    }\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/date/DateBetweenTest###betweenYearTest",
        "generated_path": "DateBetween_betweenYear.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package cn.hutool.core.date;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.date.BetweenFormatter;\nimport cn.hutool.core.date.DateBetween;\nimport cn.hutool.core.date.DateUnit;\nimport java.time.Instant;\nimport java.util.Date;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.time.MockInstant;\nimport org.evosuite.runtime.mock.java.util.MockDate;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class DateBetween_betweenYear extends DateBetween_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    Instant instant0 = MockInstant.now();\n    Date date0 = Date.from(instant0);\n    MockDate mockDate0 = new MockDate(1343L);\n    DateBetween dateBetween0 = DateBetween.create(date0, (Date) mockDate0, false);\n    long long0 = dateBetween0.betweenYear(false);\n    assertEquals((-45L), long0);\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/io/IoUtilTest###readLinesTest",
        "generated_path": "IoUtil_readLines.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package cn.hutool.core.io;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.collection.LineIter;\nimport cn.hutool.core.io.BOMInputStream;\nimport cn.hutool.core.io.BomReader;\nimport cn.hutool.core.io.FastByteArrayOutputStream;\nimport cn.hutool.core.io.IoUtil;\nimport cn.hutool.core.io.LineHandler;\nimport cn.hutool.core.io.NioUtil;\nimport cn.hutool.core.io.StreamProgress;\nimport cn.hutool.core.io.ValidateObjectInputStream;\nimport cn.hutool.core.io.file.Tailer;\nimport java.beans.XMLDecoder;\nimport java.beans.XMLEncoder;\nimport java.io.BufferedInputStream;\nimport java.io.BufferedOutputStream;\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.CharArrayReader;\nimport java.io.CharArrayWriter;\nimport java.io.Closeable;\nimport java.io.DataInputStream;\nimport java.io.DataOutputStream;\nimport java.io.EOFException;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.io.FileOutputStream;\nimport java.io.FilterInputStream;\nimport java.io.FilterOutputStream;\nimport java.io.Flushable;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.LineNumberReader;\nimport java.io.OutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.PipedInputStream;\nimport java.io.PipedOutputStream;\nimport java.io.PipedReader;\nimport java.io.PipedWriter;\nimport java.io.PrintStream;\nimport java.io.PrintWriter;\nimport java.io.PushbackInputStream;\nimport java.io.PushbackReader;\nimport java.io.Reader;\nimport java.io.SequenceInputStream;\nimport java.io.Serializable;\nimport java.io.StringReader;\nimport java.io.StringWriter;\nimport java.io.UnsupportedEncodingException;\nimport java.io.Writer;\nimport java.lang.reflect.Array;\nimport java.net.URLClassLoader;\nimport java.nio.ByteBuffer;\nimport java.nio.CharBuffer;\nimport java.nio.channels.ReadableByteChannel;\nimport java.nio.charset.Charset;\nimport java.nio.charset.CharsetDecoder;\nimport java.nio.charset.CharsetEncoder;\nimport java.nio.charset.IllegalCharsetNameException;\nimport java.nio.charset.UnsupportedCharsetException;\nimport java.security.DigestInputStream;\nimport java.security.DigestOutputStream;\nimport java.security.MessageDigest;\nimport java.util.Enumeration;\nimport java.util.LinkedList;\nimport java.util.Locale;\nimport java.util.zip.Adler32;\nimport java.util.zip.CRC32;\nimport java.util.zip.Checksum;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.mock.java.io.MockFile;\nimport org.evosuite.runtime.mock.java.io.MockFileInputStream;\nimport org.evosuite.runtime.mock.java.io.MockFileOutputStream;\nimport org.evosuite.runtime.mock.java.io.MockFileReader;\nimport org.evosuite.runtime.mock.java.io.MockPrintStream;\nimport org.evosuite.runtime.mock.java.io.MockPrintWriter;\nimport org.evosuite.runtime.testdata.EvoSuiteFile;\nimport org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;\nimport org.evosuite.runtime.testdata.FileSystemHandling;\nimport org.evosuite.runtime.testdata.NetworkHandling;\nimport org.junit.runner.RunWith;\nimport org.xml.sax.InputSource;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class IoUtil_readLines extends IoUtil_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void IoUtil_readLines() throws Throwable {\n    char[] charArray0 = new char[5];\n    charArray0[0] = '+';\n    charArray0[1] = 'v';\n    charArray0[2] = '3';\n    charArray0[3] = 'R';\n    charArray0[4] = 'g';\n    CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);\n    assertEquals(5, charArray0.length);\n    assertArrayEquals(new char[] { '+', 'v', '3', 'R', 'g' }, charArray0);\n    assertNotNull(charArrayReader0);\n    charArrayReader0.close();\n    assertEquals(5, charArray0.length);\n    assertArrayEquals(new char[] { '+', 'v', '3', 'R', 'g' }, charArray0);\n    PushbackReader pushbackReader0 = IoUtil.getPushBackReader(charArrayReader0, 10240);\n    assertEquals(5, charArray0.length);\n    assertArrayEquals(new char[] { '+', 'v', '3', 'R', 'g' }, charArray0);\n    assertNotNull(pushbackReader0);\n    Tailer.ConsoleLineHandler tailer_ConsoleLineHandler0 = new Tailer.ConsoleLineHandler();\n    assertNotNull(tailer_ConsoleLineHandler0);\n    try {\n        IoUtil.readLines((Reader) charArrayReader0, (LineHandler) tailer_ConsoleLineHandler0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        //\n        // IOException: Stream closed\n        //\n        verifyException(\"cn.hutool.core.collection.LineIter\", e);\n    }\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/comparator/CompareUtilTest###compareTest",
        "generated_path": "CompareUtil_compare.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package cn.hutool.core.comparator;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.annotation.GenericSynthesizedAggregateAnnotation;\nimport cn.hutool.core.annotation.scanner.MethodAnnotationScanner;\nimport cn.hutool.core.comparator.CompareUtil;\nimport java.util.Comparator;\nimport java.util.function.Function;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class CompareUtil_compare extends CompareUtil_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    Object object0 = new Object();\n    MethodAnnotationScanner methodAnnotationScanner0 = new MethodAnnotationScanner(false);\n    int int0 = CompareUtil.compare(object0, (Object) methodAnnotationScanner0, false);\n    assertEquals(1, int0);\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/HexUtilTest###isHexNumberTest",
        "generated_path": "HexUtil_isHexNumber.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package cn.hutool.core.util;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.util.HexUtil;\nimport java.awt.Color;\nimport java.math.BigInteger;\nimport java.nio.CharBuffer;\nimport java.nio.charset.Charset;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class HexUtil_isHexNumber extends HexUtil_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test32() throws Throwable {\n    // Undeclared exception!\n    try {\n        HexUtil.isHexNumber((String) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        //\n        // no message in exception (getMessage() returned null)\n        //\n    }\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/img/ImgTest###strokeTest",
        "generated_path": "Img_stroke.java",
        "Compile_result": 1,
        "Test_result": 0,
        "Gen_Test": "package cn.hutool.core.img;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.img.Img;\nimport cn.hutool.core.io.resource.BytesResource;\nimport cn.hutool.core.io.resource.CharSequenceResource;\nimport cn.hutool.core.io.resource.ClassPathResource;\nimport cn.hutool.core.io.resource.FileResource;\nimport cn.hutool.core.io.resource.InputStreamResource;\nimport cn.hutool.core.io.resource.MultiFileResource;\nimport cn.hutool.core.io.resource.MultiResource;\nimport cn.hutool.core.io.resource.Resource;\nimport cn.hutool.core.io.resource.StringResource;\nimport cn.hutool.core.io.resource.UrlResource;\nimport cn.hutool.core.io.resource.VfsResource;\nimport java.awt.BasicStroke;\nimport java.awt.Button;\nimport java.awt.Color;\nimport java.awt.ComponentOrientation;\nimport java.awt.Dimension;\nimport java.awt.Font;\nimport java.awt.Frame;\nimport java.awt.Graphics;\nimport java.awt.GraphicsConfiguration;\nimport java.awt.Image;\nimport java.awt.Point;\nimport java.awt.Rectangle;\nimport java.awt.RenderingHints;\nimport java.awt.ScrollPane;\nimport java.awt.Stroke;\nimport java.awt.SystemColor;\nimport java.awt.TextArea;\nimport java.awt.color.ColorSpace;\nimport java.awt.color.ICC_ColorSpace;\nimport java.awt.color.ICC_Profile;\nimport java.awt.event.InputMethodEvent;\nimport java.awt.event.MouseEvent;\nimport java.awt.font.TextHitInfo;\nimport java.awt.geom.AffineTransform;\nimport java.awt.geom.Dimension2D;\nimport java.awt.geom.Point2D;\nimport java.awt.geom.Rectangle2D;\nimport java.awt.image.AffineTransformOp;\nimport java.awt.image.BufferedImage;\nimport java.awt.image.ColorConvertOp;\nimport java.awt.image.ColorModel;\nimport java.awt.image.ConvolveOp;\nimport java.awt.image.DataBuffer;\nimport java.awt.image.DataBufferDouble;\nimport java.awt.image.DirectColorModel;\nimport java.awt.image.IndexColorModel;\nimport java.awt.image.Kernel;\nimport java.awt.image.Raster;\nimport java.awt.image.RasterFormatException;\nimport java.awt.image.RescaleOp;\nimport java.awt.image.TileObserver;\nimport java.awt.image.WritableRaster;\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.DataOutputStream;\nimport java.io.File;\nimport java.io.FileDescriptor;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.io.PipedInputStream;\nimport java.io.PipedOutputStream;\nimport java.io.PrintStream;\nimport java.io.SequenceInputStream;\nimport java.net.URI;\nimport java.net.URL;\nimport java.nio.charset.Charset;\nimport java.nio.file.Path;\nimport java.text.AttributedCharacterIterator;\nimport java.time.Month;\nimport java.util.Enumeration;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.Hashtable;\nimport java.util.LinkedHashSet;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.Stack;\nimport java.util.Vector;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.Future;\nimport java.util.concurrent.TimeUnit;\nimport javax.imageio.stream.FileImageInputStream;\nimport javax.imageio.stream.FileImageOutputStream;\nimport javax.imageio.stream.ImageInputStream;\nimport javax.imageio.stream.ImageOutputStream;\nimport javax.imageio.stream.MemoryCacheImageInputStream;\nimport javax.imageio.stream.MemoryCacheImageOutputStream;\nimport javax.swing.Box;\nimport javax.swing.DebugGraphics;\nimport javax.swing.DefaultComboBoxModel;\nimport javax.swing.JEditorPane;\nimport javax.swing.JFormattedTextField;\nimport javax.swing.JFrame;\nimport javax.swing.JInternalFrame;\nimport javax.swing.JList;\nimport javax.swing.JOptionPane;\nimport javax.swing.JPasswordField;\nimport javax.swing.JScrollPane;\nimport javax.swing.JTabbedPane;\nimport javax.swing.JTable;\nimport javax.swing.JTextPane;\nimport javax.swing.JToolBar;\nimport javax.swing.JTree;\nimport javax.swing.JViewport;\nimport javax.swing.plaf.basic.BasicEditorPaneUI;\nimport javax.swing.plaf.metal.MetalTabbedPaneUI;\nimport javax.swing.plaf.multi.MultiLabelUI;\nimport javax.swing.plaf.multi.MultiTabbedPaneUI;\nimport javax.swing.plaf.synth.SynthTreeUI;\nimport javax.swing.table.DefaultTableModel;\nimport javax.swing.text.DefaultCaret;\nimport javax.swing.text.DefaultStyledDocument;\nimport javax.swing.text.Element;\nimport javax.swing.text.JTextComponent;\nimport javax.swing.text.LabelView;\nimport javax.swing.text.MutableAttributeSet;\nimport javax.swing.text.Position;\nimport javax.swing.text.Segment;\nimport javax.swing.text.StringContent;\nimport javax.swing.text.Style;\nimport javax.swing.text.StyleContext;\nimport javax.swing.text.StyledEditorKit;\nimport javax.swing.tree.DefaultTreeCellRenderer;\nimport javax.swing.tree.FixedHeightLayoutCache;\nimport javax.swing.tree.TreePath;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.mock.java.io.MockFile;\nimport org.evosuite.runtime.mock.java.io.MockFileInputStream;\nimport org.evosuite.runtime.mock.java.io.MockFileOutputStream;\nimport org.evosuite.runtime.mock.java.io.MockPrintStream;\nimport org.evosuite.runtime.mock.java.io.MockRandomAccessFile;\nimport org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;\nimport org.evosuite.runtime.mock.java.net.MockURI;\nimport org.evosuite.runtime.mock.java.net.MockURL;\nimport org.evosuite.runtime.testdata.EvoSuiteFile;\nimport org.evosuite.runtime.testdata.EvoSuiteURL;\nimport org.evosuite.runtime.testdata.FileSystemHandling;\nimport org.evosuite.runtime.testdata.NetworkHandling;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class Img_stroke extends Img_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test044() throws Throwable {\n    byte[] byteArray0 = new byte[3];\n    byteArray0[0] = (byte) 2;\n    byteArray0[1] = (byte) (-2);\n    byteArray0[2] = (byte) 40;\n    FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);\n    Img img0 = new Img((BufferedImage) null, \"{} ({}) must be less than size ({})\");\n    Img img1 = img0.setQuality(416.0F);\n    DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();\n    Color color0 = defaultTreeCellRenderer0.getTextNonSelectionColor();\n    img1.setQuality((-1.0F));\n    color0.getColorSpace();\n    Color.getColor(\"{} ({}) must be less than size ({})\");\n    img1.stroke(color0, (float) (byte) (-2));\n    String string0 = \"\";\n    Class<InputStream> class0 = InputStream.class;\n    ClassPathResource classPathResource0 = new ClassPathResource(string0, class0);\n    File file0 = classPathResource0.getFile();\n    Img.from(file0);\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-http/src/test/java/cn/hutool/http/HttpUtilTest###decodeParamMapTest",
        "generated_path": "HttpUtil_decodeParamMap.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package cn.hutool.http;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.annotation.scanner.TypeAnnotationScanner;\nimport cn.hutool.core.io.StreamProgress;\nimport cn.hutool.core.io.resource.BytesResource;\nimport cn.hutool.core.io.resource.ClassPathResource;\nimport cn.hutool.core.io.resource.MultiFileResource;\nimport cn.hutool.core.io.resource.Resource;\nimport cn.hutool.core.io.resource.VfsResource;\nimport cn.hutool.core.io.resource.WebAppResource;\nimport cn.hutool.core.net.url.UrlBuilder;\nimport cn.hutool.http.Header;\nimport cn.hutool.http.HttpBase;\nimport cn.hutool.http.HttpConfig;\nimport cn.hutool.http.HttpInterceptor;\nimport cn.hutool.http.HttpRequest;\nimport cn.hutool.http.HttpResponse;\nimport cn.hutool.http.HttpUtil;\nimport cn.hutool.http.Method;\nimport cn.hutool.http.ssl.AndroidSupportSSLFactory;\nimport cn.hutool.http.ssl.TrustAnyHostnameVerifier;\nimport java.io.BufferedInputStream;\nimport java.io.BufferedOutputStream;\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.DataInputStream;\nimport java.io.File;\nimport java.io.FileDescriptor;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.io.PipedInputStream;\nimport java.io.PipedOutputStream;\nimport java.io.PrintStream;\nimport java.net.CookieManager;\nimport java.net.HttpCookie;\nimport java.net.HttpURLConnection;\nimport java.net.InetAddress;\nimport java.net.Proxy;\nimport java.net.URI;\nimport java.net.URISyntaxException;\nimport java.net.URLStreamHandler;\nimport java.nio.ByteBuffer;\nimport java.nio.CharBuffer;\nimport java.nio.charset.Charset;\nimport java.nio.charset.IllegalCharsetNameException;\nimport java.nio.charset.UnsupportedCharsetException;\nimport java.nio.file.InvalidPathException;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.LinkedHashSet;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.Future;\nimport java.util.concurrent.TimeUnit;\nimport java.util.function.BiConsumer;\nimport java.util.function.BiFunction;\nimport java.util.function.Consumer;\nimport java.util.function.Function;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.Random;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.mock.java.io.MockFile;\nimport org.evosuite.runtime.mock.java.io.MockFileInputStream;\nimport org.evosuite.runtime.mock.java.io.MockFileOutputStream;\nimport org.evosuite.runtime.mock.java.io.MockPrintStream;\nimport org.evosuite.runtime.mock.java.net.MockInetAddress;\nimport org.evosuite.runtime.mock.java.net.MockSocket;\nimport org.evosuite.runtime.mock.java.net.MockURI;\nimport org.evosuite.runtime.testdata.EvoSuiteFile;\nimport org.evosuite.runtime.testdata.EvoSuiteURL;\nimport org.evosuite.runtime.testdata.FileSystemHandling;\nimport org.evosuite.runtime.testdata.NetworkHandling;\nimport org.junit.runner.RunWith;\nimport sun.nio.cs.ext.GBK;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class HttpUtil_decodeParamMap extends HttpUtil_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test007() throws Throwable {\n    boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();\n    assertTrue(boolean0);\n    HttpRequest httpRequest0 = HttpRequest.of(\"Basic \");\n    assertEquals(\"HTTP/1.1\", httpRequest0.httpVersion());\n    assertEquals(Method.GET, httpRequest0.getMethod());\n    assertEquals(\"UTF-8\", httpRequest0.charset());\n    assertNotNull(httpRequest0);\n    byte[] byteArray0 = new byte[2];\n    byteArray0[1] = (byte) (-102);\n    EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL(\"http://HTTP/1.0\");\n    boolean boolean1 = NetworkHandling.createRemoteTextFile(evoSuiteURL0, \"\");\n    assertTrue(boolean1 == boolean0);\n    assertTrue(boolean1);\n    HttpRequest httpRequest1 = httpRequest0.body(byteArray0);\n    assertSame(httpRequest0, httpRequest1);\n    assertSame(httpRequest1, httpRequest0);\n    assertEquals(2, byteArray0.length);\n    assertArrayEquals(new byte[] { (byte) 0, (byte) (-102) }, byteArray0);\n    assertEquals(\"HTTP/1.1\", httpRequest0.httpVersion());\n    assertEquals(Method.GET, httpRequest0.getMethod());\n    assertEquals(\"UTF-8\", httpRequest0.charset());\n    assertEquals(Method.GET, httpRequest1.getMethod());\n    assertEquals(\"UTF-8\", httpRequest1.charset());\n    assertEquals(\"HTTP/1.1\", httpRequest1.httpVersion());\n    assertNotNull(httpRequest1);\n    HttpConfig httpConfig0 = new HttpConfig();\n    assertNotNull(httpConfig0);\n    HttpRequest httpRequest2 = httpRequest0.setConfig(httpConfig0);\n    assertSame(httpRequest0, httpRequest2);\n    assertSame(httpRequest0, httpRequest1);\n    assertSame(httpRequest2, httpRequest0);\n    assertSame(httpRequest2, httpRequest1);\n    assertEquals(\"HTTP/1.1\", httpRequest0.httpVersion());\n    assertEquals(Method.GET, httpRequest0.getMethod());\n    assertEquals(\"UTF-8\", httpRequest0.charset());\n    assertEquals(\"HTTP/1.1\", httpRequest2.httpVersion());\n    assertEquals(\"UTF-8\", httpRequest2.charset());\n    assertEquals(Method.GET, httpRequest2.getMethod());\n    assertNotNull(httpRequest2);\n    Charset charset0 = Charset.defaultCharset();\n    assertEquals(\"GBK\", charset0.toString());\n    assertTrue(charset0.canEncode());\n    assertEquals(\"GBK\", charset0.displayName());\n    assertTrue(charset0.isRegistered());\n    assertEquals(\"GBK\", charset0.name());\n    assertNotNull(charset0);\n    httpConfig0.blockSize = (-276);\n    HttpRequest httpRequest3 = httpRequest1.basicAuth(\"HTTP/1.1\", \"Ld)xKPE)w{X4A&i-Qd<\");\n    assertSame(httpRequest0, httpRequest2);\n    assertSame(httpRequest0, httpRequest3);\n    assertSame(httpRequest0, httpRequest1);\n    assertSame(httpRequest1, httpRequest3);\n    assertSame(httpRequest1, httpRequest0);\n    assertSame(httpRequest1, httpRequest2);\n    assertSame(httpRequest3, httpRequest0);\n    assertSame(httpRequest3, httpRequest2);\n    assertSame(httpRequest3, httpRequest1);\n    assertEquals(2, byteArray0.length);\n    assertArrayEquals(new byte[] { (byte) 0, (byte) (-102) }, byteArray0);\n    assertEquals(\"HTTP/1.1\", httpRequest0.httpVersion());\n    assertEquals(Method.GET, httpRequest0.getMethod());\n    assertEquals(\"UTF-8\", httpRequest0.charset());\n    assertEquals(Method.GET, httpRequest1.getMethod());\n    assertEquals(\"UTF-8\", httpRequest1.charset());\n    assertEquals(\"HTTP/1.1\", httpRequest1.httpVersion());\n    assertEquals(Method.GET, httpRequest3.getMethod());\n    assertEquals(\"HTTP/1.1\", httpRequest3.httpVersion());\n    assertEquals(\"UTF-8\", httpRequest3.charset());\n    assertNotNull(httpRequest3);\n    HttpRequest httpRequest4 = httpRequest0.charset(charset0);\n    assertSame(httpRequest0, httpRequest2);\n    assertSame(httpRequest0, httpRequest4);\n    assertSame(httpRequest0, httpRequest3);\n    assertSame(httpRequest0, httpRequest1);\n    assertSame(httpRequest4, httpRequest2);\n    assertSame(httpRequest4, httpRequest3);\n    assertSame(httpRequest4, httpRequest1);\n    assertSame(httpRequest4, httpRequest0);\n    assertEquals(\"GBK\", httpRequest0.charset());\n    assertEquals(\"HTTP/1.1\", httpRequest0.httpVersion());\n    assertEquals(Method.GET, httpRequest0.getMethod());\n    assertEquals(\"GBK\", charset0.toString());\n    assertTrue(charset0.canEncode());\n    assertEquals(\"GBK\", charset0.displayName());\n    assertTrue(charset0.isRegistered());\n    assertEquals(\"GBK\", charset0.name());\n    assertEquals(\"HTTP/1.1\", httpRequest4.httpVersion());\n    assertEquals(\"GBK\", httpRequest4.charset());\n    assertEquals(Method.GET, httpRequest4.getMethod());\n    assertNotNull(httpRequest4);\n    Map<String, Object> map0 = httpRequest2.form();\n    assertSame(httpRequest0, httpRequest2);\n    assertSame(httpRequest0, httpRequest4);\n    assertSame(httpRequest0, httpRequest3);\n    assertSame(httpRequest0, httpRequest1);\n    assertSame(httpRequest2, httpRequest0);\n    assertSame(httpRequest2, httpRequest1);\n    assertSame(httpRequest2, httpRequest3);\n    assertSame(httpRequest2, httpRequest4);\n    assertEquals(\"GBK\", httpRequest0.charset());\n    assertEquals(\"HTTP/1.1\", httpRequest0.httpVersion());\n    assertEquals(Method.GET, httpRequest0.getMethod());\n    assertEquals(\"HTTP/1.1\", httpRequest2.httpVersion());\n    assertEquals(\"GBK\", httpRequest2.charset());\n    assertEquals(Method.GET, httpRequest2.getMethod());\n    assertNull(map0);\n    Set<String> set0 = charset0.aliases();\n    assertFalse(set0.contains(\"HTTP/1.1\"));\n    assertEquals(\"GBK\", charset0.toString());\n    assertTrue(charset0.canEncode());\n    assertEquals(\"GBK\", charset0.displayName());\n    assertTrue(charset0.isRegistered());\n    assertEquals(\"GBK\", charset0.name());\n    assertFalse(set0.isEmpty());\n    assertEquals(2, set0.size());\n    assertNotNull(set0);\n    String string0 = HttpUtil.urlWithForm(\"Basic \", (Map<String, Object>) null, (Charset) null, true);\n    assertNotNull(string0);\n    assertEquals(\"Basic \", string0);\n    String string1 = HttpUtil.get(\"HTTP/1.1\", (int) (byte) (-102));\n    assertFalse(string1.equals((Object) string0));\n    assertNotNull(string1);\n    GBK gBK0 = (GBK) Charset.defaultCharset();\n    assertSame(gBK0, charset0);\n    assertEquals(\"GBK\", gBK0.displayName());\n    assertEquals(\"GBK\", gBK0.name());\n    assertEquals(\"GBK\", gBK0.toString());\n    assertTrue(gBK0.canEncode());\n    assertTrue(gBK0.isRegistered());\n    assertNotNull(gBK0);\n    ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);\n    assertEquals(2, byteArray0.length);\n    assertArrayEquals(new byte[] { (byte) 0, (byte) (-102) }, byteArray0);\n    assertTrue(byteBuffer0.hasRemaining());\n    assertFalse(byteBuffer0.isReadOnly());\n    assertEquals(2, byteBuffer0.capacity());\n    assertTrue(byteBuffer0.hasArray());\n    assertEquals(0, byteBuffer0.position());\n    assertFalse(byteBuffer0.isDirect());\n    assertEquals(2, byteBuffer0.limit());\n    assertEquals(2, byteBuffer0.remaining());\n    assertEquals(0, byteBuffer0.arrayOffset());\n    assertEquals(\"java.nio.HeapByteBuffer[pos=0 lim=2 cap=2]\", byteBuffer0.toString());\n    assertNotNull(byteBuffer0);\n    CharBuffer charBuffer0 = gBK0.decode(byteBuffer0);\n    assertSame(gBK0, charset0);\n    assertEquals(2, byteArray0.length);\n    assertArrayEquals(new byte[] { (byte) 0, (byte) (-102) }, byteArray0);\n    assertEquals(\"GBK\", gBK0.displayName());\n    assertEquals(\"GBK\", gBK0.name());\n    assertEquals(\"GBK\", gBK0.toString());\n    assertTrue(gBK0.canEncode());\n    assertTrue(gBK0.isRegistered());\n    assertFalse(byteBuffer0.isReadOnly());\n    assertEquals(2, byteBuffer0.capacity());\n    assertEquals(\"java.nio.HeapByteBuffer[pos=2 lim=2 cap=2]\", byteBuffer0.toString());\n    assertEquals(2, byteBuffer0.position());\n    assertTrue(byteBuffer0.hasArray());\n    assertFalse(byteBuffer0.hasRemaining());\n    assertFalse(byteBuffer0.isDirect());\n    assertEquals(2, byteBuffer0.limit());\n    assertEquals(0, byteBuffer0.remaining());\n    assertEquals(0, byteBuffer0.arrayOffset());\n    assertEquals(2, charBuffer0.limit());\n    assertEquals(0, charBuffer0.arrayOffset());\n    assertFalse(charBuffer0.isDirect());\n    assertTrue(charBuffer0.hasRemaining());\n    assertTrue(charBuffer0.hasArray());\n    assertEquals(3, charBuffer0.capacity());\n    assertEquals(2, charBuffer0.length());\n    assertEquals(2, charBuffer0.remaining());\n    assertEquals(\"\\u0000\\uFFFD\", charBuffer0.toString());\n    assertEquals(0, charBuffer0.position());\n    assertFalse(charBuffer0.isReadOnly());\n    assertNotNull(charBuffer0);\n    String string2 = HttpUtil.downloadString(\"HTTP/1.0\", (Charset) gBK0);\n    assertSame(gBK0, charset0);\n    assertFalse(string2.equals((Object) string1));\n    assertFalse(string2.equals((Object) string0));\n    assertEquals(\"GBK\", gBK0.displayName());\n    assertEquals(\"GBK\", gBK0.name());\n    assertEquals(\"GBK\", gBK0.toString());\n    assertTrue(gBK0.canEncode());\n    assertTrue(gBK0.isRegistered());\n    assertNotNull(string2);\n    assertEquals(\"\", string2);\n    Map<String, List<String>> map1 = HttpUtil.decodeParams(\"HTTP/1.1\", (Charset) gBK0);\n    assertSame(gBK0, charset0);\n    assertEquals(\"GBK\", gBK0.displayName());\n    assertEquals(\"GBK\", gBK0.name());\n    assertEquals(\"GBK\", gBK0.toString());\n    assertTrue(gBK0.canEncode());\n    assertTrue(gBK0.isRegistered());\n    assertEquals(1, map1.size());\n    assertFalse(map1.isEmpty());\n    assertNotNull(map1);\n    Map<String, String> map2 = HttpUtil.decodeParamMap(\"X>r_>\u007fWpQjnkInVvU\", charset0);\n    assertSame(charset0, gBK0);\n    assertEquals(1, map2.size());\n    assertFalse(map2.isEmpty());\n    assertEquals(\"GBK\", charset0.toString());\n    assertTrue(charset0.canEncode());\n    assertEquals(\"GBK\", charset0.displayName());\n    assertTrue(charset0.isRegistered());\n    assertEquals(\"GBK\", charset0.name());\n    assertNotNull(map2);\n    String string3 = HttpUtil.toParams(map1, (Charset) null, true);\n    assertSame(gBK0, charset0);\n    assertFalse(string3.equals((Object) string0));\n    assertFalse(string3.equals((Object) string1));\n    assertFalse(string3.equals((Object) string2));\n    assertEquals(\"GBK\", gBK0.displayName());\n    assertEquals(\"GBK\", gBK0.name());\n    assertEquals(\"GBK\", gBK0.toString());\n    assertTrue(gBK0.canEncode());\n    assertTrue(gBK0.isRegistered());\n    assertEquals(1, map1.size());\n    assertFalse(map1.isEmpty());\n    assertNotNull(string3);\n    HashMap<String, Object> hashMap0 = new HashMap<String, Object>();\n    assertEquals(0, hashMap0.size());\n    assertTrue(hashMap0.isEmpty());\n    assertNotNull(hashMap0);\n    String string4 = HttpUtil.get(\"HTTP/1.0\", (Map<String, Object>) hashMap0);\n    assertTrue(string4.equals((Object) string2));\n    assertFalse(string4.equals((Object) string1));\n    assertFalse(string4.equals((Object) string3));\n    assertFalse(string4.equals((Object) string0));\n    assertEquals(0, hashMap0.size());\n    assertTrue(hashMap0.isEmpty());\n    assertNotNull(string4);\n    assertEquals(\"\", string4);\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/io/BufferUtilTest###readBytesTest",
        "generated_path": "BufferUtil_readBytes.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package cn.hutool.core.io;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.io.BufferUtil;\nimport java.nio.ByteBuffer;\nimport java.nio.CharBuffer;\nimport java.nio.charset.Charset;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class BufferUtil_readBytes extends BufferUtil_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    CharBuffer charBuffer0 = CharBuffer.allocate(2987);\n    ByteBuffer byteBuffer0 = BufferUtil.createUtf8(charBuffer0);\n    BufferUtil.readBytes(byteBuffer0, 2987);\n    assertEquals(2987, byteBuffer0.position());\n    assertEquals(0, byteBuffer0.remaining());\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/date/CalendarUtilTest###parseTest",
        "generated_path": "CalendarUtil_parse.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package cn.hutool.core.date;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.date.CalendarUtil;\nimport cn.hutool.core.date.DateField;\nimport cn.hutool.core.date.format.DateParser;\nimport cn.hutool.core.date.format.FastDateFormat;\nimport java.nio.CharBuffer;\nimport java.text.ParsePosition;\nimport java.time.DateTimeException;\nimport java.time.Instant;\nimport java.time.LocalDateTime;\nimport java.time.ZoneId;\nimport java.time.ZoneOffset;\nimport java.time.ZonedDateTime;\nimport java.time.format.DateTimeParseException;\nimport java.util.Calendar;\nimport java.util.Collection;\nimport java.util.Date;\nimport java.util.GregorianCalendar;\nimport java.util.LinkedHashSet;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.SimpleTimeZone;\nimport java.util.TimeZone;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.System;\nimport org.evosuite.runtime.mock.java.time.MockInstant;\nimport org.evosuite.runtime.mock.java.time.MockZonedDateTime;\nimport org.evosuite.runtime.mock.java.util.MockCalendar;\nimport org.evosuite.runtime.mock.java.util.MockDate;\nimport org.evosuite.runtime.mock.java.util.MockGregorianCalendar;\nimport org.evosuite.runtime.testdata.EvoSuiteFile;\nimport org.evosuite.runtime.testdata.FileSystemHandling;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class CalendarUtil_parse extends CalendarUtil_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void CalendarUtil_parse() throws Throwable {\n    CalendarUtil calendarUtil0 = new CalendarUtil();\n    Calendar calendar0 = MockCalendar.getInstance();\n    CalendarUtil.isAM(calendar0);\n    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 0, 0, 0);\n    CalendarUtil.isSameMonth(calendar0, mockGregorianCalendar0);\n    Locale locale0 = new Locale(\"Date and Patterns must not be null\");\n    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();\n    calendar0.clear();\n    calendar0.setFirstDayOfWeek(0);\n    locale0.getUnicodeLocaleAttributes();\n    Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;\n    Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) null, locale_FilteringMode0);\n    String[] stringArray0 = new String[1];\n    stringArray0[0] = \"\";\n    CalendarUtil.isSameInstant(calendar0, (Calendar) null);\n    CalendarUtil.formatChineseDate(calendar0, false);\n    CalendarUtil.beginOfMonth(calendar0);\n    DateField dateField0 = DateField.DAY_OF_WEEK;\n    CalendarUtil.getBeginValue(calendar0, dateField0);\n    MockDate mockDate0 = new MockDate(21, (-3598), (-189), (-3598), 0);\n    CalendarUtil.calendar((Date) mockDate0);\n    // Undeclared exception!\n    try {\n        CalendarUtil.parse(\"\", false, (DateParser) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        //\n        // no message in exception (getMessage() returned null)\n        //\n        verifyException(\"cn.hutool.core.date.CalendarUtil\", e);\n    }\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/lang/tree/TreeTest###filterTest",
        "generated_path": "Tree_filter.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "package cn.hutool.core.lang.tree;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.lang.Filter;\nimport cn.hutool.core.lang.tree.Tree;\nimport cn.hutool.core.lang.tree.TreeNodeConfig;\nimport java.lang.reflect.Array;\nimport java.nio.CharBuffer;\nimport java.util.List;\nimport java.util.function.Consumer;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class Tree_filter extends Tree_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    Tree<Object> tree0 = new Tree<Object>();\n    Filter<Tree<Object>> filter0 = (Filter<Tree<Object>>) mock(Filter.class, new ViolatedAssumptionAnswer());\n    doReturn(false).when(filter0).accept(anyMap());\n    Tree<Object> tree1 = tree0.filter(filter0);\n    assertNull(tree1);\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/net/Ipv4UtilTest###listTest",
        "generated_path": "Ipv4Util_list.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package cn.hutool.core.net;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.net.Ipv4Util;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class Ipv4Util_list extends Ipv4Util_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test47() throws Throwable {\n    List<String> list0 = Ipv4Util.list(\"~[j*+'i$j*\", 32, true);\n    assertTrue(list0.contains(\"~[j*+'i$j*\"));\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/map/TableMapTest###removeTest",
        "generated_path": "TableMap_remove.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package cn.hutool.core.map;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.annotation.CacheableSynthesizedAnnotationAttributeProcessor;\nimport cn.hutool.core.annotation.GenericSynthesizedAggregateAnnotation;\nimport cn.hutool.core.annotation.GenericSynthesizedAnnotation;\nimport cn.hutool.core.annotation.Hierarchical;\nimport cn.hutool.core.annotation.SynthesizedAnnotationPostProcessor;\nimport cn.hutool.core.annotation.SynthesizedAnnotationSelector;\nimport cn.hutool.core.annotation.scanner.AbstractTypeAnnotationScanner;\nimport cn.hutool.core.annotation.scanner.AnnotationScanner;\nimport cn.hutool.core.annotation.scanner.ElementAnnotationScanner;\nimport cn.hutool.core.annotation.scanner.EmptyAnnotationScanner;\nimport cn.hutool.core.annotation.scanner.GenericAnnotationScanner;\nimport cn.hutool.core.annotation.scanner.TypeAnnotationScanner;\nimport cn.hutool.core.map.TableMap;\nimport java.lang.annotation.Annotation;\nimport java.lang.reflect.Array;\nimport java.util.AbstractMap;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Comparator;\nimport java.util.HashMap;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.function.BiConsumer;\nimport java.util.function.BiFunction;\nimport java.util.function.Consumer;\nimport java.util.function.Function;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class TableMap_remove extends TableMap_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    TableMap<TypeAnnotationScanner, TypeAnnotationScanner> tableMap0 = new TableMap<TypeAnnotationScanner, TypeAnnotationScanner>();\n    TypeAnnotationScanner typeAnnotationScanner0 = new TypeAnnotationScanner();\n    TableMap<GenericSynthesizedAggregateAnnotation, Object> tableMap1 = new TableMap<GenericSynthesizedAggregateAnnotation, Object>(49);\n    tableMap1.remove((Object) typeAnnotationScanner0);\n    Object[] objectArray0 = new Object[4];\n    objectArray0[0] = (Object) typeAnnotationScanner0;\n    objectArray0[1] = (Object) tableMap1;\n    objectArray0[2] = null;\n    objectArray0[3] = (Object) typeAnnotationScanner0;\n    TableMap<TypeAnnotationScanner, String>[] tableMapArray0 = (TableMap<TypeAnnotationScanner, String>[]) Array.newInstance(TableMap.class, 1);\n    TableMap<TypeAnnotationScanner, String> tableMap2 = new TableMap<TypeAnnotationScanner, String>();\n    tableMapArray0[0] = tableMap2;\n    TableMap<Object, TableMap<TypeAnnotationScanner, String>> tableMap3 = new TableMap<Object, TableMap<TypeAnnotationScanner, String>>(objectArray0, tableMapArray0);\n    Integer integer0 = new Integer(49);\n    AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer0, integer0);\n    AbstractMap.SimpleEntry<Integer, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry0);\n    AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleEntry0);\n    boolean boolean0 = tableMap3.remove((Object) abstractMap_SimpleImmutableEntry1, (Object) abstractMap_SimpleEntry0);\n    assertEquals(4, tableMap3.size());\n    assertFalse(boolean0);\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/EnumUtilTest###getEnumMapTest",
        "generated_path": "EnumUtil_getEnumMap.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package cn.hutool.core.util;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.annotation.scanner.TypeAnnotationScanner;\nimport cn.hutool.core.lang.func.Func1;\nimport cn.hutool.core.util.DesensitizedUtil;\nimport cn.hutool.core.util.EnumUtil;\nimport cn.hutool.core.util.EnumUtilTest;\nimport cn.hutool.core.util.ModifierUtil;\nimport cn.hutool.core.util.ReferenceUtil;\nimport java.nio.CharBuffer;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.function.Function;\nimport java.util.function.Predicate;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class EnumUtil_getEnumMap extends EnumUtil_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    Class<EnumUtilTest.TestEnum> class0 = EnumUtilTest.TestEnum.class;\n    LinkedHashMap<String, EnumUtilTest.TestEnum> linkedHashMap0 = EnumUtil.getEnumMap(class0);\n    assertEquals(3, linkedHashMap0.size());\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/lang/hash/CityHashTest###hash32Test",
        "generated_path": "CityHash_hash32.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package cn.hutool.core.lang.hash;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.lang.hash.CityHash;\nimport cn.hutool.core.lang.hash.Number128;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class CityHash_hash32 extends CityHash_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test10() throws Throwable {\n    byte[] byteArray0 = new byte[16];\n    int int0 = CityHash.hash32(byteArray0);\n    assertEquals((-989020539), int0);\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/text/AntPathMatcherTest###testExtractUriTemplateVariables",
        "generated_path": "AntPathMatcher_extractUriTemplateVariables.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package cn.hutool.core.text;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.text.AntPathMatcher;\nimport java.util.Comparator;\nimport java.util.HashMap;\nimport java.util.Map;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class AntPathMatcher_extractUriTemplateVariables extends AntPathMatcher_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    AntPathMatcher antPathMatcher0 = new AntPathMatcher();\n    assertNotNull(antPathMatcher0);\n    // Undeclared exception!\n    try {\n        antPathMatcher0.extractUriTemplateVariables((String) null, \"@3!fxBEV$@*cmbyP?p>\");\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n    }\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/lang/StrFormatterTest###formatTest",
        "generated_path": "StrFormatter_format.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package cn.hutool.core.text;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.annotation.GenericSynthesizedAggregateAnnotation;\nimport cn.hutool.core.annotation.scanner.TypeAnnotationScanner;\nimport cn.hutool.core.text.StrFormatter;\nimport java.nio.CharBuffer;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.function.BiFunction;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class StrFormatter_format extends StrFormatter_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    CharBuffer charBuffer0 = CharBuffer.allocate(1882);\n    CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0, 1882, 1882);\n    CharBuffer charBuffer2 = CharBuffer.wrap((CharSequence) charBuffer1);\n    HashMap<String, TypeAnnotationScanner> hashMap0 = new HashMap<String, TypeAnnotationScanner>();\n    String string0 = StrFormatter.format((CharSequence) charBuffer2, (Map<?, ?>) hashMap0, true);\n    assertEquals(\"\", string0);\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/net/NetUtilTest###getLocalHostTest",
        "generated_path": "NetUtil_getLocalhost.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package cn.hutool.core.net;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.lang.Filter;\nimport cn.hutool.core.net.NetUtil;\nimport cn.hutool.core.net.PassAuth;\nimport cn.hutool.core.net.UserPassAuthenticator;\nimport java.math.BigInteger;\nimport java.net.Authenticator;\nimport java.net.Inet6Address;\nimport java.net.InetAddress;\nimport java.net.InetSocketAddress;\nimport java.net.NetworkInterface;\nimport java.nio.ByteBuffer;\nimport java.util.LinkedHashSet;\nimport java.util.Set;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.Future;\nimport java.util.concurrent.TimeUnit;\nimport java.util.function.Consumer;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.mock.java.net.MockInetAddress;\nimport org.evosuite.runtime.mock.java.net.MockInetSocketAddress;\nimport org.evosuite.runtime.mock.java.net.MockNetworkInterface;\nimport org.evosuite.runtime.mock.java.util.MockRandom;\nimport org.evosuite.runtime.testdata.EvoSuiteLocalAddress;\nimport org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;\nimport org.evosuite.runtime.testdata.NetworkHandling;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class NetUtil_getLocalhost extends NetUtil_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    NetUtil.getLocalhostStr();\n    NetUtil.localIps();\n    NetUtil.getUsableLocalPort(1544);\n    NetUtil.isInnerIP(\"192.168.1.42\");\n    InetAddress inetAddress0 = NetUtil.getLocalhost();\n    NetUtil.getHardwareAddress(inetAddress0);\n    NetUtil.createAddress(\"*\", 1544);\n    NetUtil.localIpv6s();\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-http/src/test/java/cn/hutool/http/HtmlUtilTest###removeHtmlAttrTest",
        "generated_path": "HtmlUtil_removeHtmlAttr.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package cn.hutool.http;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.http.HtmlUtil;\nimport java.util.regex.PatternSyntaxException;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class HtmlUtil_removeHtmlAttr extends HtmlUtil_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    String[] stringArray0 = new String[0];\n    HtmlUtil.removeHtmlAttr((String) null, stringArray0);\n    HtmlUtil.cleanHtmlTag(\"&lt;\");\n    HtmlUtil.removeHtmlTag(\"\", false, stringArray0);\n    HtmlUtil htmlUtil0 = new HtmlUtil();\n    HtmlUtil.unescape((String) null);\n    HtmlUtil.unescape(\" ~D,O6U'K(l+C>k\");\n    HtmlUtil.escape(\"&lt;\");\n    HtmlUtil.removeAllHtmlAttr((String) null, stringArray0);\n    HtmlUtil.removeHtmlAttr(\"(?i)<{}[^>]*?>\", stringArray0);\n    HtmlUtil.unescape(\"(?i)<{}[^>]*?>\");\n    HtmlUtil.removeAllHtmlAttr(\"(<[^<]*?>)|(<[s]*?/[^<]*?>)|(<[^<]*?/[s]*?>)\", stringArray0);\n    HtmlUtil.removeAllHtmlAttr(\"&gt;\", stringArray0);\n    HtmlUtil.removeHtmlTag(\"<[s]*?script[^>]*?>.*?<[s]*?/[s]*?script[s]*?>\", false, stringArray0);\n    HtmlUtil.unescape(\"6EHT{I\");\n    HtmlUtil.removeAllHtmlAttr((String) null, stringArray0);\n    HtmlUtil.escape(\"&nbsp;\");\n    HtmlUtil.escape(\"&gt;\");\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/NumberUtilTest###parseFloatTest",
        "generated_path": "NumberUtil_parseFloat.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package cn.hutool.core.util;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.util.NumberUtil;\nimport java.math.BigDecimal;\nimport java.math.BigInteger;\nimport java.math.MathContext;\nimport java.math.RoundingMode;\nimport java.text.DecimalFormat;\nimport java.text.DecimalFormatSymbols;\nimport java.util.Collection;\nimport java.util.LinkedHashSet;\nimport java.util.LinkedList;\nimport java.util.function.Consumer;\nimport java.util.function.UnaryOperator;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.Random;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.mock.java.util.MockRandom;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class NumberUtil_parseFloat extends NumberUtil_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test059() throws Throwable {\n    int int0 = NumberUtil.compare((byte) (-53), (byte) (-56));\n    assertEquals(3, int0);\n    int[] intArray0 = NumberUtil.range((-113), (-1));\n    assertNotNull(intArray0);\n    assertEquals(113, intArray0.length);\n    int int1 = NumberUtil.multiple((-113), (byte) (-53));\n    assertFalse(int1 == int0);\n    assertEquals((-5989), int1);\n    BigDecimal bigDecimal0 = new BigDecimal(3);\n    assertNotNull(bigDecimal0);\n    assertEquals((byte) 3, bigDecimal0.byteValue());\n    assertEquals((short) 3, bigDecimal0.shortValue());\n    boolean boolean0 = NumberUtil.isIn(bigDecimal0, bigDecimal0, bigDecimal0);\n    assertEquals((byte) 3, bigDecimal0.byteValue());\n    assertEquals((short) 3, bigDecimal0.shortValue());\n    assertTrue(boolean0);\n    NumberUtil.parseFloat(\"~G)tgb<FO\", (Float) null);\n    NumberUtil.div((-1477.0), (double) (-5989));\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/ReUtilTest###extractMultiTest",
        "generated_path": "ReUtil_extractMulti.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package cn.hutool.core.util;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.lang.func.Func1;\nimport cn.hutool.core.lang.mutable.Mutable;\nimport cn.hutool.core.lang.mutable.MutableObj;\nimport cn.hutool.core.util.ReUtil;\nimport java.nio.CharBuffer;\nimport java.util.LinkedHashSet;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.function.Consumer;\nimport java.util.function.Predicate;\nimport java.util.regex.MatchResult;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\nimport java.util.regex.PatternSyntaxException;\nimport java.util.stream.Stream;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class ReUtil_extractMulti extends ReUtil_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test003() throws Throwable {\n    Pattern pattern0 = Pattern.compile(\"cn/hutool/core/exceptions/CheckedUtil\", (-746));\n    Pattern pattern1 = Pattern.compile(\"cn/hutool/core/exceptions/CheckedUtil\");\n    ReUtil.isMatch(pattern0, (CharSequence) \"cn/hutool/core/exceptions/CheckedUtil\");\n    ReUtil.isMatch(pattern0, (CharSequence) \"cn/hutool/core/exceptions/CheckedUtil\");\n    ReUtil.count(\"cn/hutool/core/exceptions/CheckedUtil\", (CharSequence) \"cn/hutool/core/exceptions/CheckedUtil\");\n    pattern1.asPredicate();\n    ReUtil.findAll(\"!-#\", (CharSequence) \"cn/hutool/core/exceptions/CheckedUtil\", 1);\n    ReUtil.getAllGroups(pattern1, (CharSequence) \"cn/hutool/core/exceptions/CheckedUtil\");\n    ReUtil.delPre(\"!-#\", (CharSequence) \"cn/hutool/core/exceptions/CheckedUtil\");\n    ReUtil.replaceFirst(pattern1, \"cn/hutool/core/exceptions/CheckedUtil\", \"cn/hutool/core/exceptions/CheckedUtil\");\n    ReUtil.lastIndexOf(pattern1, (CharSequence) \"cn/hutool/core/exceptions/CheckedUtil\");\n    ReUtil.delLast(pattern1, (CharSequence) \"!-#\");\n    ReUtil.extractMulti(pattern1, (CharSequence) \"!-#\", \"cn/hutool/core/exceptions/CheckedUtil\");\n    ReUtil.extractMultiAndDelPre(pattern0, (Mutable<CharSequence>) null, \"[Assertion failed] - this state invariant must be true\");\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/CoordinateUtilTest###gcj02ToBd09Test",
        "generated_path": "CoordinateUtil_gcj02ToBd09.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package cn.hutool.core.util;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport cn.hutool.core.util.CoordinateUtil;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class CoordinateUtil_gcj02ToBd09 extends CoordinateUtil_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    CoordinateUtil.Coordinate coordinateUtil_Coordinate0 = CoordinateUtil.gcj02ToBd09(55.8271, 1392.3721428116382);\n    CoordinateUtil.Coordinate coordinateUtil_Coordinate1 = CoordinateUtil.wgs84ToMercator(55.8271, 1392.3721428116382);\n    CoordinateUtil.Coordinate coordinateUtil_Coordinate2 = coordinateUtil_Coordinate0.offset(coordinateUtil_Coordinate1);\n    coordinateUtil_Coordinate2.setLng(0.0);\n    coordinateUtil_Coordinate2.offset(coordinateUtil_Coordinate1);\n    boolean boolean0 = coordinateUtil_Coordinate2.equals(coordinateUtil_Coordinate1);\n    assertEquals(6214644.344465163, coordinateUtil_Coordinate2.getLng(), 0.01);\n    assertFalse(boolean0);\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/CharUtilTest###toCloseCharTest",
        "generated_path": "CharUtil_toCloseChar.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package cn.hutool.core.util;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.util.CharUtil;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class CharUtil_toCloseChar extends CharUtil_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    char char0 = CharUtil.toCloseChar('z');\n    assertEquals('\\u24E9', char0);\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/ReUtilTest###getTest",
        "generated_path": "ReUtil_get.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package cn.hutool.core.util;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.lang.func.Func1;\nimport cn.hutool.core.lang.mutable.Mutable;\nimport cn.hutool.core.lang.mutable.MutableObj;\nimport cn.hutool.core.util.ReUtil;\nimport java.nio.CharBuffer;\nimport java.util.LinkedHashSet;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.function.Consumer;\nimport java.util.function.Predicate;\nimport java.util.regex.MatchResult;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\nimport java.util.regex.PatternSyntaxException;\nimport java.util.stream.Stream;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class ReUtil_get extends ReUtil_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test005() throws Throwable {\n    ReUtil.escape('~');\n    Pattern pattern0 = Pattern.compile(\"cn\\u0000hutool\\u0000core\\u0000annotation\\u0000GenericSynthesizedAggregateAnnotationTest$ClassForAliasForTest2\");\n    Pattern pattern1 = Pattern.compile(\"~\", 158);\n    ReUtil.get(pattern0, (CharSequence) \"~\", \"cn\\u0000hutool\\u0000core\\u0000annotation\\u0000GenericSynthesizedAggregateAnnotationTest$ClassForAliasForTest2\");\n    LinkedList<String> linkedList0 = new LinkedList<String>();\n    ReUtil.findAll(pattern0, (CharSequence) null, 35, linkedList0);\n    ReUtil.getAllGroups(pattern1, (CharSequence) \"cn\\u0000hutool\\u0000core\\u0000annotation\\u0000GenericSynthesizedAggregateAnnotationTest$ClassForAliasForTest2\");\n    MutableObj<CharSequence> mutableObj0 = MutableObj.of((CharSequence) null);\n    ReUtil.extractMultiAndDelPre((String) null, (Mutable<CharSequence>) mutableObj0, \"~\");\n    ReUtil.findAllGroup1((String) null, (CharSequence) null);\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/text/CharSequenceUtilTest###removeSuffixIgnoreCaseTest",
        "generated_path": "CharSequenceUtil_removeSuffixIgnoreCase.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package cn.hutool.core.text;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.lang.Filter;\nimport cn.hutool.core.lang.func.Func1;\nimport cn.hutool.core.text.CharSequenceUtil;\nimport cn.hutool.core.text.StrBuilder;\nimport cn.hutool.core.util.DesensitizedUtil;\nimport java.io.StringWriter;\nimport java.nio.BufferUnderflowException;\nimport java.nio.ByteBuffer;\nimport java.nio.CharBuffer;\nimport java.nio.charset.Charset;\nimport java.nio.charset.IllegalCharsetNameException;\nimport java.nio.charset.UnsupportedCharsetException;\nimport java.util.Comparator;\nimport java.util.LinkedHashSet;\nimport java.util.List;\nimport java.util.PriorityQueue;\nimport java.util.SortedSet;\nimport java.util.TreeSet;\nimport java.util.Vector;\nimport java.util.function.Function;\nimport java.util.function.Predicate;\nimport java.util.function.UnaryOperator;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\nimport java.util.regex.PatternSyntaxException;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class CharSequenceUtil_removeSuffixIgnoreCase extends CharSequenceUtil_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test019() throws Throwable {\n    String string0 = CharSequenceUtil.SPACE;\n    CharSequenceUtil.isNotEmpty(\" \");\n    CharSequenceUtil.center((CharSequence) \" \", 3);\n    CharSequenceUtil.containsBlank(\"   \");\n    CharSequenceUtil.cleanBlank(\"   \");\n    CharSequenceUtil.endWith((CharSequence) \"   \", (CharSequence) \"\", true, true);\n    CharSequenceUtil.repeat((CharSequence) \" \", 3);\n    CharSequenceUtil.startWith((CharSequence) \" \", (CharSequence) \"   \", false);\n    CharSequenceUtil.removeAllLineBreaks(\"   \");\n    CharSequenceUtil.removeSuffixIgnoreCase(\"   \", \"   \");\n    CharSequenceUtil.utf8Bytes(\"\");\n    CharSequenceUtil.compare(\"   \", \"\", true);\n    CharSequenceUtil.endWith((CharSequence) \"\", (CharSequence) \"\", true, true);\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/EnumUtilTest###getNamesTest",
        "generated_path": "EnumUtil_getNames.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package cn.hutool.core.util;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.annotation.scanner.TypeAnnotationScanner;\nimport cn.hutool.core.lang.func.Func1;\nimport cn.hutool.core.util.DesensitizedUtil;\nimport cn.hutool.core.util.EnumUtil;\nimport cn.hutool.core.util.EnumUtilTest;\nimport cn.hutool.core.util.ModifierUtil;\nimport cn.hutool.core.util.ReferenceUtil;\nimport java.nio.CharBuffer;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.function.Function;\nimport java.util.function.Predicate;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class EnumUtil_getNames extends EnumUtil_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test21() throws Throwable {\n    Class<EnumUtilTest.TestEnum> class0 = EnumUtilTest.TestEnum.class;\n    List<String> list0 = EnumUtil.getNames(class0);\n    EnumUtil.likeValueOf(class0, (Object) list0);\n    assertEquals(3, list0.size());\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/ReUtilTest###delFirstTest",
        "generated_path": "ReUtil_delFirst.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package cn.hutool.core.util;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.lang.func.Func1;\nimport cn.hutool.core.lang.mutable.Mutable;\nimport cn.hutool.core.lang.mutable.MutableObj;\nimport cn.hutool.core.util.ReUtil;\nimport java.nio.CharBuffer;\nimport java.util.LinkedHashSet;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.function.Consumer;\nimport java.util.function.Predicate;\nimport java.util.regex.MatchResult;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\nimport java.util.regex.PatternSyntaxException;\nimport java.util.stream.Stream;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class ReUtil_delFirst extends ReUtil_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test024() throws Throwable {\n    String string0 = \"\";\n    String string1 = \"cn.hutool.core.util.ClassUtil\";\n    String string2 = ReUtil.RE_CHINESES;\n    List<String> list0 = new LinkedList<String>();\n    Pattern pattern0 = Pattern.compile(\"[\\u2E80-\\u2EFF\\u2F00-\\u2FDF\\u31C0-\\u31EF\\u3400-\\u4DBF\\u4E00-\\u9FFF\\uF900-\\uFAFF\\uD840\\uDC00-\\uD869\\uDEDF\\uD869\\uDF00-\\uD86D\\uDF3F\\uD86D\\uDF40-\\uD86E\\uDC1F\\uD86E\\uDC20-\\uD873\\uDEAF\\uD87E\\uDC00-\\uD87E\\uDE1F]+\");\n    ReUtil.delFirst(pattern0, (CharSequence) \"[\\u2E80-\\u2EFF\\u2F00-\\u2FDF\\u31C0-\\u31EF\\u3400-\\u4DBF\\u4E00-\\u9FFF\\uF900-\\uFAFF\\uD840\\uDC00-\\uD869\\uDEDF\\uD869\\uDF00-\\uD86D\\uDF3F\\uD86D\\uDF40-\\uD86E\\uDC1F\\uD86E\\uDC20-\\uD873\\uDEAF\\uD87E\\uDC00-\\uD87E\\uDE1F]+\");\n    pattern0.split((CharSequence) \"[-\\u2EFF\\u2F00-\\u2FDF\\u31C0-\\u31EF\\u3400-\\u4DBF\\u4E00-\\u9FFF\\uF900-\\uFAFF\\uD840\\uDC00-\\uD869\\uDEDF\\uD869\\uDF00-\\uD86D\\uDF3F\\uD86D\\uDF40-\\uD86E\\uDC1F\\uD86E\\uDC20-\\uD873\\uDEAF\\uD87E\\uDC00-\\uD87E\\uDE1F]+\", (-2424));\n    ReUtil.getGroup0(pattern0, (CharSequence) \"cn.hutool.core.util.ClassUtil\");\n    ReUtil.contains(\"[-\\u2EFF\\u2F00-\\u2FDF\\u31C0-\\u31EF\\u3400-\\u4DBF\\u4E00-\\u9FFF\\uF900-\\uFAFF\\uD840\\uDC00-\\uD869\\uDEDF\\uD869\\uDF00-\\uD86D\\uDF3F\\uD86D\\uDF40-\\uD86E\\uDC1F\\uD86E\\uDC20-\\uD873\\uDEAF\\uD87E\\uDC00-\\uD87E\\uDE1F]+\", (CharSequence) null);\n    pattern0.splitAsStream(\"cn.hutool.core.util.ClassUtil\");\n    Pattern.matches(\"cn.hutool.core.util.ClassUtil\", \"cn.hutool.core.util.ClassUtil\");\n    ReUtil.get(pattern0, (CharSequence) \"cn.hutool.core.util.ClassUtil\", (Consumer<Matcher>) null);\n    ReUtil.findAllGroup1(pattern0, (CharSequence) \"cn.hutool.core.util.ClassUtil\");\n    ReUtil.get(pattern0, (CharSequence) \"\", (Consumer<Matcher>) null);\n    ReUtil.count(\"cn.hutool.core.lang.Pair\", (CharSequence) \"cn.hutool.core.lang.Pair\");\n    ReUtil.get(pattern0, (CharSequence) \"cn.hutool.core.util.ClassUtil\", 0);\n    ReUtil.findAllGroup0(\"\", (CharSequence) \"[\\u2E80-\\u2EFF\\u2F00-\\u2FDF\\u31C0-\\u31EF\\u3400-\\u4DBF\\u4E00-\\u9FFF\\uF900-\\uFAFF\\uD840\\uDC00-\\uD869\\uDEDF\\uD869\\uDF00-\\uD86D\\uDF3F\\uD86D\\uDF40-\\uD86E\\uDC1F\\uD86E\\uDC20-\\uD873\\uDEAF\\uD87E\\uDC00-\\uD87E\\uDE1F]+\");\n    int int0 = (-1164);\n    // Undeclared exception!\n    try {\n        Pattern.compile((String) null, (-1164));\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        //\n        // no message in exception (getMessage() returned null)\n        //\n    }\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/text/CharSequenceUtilTest###removePrefixIgnoreCaseTest",
        "generated_path": "CharSequenceUtil_removePrefixIgnoreCase.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package cn.hutool.core.text;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.lang.Filter;\nimport cn.hutool.core.lang.func.Func1;\nimport cn.hutool.core.text.CharSequenceUtil;\nimport cn.hutool.core.text.StrBuilder;\nimport cn.hutool.core.util.DesensitizedUtil;\nimport java.io.StringWriter;\nimport java.nio.BufferUnderflowException;\nimport java.nio.ByteBuffer;\nimport java.nio.CharBuffer;\nimport java.nio.charset.Charset;\nimport java.nio.charset.IllegalCharsetNameException;\nimport java.nio.charset.UnsupportedCharsetException;\nimport java.util.Comparator;\nimport java.util.LinkedHashSet;\nimport java.util.List;\nimport java.util.PriorityQueue;\nimport java.util.SortedSet;\nimport java.util.TreeSet;\nimport java.util.Vector;\nimport java.util.function.Function;\nimport java.util.function.Predicate;\nimport java.util.function.UnaryOperator;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\nimport java.util.regex.PatternSyntaxException;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class CharSequenceUtil_removePrefixIgnoreCase extends CharSequenceUtil_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test052() throws Throwable {\n    CharSequenceUtil.repeat('M', (-44));\n    CharSequenceUtil.compareIgnoreCase(\"\", \"\", false);\n    CharSequenceUtil.replaceLast((CharSequence) \"\", (CharSequence) \"\", (CharSequence) \"\");\n    CharSequenceUtil.removePrefixIgnoreCase(\"\", \"\");\n    String[] stringArray0 = CharSequenceUtil.subBetweenAll((CharSequence) \"\", (CharSequence) \"\");\n    CharSequenceUtil.indexedFormat(\"\", stringArray0);\n    CharSequenceUtil.isAllNotEmpty(stringArray0);\n    CharSequenceUtil.subPreGbk((CharSequence) \"\", 0, (CharSequence) \"\");\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/PageUtilTest###rainbowTest",
        "generated_path": "PageUtil_rainbow.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package cn.hutool.core.util;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.util.PageUtil;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class PageUtil_rainbow extends PageUtil_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    PageUtil.rainbow(32798529, 2500, 2500);\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/convert/NumberChineseFormatterTest###formatThousandTest",
        "generated_path": "NumberChineseFormatter_formatThousand.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package cn.hutool.core.convert;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.convert.NumberChineseFormatter;\nimport java.math.BigDecimal;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class NumberChineseFormatter_formatThousand extends NumberChineseFormatter_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test05() throws Throwable {\n    String string0 = NumberChineseFormatter.formatThousand(10, false);\n    assertEquals(\"\\u5341\", string0);\n    assertNotNull(string0);\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/math/CombinationTest###selectTest",
        "generated_path": "Combination_select.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package cn.hutool.core.math;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.math.Combination;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class Combination_select extends Combination_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    String[] stringArray0 = new String[20];\n    stringArray0[0] = \"RdI>:EL)dX'x\";\n    stringArray0[1] = \"\";\n    stringArray0[9] = \"\";\n    stringArray0[3] = \"\";\n    stringArray0[4] = \"xj!2P1Z6\";\n    stringArray0[5] = \"cn.hutool.core.math.Combination\";\n    stringArray0[6] = \"mT\";\n    stringArray0[7] = \"R9NEAG#5h7Q?Yz.+|\";\n    stringArray0[8] = \"vW!9n{)t~mdj\";\n    Combination combination0 = new Combination(stringArray0);\n    assertEquals(20, stringArray0.length);\n    assertNotNull(combination0);\n    List<String[]> list0 = combination0.select(220);\n    assertEquals(20, stringArray0.length);\n    assertFalse(list0.contains(stringArray0));\n    assertEquals(0, list0.size());\n    assertTrue(list0.isEmpty());\n    assertNotNull(list0);\n    // Undeclared exception!\n    combination0.selectAll();\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/NumberUtilTest###generateBySetTest",
        "generated_path": "NumberUtil_generateBySet.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package cn.hutool.core.util;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.util.NumberUtil;\nimport java.math.BigDecimal;\nimport java.math.BigInteger;\nimport java.math.MathContext;\nimport java.math.RoundingMode;\nimport java.text.DecimalFormat;\nimport java.text.DecimalFormatSymbols;\nimport java.util.Collection;\nimport java.util.LinkedHashSet;\nimport java.util.LinkedList;\nimport java.util.function.Consumer;\nimport java.util.function.UnaryOperator;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.Random;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.mock.java.util.MockRandom;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class NumberUtil_generateBySet extends NumberUtil_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void NumberUtil_generateBySet() throws Throwable {\n    NumberUtil.partValue(8, 9, true);\n    NumberUtil.range(9);\n    NumberUtil numberUtil0 = new NumberUtil();\n    NumberUtil.generateBySet(1, 1593, 846);\n    short[] shortArray0 = new short[8];\n    shortArray0[0] = (short) 0;\n    shortArray0[1] = (short) (-2190);\n    shortArray0[2] = (short) (-1208);\n    shortArray0[0] = (short) 2386;\n    shortArray0[4] = (short) (-2875);\n    shortArray0[5] = (short) 0;\n    shortArray0[6] = (short) 0;\n    shortArray0[7] = (short) 3069;\n    NumberUtil.max(shortArray0);\n    NumberUtil.multiple((-266), 9);\n    // Undeclared exception!\n    try {\n        NumberUtil.mul((-984.945F), (double) (-198));\n        fail(\"Expecting exception: NumberFormatException\");\n    } catch (NumberFormatException e) {\n        //\n        // no message in exception (getMessage() returned null)\n        //\n        verifyException(\"java.math.BigDecimal\", e);\n    }\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/NumberUtilTest###toBigDecimalTest",
        "generated_path": "NumberUtil_toBigDecimal.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package cn.hutool.core.util;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.util.NumberUtil;\nimport java.math.BigDecimal;\nimport java.math.BigInteger;\nimport java.math.MathContext;\nimport java.math.RoundingMode;\nimport java.text.DecimalFormat;\nimport java.text.DecimalFormatSymbols;\nimport java.util.Collection;\nimport java.util.LinkedHashSet;\nimport java.util.LinkedList;\nimport java.util.function.Consumer;\nimport java.util.function.UnaryOperator;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.Random;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.mock.java.util.MockRandom;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class NumberUtil_toBigDecimal extends NumberUtil_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test039() throws Throwable {\n    BigInteger bigInteger0 = BigInteger.TEN;\n    byte[] byteArray0 = new byte[3];\n    byteArray0[0] = (byte) 21;\n    byteArray0[1] = (byte) 89;\n    bigInteger0.getLowestSetBit();\n    byteArray0[2] = (byte) 0;\n    BigInteger bigInteger1 = new BigInteger(byteArray0);\n    bigInteger1.or(bigInteger0);\n    bigInteger1.toString();\n    bigInteger1.not();\n    BigInteger bigInteger2 = BigInteger.ONE;\n    bigInteger0.mod(bigInteger2);\n    bigInteger0.gcd(bigInteger1);\n    NumberUtil.toStr((Number) bigInteger0, true);\n    BigDecimal bigDecimal0 = NumberUtil.toBigDecimal((Number) bigInteger0);\n    NumberUtil.isLess(bigDecimal0, bigDecimal0);\n    NumberUtil.isEven((-1856));\n    NumberUtil.isPrimes((byte) 89);\n    NumberUtil.fromUnsignedByteArray(byteArray0);\n    Collection<Integer> collection0 = new LinkedHashSet<Integer>();\n    NumberUtil.appendRange(1, (int) (byte) 21, 1693, collection0);\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/bean/BeanUtilTest###getPropertyDescriptorsTest",
        "generated_path": "BeanUtil_getPropertyDescriptors.java",
        "Compile_result": 1,
        "Test_result": 0,
        "Gen_Test": "package cn.hutool.core.bean;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.annotation.AnnotationProxy;\nimport cn.hutool.core.annotation.GenericSynthesizedAggregateAnnotation;\nimport cn.hutool.core.annotation.GenericSynthesizedAnnotation;\nimport cn.hutool.core.annotation.SynthesizedAnnotation;\nimport cn.hutool.core.annotation.scanner.EmptyAnnotationScanner;\nimport cn.hutool.core.annotation.scanner.MetaAnnotationScanner;\nimport cn.hutool.core.annotation.scanner.TypeAnnotationScanner;\nimport cn.hutool.core.bean.BeanDesc;\nimport cn.hutool.core.bean.BeanUtil;\nimport cn.hutool.core.bean.DynaBean;\nimport cn.hutool.core.bean.PropDesc;\nimport cn.hutool.core.bean.copier.CopyOptions;\nimport cn.hutool.core.bean.copier.ValueProvider;\nimport cn.hutool.core.bean.copier.provider.BeanValueProvider;\nimport cn.hutool.core.bean.copier.provider.DynaBeanValueProvider;\nimport cn.hutool.core.convert.NumberWithFormat;\nimport cn.hutool.core.convert.TypeConverter;\nimport cn.hutool.core.lang.Editor;\nimport cn.hutool.core.lang.func.Func1;\nimport java.beans.IntrospectionException;\nimport java.beans.PropertyDescriptor;\nimport java.beans.PropertyEditor;\nimport java.lang.annotation.Annotation;\nimport java.lang.reflect.AnnotatedElement;\nimport java.lang.reflect.Array;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.Method;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.LinkedHashSet;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.function.BiConsumer;\nimport java.util.function.BiFunction;\nimport java.util.function.BiPredicate;\nimport java.util.function.Consumer;\nimport java.util.function.Function;\nimport java.util.function.Predicate;\nimport java.util.function.Supplier;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class BeanUtil_getPropertyDescriptors extends BeanUtil_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test010() throws Throwable {\n    Class<TypeAnnotationScanner> class0 = TypeAnnotationScanner.class;\n    boolean boolean0 = BeanUtil.hasGetter(class0);\n    assertFalse(boolean0);\n    Class<CopyOptions> class1 = CopyOptions.class;\n    BeanDesc beanDesc0 = BeanUtil.getBeanDesc(class1);\n    assertNotNull(beanDesc0);\n    GenericSynthesizedAggregateAnnotation.MetaAnnotation genericSynthesizedAggregateAnnotation_MetaAnnotation0 = mock(GenericSynthesizedAggregateAnnotation.MetaAnnotation.class, new ViolatedAssumptionAnswer());\n    doReturn((Annotation) null).when(genericSynthesizedAggregateAnnotation_MetaAnnotation0).getAnnotation();\n    doReturn((-5114)).when(genericSynthesizedAggregateAnnotation_MetaAnnotation0).getHorizontalDistance();\n    doReturn((Annotation) null).when(genericSynthesizedAggregateAnnotation_MetaAnnotation0).getRoot();\n    doReturn((-5114)).when(genericSynthesizedAggregateAnnotation_MetaAnnotation0).getVerticalDistance();\n    doReturn(\"G5b(zJOik\").when(genericSynthesizedAggregateAnnotation_MetaAnnotation0).toString();\n    Editor<Field> editor0 = (Editor<Field>) mock(Editor.class, new ViolatedAssumptionAnswer());\n    doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(editor0).edit(any(java.lang.reflect.Field.class));\n    GenericSynthesizedAggregateAnnotation.MetaAnnotation genericSynthesizedAggregateAnnotation_MetaAnnotation1 = BeanUtil.edit(genericSynthesizedAggregateAnnotation_MetaAnnotation0, editor0);\n    assertSame(genericSynthesizedAggregateAnnotation_MetaAnnotation1, genericSynthesizedAggregateAnnotation_MetaAnnotation0);\n    assertEquals((-5114), genericSynthesizedAggregateAnnotation_MetaAnnotation1.getVerticalDistance());\n    assertEquals((-5114), genericSynthesizedAggregateAnnotation_MetaAnnotation1.getHorizontalDistance());\n    assertNotNull(genericSynthesizedAggregateAnnotation_MetaAnnotation1);\n    Map<String, Object> map0 = BeanUtil.beanToMap((Object) class0, false, true);\n    assertTrue(map0.isEmpty());\n    assertEquals(0, map0.size());\n    assertNotNull(map0);\n    CopyOptions copyOptions0 = null;\n    Map<String, Object> map1 = BeanUtil.beanToMap((Object) genericSynthesizedAggregateAnnotation_MetaAnnotation1, map0, (CopyOptions) null);\n    assertSame(genericSynthesizedAggregateAnnotation_MetaAnnotation1, genericSynthesizedAggregateAnnotation_MetaAnnotation0);\n    assertSame(map0, map1);\n    assertSame(map1, map0);\n    assertEquals((-5114), genericSynthesizedAggregateAnnotation_MetaAnnotation1.getVerticalDistance());\n    assertEquals((-5114), genericSynthesizedAggregateAnnotation_MetaAnnotation1.getHorizontalDistance());\n    assertEquals(5, map0.size());\n    assertFalse(map0.isEmpty());\n    assertFalse(map1.isEmpty());\n    assertEquals(5, map1.size());\n    assertNotNull(map1);\n    Map<String, Object> map2 = BeanUtil.beanToMap((Object) beanDesc0, map1, (CopyOptions) null);\n    assertSame(genericSynthesizedAggregateAnnotation_MetaAnnotation1, genericSynthesizedAggregateAnnotation_MetaAnnotation0);\n    assertSame(map0, map2);\n    assertSame(map0, map1);\n    assertSame(map1, map2);\n    assertSame(map1, map0);\n    assertSame(map2, map1);\n    assertSame(map2, map0);\n    assertEquals((-5114), genericSynthesizedAggregateAnnotation_MetaAnnotation1.getVerticalDistance());\n    assertEquals((-5114), genericSynthesizedAggregateAnnotation_MetaAnnotation1.getHorizontalDistance());\n    assertEquals(5, map0.size());\n    assertFalse(map0.isEmpty());\n    assertFalse(map1.isEmpty());\n    assertEquals(5, map1.size());\n    assertFalse(map2.isEmpty());\n    assertEquals(5, map2.size());\n    assertNotNull(map2);\n    PropertyDescriptor[] propertyDescriptorArray0 = BeanUtil.getPropertyDescriptors(class0);\n    assertNotNull(propertyDescriptorArray0);\n    assertEquals(0, propertyDescriptorArray0.length);\n    // Undeclared exception!\n    BeanUtil.beanToMap((Object) map1, map0, (CopyOptions) null);\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/EnumUtilTest###likeValueOfTest",
        "generated_path": "EnumUtil_likeValueOf.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package cn.hutool.core.util;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.annotation.scanner.TypeAnnotationScanner;\nimport cn.hutool.core.lang.func.Func1;\nimport cn.hutool.core.util.DesensitizedUtil;\nimport cn.hutool.core.util.EnumUtil;\nimport cn.hutool.core.util.EnumUtilTest;\nimport cn.hutool.core.util.ModifierUtil;\nimport cn.hutool.core.util.ReferenceUtil;\nimport java.nio.CharBuffer;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.function.Function;\nimport java.util.function.Predicate;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class EnumUtil_likeValueOf extends EnumUtil_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test20() throws Throwable {\n    Class<ReferenceUtil.ReferenceType> class0 = ReferenceUtil.ReferenceType.class;\n    EnumUtil.likeValueOf(class0, (Object) \"X.O6iMds?&Y\");\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/net/Ipv4UtilTest###getMaskBitByMaskTest",
        "generated_path": "Ipv4Util_getMaskBitByMask.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package cn.hutool.core.net;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.net.Ipv4Util;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class Ipv4Util_getMaskBitByMask extends Ipv4Util_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test29() throws Throwable {\n    int int0 = Ipv4Util.getMaskBitByMask(\"240.0.0.0\");\n    assertEquals(4, int0);\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-json/src/test/java/cn/hutool/json/JSONObjectTest###accumulateTest",
        "generated_path": "JSONObject_accumulate.java",
        "Compile_result": 1,
        "Test_result": 0,
        "Gen_Test": "package cn.hutool.json;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.annotation.GenericSynthesizedAggregateAnnotation;\nimport cn.hutool.core.annotation.scanner.AbstractTypeAnnotationScanner;\nimport cn.hutool.core.annotation.scanner.TypeAnnotationScanner;\nimport cn.hutool.core.lang.Filter;\nimport cn.hutool.core.lang.mutable.MutablePair;\nimport cn.hutool.core.map.CaseInsensitiveMap;\nimport cn.hutool.json.JSONArray;\nimport cn.hutool.json.JSONConfig;\nimport cn.hutool.json.JSONObject;\nimport cn.hutool.json.serialize.GlobalSerializeMapping;\nimport cn.hutool.json.serialize.JSONDeserializer;\nimport java.io.CharArrayWriter;\nimport java.io.File;\nimport java.io.FilterOutputStream;\nimport java.io.ObjectOutputStream;\nimport java.io.OutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.PipedReader;\nimport java.io.PipedWriter;\nimport java.io.PrintStream;\nimport java.io.PrintWriter;\nimport java.io.StringWriter;\nimport java.io.UnsupportedEncodingException;\nimport java.io.Writer;\nimport java.lang.reflect.Type;\nimport java.math.BigDecimal;\nimport java.math.BigInteger;\nimport java.math.MathContext;\nimport java.nio.CharBuffer;\nimport java.time.Clock;\nimport java.time.DateTimeException;\nimport java.time.Duration;\nimport java.time.Instant;\nimport java.time.LocalDate;\nimport java.time.LocalDateTime;\nimport java.time.Period;\nimport java.time.ZoneId;\nimport java.time.ZoneOffset;\nimport java.time.chrono.IsoChronology;\nimport java.time.chrono.ThaiBuddhistDate;\nimport java.time.format.DateTimeFormatter;\nimport java.time.format.DateTimeParseException;\nimport java.time.format.FormatStyle;\nimport java.time.temporal.ChronoField;\nimport java.time.temporal.ChronoUnit;\nimport java.util.Collection;\nimport java.util.Comparator;\nimport java.util.HashMap;\nimport java.util.LinkedHashSet;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.function.BiConsumer;\nimport java.util.function.BiFunction;\nimport java.util.function.Function;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.mock.java.io.MockFile;\nimport org.evosuite.runtime.mock.java.io.MockFileOutputStream;\nimport org.evosuite.runtime.mock.java.io.MockFileWriter;\nimport org.evosuite.runtime.mock.java.io.MockPrintStream;\nimport org.evosuite.runtime.mock.java.io.MockPrintWriter;\nimport org.evosuite.runtime.mock.java.time.MockClock;\nimport org.evosuite.runtime.mock.java.time.MockInstant;\nimport org.evosuite.runtime.mock.java.time.MockLocalDateTime;\nimport org.evosuite.runtime.mock.java.time.chrono.MockIsoChronology;\nimport org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;\nimport org.evosuite.runtime.mock.java.util.MockRandom;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class JSONObject_accumulate extends JSONObject_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    JSONConfig jSONConfig0 = new JSONConfig();\n    JSONConfig jSONConfig1 = jSONConfig0.setTransientSupport(false);\n    JSONObject jSONObject0 = new JSONObject(Integer.MAX_VALUE, jSONConfig1);\n    jSONConfig1.setIgnoreNullValue(false);\n    jSONConfig0.getKeyComparator();\n    jSONConfig0.setKeyComparator((Comparator<String>) null);\n    jSONConfig1.setCheckDuplicate(true);\n    JSONObject jSONObject1 = jSONObject0.setDateFormat(\"Lt$c6\");\n    jSONObject1.getDouble(\"annotation scanner [{}] cannot support scan [{}]\", (Double) null);\n    Long long0 = new Long(16);\n    String string0 = \"Method name must be not blank!\";\n    Long.getLong(\"Method name must be not blank!\");\n    Long long1 = new Long(16);\n    Long.getLong(\"!X9e2\", long1);\n    // Undeclared exception!\n    jSONObject1.accumulate(\"Lt$c6\", long0);\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/lang/caller/CallerUtilTest###getCallerMethodNameTest",
        "generated_path": "CallerUtil_getCallerMethodName.java",
        "Compile_result": 1,
        "Test_result": 0,
        "Gen_Test": "package cn.hutool.core.lang.caller;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.lang.caller.CallerUtil;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class CallerUtil_getCallerMethodName extends CallerUtil_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test3() throws Throwable {\n    String string0 = CallerUtil.getCallerMethodName(false);\n    assertEquals(\"invoke0\", string0);\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/lang/reflect/MethodHandleUtilTest###findMethodTest",
        "generated_path": "MethodHandleUtil_findMethod.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package cn.hutool.core.lang.reflect;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.annotation.GenericSynthesizedAggregateAnnotation;\nimport cn.hutool.core.annotation.scanner.MethodAnnotationScanner;\nimport cn.hutool.core.lang.reflect.MethodHandleUtil;\nimport java.lang.invoke.MethodHandle;\nimport java.lang.invoke.MethodHandles;\nimport java.lang.invoke.MethodType;\nimport java.lang.reflect.Array;\nimport java.lang.reflect.Method;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class MethodHandleUtil_findMethod extends MethodHandleUtil_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    Class<Object> class0 = Object.class;\n    // Undeclared exception!\n    try {\n        MethodHandleUtil.findMethod(class0, (String) null, (MethodType) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        //\n        // no message in exception (getMessage() returned null)\n        //\n    }\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/lang/func/LambdaUtilTest###getRealClassTest",
        "generated_path": "LambdaUtil_getRealClass.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package cn.hutool.core.lang.func;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.lang.func.Func0;\nimport cn.hutool.core.lang.func.Func1;\nimport cn.hutool.core.lang.func.LambdaUtil;\nimport java.lang.invoke.SerializedLambda;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class LambdaUtil_getRealClass extends LambdaUtil_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void LambdaUtil_getRealClass() throws Throwable {\n    // Undeclared exception!\n    try {\n        LambdaUtil.getRealClass((Func1<SerializedLambda, Object>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        //\n        // no message in exception (getMessage() returned null)\n        //\n        verifyException(\"cn.hutool.core.lang.func.LambdaUtil\", e);\n    }\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/EnumUtilTest###getByTest",
        "generated_path": "EnumUtil_getBy.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package cn.hutool.core.util;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.annotation.scanner.TypeAnnotationScanner;\nimport cn.hutool.core.lang.func.Func1;\nimport cn.hutool.core.util.DesensitizedUtil;\nimport cn.hutool.core.util.EnumUtil;\nimport cn.hutool.core.util.EnumUtilTest;\nimport cn.hutool.core.util.ModifierUtil;\nimport cn.hutool.core.util.ReferenceUtil;\nimport java.nio.CharBuffer;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.function.Function;\nimport java.util.function.Predicate;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class EnumUtil_getBy extends EnumUtil_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test28() throws Throwable {\n    Class<ModifierUtil.ModifierType> class0 = ModifierUtil.ModifierType.class;\n    TypeAnnotationScanner typeAnnotationScanner0 = new TypeAnnotationScanner();\n    Predicate<ModifierUtil.ModifierType> predicate0 = Predicate.isEqual((Object) typeAnnotationScanner0);\n    EnumUtil.getBy(class0, (Predicate<? super ModifierUtil.ModifierType>) predicate0);\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-http/src/test/java/cn/hutool/http/HttpRequestTest###toStringTest",
        "generated_path": "HttpRequest_toString.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package cn.hutool.http;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.io.StreamProgress;\nimport cn.hutool.core.io.resource.BytesResource;\nimport cn.hutool.core.io.resource.CharSequenceResource;\nimport cn.hutool.core.io.resource.ClassPathResource;\nimport cn.hutool.core.io.resource.FileResource;\nimport cn.hutool.core.io.resource.InputStreamResource;\nimport cn.hutool.core.io.resource.MultiFileResource;\nimport cn.hutool.core.io.resource.MultiResource;\nimport cn.hutool.core.io.resource.Resource;\nimport cn.hutool.core.io.resource.StringResource;\nimport cn.hutool.core.io.resource.UrlResource;\nimport cn.hutool.core.io.resource.VfsResource;\nimport cn.hutool.core.io.resource.WebAppResource;\nimport cn.hutool.core.net.url.UrlBuilder;\nimport cn.hutool.core.net.url.UrlPath;\nimport cn.hutool.core.net.url.UrlQuery;\nimport cn.hutool.http.Header;\nimport cn.hutool.http.HttpBase;\nimport cn.hutool.http.HttpConfig;\nimport cn.hutool.http.HttpConnection;\nimport cn.hutool.http.HttpInterceptor;\nimport cn.hutool.http.HttpRequest;\nimport cn.hutool.http.HttpResponse;\nimport cn.hutool.http.Method;\nimport cn.hutool.http.cookie.GlobalCookieManager;\nimport cn.hutool.http.ssl.AndroidSupportSSLFactory;\nimport cn.hutool.http.ssl.CustomProtocolsSSLFactory;\nimport cn.hutool.http.ssl.DefaultSSLFactory;\nimport cn.hutool.http.ssl.TrustAnyHostnameVerifier;\nimport java.io.File;\nimport java.io.PipedInputStream;\nimport java.net.CookieHandler;\nimport java.net.CookieManager;\nimport java.net.CookiePolicy;\nimport java.net.CookieStore;\nimport java.net.HttpCookie;\nimport java.net.InetAddress;\nimport java.net.Proxy;\nimport java.net.SocketAddress;\nimport java.net.URI;\nimport java.net.URL;\nimport java.net.URLStreamHandler;\nimport java.nio.ByteBuffer;\nimport java.nio.CharBuffer;\nimport java.nio.charset.Charset;\nimport java.sql.BatchUpdateException;\nimport java.sql.DataTruncation;\nimport java.sql.SQLInvalidAuthorizationSpecException;\nimport java.sql.SQLNonTransientConnectionException;\nimport java.sql.SQLTransactionRollbackException;\nimport java.sql.SQLTransientException;\nimport java.sql.SQLWarning;\nimport java.util.ArrayDeque;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.LinkedHashSet;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.PriorityQueue;\nimport java.util.SortedSet;\nimport java.util.TreeSet;\nimport java.util.Vector;\nimport java.util.function.BiFunction;\nimport java.util.function.Consumer;\nimport java.util.function.Function;\nimport javax.net.ssl.HostnameVerifier;\nimport javax.net.ssl.SSLSocketFactory;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.mock.java.io.MockFile;\nimport org.evosuite.runtime.mock.java.net.MockURI;\nimport org.evosuite.runtime.mock.java.net.MockURL;\nimport org.evosuite.runtime.testdata.EvoSuiteFile;\nimport org.evosuite.runtime.testdata.FileSystemHandling;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class HttpRequest_toString extends HttpRequest_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    byte[] byteArray0 = new byte[9];\n    byteArray0[0] = (byte) (-11);\n    byteArray0[1] = (byte) (-108);\n    byteArray0[2] = (byte) (-51);\n    byteArray0[3] = (byte) (-87);\n    byteArray0[4] = (byte) 8;\n    byteArray0[5] = (byte) (-118);\n    byteArray0[6] = (byte) (-50);\n    byteArray0[7] = (byte) 20;\n    byteArray0[8] = (byte) 83;\n    boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);\n    assertEquals(9, byteArray0.length);\n    assertArrayEquals(new byte[] { (byte) (-11), (byte) (-108), (byte) (-51), (byte) (-87), (byte) 8, (byte) (-118), (byte) (-50), (byte) 20, (byte) 83 }, byteArray0);\n    assertFalse(boolean0);\n    HttpRequest httpRequest0 = new HttpRequest(\"idwGs\\\"j(gKmN-;k$\");\n    assertEquals(Method.GET, httpRequest0.getMethod());\n    assertEquals(\"UTF-8\", httpRequest0.charset());\n    assertEquals(\"HTTP/1.1\", httpRequest0.httpVersion());\n    assertNotNull(httpRequest0);\n    String string0 = httpRequest0.toString();\n    assertEquals(Method.GET, httpRequest0.getMethod());\n    assertEquals(\"UTF-8\", httpRequest0.charset());\n    assertEquals(\"HTTP/1.1\", httpRequest0.httpVersion());\n    assertNotNull(string0);\n    HttpRequest.setGlobalTimeout((-692));\n    Method method0 = Method.TRACE;\n    HttpRequest httpRequest1 = httpRequest0.method(method0);\n    assertSame(httpRequest0, httpRequest1);\n    assertSame(httpRequest1, httpRequest0);\n    assertEquals(\"UTF-8\", httpRequest0.charset());\n    assertEquals(\"HTTP/1.1\", httpRequest0.httpVersion());\n    assertEquals(Method.TRACE, httpRequest0.getMethod());\n    assertEquals(Method.TRACE, httpRequest1.getMethod());\n    assertEquals(\"HTTP/1.1\", httpRequest1.httpVersion());\n    assertEquals(\"UTF-8\", httpRequest1.charset());\n    assertNotNull(httpRequest1);\n    byte[] byteArray1 = new byte[2];\n    assertFalse(byteArray1.equals((Object) byteArray0));\n    byteArray1[0] = (byte) (-37);\n    byteArray1[1] = (byte) 110;\n    HttpRequest httpRequest2 = httpRequest1.form(\"\\\"I4!$GE'FL@ST:mj,,\", byteArray1, \":#J\");\n    assertEquals(2, byteArray1.length);\n    assertNotSame(byteArray1, byteArray0);\n    assertSame(httpRequest2, httpRequest1);\n    assertSame(httpRequest2, httpRequest0);\n    assertSame(httpRequest0, httpRequest2);\n    assertSame(httpRequest0, httpRequest1);\n    assertSame(httpRequest1, httpRequest2);\n    assertSame(httpRequest1, httpRequest0);\n    assertArrayEquals(new byte[] { (byte) (-37), (byte) 110 }, byteArray1);\n    assertFalse(byteArray1.equals((Object) byteArray0));\n    assertEquals(Method.TRACE, httpRequest2.getMethod());\n    assertEquals(\"HTTP/1.1\", httpRequest2.httpVersion());\n    assertEquals(\"UTF-8\", httpRequest2.charset());\n    assertEquals(\"UTF-8\", httpRequest0.charset());\n    assertEquals(\"HTTP/1.1\", httpRequest0.httpVersion());\n    assertEquals(Method.TRACE, httpRequest0.getMethod());\n    assertEquals(Method.TRACE, httpRequest1.getMethod());\n    assertEquals(\"HTTP/1.1\", httpRequest1.httpVersion());\n    assertEquals(\"UTF-8\", httpRequest1.charset());\n    assertNotNull(httpRequest2);\n    HttpRequest httpRequest3 = httpRequest1.disableCache();\n    assertSame(httpRequest3, httpRequest2);\n    assertSame(httpRequest3, httpRequest1);\n    assertSame(httpRequest3, httpRequest0);\n    assertSame(httpRequest0, httpRequest2);\n    assertSame(httpRequest0, httpRequest3);\n    assertSame(httpRequest0, httpRequest1);\n    assertSame(httpRequest1, httpRequest2);\n    assertSame(httpRequest1, httpRequest3);\n    assertSame(httpRequest1, httpRequest0);\n    assertEquals(\"UTF-8\", httpRequest3.charset());\n    assertEquals(Method.TRACE, httpRequest3.getMethod());\n    assertEquals(\"HTTP/1.1\", httpRequest3.httpVersion());\n    assertEquals(\"UTF-8\", httpRequest0.charset());\n    assertEquals(\"HTTP/1.1\", httpRequest0.httpVersion());\n    assertEquals(Method.TRACE, httpRequest0.getMethod());\n    assertEquals(Method.TRACE, httpRequest1.getMethod());\n    assertEquals(\"HTTP/1.1\", httpRequest1.httpVersion());\n    assertEquals(\"UTF-8\", httpRequest1.charset());\n    assertNotNull(httpRequest3);\n    HttpRequest httpRequest4 = httpRequest2.contentType(\"\\\"I4!$GE'FL@ST:mj,,\");\n    assertEquals(2, byteArray1.length);\n    assertNotSame(byteArray1, byteArray0);\n    assertSame(httpRequest2, httpRequest1);\n    assertSame(httpRequest2, httpRequest0);\n    assertSame(httpRequest2, httpRequest3);\n    assertSame(httpRequest2, httpRequest4);\n    assertSame(httpRequest4, httpRequest2);\n    assertSame(httpRequest4, httpRequest0);\n    assertSame(httpRequest4, httpRequest1);\n    assertSame(httpRequest4, httpRequest3);\n    assertSame(httpRequest0, httpRequest2);\n    assertSame(httpRequest0, httpRequest3);\n    assertSame(httpRequest0, httpRequest1);\n    assertSame(httpRequest0, httpRequest4);\n    assertSame(httpRequest1, httpRequest4);\n    assertSame(httpRequest1, httpRequest2);\n    assertSame(httpRequest1, httpRequest3);\n    assertSame(httpRequest1, httpRequest0);\n    assertArrayEquals(new byte[] { (byte) (-37), (byte) 110 }, byteArray1);\n    assertFalse(byteArray1.equals((Object) byteArray0));\n    assertEquals(Method.TRACE, httpRequest2.getMethod());\n    assertEquals(\"HTTP/1.1\", httpRequest2.httpVersion());\n    assertEquals(\"UTF-8\", httpRequest2.charset());\n    assertEquals(Method.TRACE, httpRequest4.getMethod());\n    assertEquals(\"UTF-8\", httpRequest4.charset());\n    assertEquals(\"HTTP/1.1\", httpRequest4.httpVersion());\n    assertEquals(\"UTF-8\", httpRequest0.charset());\n    assertEquals(\"HTTP/1.1\", httpRequest0.httpVersion());\n    assertEquals(Method.TRACE, httpRequest0.getMethod());\n    assertEquals(Method.TRACE, httpRequest1.getMethod());\n    assertEquals(\"HTTP/1.1\", httpRequest1.httpVersion());\n    assertEquals(\"UTF-8\", httpRequest1.charset());\n    assertNotNull(httpRequest4);\n    ArrayList<File> arrayList0 = new ArrayList<File>();\n    assertTrue(arrayList0.isEmpty());\n    assertEquals(0, arrayList0.size());\n    assertNotNull(arrayList0);\n    MultiFileResource multiFileResource0 = new MultiFileResource(arrayList0);\n    assertTrue(arrayList0.isEmpty());\n    assertEquals(0, arrayList0.size());\n    assertFalse(multiFileResource0.hasNext());\n    assertNotNull(multiFileResource0);\n    HttpRequest httpRequest5 = httpRequest0.body((Resource) multiFileResource0);\n    assertSame(httpRequest5, httpRequest3);\n    assertSame(httpRequest5, httpRequest1);\n    assertSame(httpRequest5, httpRequest0);\n    assertSame(httpRequest5, httpRequest4);\n    assertSame(httpRequest5, httpRequest2);\n    assertSame(httpRequest0, httpRequest2);\n    assertSame(httpRequest0, httpRequest5);\n    assertSame(httpRequest0, httpRequest3);\n    assertSame(httpRequest0, httpRequest1);\n    assertSame(httpRequest0, httpRequest4);\n    assertTrue(arrayList0.isEmpty());\n    assertEquals(0, arrayList0.size());\n    assertFalse(multiFileResource0.hasNext());\n    assertEquals(Method.TRACE, httpRequest5.getMethod());\n    assertEquals(\"HTTP/1.1\", httpRequest5.httpVersion());\n    assertEquals(\"UTF-8\", httpRequest5.charset());\n    assertEquals(\"UTF-8\", httpRequest0.charset());\n    assertEquals(\"HTTP/1.1\", httpRequest0.httpVersion());\n    assertEquals(Method.TRACE, httpRequest0.getMethod());\n    assertNotNull(httpRequest5);\n    HttpRequest.closeCookie();\n    Map<String, Object> map0 = httpRequest2.form();\n    assertEquals(2, byteArray1.length);\n    assertNotSame(byteArray1, byteArray0);\n    assertSame(httpRequest2, httpRequest5);\n    assertSame(httpRequest2, httpRequest1);\n    assertSame(httpRequest2, httpRequest0);\n    assertSame(httpRequest2, httpRequest3);\n    assertSame(httpRequest2, httpRequest4);\n    assertSame(httpRequest0, httpRequest2);\n    assertSame(httpRequest0, httpRequest5);\n    assertSame(httpRequest0, httpRequest3);\n    assertSame(httpRequest0, httpRequest1);\n    assertSame(httpRequest0, httpRequest4);\n    assertSame(httpRequest1, httpRequest4);\n    assertSame(httpRequest1, httpRequest2);\n    assertSame(httpRequest1, httpRequest3);\n    assertSame(httpRequest1, httpRequest0);\n    assertSame(httpRequest1, httpRequest5);\n    assertArrayEquals(new byte[] { (byte) (-37), (byte) 110 }, byteArray1);\n    assertFalse(byteArray1.equals((Object) byteArray0));\n    assertEquals(Method.TRACE, httpRequest2.getMethod());\n    assertEquals(\"HTTP/1.1\", httpRequest2.httpVersion());\n    assertEquals(\"UTF-8\", httpRequest2.charset());\n    assertEquals(1, map0.size());\n    assertFalse(map0.isEmpty());\n    assertEquals(\"UTF-8\", httpRequest0.charset());\n    assertEquals(\"HTTP/1.1\", httpRequest0.httpVersion());\n    assertEquals(Method.TRACE, httpRequest0.getMethod());\n    assertEquals(Method.TRACE, httpRequest1.getMethod());\n    assertEquals(\"HTTP/1.1\", httpRequest1.httpVersion());\n    assertEquals(\"UTF-8\", httpRequest1.charset());\n    assertNotNull(map0);\n    httpRequest4.form(map0);\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-dfa/src/test/java/cn/hutool/dfa/SensitiveUtilTest###testSensitiveFilter",
        "generated_path": "SensitiveUtil_sensitiveFilter.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package cn.hutool.dfa;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.lang.Filter;\nimport cn.hutool.dfa.FoundWord;\nimport cn.hutool.dfa.SensitiveProcessor;\nimport cn.hutool.dfa.SensitiveUtil;\nimport java.util.Collection;\nimport java.util.LinkedHashSet;\nimport java.util.LinkedList;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class SensitiveUtil_sensitiveFilter extends SensitiveUtil_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    SensitiveProcessor sensitiveProcessor0 = mock(SensitiveProcessor.class, new ViolatedAssumptionAnswer());\n    SensitiveUtil.sensitiveFilter(\"\", false, sensitiveProcessor0);\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/net/NetUtilTest###getLocalHostNameTest",
        "generated_path": "NetUtil_getLocalHostName.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package cn.hutool.core.net;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.lang.Filter;\nimport cn.hutool.core.net.NetUtil;\nimport cn.hutool.core.net.PassAuth;\nimport cn.hutool.core.net.UserPassAuthenticator;\nimport java.math.BigInteger;\nimport java.net.Authenticator;\nimport java.net.Inet6Address;\nimport java.net.InetAddress;\nimport java.net.InetSocketAddress;\nimport java.net.NetworkInterface;\nimport java.nio.ByteBuffer;\nimport java.util.LinkedHashSet;\nimport java.util.Set;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.Future;\nimport java.util.concurrent.TimeUnit;\nimport java.util.function.Consumer;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.mock.java.net.MockInetAddress;\nimport org.evosuite.runtime.mock.java.net.MockInetSocketAddress;\nimport org.evosuite.runtime.mock.java.net.MockNetworkInterface;\nimport org.evosuite.runtime.mock.java.util.MockRandom;\nimport org.evosuite.runtime.testdata.EvoSuiteLocalAddress;\nimport org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;\nimport org.evosuite.runtime.testdata.NetworkHandling;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class NetUtil_getLocalHostName extends NetUtil_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    NetUtil.getMultistageReverseProxyIp(\",1!4upqStqrxqw>&S\");\n    InetAddress inetAddress0 = InetAddress.getLocalHost();\n    NetUtil.getMacAddress(inetAddress0);\n    NetUtil.getLocalHostName();\n    NetUtil.ping(\"192.168.1.42\");\n    NetUtil.ipv6ToBigInteger(\".\");\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/net/NetUtilTest###getLocalhostTest",
        "generated_path": "NetUtil_getLocalhost.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package cn.hutool.core.net;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.lang.Filter;\nimport cn.hutool.core.net.NetUtil;\nimport cn.hutool.core.net.PassAuth;\nimport cn.hutool.core.net.UserPassAuthenticator;\nimport java.math.BigInteger;\nimport java.net.Authenticator;\nimport java.net.Inet6Address;\nimport java.net.InetAddress;\nimport java.net.InetSocketAddress;\nimport java.net.NetworkInterface;\nimport java.nio.ByteBuffer;\nimport java.util.LinkedHashSet;\nimport java.util.Set;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.Future;\nimport java.util.concurrent.TimeUnit;\nimport java.util.function.Consumer;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.mock.java.net.MockInetAddress;\nimport org.evosuite.runtime.mock.java.net.MockInetSocketAddress;\nimport org.evosuite.runtime.mock.java.net.MockNetworkInterface;\nimport org.evosuite.runtime.mock.java.util.MockRandom;\nimport org.evosuite.runtime.testdata.EvoSuiteLocalAddress;\nimport org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;\nimport org.evosuite.runtime.testdata.NetworkHandling;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class NetUtil_getLocalhost extends NetUtil_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    NetUtil.getLocalhostStr();\n    NetUtil.localIps();\n    NetUtil.getUsableLocalPort(1544);\n    NetUtil.isInnerIP(\"192.168.1.42\");\n    InetAddress inetAddress0 = NetUtil.getLocalhost();\n    NetUtil.getHardwareAddress(inetAddress0);\n    NetUtil.createAddress(\"*\", 1544);\n    NetUtil.localIpv6s();\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/NumberUtilTest###isNumberTest",
        "generated_path": "NumberUtil_isNumber.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package cn.hutool.core.util;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.util.NumberUtil;\nimport java.math.BigDecimal;\nimport java.math.BigInteger;\nimport java.math.MathContext;\nimport java.math.RoundingMode;\nimport java.text.DecimalFormat;\nimport java.text.DecimalFormatSymbols;\nimport java.util.Collection;\nimport java.util.LinkedHashSet;\nimport java.util.LinkedList;\nimport java.util.function.Consumer;\nimport java.util.function.UnaryOperator;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.Random;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.mock.java.util.MockRandom;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class NumberUtil_isNumber extends NumberUtil_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test001() throws Throwable {\n    RoundingMode roundingMode0 = RoundingMode.CEILING;\n    BigDecimal bigDecimal0 = NumberUtil.round((-1864.45625), 1685, roundingMode0);\n    NumberUtil.decimalFormatMoney((-1864.45625));\n    NumberUtil.isNumber(\"-1,864.46\");\n    NumberUtil.parseNumber(\"-1,864.46\");\n    BigDecimal[] bigDecimalArray0 = new BigDecimal[6];\n    bigDecimalArray0[0] = bigDecimal0;\n    bigDecimalArray0[1] = bigDecimal0;\n    bigDecimalArray0[2] = bigDecimal0;\n    bigDecimalArray0[3] = bigDecimal0;\n    bigDecimalArray0[4] = bigDecimal0;\n    bigDecimalArray0[5] = bigDecimal0;\n    NumberUtil.sub(bigDecimalArray0);\n    byte[] byteArray0 = new byte[5];\n    byteArray0[0] = (byte) 108;\n    byteArray0[1] = (byte) 60;\n    byteArray0[2] = (byte) 19;\n    byteArray0[3] = (byte) 12;\n    byteArray0[4] = (byte) (-27);\n    BigInteger bigInteger0 = new BigInteger(byteArray0);\n    NumberUtil.toUnsignedByteArray(bigInteger0);\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/io/FileUtilTest###equalsTest",
        "generated_path": "FileUtil_equals.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package cn.hutool.core.io;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.io.FileUtil;\nimport cn.hutool.core.io.LineHandler;\nimport cn.hutool.core.io.file.FileMode;\nimport cn.hutool.core.io.file.FileReader;\nimport cn.hutool.core.io.file.LineSeparator;\nimport cn.hutool.core.io.file.PathUtil;\nimport cn.hutool.core.io.file.Tailer;\nimport java.io.BufferedInputStream;\nimport java.io.BufferedOutputStream;\nimport java.io.BufferedWriter;\nimport java.io.ByteArrayInputStream;\nimport java.io.DataInputStream;\nimport java.io.DataOutputStream;\nimport java.io.File;\nimport java.io.FileDescriptor;\nimport java.io.FileFilter;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.io.PipedInputStream;\nimport java.io.PipedOutputStream;\nimport java.io.PrintStream;\nimport java.io.PushbackInputStream;\nimport java.io.RandomAccessFile;\nimport java.io.SequenceInputStream;\nimport java.net.URI;\nimport java.net.URL;\nimport java.net.URLStreamHandler;\nimport java.nio.ByteBuffer;\nimport java.nio.CharBuffer;\nimport java.nio.charset.Charset;\nimport java.nio.charset.IllegalCharsetNameException;\nimport java.nio.charset.UnsupportedCharsetException;\nimport java.nio.file.InvalidPathException;\nimport java.nio.file.Path;\nimport java.nio.file.StandardCopyOption;\nimport java.util.Collection;\nimport java.util.Comparator;\nimport java.util.Enumeration;\nimport java.util.HashMap;\nimport java.util.LinkedHashSet;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.Future;\nimport java.util.concurrent.TimeUnit;\nimport java.util.function.BiConsumer;\nimport java.util.function.Consumer;\nimport java.util.function.Predicate;\nimport java.util.zip.Adler32;\nimport java.util.zip.Checksum;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.mock.java.io.MockFile;\nimport org.evosuite.runtime.mock.java.io.MockFileInputStream;\nimport org.evosuite.runtime.mock.java.io.MockFileOutputStream;\nimport org.evosuite.runtime.mock.java.io.MockPrintStream;\nimport org.evosuite.runtime.mock.java.io.MockRandomAccessFile;\nimport org.evosuite.runtime.mock.java.net.MockURI;\nimport org.evosuite.runtime.mock.java.net.MockURL;\nimport org.evosuite.runtime.testdata.EvoSuiteFile;\nimport org.evosuite.runtime.testdata.EvoSuiteURL;\nimport org.evosuite.runtime.testdata.FileSystemHandling;\nimport org.evosuite.runtime.testdata.NetworkHandling;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class FileUtil_equals extends FileUtil_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test058() throws Throwable {\n    File file0 = FileUtil.createTempFile(\"IDAT\", true);\n    FileUtil.subPath(\"IDAT\", \"IDAT\");\n    file0.getCanonicalPath();\n    FileUtil.subPath(\"IDAT\", \"IDAT\");\n    FileUtil.cleanEmpty(file0);\n    byte[] byteArray0 = new byte[6];\n    byteArray0[0] = (byte) 123;\n    byteArray0[1] = (byte) 95;\n    file0.setWritable(true);\n    byteArray0[2] = (byte) 16;\n    byteArray0[3] = (byte) 0;\n    byteArray0[4] = (byte) 0;\n    byteArray0[5] = (byte) (-45);\n    FileUtil.equals(file0, file0);\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/ClassUtilTest###getLocationPathTest",
        "generated_path": "ClassUtil_getLocationPath.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package cn.hutool.core.util;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.annotation.GenericSynthesizedAggregateAnnotation;\nimport cn.hutool.core.annotation.scanner.MethodAnnotationScanner;\nimport cn.hutool.core.lang.Filter;\nimport cn.hutool.core.util.ClassUtil;\nimport java.lang.annotation.Annotation;\nimport java.lang.reflect.Array;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.Method;\nimport java.net.MalformedURLException;\nimport java.net.URI;\nimport java.net.URL;\nimport java.net.URLStreamHandler;\nimport java.nio.BufferUnderflowException;\nimport java.nio.ByteBuffer;\nimport java.nio.CharBuffer;\nimport java.nio.charset.Charset;\nimport java.time.Clock;\nimport java.time.DayOfWeek;\nimport java.time.Duration;\nimport java.time.Instant;\nimport java.time.LocalDateTime;\nimport java.time.Month;\nimport java.time.ZoneId;\nimport java.time.ZoneOffset;\nimport java.time.chrono.ChronoLocalDate;\nimport java.time.format.DateTimeFormatter;\nimport java.time.format.DecimalStyle;\nimport java.time.format.ResolverStyle;\nimport java.time.temporal.ChronoUnit;\nimport java.time.temporal.TemporalUnit;\nimport java.util.Date;\nimport java.util.LinkedHashSet;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Set;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.System;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.mock.java.net.MockURI;\nimport org.evosuite.runtime.mock.java.net.MockURL;\nimport org.evosuite.runtime.mock.java.time.MockClock;\nimport org.evosuite.runtime.mock.java.time.MockInstant;\nimport org.evosuite.runtime.mock.java.time.MockLocalDate;\nimport org.evosuite.runtime.mock.java.time.MockLocalDateTime;\nimport org.evosuite.runtime.mock.java.time.MockLocalTime;\nimport org.evosuite.runtime.mock.java.time.MockMonthDay;\nimport org.evosuite.runtime.mock.java.time.MockOffsetDateTime;\nimport org.evosuite.runtime.mock.java.time.MockOffsetTime;\nimport org.evosuite.runtime.mock.java.time.MockYear;\nimport org.evosuite.runtime.mock.java.time.MockYearMonth;\nimport org.evosuite.runtime.mock.java.time.MockZonedDateTime;\nimport org.evosuite.runtime.mock.java.util.MockDate;\nimport org.evosuite.runtime.testdata.EvoSuiteFile;\nimport org.evosuite.runtime.testdata.FileSystemHandling;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class ClassUtil_getLocationPath extends ClassUtil_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test027() throws Throwable {\n    Set<Class<?>> set0 = ClassUtil.scanPackage();\n    assertNotNull(set0);\n    assertEquals(0, set0.size());\n    assertTrue(set0.isEmpty());\n    Class<MockLocalTime> class0 = MockLocalTime.class;\n    Class<?> class1 = ClassUtil.getTypeArgument(class0);\n    assertNull(class1);\n    ClassUtil classUtil0 = new ClassUtil();\n    assertNotNull(classUtil0);\n    String string0 = ClassUtil.getLocationPath((Class<?>) null);\n    assertNull(string0);\n    Class<?> class2 = ClassUtil.getEnclosingClass((Class<?>) null);\n    assertNull(class2);\n    Class<Long> class3 = Long.class;\n    boolean boolean0 = ClassUtil.isAssignable(class0, class3);\n    assertFalse(boolean0);\n    String[] stringArray0 = ClassUtil.getJavaClassPaths();\n    assertNotNull(stringArray0);\n    assertEquals(1, stringArray0.length);\n    String string1 = ClassUtil.getPackagePath((Class<?>) null);\n    assertEquals(\"\", string1);\n    assertNotNull(string1);\n    Class<GenericSynthesizedAggregateAnnotation.MetaAnnotation> class4 = GenericSynthesizedAggregateAnnotation.MetaAnnotation.class;\n    String string2 = ClassUtil.getPackagePath(class4);\n    assertEquals(\"cn/hutool/core/annotation\", string2);\n    assertNotNull(string2);\n    assertFalse(string2.equals((Object) string1));\n    boolean boolean1 = ClassUtil.isEnum(class4);\n    assertFalse(boolean1);\n    assertTrue(boolean1 == boolean0);\n    String string3 = ClassUtil.getClassName((Object) \"path.separator\", false);\n    assertEquals(\"java.lang.String\", string3);\n    assertNotNull(string3);\n    assertFalse(string3.equals((Object) string1));\n    assertFalse(string3.equals((Object) string2));\n    URL uRL0 = ClassUtil.getResourceURL(\">*P\");\n    assertNull(uRL0);\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/lang/tree/TreeTest###walkTest",
        "generated_path": "Tree_walk.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package cn.hutool.core.lang.tree;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.lang.Filter;\nimport cn.hutool.core.lang.tree.Tree;\nimport cn.hutool.core.lang.tree.TreeNodeConfig;\nimport java.lang.reflect.Array;\nimport java.nio.CharBuffer;\nimport java.util.List;\nimport java.util.function.Consumer;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class Tree_walk extends Tree_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void Tree_walk() throws Throwable {\n    Tree<Object> tree0 = new Tree<Object>();\n    TreeNodeConfig treeNodeConfig0 = tree0.getConfig();\n    Tree<String> tree1 = new Tree<String>(treeNodeConfig0);\n    // Undeclared exception!\n    try {\n        tree1.walk((Consumer<Tree<String>>) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        //\n        // no message in exception (getMessage() returned null)\n        //\n        verifyException(\"cn.hutool.core.lang.tree.Tree\", e);\n    }\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/io/FileUtilTest###getWebRootTest",
        "generated_path": "FileUtil_getWebRoot.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package cn.hutool.core.io;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.io.FileUtil;\nimport cn.hutool.core.io.LineHandler;\nimport cn.hutool.core.io.file.FileMode;\nimport cn.hutool.core.io.file.FileReader;\nimport cn.hutool.core.io.file.LineSeparator;\nimport cn.hutool.core.io.file.PathUtil;\nimport cn.hutool.core.io.file.Tailer;\nimport java.io.BufferedInputStream;\nimport java.io.BufferedOutputStream;\nimport java.io.BufferedWriter;\nimport java.io.ByteArrayInputStream;\nimport java.io.DataInputStream;\nimport java.io.DataOutputStream;\nimport java.io.File;\nimport java.io.FileDescriptor;\nimport java.io.FileFilter;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.io.PipedInputStream;\nimport java.io.PipedOutputStream;\nimport java.io.PrintStream;\nimport java.io.PushbackInputStream;\nimport java.io.RandomAccessFile;\nimport java.io.SequenceInputStream;\nimport java.net.URI;\nimport java.net.URL;\nimport java.net.URLStreamHandler;\nimport java.nio.ByteBuffer;\nimport java.nio.CharBuffer;\nimport java.nio.charset.Charset;\nimport java.nio.charset.IllegalCharsetNameException;\nimport java.nio.charset.UnsupportedCharsetException;\nimport java.nio.file.InvalidPathException;\nimport java.nio.file.Path;\nimport java.nio.file.StandardCopyOption;\nimport java.util.Collection;\nimport java.util.Comparator;\nimport java.util.Enumeration;\nimport java.util.HashMap;\nimport java.util.LinkedHashSet;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.Future;\nimport java.util.concurrent.TimeUnit;\nimport java.util.function.BiConsumer;\nimport java.util.function.Consumer;\nimport java.util.function.Predicate;\nimport java.util.zip.Adler32;\nimport java.util.zip.Checksum;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.mock.java.io.MockFile;\nimport org.evosuite.runtime.mock.java.io.MockFileInputStream;\nimport org.evosuite.runtime.mock.java.io.MockFileOutputStream;\nimport org.evosuite.runtime.mock.java.io.MockPrintStream;\nimport org.evosuite.runtime.mock.java.io.MockRandomAccessFile;\nimport org.evosuite.runtime.mock.java.net.MockURI;\nimport org.evosuite.runtime.mock.java.net.MockURL;\nimport org.evosuite.runtime.testdata.EvoSuiteFile;\nimport org.evosuite.runtime.testdata.EvoSuiteURL;\nimport org.evosuite.runtime.testdata.FileSystemHandling;\nimport org.evosuite.runtime.testdata.NetworkHandling;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class FileUtil_getWebRoot extends FileUtil_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test013() throws Throwable {\n    FileUtil.getWebRoot();\n    HashMap<String, Object> hashMap0 = new HashMap<String, Object>();\n    File file0 = MockFile.createTempFile(\"MGABYTS\", \"MGABYTS\", (File) null);\n    FileUtil.writeUtf8Map(hashMap0, file0, \"MGABYTS\", true);\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/ObjectUtilTest###toStringTest",
        "generated_path": "ObjectUtil_toString.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "package cn.hutool.core.util;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.annotation.scanner.AbstractTypeAnnotationScanner;\nimport cn.hutool.core.annotation.scanner.MethodAnnotationScanner;\nimport cn.hutool.core.util.ObjectUtil;\nimport java.awt.BufferCapabilities;\nimport java.awt.Dimension;\nimport java.awt.ImageCapabilities;\nimport java.awt.Insets;\nimport java.awt.PageAttributes;\nimport java.awt.Point;\nimport java.awt.Rectangle;\nimport java.awt.RenderingHints;\nimport java.awt.geom.AffineTransform;\nimport java.awt.geom.Dimension2D;\nimport java.awt.geom.Point2D;\nimport java.awt.geom.Rectangle2D;\nimport java.io.ByteArrayOutputStream;\nimport java.io.File;\nimport java.io.PrintStream;\nimport java.lang.reflect.Array;\nimport java.net.HttpCookie;\nimport java.nio.CharBuffer;\nimport java.sql.BatchUpdateException;\nimport java.sql.ClientInfoStatus;\nimport java.sql.DataTruncation;\nimport java.sql.Date;\nimport java.sql.SQLClientInfoException;\nimport java.sql.SQLDataException;\nimport java.sql.SQLException;\nimport java.sql.SQLFeatureNotSupportedException;\nimport java.sql.SQLIntegrityConstraintViolationException;\nimport java.sql.SQLInvalidAuthorizationSpecException;\nimport java.sql.SQLNonTransientConnectionException;\nimport java.sql.SQLNonTransientException;\nimport java.sql.SQLSyntaxErrorException;\nimport java.sql.SQLTimeoutException;\nimport java.sql.SQLTransactionRollbackException;\nimport java.sql.SQLTransientConnectionException;\nimport java.sql.SQLTransientException;\nimport java.sql.SQLWarning;\nimport java.sql.Time;\nimport java.sql.Timestamp;\nimport java.text.BreakIterator;\nimport java.text.ChoiceFormat;\nimport java.text.Collator;\nimport java.text.DateFormatSymbols;\nimport java.text.DecimalFormat;\nimport java.text.DecimalFormatSymbols;\nimport java.text.FieldPosition;\nimport java.text.Format;\nimport java.text.NumberFormat;\nimport java.text.RuleBasedCollator;\nimport java.text.StringCharacterIterator;\nimport java.time.DateTimeException;\nimport java.time.Instant;\nimport java.time.LocalDate;\nimport java.time.LocalDateTime;\nimport java.time.LocalTime;\nimport java.time.Month;\nimport java.time.chrono.ChronoLocalDate;\nimport java.time.temporal.ChronoField;\nimport java.util.ArrayDeque;\nimport java.util.BitSet;\nimport java.util.Collection;\nimport java.util.Hashtable;\nimport java.util.IdentityHashMap;\nimport java.util.LinkedHashMap;\nimport java.util.LinkedHashSet;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Properties;\nimport java.util.SimpleTimeZone;\nimport java.util.Spliterator;\nimport java.util.Stack;\nimport java.util.StringTokenizer;\nimport java.util.TimeZone;\nimport java.util.TreeMap;\nimport java.util.Vector;\nimport java.util.function.Consumer;\nimport java.util.function.Function;\nimport java.util.function.Supplier;\nimport java.util.function.UnaryOperator;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.mock.java.io.MockFile;\nimport org.evosuite.runtime.mock.java.io.MockPrintStream;\nimport org.evosuite.runtime.mock.java.lang.MockThrowable;\nimport org.evosuite.runtime.mock.java.text.MockDateFormat;\nimport org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;\nimport org.evosuite.runtime.mock.java.time.MockInstant;\nimport org.evosuite.runtime.mock.java.time.MockLocalDate;\nimport org.evosuite.runtime.mock.java.time.MockLocalDateTime;\nimport org.evosuite.runtime.mock.java.time.MockLocalTime;\nimport org.evosuite.runtime.mock.java.util.MockDate;\nimport org.evosuite.runtime.mock.java.util.MockGregorianCalendar;\nimport org.junit.runner.RunWith;\nimport sun.awt.SunHints;\nimport sun.util.calendar.ZoneInfo;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class ObjectUtil_toString extends ObjectUtil_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test16() throws Throwable {\n    Float float0 = new Float(0.0);\n    Float.min(0.0F, 0.0F);\n    ObjectUtil.defaultIfNull(float0, float0);\n    String string0 = ObjectUtil.toString((Object) null);\n    assertNotNull(string0);\n    assertEquals(\"null\", string0);\n    ObjectUtil.defaultIfBlank(\"\", \"\");\n    LinkedHashMap<Float, Timestamp> linkedHashMap0 = new LinkedHashMap<Float, Timestamp>();\n    LinkedHashMap<Float, Timestamp> linkedHashMap1 = ObjectUtil.clone(linkedHashMap0);\n    assertNotSame(linkedHashMap1, linkedHashMap0);\n    assertNotNull(linkedHashMap1);\n    Hashtable<NumberFormat, Dimension> hashtable0 = new Hashtable<NumberFormat, Dimension>();\n    Locale locale0 = Locale.CHINESE;\n    NumberFormat numberFormat0 = NumberFormat.getNumberInstance(locale0);\n    Dimension dimension0 = new Dimension();\n    hashtable0.put(numberFormat0, dimension0);\n    Function<Hashtable<NumberFormat, Dimension>, CharBuffer> function0 = (Function<Hashtable<NumberFormat, Dimension>, CharBuffer>) mock(Function.class, new ViolatedAssumptionAnswer());\n    doReturn((Object) null).when(function0).apply(anyMap());\n    char[] charArray0 = new char[5];\n    charArray0[0] = '[';\n    charArray0[1] = 'A';\n    charArray0[2] = 'P';\n    charArray0[3] = 'O';\n    charArray0[4] = 'y';\n    CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);\n    CharBuffer charBuffer1 = ObjectUtil.defaultIfNull(hashtable0, (Function<Hashtable<NumberFormat, Dimension>, ? extends CharBuffer>) function0, charBuffer0);\n    assertNull(charBuffer1);\n    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();\n    MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(373, 0, 0);\n    int int0 = ObjectUtil.compare(mockGregorianCalendar0, mockGregorianCalendar1);\n    assertEquals(1, int0);\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/net/NetUtilTest###isUsableLocalPortTest",
        "generated_path": "NetUtil_isUsableLocalPort.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package cn.hutool.core.net;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.lang.Filter;\nimport cn.hutool.core.net.NetUtil;\nimport cn.hutool.core.net.PassAuth;\nimport cn.hutool.core.net.UserPassAuthenticator;\nimport java.math.BigInteger;\nimport java.net.Authenticator;\nimport java.net.Inet6Address;\nimport java.net.InetAddress;\nimport java.net.InetSocketAddress;\nimport java.net.NetworkInterface;\nimport java.nio.ByteBuffer;\nimport java.util.LinkedHashSet;\nimport java.util.Set;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.Future;\nimport java.util.concurrent.TimeUnit;\nimport java.util.function.Consumer;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.mock.java.net.MockInetAddress;\nimport org.evosuite.runtime.mock.java.net.MockInetSocketAddress;\nimport org.evosuite.runtime.mock.java.net.MockNetworkInterface;\nimport org.evosuite.runtime.mock.java.util.MockRandom;\nimport org.evosuite.runtime.testdata.EvoSuiteLocalAddress;\nimport org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;\nimport org.evosuite.runtime.testdata.NetworkHandling;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class NetUtil_isUsableLocalPort extends NetUtil_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    NetUtil.parseCookies(\"\");\n    InetSocketAddress inetSocketAddress0 = NetUtil.createAddress(\"kTWp+{B:oFS{qDfYQJ7\", 0);\n    NetUtil.isOpen(inetSocketAddress0, 0);\n    NetUtil.localIps();\n    NetUtil.localIps();\n    NetUtil.isUsableLocalPort(0);\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/collection/RingIndexUtilTest###ringNextIntByObjTest",
        "generated_path": "RingIndexUtil_ringNextIntByObj.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package cn.hutool.core.collection;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.collection.RingIndexUtil;\nimport java.util.concurrent.atomic.AtomicInteger;\nimport java.util.concurrent.atomic.AtomicLong;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class RingIndexUtil_ringNextIntByObj extends RingIndexUtil_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void RingIndexUtil_ringNextIntByObj() throws Throwable {\n    AtomicLong atomicLong0 = new AtomicLong(676L);\n    AtomicInteger atomicInteger0 = new AtomicInteger((-646));\n    // Undeclared exception!\n    try {\n        RingIndexUtil.ringNextIntByObj(atomicLong0, atomicInteger0);\n        fail(\"Expecting exception: IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n        //\n        // Unsupported object type: java.util.concurrent.atomic.AtomicLong\n        //\n        verifyException(\"cn.hutool.core.collection.CollUtil\", e);\n    }\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/ClassUtilTest###getShortClassNameTest",
        "generated_path": "ClassUtil_getShortClassName.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package cn.hutool.core.util;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.annotation.GenericSynthesizedAggregateAnnotation;\nimport cn.hutool.core.annotation.scanner.MethodAnnotationScanner;\nimport cn.hutool.core.lang.Filter;\nimport cn.hutool.core.util.ClassUtil;\nimport java.lang.annotation.Annotation;\nimport java.lang.reflect.Array;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.Method;\nimport java.net.MalformedURLException;\nimport java.net.URI;\nimport java.net.URL;\nimport java.net.URLStreamHandler;\nimport java.nio.BufferUnderflowException;\nimport java.nio.ByteBuffer;\nimport java.nio.CharBuffer;\nimport java.nio.charset.Charset;\nimport java.time.Clock;\nimport java.time.DayOfWeek;\nimport java.time.Duration;\nimport java.time.Instant;\nimport java.time.LocalDateTime;\nimport java.time.Month;\nimport java.time.ZoneId;\nimport java.time.ZoneOffset;\nimport java.time.chrono.ChronoLocalDate;\nimport java.time.format.DateTimeFormatter;\nimport java.time.format.DecimalStyle;\nimport java.time.format.ResolverStyle;\nimport java.time.temporal.ChronoUnit;\nimport java.time.temporal.TemporalUnit;\nimport java.util.Date;\nimport java.util.LinkedHashSet;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Set;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.System;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.mock.java.net.MockURI;\nimport org.evosuite.runtime.mock.java.net.MockURL;\nimport org.evosuite.runtime.mock.java.time.MockClock;\nimport org.evosuite.runtime.mock.java.time.MockInstant;\nimport org.evosuite.runtime.mock.java.time.MockLocalDate;\nimport org.evosuite.runtime.mock.java.time.MockLocalDateTime;\nimport org.evosuite.runtime.mock.java.time.MockLocalTime;\nimport org.evosuite.runtime.mock.java.time.MockMonthDay;\nimport org.evosuite.runtime.mock.java.time.MockOffsetDateTime;\nimport org.evosuite.runtime.mock.java.time.MockOffsetTime;\nimport org.evosuite.runtime.mock.java.time.MockYear;\nimport org.evosuite.runtime.mock.java.time.MockYearMonth;\nimport org.evosuite.runtime.mock.java.time.MockZonedDateTime;\nimport org.evosuite.runtime.mock.java.util.MockDate;\nimport org.evosuite.runtime.testdata.EvoSuiteFile;\nimport org.evosuite.runtime.testdata.FileSystemHandling;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class ClassUtil_getShortClassName extends ClassUtil_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test007() throws Throwable {\n    Class<Locale> class0 = Locale.class;\n    boolean boolean0 = ClassUtil.isJdkClass(class0);\n    assertTrue(boolean0);\n    Class<MockLocalDateTime> class1 = MockLocalDateTime.class;\n    boolean boolean1 = ClassUtil.isSimpleValueType(class1);\n    assertFalse(boolean1);\n    assertFalse(boolean1 == boolean0);\n    URI uRI0 = MockURI.aHttpURI;\n    assertNotNull(uRI0);\n    assertEquals(\"http\", uRI0.getScheme());\n    assertEquals(\"\", uRI0.getRawPath());\n    assertTrue(uRI0.isAbsolute());\n    assertFalse(uRI0.isOpaque());\n    assertEquals(\"foo.bar\", uRI0.getRawAuthority());\n    assertEquals(\"http://foo.bar\", uRI0.toString());\n    assertEquals(\"foo.bar\", uRI0.getHost());\n    assertEquals((-1), uRI0.getPort());\n    assertNull(uRI0.getRawFragment());\n    assertNull(uRI0.getRawQuery());\n    assertNull(uRI0.getRawUserInfo());\n    String string0 = ClassUtil.getShortClassName(\"\");\n    assertEquals(\"\", string0);\n    assertNotNull(string0);\n    Field field0 = ClassUtil.getDeclaredField(class1, \"dayofweek\");\n    assertNull(field0);\n    URL uRL0 = MockURI.toURL(uRI0);\n    assertNotNull(uRL0);\n    assertEquals(\"http\", uRI0.getScheme());\n    assertEquals(\"\", uRI0.getRawPath());\n    assertTrue(uRI0.isAbsolute());\n    assertFalse(uRI0.isOpaque());\n    assertEquals(\"foo.bar\", uRI0.getRawAuthority());\n    assertEquals(\"http://foo.bar\", uRI0.toString());\n    assertEquals(\"foo.bar\", uRI0.getHost());\n    assertEquals((-1), uRI0.getPort());\n    assertNull(uRI0.getRawFragment());\n    assertNull(uRI0.getRawQuery());\n    assertNull(uRI0.getRawUserInfo());\n    assertEquals(\"http://foo.bar\", uRL0.toString());\n    assertEquals(\"http://foo.bar\", uRL0.toExternalForm());\n    assertNull(uRL0.getQuery());\n    assertEquals((-1), uRL0.getDefaultPort());\n    assertNull(uRL0.getRef());\n    assertEquals(\"\", uRL0.getFile());\n    assertEquals(\"http\", uRL0.getProtocol());\n    assertEquals(\"foo.bar\", uRL0.getAuthority());\n    assertEquals((-1), uRL0.getPort());\n    assertEquals(\"\", uRL0.getPath());\n    assertEquals(\"foo.bar\", uRL0.getHost());\n    assertNull(uRL0.getUserInfo());\n    URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());\n    URL uRL1 = MockURL.URL(uRL0, \"\", uRLStreamHandler0);\n    assertNotNull(uRL1);\n    assertEquals(\"http\", uRI0.getScheme());\n    assertEquals(\"\", uRI0.getRawPath());\n    assertTrue(uRI0.isAbsolute());\n    assertFalse(uRI0.isOpaque());\n    assertEquals(\"foo.bar\", uRI0.getRawAuthority());\n    assertEquals(\"http://foo.bar\", uRI0.toString());\n    assertEquals(\"foo.bar\", uRI0.getHost());\n    assertEquals((-1), uRI0.getPort());\n    assertNull(uRI0.getRawFragment());\n    assertNull(uRI0.getRawQuery());\n    assertNull(uRI0.getRawUserInfo());\n    assertEquals(\"http://foo.bar\", uRL0.toString());\n    assertEquals(\"http://foo.bar\", uRL0.toExternalForm());\n    assertNull(uRL0.getQuery());\n    assertEquals((-1), uRL0.getDefaultPort());\n    assertNull(uRL0.getRef());\n    assertEquals(\"\", uRL0.getFile());\n    assertEquals(\"http\", uRL0.getProtocol());\n    assertEquals(\"foo.bar\", uRL0.getAuthority());\n    assertEquals((-1), uRL0.getPort());\n    assertEquals(\"\", uRL0.getPath());\n    assertEquals(\"foo.bar\", uRL0.getHost());\n    assertNull(uRL0.getUserInfo());\n    assertNull(uRL1.toExternalForm());\n    assertEquals(0, uRL1.getDefaultPort());\n    assertNull(uRL1.getQuery());\n    assertEquals(\"\", uRL1.getFile());\n    assertEquals((-1), uRL1.getPort());\n    assertEquals(\"http\", uRL1.getProtocol());\n    assertNull(uRL1.getRef());\n    assertEquals(\"foo.bar\", uRL1.getAuthority());\n    assertNull(uRL1.getUserInfo());\n    assertEquals(\"\", uRL1.getPath());\n    assertEquals(\"foo.bar\", uRL1.getHost());\n    assertNull(uRL1.toString());\n    assertFalse(uRL1.equals((Object) uRL0));\n    assertNotSame(uRL0, uRL1);\n    assertNotSame(uRL1, uRL0);\n    String string1 = ClassUtil.getClassName((Object) uRL1, false);\n    assertEquals(\"java.net.URL\", string1);\n    assertNotNull(string1);\n    assertEquals(\"http\", uRI0.getScheme());\n    assertEquals(\"\", uRI0.getRawPath());\n    assertTrue(uRI0.isAbsolute());\n    assertFalse(uRI0.isOpaque());\n    assertEquals(\"foo.bar\", uRI0.getRawAuthority());\n    assertEquals(\"http://foo.bar\", uRI0.toString());\n    assertEquals(\"foo.bar\", uRI0.getHost());\n    assertEquals((-1), uRI0.getPort());\n    assertNull(uRI0.getRawFragment());\n    assertNull(uRI0.getRawQuery());\n    assertNull(uRI0.getRawUserInfo());\n    assertEquals(\"http://foo.bar\", uRL0.toString());\n    assertEquals(\"http://foo.bar\", uRL0.toExternalForm());\n    assertNull(uRL0.getQuery());\n    assertEquals((-1), uRL0.getDefaultPort());\n    assertNull(uRL0.getRef());\n    assertEquals(\"\", uRL0.getFile());\n    assertEquals(\"http\", uRL0.getProtocol());\n    assertEquals(\"foo.bar\", uRL0.getAuthority());\n    assertEquals((-1), uRL0.getPort());\n    assertEquals(\"\", uRL0.getPath());\n    assertEquals(\"foo.bar\", uRL0.getHost());\n    assertNull(uRL0.getUserInfo());\n    assertNull(uRL1.toExternalForm());\n    assertEquals(0, uRL1.getDefaultPort());\n    assertNull(uRL1.getQuery());\n    assertEquals(\"\", uRL1.getFile());\n    assertEquals((-1), uRL1.getPort());\n    assertEquals(\"http\", uRL1.getProtocol());\n    assertNull(uRL1.getRef());\n    assertEquals(\"foo.bar\", uRL1.getAuthority());\n    assertNull(uRL1.getUserInfo());\n    assertEquals(\"\", uRL1.getPath());\n    assertEquals(\"foo.bar\", uRL1.getHost());\n    assertNull(uRL1.toString());\n    assertFalse(uRL0.equals((Object) uRL1));\n    assertFalse(uRL1.equals((Object) uRL0));\n    assertFalse(string1.equals((Object) string0));\n    assertNotSame(uRL0, uRL1);\n    assertNotSame(uRL1, uRL0);\n    Set<String> set0 = ClassUtil.getPublicMethodNames(class1);\n    assertNotNull(set0);\n    assertFalse(set0.isEmpty());\n    assertEquals(14, set0.size());\n    assertFalse(set0.contains(\"\"));\n    Set<String> set1 = ClassUtil.getPublicMethodNames(class0);\n    assertNotNull(set1);\n    assertEquals(37, set1.size());\n    assertFalse(set1.isEmpty());\n    assertFalse(set1.equals((Object) set0));\n    assertNotSame(set1, set0);\n    assertFalse(set1.contains(\"\"));\n    Set<String> set2 = ClassUtil.getClassPathResources(true);\n    assertNotNull(set2);\n    assertEquals(2, set2.size());\n    assertFalse(set2.isEmpty());\n    assertFalse(set2.equals((Object) set0));\n    assertFalse(set2.equals((Object) set1));\n    assertNotSame(set2, set0);\n    assertNotSame(set2, set1);\n    assertFalse(set2.contains(\"\"));\n    Class<Long>[] classArray0 = (Class<Long>[]) Array.newInstance(Class.class, 6);\n    Class<Long> class2 = Long.class;\n    classArray0[0] = class2;\n    Class<Long> class3 = Long.class;\n    classArray0[1] = class3;\n    Class<Long> class4 = Long.class;\n    classArray0[2] = class4;\n    Class<Long> class5 = Long.class;\n    classArray0[3] = class5;\n    Class<Long> class6 = Long.class;\n    classArray0[4] = class6;\n    Class<Long> class7 = Long.class;\n    classArray0[5] = class7;\n    boolean boolean2 = ClassUtil.isAllAssignableFrom(classArray0, classArray0);\n    assertTrue(boolean2);\n    assertFalse(boolean2 == boolean1);\n    assertTrue(boolean2 == boolean0);\n    assertEquals(6, classArray0.length);\n    Class<Double> class8 = ClassUtil.loadClass(\"java.net.URL\", true);\n    assertNotNull(class8);\n    assertFalse(class8.isAnnotation());\n    assertEquals(\"class java.net.URL\", class8.toString());\n    assertFalse(class8.isInterface());\n    assertFalse(class8.isArray());\n    assertEquals(17, class8.getModifiers());\n    assertFalse(class8.isPrimitive());\n    assertFalse(class8.isEnum());\n    assertFalse(class8.isSynthetic());\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/ReUtilTest###findAllTest",
        "generated_path": "ReUtil_findAll.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package cn.hutool.core.util;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.lang.func.Func1;\nimport cn.hutool.core.lang.mutable.Mutable;\nimport cn.hutool.core.lang.mutable.MutableObj;\nimport cn.hutool.core.util.ReUtil;\nimport java.nio.CharBuffer;\nimport java.util.LinkedHashSet;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.function.Consumer;\nimport java.util.function.Predicate;\nimport java.util.regex.MatchResult;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\nimport java.util.regex.PatternSyntaxException;\nimport java.util.stream.Stream;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class ReUtil_findAll extends ReUtil_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test005() throws Throwable {\n    ReUtil.escape('~');\n    Pattern pattern0 = Pattern.compile(\"cn\\u0000hutool\\u0000core\\u0000annotation\\u0000GenericSynthesizedAggregateAnnotationTest$ClassForAliasForTest2\");\n    Pattern pattern1 = Pattern.compile(\"~\", 158);\n    ReUtil.get(pattern0, (CharSequence) \"~\", \"cn\\u0000hutool\\u0000core\\u0000annotation\\u0000GenericSynthesizedAggregateAnnotationTest$ClassForAliasForTest2\");\n    LinkedList<String> linkedList0 = new LinkedList<String>();\n    ReUtil.findAll(pattern0, (CharSequence) null, 35, linkedList0);\n    ReUtil.getAllGroups(pattern1, (CharSequence) \"cn\\u0000hutool\\u0000core\\u0000annotation\\u0000GenericSynthesizedAggregateAnnotationTest$ClassForAliasForTest2\");\n    MutableObj<CharSequence> mutableObj0 = MutableObj.of((CharSequence) null);\n    ReUtil.extractMultiAndDelPre((String) null, (Mutable<CharSequence>) mutableObj0, \"~\");\n    ReUtil.findAllGroup1((String) null, (CharSequence) null);\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/convert/NumberChineseFormatterTest###chineseToNumberTest",
        "generated_path": "NumberChineseFormatter_chineseToNumber.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package cn.hutool.core.convert;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.convert.NumberChineseFormatter;\nimport java.math.BigDecimal;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class NumberChineseFormatter_chineseToNumber extends NumberChineseFormatter_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test18() throws Throwable {\n    int int0 = NumberChineseFormatter.chineseToNumber(\"\\u4E00\\u767E\\u96F6\\u4E5D\");\n    assertEquals(109, int0);\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/lang/tree/TreeTest###cloneTreeTest",
        "generated_path": "Tree_cloneTree.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package cn.hutool.core.lang.tree;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.lang.Filter;\nimport cn.hutool.core.lang.tree.Tree;\nimport cn.hutool.core.lang.tree.TreeNodeConfig;\nimport java.lang.reflect.Array;\nimport java.nio.CharBuffer;\nimport java.util.List;\nimport java.util.function.Consumer;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class Tree_cloneTree extends Tree_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test24() throws Throwable {\n    Tree<CharBuffer> tree0 = new Tree<CharBuffer>();\n    Tree<CharBuffer> tree1 = tree0.cloneTree();\n    Tree<CharBuffer> tree2 = tree1.setParent(tree0);\n    tree2.getParent();\n    assertEquals(2, tree1.size());\n    assertNotSame(tree0, tree2);\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/ClassUtilTest###getClassNameTest",
        "generated_path": "ClassUtil_getClassName.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package cn.hutool.core.util;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.annotation.GenericSynthesizedAggregateAnnotation;\nimport cn.hutool.core.annotation.scanner.MethodAnnotationScanner;\nimport cn.hutool.core.lang.Filter;\nimport cn.hutool.core.util.ClassUtil;\nimport java.lang.annotation.Annotation;\nimport java.lang.reflect.Array;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.Method;\nimport java.net.MalformedURLException;\nimport java.net.URI;\nimport java.net.URL;\nimport java.net.URLStreamHandler;\nimport java.nio.BufferUnderflowException;\nimport java.nio.ByteBuffer;\nimport java.nio.CharBuffer;\nimport java.nio.charset.Charset;\nimport java.time.Clock;\nimport java.time.DayOfWeek;\nimport java.time.Duration;\nimport java.time.Instant;\nimport java.time.LocalDateTime;\nimport java.time.Month;\nimport java.time.ZoneId;\nimport java.time.ZoneOffset;\nimport java.time.chrono.ChronoLocalDate;\nimport java.time.format.DateTimeFormatter;\nimport java.time.format.DecimalStyle;\nimport java.time.format.ResolverStyle;\nimport java.time.temporal.ChronoUnit;\nimport java.time.temporal.TemporalUnit;\nimport java.util.Date;\nimport java.util.LinkedHashSet;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Set;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.System;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.mock.java.net.MockURI;\nimport org.evosuite.runtime.mock.java.net.MockURL;\nimport org.evosuite.runtime.mock.java.time.MockClock;\nimport org.evosuite.runtime.mock.java.time.MockInstant;\nimport org.evosuite.runtime.mock.java.time.MockLocalDate;\nimport org.evosuite.runtime.mock.java.time.MockLocalDateTime;\nimport org.evosuite.runtime.mock.java.time.MockLocalTime;\nimport org.evosuite.runtime.mock.java.time.MockMonthDay;\nimport org.evosuite.runtime.mock.java.time.MockOffsetDateTime;\nimport org.evosuite.runtime.mock.java.time.MockOffsetTime;\nimport org.evosuite.runtime.mock.java.time.MockYear;\nimport org.evosuite.runtime.mock.java.time.MockYearMonth;\nimport org.evosuite.runtime.mock.java.time.MockZonedDateTime;\nimport org.evosuite.runtime.mock.java.util.MockDate;\nimport org.evosuite.runtime.testdata.EvoSuiteFile;\nimport org.evosuite.runtime.testdata.FileSystemHandling;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class ClassUtil_getClassName extends ClassUtil_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test007() throws Throwable {\n    Class<Locale> class0 = Locale.class;\n    boolean boolean0 = ClassUtil.isJdkClass(class0);\n    assertTrue(boolean0);\n    Class<MockLocalDateTime> class1 = MockLocalDateTime.class;\n    boolean boolean1 = ClassUtil.isSimpleValueType(class1);\n    assertFalse(boolean1);\n    assertFalse(boolean1 == boolean0);\n    URI uRI0 = MockURI.aHttpURI;\n    assertNotNull(uRI0);\n    assertEquals(\"http\", uRI0.getScheme());\n    assertEquals(\"\", uRI0.getRawPath());\n    assertTrue(uRI0.isAbsolute());\n    assertFalse(uRI0.isOpaque());\n    assertEquals(\"foo.bar\", uRI0.getRawAuthority());\n    assertEquals(\"http://foo.bar\", uRI0.toString());\n    assertEquals(\"foo.bar\", uRI0.getHost());\n    assertEquals((-1), uRI0.getPort());\n    assertNull(uRI0.getRawFragment());\n    assertNull(uRI0.getRawQuery());\n    assertNull(uRI0.getRawUserInfo());\n    String string0 = ClassUtil.getShortClassName(\"\");\n    assertEquals(\"\", string0);\n    assertNotNull(string0);\n    Field field0 = ClassUtil.getDeclaredField(class1, \"dayofweek\");\n    assertNull(field0);\n    URL uRL0 = MockURI.toURL(uRI0);\n    assertNotNull(uRL0);\n    assertEquals(\"http\", uRI0.getScheme());\n    assertEquals(\"\", uRI0.getRawPath());\n    assertTrue(uRI0.isAbsolute());\n    assertFalse(uRI0.isOpaque());\n    assertEquals(\"foo.bar\", uRI0.getRawAuthority());\n    assertEquals(\"http://foo.bar\", uRI0.toString());\n    assertEquals(\"foo.bar\", uRI0.getHost());\n    assertEquals((-1), uRI0.getPort());\n    assertNull(uRI0.getRawFragment());\n    assertNull(uRI0.getRawQuery());\n    assertNull(uRI0.getRawUserInfo());\n    assertEquals(\"http://foo.bar\", uRL0.toString());\n    assertEquals(\"http://foo.bar\", uRL0.toExternalForm());\n    assertNull(uRL0.getQuery());\n    assertEquals((-1), uRL0.getDefaultPort());\n    assertNull(uRL0.getRef());\n    assertEquals(\"\", uRL0.getFile());\n    assertEquals(\"http\", uRL0.getProtocol());\n    assertEquals(\"foo.bar\", uRL0.getAuthority());\n    assertEquals((-1), uRL0.getPort());\n    assertEquals(\"\", uRL0.getPath());\n    assertEquals(\"foo.bar\", uRL0.getHost());\n    assertNull(uRL0.getUserInfo());\n    URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());\n    URL uRL1 = MockURL.URL(uRL0, \"\", uRLStreamHandler0);\n    assertNotNull(uRL1);\n    assertEquals(\"http\", uRI0.getScheme());\n    assertEquals(\"\", uRI0.getRawPath());\n    assertTrue(uRI0.isAbsolute());\n    assertFalse(uRI0.isOpaque());\n    assertEquals(\"foo.bar\", uRI0.getRawAuthority());\n    assertEquals(\"http://foo.bar\", uRI0.toString());\n    assertEquals(\"foo.bar\", uRI0.getHost());\n    assertEquals((-1), uRI0.getPort());\n    assertNull(uRI0.getRawFragment());\n    assertNull(uRI0.getRawQuery());\n    assertNull(uRI0.getRawUserInfo());\n    assertEquals(\"http://foo.bar\", uRL0.toString());\n    assertEquals(\"http://foo.bar\", uRL0.toExternalForm());\n    assertNull(uRL0.getQuery());\n    assertEquals((-1), uRL0.getDefaultPort());\n    assertNull(uRL0.getRef());\n    assertEquals(\"\", uRL0.getFile());\n    assertEquals(\"http\", uRL0.getProtocol());\n    assertEquals(\"foo.bar\", uRL0.getAuthority());\n    assertEquals((-1), uRL0.getPort());\n    assertEquals(\"\", uRL0.getPath());\n    assertEquals(\"foo.bar\", uRL0.getHost());\n    assertNull(uRL0.getUserInfo());\n    assertNull(uRL1.toExternalForm());\n    assertEquals(0, uRL1.getDefaultPort());\n    assertNull(uRL1.getQuery());\n    assertEquals(\"\", uRL1.getFile());\n    assertEquals((-1), uRL1.getPort());\n    assertEquals(\"http\", uRL1.getProtocol());\n    assertNull(uRL1.getRef());\n    assertEquals(\"foo.bar\", uRL1.getAuthority());\n    assertNull(uRL1.getUserInfo());\n    assertEquals(\"\", uRL1.getPath());\n    assertEquals(\"foo.bar\", uRL1.getHost());\n    assertNull(uRL1.toString());\n    assertFalse(uRL1.equals((Object) uRL0));\n    assertNotSame(uRL0, uRL1);\n    assertNotSame(uRL1, uRL0);\n    String string1 = ClassUtil.getClassName((Object) uRL1, false);\n    assertEquals(\"java.net.URL\", string1);\n    assertNotNull(string1);\n    assertEquals(\"http\", uRI0.getScheme());\n    assertEquals(\"\", uRI0.getRawPath());\n    assertTrue(uRI0.isAbsolute());\n    assertFalse(uRI0.isOpaque());\n    assertEquals(\"foo.bar\", uRI0.getRawAuthority());\n    assertEquals(\"http://foo.bar\", uRI0.toString());\n    assertEquals(\"foo.bar\", uRI0.getHost());\n    assertEquals((-1), uRI0.getPort());\n    assertNull(uRI0.getRawFragment());\n    assertNull(uRI0.getRawQuery());\n    assertNull(uRI0.getRawUserInfo());\n    assertEquals(\"http://foo.bar\", uRL0.toString());\n    assertEquals(\"http://foo.bar\", uRL0.toExternalForm());\n    assertNull(uRL0.getQuery());\n    assertEquals((-1), uRL0.getDefaultPort());\n    assertNull(uRL0.getRef());\n    assertEquals(\"\", uRL0.getFile());\n    assertEquals(\"http\", uRL0.getProtocol());\n    assertEquals(\"foo.bar\", uRL0.getAuthority());\n    assertEquals((-1), uRL0.getPort());\n    assertEquals(\"\", uRL0.getPath());\n    assertEquals(\"foo.bar\", uRL0.getHost());\n    assertNull(uRL0.getUserInfo());\n    assertNull(uRL1.toExternalForm());\n    assertEquals(0, uRL1.getDefaultPort());\n    assertNull(uRL1.getQuery());\n    assertEquals(\"\", uRL1.getFile());\n    assertEquals((-1), uRL1.getPort());\n    assertEquals(\"http\", uRL1.getProtocol());\n    assertNull(uRL1.getRef());\n    assertEquals(\"foo.bar\", uRL1.getAuthority());\n    assertNull(uRL1.getUserInfo());\n    assertEquals(\"\", uRL1.getPath());\n    assertEquals(\"foo.bar\", uRL1.getHost());\n    assertNull(uRL1.toString());\n    assertFalse(uRL0.equals((Object) uRL1));\n    assertFalse(uRL1.equals((Object) uRL0));\n    assertFalse(string1.equals((Object) string0));\n    assertNotSame(uRL0, uRL1);\n    assertNotSame(uRL1, uRL0);\n    Set<String> set0 = ClassUtil.getPublicMethodNames(class1);\n    assertNotNull(set0);\n    assertFalse(set0.isEmpty());\n    assertEquals(14, set0.size());\n    assertFalse(set0.contains(\"\"));\n    Set<String> set1 = ClassUtil.getPublicMethodNames(class0);\n    assertNotNull(set1);\n    assertEquals(37, set1.size());\n    assertFalse(set1.isEmpty());\n    assertFalse(set1.equals((Object) set0));\n    assertNotSame(set1, set0);\n    assertFalse(set1.contains(\"\"));\n    Set<String> set2 = ClassUtil.getClassPathResources(true);\n    assertNotNull(set2);\n    assertEquals(2, set2.size());\n    assertFalse(set2.isEmpty());\n    assertFalse(set2.equals((Object) set0));\n    assertFalse(set2.equals((Object) set1));\n    assertNotSame(set2, set0);\n    assertNotSame(set2, set1);\n    assertFalse(set2.contains(\"\"));\n    Class<Long>[] classArray0 = (Class<Long>[]) Array.newInstance(Class.class, 6);\n    Class<Long> class2 = Long.class;\n    classArray0[0] = class2;\n    Class<Long> class3 = Long.class;\n    classArray0[1] = class3;\n    Class<Long> class4 = Long.class;\n    classArray0[2] = class4;\n    Class<Long> class5 = Long.class;\n    classArray0[3] = class5;\n    Class<Long> class6 = Long.class;\n    classArray0[4] = class6;\n    Class<Long> class7 = Long.class;\n    classArray0[5] = class7;\n    boolean boolean2 = ClassUtil.isAllAssignableFrom(classArray0, classArray0);\n    assertTrue(boolean2);\n    assertFalse(boolean2 == boolean1);\n    assertTrue(boolean2 == boolean0);\n    assertEquals(6, classArray0.length);\n    Class<Double> class8 = ClassUtil.loadClass(\"java.net.URL\", true);\n    assertNotNull(class8);\n    assertFalse(class8.isAnnotation());\n    assertEquals(\"class java.net.URL\", class8.toString());\n    assertFalse(class8.isInterface());\n    assertFalse(class8.isArray());\n    assertEquals(17, class8.getModifiers());\n    assertFalse(class8.isPrimitive());\n    assertFalse(class8.isEnum());\n    assertFalse(class8.isSynthetic());\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/convert/NumberChineseFormatterTest###formatSimpleTest",
        "generated_path": "NumberChineseFormatter_formatSimple.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package cn.hutool.core.convert;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.convert.NumberChineseFormatter;\nimport java.math.BigDecimal;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class NumberChineseFormatter_formatSimple extends NumberChineseFormatter_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    String string0 = NumberChineseFormatter.formatSimple((-1000000000011L));\n    assertEquals(\"-1.0\\u4E07\\u4EBF\", string0);\n    assertNotNull(string0);\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/NumberUtilTest###parseDoubleTest",
        "generated_path": "NumberUtil_parseDouble.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package cn.hutool.core.util;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.util.NumberUtil;\nimport java.math.BigDecimal;\nimport java.math.BigInteger;\nimport java.math.MathContext;\nimport java.math.RoundingMode;\nimport java.text.DecimalFormat;\nimport java.text.DecimalFormatSymbols;\nimport java.util.Collection;\nimport java.util.LinkedHashSet;\nimport java.util.LinkedList;\nimport java.util.function.Consumer;\nimport java.util.function.UnaryOperator;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.Random;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.mock.java.util.MockRandom;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class NumberUtil_parseDouble extends NumberUtil_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test020() throws Throwable {\n    int int0 = new Byte((byte) (-35));\n    NumberUtil.range((-113), (-1));\n    NumberUtil.multiple((-113), (byte) (-35));\n    BigDecimal bigDecimal0 = new BigDecimal((byte) (-35));\n    MathContext mathContext0 = MathContext.DECIMAL128;\n    BigDecimal bigDecimal1 = bigDecimal0.pow((-3955), mathContext0);\n    bigDecimal0.precision();\n    NumberUtil.isIn(bigDecimal0, bigDecimal0, bigDecimal0);\n    String string0 = NumberUtil.toStr((Number) bigDecimal1, true);\n    bigDecimal0.add(bigDecimal1, mathContext0);\n    NumberUtil.div((float) (-1), 1350.93);\n    NumberUtil.parseDouble(string0, (Double) null);\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/lang/OptTest###peekTest",
        "generated_path": "Opt_peek.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package cn.hutool.core.lang;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.annotation.CacheableSynthesizedAnnotationAttributeProcessor;\nimport cn.hutool.core.annotation.GenericSynthesizedAggregateAnnotation;\nimport cn.hutool.core.annotation.GenericSynthesizedAnnotation;\nimport cn.hutool.core.annotation.Hierarchical;\nimport cn.hutool.core.annotation.SynthesizedAnnotationPostProcessor;\nimport cn.hutool.core.annotation.SynthesizedAnnotationSelector;\nimport cn.hutool.core.annotation.scanner.AnnotationScanner;\nimport cn.hutool.core.annotation.scanner.ElementAnnotationScanner;\nimport cn.hutool.core.annotation.scanner.MethodAnnotationScanner;\nimport cn.hutool.core.annotation.scanner.TypeAnnotationScanner;\nimport cn.hutool.core.lang.Opt;\nimport cn.hutool.core.lang.func.Func0;\nimport cn.hutool.core.lang.func.VoidFunc0;\nimport java.lang.annotation.Annotation;\nimport java.lang.reflect.Array;\nimport java.util.Collection;\nimport java.util.Comparator;\nimport java.util.LinkedHashSet;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.NoSuchElementException;\nimport java.util.Optional;\nimport java.util.function.BiConsumer;\nimport java.util.function.Consumer;\nimport java.util.function.Function;\nimport java.util.function.Predicate;\nimport java.util.function.Supplier;\nimport java.util.function.UnaryOperator;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.mock.java.lang.MockThrowable;\nimport org.junit.runner.Description;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class Opt_peek extends Opt_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    Func0<String> func0_0 = (Func0<String>) mock(Func0.class, new ViolatedAssumptionAnswer());\n    doReturn(\"cn.hutool.core.map.multi.AbsCollValueMap\").when(func0_0).call();\n    Opt<String> opt0 = Opt.ofTry(func0_0);\n    Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());\n    Opt<String> opt1 = opt0.peek(consumer0);\n    opt1.orElseThrow();\n    Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());\n    doReturn((Object) null).when(function0).apply(any());\n    Opt<String> opt2 = opt1.map((Function<? super String, ? extends String>) function0);\n    Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());\n    VoidFunc0 voidFunc0_0 = mock(VoidFunc0.class, new ViolatedAssumptionAnswer());\n    opt2.ifPresentOrElse(consumer1, voidFunc0_0);\n    opt2.getException();\n    assertFalse(opt2.isPresent());\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/collection/ListUtilTest###pageTest",
        "generated_path": "ListUtil_page.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "package cn.hutool.core.collection;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.annotation.AnnotationProxy;\nimport cn.hutool.core.annotation.CacheableSynthesizedAnnotationAttributeProcessor;\nimport cn.hutool.core.annotation.GenericSynthesizedAggregateAnnotation;\nimport cn.hutool.core.annotation.GenericSynthesizedAnnotation;\nimport cn.hutool.core.annotation.Hierarchical;\nimport cn.hutool.core.annotation.SynthesizedAnnotation;\nimport cn.hutool.core.annotation.SynthesizedAnnotationPostProcessor;\nimport cn.hutool.core.annotation.SynthesizedAnnotationSelector;\nimport cn.hutool.core.annotation.scanner.AnnotationScanner;\nimport cn.hutool.core.annotation.scanner.EmptyAnnotationScanner;\nimport cn.hutool.core.annotation.scanner.GenericAnnotationScanner;\nimport cn.hutool.core.annotation.scanner.MethodAnnotationScanner;\nimport cn.hutool.core.annotation.scanner.TypeAnnotationScanner;\nimport cn.hutool.core.collection.ListUtil;\nimport cn.hutool.core.lang.Matcher;\nimport java.lang.annotation.Annotation;\nimport java.lang.reflect.Array;\nimport java.util.ArrayDeque;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Comparator;\nimport java.util.ConcurrentModificationException;\nimport java.util.EnumSet;\nimport java.util.Enumeration;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.LinkedHashSet;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.ListIterator;\nimport java.util.Locale;\nimport java.util.NoSuchElementException;\nimport java.util.PriorityQueue;\nimport java.util.ServiceLoader;\nimport java.util.Set;\nimport java.util.SortedSet;\nimport java.util.Stack;\nimport java.util.StringTokenizer;\nimport java.util.TreeSet;\nimport java.util.Vector;\nimport java.util.concurrent.CopyOnWriteArrayList;\nimport java.util.function.Consumer;\nimport java.util.function.UnaryOperator;\nimport java.util.stream.Stream;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class ListUtil_page extends ListUtil_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();\n    assertEquals(0, priorityQueue0.size());\n    assertNotNull(priorityQueue0);\n    Iterator<Object> iterator0 = priorityQueue0.iterator();\n    assertEquals(0, priorityQueue0.size());\n    assertNotNull(iterator0);\n    ArrayList<Vector<LinkedList>> arrayList0 = ListUtil.toList((Iterator<Vector<LinkedList>>) iterator0);\n    assertEquals(0, priorityQueue0.size());\n    assertTrue(arrayList0.isEmpty());\n    assertEquals(0, arrayList0.size());\n    assertNotNull(arrayList0);\n    List<Stack<Stack>> list0 = ListUtil.reverseNew((List<Stack<Stack>>) arrayList0);\n    assertEquals(0, priorityQueue0.size());\n    assertTrue(arrayList0.isEmpty());\n    assertEquals(0, arrayList0.size());\n    assertTrue(list0.isEmpty());\n    assertEquals(0, list0.size());\n    assertNotNull(list0);\n    Integer[] integerArray0 = new Integer[1];\n    Integer integer0 = Integer.getInteger(\"%W\");\n    assertNull(integer0);\n    integerArray0[0] = null;\n    List<Integer> list1 = ListUtil.list(false, integerArray0);\n    assertFalse(list1.isEmpty());\n    assertEquals(1, list1.size());\n    assertEquals(1, integerArray0.length);\n    assertNotNull(list1);\n    List<Integer> list2 = ListUtil.unmodifiable(list1);\n    assertFalse(list1.isEmpty());\n    assertEquals(1, list1.size());\n    assertEquals(1, list2.size());\n    assertFalse(list2.isEmpty());\n    assertTrue(list2.equals((Object) list1));\n    assertEquals(1, integerArray0.length);\n    assertNotNull(list2);\n    ArrayList<Integer> arrayList1 = ListUtil.toList((Collection<Integer>) list2);\n    assertFalse(list1.isEmpty());\n    assertEquals(1, list1.size());\n    assertEquals(1, list2.size());\n    assertFalse(list2.isEmpty());\n    assertFalse(arrayList1.isEmpty());\n    assertEquals(1, arrayList1.size());\n    assertTrue(list1.equals((Object) list2));\n    assertTrue(list2.equals((Object) list1));\n    assertEquals(1, integerArray0.length);\n    assertNotNull(arrayList1);\n    List<Integer> list3 = ListUtil.unmodifiable((List<Integer>) arrayList1);\n    assertFalse(list1.isEmpty());\n    assertEquals(1, list1.size());\n    assertEquals(1, list2.size());\n    assertFalse(list2.isEmpty());\n    assertFalse(arrayList1.isEmpty());\n    assertEquals(1, arrayList1.size());\n    assertEquals(1, list3.size());\n    assertFalse(list3.isEmpty());\n    assertNotSame(list2, list3);\n    assertNotSame(list3, list2);\n    assertTrue(list1.equals((Object) list2));\n    assertTrue(list2.equals((Object) list1));\n    assertTrue(list3.equals((Object) list1));\n    assertTrue(list3.equals((Object) list2));\n    assertEquals(1, integerArray0.length);\n    assertNotNull(list3);\n    ArrayList<Integer> arrayList2 = ListUtil.toList((Iterable<Integer>) list3);\n    assertFalse(list1.isEmpty());\n    assertEquals(1, list1.size());\n    assertEquals(1, list2.size());\n    assertFalse(list2.isEmpty());\n    assertFalse(arrayList1.isEmpty());\n    assertEquals(1, arrayList1.size());\n    assertEquals(1, list3.size());\n    assertFalse(list3.isEmpty());\n    assertFalse(arrayList2.isEmpty());\n    assertEquals(1, arrayList2.size());\n    assertNotSame(list2, list3);\n    assertNotSame(arrayList1, arrayList2);\n    assertNotSame(list3, list2);\n    assertNotSame(arrayList2, arrayList1);\n    assertTrue(list1.equals((Object) list2));\n    assertTrue(list1.equals((Object) list3));\n    assertTrue(list2.equals((Object) list1));\n    assertTrue(list2.equals((Object) list3));\n    assertTrue(list3.equals((Object) list1));\n    assertTrue(list3.equals((Object) list2));\n    assertTrue(arrayList2.equals((Object) arrayList1));\n    assertEquals(1, integerArray0.length);\n    assertNotNull(arrayList2);\n    Locale.Category locale_Category0 = Locale.Category.DISPLAY;\n    Locale.Category[] locale_CategoryArray0 = new Locale.Category[6];\n    locale_CategoryArray0[0] = locale_Category0;\n    locale_CategoryArray0[1] = locale_Category0;\n    locale_CategoryArray0[2] = locale_Category0;\n    Locale.Category locale_Category1 = Locale.Category.DISPLAY;\n    locale_CategoryArray0[3] = locale_Category1;\n    locale_CategoryArray0[4] = locale_Category0;\n    Locale.Category locale_Category2 = Locale.Category.DISPLAY;\n    locale_CategoryArray0[5] = locale_Category2;\n    EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_CategoryArray0);\n    assertTrue(enumSet0.contains(locale_Category1));\n    assertEquals(1, enumSet0.size());\n    assertSame(locale_Category0, locale_Category2);\n    assertSame(locale_Category0, locale_Category1);\n    assertEquals(6, locale_CategoryArray0.length);\n    assertNotNull(enumSet0);\n    EnumSet<Locale.Category> enumSet1 = enumSet0.clone();\n    assertTrue(enumSet0.contains(locale_Category1));\n    assertTrue(enumSet1.contains(locale_Category1));\n    assertEquals(1, enumSet0.size());\n    assertEquals(1, enumSet1.size());\n    assertNotSame(enumSet0, enumSet1);\n    assertNotSame(enumSet1, enumSet0);\n    assertSame(locale_Category0, locale_Category2);\n    assertSame(locale_Category0, locale_Category1);\n    assertTrue(enumSet1.equals((Object) enumSet0));\n    assertEquals(6, locale_CategoryArray0.length);\n    assertNotNull(enumSet1);\n    Iterator<Locale.Category> iterator1 = enumSet1.iterator();\n    assertTrue(enumSet0.contains(locale_Category1));\n    assertTrue(enumSet1.contains(locale_Category1));\n    assertEquals(1, enumSet0.size());\n    assertEquals(1, enumSet1.size());\n    assertNotSame(enumSet0, enumSet1);\n    assertNotSame(enumSet1, enumSet0);\n    assertSame(locale_Category0, locale_Category2);\n    assertSame(locale_Category0, locale_Category1);\n    assertTrue(enumSet0.equals((Object) enumSet1));\n    assertTrue(enumSet1.equals((Object) enumSet0));\n    assertEquals(6, locale_CategoryArray0.length);\n    assertNotNull(iterator1);\n    ArrayList<Locale.Category> arrayList3 = ListUtil.toList(iterator1);\n    assertTrue(enumSet0.contains(locale_Category1));\n    assertTrue(enumSet1.contains(locale_Category1));\n    assertTrue(arrayList3.contains(locale_Category1));\n    assertEquals(1, enumSet0.size());\n    assertEquals(1, enumSet1.size());\n    assertEquals(1, arrayList3.size());\n    assertFalse(arrayList3.isEmpty());\n    assertNotSame(enumSet0, enumSet1);\n    assertNotSame(enumSet1, enumSet0);\n    assertSame(locale_Category0, locale_Category2);\n    assertSame(locale_Category0, locale_Category1);\n    assertTrue(enumSet0.equals((Object) enumSet1));\n    assertTrue(enumSet1.equals((Object) enumSet0));\n    assertEquals(6, locale_CategoryArray0.length);\n    assertNotNull(arrayList3);\n    List<Locale.Category> list4 = ListUtil.page(0, 0, (List<Locale.Category>) arrayList3);\n    assertTrue(enumSet0.contains(locale_Category1));\n    assertTrue(enumSet1.contains(locale_Category1));\n    assertTrue(arrayList3.contains(locale_Category1));\n    assertFalse(list4.contains(locale_Category1));\n    assertEquals(1, enumSet0.size());\n    assertEquals(1, enumSet1.size());\n    assertEquals(1, arrayList3.size());\n    assertFalse(arrayList3.isEmpty());\n    assertTrue(list4.isEmpty());\n    assertEquals(0, list4.size());\n    assertNotSame(enumSet0, enumSet1);\n    assertNotSame(enumSet1, enumSet0);\n    assertSame(locale_Category0, locale_Category2);\n    assertSame(locale_Category0, locale_Category1);\n    assertTrue(enumSet0.equals((Object) enumSet1));\n    assertTrue(enumSet1.equals((Object) enumSet0));\n    assertEquals(6, locale_CategoryArray0.length);\n    assertNotNull(list4);\n    String[] stringArray0 = new String[8];\n    stringArray0[0] = \"%W\";\n    LinkedList<String> linkedList0 = ListUtil.toLinkedList(stringArray0);\n    assertTrue(linkedList0.contains(\"%W\"));\n    assertEquals(8, linkedList0.size());\n    assertEquals(8, stringArray0.length);\n    assertNotNull(linkedList0);\n    List<String> list5 = ListUtil.sub((List<String>) linkedList0, 8, 0, 0);\n    assertTrue(linkedList0.contains(\"%W\"));\n    assertFalse(list5.contains(\"%W\"));\n    assertEquals(8, linkedList0.size());\n    assertTrue(list5.isEmpty());\n    assertEquals(0, list5.size());\n    assertEquals(8, stringArray0.length);\n    assertNotNull(list5);\n    ListUtil.page(list5, 0, (Consumer<List<String>>) null);\n    assertTrue(linkedList0.contains(\"%W\"));\n    assertFalse(list5.contains(\"%W\"));\n    assertEquals(8, linkedList0.size());\n    assertTrue(list5.isEmpty());\n    assertEquals(0, list5.size());\n    assertEquals(8, stringArray0.length);\n    CopyOnWriteArrayList<AnnotationProxy<GenericSynthesizedAnnotation>> copyOnWriteArrayList0 = ListUtil.toCopyOnWriteArrayList((Collection<AnnotationProxy<GenericSynthesizedAnnotation>>) enumSet0);\n    assertTrue(enumSet0.contains(locale_Category1));\n    assertFalse(copyOnWriteArrayList0.isEmpty());\n    assertEquals(\"[DISPLAY]\", copyOnWriteArrayList0.toString());\n    assertEquals(1, copyOnWriteArrayList0.size());\n    assertEquals(1, enumSet0.size());\n    assertNotSame(enumSet0, enumSet1);\n    assertSame(locale_Category0, locale_Category2);\n    assertSame(locale_Category0, locale_Category1);\n    assertTrue(enumSet0.equals((Object) enumSet1));\n    assertEquals(6, locale_CategoryArray0.length);\n    assertNotNull(copyOnWriteArrayList0);\n    ArrayList<Stack<GenericSynthesizedAggregateAnnotation>> arrayList4 = ListUtil.toList((Collection<Stack<GenericSynthesizedAggregateAnnotation>>) null);\n    assertTrue(arrayList4.isEmpty());\n    assertEquals(0, arrayList4.size());\n    assertNotNull(arrayList4);\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/io/FileUtilTest###isSubTest",
        "generated_path": "FileUtil_isSub.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package cn.hutool.core.io;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.io.FileUtil;\nimport cn.hutool.core.io.LineHandler;\nimport cn.hutool.core.io.file.FileMode;\nimport cn.hutool.core.io.file.FileReader;\nimport cn.hutool.core.io.file.LineSeparator;\nimport cn.hutool.core.io.file.PathUtil;\nimport cn.hutool.core.io.file.Tailer;\nimport java.io.BufferedInputStream;\nimport java.io.BufferedOutputStream;\nimport java.io.BufferedWriter;\nimport java.io.ByteArrayInputStream;\nimport java.io.DataInputStream;\nimport java.io.DataOutputStream;\nimport java.io.File;\nimport java.io.FileDescriptor;\nimport java.io.FileFilter;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.io.PipedInputStream;\nimport java.io.PipedOutputStream;\nimport java.io.PrintStream;\nimport java.io.PushbackInputStream;\nimport java.io.RandomAccessFile;\nimport java.io.SequenceInputStream;\nimport java.net.URI;\nimport java.net.URL;\nimport java.net.URLStreamHandler;\nimport java.nio.ByteBuffer;\nimport java.nio.CharBuffer;\nimport java.nio.charset.Charset;\nimport java.nio.charset.IllegalCharsetNameException;\nimport java.nio.charset.UnsupportedCharsetException;\nimport java.nio.file.InvalidPathException;\nimport java.nio.file.Path;\nimport java.nio.file.StandardCopyOption;\nimport java.util.Collection;\nimport java.util.Comparator;\nimport java.util.Enumeration;\nimport java.util.HashMap;\nimport java.util.LinkedHashSet;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.Future;\nimport java.util.concurrent.TimeUnit;\nimport java.util.function.BiConsumer;\nimport java.util.function.Consumer;\nimport java.util.function.Predicate;\nimport java.util.zip.Adler32;\nimport java.util.zip.Checksum;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.mock.java.io.MockFile;\nimport org.evosuite.runtime.mock.java.io.MockFileInputStream;\nimport org.evosuite.runtime.mock.java.io.MockFileOutputStream;\nimport org.evosuite.runtime.mock.java.io.MockPrintStream;\nimport org.evosuite.runtime.mock.java.io.MockRandomAccessFile;\nimport org.evosuite.runtime.mock.java.net.MockURI;\nimport org.evosuite.runtime.mock.java.net.MockURL;\nimport org.evosuite.runtime.testdata.EvoSuiteFile;\nimport org.evosuite.runtime.testdata.EvoSuiteURL;\nimport org.evosuite.runtime.testdata.FileSystemHandling;\nimport org.evosuite.runtime.testdata.NetworkHandling;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class FileUtil_isSub extends FileUtil_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void FileUtil_isSub() throws Throwable {\n    String string0 = \"\\\\/]8,@=YV#q<\u007f*XRk3 \";\n    File file0 = MockFile.createTempFile(\"/]8,@=YV#q<\u007f*XRk3 \", \"/]8,@=YV#q<\u007f*XRk3 \");\n    FileUtil.getWebRoot();\n    // Undeclared exception!\n    try {\n        FileUtil.isSub(file0, (File) null);\n        fail(\"Expecting exception: IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n        //\n        // [Assertion failed] - this argument is required; it must not be null\n        //\n        verifyException(\"cn.hutool.core.lang.Assert\", e);\n    }\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/DesensitizedUtilTest###idCardNumTest",
        "generated_path": "DesensitizedUtil_idCardNum.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package cn.hutool.core.util;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.util.DesensitizedUtil;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class DesensitizedUtil_idCardNum extends DesensitizedUtil_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    String string0 = DesensitizedUtil.idCardNum(\"JID\", 0, 3);\n    assertEquals(\"JID\", string0);\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/io/FileUtilTest###listFileNamesTest",
        "generated_path": "FileUtil_listFileNames.java",
        "Compile_result": 1,
        "Test_result": 0,
        "Gen_Test": "package cn.hutool.core.io;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.io.FileUtil;\nimport cn.hutool.core.io.LineHandler;\nimport cn.hutool.core.io.file.FileMode;\nimport cn.hutool.core.io.file.FileReader;\nimport cn.hutool.core.io.file.LineSeparator;\nimport cn.hutool.core.io.file.PathUtil;\nimport cn.hutool.core.io.file.Tailer;\nimport java.io.BufferedInputStream;\nimport java.io.BufferedOutputStream;\nimport java.io.BufferedWriter;\nimport java.io.ByteArrayInputStream;\nimport java.io.DataInputStream;\nimport java.io.DataOutputStream;\nimport java.io.File;\nimport java.io.FileDescriptor;\nimport java.io.FileFilter;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.io.PipedInputStream;\nimport java.io.PipedOutputStream;\nimport java.io.PrintStream;\nimport java.io.PushbackInputStream;\nimport java.io.RandomAccessFile;\nimport java.io.SequenceInputStream;\nimport java.net.URI;\nimport java.net.URL;\nimport java.net.URLStreamHandler;\nimport java.nio.ByteBuffer;\nimport java.nio.CharBuffer;\nimport java.nio.charset.Charset;\nimport java.nio.charset.IllegalCharsetNameException;\nimport java.nio.charset.UnsupportedCharsetException;\nimport java.nio.file.InvalidPathException;\nimport java.nio.file.Path;\nimport java.nio.file.StandardCopyOption;\nimport java.util.Collection;\nimport java.util.Comparator;\nimport java.util.Enumeration;\nimport java.util.HashMap;\nimport java.util.LinkedHashSet;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.Future;\nimport java.util.concurrent.TimeUnit;\nimport java.util.function.BiConsumer;\nimport java.util.function.Consumer;\nimport java.util.function.Predicate;\nimport java.util.zip.Adler32;\nimport java.util.zip.Checksum;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.mock.java.io.MockFile;\nimport org.evosuite.runtime.mock.java.io.MockFileInputStream;\nimport org.evosuite.runtime.mock.java.io.MockFileOutputStream;\nimport org.evosuite.runtime.mock.java.io.MockPrintStream;\nimport org.evosuite.runtime.mock.java.io.MockRandomAccessFile;\nimport org.evosuite.runtime.mock.java.net.MockURI;\nimport org.evosuite.runtime.mock.java.net.MockURL;\nimport org.evosuite.runtime.testdata.EvoSuiteFile;\nimport org.evosuite.runtime.testdata.EvoSuiteURL;\nimport org.evosuite.runtime.testdata.FileSystemHandling;\nimport org.evosuite.runtime.testdata.NetworkHandling;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class FileUtil_listFileNames extends FileUtil_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void FileUtil_listFileNames() throws Throwable {\n    String string0 = \"2NK1xP]\\\"Z80|J?J~\";\n    FileUtil.isFile(\"2NK1xP]\\\"Z80|J?J~\");\n    List<String> list0 = FileUtil.listFileNames(\"2NK1xP]\\\"Z80|J?J~\");\n    try {\n        FileUtil.appendUtf8Lines((Collection<String>) list0, \"2NK1xP]\\\"Z80|J?J~\");\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        //\n        // File [org.evosuite.runtime.mock.java.io.MockFile@0000000020] is not a file !\n        //\n        verifyException(\"cn.hutool.core.io.file.FileWriter\", e);\n    }\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/DesensitizedUtilTest###carLicenseTest",
        "generated_path": "DesensitizedUtil_carLicense.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package cn.hutool.core.util;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.util.DesensitizedUtil;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class DesensitizedUtil_carLicense extends DesensitizedUtil_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    String string0 = DesensitizedUtil.carLicense(\"(2*yE471sR\");\n    assertEquals(\"(2*yE471sR\", string0);\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/text/finder/CharFinderTest###startTest",
        "generated_path": "CharFinder_start.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package cn.hutool.core.text.finder;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.text.finder.CharFinder;\nimport cn.hutool.core.text.finder.TextFinder;\nimport java.nio.CharBuffer;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class CharFinder_start extends CharFinder_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    CharFinder charFinder0 = new CharFinder('$', false);\n    CharBuffer charBuffer0 = CharBuffer.allocate(629);\n    charFinder0.text = (CharSequence) charBuffer0;\n    charBuffer0.append(charFinder0.text);\n    charFinder0.start(629);\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/img/ImgTest###roundTest",
        "generated_path": "Img_round.java",
        "Compile_result": 1,
        "Test_result": 0,
        "Gen_Test": "package cn.hutool.core.img;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.img.Img;\nimport cn.hutool.core.io.resource.BytesResource;\nimport cn.hutool.core.io.resource.CharSequenceResource;\nimport cn.hutool.core.io.resource.ClassPathResource;\nimport cn.hutool.core.io.resource.FileResource;\nimport cn.hutool.core.io.resource.InputStreamResource;\nimport cn.hutool.core.io.resource.MultiFileResource;\nimport cn.hutool.core.io.resource.MultiResource;\nimport cn.hutool.core.io.resource.Resource;\nimport cn.hutool.core.io.resource.StringResource;\nimport cn.hutool.core.io.resource.UrlResource;\nimport cn.hutool.core.io.resource.VfsResource;\nimport java.awt.BasicStroke;\nimport java.awt.Button;\nimport java.awt.Color;\nimport java.awt.ComponentOrientation;\nimport java.awt.Dimension;\nimport java.awt.Font;\nimport java.awt.Frame;\nimport java.awt.Graphics;\nimport java.awt.GraphicsConfiguration;\nimport java.awt.Image;\nimport java.awt.Point;\nimport java.awt.Rectangle;\nimport java.awt.RenderingHints;\nimport java.awt.ScrollPane;\nimport java.awt.Stroke;\nimport java.awt.SystemColor;\nimport java.awt.TextArea;\nimport java.awt.color.ColorSpace;\nimport java.awt.color.ICC_ColorSpace;\nimport java.awt.color.ICC_Profile;\nimport java.awt.event.InputMethodEvent;\nimport java.awt.event.MouseEvent;\nimport java.awt.font.TextHitInfo;\nimport java.awt.geom.AffineTransform;\nimport java.awt.geom.Dimension2D;\nimport java.awt.geom.Point2D;\nimport java.awt.geom.Rectangle2D;\nimport java.awt.image.AffineTransformOp;\nimport java.awt.image.BufferedImage;\nimport java.awt.image.ColorConvertOp;\nimport java.awt.image.ColorModel;\nimport java.awt.image.ConvolveOp;\nimport java.awt.image.DataBuffer;\nimport java.awt.image.DataBufferDouble;\nimport java.awt.image.DirectColorModel;\nimport java.awt.image.IndexColorModel;\nimport java.awt.image.Kernel;\nimport java.awt.image.Raster;\nimport java.awt.image.RasterFormatException;\nimport java.awt.image.RescaleOp;\nimport java.awt.image.TileObserver;\nimport java.awt.image.WritableRaster;\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.DataOutputStream;\nimport java.io.File;\nimport java.io.FileDescriptor;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.io.PipedInputStream;\nimport java.io.PipedOutputStream;\nimport java.io.PrintStream;\nimport java.io.SequenceInputStream;\nimport java.net.URI;\nimport java.net.URL;\nimport java.nio.charset.Charset;\nimport java.nio.file.Path;\nimport java.text.AttributedCharacterIterator;\nimport java.time.Month;\nimport java.util.Enumeration;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.Hashtable;\nimport java.util.LinkedHashSet;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.Stack;\nimport java.util.Vector;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.Future;\nimport java.util.concurrent.TimeUnit;\nimport javax.imageio.stream.FileImageInputStream;\nimport javax.imageio.stream.FileImageOutputStream;\nimport javax.imageio.stream.ImageInputStream;\nimport javax.imageio.stream.ImageOutputStream;\nimport javax.imageio.stream.MemoryCacheImageInputStream;\nimport javax.imageio.stream.MemoryCacheImageOutputStream;\nimport javax.swing.Box;\nimport javax.swing.DebugGraphics;\nimport javax.swing.DefaultComboBoxModel;\nimport javax.swing.JEditorPane;\nimport javax.swing.JFormattedTextField;\nimport javax.swing.JFrame;\nimport javax.swing.JInternalFrame;\nimport javax.swing.JList;\nimport javax.swing.JOptionPane;\nimport javax.swing.JPasswordField;\nimport javax.swing.JScrollPane;\nimport javax.swing.JTabbedPane;\nimport javax.swing.JTable;\nimport javax.swing.JTextPane;\nimport javax.swing.JToolBar;\nimport javax.swing.JTree;\nimport javax.swing.JViewport;\nimport javax.swing.plaf.basic.BasicEditorPaneUI;\nimport javax.swing.plaf.metal.MetalTabbedPaneUI;\nimport javax.swing.plaf.multi.MultiLabelUI;\nimport javax.swing.plaf.multi.MultiTabbedPaneUI;\nimport javax.swing.plaf.synth.SynthTreeUI;\nimport javax.swing.table.DefaultTableModel;\nimport javax.swing.text.DefaultCaret;\nimport javax.swing.text.DefaultStyledDocument;\nimport javax.swing.text.Element;\nimport javax.swing.text.JTextComponent;\nimport javax.swing.text.LabelView;\nimport javax.swing.text.MutableAttributeSet;\nimport javax.swing.text.Position;\nimport javax.swing.text.Segment;\nimport javax.swing.text.StringContent;\nimport javax.swing.text.Style;\nimport javax.swing.text.StyleContext;\nimport javax.swing.text.StyledEditorKit;\nimport javax.swing.tree.DefaultTreeCellRenderer;\nimport javax.swing.tree.FixedHeightLayoutCache;\nimport javax.swing.tree.TreePath;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.mock.java.io.MockFile;\nimport org.evosuite.runtime.mock.java.io.MockFileInputStream;\nimport org.evosuite.runtime.mock.java.io.MockFileOutputStream;\nimport org.evosuite.runtime.mock.java.io.MockPrintStream;\nimport org.evosuite.runtime.mock.java.io.MockRandomAccessFile;\nimport org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;\nimport org.evosuite.runtime.mock.java.net.MockURI;\nimport org.evosuite.runtime.mock.java.net.MockURL;\nimport org.evosuite.runtime.testdata.EvoSuiteFile;\nimport org.evosuite.runtime.testdata.EvoSuiteURL;\nimport org.evosuite.runtime.testdata.FileSystemHandling;\nimport org.evosuite.runtime.testdata.NetworkHandling;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class Img_round extends Img_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test007() throws Throwable {\n    int int0 = 6;\n    BufferedImage bufferedImage0 = new BufferedImage(6, 6, 6);\n    Img img0 = new Img(bufferedImage0);\n    String string0 = \"V/{gU\";\n    SystemColor systemColor0 = SystemColor.inactiveCaption;\n    Font font0 = new Font(\"\", 6, 6);\n    Img img1 = img0.scale(6, 6, 6);\n    img1.round((-1.946639899E9));\n    int int1 = 3001;\n    ICC_Profile iCC_Profile0 = null;\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/text/StrBuilderTest###delTest",
        "generated_path": "StrBuilder_del.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package cn.hutool.core.text;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.text.StrBuilder;\nimport java.nio.CharBuffer;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class StrBuilder_del extends StrBuilder_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test000() throws Throwable {\n    CharSequence[] charSequenceArray0 = new CharSequence[1];\n    StrBuilder strBuilder0 = StrBuilder.create(charSequenceArray0);\n    StrBuilder strBuilder1 = strBuilder0.del(609, 609);\n    charSequenceArray0[0] = (CharSequence) strBuilder1;\n    StrBuilder strBuilder2 = null;\n    try {\n        strBuilder2 = new StrBuilder(charSequenceArray0);\n        fail(\"Expecting exception: ArrayIndexOutOfBoundsException\");\n    } catch (ArrayIndexOutOfBoundsException e) {\n    }\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/StrUtilTest###trimTest",
        "generated_path": "StrUtil_trim.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package cn.hutool.core.util;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.annotation.GenericSynthesizedAggregateAnnotation;\nimport cn.hutool.core.annotation.scanner.AbstractTypeAnnotationScanner;\nimport cn.hutool.core.annotation.scanner.AnnotationScanner;\nimport cn.hutool.core.annotation.scanner.ElementAnnotationScanner;\nimport cn.hutool.core.annotation.scanner.EmptyAnnotationScanner;\nimport cn.hutool.core.annotation.scanner.MethodAnnotationScanner;\nimport cn.hutool.core.text.CharSequenceUtil;\nimport cn.hutool.core.text.StrBuilder;\nimport cn.hutool.core.text.StrPool;\nimport cn.hutool.core.util.DesensitizedUtil;\nimport cn.hutool.core.util.StrUtil;\nimport java.io.StringReader;\nimport java.io.StringWriter;\nimport java.lang.annotation.Annotation;\nimport java.nio.ByteBuffer;\nimport java.nio.CharBuffer;\nimport java.nio.LongBuffer;\nimport java.nio.charset.Charset;\nimport java.nio.charset.IllegalCharsetNameException;\nimport java.nio.charset.UnsupportedCharsetException;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.function.BiFunction;\nimport java.util.function.Function;\nimport java.util.function.Predicate;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.Random;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class StrUtil_trim extends StrUtil_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    StrUtil.builder();\n    Byte byte0 = new Byte((byte) 68);\n    Byte byte1 = new Byte((byte) 68);\n    Byte byte2 = new Byte((byte) (-2));\n    Byte byte3 = new Byte((byte) 68);\n    StrUtil.strBuilder();\n    Byte.compare((byte) 16, (byte) (-122));\n    String string0 = StrUtil.fillBefore(\"\", 'D', 4617);\n    StrUtil.trim((String[]) null);\n    // Undeclared exception!\n    StrUtil.similar(\"cn.hutool.core.convert.impl.DateConverter\", string0, (-2172));\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/ObjectUtilTest###lengthTest",
        "generated_path": "ObjectUtil_length.java",
        "Compile_result": 1,
        "Test_result": 0,
        "Gen_Test": "package cn.hutool.core.util;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.annotation.scanner.AbstractTypeAnnotationScanner;\nimport cn.hutool.core.annotation.scanner.MethodAnnotationScanner;\nimport cn.hutool.core.util.ObjectUtil;\nimport java.awt.BufferCapabilities;\nimport java.awt.Dimension;\nimport java.awt.ImageCapabilities;\nimport java.awt.Insets;\nimport java.awt.PageAttributes;\nimport java.awt.Point;\nimport java.awt.Rectangle;\nimport java.awt.RenderingHints;\nimport java.awt.geom.AffineTransform;\nimport java.awt.geom.Dimension2D;\nimport java.awt.geom.Point2D;\nimport java.awt.geom.Rectangle2D;\nimport java.io.ByteArrayOutputStream;\nimport java.io.File;\nimport java.io.PrintStream;\nimport java.lang.reflect.Array;\nimport java.net.HttpCookie;\nimport java.nio.CharBuffer;\nimport java.sql.BatchUpdateException;\nimport java.sql.ClientInfoStatus;\nimport java.sql.DataTruncation;\nimport java.sql.Date;\nimport java.sql.SQLClientInfoException;\nimport java.sql.SQLDataException;\nimport java.sql.SQLException;\nimport java.sql.SQLFeatureNotSupportedException;\nimport java.sql.SQLIntegrityConstraintViolationException;\nimport java.sql.SQLInvalidAuthorizationSpecException;\nimport java.sql.SQLNonTransientConnectionException;\nimport java.sql.SQLNonTransientException;\nimport java.sql.SQLSyntaxErrorException;\nimport java.sql.SQLTimeoutException;\nimport java.sql.SQLTransactionRollbackException;\nimport java.sql.SQLTransientConnectionException;\nimport java.sql.SQLTransientException;\nimport java.sql.SQLWarning;\nimport java.sql.Time;\nimport java.sql.Timestamp;\nimport java.text.BreakIterator;\nimport java.text.ChoiceFormat;\nimport java.text.Collator;\nimport java.text.DateFormatSymbols;\nimport java.text.DecimalFormat;\nimport java.text.DecimalFormatSymbols;\nimport java.text.FieldPosition;\nimport java.text.Format;\nimport java.text.NumberFormat;\nimport java.text.RuleBasedCollator;\nimport java.text.StringCharacterIterator;\nimport java.time.DateTimeException;\nimport java.time.Instant;\nimport java.time.LocalDate;\nimport java.time.LocalDateTime;\nimport java.time.LocalTime;\nimport java.time.Month;\nimport java.time.chrono.ChronoLocalDate;\nimport java.time.temporal.ChronoField;\nimport java.util.ArrayDeque;\nimport java.util.BitSet;\nimport java.util.Collection;\nimport java.util.Hashtable;\nimport java.util.IdentityHashMap;\nimport java.util.LinkedHashMap;\nimport java.util.LinkedHashSet;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Properties;\nimport java.util.SimpleTimeZone;\nimport java.util.Spliterator;\nimport java.util.Stack;\nimport java.util.StringTokenizer;\nimport java.util.TimeZone;\nimport java.util.TreeMap;\nimport java.util.Vector;\nimport java.util.function.Consumer;\nimport java.util.function.Function;\nimport java.util.function.Supplier;\nimport java.util.function.UnaryOperator;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.mock.java.io.MockFile;\nimport org.evosuite.runtime.mock.java.io.MockPrintStream;\nimport org.evosuite.runtime.mock.java.lang.MockThrowable;\nimport org.evosuite.runtime.mock.java.text.MockDateFormat;\nimport org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;\nimport org.evosuite.runtime.mock.java.time.MockInstant;\nimport org.evosuite.runtime.mock.java.time.MockLocalDate;\nimport org.evosuite.runtime.mock.java.time.MockLocalDateTime;\nimport org.evosuite.runtime.mock.java.time.MockLocalTime;\nimport org.evosuite.runtime.mock.java.util.MockDate;\nimport org.evosuite.runtime.mock.java.util.MockGregorianCalendar;\nimport org.junit.runner.RunWith;\nimport sun.awt.SunHints;\nimport sun.util.calendar.ZoneInfo;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class ObjectUtil_length extends ObjectUtil_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test39() throws Throwable {\n    Locale locale0 = Locale.CANADA;\n    Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();\n    Locale locale1 = Locale.FRANCE;\n    locale0.getDisplayVariant(locale1);\n    Vector<String> vector1 = new Vector<String>();\n    Locale.filterTags((List<Locale.LanguageRange>) vector0, (Collection<String>) vector1);\n    SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();\n    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();\n    MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);\n    sQLInvalidAuthorizationSpecException0.printStackTrace((PrintStream) mockPrintStream0);\n    assertEquals(1215, byteArrayOutputStream0.size());\n    sQLInvalidAuthorizationSpecException0.spliterator();\n    ObjectUtil.notEqual(locale0, sQLInvalidAuthorizationSpecException0);\n    ObjectUtil.isNull(sQLInvalidAuthorizationSpecException0);\n    ObjectUtil.hasNull((Object[]) null);\n    Integer integer0 = new Integer(1);\n    ObjectUtil.equal(integer0, \"\");\n    PageAttributes pageAttributes0 = new PageAttributes();\n    PageAttributes pageAttributes1 = new PageAttributes(pageAttributes0);\n    int int0 = ObjectUtil.length(pageAttributes1);\n    assertEquals((-1), int0);\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/io/file/FileNameUtilTest###mainNameTest",
        "generated_path": "FileNameUtil_mainName.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package cn.hutool.core.io.file;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.io.file.FileNameUtil;\nimport java.io.File;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.io.MockFile;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class FileNameUtil_mainName extends FileNameUtil_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    String string0 = FileNameUtil.mainName(\"64k\u007fI(9!Ied.\");\n    assertEquals(\"64k\u007fI(9!Ied\", string0);\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/CoordinateUtilTest###bd09toGcj02Test",
        "generated_path": "CoordinateUtil_bd09ToGcj02.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package cn.hutool.core.util;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport cn.hutool.core.util.CoordinateUtil;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class CoordinateUtil_bd09ToGcj02 extends CoordinateUtil_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    CoordinateUtil.Coordinate coordinateUtil_Coordinate0 = CoordinateUtil.bd09ToGcj02(0.0, (-1295.4132016));\n    assertEquals((-0.010163347796034138), coordinateUtil_Coordinate0.getLng(), 0.01);\n    assertEquals((-1295.419218463895), coordinateUtil_Coordinate0.getLat(), 0.01);\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/ReUtilTest###delLastTest",
        "generated_path": "ReUtil_delLast.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package cn.hutool.core.util;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.lang.func.Func1;\nimport cn.hutool.core.lang.mutable.Mutable;\nimport cn.hutool.core.lang.mutable.MutableObj;\nimport cn.hutool.core.util.ReUtil;\nimport java.nio.CharBuffer;\nimport java.util.LinkedHashSet;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.function.Consumer;\nimport java.util.function.Predicate;\nimport java.util.regex.MatchResult;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\nimport java.util.regex.PatternSyntaxException;\nimport java.util.stream.Stream;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class ReUtil_delLast extends ReUtil_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test003() throws Throwable {\n    Pattern pattern0 = Pattern.compile(\"cn/hutool/core/exceptions/CheckedUtil\", (-746));\n    Pattern pattern1 = Pattern.compile(\"cn/hutool/core/exceptions/CheckedUtil\");\n    ReUtil.isMatch(pattern0, (CharSequence) \"cn/hutool/core/exceptions/CheckedUtil\");\n    ReUtil.isMatch(pattern0, (CharSequence) \"cn/hutool/core/exceptions/CheckedUtil\");\n    ReUtil.count(\"cn/hutool/core/exceptions/CheckedUtil\", (CharSequence) \"cn/hutool/core/exceptions/CheckedUtil\");\n    pattern1.asPredicate();\n    ReUtil.findAll(\"!-#\", (CharSequence) \"cn/hutool/core/exceptions/CheckedUtil\", 1);\n    ReUtil.getAllGroups(pattern1, (CharSequence) \"cn/hutool/core/exceptions/CheckedUtil\");\n    ReUtil.delPre(\"!-#\", (CharSequence) \"cn/hutool/core/exceptions/CheckedUtil\");\n    ReUtil.replaceFirst(pattern1, \"cn/hutool/core/exceptions/CheckedUtil\", \"cn/hutool/core/exceptions/CheckedUtil\");\n    ReUtil.lastIndexOf(pattern1, (CharSequence) \"cn/hutool/core/exceptions/CheckedUtil\");\n    ReUtil.delLast(pattern1, (CharSequence) \"!-#\");\n    ReUtil.extractMulti(pattern1, (CharSequence) \"!-#\", \"cn/hutool/core/exceptions/CheckedUtil\");\n    ReUtil.extractMultiAndDelPre(pattern0, (Mutable<CharSequence>) null, \"[Assertion failed] - this state invariant must be true\");\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/map/TableMapTest###getTest",
        "generated_path": "TableMap_get.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package cn.hutool.core.map;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.annotation.CacheableSynthesizedAnnotationAttributeProcessor;\nimport cn.hutool.core.annotation.GenericSynthesizedAggregateAnnotation;\nimport cn.hutool.core.annotation.GenericSynthesizedAnnotation;\nimport cn.hutool.core.annotation.Hierarchical;\nimport cn.hutool.core.annotation.SynthesizedAnnotationPostProcessor;\nimport cn.hutool.core.annotation.SynthesizedAnnotationSelector;\nimport cn.hutool.core.annotation.scanner.AbstractTypeAnnotationScanner;\nimport cn.hutool.core.annotation.scanner.AnnotationScanner;\nimport cn.hutool.core.annotation.scanner.ElementAnnotationScanner;\nimport cn.hutool.core.annotation.scanner.EmptyAnnotationScanner;\nimport cn.hutool.core.annotation.scanner.GenericAnnotationScanner;\nimport cn.hutool.core.annotation.scanner.TypeAnnotationScanner;\nimport cn.hutool.core.map.TableMap;\nimport java.lang.annotation.Annotation;\nimport java.lang.reflect.Array;\nimport java.util.AbstractMap;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Comparator;\nimport java.util.HashMap;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.function.BiConsumer;\nimport java.util.function.BiFunction;\nimport java.util.function.Consumer;\nimport java.util.function.Function;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class TableMap_get extends TableMap_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    String[] stringArray0 = new String[1];\n    stringArray0[0] = \"ceQ&m\u007fxm1%-o\";\n    TableMap<String, Object> tableMap0 = new TableMap<String, Object>(stringArray0, stringArray0);\n    tableMap0.put(\"ceQ&m\u007fxm1%-o\", \"ceQ&m\u007fxm1%-o\");\n    BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());\n    doReturn(\"ceQ&m\u007fxm1%-o\", \"ceQ&m\u007fxm1%-o\").when(biFunction0).apply(any(), any());\n    tableMap0.computeIfPresent(\"ceQ&m\u007fxm1%-o\", biFunction0);\n    tableMap0.keys();\n    TableMap<Object, String> tableMap1 = new TableMap<Object, String>(stringArray0, stringArray0);\n    tableMap1.get(\" @V2}'C):{B\");\n    tableMap1.remove((Object) \" @V2}'C):{B\");\n    TableMap<AbstractMap.SimpleImmutableEntry<String, Integer>, GenericSynthesizedAggregateAnnotation> tableMap2 = new TableMap<AbstractMap.SimpleImmutableEntry<String, Integer>, GenericSynthesizedAggregateAnnotation>(1736);\n    BiConsumer<Object, GenericSynthesizedAggregateAnnotation> biConsumer0 = (BiConsumer<Object, GenericSynthesizedAggregateAnnotation>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());\n    tableMap2.forEach(biConsumer0);\n    int int0 = (-1448);\n    // Undeclared exception!\n    try {\n        tableMap2.removeByIndex((-1448));\n        fail(\"Expecting exception: ArrayIndexOutOfBoundsException\");\n    } catch (ArrayIndexOutOfBoundsException e) {\n        //\n        // no message in exception (getMessage() returned null)\n        //\n    }\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/io/BufferUtilTest###readLineTest",
        "generated_path": "BufferUtil_readLine.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package cn.hutool.core.io;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.io.BufferUtil;\nimport java.nio.ByteBuffer;\nimport java.nio.CharBuffer;\nimport java.nio.charset.Charset;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class BufferUtil_readLine extends BufferUtil_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    Charset charset0 = Charset.defaultCharset();\n    ByteBuffer byteBuffer0 = charset0.encode(\"29G0iLUIj|Nj23w<\");\n    byteBuffer0.getLong();\n    BufferUtil.readLine(byteBuffer0, charset0);\n    assertEquals(8, byteBuffer0.remaining());\n    assertEquals(8, byteBuffer0.position());\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-setting/src/test/java/cn/hutool/setting/SettingTest###storeTest",
        "generated_path": "Setting_store.java",
        "Compile_result": 1,
        "Test_result": 0,
        "Gen_Test": "package cn.hutool.setting;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.annotation.scanner.TypeAnnotationScanner;\nimport cn.hutool.core.io.resource.BytesResource;\nimport cn.hutool.core.io.resource.CharSequenceResource;\nimport cn.hutool.core.io.resource.FileResource;\nimport cn.hutool.core.io.resource.MultiFileResource;\nimport cn.hutool.core.io.resource.Resource;\nimport cn.hutool.core.io.resource.StringResource;\nimport cn.hutool.setting.GroupedMap;\nimport cn.hutool.setting.Setting;\nimport cn.hutool.setting.dialect.Props;\nimport java.io.File;\nimport java.net.URL;\nimport java.nio.charset.Charset;\nimport java.nio.file.FileSystemNotFoundException;\nimport java.nio.file.InvalidPathException;\nimport java.nio.file.Path;\nimport java.util.Collection;\nimport java.util.LinkedHashSet;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Properties;\nimport java.util.Set;\nimport java.util.function.BiFunction;\nimport java.util.function.Consumer;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.mock.java.io.MockFile;\nimport org.evosuite.runtime.mock.java.net.MockURL;\nimport org.evosuite.runtime.testdata.FileSystemHandling;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class Setting_store extends Setting_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test006() throws Throwable {\n    MockFile mockFile0 = new MockFile(\"Null setting url define!\", \"Null setting url define!\");\n    Path path0 = mockFile0.toPath();\n    FileResource fileResource0 = new FileResource(path0);\n    Charset charset0 = Setting.DEFAULT_CHARSET;\n    Setting setting0 = new Setting(fileResource0, charset0, false);\n    setting0.store();\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/net/NetUtilTest###getDnsInfoTest",
        "generated_path": "NetUtil_getDnsInfo.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package cn.hutool.core.net;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.lang.Filter;\nimport cn.hutool.core.net.NetUtil;\nimport cn.hutool.core.net.PassAuth;\nimport cn.hutool.core.net.UserPassAuthenticator;\nimport java.math.BigInteger;\nimport java.net.Authenticator;\nimport java.net.Inet6Address;\nimport java.net.InetAddress;\nimport java.net.InetSocketAddress;\nimport java.net.NetworkInterface;\nimport java.nio.ByteBuffer;\nimport java.util.LinkedHashSet;\nimport java.util.Set;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.Future;\nimport java.util.concurrent.TimeUnit;\nimport java.util.function.Consumer;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.mock.java.net.MockInetAddress;\nimport org.evosuite.runtime.mock.java.net.MockInetSocketAddress;\nimport org.evosuite.runtime.mock.java.net.MockNetworkInterface;\nimport org.evosuite.runtime.mock.java.util.MockRandom;\nimport org.evosuite.runtime.testdata.EvoSuiteLocalAddress;\nimport org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;\nimport org.evosuite.runtime.testdata.NetworkHandling;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class NetUtil_getDnsInfo extends NetUtil_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void NetUtil_getDnsInfo() throws Throwable {\n    // Undeclared exception!\n    try {\n        NetUtil.getDnsInfo((String) null, (String[]) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        //\n        // no message in exception (getMessage() returned null)\n        //\n        verifyException(\"javax.naming.InitialContext\", e);\n    }\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/text/StrBuilderTest###insertTest",
        "generated_path": "StrBuilder_insert.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package cn.hutool.core.text;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.text.StrBuilder;\nimport java.nio.CharBuffer;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class StrBuilder_insert extends StrBuilder_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test002() throws Throwable {\n    StrBuilder strBuilder0 = new StrBuilder();\n    StrBuilder strBuilder1 = new StrBuilder(16);\n    StrBuilder strBuilder2 = StrBuilder.create();\n    char char0 = 'o';\n    strBuilder1.insert(16, 'o');\n    strBuilder1.toStringAndReset();\n    strBuilder0.toString(false);\n    StrBuilder strBuilder3 = strBuilder0.delTo(3360);\n    int int0 = 0;\n    strBuilder3.codePoints();\n    strBuilder2.toStringAndReset();\n    // Undeclared exception!\n    try {\n        strBuilder1.insert(44, (CharSequence) strBuilder3);\n        fail(\"Expecting exception: ArrayIndexOutOfBoundsException\");\n    } catch (ArrayIndexOutOfBoundsException e) {\n    }\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/RuntimeUtilTest###getProcessorCountTest",
        "generated_path": "RuntimeUtil_getProcessorCount.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package cn.hutool.core.util;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.util.RuntimeUtil;\nimport java.io.File;\nimport java.nio.charset.Charset;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.Future;\nimport java.util.concurrent.TimeUnit;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.mock.java.io.MockFile;\nimport org.evosuite.runtime.mock.java.lang.MockThread;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class RuntimeUtil_getProcessorCount extends RuntimeUtil_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test18() throws Throwable {\n    int int0 = RuntimeUtil.getProcessorCount();\n    assertEquals(1, int0);\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/convert/NumberChineseFormatterTest###formatTest",
        "generated_path": "NumberChineseFormatter_format.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package cn.hutool.core.convert;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.convert.NumberChineseFormatter;\nimport java.math.BigDecimal;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class NumberChineseFormatter_format extends NumberChineseFormatter_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test28() throws Throwable {\n    String string0 = NumberChineseFormatter.format(3628800L, true);\n    assertEquals(\"\\u53C1\\u4F70\\u9646\\u62FE\\u8D30\\u4E07\\u634C\\u4EDF\\u634C\\u4F70\", string0);\n    assertNotNull(string0);\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/EnumUtilTest###getFieldByTest",
        "generated_path": "EnumUtil_getFieldBy.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package cn.hutool.core.util;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.annotation.scanner.TypeAnnotationScanner;\nimport cn.hutool.core.lang.func.Func1;\nimport cn.hutool.core.util.DesensitizedUtil;\nimport cn.hutool.core.util.EnumUtil;\nimport cn.hutool.core.util.EnumUtilTest;\nimport cn.hutool.core.util.ModifierUtil;\nimport cn.hutool.core.util.ReferenceUtil;\nimport java.nio.CharBuffer;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.function.Function;\nimport java.util.function.Predicate;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class EnumUtil_getFieldBy extends EnumUtil_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void EnumUtil_getFieldBy() throws Throwable {\n    Func1<ModifierUtil.ModifierType, String> func1_0 = (Func1<ModifierUtil.ModifierType, String>) mock(Func1.class, new ViolatedAssumptionAnswer());\n    Function<ModifierUtil.ModifierType, Integer> function0 = (Function<ModifierUtil.ModifierType, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());\n    Integer integer0 = new Integer(0);\n    // Undeclared exception!\n    try {\n        EnumUtil.getFieldBy(func1_0, function0, integer0);\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        //\n        // No such method: [writeReplace] from [java.lang.Class@0000000003]\n        //\n        verifyException(\"cn.hutool.core.util.ReflectUtil\", e);\n    }\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/XmlUtilTest###xmlToBeanTest",
        "generated_path": "XmlUtil_xmlToBean.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package cn.hutool.core.util;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.util.XmlUtil;\nimport com.sun.org.apache.xerces.internal.dom.DocumentImpl;\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.File;\nimport java.io.FileDescriptor;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.io.PipedInputStream;\nimport java.io.PipedOutputStream;\nimport java.io.PushbackInputStream;\nimport java.io.Reader;\nimport java.io.StringReader;\nimport java.io.StringWriter;\nimport java.io.Writer;\nimport java.nio.charset.IllegalCharsetNameException;\nimport java.nio.charset.UnsupportedCharsetException;\nimport java.sql.BatchUpdateException;\nimport java.sql.ClientInfoStatus;\nimport java.sql.DataTruncation;\nimport java.sql.SQLClientInfoException;\nimport java.sql.SQLDataException;\nimport java.sql.SQLException;\nimport java.sql.SQLFeatureNotSupportedException;\nimport java.sql.SQLIntegrityConstraintViolationException;\nimport java.sql.SQLNonTransientConnectionException;\nimport java.sql.SQLNonTransientException;\nimport java.sql.SQLSyntaxErrorException;\nimport java.sql.SQLTransactionRollbackException;\nimport java.sql.SQLTransientConnectionException;\nimport java.sql.SQLTransientException;\nimport java.sql.SQLWarning;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.Future;\nimport java.util.concurrent.TimeUnit;\nimport javax.imageio.metadata.IIOMetadataNode;\nimport javax.xml.namespace.QName;\nimport javax.xml.parsers.DocumentBuilder;\nimport javax.xml.parsers.DocumentBuilderFactory;\nimport javax.xml.transform.Result;\nimport javax.xml.transform.Source;\nimport javax.xml.transform.dom.DOMResult;\nimport javax.xml.transform.sax.SAXResult;\nimport javax.xml.transform.sax.SAXSource;\nimport javax.xml.transform.stream.StreamResult;\nimport javax.xml.transform.stream.StreamSource;\nimport javax.xml.xpath.XPath;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.io.MockFile;\nimport org.evosuite.runtime.mock.java.io.MockFileInputStream;\nimport org.evosuite.runtime.mock.java.io.MockFileOutputStream;\nimport org.evosuite.runtime.mock.java.io.MockPrintStream;\nimport org.evosuite.runtime.mock.java.io.MockPrintWriter;\nimport org.evosuite.runtime.testdata.EvoSuiteFile;\nimport org.evosuite.runtime.testdata.FileSystemHandling;\nimport org.junit.runner.RunWith;\nimport org.w3c.dom.DOMException;\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Element;\nimport org.w3c.dom.Node;\nimport org.w3c.dom.NodeList;\nimport org.xml.sax.ContentHandler;\nimport org.xml.sax.InputSource;\nimport org.xml.sax.XMLReader;\nimport org.xml.sax.ext.DefaultHandler2;\nimport org.xml.sax.helpers.DefaultHandler;\nimport org.xml.sax.helpers.XMLFilterImpl;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class XmlUtil_xmlToBean extends XmlUtil_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test088() throws Throwable {\n    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(\"\");\n    assertNotNull(iIOMetadataNode0);\n    Class<DataTruncation> class0 = DataTruncation.class;\n    DataTruncation dataTruncation0 = XmlUtil.xmlToBean((Node) iIOMetadataNode0, class0);\n    assertEquals(\"java.sql.DataTruncation: Data truncation\", dataTruncation0.toString());\n    assertEquals(\"22001\", dataTruncation0.getSQLState());\n    assertEquals(\"Data truncation\", dataTruncation0.getMessage());\n    assertEquals(0, dataTruncation0.getErrorCode());\n    assertNotNull(dataTruncation0);\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-http/src/test/java/cn/hutool/http/HttpUtilTest###normalizeParamsTest",
        "generated_path": "HttpUtil_normalizeParams.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package cn.hutool.http;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.annotation.scanner.TypeAnnotationScanner;\nimport cn.hutool.core.io.StreamProgress;\nimport cn.hutool.core.io.resource.BytesResource;\nimport cn.hutool.core.io.resource.ClassPathResource;\nimport cn.hutool.core.io.resource.MultiFileResource;\nimport cn.hutool.core.io.resource.Resource;\nimport cn.hutool.core.io.resource.VfsResource;\nimport cn.hutool.core.io.resource.WebAppResource;\nimport cn.hutool.core.net.url.UrlBuilder;\nimport cn.hutool.http.Header;\nimport cn.hutool.http.HttpBase;\nimport cn.hutool.http.HttpConfig;\nimport cn.hutool.http.HttpInterceptor;\nimport cn.hutool.http.HttpRequest;\nimport cn.hutool.http.HttpResponse;\nimport cn.hutool.http.HttpUtil;\nimport cn.hutool.http.Method;\nimport cn.hutool.http.ssl.AndroidSupportSSLFactory;\nimport cn.hutool.http.ssl.TrustAnyHostnameVerifier;\nimport java.io.BufferedInputStream;\nimport java.io.BufferedOutputStream;\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.DataInputStream;\nimport java.io.File;\nimport java.io.FileDescriptor;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.io.PipedInputStream;\nimport java.io.PipedOutputStream;\nimport java.io.PrintStream;\nimport java.net.CookieManager;\nimport java.net.HttpCookie;\nimport java.net.HttpURLConnection;\nimport java.net.InetAddress;\nimport java.net.Proxy;\nimport java.net.URI;\nimport java.net.URISyntaxException;\nimport java.net.URLStreamHandler;\nimport java.nio.ByteBuffer;\nimport java.nio.CharBuffer;\nimport java.nio.charset.Charset;\nimport java.nio.charset.IllegalCharsetNameException;\nimport java.nio.charset.UnsupportedCharsetException;\nimport java.nio.file.InvalidPathException;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.LinkedHashSet;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.Future;\nimport java.util.concurrent.TimeUnit;\nimport java.util.function.BiConsumer;\nimport java.util.function.BiFunction;\nimport java.util.function.Consumer;\nimport java.util.function.Function;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.Random;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.mock.java.io.MockFile;\nimport org.evosuite.runtime.mock.java.io.MockFileInputStream;\nimport org.evosuite.runtime.mock.java.io.MockFileOutputStream;\nimport org.evosuite.runtime.mock.java.io.MockPrintStream;\nimport org.evosuite.runtime.mock.java.net.MockInetAddress;\nimport org.evosuite.runtime.mock.java.net.MockSocket;\nimport org.evosuite.runtime.mock.java.net.MockURI;\nimport org.evosuite.runtime.testdata.EvoSuiteFile;\nimport org.evosuite.runtime.testdata.EvoSuiteURL;\nimport org.evosuite.runtime.testdata.FileSystemHandling;\nimport org.evosuite.runtime.testdata.NetworkHandling;\nimport org.junit.runner.RunWith;\nimport sun.nio.cs.ext.GBK;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class HttpUtil_normalizeParams extends HttpUtil_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test132() throws Throwable {\n    Map<String, List<String>> map0 = new HashMap<String, List<String>>();\n    assertEquals(0, map0.size());\n    assertTrue(map0.isEmpty());\n    assertNotNull(map0);\n    Method method0 = Method.GET;\n    HttpRequest httpRequest0 = HttpUtil.createRequest(method0, \"ev2\\u0003\");\n    assertEquals(Method.GET, httpRequest0.getMethod());\n    assertEquals(\"HTTP/1.1\", httpRequest0.httpVersion());\n    assertEquals(\"UTF-8\", httpRequest0.charset());\n    assertNotNull(httpRequest0);\n    Map<String, Object> map1 = httpRequest0.form();\n    assertEquals(Method.GET, httpRequest0.getMethod());\n    assertEquals(\"HTTP/1.1\", httpRequest0.httpVersion());\n    assertEquals(\"UTF-8\", httpRequest0.charset());\n    assertNull(map1);\n    String string0 = HttpUtil.get(\"[Tf@-\", (Map<String, Object>) null);\n    assertNotNull(string0);\n    Charset charset0 = HttpBase.DEFAULT_CHARSET;\n    assertTrue(charset0.canEncode());\n    assertTrue(charset0.isRegistered());\n    assertEquals(\"UTF-8\", charset0.displayName());\n    assertEquals(\"UTF-8\", charset0.name());\n    assertEquals(\"UTF-8\", charset0.toString());\n    assertNotNull(charset0);\n    String string1 = HttpUtil.normalizeParams(\"Src path must be not null !\", charset0);\n    assertFalse(string1.equals((Object) string0));\n    assertTrue(charset0.canEncode());\n    assertTrue(charset0.isRegistered());\n    assertEquals(\"UTF-8\", charset0.displayName());\n    assertEquals(\"UTF-8\", charset0.name());\n    assertEquals(\"UTF-8\", charset0.toString());\n    assertNotNull(string1);\n    assertEquals(\"Src%20path%20must%20be%20not%20null%20!\", string1);\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/text/CharSequenceUtilTest###commonSuffixTest",
        "generated_path": "CharSequenceUtil_commonSuffix.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package cn.hutool.core.text;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.lang.Filter;\nimport cn.hutool.core.lang.func.Func1;\nimport cn.hutool.core.text.CharSequenceUtil;\nimport cn.hutool.core.text.StrBuilder;\nimport cn.hutool.core.util.DesensitizedUtil;\nimport java.io.StringWriter;\nimport java.nio.BufferUnderflowException;\nimport java.nio.ByteBuffer;\nimport java.nio.CharBuffer;\nimport java.nio.charset.Charset;\nimport java.nio.charset.IllegalCharsetNameException;\nimport java.nio.charset.UnsupportedCharsetException;\nimport java.util.Comparator;\nimport java.util.LinkedHashSet;\nimport java.util.List;\nimport java.util.PriorityQueue;\nimport java.util.SortedSet;\nimport java.util.TreeSet;\nimport java.util.Vector;\nimport java.util.function.Function;\nimport java.util.function.Predicate;\nimport java.util.function.UnaryOperator;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\nimport java.util.regex.PatternSyntaxException;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class CharSequenceUtil_commonSuffix extends CharSequenceUtil_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test003() throws Throwable {\n    CharSequenceUtil.subWithLength(\"^:`p|O zzy\\nk;5nF\", (-1362), 0);\n    CharSequenceUtil.fixLength(\"^:`p|O zzy\\nk;5nF\", 'F', 1);\n    CharSequenceUtil.isNullOrUndefined(\"^:`p|O zzy\\nk;5nF\");\n    CharSequenceUtil.endWith((CharSequence) \"^:`p|O zzy\\nk;5nF\", 'V');\n    String string0 = CharSequenceUtil.fixLength(\"^:`p|O zzy\\nk;5nF\", '-', 1998);\n    CharSequenceUtil.isWrap((CharSequence) \"^:`p|O zzy\\nk;5nF\", 'r', 'S');\n    CharSequenceUtil.commonSuffix(\"^:`p|O zzy\\nk;5nF\", \"^:`p|O zzy\\nk;5nF\");\n    CharSequenceUtil.isSubEquals((CharSequence) \"^:`p|O zzy\\nk;5nF\", (-1362), (CharSequence) \"^:`p|O zzy\\nk;5nF\", false);\n    CharSequenceUtil.splitTrim((CharSequence) \"^:`p|O zzy\\nk;5nF\", (CharSequence) string0);\n    Filter<Character> filter0 = (Filter<Character>) mock(Filter.class, new ViolatedAssumptionAnswer());\n    doReturn(false, false, false, true, false).when(filter0).accept(anyChar());\n    CharSequenceUtil.filter(\"^:`p|O zzy\\nk;5nF\", filter0);\n    CharSequenceUtil.contains((CharSequence) \"p\", (CharSequence) \"^:`p|O zzy\\nk;5nF\");\n    CharSequenceUtil.startWith((CharSequence) \"p\", 'V');\n    CharSequenceUtil.splitTrim((CharSequence) \"^:`p|O zzy\\nk;5nF\", (CharSequence) \"^:`p|O zzy\\nk;5nF\");\n    CharBuffer[] charBufferArray0 = new CharBuffer[4];\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/NumberUtilTest###parseIntTest",
        "generated_path": "NumberUtil_parseInt.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package cn.hutool.core.util;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.util.NumberUtil;\nimport java.math.BigDecimal;\nimport java.math.BigInteger;\nimport java.math.MathContext;\nimport java.math.RoundingMode;\nimport java.text.DecimalFormat;\nimport java.text.DecimalFormatSymbols;\nimport java.util.Collection;\nimport java.util.LinkedHashSet;\nimport java.util.LinkedList;\nimport java.util.function.Consumer;\nimport java.util.function.UnaryOperator;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.Random;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.mock.java.util.MockRandom;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class NumberUtil_parseInt extends NumberUtil_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test076() throws Throwable {\n    NumberUtil.parseInt((String) null);\n    BigDecimal[] bigDecimalArray0 = new BigDecimal[1];\n    BigDecimal bigDecimal0 = new BigDecimal((-1457.807));\n    bigDecimalArray0[0] = bigDecimal0;\n    NumberUtil.roundHalfEven(bigDecimal0, (-1));\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/text/TextSimilarityTest###similarTest",
        "generated_path": "TextSimilarity_similar.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package cn.hutool.core.text;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.text.TextSimilarity;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class TextSimilarity_similar extends TextSimilarity_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    TextSimilarity.similar(\"!-@T.RDxQ5F\u007f\", \"9X-t\");\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-json/src/test/java/cn/hutool/json/JSONStrFormatterTest###formatTest",
        "generated_path": "JSONStrFormatter_format.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package cn.hutool.json;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.json.JSONStrFormatter;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class JSONStrFormatter_format extends JSONStrFormatter_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    String string0 = JSONStrFormatter.format(\"M2%0]IDPv:[R3J\");\n    assertEquals(\"M2%0\\n]IDPv:\\n[\\nR3J\", string0);\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/annotation/CacheableSynthesizedAnnotationAttributeProcessorTest###getAttributeValueTest",
        "generated_path": "CacheableSynthesizedAnnotationAttributeProcessor_getAttributeValue.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package cn.hutool.core.annotation;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.annotation.CacheableSynthesizedAnnotationAttributeProcessor;\nimport cn.hutool.core.annotation.CacheableSynthesizedAnnotationAttributeProcessorTest;\nimport cn.hutool.core.annotation.Hierarchical;\nimport cn.hutool.core.annotation.MirrorLinkAnnotationPostProcessorTest;\nimport cn.hutool.core.annotation.SynthesizedAnnotation;\nimport java.util.Collection;\nimport java.util.Comparator;\nimport java.util.HashMap;\nimport java.util.LinkedHashSet;\nimport java.util.LinkedList;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class CacheableSynthesizedAnnotationAttributeProcessor_getAttributeValue extends CacheableSynthesizedAnnotationAttributeProcessor_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test2() throws Throwable {\n    Comparator<Hierarchical> comparator0 = Hierarchical.DEFAULT_HIERARCHICAL_COMPARATOR;\n    CacheableSynthesizedAnnotationAttributeProcessor cacheableSynthesizedAnnotationAttributeProcessor0 = new CacheableSynthesizedAnnotationAttributeProcessor(comparator0);\n    Class<Object> class0 = Object.class;\n    LinkedHashSet<CacheableSynthesizedAnnotationAttributeProcessorTest.TestSynthesizedAnnotation> linkedHashSet0 = new LinkedHashSet<CacheableSynthesizedAnnotationAttributeProcessorTest.TestSynthesizedAnnotation>();\n    HashMap<String, Object> hashMap0 = new HashMap<String, Object>();\n    hashMap0.putIfAbsent(\"25>Nm]M-T'UZ{=SLQ\", cacheableSynthesizedAnnotationAttributeProcessor0);\n    CacheableSynthesizedAnnotationAttributeProcessorTest.TestSynthesizedAnnotation cacheableSynthesizedAnnotationAttributeProcessorTest_TestSynthesizedAnnotation0 = new CacheableSynthesizedAnnotationAttributeProcessorTest.TestSynthesizedAnnotation(304, 304, hashMap0);\n    linkedHashSet0.add(cacheableSynthesizedAnnotationAttributeProcessorTest_TestSynthesizedAnnotation0);\n    Object object0 = cacheableSynthesizedAnnotationAttributeProcessor0.getAttributeValue(\"25>Nm]M-T'UZ{=SLQ\", class0, (Collection<? extends SynthesizedAnnotation>) linkedHashSet0);\n    Object object1 = cacheableSynthesizedAnnotationAttributeProcessor0.getAttributeValue(\"25>Nm]M-T'UZ{=SLQ\", class0, (Collection<? extends SynthesizedAnnotation>) linkedHashSet0);\n    assertSame(object1, object0);\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/ReUtilTest###escapeTest",
        "generated_path": "ReUtil_escape.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package cn.hutool.core.util;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.lang.func.Func1;\nimport cn.hutool.core.lang.mutable.Mutable;\nimport cn.hutool.core.lang.mutable.MutableObj;\nimport cn.hutool.core.util.ReUtil;\nimport java.nio.CharBuffer;\nimport java.util.LinkedHashSet;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.function.Consumer;\nimport java.util.function.Predicate;\nimport java.util.regex.MatchResult;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\nimport java.util.regex.PatternSyntaxException;\nimport java.util.stream.Stream;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class ReUtil_escape extends ReUtil_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test004() throws Throwable {\n    CharBuffer charBuffer0 = CharBuffer.allocate(71);\n    ReUtil.escape((CharSequence) charBuffer0);\n    ReUtil.getFirstNumber(\"\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\");\n    ReUtil.getGroup1(\"cn.hutool.core.lang.mutable.MutableInt\", (CharSequence) \"\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\");\n    Pattern pattern0 = Pattern.compile(\"\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\");\n    pattern0.splitAsStream(\"\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\");\n    MutableObj.of(charBuffer0);\n    ReUtil.getAllGroups(pattern0, (CharSequence) \"cn.hutool.core.lang.mutable.MutableInt\", true, true);\n    ReUtil.extractMulti(pattern0, (CharSequence) charBuffer0, \"cn.hutool.core.lang.mutable.MutableInt\");\n    ReUtil.getGroup1(pattern0, (CharSequence) null);\n    ReUtil.count(pattern0, (CharSequence) null);\n    ReUtil.escape('/');\n    ReUtil.escape((CharSequence) null);\n    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/HexUtilTest###toUnicodeHexTest",
        "generated_path": "HexUtil_toUnicodeHex.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package cn.hutool.core.util;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.util.HexUtil;\nimport java.awt.Color;\nimport java.math.BigInteger;\nimport java.nio.CharBuffer;\nimport java.nio.charset.Charset;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class HexUtil_toUnicodeHex extends HexUtil_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    String string0 = HexUtil.toUnicodeHex(15);\n    assertEquals(\"\\\\u000f\", string0);\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/EnumUtilTest###getFieldValuesTest",
        "generated_path": "EnumUtil_getFieldValues.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package cn.hutool.core.util;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.annotation.scanner.TypeAnnotationScanner;\nimport cn.hutool.core.lang.func.Func1;\nimport cn.hutool.core.util.DesensitizedUtil;\nimport cn.hutool.core.util.EnumUtil;\nimport cn.hutool.core.util.EnumUtilTest;\nimport cn.hutool.core.util.ModifierUtil;\nimport cn.hutool.core.util.ReferenceUtil;\nimport java.nio.CharBuffer;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.function.Function;\nimport java.util.function.Predicate;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class EnumUtil_getFieldValues extends EnumUtil_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test19() throws Throwable {\n    Class<EnumUtilTest.TestEnum> class0 = EnumUtilTest.TestEnum.class;\n    List<Object> list0 = EnumUtil.getFieldValues(class0, \"pC\");\n    assertNotNull(list0);\n    assertEquals(3, list0.size());\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/ReUtilTest###isMatchTest",
        "generated_path": "ReUtil_isMatch.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package cn.hutool.core.util;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.lang.func.Func1;\nimport cn.hutool.core.lang.mutable.Mutable;\nimport cn.hutool.core.lang.mutable.MutableObj;\nimport cn.hutool.core.util.ReUtil;\nimport java.nio.CharBuffer;\nimport java.util.LinkedHashSet;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.function.Consumer;\nimport java.util.function.Predicate;\nimport java.util.regex.MatchResult;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\nimport java.util.regex.PatternSyntaxException;\nimport java.util.stream.Stream;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class ReUtil_isMatch extends ReUtil_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test003() throws Throwable {\n    Pattern pattern0 = Pattern.compile(\"cn/hutool/core/exceptions/CheckedUtil\", (-746));\n    Pattern pattern1 = Pattern.compile(\"cn/hutool/core/exceptions/CheckedUtil\");\n    ReUtil.isMatch(pattern0, (CharSequence) \"cn/hutool/core/exceptions/CheckedUtil\");\n    ReUtil.isMatch(pattern0, (CharSequence) \"cn/hutool/core/exceptions/CheckedUtil\");\n    ReUtil.count(\"cn/hutool/core/exceptions/CheckedUtil\", (CharSequence) \"cn/hutool/core/exceptions/CheckedUtil\");\n    pattern1.asPredicate();\n    ReUtil.findAll(\"!-#\", (CharSequence) \"cn/hutool/core/exceptions/CheckedUtil\", 1);\n    ReUtil.getAllGroups(pattern1, (CharSequence) \"cn/hutool/core/exceptions/CheckedUtil\");\n    ReUtil.delPre(\"!-#\", (CharSequence) \"cn/hutool/core/exceptions/CheckedUtil\");\n    ReUtil.replaceFirst(pattern1, \"cn/hutool/core/exceptions/CheckedUtil\", \"cn/hutool/core/exceptions/CheckedUtil\");\n    ReUtil.lastIndexOf(pattern1, (CharSequence) \"cn/hutool/core/exceptions/CheckedUtil\");\n    ReUtil.delLast(pattern1, (CharSequence) \"!-#\");\n    ReUtil.extractMulti(pattern1, (CharSequence) \"!-#\", \"cn/hutool/core/exceptions/CheckedUtil\");\n    ReUtil.extractMultiAndDelPre(pattern0, (Mutable<CharSequence>) null, \"[Assertion failed] - this state invariant must be true\");\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/io/FileUtilTest###delTest",
        "generated_path": "FileUtil_del.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package cn.hutool.core.io;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.io.FileUtil;\nimport cn.hutool.core.io.LineHandler;\nimport cn.hutool.core.io.file.FileMode;\nimport cn.hutool.core.io.file.FileReader;\nimport cn.hutool.core.io.file.LineSeparator;\nimport cn.hutool.core.io.file.PathUtil;\nimport cn.hutool.core.io.file.Tailer;\nimport java.io.BufferedInputStream;\nimport java.io.BufferedOutputStream;\nimport java.io.BufferedWriter;\nimport java.io.ByteArrayInputStream;\nimport java.io.DataInputStream;\nimport java.io.DataOutputStream;\nimport java.io.File;\nimport java.io.FileDescriptor;\nimport java.io.FileFilter;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.io.PipedInputStream;\nimport java.io.PipedOutputStream;\nimport java.io.PrintStream;\nimport java.io.PushbackInputStream;\nimport java.io.RandomAccessFile;\nimport java.io.SequenceInputStream;\nimport java.net.URI;\nimport java.net.URL;\nimport java.net.URLStreamHandler;\nimport java.nio.ByteBuffer;\nimport java.nio.CharBuffer;\nimport java.nio.charset.Charset;\nimport java.nio.charset.IllegalCharsetNameException;\nimport java.nio.charset.UnsupportedCharsetException;\nimport java.nio.file.InvalidPathException;\nimport java.nio.file.Path;\nimport java.nio.file.StandardCopyOption;\nimport java.util.Collection;\nimport java.util.Comparator;\nimport java.util.Enumeration;\nimport java.util.HashMap;\nimport java.util.LinkedHashSet;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.Future;\nimport java.util.concurrent.TimeUnit;\nimport java.util.function.BiConsumer;\nimport java.util.function.Consumer;\nimport java.util.function.Predicate;\nimport java.util.zip.Adler32;\nimport java.util.zip.Checksum;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.mock.java.io.MockFile;\nimport org.evosuite.runtime.mock.java.io.MockFileInputStream;\nimport org.evosuite.runtime.mock.java.io.MockFileOutputStream;\nimport org.evosuite.runtime.mock.java.io.MockPrintStream;\nimport org.evosuite.runtime.mock.java.io.MockRandomAccessFile;\nimport org.evosuite.runtime.mock.java.net.MockURI;\nimport org.evosuite.runtime.mock.java.net.MockURL;\nimport org.evosuite.runtime.testdata.EvoSuiteFile;\nimport org.evosuite.runtime.testdata.EvoSuiteURL;\nimport org.evosuite.runtime.testdata.FileSystemHandling;\nimport org.evosuite.runtime.testdata.NetworkHandling;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class FileUtil_del extends FileUtil_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void FileUtil_del() throws Throwable {\n    FileUtil.normalize((String) null);\n    FileUtil.del((String) null);\n    String string0 = null;\n    // Undeclared exception!\n    try {\n        Charset.forName(\"application/x-7z-compressed\");\n        fail(\"Expecting exception: IllegalCharsetNameException\");\n    } catch (IllegalCharsetNameException e) {\n        //\n        // application/x-7z-compressed\n        //\n        verifyException(\"java.nio.charset.Charset\", e);\n    }\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/ObjectUtilTest###cloneTest",
        "generated_path": "ObjectUtil_clone.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "package cn.hutool.core.util;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.annotation.scanner.AbstractTypeAnnotationScanner;\nimport cn.hutool.core.annotation.scanner.MethodAnnotationScanner;\nimport cn.hutool.core.util.ObjectUtil;\nimport java.awt.BufferCapabilities;\nimport java.awt.Dimension;\nimport java.awt.ImageCapabilities;\nimport java.awt.Insets;\nimport java.awt.PageAttributes;\nimport java.awt.Point;\nimport java.awt.Rectangle;\nimport java.awt.RenderingHints;\nimport java.awt.geom.AffineTransform;\nimport java.awt.geom.Dimension2D;\nimport java.awt.geom.Point2D;\nimport java.awt.geom.Rectangle2D;\nimport java.io.ByteArrayOutputStream;\nimport java.io.File;\nimport java.io.PrintStream;\nimport java.lang.reflect.Array;\nimport java.net.HttpCookie;\nimport java.nio.CharBuffer;\nimport java.sql.BatchUpdateException;\nimport java.sql.ClientInfoStatus;\nimport java.sql.DataTruncation;\nimport java.sql.Date;\nimport java.sql.SQLClientInfoException;\nimport java.sql.SQLDataException;\nimport java.sql.SQLException;\nimport java.sql.SQLFeatureNotSupportedException;\nimport java.sql.SQLIntegrityConstraintViolationException;\nimport java.sql.SQLInvalidAuthorizationSpecException;\nimport java.sql.SQLNonTransientConnectionException;\nimport java.sql.SQLNonTransientException;\nimport java.sql.SQLSyntaxErrorException;\nimport java.sql.SQLTimeoutException;\nimport java.sql.SQLTransactionRollbackException;\nimport java.sql.SQLTransientConnectionException;\nimport java.sql.SQLTransientException;\nimport java.sql.SQLWarning;\nimport java.sql.Time;\nimport java.sql.Timestamp;\nimport java.text.BreakIterator;\nimport java.text.ChoiceFormat;\nimport java.text.Collator;\nimport java.text.DateFormatSymbols;\nimport java.text.DecimalFormat;\nimport java.text.DecimalFormatSymbols;\nimport java.text.FieldPosition;\nimport java.text.Format;\nimport java.text.NumberFormat;\nimport java.text.RuleBasedCollator;\nimport java.text.StringCharacterIterator;\nimport java.time.DateTimeException;\nimport java.time.Instant;\nimport java.time.LocalDate;\nimport java.time.LocalDateTime;\nimport java.time.LocalTime;\nimport java.time.Month;\nimport java.time.chrono.ChronoLocalDate;\nimport java.time.temporal.ChronoField;\nimport java.util.ArrayDeque;\nimport java.util.BitSet;\nimport java.util.Collection;\nimport java.util.Hashtable;\nimport java.util.IdentityHashMap;\nimport java.util.LinkedHashMap;\nimport java.util.LinkedHashSet;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Properties;\nimport java.util.SimpleTimeZone;\nimport java.util.Spliterator;\nimport java.util.Stack;\nimport java.util.StringTokenizer;\nimport java.util.TimeZone;\nimport java.util.TreeMap;\nimport java.util.Vector;\nimport java.util.function.Consumer;\nimport java.util.function.Function;\nimport java.util.function.Supplier;\nimport java.util.function.UnaryOperator;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.mock.java.io.MockFile;\nimport org.evosuite.runtime.mock.java.io.MockPrintStream;\nimport org.evosuite.runtime.mock.java.lang.MockThrowable;\nimport org.evosuite.runtime.mock.java.text.MockDateFormat;\nimport org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;\nimport org.evosuite.runtime.mock.java.time.MockInstant;\nimport org.evosuite.runtime.mock.java.time.MockLocalDate;\nimport org.evosuite.runtime.mock.java.time.MockLocalDateTime;\nimport org.evosuite.runtime.mock.java.time.MockLocalTime;\nimport org.evosuite.runtime.mock.java.util.MockDate;\nimport org.evosuite.runtime.mock.java.util.MockGregorianCalendar;\nimport org.junit.runner.RunWith;\nimport sun.awt.SunHints;\nimport sun.util.calendar.ZoneInfo;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class ObjectUtil_clone extends ObjectUtil_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test16() throws Throwable {\n    Float float0 = new Float(0.0);\n    Float.min(0.0F, 0.0F);\n    ObjectUtil.defaultIfNull(float0, float0);\n    String string0 = ObjectUtil.toString((Object) null);\n    assertNotNull(string0);\n    assertEquals(\"null\", string0);\n    ObjectUtil.defaultIfBlank(\"\", \"\");\n    LinkedHashMap<Float, Timestamp> linkedHashMap0 = new LinkedHashMap<Float, Timestamp>();\n    LinkedHashMap<Float, Timestamp> linkedHashMap1 = ObjectUtil.clone(linkedHashMap0);\n    assertNotSame(linkedHashMap1, linkedHashMap0);\n    assertNotNull(linkedHashMap1);\n    Hashtable<NumberFormat, Dimension> hashtable0 = new Hashtable<NumberFormat, Dimension>();\n    Locale locale0 = Locale.CHINESE;\n    NumberFormat numberFormat0 = NumberFormat.getNumberInstance(locale0);\n    Dimension dimension0 = new Dimension();\n    hashtable0.put(numberFormat0, dimension0);\n    Function<Hashtable<NumberFormat, Dimension>, CharBuffer> function0 = (Function<Hashtable<NumberFormat, Dimension>, CharBuffer>) mock(Function.class, new ViolatedAssumptionAnswer());\n    doReturn((Object) null).when(function0).apply(anyMap());\n    char[] charArray0 = new char[5];\n    charArray0[0] = '[';\n    charArray0[1] = 'A';\n    charArray0[2] = 'P';\n    charArray0[3] = 'O';\n    charArray0[4] = 'y';\n    CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);\n    CharBuffer charBuffer1 = ObjectUtil.defaultIfNull(hashtable0, (Function<Hashtable<NumberFormat, Dimension>, ? extends CharBuffer>) function0, charBuffer0);\n    assertNull(charBuffer1);\n    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();\n    MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(373, 0, 0);\n    int int0 = ObjectUtil.compare(mockGregorianCalendar0, mockGregorianCalendar1);\n    assertEquals(1, int0);\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/EnumUtilTest###getFieldNamesTest",
        "generated_path": "EnumUtil_getFieldNames.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package cn.hutool.core.util;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.annotation.scanner.TypeAnnotationScanner;\nimport cn.hutool.core.lang.func.Func1;\nimport cn.hutool.core.util.DesensitizedUtil;\nimport cn.hutool.core.util.EnumUtil;\nimport cn.hutool.core.util.EnumUtilTest;\nimport cn.hutool.core.util.ModifierUtil;\nimport cn.hutool.core.util.ReferenceUtil;\nimport java.nio.CharBuffer;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.function.Function;\nimport java.util.function.Predicate;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class EnumUtil_getFieldNames extends EnumUtil_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test18() throws Throwable {\n    Class<EnumUtilTest.TestEnum> class0 = EnumUtilTest.TestEnum.class;\n    List<String> list0 = EnumUtil.getFieldNames(class0);\n    assertEquals(2, list0.size());\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/date/DateBetweenTest###betweenMonthTest",
        "generated_path": "DateBetween_betweenMonth.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package cn.hutool.core.date;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.date.BetweenFormatter;\nimport cn.hutool.core.date.DateBetween;\nimport cn.hutool.core.date.DateUnit;\nimport java.time.Instant;\nimport java.util.Date;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.time.MockInstant;\nimport org.evosuite.runtime.mock.java.util.MockDate;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class DateBetween_betweenMonth extends DateBetween_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    MockDate mockDate0 = new MockDate((-1382), (-1382), (-164));\n    MockDate mockDate1 = new MockDate();\n    DateBetween dateBetween0 = DateBetween.create((Date) mockDate1, (Date) mockDate0, false);\n    long long0 = dateBetween0.betweenMonth(false);\n    assertEquals((-19342L), long0);\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/IdUtilTest###getDataCenterIdTest",
        "generated_path": "IdUtil_getDataCenterId.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package cn.hutool.core.util;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.lang.Snowflake;\nimport cn.hutool.core.util.IdUtil;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.System;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class IdUtil_getDataCenterId extends IdUtil_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    long long0 = IdUtil.getDataCenterId(1L);\n    assertEquals(0L, long0);\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/collection/CollStreamUtilTest###testMerge",
        "generated_path": "CollStreamUtil_merge.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package cn.hutool.core.collection;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport cn.hutool.core.collection.CollStreamUtil;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.LinkedHashSet;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.function.BiFunction;\nimport java.util.function.Function;\nimport java.util.stream.Collector;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class CollStreamUtil_merge extends CollStreamUtil_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    Function<String, Integer> function0 = (Function<String, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());\n    List<Integer> list0 = CollStreamUtil.toList((Collection<String>) null, function0);\n    Function<Integer, Object> function1 = (Function<Integer, Object>) mock(Function.class, new ViolatedAssumptionAnswer());\n    List<Object> list1 = CollStreamUtil.toList((Collection<Integer>) list0, function1, false);\n    List<String> list2 = CollStreamUtil.toList((Collection<Object>) list1, (Function<Object, String>) null, false);\n    Function<String, LinkedList<Integer>> function2 = (Function<String, LinkedList<Integer>>) mock(Function.class, new ViolatedAssumptionAnswer());\n    Set<LinkedList<Integer>> set0 = CollStreamUtil.toSet((Collection<String>) list2, function2, true);\n    Map<Integer, Object> map0 = CollStreamUtil.groupBy((Collection<LinkedList<Integer>>) set0, (Function<LinkedList<Integer>, Integer>) null, (Collector<LinkedList<Integer>, ?, Object>) null);\n    Function<LinkedList<Integer>, LinkedList<String>> function3 = (Function<LinkedList<Integer>, LinkedList<String>>) mock(Function.class, new ViolatedAssumptionAnswer());\n    List<LinkedList<String>> list3 = CollStreamUtil.toList((Collection<LinkedList<Integer>>) set0, function3, false);\n    Map<Integer, LinkedList<String>> map1 = CollStreamUtil.toIdentityMap((Collection<LinkedList<String>>) list3, (Function<LinkedList<String>, Integer>) null);\n    BiFunction<Object, LinkedList<String>, Integer> biFunction0 = (BiFunction<Object, LinkedList<String>, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());\n    Map<Integer, Integer> map2 = CollStreamUtil.merge(map0, map1, biFunction0);\n    assertEquals(0, map2.size());\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/EnumUtilTest###getNameFieldMapTest",
        "generated_path": "EnumUtil_getNameFieldMap.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package cn.hutool.core.util;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.annotation.scanner.TypeAnnotationScanner;\nimport cn.hutool.core.lang.func.Func1;\nimport cn.hutool.core.util.DesensitizedUtil;\nimport cn.hutool.core.util.EnumUtil;\nimport cn.hutool.core.util.EnumUtilTest;\nimport cn.hutool.core.util.ModifierUtil;\nimport cn.hutool.core.util.ReferenceUtil;\nimport java.nio.CharBuffer;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.function.Function;\nimport java.util.function.Predicate;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class EnumUtil_getNameFieldMap extends EnumUtil_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test17() throws Throwable {\n    Class<ReferenceUtil.ReferenceType> class0 = ReferenceUtil.ReferenceType.class;\n    Map<String, Object> map0 = EnumUtil.getNameFieldMap(class0, \"'5G/Y#2\");\n    assertEquals(3, map0.size());\n    assertNotNull(map0);\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-http/src/test/java/cn/hutool/http/HttpUtilTest###urlWithFormTest",
        "generated_path": "HttpUtil_urlWithForm.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package cn.hutool.http;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.annotation.scanner.TypeAnnotationScanner;\nimport cn.hutool.core.io.StreamProgress;\nimport cn.hutool.core.io.resource.BytesResource;\nimport cn.hutool.core.io.resource.ClassPathResource;\nimport cn.hutool.core.io.resource.MultiFileResource;\nimport cn.hutool.core.io.resource.Resource;\nimport cn.hutool.core.io.resource.VfsResource;\nimport cn.hutool.core.io.resource.WebAppResource;\nimport cn.hutool.core.net.url.UrlBuilder;\nimport cn.hutool.http.Header;\nimport cn.hutool.http.HttpBase;\nimport cn.hutool.http.HttpConfig;\nimport cn.hutool.http.HttpInterceptor;\nimport cn.hutool.http.HttpRequest;\nimport cn.hutool.http.HttpResponse;\nimport cn.hutool.http.HttpUtil;\nimport cn.hutool.http.Method;\nimport cn.hutool.http.ssl.AndroidSupportSSLFactory;\nimport cn.hutool.http.ssl.TrustAnyHostnameVerifier;\nimport java.io.BufferedInputStream;\nimport java.io.BufferedOutputStream;\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.DataInputStream;\nimport java.io.File;\nimport java.io.FileDescriptor;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.io.PipedInputStream;\nimport java.io.PipedOutputStream;\nimport java.io.PrintStream;\nimport java.net.CookieManager;\nimport java.net.HttpCookie;\nimport java.net.HttpURLConnection;\nimport java.net.InetAddress;\nimport java.net.Proxy;\nimport java.net.URI;\nimport java.net.URISyntaxException;\nimport java.net.URLStreamHandler;\nimport java.nio.ByteBuffer;\nimport java.nio.CharBuffer;\nimport java.nio.charset.Charset;\nimport java.nio.charset.IllegalCharsetNameException;\nimport java.nio.charset.UnsupportedCharsetException;\nimport java.nio.file.InvalidPathException;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.LinkedHashSet;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.Future;\nimport java.util.concurrent.TimeUnit;\nimport java.util.function.BiConsumer;\nimport java.util.function.BiFunction;\nimport java.util.function.Consumer;\nimport java.util.function.Function;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.Random;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.mock.java.io.MockFile;\nimport org.evosuite.runtime.mock.java.io.MockFileInputStream;\nimport org.evosuite.runtime.mock.java.io.MockFileOutputStream;\nimport org.evosuite.runtime.mock.java.io.MockPrintStream;\nimport org.evosuite.runtime.mock.java.net.MockInetAddress;\nimport org.evosuite.runtime.mock.java.net.MockSocket;\nimport org.evosuite.runtime.mock.java.net.MockURI;\nimport org.evosuite.runtime.testdata.EvoSuiteFile;\nimport org.evosuite.runtime.testdata.EvoSuiteURL;\nimport org.evosuite.runtime.testdata.FileSystemHandling;\nimport org.evosuite.runtime.testdata.NetworkHandling;\nimport org.junit.runner.RunWith;\nimport sun.nio.cs.ext.GBK;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class HttpUtil_urlWithForm extends HttpUtil_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test006() throws Throwable {\n    HttpRequest httpRequest0 = HttpUtil.createGet(\"cn.hutool.core.annoSation.SynthesizedAnnotationProxy\");\n    assertEquals(\"HTTP/1.1\", httpRequest0.httpVersion());\n    assertEquals(Method.GET, httpRequest0.getMethod());\n    assertEquals(\"UTF-8\", httpRequest0.charset());\n    assertNotNull(httpRequest0);\n    String string0 = \"HttpURLConnection has not been initialized.\";\n    HttpRequest httpRequest1 = httpRequest0.enableDefaultCookie();\n    assertSame(httpRequest0, httpRequest1);\n    assertSame(httpRequest1, httpRequest0);\n    assertEquals(\"HTTP/1.1\", httpRequest0.httpVersion());\n    assertEquals(Method.GET, httpRequest0.getMethod());\n    assertEquals(\"UTF-8\", httpRequest0.charset());\n    assertEquals(\"HTTP/1.1\", httpRequest1.httpVersion());\n    assertEquals(Method.GET, httpRequest1.getMethod());\n    assertEquals(\"UTF-8\", httpRequest1.charset());\n    assertNotNull(httpRequest1);\n    HttpRequest httpRequest2 = httpRequest0.disableCache();\n    assertSame(httpRequest0, httpRequest1);\n    assertSame(httpRequest0, httpRequest2);\n    assertSame(httpRequest2, httpRequest0);\n    assertSame(httpRequest2, httpRequest1);\n    assertEquals(\"HTTP/1.1\", httpRequest0.httpVersion());\n    assertEquals(Method.GET, httpRequest0.getMethod());\n    assertEquals(\"UTF-8\", httpRequest0.charset());\n    assertEquals(\"HTTP/1.1\", httpRequest2.httpVersion());\n    assertEquals(\"UTF-8\", httpRequest2.charset());\n    assertEquals(Method.GET, httpRequest2.getMethod());\n    assertNotNull(httpRequest2);\n    Charset charset0 = HttpBase.DEFAULT_CHARSET;\n    assertEquals(\"UTF-8\", charset0.toString());\n    assertTrue(charset0.canEncode());\n    assertEquals(\"UTF-8\", charset0.displayName());\n    assertTrue(charset0.isRegistered());\n    assertEquals(\"UTF-8\", charset0.name());\n    assertNotNull(charset0);\n    String string1 = HttpUtil.urlWithForm(\"HttpURLConnection has not been initialized.\", \"L0f]@;/g =DM {\", charset0, true);\n    assertFalse(string1.equals((Object) string0));\n    assertEquals(\"UTF-8\", charset0.toString());\n    assertTrue(charset0.canEncode());\n    assertEquals(\"UTF-8\", charset0.displayName());\n    assertTrue(charset0.isRegistered());\n    assertEquals(\"UTF-8\", charset0.name());\n    assertNotNull(string1);\n    assertEquals(\"HttpURLConnection has not been initialized.?L0f%5D@;/g%20=DM%20%7B\", string1);\n    StreamProgress streamProgress0 = mock(StreamProgress.class, new ViolatedAssumptionAnswer());\n    MockFile mockFile0 = new MockFile(\"HTTP/1.1\", \"HttpURLConnection has not been initialized.\");\n    assertNotNull(mockFile0);\n    MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);\n    assertNotNull(mockPrintStream0);\n    MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, true);\n    assertFalse(mockPrintStream1.equals((Object) mockPrintStream0));\n    assertNotNull(mockPrintStream1);\n    PrintStream printStream0 = mockPrintStream0.append((CharSequence) \"HTTP/1.0\", 2, 2);\n    assertSame(mockPrintStream0, printStream0);\n    assertNotSame(mockPrintStream0, mockPrintStream1);\n    assertSame(printStream0, mockPrintStream0);\n    assertNotSame(printStream0, mockPrintStream1);\n    assertFalse(mockPrintStream0.equals((Object) mockPrintStream1));\n    assertFalse(printStream0.equals((Object) mockPrintStream1));\n    assertEquals(\"D:\\\\DataWarehouse\\\\DataFiles\\\\Involved_repo (1)\\\\Involved_repo_backup\\\\dromara_hutool\\\\hutool-http\\\\HTTP\\\\1.1\", mockFile0.getParent());\n    assertEquals(0L, mockFile0.length());\n    assertEquals(1392409281320L, mockFile0.lastModified());\n    assertTrue(mockFile0.exists());\n    assertFalse(mockFile0.isDirectory());\n    assertEquals(0L, mockFile0.getFreeSpace());\n    assertEquals(0L, mockFile0.getTotalSpace());\n    assertEquals(\"HttpURLConnection has not been initialized.\", mockFile0.getName());\n    assertTrue(mockFile0.canExecute());\n    assertFalse(mockFile0.isHidden());\n    assertEquals(\"D:\\\\DataWarehouse\\\\DataFiles\\\\Involved_repo (1)\\\\Involved_repo_backup\\\\dromara_hutool\\\\hutool-http\\\\HTTP\\\\1.1\\\\HttpURLConnection has not been initialized.\", mockFile0.toString());\n    assertTrue(mockFile0.isAbsolute());\n    assertTrue(mockFile0.canRead());\n    assertTrue(mockFile0.isFile());\n    assertTrue(mockFile0.canWrite());\n    assertEquals(0L, mockFile0.getUsableSpace());\n    assertNotNull(printStream0);\n    mockPrintStream1.print(true);\n    assertSame(mockPrintStream0, printStream0);\n    assertNotSame(mockPrintStream0, mockPrintStream1);\n    assertNotSame(mockPrintStream1, printStream0);\n    assertNotSame(mockPrintStream1, mockPrintStream0);\n    assertFalse(mockPrintStream0.equals((Object) mockPrintStream1));\n    assertFalse(mockPrintStream1.equals((Object) printStream0));\n    assertFalse(mockPrintStream1.equals((Object) mockPrintStream0));\n    assertEquals(\"D:\\\\DataWarehouse\\\\DataFiles\\\\Involved_repo (1)\\\\Involved_repo_backup\\\\dromara_hutool\\\\hutool-http\\\\HTTP\\\\1.1\", mockFile0.getParent());\n    assertEquals(1392409281320L, mockFile0.lastModified());\n    assertTrue(mockFile0.exists());\n    assertFalse(mockFile0.isDirectory());\n    assertEquals(0L, mockFile0.getFreeSpace());\n    assertEquals(0L, mockFile0.getTotalSpace());\n    assertEquals(4L, mockFile0.length());\n    assertEquals(\"HttpURLConnection has not been initialized.\", mockFile0.getName());\n    assertTrue(mockFile0.canExecute());\n    assertFalse(mockFile0.isHidden());\n    assertEquals(\"D:\\\\DataWarehouse\\\\DataFiles\\\\Involved_repo (1)\\\\Involved_repo_backup\\\\dromara_hutool\\\\hutool-http\\\\HTTP\\\\1.1\\\\HttpURLConnection has not been initialized.\", mockFile0.toString());\n    assertTrue(mockFile0.isAbsolute());\n    assertTrue(mockFile0.canRead());\n    assertTrue(mockFile0.isFile());\n    assertTrue(mockFile0.canWrite());\n    assertEquals(0L, mockFile0.getUsableSpace());\n    mockPrintStream1.print(0L);\n    assertSame(mockPrintStream0, printStream0);\n    assertNotSame(mockPrintStream0, mockPrintStream1);\n    assertNotSame(mockPrintStream1, printStream0);\n    assertNotSame(mockPrintStream1, mockPrintStream0);\n    assertFalse(mockPrintStream0.equals((Object) mockPrintStream1));\n    assertFalse(mockPrintStream1.equals((Object) printStream0));\n    assertFalse(mockPrintStream1.equals((Object) mockPrintStream0));\n    assertEquals(\"D:\\\\DataWarehouse\\\\DataFiles\\\\Involved_repo (1)\\\\Involved_repo_backup\\\\dromara_hutool\\\\hutool-http\\\\HTTP\\\\1.1\", mockFile0.getParent());\n    assertEquals(1392409281320L, mockFile0.lastModified());\n    assertTrue(mockFile0.exists());\n    assertFalse(mockFile0.isDirectory());\n    assertEquals(0L, mockFile0.getFreeSpace());\n    assertEquals(0L, mockFile0.getTotalSpace());\n    assertEquals(5L, mockFile0.length());\n    assertEquals(\"HttpURLConnection has not been initialized.\", mockFile0.getName());\n    assertTrue(mockFile0.canExecute());\n    assertFalse(mockFile0.isHidden());\n    assertEquals(\"D:\\\\DataWarehouse\\\\DataFiles\\\\Involved_repo (1)\\\\Involved_repo_backup\\\\dromara_hutool\\\\hutool-http\\\\HTTP\\\\1.1\\\\HttpURLConnection has not been initialized.\", mockFile0.toString());\n    assertTrue(mockFile0.isAbsolute());\n    assertTrue(mockFile0.canRead());\n    assertTrue(mockFile0.isFile());\n    assertTrue(mockFile0.canWrite());\n    assertEquals(0L, mockFile0.getUsableSpace());\n    boolean boolean0 = mockPrintStream1.checkError();\n    assertSame(mockPrintStream0, printStream0);\n    assertNotSame(mockPrintStream0, mockPrintStream1);\n    assertNotSame(mockPrintStream1, printStream0);\n    assertNotSame(mockPrintStream1, mockPrintStream0);\n    assertFalse(mockPrintStream0.equals((Object) mockPrintStream1));\n    assertFalse(mockPrintStream1.equals((Object) printStream0));\n    assertFalse(mockPrintStream1.equals((Object) mockPrintStream0));\n    assertEquals(\"D:\\\\DataWarehouse\\\\DataFiles\\\\Involved_repo (1)\\\\Involved_repo_backup\\\\dromara_hutool\\\\hutool-http\\\\HTTP\\\\1.1\", mockFile0.getParent());\n    assertEquals(1392409281320L, mockFile0.lastModified());\n    assertTrue(mockFile0.exists());\n    assertFalse(mockFile0.isDirectory());\n    assertEquals(0L, mockFile0.getFreeSpace());\n    assertEquals(0L, mockFile0.getTotalSpace());\n    assertEquals(5L, mockFile0.length());\n    assertEquals(\"HttpURLConnection has not been initialized.\", mockFile0.getName());\n    assertTrue(mockFile0.canExecute());\n    assertFalse(mockFile0.isHidden());\n    assertEquals(\"D:\\\\DataWarehouse\\\\DataFiles\\\\Involved_repo (1)\\\\Involved_repo_backup\\\\dromara_hutool\\\\hutool-http\\\\HTTP\\\\1.1\\\\HttpURLConnection has not been initialized.\", mockFile0.toString());\n    assertTrue(mockFile0.isAbsolute());\n    assertTrue(mockFile0.canRead());\n    assertTrue(mockFile0.isFile());\n    assertTrue(mockFile0.canWrite());\n    assertEquals(0L, mockFile0.getUsableSpace());\n    assertFalse(boolean0);\n    boolean boolean1 = true;\n    // Undeclared exception!\n    try {\n        HttpUtil.buildBasicAuth(\"\", (String) null, charset0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n    }\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/text/CharSequenceUtilTest###subPreGbkTest",
        "generated_path": "CharSequenceUtil_subPreGbk.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package cn.hutool.core.text;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.lang.Filter;\nimport cn.hutool.core.lang.func.Func1;\nimport cn.hutool.core.text.CharSequenceUtil;\nimport cn.hutool.core.text.StrBuilder;\nimport cn.hutool.core.util.DesensitizedUtil;\nimport java.io.StringWriter;\nimport java.nio.BufferUnderflowException;\nimport java.nio.ByteBuffer;\nimport java.nio.CharBuffer;\nimport java.nio.charset.Charset;\nimport java.nio.charset.IllegalCharsetNameException;\nimport java.nio.charset.UnsupportedCharsetException;\nimport java.util.Comparator;\nimport java.util.LinkedHashSet;\nimport java.util.List;\nimport java.util.PriorityQueue;\nimport java.util.SortedSet;\nimport java.util.TreeSet;\nimport java.util.Vector;\nimport java.util.function.Function;\nimport java.util.function.Predicate;\nimport java.util.function.UnaryOperator;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\nimport java.util.regex.PatternSyntaxException;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class CharSequenceUtil_subPreGbk extends CharSequenceUtil_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test008() throws Throwable {\n    CharSequenceUtil.emptyIfNull((CharSequence) null);\n    Object[] objectArray0 = new Object[1];\n    objectArray0[0] = (Object) \"\";\n    CharSequenceUtil.format(\"\", objectArray0);\n    CharSequenceUtil.subPreGbk((CharSequence) \"\", 0, false);\n    CharSequenceUtil.toCamelCase((CharSequence) \"\", '~');\n    CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) \"\");\n    CharSequenceUtil.subBetweenAll((CharSequence) charBuffer0, (CharSequence) \"\");\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/net/NetUtilTest###getLocalhostStrTest",
        "generated_path": "NetUtil_getLocalhostStr.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package cn.hutool.core.net;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.lang.Filter;\nimport cn.hutool.core.net.NetUtil;\nimport cn.hutool.core.net.PassAuth;\nimport cn.hutool.core.net.UserPassAuthenticator;\nimport java.math.BigInteger;\nimport java.net.Authenticator;\nimport java.net.Inet6Address;\nimport java.net.InetAddress;\nimport java.net.InetSocketAddress;\nimport java.net.NetworkInterface;\nimport java.nio.ByteBuffer;\nimport java.util.LinkedHashSet;\nimport java.util.Set;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.Future;\nimport java.util.concurrent.TimeUnit;\nimport java.util.function.Consumer;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.mock.java.net.MockInetAddress;\nimport org.evosuite.runtime.mock.java.net.MockInetSocketAddress;\nimport org.evosuite.runtime.mock.java.net.MockNetworkInterface;\nimport org.evosuite.runtime.mock.java.util.MockRandom;\nimport org.evosuite.runtime.testdata.EvoSuiteLocalAddress;\nimport org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;\nimport org.evosuite.runtime.testdata.NetworkHandling;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class NetUtil_getLocalhostStr extends NetUtil_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    NetUtil.getLocalhostStr();\n    NetUtil.localIps();\n    NetUtil.getUsableLocalPort(1544);\n    NetUtil.isInnerIP(\"192.168.1.42\");\n    InetAddress inetAddress0 = NetUtil.getLocalhost();\n    NetUtil.getHardwareAddress(inetAddress0);\n    NetUtil.createAddress(\"*\", 1544);\n    NetUtil.localIpv6s();\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/ReUtilTest###replaceAllTest",
        "generated_path": "ReUtil_replaceAll.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package cn.hutool.core.util;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.lang.func.Func1;\nimport cn.hutool.core.lang.mutable.Mutable;\nimport cn.hutool.core.lang.mutable.MutableObj;\nimport cn.hutool.core.util.ReUtil;\nimport java.nio.CharBuffer;\nimport java.util.LinkedHashSet;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.function.Consumer;\nimport java.util.function.Predicate;\nimport java.util.regex.MatchResult;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\nimport java.util.regex.PatternSyntaxException;\nimport java.util.stream.Stream;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class ReUtil_replaceAll extends ReUtil_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test007() throws Throwable {\n    Pattern pattern0 = Pattern.compile(\"\", 0);\n    pattern0.asPredicate();\n    LinkedList<String> linkedList0 = new LinkedList<String>();\n    ReUtil.findAll(pattern0, (CharSequence) \"\", 0, linkedList0);\n    ReUtil.contains(\"[\\u2E80-\\u2EFF\\u2F00-\\u2FDF\\u31C0-\\u31EF\\u3400-\\u4DBF\\u4E00-\\u9FFF\\uF900-\\uFAFF\\uD840\\uDC00-\\uD869\\uDEDF\\uD869\\uDF00-\\uD86D\\uDF3F\\uD86D\\uDF40-\\uD86E\\uDC1F\\uD86E\\uDC20-\\uD873\\uDEAF\\uD87E\\uDC00-\\uD87E\\uDE1F]\", (CharSequence) \"[\\u2E80-\\u2EFF\\u2F00-\\u2FDF\\u31C0-\\u31EF\\u3400-\\u4DBF\\u4E00-\\u9FFF\\uF900-\\uFAFF\\uD840\\uDC00-\\uD869\\uDEDF\\uD869\\uDF00-\\uD86D\\uDF3F\\uD86D\\uDF40-\\uD86E\\uDC1F\\uD86E\\uDC20-\\uD873\\uDEAF\\uD87E\\uDC00-\\uD87E\\uDE1F]\");\n    ReUtil.extractMulti(pattern0, (CharSequence) \"\", \"\");\n    ReUtil.indexOf(\"\", (CharSequence) \"[\\u2E80-\\u2EFF\\u2F00-\\u2FDF\\u31C0-\\u31EF\\u3400-\\u4DBF\\u4E00-\\u9FFF\\uF900-\\uFAFF\\uD840\\uDC00-\\uD869\\uDEDF\\uD869\\uDF00-\\uD86D\\uDF3F\\uD86D\\uDF40-\\uD86E\\uDC1F\\uD86E\\uDC20-\\uD873\\uDEAF\\uD87E\\uDC00-\\uD87E\\uDE1F]\");\n    MutableObj<CharSequence> mutableObj0 = new MutableObj<CharSequence>();\n    Pattern pattern1 = Pattern.compile(\"[\\u2E80-\\u2EFF\\u2F00-\\u2FDF\\u31C0-\\u31EF\\u3400-\\u4DBF\\u4E00-\\u9FFF\\uF900-\\uFAFF\\uD840\\uDC00-\\uD869\\uDEDF\\uD869\\uDF00-\\uD86D\\uDF3F\\uD86D\\uDF40-\\uD86E\\uDC1F\\uD86E\\uDC20-\\uD873\\uDEAF\\uD87E\\uDC00-\\uD87E\\uDE1F]\");\n    ReUtil.extractMultiAndDelPre(\"\", (Mutable<CharSequence>) mutableObj0, (String) null);\n    ReUtil.lastIndexOf(\"N6  aVnFY\", (CharSequence) \"N6  aVnFY\");\n    ReUtil.contains(pattern0, (CharSequence) \"[\\u2E80-\\u2EFF\\u2F00-\\u2FDF\\u31C0-\\u31EF\\u3400-\\u4DBF\\u4E00-\\u9FFF\\uF900-\\uFAFF\\uD840\\uDC00-\\uD869\\uDEDF\\uD869\\uDF00-\\uD86D\\uDF3F\\uD86D\\uDF40-\\uD86E\\uDC1F\\uD86E\\uDC20-\\uD873\\uDEAF\\uD87E\\uDC00-\\uD87E\\uDE1F]\");\n    ReUtil.delLast(pattern0, (CharSequence) null);\n    ReUtil.getAllGroupNames(pattern0, \"N6  aVnFY\");\n    ReUtil.delLast(\"N6  aVnFY\", (CharSequence) \"N6  aVnFY\");\n    ReUtil.extractMulti(pattern1, (CharSequence) \"\", \"V.Ypg/DKlN\");\n    Consumer<Matcher> consumer0 = (Consumer<Matcher>) mock(Consumer.class, new ViolatedAssumptionAnswer());\n    ReUtil.get(pattern1, (CharSequence) \"\", consumer0);\n    ReUtil.getAllGroupNames(pattern1, \"V.Ypg/DKlN\");\n    ReUtil.replaceAll((CharSequence) \"N6  aVnFY\", \"\", \".uKK3ujg-u@.o%P7\");\n    ReUtil.get(pattern0, (CharSequence) null, \"gvp\\\"\");\n    ReUtil.getGroup0(\"\", (CharSequence) null);\n    ReUtil.isMatch(pattern0, (CharSequence) \"[\\u2E80-\\u2EFF\\u2F00-\\u2FDF\\u31C0-\\u31EF\\u3400-\\u4DBF\\u4E00-\\u9FFF\\uF900-\\uFAFF\\uD840\\uDC00-\\uD869\\uDEDF\\uD869\\uDF00-\\uD86D\\uDF3F\\uD86D\\uDF40-\\uD86E\\uDC1F\\uD86E\\uDC20-\\uD873\\uDEAF\\uD87E\\uDC00-\\uD87E\\uDE1F]\");\n    ReUtil.findAll(\"\", (CharSequence) null, 0);\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/text/CharSequenceUtilTest###startWithTest",
        "generated_path": "CharSequenceUtil_startWith.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package cn.hutool.core.text;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.lang.Filter;\nimport cn.hutool.core.lang.func.Func1;\nimport cn.hutool.core.text.CharSequenceUtil;\nimport cn.hutool.core.text.StrBuilder;\nimport cn.hutool.core.util.DesensitizedUtil;\nimport java.io.StringWriter;\nimport java.nio.BufferUnderflowException;\nimport java.nio.ByteBuffer;\nimport java.nio.CharBuffer;\nimport java.nio.charset.Charset;\nimport java.nio.charset.IllegalCharsetNameException;\nimport java.nio.charset.UnsupportedCharsetException;\nimport java.util.Comparator;\nimport java.util.LinkedHashSet;\nimport java.util.List;\nimport java.util.PriorityQueue;\nimport java.util.SortedSet;\nimport java.util.TreeSet;\nimport java.util.Vector;\nimport java.util.function.Function;\nimport java.util.function.Predicate;\nimport java.util.function.UnaryOperator;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\nimport java.util.regex.PatternSyntaxException;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class CharSequenceUtil_startWith extends CharSequenceUtil_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test100() throws Throwable {\n    String string0 = CharSequenceUtil.EMPTY;\n    Filter<Character> filter0 = (Filter<Character>) mock(Filter.class, new ViolatedAssumptionAnswer());\n    CharSequenceUtil.filter(\"\", filter0);\n    CharSequenceUtil.replace((CharSequence) \"\", 0, (CharSequence) \"\", (CharSequence) \"\", false);\n    CharSequenceUtil.startWith((CharSequence) \"\", (CharSequence) \"\", false, true);\n    CharSequenceUtil.splitToLong((CharSequence) \"\", 'v');\n    CharSequenceUtil.equals((CharSequence) \"\", (CharSequence) \"\");\n    CharSequenceUtil.bytes((CharSequence) \"\", \"\");\n    CharSequence[] charSequenceArray0 = new CharSequence[2];\n    charSequenceArray0[0] = (CharSequence) \"\";\n    charSequenceArray0[1] = (CharSequence) \"\";\n    CharSequenceUtil.endWithAny(\"\", charSequenceArray0);\n    CharSequenceUtil.splitToLong((CharSequence) \"\", '{');\n    CharSequenceUtil.totalLength(charSequenceArray0);\n    CharSequenceUtil.wrapAll(\"\", charSequenceArray0[0], charSequenceArray0);\n    CharSequence[] charSequenceArray1 = new CharSequence[4];\n    charSequenceArray1[0] = (CharSequence) \"\";\n    charSequenceArray1[1] = (CharSequence) \"\";\n    charSequenceArray1[2] = (CharSequence) \"\";\n    charSequenceArray1[3] = (CharSequence) \"\";\n    CharSequenceUtil.builder(charSequenceArray1);\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/img/ImgUtilTest###createImageTest",
        "generated_path": "ImgUtil_createImage.java",
        "Compile_result": 1,
        "Test_result": 0,
        "Gen_Test": "package cn.hutool.core.img;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.img.ImgUtil;\nimport cn.hutool.core.io.resource.MultiResource;\nimport cn.hutool.core.io.resource.Resource;\nimport cn.hutool.core.io.resource.StringResource;\nimport cn.hutool.core.io.resource.UrlResource;\nimport java.awt.Color;\nimport java.awt.Font;\nimport java.awt.HeadlessException;\nimport java.awt.Image;\nimport java.awt.Point;\nimport java.awt.Rectangle;\nimport java.awt.geom.AffineTransform;\nimport java.awt.image.BufferedImage;\nimport java.io.BufferedInputStream;\nimport java.io.BufferedOutputStream;\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.DataInputStream;\nimport java.io.File;\nimport java.io.InputStream;\nimport java.io.ObjectOutputStream;\nimport java.io.OutputStream;\nimport java.io.PipedOutputStream;\nimport java.io.PrintStream;\nimport java.net.URL;\nimport java.nio.charset.Charset;\nimport java.util.LinkedHashSet;\nimport java.util.Random;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.Future;\nimport java.util.concurrent.TimeUnit;\nimport javax.imageio.ImageReader;\nimport javax.imageio.ImageWriter;\nimport javax.imageio.stream.ImageInputStream;\nimport javax.imageio.stream.ImageOutputStream;\nimport javax.imageio.stream.MemoryCacheImageOutputStream;\nimport javax.swing.DebugGraphics;\nimport javax.swing.JEditorPane;\nimport javax.swing.JInternalFrame;\nimport javax.swing.border.TitledBorder;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.io.MockFile;\nimport org.evosuite.runtime.mock.java.io.MockFileInputStream;\nimport org.evosuite.runtime.mock.java.io.MockFileOutputStream;\nimport org.evosuite.runtime.mock.java.io.MockPrintStream;\nimport org.evosuite.runtime.mock.java.net.MockURL;\nimport org.evosuite.runtime.mock.java.util.MockRandom;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class ImgUtil_createImage extends ImgUtil_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void ImgUtil_createImage() throws Throwable {\n    Color color0 = Color.BLACK;\n    // Undeclared exception!\n    try {\n        ImgUtil.createImage(\"x.1]&(5\\\"M\", (Font) null, color0, color0, (-3209));\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        //\n        // no message in exception (getMessage() returned null)\n        //\n        verifyException(\"cn.hutool.core.img.ImgUtil\", e);\n    }\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-setting/src/test/java/cn/hutool/setting/yaml/YamlUtilTest###dumpTest",
        "generated_path": "YamlUtil_dump.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package cn.hutool.setting.yaml;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.lang.Dict;\nimport cn.hutool.setting.yaml.YamlUtil;\nimport java.io.BufferedInputStream;\nimport java.io.ByteArrayInputStream;\nimport java.io.InputStream;\nimport java.io.PipedInputStream;\nimport java.io.PipedReader;\nimport java.io.PipedWriter;\nimport java.io.PushbackInputStream;\nimport java.io.Reader;\nimport java.io.SequenceInputStream;\nimport java.io.StringReader;\nimport java.io.Writer;\nimport java.util.Enumeration;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.junit.runner.RunWith;\nimport org.yaml.snakeyaml.DumperOptions;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class YamlUtil_dump extends YamlUtil_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void YamlUtil_dump() throws Throwable {\n    byte[] byteArray0 = new byte[3];\n    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);\n    PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);\n    // Undeclared exception!\n    try {\n        YamlUtil.dump((Object) pushbackInputStream0, (Writer) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        //\n        // Writer must be provided.\n        //\n        verifyException(\"org.yaml.snakeyaml.emitter.Emitter\", e);\n    }\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/XmlUtilTest###readBySaxTest",
        "generated_path": "XmlUtil_readBySax.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package cn.hutool.core.util;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.util.XmlUtil;\nimport com.sun.org.apache.xerces.internal.dom.DocumentImpl;\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.File;\nimport java.io.FileDescriptor;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.io.PipedInputStream;\nimport java.io.PipedOutputStream;\nimport java.io.PushbackInputStream;\nimport java.io.Reader;\nimport java.io.StringReader;\nimport java.io.StringWriter;\nimport java.io.Writer;\nimport java.nio.charset.IllegalCharsetNameException;\nimport java.nio.charset.UnsupportedCharsetException;\nimport java.sql.BatchUpdateException;\nimport java.sql.ClientInfoStatus;\nimport java.sql.DataTruncation;\nimport java.sql.SQLClientInfoException;\nimport java.sql.SQLDataException;\nimport java.sql.SQLException;\nimport java.sql.SQLFeatureNotSupportedException;\nimport java.sql.SQLIntegrityConstraintViolationException;\nimport java.sql.SQLNonTransientConnectionException;\nimport java.sql.SQLNonTransientException;\nimport java.sql.SQLSyntaxErrorException;\nimport java.sql.SQLTransactionRollbackException;\nimport java.sql.SQLTransientConnectionException;\nimport java.sql.SQLTransientException;\nimport java.sql.SQLWarning;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.Future;\nimport java.util.concurrent.TimeUnit;\nimport javax.imageio.metadata.IIOMetadataNode;\nimport javax.xml.namespace.QName;\nimport javax.xml.parsers.DocumentBuilder;\nimport javax.xml.parsers.DocumentBuilderFactory;\nimport javax.xml.transform.Result;\nimport javax.xml.transform.Source;\nimport javax.xml.transform.dom.DOMResult;\nimport javax.xml.transform.sax.SAXResult;\nimport javax.xml.transform.sax.SAXSource;\nimport javax.xml.transform.stream.StreamResult;\nimport javax.xml.transform.stream.StreamSource;\nimport javax.xml.xpath.XPath;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.io.MockFile;\nimport org.evosuite.runtime.mock.java.io.MockFileInputStream;\nimport org.evosuite.runtime.mock.java.io.MockFileOutputStream;\nimport org.evosuite.runtime.mock.java.io.MockPrintStream;\nimport org.evosuite.runtime.mock.java.io.MockPrintWriter;\nimport org.evosuite.runtime.testdata.EvoSuiteFile;\nimport org.evosuite.runtime.testdata.FileSystemHandling;\nimport org.junit.runner.RunWith;\nimport org.w3c.dom.DOMException;\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Element;\nimport org.w3c.dom.Node;\nimport org.w3c.dom.NodeList;\nimport org.xml.sax.ContentHandler;\nimport org.xml.sax.InputSource;\nimport org.xml.sax.XMLReader;\nimport org.xml.sax.ext.DefaultHandler2;\nimport org.xml.sax.helpers.DefaultHandler;\nimport org.xml.sax.helpers.XMLFilterImpl;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class XmlUtil_readBySax extends XmlUtil_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test029() throws Throwable {\n    XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl((XMLReader) null);\n    assertNotNull(xMLFilterImpl0);\n    // Undeclared exception!\n    try {\n        XmlUtil.readBySax((InputSource) null, (ContentHandler) xMLFilterImpl0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n    }\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/TypeUtilTest###getParamTypeTest",
        "generated_path": "TypeUtil_getParamType.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package cn.hutool.core.util;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.lang.ParameterizedTypeImpl;\nimport cn.hutool.core.util.TypeUtil;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.ParameterizedType;\nimport java.lang.reflect.Type;\nimport java.util.Map;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class TypeUtil_getParamType extends TypeUtil_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test24() throws Throwable {\n    Type type0 = TypeUtil.getParamType((Method) null, 8);\n    assertNull(type0);\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/io/FileUtilTest###getParentTest",
        "generated_path": "FileUtil_getParent.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package cn.hutool.core.io;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.io.FileUtil;\nimport cn.hutool.core.io.LineHandler;\nimport cn.hutool.core.io.file.FileMode;\nimport cn.hutool.core.io.file.FileReader;\nimport cn.hutool.core.io.file.LineSeparator;\nimport cn.hutool.core.io.file.PathUtil;\nimport cn.hutool.core.io.file.Tailer;\nimport java.io.BufferedInputStream;\nimport java.io.BufferedOutputStream;\nimport java.io.BufferedWriter;\nimport java.io.ByteArrayInputStream;\nimport java.io.DataInputStream;\nimport java.io.DataOutputStream;\nimport java.io.File;\nimport java.io.FileDescriptor;\nimport java.io.FileFilter;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.io.PipedInputStream;\nimport java.io.PipedOutputStream;\nimport java.io.PrintStream;\nimport java.io.PushbackInputStream;\nimport java.io.RandomAccessFile;\nimport java.io.SequenceInputStream;\nimport java.net.URI;\nimport java.net.URL;\nimport java.net.URLStreamHandler;\nimport java.nio.ByteBuffer;\nimport java.nio.CharBuffer;\nimport java.nio.charset.Charset;\nimport java.nio.charset.IllegalCharsetNameException;\nimport java.nio.charset.UnsupportedCharsetException;\nimport java.nio.file.InvalidPathException;\nimport java.nio.file.Path;\nimport java.nio.file.StandardCopyOption;\nimport java.util.Collection;\nimport java.util.Comparator;\nimport java.util.Enumeration;\nimport java.util.HashMap;\nimport java.util.LinkedHashSet;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.Future;\nimport java.util.concurrent.TimeUnit;\nimport java.util.function.BiConsumer;\nimport java.util.function.Consumer;\nimport java.util.function.Predicate;\nimport java.util.zip.Adler32;\nimport java.util.zip.Checksum;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.mock.java.io.MockFile;\nimport org.evosuite.runtime.mock.java.io.MockFileInputStream;\nimport org.evosuite.runtime.mock.java.io.MockFileOutputStream;\nimport org.evosuite.runtime.mock.java.io.MockPrintStream;\nimport org.evosuite.runtime.mock.java.io.MockRandomAccessFile;\nimport org.evosuite.runtime.mock.java.net.MockURI;\nimport org.evosuite.runtime.mock.java.net.MockURL;\nimport org.evosuite.runtime.testdata.EvoSuiteFile;\nimport org.evosuite.runtime.testdata.EvoSuiteURL;\nimport org.evosuite.runtime.testdata.FileSystemHandling;\nimport org.evosuite.runtime.testdata.NetworkHandling;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class FileUtil_getParent extends FileUtil_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void FileUtil_getParent() throws Throwable {\n    NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, \"-%GC37\");\n    FileUtil.getWebRoot();\n    FileUtil.getParent((File) null, 0);\n    Charset charset0 = Charset.defaultCharset();\n    // Undeclared exception!\n    try {\n        FileUtil.getReader((File) null, charset0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        //\n        // no message in exception (getMessage() returned null)\n        //\n        verifyException(\"org.evosuite.runtime.mock.java.io.MockFileInputStream\", e);\n    }\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-crypto/src/test/java/cn/hutool/crypto/KeyUtilTest###generateKeyPairTest",
        "generated_path": "KeyUtil_generateKeyPair.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package cn.hutool.crypto;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.crypto.KeyUtil;\nimport java.io.File;\nimport java.io.InputStream;\nimport java.io.PipedInputStream;\nimport java.io.PipedOutputStream;\nimport java.io.SequenceInputStream;\nimport java.math.BigInteger;\nimport java.security.Key;\nimport java.security.KeyStore;\nimport java.security.PrivateKey;\nimport java.security.PublicKey;\nimport java.security.SecureRandom;\nimport java.security.spec.AlgorithmParameterSpec;\nimport java.security.spec.DSAPrivateKeySpec;\nimport java.security.spec.KeySpec;\nimport java.security.spec.MGF1ParameterSpec;\nimport java.security.spec.RSAKeyGenParameterSpec;\nimport java.security.spec.RSAPublicKeySpec;\nimport java.util.Enumeration;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.SecretKeySpec;\nimport org.bouncycastle.asn1.ASN1BitString;\nimport org.bouncycastle.asn1.BERBitString;\nimport org.bouncycastle.asn1.DERBitString;\nimport org.bouncycastle.asn1.DLBitString;\nimport org.bouncycastle.crypto.PasswordConverter;\nimport org.bouncycastle.jcajce.PBKDF2KeyWithParameters;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.mock.java.io.MockFile;\nimport org.evosuite.runtime.mock.java.security.MockSecureRandom;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class KeyUtil_generateKeyPair extends KeyUtil_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void KeyUtil_generateKeyPair() throws Throwable {\n    // Undeclared exception!\n    try {\n        KeyUtil.generateKeyPair((String) null);\n        fail(\"Expecting exception: IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n        //\n        // algorithm must be not null !\n        //\n        verifyException(\"cn.hutool.core.lang.Assert\", e);\n    }\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/ReUtilTest###delAllTest",
        "generated_path": "ReUtil_delAll.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package cn.hutool.core.util;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.lang.func.Func1;\nimport cn.hutool.core.lang.mutable.Mutable;\nimport cn.hutool.core.lang.mutable.MutableObj;\nimport cn.hutool.core.util.ReUtil;\nimport java.nio.CharBuffer;\nimport java.util.LinkedHashSet;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.function.Consumer;\nimport java.util.function.Predicate;\nimport java.util.regex.MatchResult;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\nimport java.util.regex.PatternSyntaxException;\nimport java.util.stream.Stream;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class ReUtil_delAll extends ReUtil_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test012() throws Throwable {\n    String string0 = ReUtil.RE_CHINESES;\n    Func1<Matcher, String> func1_0 = (Func1<Matcher, String>) mock(Func1.class, new ViolatedAssumptionAnswer());\n    ReUtil.findAll((String) null, (CharSequence) null, 43);\n    ReUtil.replaceAll((CharSequence) null, \"[\\u2E80-\\u2EFF\\u2F00-\\u2FDF\\u31C0-\\u31EF\\u3400-\\u4DBF\\u4E00-\\u9FFF\\uF900-\\uFAFF\\uD840\\uDC00-\\uD869\\uDEDF\\uD869\\uDF00-\\uD86D\\uDF3F\\uD86D\\uDF40-\\uD86E\\uDC1F\\uD86E\\uDC20-\\uD873\\uDEAF\\uD87E\\uDC00-\\uD87E\\uDE1F]+\", func1_0);\n    ReUtil.delLast(\"[Assertion failed] - this map must not be empty; it must contain at least one entry\", (CharSequence) \"[\\u2E80-\\u2EFF\\u2F00-\\u2FDF\\u31C0-\\u31EF\\u3400-\\u4DBF\\u4E00-\\u9FFF\\uF900-\\uFAFF\\uD840\\uDC00-\\uD869\\uDEDF\\uD869\\uDF00-\\uD86D\\uDF3F\\uD86D\\uDF40-\\uD86E\\uDC1F\\uD86E\\uDC20-\\uD873\\uDEAF\\uD87E\\uDC00-\\uD87E\\uDE1F]+\");\n    ReUtil.get(\"[Assertion failed] - this map must not be empty; it must contain at least one entry\", (CharSequence) \"[\\u2E80-\\u2EFF\\u2F00-\\u2FDF\\u31C0-\\u31EF\\u3400-\\u4DBF\\u4E00-\\u9FFF\\uF900-\\uFAFF\\uD840\\uDC00-\\uD869\\uDEDF\\uD869\\uDF00-\\uD86D\\uDF3F\\uD86D\\uDF40-\\uD86E\\uDC1F\\uD86E\\uDC20-\\uD873\\uDEAF\\uD87E\\uDC00-\\uD87E\\uDE1F]+\", (-853));\n    Pattern pattern0 = Pattern.compile(\"[\\u2E80-\\u2EFF\\u2F00-\\u2FDF\\u31C0-\\u31EF\\u3400-\\u4DBF\\u4E00-\\u9FFF\\uF900-\\uFAFF\\uD840\\uDC00-\\uD869\\uDEDF\\uD869\\uDF00-\\uD86D\\uDF3F\\uD86D\\uDF40-\\uD86E\\uDC1F\\uD86E\\uDC20-\\uD873\\uDEAF\\uD87E\\uDC00-\\uD87E\\uDE1F]+\", 0);\n    ReUtil.replaceFirst(pattern0, \"[\\u2E80-\\u2EFF\\u2F00-\\u2FDF\\u31C0-\\u31EF\\u3400-\\u4DBF\\u4E00-\\u9FFF\\uF900-\\uFAFF\\uD840\\uDC00-\\uD869\\uDEDF\\uD869\\uDF00-\\uD86D\\uDF3F\\uD86D\\uDF40-\\uD86E\\uDC1F\\uD86E\\uDC20-\\uD873\\uDEAF\\uD87E\\uDC00-\\uD87E\\uDE1F]+\", \"[\\u2E80-\\u2EFF\\u2F00-\\u2FDF\\u31C0-\\u31EF\\u3400-\\u4DBF\\u4E00-\\u9FFF\\uF900-\\uFAFF\\uD840\\uDC00-\\uD869\\uDEDF\\uD869\\uDF00-\\uD86D\\uDF3F\\uD86D\\uDF40-\\uD86E\\uDC1F\\uD86E\\uDC20-\\uD873\\uDEAF\\uD87E\\uDC00-\\uD87E\\uDE1F]+\");\n    ReUtil.findAllGroup1((String) null, (CharSequence) \"[\\u2E80-\\u2EFF\\u2F00-\\u2FDF\\u31C0-\\u31EF\\u3400-\\u4DBF\\u4E00-\\u9FFF\\uF900-\\uFAFF\\uD840\\uDC00-\\uD869\\uDEDF\\uD869\\uDF00-\\uD86D\\uDF3F\\uD86D\\uDF40-\\uD86E\\uDC1F\\uD86E\\uDC20-\\uD873\\uDEAF\\uD87E\\uDC00-\\uD87E\\uDE1F]+\");\n    Func1<Matcher, String> func1_1 = (Func1<Matcher, String>) mock(Func1.class, new ViolatedAssumptionAnswer());\n    ReUtil.replaceAll((CharSequence) null, pattern0, func1_1);\n    ReUtil.delAll(\"[\\u2E80-\\u2EFF\\u2F00-\\u2FDF\\u31C0-\\u31EF\\u3400-\\u4DBF\\u4E00-\\u9FFF\\uF900-\\uFAFF\\uD840\\uDC00-\\uD869\\uDEDF\\uD869\\uDF00-\\uD86D\\uDF3F\\uD86D\\uDF40-\\uD86E\\uDC1F\\uD86E\\uDC20-\\uD873\\uDEAF\\uD87E\\uDC00-\\uD87E\\uDE1F]+\", (CharSequence) \"[[\\u2E80-\\u2EFF\\u2F00-\\u2FDF\\u31C0-\\u31EF\\u3400-\\u4DBF\\u4E00-\\u9FFF\\uF900-\\uFAFF\\uD840\\uDC00-\\uD869\\uDEDF\\uD869\\uDF00-\\uD86D\\uDF3F\\uD86D\\uDF40-\\uD86E\\uDC1F\\uD86E\\uDC20-\\uD873\\uDEAF\\uD87E\\uDC00-\\uD87E\\uDE1F]+-\\u2EFF\\u2F00-\\u2FDF\\u31C0-\\u31EF\\u3400-\\u4DBF\\u4E00-\\u9FFF\\uF900-\\uFAFF\\uD840\\uDC00-\\uD869\\uDEDF\\uD869\\uDF00-\\uD86D\\uDF3F\\uD86D\\uDF40-\\uD86E\\uDC1F\\uD86E\\uDC20-\\uD873\\uDEAF\\uD87E\\uDC00-\\uD87E\\uDE1F]+\");\n    ReUtil.findAllGroup1((String) null, (CharSequence) \"[\\u2E80-\\u2EFF\\u2F00-\\u2FDF\\u31C0-\\u31EF\\u3400-\\u4DBF\\u4E00-\\u9FFF\\uF900-\\uFAFF\\uD840\\uDC00-\\uD869\\uDEDF\\uD869\\uDF00-\\uD86D\\uDF3F\\uD86D\\uDF40-\\uD86E\\uDC1F\\uD86E\\uDC20-\\uD873\\uDEAF\\uD87E\\uDC00-\\uD87E\\uDE1F]+\");\n    String string1 = ReUtil.RE_CHINESES;\n    ReUtil.getAllGroups(pattern0, (CharSequence) \"[\\u2E80-\\u2EFF\\u2F00-\\u2FDF\\u31C0-\\u31EF\\u3400-\\u4DBF\\u4E00-\\u9FFF\\uF900-\\uFAFF\\uD840\\uDC00-\\uD869\\uDEDF\\uD869\\uDF00-\\uD86D\\uDF3F\\uD86D\\uDF40-\\uD86E\\uDC1F\\uD86E\\uDC20-\\uD873\\uDEAF\\uD87E\\uDC00-\\uD87E\\uDE1F]+\", false);\n    ReUtil.getFirstNumber(\"[[\\u2E80-\\u2EFF\\u2F00-\\u2FDF\\u31C0-\\u31EF\\u3400-\\u4DBF\\u4E00-\\u9FFF\\uF900-\\uFAFF\\uD840\\uDC00-\\uD869\\uDEDF\\uD869\\uDF00-\\uD86D\\uDF3F\\uD86D\\uDF40-\\uD86E\\uDC1F\\uD86E\\uDC20-\\uD873\\uDEAF\\uD87E\\uDC00-\\uD87E\\uDE1F]+-\\u2EFF\\u2F00-\\u2FDF\\u31C0-\\u31EF\\u3400-\\u4DBF\\u4E00-\\u9FFF\\uF900-\\uFAFF\\uD840\\uDC00-\\uD869\\uDEDF\\uD869\\uDF00-\\uD86D\\uDF3F\\uD86D\\uDF40-\\uD86E\\uDC1F\\uD86E\\uDC20-\\uD873\\uDEAF\\uD87E\\uDC00-\\uD87E\\uDE1F]+\");\n    ReUtil.contains(pattern0, (CharSequence) null);\n    ReUtil.delAll(pattern0, (CharSequence) null);\n    ReUtil.escape('1');\n    ReUtil.delPre(\"\", (CharSequence) \"[\\u2E80-\\u2EFF\\u2F00-\\u2FDF\\u31C0-\\u31EF\\u3400-\\u4DBF\\u4E00-\\u9FFF\\uF900-\\uFAFF\\uD840\\uDC00-\\uD869\\uDEDF\\uD869\\uDF00-\\uD86D\\uDF3F\\uD86D\\uDF40-\\uD86E\\uDC1F\\uD86E\\uDC20-\\uD873\\uDEAF\\uD87E\\uDC00-\\uD87E\\uDE1F]+\");\n    ReUtil.isMatch(\"cn.hutool.core.annotation.AnnotationUtilTest$TargetClass\", (CharSequence) \"[\\u2E80-\\u2EFF\\u2F00-\\u2FDF\\u31C0-\\u31EF\\u3400-\\u4DBF\\u4E00-\\u9FFF\\uF900-\\uFAFF\\uD840\\uDC00-\\uD869\\uDEDF\\uD869\\uDF00-\\uD86D\\uDF3F\\uD86D\\uDF40-\\uD86E\\uDC1F\\uD86E\\uDC20-\\uD873\\uDEAF\\uD87E\\uDC00-\\uD87E\\uDE1F]+\");\n    ReUtil.findAllGroup1(pattern0, (CharSequence) \"cn.hutool.core.annotation.AnnotationUtilTest$TargetClass\");\n    ReUtil.indexOf((String) null, (CharSequence) \"cn.hutool.core.annotation.AnnotationUtilTest$TargetClass\");\n    ReUtil.getAllGroups(pattern0, (CharSequence) \"[[-----------]+-----------]+\", false, true);\n    ReUtil.findAllGroup1(pattern0, (CharSequence) null);\n    ReUtil.extractMulti((String) null, (CharSequence) \"[\\u2E80-\\u2EFF\\u2F00-\\u2FDF\\u31C0-\\u31EF\\u3400-\\u4DBF\\u4E00-\\u9FFF\\uF900-\\uFAFF\\uD840\\uDC00-\\uD869\\uDEDF\\uD869\\uDF00-\\uD86D\\uDF3F\\uD86D\\uDF40-\\uD86E\\uDC1F\\uD86E\\uDC20-\\uD873\\uDEAF\\uD87E\\uDC00-\\uD87E\\uDE1F]+\", (String) null);\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/NumberUtilTest###equalsTest",
        "generated_path": "NumberUtil_equals.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package cn.hutool.core.util;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.util.NumberUtil;\nimport java.math.BigDecimal;\nimport java.math.BigInteger;\nimport java.math.MathContext;\nimport java.math.RoundingMode;\nimport java.text.DecimalFormat;\nimport java.text.DecimalFormatSymbols;\nimport java.util.Collection;\nimport java.util.LinkedHashSet;\nimport java.util.LinkedList;\nimport java.util.function.Consumer;\nimport java.util.function.UnaryOperator;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.Random;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.mock.java.util.MockRandom;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class NumberUtil_equals extends NumberUtil_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test016() throws Throwable {\n    NumberUtil.equals((-872.04), 1260.1214);\n    Long[] longArray0 = new Long[5];\n    Long long0 = new Long(0L);\n    longArray0[0] = long0;\n    Long long1 = NumberUtil.parseLong(\"N4=YV\", long0);\n    longArray0[1] = long1;\n    Long long2 = new Long((-2164L));\n    longArray0[2] = long2;\n    Long.getLong(\"\");\n    Long long3 = new Long(6227020800L);\n    longArray0[3] = long3;\n    Long long4 = new Long(0L);\n    Long long5 = new Long((long) longArray0[3]);\n    Long.getLong(\"==ift6))neO5OJpmf\", long5);\n    longArray0[4] = long4;\n    Long long6 = NumberUtil.max(longArray0);\n    Long.min(0L, 606L);\n    NumberUtil.div((double) 6227020800L, 1.0);\n    NumberUtil.toStr((Number) long6);\n    NumberUtil.sub((double) 0L, (double) 0L);\n    NumberUtil.sub((Number[]) longArray0);\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/ZipUtilTest###unzipTest",
        "generated_path": "ZipUtil_unzip.java",
        "Compile_result": 1,
        "Test_result": 0,
        "Gen_Test": "package cn.hutool.core.util;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.io.resource.BytesResource;\nimport cn.hutool.core.io.resource.Resource;\nimport cn.hutool.core.util.ZipUtil;\nimport java.io.BufferedInputStream;\nimport java.io.ByteArrayInputStream;\nimport java.io.File;\nimport java.io.FileDescriptor;\nimport java.io.FileFilter;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.io.PipedInputStream;\nimport java.io.PipedOutputStream;\nimport java.nio.charset.Charset;\nimport java.nio.charset.IllegalCharsetNameException;\nimport java.nio.charset.UnsupportedCharsetException;\nimport java.nio.file.CopyOption;\nimport java.nio.file.Path;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.Future;\nimport java.util.concurrent.TimeUnit;\nimport java.util.function.Consumer;\nimport java.util.zip.ZipEntry;\nimport java.util.zip.ZipFile;\nimport java.util.zip.ZipInputStream;\nimport java.util.zip.ZipOutputStream;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.mock.java.io.MockFile;\nimport org.evosuite.runtime.mock.java.io.MockFileInputStream;\nimport org.evosuite.runtime.testdata.EvoSuiteFile;\nimport org.evosuite.runtime.testdata.FileSystemHandling;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class ZipUtil_unzip extends ZipUtil_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test003() throws Throwable {\n    byte[] byteArray0 = new byte[5];\n    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-3229), (byte) 0);\n    File file0 = MockFile.createTempFile(\"d30:$\", \"O!&T+JR,Y_r\");\n    file0.mkdirs();\n    Charset charset0 = Charset.defaultCharset();\n    File file1 = ZipUtil.unzip((InputStream) byteArrayInputStream0, file0, charset0);\n    assertEquals(\"d30:$0O!&T+JR,Y_r\", file1.getName());\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-http/src/test/java/cn/hutool/http/HtmlUtilTest###removeAllHtmlAttrTest",
        "generated_path": "HtmlUtil_removeAllHtmlAttr.java",
        "Compile_result": 1,
        "Test_result": 0,
        "Gen_Test": "package cn.hutool.http;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.http.HtmlUtil;\nimport java.util.regex.PatternSyntaxException;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class HtmlUtil_removeAllHtmlAttr extends HtmlUtil_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    HtmlUtil.filter(\";e#4&d||o`vJ\");\n    String[] stringArray0 = new String[9];\n    stringArray0[0] = \";e#4&amp;d||o`vJ\";\n    stringArray0[1] = \";e#4&amp;d||o`vJ\";\n    stringArray0[2] = \";e#4&d||o`vJ\";\n    stringArray0[3] = \";e#4&amp;d||o`vJ\";\n    stringArray0[4] = \";e#4&d||o`vJ\";\n    stringArray0[5] = \";e#4&d||o`vJ\";\n    stringArray0[6] = \";e#4&d||o`vJ\";\n    stringArray0[7] = \";e#4&d||o`vJ\";\n    stringArray0[8] = \";e#4&d||o`vJ\";\n    // Undeclared exception!\n    HtmlUtil.removeAllHtmlAttr(\";e#4&d||o`vJ\", stringArray0);\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/net/Ipv4UtilTest###ipv4ToLongTest",
        "generated_path": "Ipv4Util_ipv4ToLong.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package cn.hutool.core.net;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.net.Ipv4Util;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class Ipv4Util_ipv4ToLong extends Ipv4Util_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test15() throws Throwable {\n    // Undeclared exception!\n    try {\n        Ipv4Util.ipv4ToLong((String) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        //\n        // no message in exception (getMessage() returned null)\n        //\n    }\n}\n}"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/lang/hash/CityHashTest###hash64Test",
        "generated_path": "CityHash_hash64.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package cn.hutool.core.lang.hash;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport cn.hutool.core.lang.hash.CityHash;\nimport cn.hutool.core.lang.hash.Number128;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class CityHash_hash64 extends CityHash_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    byte[] byteArray0 = new byte[46];\n    byteArray0[17] = (byte) 89;\n    byteArray0[2] = (byte) 49;\n    long long0 = CityHash.hash64(byteArray0);\n    assertEquals(5092804478315907671L, long0);\n}\n}"
    },
    {
        "original_path": "rometools_rome###rometools_rome/rome-utils/src/test/java/com/rometools/utils/LongsTest###testParseDecimal",
        "generated_path": "Longs_parseDecimal.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.rometools.utils;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport com.rometools.utils.Longs;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class Longs_parseDecimal extends Longs_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test0() throws Throwable {\n    Long long0 = Longs.parseDecimal(\"\");\n    assertNull(long0);\n}\n}"
    },
    {
        "original_path": "rometools_rome###rometools_rome/rome-utils/src/test/java/com/rometools/utils/URIsTest###testParse",
        "generated_path": "URIs_parse.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.rometools.utils;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.rometools.utils.URIs;\nimport java.net.URI;\nimport java.net.URISyntaxException;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class URIs_parse extends URIs_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test0() throws Throwable {\n    URI uRI0 = URIs.parse(\" \");\n    assertNull(uRI0.getRawAuthority());\n}\n}"
    },
    {
        "original_path": "rometools_rome###rometools_rome/rome-utils/src/test/java/com/rometools/utils/DoublesTest###testParse",
        "generated_path": "Doubles_parse.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.rometools.utils;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport com.rometools.utils.Doubles;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class Doubles_parse extends Doubles_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test0() throws Throwable {\n    Double double0 = Doubles.parse(\"0\");\n    assertEquals(0.0, (double) double0, 0.01);\n}\n}"
    },
    {
        "original_path": "code4craft_webmagic###code4craft_webmagic/webmagic-extension/src/test/java/us/codecraft/webmagic/utils/IPUtilsTest###testGetFirstNoLoopbackIPAddresses",
        "generated_path": "IPUtils_getFirstNoLoopbackIPAddresses.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "package us.codecraft.webmagic.utils;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport us.codecraft.webmagic.utils.IPUtils;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class IPUtils_getFirstNoLoopbackIPAddresses extends IPUtils_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test0() throws Throwable {\n    String string0 = IPUtils.getFirstNoLoopbackIPAddresses();\n    assertEquals(\"192.168.1.42\", string0);\n}\n}"
    },
    {
        "original_path": "code4craft_webmagic###code4craft_webmagic/webmagic-core/src/test/java/us/codecraft/webmagic/selector/JsonTest###testRemovePadding",
        "generated_path": "Json_removePadding.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package us.codecraft.webmagic.selector;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.alibaba.fastjson.JSON;\nimport com.google.common.collect.BoundType;\nimport java.util.List;\nimport java.util.Stack;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.io.MockFileWriter;\nimport org.jsoup.nodes.Document;\nimport org.junit.runner.RunWith;\nimport us.codecraft.webmagic.selector.Json;\nimport us.codecraft.webmagic.selector.OrSelector;\nimport us.codecraft.webmagic.selector.Selectable;\nimport us.codecraft.webmagic.selector.Selector;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class Json_removePadding extends Json_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void Json_removePadding() throws Throwable {\n    Json json0 = new Json((List<String>) null);\n    // Undeclared exception!\n    try {\n        json0.removePadding(\"us.codecraft.webmagic.selector.BaseElementSelector\");\n        fail(\"Expecting exception: IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n        //\n        // Object must not be null\n        //\n        verifyException(\"org.jsoup.helper.Validate\", e);\n    }\n}\n}"
    },
    {
        "original_path": "code4craft_webmagic###code4craft_webmagic/webmagic-core/src/test/java/us/codecraft/webmagic/proxy/ProxyTest###testCreate",
        "generated_path": "Proxy_create.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package us.codecraft.webmagic.proxy;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.net.URI;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.net.MockURI;\nimport org.junit.runner.RunWith;\nimport us.codecraft.webmagic.proxy.Proxy;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class Proxy_create extends Proxy_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    URI uRI0 = MockURI.aHttpURI;\n    Proxy proxy0 = Proxy.create(uRI0);\n    URI uRI1 = proxy0.toURI();\n    assertEquals((-1), proxy0.getPort());\n    assertEquals(\"http://foo.bar\", uRI1.toString());\n}\n}"
    },
    {
        "original_path": "NLPchina_ansj_seg###NLPchina_ansj_seg/src/test/java/org/ansj/app/crf/ConfigTest###wordAlertTest",
        "generated_path": "Config_wordAlert.java",
        "Compile_result": 1,
        "Test_result": 0,
        "Gen_Test": "package org.ansj.app.crf;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.regex.PatternSyntaxException;\nimport org.ansj.app.crf.Config;\nimport org.ansj.app.crf.pojo.Element;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class Config_wordAlert extends Config_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    List<Element> list0 = Config.wordAlert(\";pnnte\");\n    int[][] intArray0 = new int[1][8];\n    Config config0 = new Config(intArray0);\n    char char0 = config0.getTagIfOutArr(list0, 0);\n    assertEquals(2, list0.size());\n    assertEquals('\\uFFFF', char0);\n}\n}"
    },
    {
        "original_path": "NLPchina_ansj_seg###NLPchina_ansj_seg/src/test/java/org/ansj/library/DicLibraryTest###insertTest",
        "generated_path": "DicLibrary_insert.java",
        "Compile_result": 1,
        "Test_result": 0,
        "Gen_Test": "package org.ansj.library;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.util.Collection;\nimport java.util.LinkedList;\nimport java.util.Set;\nimport org.ansj.domain.KV;\nimport org.ansj.library.DicLibrary;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.System;\nimport org.evosuite.runtime.testdata.EvoSuiteFile;\nimport org.evosuite.runtime.testdata.EvoSuiteURL;\nimport org.evosuite.runtime.testdata.FileSystemHandling;\nimport org.evosuite.runtime.testdata.NetworkHandling;\nimport org.junit.runner.RunWith;\nimport org.nlpcn.commons.lang.tire.domain.Forest;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class DicLibrary_insert extends DicLibrary_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    DicLibrary.insert(\"\", \"\", \"\", 3);\n}\n}"
    },
    {
        "original_path": "watson-developer-cloud_java-sdk###watson-developer-cloud_java-sdk/common/src/test/java/com/ibm/watson/common/SdkCommonTest###testGetSdkHeaders",
        "generated_path": "SdkCommon_getSdkHeaders.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.ibm.watson.common;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport com.ibm.watson.common.SdkCommon;\nimport java.util.Map;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class SdkCommon_getSdkHeaders extends SdkCommon_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test0() throws Throwable {\n    Map<String, String> map0 = SdkCommon.getSdkHeaders(\"\", \"C\", \" &TGZk]}?'l2w9RaX\");\n    assertFalse(map0.isEmpty());\n}\n}"
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-language-modules/pl/src/test/java/org/languagetool/rules/pl/DateCheckFilterTest###testGetDayOfWeek",
        "generated_path": "DateCheckFilter_getDayOfWeek.java",
        "Compile_result": 1,
        "Test_result": 0,
        "Gen_Test": "package org.languagetool.rules.pl;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.util.Calendar;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport org.languagetool.rules.pl.DateCheckFilter;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class DateCheckFilter_getDayOfWeek extends DateCheckFilter_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test28() throws Throwable {\n    DateCheckFilter dateCheckFilter0 = new DateCheckFilter();\n    int int0 = dateCheckFilter0.getDayOfWeek(\"sobzj:zgefpmp5gj\");\n    assertEquals(7, int0);\n}\n}"
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-wikipedia/src/test/java/org/languagetool/dev/wikipedia/WikipediaQuickCheckTest###testGetPlainTextMapping",
        "generated_path": "WikipediaQuickCheck_getPlainTextMapping.java",
        "Compile_result": 1,
        "Test_result": 0,
        "Gen_Test": "package org.languagetool.dev.wikipedia;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.io.File;\nimport java.net.MalformedURLException;\nimport java.net.URI;\nimport java.net.URISyntaxException;\nimport java.net.URL;\nimport java.net.URLStreamHandler;\nimport java.nio.file.FileSystem;\nimport java.nio.file.Path;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.MissingResourceException;\nimport java.util.ResourceBundle;\nimport java.util.Vector;\nimport org.apache.lucene.mockfile.FilterFileSystem;\nimport org.apache.lucene.mockfile.FilterPath;\nimport org.apache.lucene.mockfile.VerboseFS;\nimport org.apache.lucene.util.InfoStream;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.System;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.mock.java.io.MockFile;\nimport org.evosuite.runtime.mock.java.net.MockURI;\nimport org.evosuite.runtime.mock.java.net.MockURL;\nimport org.junit.runner.RunWith;\nimport org.languagetool.AnalyzedSentence;\nimport org.languagetool.AnalyzedToken;\nimport org.languagetool.AnalyzedTokenReadings;\nimport org.languagetool.GlobalConfig;\nimport org.languagetool.JLanguageTool;\nimport org.languagetool.Language;\nimport org.languagetool.chunking.Chunker;\nimport org.languagetool.dev.wikipedia.ErrorMarker;\nimport org.languagetool.dev.wikipedia.MediaWikiContent;\nimport org.languagetool.dev.wikipedia.RuleMatchApplication;\nimport org.languagetool.dev.wikipedia.WikipediaQuickCheck;\nimport org.languagetool.language.AmericanEnglish;\nimport org.languagetool.language.AustrianGerman;\nimport org.languagetool.language.BalearicCatalan;\nimport org.languagetool.language.BelgianDutch;\nimport org.languagetool.language.Catalan;\nimport org.languagetool.language.Dutch;\nimport org.languagetool.language.Esperanto;\nimport org.languagetool.language.French;\nimport org.languagetool.language.Galician;\nimport org.languagetool.language.Italian;\nimport org.languagetool.language.SimpleGerman;\nimport org.languagetool.language.Spanish;\nimport org.languagetool.language.Ukrainian;\nimport org.languagetool.language.Ukrainian1992;\nimport org.languagetool.language.ValencianCatalan;\nimport org.languagetool.noop.NoopLanguage;\nimport org.languagetool.rules.Rule;\nimport org.languagetool.rules.RuleMatch;\nimport org.languagetool.rules.SentenceWhitespaceRule;\nimport org.languagetool.rules.SuggestedReplacement;\nimport org.languagetool.rules.patterns.PatternRule;\nimport org.languagetool.rules.patterns.PatternToken;\nimport org.languagetool.rules.spelling.SpellingCheckRule;\nimport org.languagetool.tagging.ar.ArabicTagger;\nimport org.languagetool.tagging.de.GermanTagger;\nimport org.languagetool.tagging.disambiguation.MultiWordChunker2;\nimport org.languagetool.tagging.eo.EsperantoTagger;\nimport org.languagetool.tagging.ja.JapaneseTagger;\nimport org.languagetool.tagging.xx.DemoTagger;\nimport org.languagetool.tokenizers.SentenceTokenizer;\nimport org.languagetool.tokenizers.Tokenizer;\nimport org.languagetool.tokenizers.WordTokenizer;\nimport org.xml.sax.Attributes;\nimport org.xml.sax.SAXParseException;\nimport org.xml.sax.ext.Attributes2Impl;\nimport org.xml.sax.helpers.AttributesImpl;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class WikipediaQuickCheck_getPlainTextMapping extends WikipediaQuickCheck_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void WikipediaQuickCheck_getPlainTextMapping() throws Throwable {\n    WikipediaQuickCheck wikipediaQuickCheck0 = new WikipediaQuickCheck();\n    JLanguageTool.getClassBroker();\n    wikipediaQuickCheck0.getPlainTextMapping(\"/uk/ukrainian.dict\");\n    WikipediaQuickCheck.RevisionContentHandler wikipediaQuickCheck_RevisionContentHandler0 = null;\n    try {\n        wikipediaQuickCheck_RevisionContentHandler0 = wikipediaQuickCheck0.new RevisionContentHandler();\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        //\n        // Could not parse XML: /uk/ukrainian.dict\n        //\n        verifyException(\"org.languagetool.dev.wikipedia.WikipediaQuickCheck\", e);\n    }\n}\n}"
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-language-modules/ar/src/test/java/org/languagetool/tools/ArabicStringToolsTest###testRemoveTashkeel",
        "generated_path": "ArabicStringTools_removeTashkeel.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.languagetool.tools;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport org.languagetool.tools.ArabicStringTools;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class ArabicStringTools_removeTashkeel extends ArabicStringTools_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test1() throws Throwable {\n    String string0 = ArabicStringTools.removeTashkeel(\"ZGZ)A0@i@JRbucW5*\");\n    assertEquals(\"ZGZ)A0@i@JRbucW5*\", string0);\n}\n}"
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-server/src/test/java/org/languagetool/server/DictionarySpellMatchFilterTest###testGetPhrases",
        "generated_path": "DictionarySpellMatchFilter_getPhrases.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.languagetool.rules;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.util.List;\nimport java.util.Set;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.junit.runner.RunWith;\nimport org.languagetool.UserConfig;\nimport org.languagetool.markup.AnnotatedText;\nimport org.languagetool.rules.DictionarySpellMatchFilter;\nimport org.languagetool.rules.RuleMatch;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class DictionarySpellMatchFilter_getPhrases extends DictionarySpellMatchFilter_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void DictionarySpellMatchFilter_getPhrases() throws Throwable {\n    UserConfig userConfig0 = mock(UserConfig.class, new ViolatedAssumptionAnswer());\n    DictionarySpellMatchFilter dictionarySpellMatchFilter0 = new DictionarySpellMatchFilter(userConfig0);\n    AnnotatedText annotatedText0 = mock(AnnotatedText.class, new ViolatedAssumptionAnswer());\n    // Undeclared exception!\n    try {\n        dictionarySpellMatchFilter0.getPhrases((List<RuleMatch>) null, annotatedText0);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        //\n        // no message in exception (getMessage() returned null)\n        //\n        verifyException(\"org.languagetool.rules.DictionarySpellMatchFilter\", e);\n    }\n}\n}"
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-core/src/test/java/org/languagetool/tagging/MorfologikTaggerTest###testTag",
        "generated_path": "MorfologikTagger_tag.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.languagetool.tagging;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.net.URL;\nimport morfologik.fsa.FSA;\nimport morfologik.stemming.Dictionary;\nimport morfologik.stemming.DictionaryMetadata;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.net.MockURL;\nimport org.junit.runner.RunWith;\nimport org.languagetool.tagging.MorfologikTagger;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class MorfologikTagger_tag extends MorfologikTagger_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void MorfologikTagger_tag() throws Throwable {\n    URL uRL0 = MockURL.getHttpExample();\n    MorfologikTagger morfologikTagger0 = new MorfologikTagger(uRL0);\n    // Undeclared exception!\n    try {\n        morfologikTagger0.tag(\"KRo \\\"l``rOx,PLna\");\n        fail(\"Expecting exception: RuntimeException\");\n    } catch (RuntimeException e) {\n        //\n        // Could not tag word 'KRo \\\"l``rOx,PLna'\n        //\n        verifyException(\"org.languagetool.tagging.MorfologikTagger\", e);\n    }\n}\n}"
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-language-modules/br/src/test/java/org/languagetool/tokenizers/br/BretonWordTokenizerTest###testTokenize",
        "generated_path": "BretonWordTokenizer_tokenize.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.languagetool.tokenizers.br;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.util.List;\nimport java.util.NoSuchElementException;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport org.languagetool.tokenizers.br.BretonWordTokenizer;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class BretonWordTokenizer_tokenize extends BretonWordTokenizer_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test0() throws Throwable {\n    BretonWordTokenizer bretonWordTokenizer0 = new BretonWordTokenizer();\n    List<String> list0 = bretonWordTokenizer0.tokenize(\"+\\\"^R&=Q'\\u2019-'f:\\u2018\");\n    assertFalse(list0.contains(\"+\\\"^R&=Q'\\u2019-'f:\\u2018\"));\n    assertEquals(11, list0.size());\n}\n}"
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-core/src/test/java/org/languagetool/rules/patterns/UnifierTest###testAddNeutralElement",
        "generated_path": "Unifier_addNeutralElement.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.languagetool.rules.patterns;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.ResourceBundle;\nimport java.util.Stack;\nimport java.util.Vector;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport org.languagetool.AnalyzedToken;\nimport org.languagetool.AnalyzedTokenReadings;\nimport org.languagetool.FakeLanguage;\nimport org.languagetool.LanguageMaintainedState;\nimport org.languagetool.rules.patterns.EquivalenceTypeLocator;\nimport org.languagetool.rules.patterns.PatternToken;\nimport org.languagetool.rules.patterns.Unifier;\nimport org.languagetool.tagging.xx.DemoTagger;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class Unifier_addNeutralElement extends Unifier_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    HashMap<EquivalenceTypeLocator, PatternToken> hashMap0 = new HashMap<EquivalenceTypeLocator, PatternToken>();\n    assertNotNull(hashMap0);\n    assertEquals(0, hashMap0.size());\n    assertTrue(hashMap0.isEmpty());\n    HashMap<String, List<String>> hashMap1 = new HashMap<String, List<String>>();\n    assertNotNull(hashMap1);\n    assertTrue(hashMap1.isEmpty());\n    assertEquals(0, hashMap1.size());\n    Unifier unifier0 = new Unifier(hashMap0, hashMap1);\n    assertNotNull(unifier0);\n    assertEquals(0, hashMap0.size());\n    assertTrue(hashMap0.isEmpty());\n    assertTrue(hashMap1.isEmpty());\n    assertEquals(0, hashMap1.size());\n    AnalyzedToken analyzedToken0 = new AnalyzedToken(\"\", \"UNKNOWN\", \"\u007f^m7gVw*\");\n    assertNotNull(analyzedToken0);\n    assertEquals(\"\", analyzedToken0.getToken());\n    assertEquals(\"UNKNOWN\", analyzedToken0.getPOSTag());\n    assertEquals(\"\u007f^m7gVw*\", analyzedToken0.getLemma());\n    assertFalse(analyzedToken0.hasNoTag());\n    assertFalse(analyzedToken0.isWhitespaceBefore());\n    AnalyzedTokenReadings analyzedTokenReadings0 = new AnalyzedTokenReadings(analyzedToken0, 1137);\n    assertNotNull(analyzedTokenReadings0);\n    assertEquals(\"\", analyzedToken0.getToken());\n    assertEquals(\"UNKNOWN\", analyzedToken0.getPOSTag());\n    assertEquals(\"\u007f^m7gVw*\", analyzedToken0.getLemma());\n    assertFalse(analyzedToken0.hasNoTag());\n    assertFalse(analyzedToken0.isWhitespaceBefore());\n    assertFalse(analyzedTokenReadings0.isFieldCode());\n    assertEquals(1137, analyzedTokenReadings0.getEndPos());\n    assertTrue(analyzedTokenReadings0.isWhitespace());\n    assertEquals(0, analyzedTokenReadings0.getPosFix());\n    assertEquals(\"\", analyzedTokenReadings0.getCleanToken());\n    assertEquals(\"\", analyzedTokenReadings0.getHistoricalAnnotations());\n    assertFalse(analyzedTokenReadings0.isSentenceEnd());\n    assertEquals(\"\", analyzedTokenReadings0.getWhitespaceBefore());\n    assertEquals(\"\", analyzedTokenReadings0.getToken());\n    assertFalse(analyzedTokenReadings0.hasTypographicApostrophe());\n    assertFalse(analyzedTokenReadings0.isIgnoredBySpeller());\n    assertFalse(analyzedTokenReadings0.isParagraphEnd());\n    assertFalse(analyzedTokenReadings0.isPosTagUnknown());\n    assertTrue(analyzedTokenReadings0.hasReading());\n    assertTrue(analyzedTokenReadings0.isTagged());\n    assertEquals(1, analyzedTokenReadings0.getReadingsLength());\n    assertFalse(analyzedTokenReadings0.isWhitespaceBefore());\n    assertFalse(analyzedTokenReadings0.isSentenceStart());\n    assertFalse(analyzedTokenReadings0.isLinebreak());\n    assertEquals(1137, analyzedTokenReadings0.getStartPos());\n    assertEquals(0, analyzedTokenReadings0.getImmunizationSourceLine());\n    assertTrue(analyzedTokenReadings0.hasSameLemmas());\n    unifier0.addNeutralElement(analyzedTokenReadings0);\n    assertEquals(0, hashMap0.size());\n    assertTrue(hashMap0.isEmpty());\n    assertTrue(hashMap1.isEmpty());\n    assertEquals(0, hashMap1.size());\n    assertEquals(\"\", analyzedToken0.getToken());\n    assertEquals(\"UNKNOWN\", analyzedToken0.getPOSTag());\n    assertEquals(\"\u007f^m7gVw*\", analyzedToken0.getLemma());\n    assertFalse(analyzedToken0.hasNoTag());\n    assertFalse(analyzedToken0.isWhitespaceBefore());\n    assertFalse(analyzedTokenReadings0.isFieldCode());\n    assertEquals(1137, analyzedTokenReadings0.getEndPos());\n    assertTrue(analyzedTokenReadings0.isWhitespace());\n    assertEquals(0, analyzedTokenReadings0.getPosFix());\n    assertEquals(\"\", analyzedTokenReadings0.getCleanToken());\n    assertEquals(\"\", analyzedTokenReadings0.getHistoricalAnnotations());\n    assertFalse(analyzedTokenReadings0.isSentenceEnd());\n    assertEquals(\"\", analyzedTokenReadings0.getWhitespaceBefore());\n    assertEquals(\"\", analyzedTokenReadings0.getToken());\n    assertFalse(analyzedTokenReadings0.hasTypographicApostrophe());\n    assertFalse(analyzedTokenReadings0.isIgnoredBySpeller());\n    assertFalse(analyzedTokenReadings0.isParagraphEnd());\n    assertFalse(analyzedTokenReadings0.isPosTagUnknown());\n    assertTrue(analyzedTokenReadings0.hasReading());\n    assertTrue(analyzedTokenReadings0.isTagged());\n    assertEquals(1, analyzedTokenReadings0.getReadingsLength());\n    assertFalse(analyzedTokenReadings0.isWhitespaceBefore());\n    assertFalse(analyzedTokenReadings0.isSentenceStart());\n    assertFalse(analyzedTokenReadings0.isLinebreak());\n    assertEquals(1137, analyzedTokenReadings0.getStartPos());\n    assertEquals(0, analyzedTokenReadings0.getImmunizationSourceLine());\n    assertTrue(analyzedTokenReadings0.hasSameLemmas());\n    unifier0.addNeutralElement(analyzedTokenReadings0);\n    assertEquals(0, hashMap0.size());\n    assertTrue(hashMap0.isEmpty());\n    assertTrue(hashMap1.isEmpty());\n    assertEquals(0, hashMap1.size());\n    assertEquals(\"\", analyzedToken0.getToken());\n    assertEquals(\"UNKNOWN\", analyzedToken0.getPOSTag());\n    assertEquals(\"\u007f^m7gVw*\", analyzedToken0.getLemma());\n    assertFalse(analyzedToken0.hasNoTag());\n    assertFalse(analyzedToken0.isWhitespaceBefore());\n    assertFalse(analyzedTokenReadings0.isFieldCode());\n    assertEquals(1137, analyzedTokenReadings0.getEndPos());\n    assertTrue(analyzedTokenReadings0.isWhitespace());\n    assertEquals(0, analyzedTokenReadings0.getPosFix());\n    assertEquals(\"\", analyzedTokenReadings0.getCleanToken());\n    assertEquals(\"\", analyzedTokenReadings0.getHistoricalAnnotations());\n    assertFalse(analyzedTokenReadings0.isSentenceEnd());\n    assertEquals(\"\", analyzedTokenReadings0.getWhitespaceBefore());\n    assertEquals(\"\", analyzedTokenReadings0.getToken());\n    assertFalse(analyzedTokenReadings0.hasTypographicApostrophe());\n    assertFalse(analyzedTokenReadings0.isIgnoredBySpeller());\n    assertFalse(analyzedTokenReadings0.isParagraphEnd());\n    assertFalse(analyzedTokenReadings0.isPosTagUnknown());\n    assertTrue(analyzedTokenReadings0.hasReading());\n    assertTrue(analyzedTokenReadings0.isTagged());\n    assertEquals(1, analyzedTokenReadings0.getReadingsLength());\n    assertFalse(analyzedTokenReadings0.isWhitespaceBefore());\n    assertFalse(analyzedTokenReadings0.isSentenceStart());\n    assertFalse(analyzedTokenReadings0.isLinebreak());\n    assertEquals(1137, analyzedTokenReadings0.getStartPos());\n    assertEquals(0, analyzedTokenReadings0.getImmunizationSourceLine());\n    assertTrue(analyzedTokenReadings0.hasSameLemmas());\n    AnalyzedTokenReadings[] analyzedTokenReadingsArray0 = unifier0.getUnifiedTokens();\n    assertEquals(2, analyzedTokenReadingsArray0.length);\n    assertNotNull(analyzedTokenReadingsArray0);\n    assertEquals(0, hashMap0.size());\n    assertTrue(hashMap0.isEmpty());\n    assertTrue(hashMap1.isEmpty());\n    assertEquals(0, hashMap1.size());\n}\n}"
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-core/src/test/java/org/languagetool/AnalyzedTokenTest###testMatches",
        "generated_path": "AnalyzedToken_matches.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.languagetool;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport org.languagetool.AnalyzedToken;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class AnalyzedToken_matches extends AnalyzedToken_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test17() throws Throwable {\n    AnalyzedToken analyzedToken0 = new AnalyzedToken(\"5h\", \"\", \"\");\n    analyzedToken0.setWhitespaceBefore(true);\n    AnalyzedToken analyzedToken1 = new AnalyzedToken(\"5h\", \"\", \"\");\n    boolean boolean0 = analyzedToken0.matches(analyzedToken1);\n    assertTrue(analyzedToken0.isWhitespaceBefore());\n    assertTrue(boolean0);\n}\n}"
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-language-modules/en/src/test/java/org/languagetool/rules/en/DateCheckFilterTest###testGetDayOfWeek",
        "generated_path": "DateCheckFilter_getDayOfWeek.java",
        "Compile_result": 1,
        "Test_result": 0,
        "Gen_Test": "package org.languagetool.rules.pl;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.util.Calendar;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport org.languagetool.rules.pl.DateCheckFilter;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class DateCheckFilter_getDayOfWeek extends DateCheckFilter_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test28() throws Throwable {\n    DateCheckFilter dateCheckFilter0 = new DateCheckFilter();\n    int int0 = dateCheckFilter0.getDayOfWeek(\"sobzj:zgefpmp5gj\");\n    assertEquals(7, int0);\n}\n}"
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-gui-commons/src/test/java/org/languagetool/gui/ToolsTest###testGetMnemonic",
        "generated_path": "Tools_getMnemonic.java",
        "Compile_result": 1,
        "Test_result": 0,
        "Gen_Test": "package org.languagetool.gui;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport io.vavr.API;\nimport io.vavr.Lazy;\nimport java.awt.Component;\nimport java.awt.Dialog;\nimport java.awt.Dimension;\nimport java.awt.Frame;\nimport java.awt.Graphics;\nimport java.awt.GraphicsConfiguration;\nimport java.awt.HeadlessException;\nimport java.awt.Label;\nimport java.awt.Point;\nimport java.awt.SystemColor;\nimport java.awt.Window;\nimport java.beans.PropertyChangeListener;\nimport java.beans.VetoableChangeListener;\nimport java.beans.VetoableChangeListenerProxy;\nimport java.io.File;\nimport java.io.PrintStream;\nimport java.io.PrintWriter;\nimport java.net.MalformedURLException;\nimport java.net.URI;\nimport java.net.URL;\nimport java.net.URLStreamHandler;\nimport java.sql.BatchUpdateException;\nimport java.sql.ClientInfoStatus;\nimport java.sql.SQLClientInfoException;\nimport java.sql.SQLDataException;\nimport java.sql.SQLException;\nimport java.sql.SQLFeatureNotSupportedException;\nimport java.sql.SQLNonTransientConnectionException;\nimport java.sql.SQLRecoverableException;\nimport java.sql.SQLSyntaxErrorException;\nimport java.sql.SQLTimeoutException;\nimport java.sql.SQLTransactionRollbackException;\nimport java.sql.SQLTransientConnectionException;\nimport java.sql.SQLTransientException;\nimport java.sql.SQLWarning;\nimport java.util.ArrayList;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.ResourceBundle;\nimport java.util.Set;\nimport java.util.concurrent.TimeUnit;\nimport javax.swing.Icon;\nimport javax.swing.JApplet;\nimport javax.swing.JComboBox;\nimport javax.swing.JDialog;\nimport javax.swing.JFrame;\nimport javax.swing.JInternalFrame;\nimport javax.swing.JMenu;\nimport javax.swing.JOptionPane;\nimport javax.swing.JPopupMenu;\nimport javax.swing.JTextPane;\nimport javax.swing.JToolTip;\nimport javax.swing.MenuElement;\nimport javax.swing.border.Border;\nimport javax.swing.event.AncestorListener;\nimport javax.swing.filechooser.FileFilter;\nimport javax.swing.filechooser.FileNameExtensionFilter;\nimport javax.swing.filechooser.FileSystemView;\nimport javax.swing.plaf.metal.MetalTreeUI;\nimport javax.swing.plaf.multi.MultiMenuItemUI;\nimport javax.swing.plaf.synth.SynthSplitPaneUI;\nimport javax.swing.text.DefaultEditorKit;\nimport javax.swing.text.DefaultStyledDocument;\nimport javax.swing.text.Element;\nimport javax.swing.text.JTextComponent;\nimport javax.swing.text.Keymap;\nimport javax.swing.text.Style;\nimport javax.swing.text.StyledDocument;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.mock.java.io.MockFile;\nimport org.evosuite.runtime.mock.java.io.MockPrintStream;\nimport org.evosuite.runtime.mock.java.io.MockPrintWriter;\nimport org.evosuite.runtime.mock.java.net.MockURI;\nimport org.evosuite.runtime.mock.java.net.MockURL;\nimport org.evosuite.runtime.mock.javax.swing.MockJFileChooser;\nimport org.evosuite.runtime.mock.javax.swing.filechooser.MockFileSystemView;\nimport org.junit.runner.RunWith;\nimport org.languagetool.GlobalConfig;\nimport org.languagetool.JLanguageTool;\nimport org.languagetool.Language;\nimport org.languagetool.ResultCache;\nimport org.languagetool.Tag;\nimport org.languagetool.UserConfig;\nimport org.languagetool.broker.DefaultResourceDataBroker;\nimport org.languagetool.gui.Configuration;\nimport org.languagetool.gui.Tools;\nimport org.languagetool.noop.NoopLanguage;\nimport org.languagetool.rules.CommaWhitespaceRule;\nimport org.languagetool.rules.EmptyLineRule;\nimport org.languagetool.rules.IncorrectExample;\nimport org.languagetool.rules.MultipleWhitespaceRule;\nimport org.languagetool.rules.ParagraphRepeatBeginningRule;\nimport org.languagetool.rules.PunctuationMarkAtParagraphEnd2;\nimport org.languagetool.rules.ReadabilityRule;\nimport org.languagetool.rules.Rule;\nimport org.languagetool.rules.TestRemoteRule;\nimport org.languagetool.rules.WhiteSpaceBeforeParagraphEnd;\nimport org.languagetool.rules.patterns.FalseFriendPatternRule;\nimport org.languagetool.rules.patterns.PatternToken;\nimport org.languagetool.tokenizers.SentenceTokenizer;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class Tools_getMnemonic extends Tools_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    String string0 = \"\";\n    String string1 = Tools.shortenComment(\"\");\n    String string2 = Tools.shortenComment(\"\");\n    String string3 = Tools.getLabel(\"\");\n    Frame frame0 = null;\n    MockJFileChooser mockJFileChooser0 = new MockJFileChooser(\"\");\n    FileFilter fileFilter0 = mockJFileChooser0.getFileFilter();\n    File file0 = Tools.openFileDialog(frame0, fileFilter0);\n    File file1 = Tools.openDirectoryDialog(frame0, file0);\n    Exception exception0 = null;\n    Tools.showErrorMessage(exception0, mockJFileChooser0);\n    JTextPane jTextPane0 = new JTextPane();\n    Tools.addHyperlinkListener(jTextPane0);\n    Tools.getLabel(string3);\n    Tools.openDirectoryDialog(frame0, file1);\n    Dialog.ModalityType dialog_ModalityType0 = Dialog.ModalityType.TOOLKIT_MODAL;\n    GraphicsConfiguration graphicsConfiguration0 = jTextPane0.getGraphicsConfiguration();\n    JDialog jDialog0 = new JDialog(frame0, string2, dialog_ModalityType0, graphicsConfiguration0);\n    JDialog jDialog1 = new JDialog((Dialog) jDialog0, string0);\n    Tools.centerDialog(jDialog1);\n    Tools.addHyperlinkListener(jTextPane0);\n    Tools.showErrorMessage(exception0, jDialog0);\n    String string4 = \"Yiw%F`m<Y5\";\n    Tools.getMnemonic(string4);\n    Component component0 = null;\n    String string5 = \"<br/><br/>\";\n    Locale locale0 = Locale.US;\n    ResourceBundle resourceBundle0 = ResourceBundle.getBundle(string5, locale0);\n    NoopLanguage noopLanguage0 = new NoopLanguage();\n    Language language0 = noopLanguage0.getDefaultLanguageVariant();\n    WhiteSpaceBeforeParagraphEnd whiteSpaceBeforeParagraphEnd0 = new WhiteSpaceBeforeParagraphEnd(resourceBundle0, language0);\n    String string6 = null;\n    String string7 = \"<Xe7$l(cwkF:<i~M\";\n    DefaultResourceDataBroker defaultResourceDataBroker0 = new DefaultResourceDataBroker(string6, string7);\n    URL uRL0 = defaultResourceDataBroker0.getFromRulesDirAsUrl(string5);\n    URL uRL1 = MockURL.URL(uRL0, noopLanguage0.SHORT_CODE);\n    String string8 = \"<marker>.*?</marker>\";\n    Tools.showRuleInfoDialog(component0, string1, string5, whiteSpaceBeforeParagraphEnd0, uRL1, resourceBundle0, string8);\n}\n}"
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-wikipedia/src/test/java/org/languagetool/dev/wikipedia/WikipediaQuickCheckTest###testGetPlainText",
        "generated_path": "WikipediaQuickCheck_getPlainText.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.languagetool.dev.wikipedia;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.io.File;\nimport java.net.MalformedURLException;\nimport java.net.URI;\nimport java.net.URISyntaxException;\nimport java.net.URL;\nimport java.net.URLStreamHandler;\nimport java.nio.file.FileSystem;\nimport java.nio.file.Path;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.MissingResourceException;\nimport java.util.ResourceBundle;\nimport java.util.Vector;\nimport org.apache.lucene.mockfile.FilterFileSystem;\nimport org.apache.lucene.mockfile.FilterPath;\nimport org.apache.lucene.mockfile.VerboseFS;\nimport org.apache.lucene.util.InfoStream;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.System;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.mock.java.io.MockFile;\nimport org.evosuite.runtime.mock.java.net.MockURI;\nimport org.evosuite.runtime.mock.java.net.MockURL;\nimport org.junit.runner.RunWith;\nimport org.languagetool.AnalyzedSentence;\nimport org.languagetool.AnalyzedToken;\nimport org.languagetool.AnalyzedTokenReadings;\nimport org.languagetool.GlobalConfig;\nimport org.languagetool.JLanguageTool;\nimport org.languagetool.Language;\nimport org.languagetool.chunking.Chunker;\nimport org.languagetool.dev.wikipedia.ErrorMarker;\nimport org.languagetool.dev.wikipedia.MediaWikiContent;\nimport org.languagetool.dev.wikipedia.RuleMatchApplication;\nimport org.languagetool.dev.wikipedia.WikipediaQuickCheck;\nimport org.languagetool.language.AmericanEnglish;\nimport org.languagetool.language.AustrianGerman;\nimport org.languagetool.language.BalearicCatalan;\nimport org.languagetool.language.BelgianDutch;\nimport org.languagetool.language.Catalan;\nimport org.languagetool.language.Dutch;\nimport org.languagetool.language.Esperanto;\nimport org.languagetool.language.French;\nimport org.languagetool.language.Galician;\nimport org.languagetool.language.Italian;\nimport org.languagetool.language.SimpleGerman;\nimport org.languagetool.language.Spanish;\nimport org.languagetool.language.Ukrainian;\nimport org.languagetool.language.Ukrainian1992;\nimport org.languagetool.language.ValencianCatalan;\nimport org.languagetool.noop.NoopLanguage;\nimport org.languagetool.rules.Rule;\nimport org.languagetool.rules.RuleMatch;\nimport org.languagetool.rules.SentenceWhitespaceRule;\nimport org.languagetool.rules.SuggestedReplacement;\nimport org.languagetool.rules.patterns.PatternRule;\nimport org.languagetool.rules.patterns.PatternToken;\nimport org.languagetool.rules.spelling.SpellingCheckRule;\nimport org.languagetool.tagging.ar.ArabicTagger;\nimport org.languagetool.tagging.de.GermanTagger;\nimport org.languagetool.tagging.disambiguation.MultiWordChunker2;\nimport org.languagetool.tagging.eo.EsperantoTagger;\nimport org.languagetool.tagging.ja.JapaneseTagger;\nimport org.languagetool.tagging.xx.DemoTagger;\nimport org.languagetool.tokenizers.SentenceTokenizer;\nimport org.languagetool.tokenizers.Tokenizer;\nimport org.languagetool.tokenizers.WordTokenizer;\nimport org.xml.sax.Attributes;\nimport org.xml.sax.SAXParseException;\nimport org.xml.sax.ext.Attributes2Impl;\nimport org.xml.sax.helpers.AttributesImpl;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class WikipediaQuickCheck_getPlainText extends WikipediaQuickCheck_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test22() throws Throwable {\n    WikipediaQuickCheck wikipediaQuickCheck0 = new WikipediaQuickCheck((File) null, (-1));\n    URL uRL0 = null;\n    MediaWikiContent mediaWikiContent0 = new MediaWikiContent(\"No content but redirect found at '\", \";mM+_Sn~@i7JW\");\n    Esperanto esperanto0 = new Esperanto();\n    ErrorMarker errorMarker0 = new ErrorMarker(\"'(GMQ\", \";mM+_Sn~@i7JW\");\n    wikipediaQuickCheck0.checkWikipediaMarkup((URL) null, mediaWikiContent0, esperanto0, errorMarker0);\n    String string0 = \"Jbc'3'(m`EStj_ofLT\";\n    wikipediaQuickCheck0.getPlainText(string0);\n    WikipediaQuickCheck.RevisionContentHandler wikipediaQuickCheck_RevisionContentHandler0 = wikipediaQuickCheck0.new RevisionContentHandler();\n    char[] charArray0 = new char[5];\n    char char0 = 'r';\n}\n}"
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-core/src/test/java/org/languagetool/rules/SameRuleGroupFilterTest###testFilter",
        "generated_path": "SameRuleGroupFilter_filter.java",
        "Compile_result": 1,
        "Test_result": 0,
        "Gen_Test": "package org.languagetool.rules;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.util.ArrayList;\nimport java.util.LinkedList;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport org.languagetool.rules.RemoteRuleTimeoutTest;\nimport org.languagetool.rules.RuleMatch;\nimport org.languagetool.rules.SameRuleGroupFilter;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class SameRuleGroupFilter_filter extends SameRuleGroupFilter_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test2() throws Throwable {\n    SameRuleGroupFilter sameRuleGroupFilter0 = new SameRuleGroupFilter();\n    ArrayList<RuleMatch> arrayList0 = new ArrayList<RuleMatch>();\n    arrayList0.add((RuleMatch) null);\n    List<RuleMatch> list0 = sameRuleGroupFilter0.filter((List<RuleMatch>) arrayList0);\n    assertFalse(list0.isEmpty());\n}\n}"
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-core/src/test/java/org/languagetool/AnalyzedTokenReadingsTest###testToString",
        "generated_path": "AnalyzedTokenReadings_toString.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.languagetool;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.google.common.collect.BoundType;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Stack;\nimport java.util.Vector;\nimport java.util.function.Consumer;\nimport java.util.regex.PatternSyntaxException;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.junit.runner.RunWith;\nimport org.languagetool.AnalyzedToken;\nimport org.languagetool.AnalyzedTokenReadings;\nimport org.languagetool.chunking.ChunkTag;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class AnalyzedTokenReadings_toString extends AnalyzedTokenReadings_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test002() throws Throwable {\n    AnalyzedToken analyzedToken0 = new AnalyzedToken(\")ZV_d\", \"\", \"nH/G=5\");\n    analyzedToken0.toString();\n    analyzedToken0.setWhitespaceBefore(true);\n    AnalyzedTokenReadings analyzedTokenReadings0 = new AnalyzedTokenReadings(analyzedToken0);\n    analyzedToken0.setWhitespaceBefore(true);\n    Stack<ChunkTag> stack0 = new Stack<ChunkTag>();\n    ChunkTag chunkTag0 = new ChunkTag(\"Unknown operation: \");\n    stack0.add(chunkTag0);\n    analyzedTokenReadings0.setChunkTags(stack0);\n    analyzedTokenReadings0.immunize((-1894396378));\n    analyzedTokenReadings0.isSentenceStart();\n    analyzedToken0.setNoPOSTag(true);\n    analyzedTokenReadings0.hasPartialPosTag(\"\");\n    analyzedTokenReadings0.hasPosTagStartingWith(\"nH/G=5\");\n    analyzedTokenReadings0.hasPosTagAndLemma(\"\", \"+6 a8\");\n    Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());\n    analyzedTokenReadings0.forEach(consumer0);\n    analyzedTokenReadings0.toString();\n    analyzedTokenReadings0.getChunkTags();\n    String[] stringArray0 = new String[8];\n    stringArray0[0] = \"\";\n    stringArray0[1] = \"\";\n    stringArray0[2] = \"\";\n    stringArray0[3] = \")ZV_d\";\n    stringArray0[4] = \"\";\n    stringArray0[5] = \")ZV_d[nH/G=5/,Unknown operation: ]{!},\";\n    stringArray0[6] = \"\";\n    stringArray0[7] = \")ZV_d[nH/G=5/,Unknown operation: ]{!},\";\n    analyzedTokenReadings0.hasAnyPartialPosTag(stringArray0);\n    analyzedTokenReadings0.hasAnyLemma(stringArray0);\n    analyzedTokenReadings0.getWhitespaceBefore();\n}\n}"
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-core/src/test/java/org/languagetool/rules/ConfusionSetTest###testEquals",
        "generated_path": "ConfusionSet_equals.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.languagetool.rules;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Set;\nimport java.util.Vector;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport org.languagetool.rules.ConfusionSet;\nimport org.languagetool.rules.ConfusionString;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class ConfusionSet_equals extends ConfusionSet_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    String[] stringArray0 = new String[0];\n    ConfusionSet confusionSet0 = new ConfusionSet(1L, stringArray0);\n    ConfusionSet confusionSet1 = new ConfusionSet(1L, stringArray0);\n    boolean boolean0 = confusionSet0.equals(confusionSet1);\n    assertEquals(1L, confusionSet1.getFactor());\n    assertTrue(boolean0);\n}\n}"
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-standalone/src/test/java/org/languagetool/LanguageTest###testCreateDefaultJLanguageTool",
        "generated_path": "Language_createDefaultJLanguageTool.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.languagetool;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.io.ByteArrayInputStream;\nimport java.io.File;\nimport java.io.PipedInputStream;\nimport java.io.PushbackInputStream;\nimport java.io.SequenceInputStream;\nimport java.net.URI;\nimport java.util.ArrayList;\nimport java.util.Enumeration;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.PropertyResourceBundle;\nimport java.util.ResourceBundle;\nimport java.util.Stack;\nimport java.util.TreeMap;\nimport java.util.Vector;\nimport java.util.function.Function;\nimport java.util.regex.Pattern;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.mock.java.io.MockFile;\nimport org.evosuite.runtime.mock.java.net.MockURI;\nimport org.junit.runner.RunWith;\nimport org.languagetool.DynamicHunspellLanguage;\nimport org.languagetool.DynamicMorfologikLanguage;\nimport org.languagetool.FakeLanguage;\nimport org.languagetool.GlobalConfig;\nimport org.languagetool.JLanguageTool;\nimport org.languagetool.Language;\nimport org.languagetool.LanguageMaintainedState;\nimport org.languagetool.LinguServices;\nimport org.languagetool.UserConfig;\nimport org.languagetool.chunking.Chunker;\nimport org.languagetool.language.Contributor;\nimport org.languagetool.languagemodel.LanguageModel;\nimport org.languagetool.languagemodel.LuceneSingleIndexLanguageModel;\nimport org.languagetool.rules.DemoRule;\nimport org.languagetool.rules.RemoteRuleConfig;\nimport org.languagetool.rules.Rule;\nimport org.languagetool.rules.patterns.AbstractPatternRule;\nimport org.languagetool.rules.patterns.Unifier;\nimport org.languagetool.rules.patterns.UnifierConfiguration;\nimport org.languagetool.rules.spelling.SpellingCheckRule;\nimport org.languagetool.synthesis.Synthesizer;\nimport org.languagetool.tagging.Tagger;\nimport org.languagetool.tagging.disambiguation.Disambiguator;\nimport org.languagetool.tokenizers.SentenceTokenizer;\nimport org.languagetool.tokenizers.SimpleSentenceTokenizer;\nimport org.languagetool.tokenizers.Tokenizer;\nimport org.languagetool.tokenizers.WordTokenizer;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class Language_createDefaultJLanguageTool extends Language_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void Language_createDefaultJLanguageTool() throws Throwable {\n    MockFile mockFile0 = new MockFile(\"org.languagetool.ResourceBundleWithFallback\", \"org.languagetool.ResourceBundleWithFallback\");\n    DynamicHunspellLanguage dynamicHunspellLanguage0 = new DynamicHunspellLanguage(\"\", \"\", mockFile0);\n    // Undeclared exception!\n    try {\n        dynamicHunspellLanguage0.createDefaultJLanguageTool();\n        fail(\"Expecting exception: IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n        //\n        // 'en-US' is not a language code known to LanguageTool. Supported language codes are: xx-XX. The list of languages is read from META-INF/org/languagetool/language-module.properties in the Java classpath. See https://dev.languagetool.org/java-api for details.\n        //\n        verifyException(\"org.languagetool.Languages\", e);\n    }\n}\n}"
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-core/src/test/java/org/languagetool/rules/patterns/PatternRuleHandlerTest###testReplaceSpacesInRegex",
        "generated_path": "PatternRuleHandler_replaceSpacesInRegex.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.languagetool.rules.patterns;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.util.ArrayList;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport org.languagetool.FakeLanguage;\nimport org.languagetool.rules.Category;\nimport org.languagetool.rules.CategoryId;\nimport org.languagetool.rules.patterns.AbstractPatternRule;\nimport org.languagetool.rules.patterns.FalseFriendPatternRule;\nimport org.languagetool.rules.patterns.PatternRuleHandler;\nimport org.languagetool.rules.patterns.PatternToken;\nimport org.languagetool.rules.patterns.XMLRuleHandler;\nimport org.xml.sax.Attributes;\nimport org.xml.sax.ext.Attributes2Impl;\nimport org.xml.sax.helpers.AttributesImpl;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class PatternRuleHandler_replaceSpacesInRegex extends PatternRuleHandler_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    PatternRuleHandler patternRuleHandler0 = new PatternRuleHandler();\n    String string0 = patternRuleHandler0.replaceSpacesInRegex(\"[:;&[f`lIiY0+q~|x '\");\n    assertEquals(\"[:;&[f`lIiY0+q~|x '\", string0);\n}\n}"
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-language-modules/es/src/test/java/org/languagetool/tokenizers/es/SpanishWordTokenizerTest###testTokenize",
        "generated_path": "SpanishWordTokenizer_tokenize.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.languagetool.tokenizers.es;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport org.languagetool.tokenizers.es.SpanishWordTokenizer;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class SpanishWordTokenizer_tokenize extends SpanishWordTokenizer_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test0() throws Throwable {\n    SpanishWordTokenizer spanishWordTokenizer0 = new SpanishWordTokenizer();\n    List<String> list0 = spanishWordTokenizer0.tokenize(\"False positive probability (%s) must be < 1.0\");\n    assertEquals(17, list0.size());\n    assertFalse(list0.contains(\"False positive probability (%s) must be < 1.0\"));\n}\n}"
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-core/src/test/java/org/languagetool/AnalyzedTokenReadingsTest###testHasPosTag",
        "generated_path": "AnalyzedTokenReadings_hasPosTag.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.languagetool;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.google.common.collect.BoundType;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Stack;\nimport java.util.Vector;\nimport java.util.function.Consumer;\nimport java.util.regex.PatternSyntaxException;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.junit.runner.RunWith;\nimport org.languagetool.AnalyzedToken;\nimport org.languagetool.AnalyzedTokenReadings;\nimport org.languagetool.chunking.ChunkTag;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class AnalyzedTokenReadings_hasPosTag extends AnalyzedTokenReadings_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test028() throws Throwable {\n    AnalyzedToken analyzedToken0 = new AnalyzedToken(\"\\r\\n\", \"PkXp98z]`yt6D\", \"PkXp98z]`yt6D\");\n    analyzedToken0.equals(\"PkXp98z]`yt6D\");\n    analyzedToken0.setWhitespaceBefore(true);\n    AnalyzedToken analyzedToken1 = new AnalyzedToken(\"PkXp98z]`yt6D\", \"\\n\", \"Fw4\\\"yjiO?tJS=cK_y)\");\n    analyzedToken1.matches(analyzedToken0);\n    analyzedToken1.matches(analyzedToken0);\n    BoundType boundType0 = BoundType.CLOSED;\n    analyzedToken1.setNoPOSTag(false);\n    analyzedToken1.equals(boundType0);\n    analyzedToken1.setNoPOSTag(true);\n    analyzedToken0.matches(analyzedToken1);\n    AnalyzedTokenReadings analyzedTokenReadings0 = new AnalyzedTokenReadings(analyzedToken0, (-1171662440));\n    analyzedTokenReadings0.toString();\n    analyzedTokenReadings0.readingWithLemma(\"PkXp98z]`yt6D\");\n    analyzedTokenReadings0.toString();\n    analyzedTokenReadings0.setWhitespaceBefore(\"PkXp98z]`yt6D\");\n    analyzedTokenReadings0.getReadings();\n    analyzedTokenReadings0.getHistoricalAnnotations();\n    analyzedTokenReadings0.getReadings();\n    analyzedTokenReadings0.getImmunizationSourceLine();\n    analyzedTokenReadings0.getToken();\n    analyzedTokenReadings0.getReadingsLength();\n    analyzedTokenReadings0.getToken();\n    analyzedTokenReadings0.hasPosTag(\"\");\n}\n}"
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-language-modules/en/src/test/java/org/languagetool/tokenizers/en/EnglishWordTokenizerTest###testTokenize",
        "generated_path": "EnglishWordTokenizer_tokenize.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.languagetool.tokenizers.en;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport org.languagetool.tokenizers.en.EnglishWordTokenizer;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class EnglishWordTokenizer_tokenize extends EnglishWordTokenizer_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test2() throws Throwable {\n    EnglishWordTokenizer englishWordTokenizer0 = new EnglishWordTokenizer();\n    List<String> list0 = englishWordTokenizer0.tokenize(\"f\u007fz-=mJU`\u007f_WEwyL\");\n    assertEquals(8, list0.size());\n}\n}"
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-language-modules/fr/src/test/java/org/languagetool/tokenizers/fr/FrenchWordTokenizerTest###testTokenize",
        "generated_path": "FrenchWordTokenizer_tokenize.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.languagetool.tokenizers.fr;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport org.languagetool.tokenizers.fr.FrenchWordTokenizer;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class FrenchWordTokenizer_tokenize extends FrenchWordTokenizer_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test0() throws Throwable {\n    FrenchWordTokenizer frenchWordTokenizer0 = new FrenchWordTokenizer();\n    List<String> list0 = frenchWordTokenizer0.tokenize(\"\");\n    assertFalse(list0.contains(\"\"));\n}\n}"
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-core/src/test/java/org/languagetool/tokenizers/WordTokenizerTest###testTokenize",
        "generated_path": "WordTokenizer_tokenize.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.languagetool.tokenizers;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.google.common.collect.BoundType;\nimport com.google.common.collect.DiscreteDomain;\nimport com.google.common.collect.Range;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Stack;\nimport java.util.TreeSet;\nimport java.util.Vector;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.Random;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.testdata.EvoSuiteFile;\nimport org.evosuite.runtime.testdata.FileSystemHandling;\nimport org.junit.runner.RunWith;\nimport org.languagetool.tokenizers.WordTokenizer;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class WordTokenizer_tokenize extends WordTokenizer_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    WordTokenizer wordTokenizer0 = new WordTokenizer();\n    assertNotNull(wordTokenizer0);\n    assertEquals(\" \\u00A0\\u115F\\u1160\\u1680\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u200B\\u200C\\u200D\\u200E\\u200F\\u2028\\u2029\\u202A\\u202B\\u202C\\u202D\\u202E\\u202F\\u205F\\u2060\\u2061\\u2062\\u2063\\u206A\\u206B\\u206C\\u206D\\u206E\\u206F\\u3000\\u3164\\uFEFF\\uFFA0\\uFFF9\\uFFFA\\uFFFB\\u00A6\\u2016\\u2223|,.;()[]{}=*#\\u2217+\\u00D7\\u00B7\\u00F7<>!?:~/\\\\\\\"'\\u00AB\\u00BB\\u201E\\u201D\\u201C\\u2018\\u2019`\\u00B4\\u201B\\u2032\\u203A\\u2039\\u2026\\u00BF\\u00A1\\u203C\\u2047\\u2048\\u2049\\u2122\\u00AE\\u203D\\u00B6\\uFFEB\\u2E2E\\u2012\\u2013\\u2014\\u2015\\u2500\\u3161\\u2713\\u25CF\\u25CB\\u25C6\\u27A2\\u25A0\\u25A1\\u2605\\u274F\\u2794\\u21B5\\u2756\\u25AA\\u2751\\u2022\\u2B9A\\u2265\\u2192\\u21FE\\u21C9\\u21D2\\u21E8\\u21DB\\u00B9\\u00B2\\u00B3\\u2070\\u2071\\u2074\\u2075\\u2076\\u2077\\u2078\\u2079\\t\\n\\r\\u000B\", wordTokenizer0.getTokenizingCharacters());\n    List<String> list0 = WordTokenizer.getProtocols();\n    assertNotNull(list0);\n    assertEquals(3, list0.size());\n    assertFalse(list0.isEmpty());\n    List<String> list1 = wordTokenizer0.joinUrls(list0);\n    assertNotNull(list1);\n    assertEquals(\" \\u00A0\\u115F\\u1160\\u1680\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u200B\\u200C\\u200D\\u200E\\u200F\\u2028\\u2029\\u202A\\u202B\\u202C\\u202D\\u202E\\u202F\\u205F\\u2060\\u2061\\u2062\\u2063\\u206A\\u206B\\u206C\\u206D\\u206E\\u206F\\u3000\\u3164\\uFEFF\\uFFA0\\uFFF9\\uFFFA\\uFFFB\\u00A6\\u2016\\u2223|,.;()[]{}=*#\\u2217+\\u00D7\\u00B7\\u00F7<>!?:~/\\\\\\\"'\\u00AB\\u00BB\\u201E\\u201D\\u201C\\u2018\\u2019`\\u00B4\\u201B\\u2032\\u203A\\u2039\\u2026\\u00BF\\u00A1\\u203C\\u2047\\u2048\\u2049\\u2122\\u00AE\\u203D\\u00B6\\uFFEB\\u2E2E\\u2012\\u2013\\u2014\\u2015\\u2500\\u3161\\u2713\\u25CF\\u25CB\\u25C6\\u27A2\\u25A0\\u25A1\\u2605\\u274F\\u2794\\u21B5\\u2756\\u25AA\\u2751\\u2022\\u2B9A\\u2265\\u2192\\u21FE\\u21C9\\u21D2\\u21E8\\u21DB\\u00B9\\u00B2\\u00B3\\u2070\\u2071\\u2074\\u2075\\u2076\\u2077\\u2078\\u2079\\t\\n\\r\\u000B\", wordTokenizer0.getTokenizingCharacters());\n    assertEquals(3, list0.size());\n    assertFalse(list0.isEmpty());\n    assertFalse(list1.isEmpty());\n    assertEquals(3, list1.size());\n    assertTrue(list1.equals((Object) list0));\n    List<String> list2 = wordTokenizer0.joinEMailsAndUrls(list1);\n    assertNotNull(list2);\n    assertEquals(\" \\u00A0\\u115F\\u1160\\u1680\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u200B\\u200C\\u200D\\u200E\\u200F\\u2028\\u2029\\u202A\\u202B\\u202C\\u202D\\u202E\\u202F\\u205F\\u2060\\u2061\\u2062\\u2063\\u206A\\u206B\\u206C\\u206D\\u206E\\u206F\\u3000\\u3164\\uFEFF\\uFFA0\\uFFF9\\uFFFA\\uFFFB\\u00A6\\u2016\\u2223|,.;()[]{}=*#\\u2217+\\u00D7\\u00B7\\u00F7<>!?:~/\\\\\\\"'\\u00AB\\u00BB\\u201E\\u201D\\u201C\\u2018\\u2019`\\u00B4\\u201B\\u2032\\u203A\\u2039\\u2026\\u00BF\\u00A1\\u203C\\u2047\\u2048\\u2049\\u2122\\u00AE\\u203D\\u00B6\\uFFEB\\u2E2E\\u2012\\u2013\\u2014\\u2015\\u2500\\u3161\\u2713\\u25CF\\u25CB\\u25C6\\u27A2\\u25A0\\u25A1\\u2605\\u274F\\u2794\\u21B5\\u2756\\u25AA\\u2751\\u2022\\u2B9A\\u2265\\u2192\\u21FE\\u21C9\\u21D2\\u21E8\\u21DB\\u00B9\\u00B2\\u00B3\\u2070\\u2071\\u2074\\u2075\\u2076\\u2077\\u2078\\u2079\\t\\n\\r\\u000B\", wordTokenizer0.getTokenizingCharacters());\n    assertEquals(3, list0.size());\n    assertFalse(list0.isEmpty());\n    assertFalse(list1.isEmpty());\n    assertEquals(3, list1.size());\n    assertFalse(list2.isEmpty());\n    assertEquals(3, list2.size());\n    assertTrue(list0.equals((Object) list1));\n    assertTrue(list1.equals((Object) list0));\n    assertTrue(list2.equals((Object) list1));\n    assertTrue(list2.equals((Object) list0));\n    assertNotSame(list1, list2);\n    assertNotSame(list2, list1);\n    List<String> list3 = WordTokenizer.getProtocols();\n    assertNotNull(list3);\n    assertFalse(list3.isEmpty());\n    assertEquals(3, list3.size());\n    assertTrue(list3.equals((Object) list2));\n    assertTrue(list3.equals((Object) list1));\n    assertSame(list3, list0);\n    List<String> list4 = wordTokenizer0.joinEMails(list3);\n    assertNotNull(list4);\n    assertEquals(\" \\u00A0\\u115F\\u1160\\u1680\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u200B\\u200C\\u200D\\u200E\\u200F\\u2028\\u2029\\u202A\\u202B\\u202C\\u202D\\u202E\\u202F\\u205F\\u2060\\u2061\\u2062\\u2063\\u206A\\u206B\\u206C\\u206D\\u206E\\u206F\\u3000\\u3164\\uFEFF\\uFFA0\\uFFF9\\uFFFA\\uFFFB\\u00A6\\u2016\\u2223|,.;()[]{}=*#\\u2217+\\u00D7\\u00B7\\u00F7<>!?:~/\\\\\\\"'\\u00AB\\u00BB\\u201E\\u201D\\u201C\\u2018\\u2019`\\u00B4\\u201B\\u2032\\u203A\\u2039\\u2026\\u00BF\\u00A1\\u203C\\u2047\\u2048\\u2049\\u2122\\u00AE\\u203D\\u00B6\\uFFEB\\u2E2E\\u2012\\u2013\\u2014\\u2015\\u2500\\u3161\\u2713\\u25CF\\u25CB\\u25C6\\u27A2\\u25A0\\u25A1\\u2605\\u274F\\u2794\\u21B5\\u2756\\u25AA\\u2751\\u2022\\u2B9A\\u2265\\u2192\\u21FE\\u21C9\\u21D2\\u21E8\\u21DB\\u00B9\\u00B2\\u00B3\\u2070\\u2071\\u2074\\u2075\\u2076\\u2077\\u2078\\u2079\\t\\n\\r\\u000B\", wordTokenizer0.getTokenizingCharacters());\n    assertFalse(list3.isEmpty());\n    assertEquals(3, list3.size());\n    assertFalse(list4.isEmpty());\n    assertEquals(3, list4.size());\n    assertTrue(list3.equals((Object) list2));\n    assertTrue(list3.equals((Object) list1));\n    assertTrue(list4.equals((Object) list1));\n    assertTrue(list4.equals((Object) list2));\n    assertSame(list3, list0);\n    assertSame(list3, list4);\n    assertSame(list4, list0);\n    assertSame(list4, list3);\n    boolean boolean0 = WordTokenizer.isEMail(\"org.languagetool.tokenizers.WordTokenizer\");\n    assertFalse(boolean0);\n    List<String> list5 = WordTokenizer.getProtocols();\n    assertNotNull(list5);\n    assertFalse(list5.contains(\"org.languagetool.tokenizers.WordTokenizer\"));\n    assertFalse(list5.isEmpty());\n    assertEquals(3, list5.size());\n    assertTrue(list5.equals((Object) list2));\n    assertTrue(list5.equals((Object) list1));\n    assertSame(list5, list0);\n    assertSame(list5, list3);\n    assertSame(list5, list4);\n    String string0 = wordTokenizer0.getTokenizingCharacters();\n    assertNotNull(string0);\n    assertEquals(\" \\u00A0\\u115F\\u1160\\u1680\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u200B\\u200C\\u200D\\u200E\\u200F\\u2028\\u2029\\u202A\\u202B\\u202C\\u202D\\u202E\\u202F\\u205F\\u2060\\u2061\\u2062\\u2063\\u206A\\u206B\\u206C\\u206D\\u206E\\u206F\\u3000\\u3164\\uFEFF\\uFFA0\\uFFF9\\uFFFA\\uFFFB\\u00A6\\u2016\\u2223|,.;()[]{}=*#\\u2217+\\u00D7\\u00B7\\u00F7<>!?:~/\\\\\\\"'\\u00AB\\u00BB\\u201E\\u201D\\u201C\\u2018\\u2019`\\u00B4\\u201B\\u2032\\u203A\\u2039\\u2026\\u00BF\\u00A1\\u203C\\u2047\\u2048\\u2049\\u2122\\u00AE\\u203D\\u00B6\\uFFEB\\u2E2E\\u2012\\u2013\\u2014\\u2015\\u2500\\u3161\\u2713\\u25CF\\u25CB\\u25C6\\u27A2\\u25A0\\u25A1\\u2605\\u274F\\u2794\\u21B5\\u2756\\u25AA\\u2751\\u2022\\u2B9A\\u2265\\u2192\\u21FE\\u21C9\\u21D2\\u21E8\\u21DB\\u00B9\\u00B2\\u00B3\\u2070\\u2071\\u2074\\u2075\\u2076\\u2077\\u2078\\u2079\\t\\n\\r\\u000B\", wordTokenizer0.getTokenizingCharacters());\n    assertEquals(\" \\u00A0\\u115F\\u1160\\u1680\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u200B\\u200C\\u200D\\u200E\\u200F\\u2028\\u2029\\u202A\\u202B\\u202C\\u202D\\u202E\\u202F\\u205F\\u2060\\u2061\\u2062\\u2063\\u206A\\u206B\\u206C\\u206D\\u206E\\u206F\\u3000\\u3164\\uFEFF\\uFFA0\\uFFF9\\uFFFA\\uFFFB\\u00A6\\u2016\\u2223|,.;()[]{}=*#\\u2217+\\u00D7\\u00B7\\u00F7<>!?:~/\\\\\\\"'\\u00AB\\u00BB\\u201E\\u201D\\u201C\\u2018\\u2019`\\u00B4\\u201B\\u2032\\u203A\\u2039\\u2026\\u00BF\\u00A1\\u203C\\u2047\\u2048\\u2049\\u2122\\u00AE\\u203D\\u00B6\\uFFEB\\u2E2E\\u2012\\u2013\\u2014\\u2015\\u2500\\u3161\\u2713\\u25CF\\u25CB\\u25C6\\u27A2\\u25A0\\u25A1\\u2605\\u274F\\u2794\\u21B5\\u2756\\u25AA\\u2751\\u2022\\u2B9A\\u2265\\u2192\\u21FE\\u21C9\\u21D2\\u21E8\\u21DB\\u00B9\\u00B2\\u00B3\\u2070\\u2071\\u2074\\u2075\\u2076\\u2077\\u2078\\u2079\\t\\n\\r\\u000B\", string0);\n    boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();\n    assertFalse(boolean1 == boolean0);\n    assertTrue(boolean1);\n    List<String> list6 = wordTokenizer0.joinEMails(list5);\n    assertNotNull(list6);\n    assertFalse(list5.contains(string0));\n    assertFalse(list6.contains(string0));\n    assertEquals(\" \\u00A0\\u115F\\u1160\\u1680\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u200B\\u200C\\u200D\\u200E\\u200F\\u2028\\u2029\\u202A\\u202B\\u202C\\u202D\\u202E\\u202F\\u205F\\u2060\\u2061\\u2062\\u2063\\u206A\\u206B\\u206C\\u206D\\u206E\\u206F\\u3000\\u3164\\uFEFF\\uFFA0\\uFFF9\\uFFFA\\uFFFB\\u00A6\\u2016\\u2223|,.;()[]{}=*#\\u2217+\\u00D7\\u00B7\\u00F7<>!?:~/\\\\\\\"'\\u00AB\\u00BB\\u201E\\u201D\\u201C\\u2018\\u2019`\\u00B4\\u201B\\u2032\\u203A\\u2039\\u2026\\u00BF\\u00A1\\u203C\\u2047\\u2048\\u2049\\u2122\\u00AE\\u203D\\u00B6\\uFFEB\\u2E2E\\u2012\\u2013\\u2014\\u2015\\u2500\\u3161\\u2713\\u25CF\\u25CB\\u25C6\\u27A2\\u25A0\\u25A1\\u2605\\u274F\\u2794\\u21B5\\u2756\\u25AA\\u2751\\u2022\\u2B9A\\u2265\\u2192\\u21FE\\u21C9\\u21D2\\u21E8\\u21DB\\u00B9\\u00B2\\u00B3\\u2070\\u2071\\u2074\\u2075\\u2076\\u2077\\u2078\\u2079\\t\\n\\r\\u000B\", wordTokenizer0.getTokenizingCharacters());\n    assertFalse(list5.isEmpty());\n    assertEquals(3, list5.size());\n    assertFalse(list6.isEmpty());\n    assertEquals(3, list6.size());\n    assertTrue(list5.equals((Object) list2));\n    assertTrue(list5.equals((Object) list1));\n    assertTrue(list6.equals((Object) list2));\n    assertTrue(list6.equals((Object) list1));\n    assertSame(list5, list6);\n    assertSame(list5, list0);\n    assertSame(list5, list3);\n    assertSame(list5, list4);\n    assertSame(list6, list0);\n    assertSame(list6, list3);\n    assertSame(list6, list5);\n    assertSame(list6, list4);\n    boolean boolean2 = WordTokenizer.isUrl(\" \\u00A0\\u115F\\u1160\\u1680\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u200B\\u200C\\u200D\\u200E\\u200F\\u2028\\u2029\\u202A\\u202B\\u202C\\u202D\\u202E\\u202F\\u205F\\u2060\\u2061\\u2062\\u2063\\u206A\\u206B\\u206C\\u206D\\u206E\\u206F\\u3000\\u3164\\uFEFF\\uFFA0\\uFFF9\\uFFFA\\uFFFB\\u00A6\\u2016\\u2223|,.;()[]{}=*#\\u2217+\\u00D7\\u00B7\\u00F7<>!?:~/\\\"'\\u00AB\\u00BB\\u201E\\u201D\\u201C\\u2018\\u2019`\\u00B4\\u201B\\u2032\\u203A\\u2039\\u2026\\u00BF\\u00A1\\u203C\\u2047\\u2048\\u2049\\u2122\\u00AE\\u203D\\u00B6\\uFFEB\\u2E2E\\u2012\\u2013\\u2014\\u2015\\u2500\\u3161\\u2713\\u25CF\\u25CB\\u25C6\\u27A2\\u25A0\\u25A1\\u2605\\u274F\\u2794\\u21B5\\u2756\\u25AA\\u2751\\u2022\\u2B9A\\u2265\\u2192\\u21FE\\u21C9\\u21D2\\u21E8\\u21DB\\u00B9\\u00B2\\u00B3\\u2070\\u2071\\u2074\\u2075\\u2076\\u2077\\u2078\\u2079\\t\\n\\r\\u000B\");\n    assertFalse(boolean2 == boolean1);\n    assertTrue(boolean2 == boolean0);\n    assertFalse(boolean2);\n    boolean boolean3 = WordTokenizer.isUrl(\"org.languagetool.tokenizers.WordTokenizer\");\n    assertFalse(boolean3 == boolean1);\n    assertTrue(boolean3 == boolean2);\n    assertTrue(boolean3 == boolean0);\n    assertFalse(boolean3);\n    String string1 = wordTokenizer0.getTokenizingCharacters();\n    assertNotNull(string1);\n    assertEquals(\" \\u00A0\\u115F\\u1160\\u1680\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u200B\\u200C\\u200D\\u200E\\u200F\\u2028\\u2029\\u202A\\u202B\\u202C\\u202D\\u202E\\u202F\\u205F\\u2060\\u2061\\u2062\\u2063\\u206A\\u206B\\u206C\\u206D\\u206E\\u206F\\u3000\\u3164\\uFEFF\\uFFA0\\uFFF9\\uFFFA\\uFFFB\\u00A6\\u2016\\u2223|,.;()[]{}=*#\\u2217+\\u00D7\\u00B7\\u00F7<>!?:~/\\\\\\\"'\\u00AB\\u00BB\\u201E\\u201D\\u201C\\u2018\\u2019`\\u00B4\\u201B\\u2032\\u203A\\u2039\\u2026\\u00BF\\u00A1\\u203C\\u2047\\u2048\\u2049\\u2122\\u00AE\\u203D\\u00B6\\uFFEB\\u2E2E\\u2012\\u2013\\u2014\\u2015\\u2500\\u3161\\u2713\\u25CF\\u25CB\\u25C6\\u27A2\\u25A0\\u25A1\\u2605\\u274F\\u2794\\u21B5\\u2756\\u25AA\\u2751\\u2022\\u2B9A\\u2265\\u2192\\u21FE\\u21C9\\u21D2\\u21E8\\u21DB\\u00B9\\u00B2\\u00B3\\u2070\\u2071\\u2074\\u2075\\u2076\\u2077\\u2078\\u2079\\t\\n\\r\\u000B\", wordTokenizer0.getTokenizingCharacters());\n    assertEquals(\" \\u00A0\\u115F\\u1160\\u1680\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u200B\\u200C\\u200D\\u200E\\u200F\\u2028\\u2029\\u202A\\u202B\\u202C\\u202D\\u202E\\u202F\\u205F\\u2060\\u2061\\u2062\\u2063\\u206A\\u206B\\u206C\\u206D\\u206E\\u206F\\u3000\\u3164\\uFEFF\\uFFA0\\uFFF9\\uFFFA\\uFFFB\\u00A6\\u2016\\u2223|,.;()[]{}=*#\\u2217+\\u00D7\\u00B7\\u00F7<>!?:~/\\\\\\\"'\\u00AB\\u00BB\\u201E\\u201D\\u201C\\u2018\\u2019`\\u00B4\\u201B\\u2032\\u203A\\u2039\\u2026\\u00BF\\u00A1\\u203C\\u2047\\u2048\\u2049\\u2122\\u00AE\\u203D\\u00B6\\uFFEB\\u2E2E\\u2012\\u2013\\u2014\\u2015\\u2500\\u3161\\u2713\\u25CF\\u25CB\\u25C6\\u27A2\\u25A0\\u25A1\\u2605\\u274F\\u2794\\u21B5\\u2756\\u25AA\\u2751\\u2022\\u2B9A\\u2265\\u2192\\u21FE\\u21C9\\u21D2\\u21E8\\u21DB\\u00B9\\u00B2\\u00B3\\u2070\\u2071\\u2074\\u2075\\u2076\\u2077\\u2078\\u2079\\t\\n\\r\\u000B\", string1);\n    boolean boolean4 = WordTokenizer.isUrl(\"org.languagetool.tokenizers.WordTokenizer\");\n    assertTrue(boolean4 == boolean2);\n    assertFalse(boolean4 == boolean1);\n    assertTrue(boolean4 == boolean3);\n    assertTrue(boolean4 == boolean0);\n    assertFalse(boolean4);\n    List<String> list7 = wordTokenizer0.joinEMails(list0);\n    assertNotNull(list7);\n    assertFalse(list0.contains(string0));\n    assertFalse(list7.contains(string0));\n    assertEquals(\" \\u00A0\\u115F\\u1160\\u1680\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u200B\\u200C\\u200D\\u200E\\u200F\\u2028\\u2029\\u202A\\u202B\\u202C\\u202D\\u202E\\u202F\\u205F\\u2060\\u2061\\u2062\\u2063\\u206A\\u206B\\u206C\\u206D\\u206E\\u206F\\u3000\\u3164\\uFEFF\\uFFA0\\uFFF9\\uFFFA\\uFFFB\\u00A6\\u2016\\u2223|,.;()[]{}=*#\\u2217+\\u00D7\\u00B7\\u00F7<>!?:~/\\\\\\\"'\\u00AB\\u00BB\\u201E\\u201D\\u201C\\u2018\\u2019`\\u00B4\\u201B\\u2032\\u203A\\u2039\\u2026\\u00BF\\u00A1\\u203C\\u2047\\u2048\\u2049\\u2122\\u00AE\\u203D\\u00B6\\uFFEB\\u2E2E\\u2012\\u2013\\u2014\\u2015\\u2500\\u3161\\u2713\\u25CF\\u25CB\\u25C6\\u27A2\\u25A0\\u25A1\\u2605\\u274F\\u2794\\u21B5\\u2756\\u25AA\\u2751\\u2022\\u2B9A\\u2265\\u2192\\u21FE\\u21C9\\u21D2\\u21E8\\u21DB\\u00B9\\u00B2\\u00B3\\u2070\\u2071\\u2074\\u2075\\u2076\\u2077\\u2078\\u2079\\t\\n\\r\\u000B\", wordTokenizer0.getTokenizingCharacters());\n    assertEquals(3, list0.size());\n    assertFalse(list0.isEmpty());\n    assertFalse(list7.isEmpty());\n    assertEquals(3, list7.size());\n    assertTrue(list0.equals((Object) list2));\n    assertTrue(list0.equals((Object) list1));\n    assertTrue(list7.equals((Object) list2));\n    assertTrue(list7.equals((Object) list1));\n    assertSame(list0, list4);\n    assertSame(list0, list5);\n    assertSame(list0, list7);\n    assertSame(list0, list6);\n    assertSame(list0, list3);\n    assertSame(list7, list3);\n    assertSame(list7, list6);\n    assertSame(list7, list0);\n    assertSame(list7, list4);\n    assertSame(list7, list5);\n    String string2 = wordTokenizer0.getTokenizingCharacters();\n    assertNotNull(string2);\n    assertEquals(\" \\u00A0\\u115F\\u1160\\u1680\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u200B\\u200C\\u200D\\u200E\\u200F\\u2028\\u2029\\u202A\\u202B\\u202C\\u202D\\u202E\\u202F\\u205F\\u2060\\u2061\\u2062\\u2063\\u206A\\u206B\\u206C\\u206D\\u206E\\u206F\\u3000\\u3164\\uFEFF\\uFFA0\\uFFF9\\uFFFA\\uFFFB\\u00A6\\u2016\\u2223|,.;()[]{}=*#\\u2217+\\u00D7\\u00B7\\u00F7<>!?:~/\\\\\\\"'\\u00AB\\u00BB\\u201E\\u201D\\u201C\\u2018\\u2019`\\u00B4\\u201B\\u2032\\u203A\\u2039\\u2026\\u00BF\\u00A1\\u203C\\u2047\\u2048\\u2049\\u2122\\u00AE\\u203D\\u00B6\\uFFEB\\u2E2E\\u2012\\u2013\\u2014\\u2015\\u2500\\u3161\\u2713\\u25CF\\u25CB\\u25C6\\u27A2\\u25A0\\u25A1\\u2605\\u274F\\u2794\\u21B5\\u2756\\u25AA\\u2751\\u2022\\u2B9A\\u2265\\u2192\\u21FE\\u21C9\\u21D2\\u21E8\\u21DB\\u00B9\\u00B2\\u00B3\\u2070\\u2071\\u2074\\u2075\\u2076\\u2077\\u2078\\u2079\\t\\n\\r\\u000B\", wordTokenizer0.getTokenizingCharacters());\n    assertEquals(\" \\u00A0\\u115F\\u1160\\u1680\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u200B\\u200C\\u200D\\u200E\\u200F\\u2028\\u2029\\u202A\\u202B\\u202C\\u202D\\u202E\\u202F\\u205F\\u2060\\u2061\\u2062\\u2063\\u206A\\u206B\\u206C\\u206D\\u206E\\u206F\\u3000\\u3164\\uFEFF\\uFFA0\\uFFF9\\uFFFA\\uFFFB\\u00A6\\u2016\\u2223|,.;()[]{}=*#\\u2217+\\u00D7\\u00B7\\u00F7<>!?:~/\\\\\\\"'\\u00AB\\u00BB\\u201E\\u201D\\u201C\\u2018\\u2019`\\u00B4\\u201B\\u2032\\u203A\\u2039\\u2026\\u00BF\\u00A1\\u203C\\u2047\\u2048\\u2049\\u2122\\u00AE\\u203D\\u00B6\\uFFEB\\u2E2E\\u2012\\u2013\\u2014\\u2015\\u2500\\u3161\\u2713\\u25CF\\u25CB\\u25C6\\u27A2\\u25A0\\u25A1\\u2605\\u274F\\u2794\\u21B5\\u2756\\u25AA\\u2751\\u2022\\u2B9A\\u2265\\u2192\\u21FE\\u21C9\\u21D2\\u21E8\\u21DB\\u00B9\\u00B2\\u00B3\\u2070\\u2071\\u2074\\u2075\\u2076\\u2077\\u2078\\u2079\\t\\n\\r\\u000B\", string2);\n    List<String> list8 = wordTokenizer0.joinEMailsAndUrls(list5);\n    assertNotNull(list8);\n    assertFalse(list8.contains(string0));\n    assertFalse(list5.contains(string0));\n    assertEquals(\" \\u00A0\\u115F\\u1160\\u1680\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u200B\\u200C\\u200D\\u200E\\u200F\\u2028\\u2029\\u202A\\u202B\\u202C\\u202D\\u202E\\u202F\\u205F\\u2060\\u2061\\u2062\\u2063\\u206A\\u206B\\u206C\\u206D\\u206E\\u206F\\u3000\\u3164\\uFEFF\\uFFA0\\uFFF9\\uFFFA\\uFFFB\\u00A6\\u2016\\u2223|,.;()[]{}=*#\\u2217+\\u00D7\\u00B7\\u00F7<>!?:~/\\\\\\\"'\\u00AB\\u00BB\\u201E\\u201D\\u201C\\u2018\\u2019`\\u00B4\\u201B\\u2032\\u203A\\u2039\\u2026\\u00BF\\u00A1\\u203C\\u2047\\u2048\\u2049\\u2122\\u00AE\\u203D\\u00B6\\uFFEB\\u2E2E\\u2012\\u2013\\u2014\\u2015\\u2500\\u3161\\u2713\\u25CF\\u25CB\\u25C6\\u27A2\\u25A0\\u25A1\\u2605\\u274F\\u2794\\u21B5\\u2756\\u25AA\\u2751\\u2022\\u2B9A\\u2265\\u2192\\u21FE\\u21C9\\u21D2\\u21E8\\u21DB\\u00B9\\u00B2\\u00B3\\u2070\\u2071\\u2074\\u2075\\u2076\\u2077\\u2078\\u2079\\t\\n\\r\\u000B\", wordTokenizer0.getTokenizingCharacters());\n    assertEquals(3, list8.size());\n    assertFalse(list8.isEmpty());\n    assertFalse(list5.isEmpty());\n    assertEquals(3, list5.size());\n    assertTrue(list8.equals((Object) list3));\n    assertTrue(list8.equals((Object) list7));\n    assertTrue(list8.equals((Object) list6));\n    assertTrue(list8.equals((Object) list2));\n    assertTrue(list8.equals((Object) list1));\n    assertTrue(list8.equals((Object) list5));\n    assertTrue(list8.equals((Object) list4));\n    assertTrue(list8.equals((Object) list0));\n    assertTrue(list5.equals((Object) list2));\n    assertTrue(list5.equals((Object) list1));\n    assertNotSame(list8, list1);\n    assertNotSame(list8, list2);\n    assertSame(list5, list6);\n    assertSame(list5, list0);\n    assertSame(list5, list7);\n    assertSame(list5, list3);\n    assertSame(list5, list4);\n    List<String> list9 = wordTokenizer0.tokenize(\" \\u00A0\\u115F\\u1160\\u1680\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u200B\\u200C\\u200D\\u200E\\u200F\\u2028\\u2029\\u202A\\u202B\\u202C\\u202D\\u202E\\u202F\\u205F\\u2060\\u2061\\u2062\\u2063\\u206A\\u206B\\u206C\\u206D\\u206E\\u206F\\u3000\\u3164\\uFEFF\\uFFA0\\uFFF9\\uFFFA\\uFFFB\\u00A6\\u2016\\u2223|,.;()[]{}=*#\\u2217+\\u00D7\\u00B7\\u00F7<>!?:~/\\\"'\\u00AB\\u00BB\\u201E\\u201D\\u201C\\u2018\\u2019`\\u00B4\\u201B\\u2032\\u203A\\u2039\\u2026\\u00BF\\u00A1\\u203C\\u2047\\u2048\\u2049\\u2122\\u00AE\\u203D\\u00B6\\uFFEB\\u2E2E\\u2012\\u2013\\u2014\\u2015\\u2500\\u3161\\u2713\\u25CF\\u25CB\\u25C6\\u27A2\\u25A0\\u25A1\\u2605\\u274F\\u2794\\u21B5\\u2756\\u25AA\\u2751\\u2022\\u2B9A\\u2265\\u2192\\u21FE\\u21C9\\u21D2\\u21E8\\u21DB\\u00B9\\u00B2\\u00B3\\u2070\\u2071\\u2074\\u2075\\u2076\\u2077\\u2078\\u2079\\t\\n\\r\\u000B\");\n    assertNotNull(list9);\n    assertFalse(list9.contains(string0));\n    assertEquals(\" \\u00A0\\u115F\\u1160\\u1680\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u200B\\u200C\\u200D\\u200E\\u200F\\u2028\\u2029\\u202A\\u202B\\u202C\\u202D\\u202E\\u202F\\u205F\\u2060\\u2061\\u2062\\u2063\\u206A\\u206B\\u206C\\u206D\\u206E\\u206F\\u3000\\u3164\\uFEFF\\uFFA0\\uFFF9\\uFFFA\\uFFFB\\u00A6\\u2016\\u2223|,.;()[]{}=*#\\u2217+\\u00D7\\u00B7\\u00F7<>!?:~/\\\\\\\"'\\u00AB\\u00BB\\u201E\\u201D\\u201C\\u2018\\u2019`\\u00B4\\u201B\\u2032\\u203A\\u2039\\u2026\\u00BF\\u00A1\\u203C\\u2047\\u2048\\u2049\\u2122\\u00AE\\u203D\\u00B6\\uFFEB\\u2E2E\\u2012\\u2013\\u2014\\u2015\\u2500\\u3161\\u2713\\u25CF\\u25CB\\u25C6\\u27A2\\u25A0\\u25A1\\u2605\\u274F\\u2794\\u21B5\\u2756\\u25AA\\u2751\\u2022\\u2B9A\\u2265\\u2192\\u21FE\\u21C9\\u21D2\\u21E8\\u21DB\\u00B9\\u00B2\\u00B3\\u2070\\u2071\\u2074\\u2075\\u2076\\u2077\\u2078\\u2079\\t\\n\\r\\u000B\", wordTokenizer0.getTokenizingCharacters());\n    assertEquals(147, list9.size());\n    assertFalse(list9.isEmpty());\n    assertFalse(list9.equals((Object) list6));\n    assertFalse(list9.equals((Object) list8));\n    assertFalse(list9.equals((Object) list3));\n    assertFalse(list9.equals((Object) list2));\n    assertFalse(list9.equals((Object) list4));\n    assertFalse(list9.equals((Object) list5));\n    assertFalse(list9.equals((Object) list0));\n    assertFalse(list9.equals((Object) list7));\n    assertFalse(list9.equals((Object) list1));\n    assertNotSame(list9, list8);\n    assertNotSame(list9, list2);\n    assertNotSame(list9, list1);\n    boolean boolean5 = WordTokenizer.isUrl(\" \\u00A0\\u115F\\u1160\\u1680\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u200B\\u200C\\u200D\\u200E\\u200F\\u2028\\u2029\\u202A\\u202B\\u202C\\u202D\\u202E\\u202F\\u205F\\u2060\\u2061\\u2062\\u2063\\u206A\\u206B\\u206C\\u206D\\u206E\\u206F\\u3000\\u3164\\uFEFF\\uFFA0\\uFFF9\\uFFFA\\uFFFB\\u00A6\\u2016\\u2223|,.;()[]{}=*#\\u2217+\\u00D7\\u00B7\\u00F7<>!?:~/\\\"'\\u00AB\\u00BB\\u201E\\u201D\\u201C\\u2018\\u2019`\\u00B4\\u201B\\u2032\\u203A\\u2039\\u2026\\u00BF\\u00A1\\u203C\\u2047\\u2048\\u2049\\u2122\\u00AE\\u203D\\u00B6\\uFFEB\\u2E2E\\u2012\\u2013\\u2014\\u2015\\u2500\\u3161\\u2713\\u25CF\\u25CB\\u25C6\\u27A2\\u25A0\\u25A1\\u2605\\u274F\\u2794\\u21B5\\u2756\\u25AA\\u2751\\u2022\\u2B9A\\u2265\\u2192\\u21FE\\u21C9\\u21D2\\u21E8\\u21DB\\u00B9\\u00B2\\u00B3\\u2070\\u2071\\u2074\\u2075\\u2076\\u2077\\u2078\\u2079\\t\\n\\r\\u000B\");\n    assertFalse(boolean5 == boolean1);\n    assertTrue(boolean5 == boolean3);\n    assertTrue(boolean5 == boolean2);\n    assertTrue(boolean5 == boolean4);\n    assertTrue(boolean5 == boolean0);\n    assertFalse(boolean5);\n    List<String> list10 = wordTokenizer0.joinEMailsAndUrls(list8);\n    assertNotNull(list10);\n    assertFalse(list8.contains(string0));\n    assertFalse(list10.contains(string0));\n    assertFalse(list5.contains(string0));\n    assertEquals(\" \\u00A0\\u115F\\u1160\\u1680\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u200B\\u200C\\u200D\\u200E\\u200F\\u2028\\u2029\\u202A\\u202B\\u202C\\u202D\\u202E\\u202F\\u205F\\u2060\\u2061\\u2062\\u2063\\u206A\\u206B\\u206C\\u206D\\u206E\\u206F\\u3000\\u3164\\uFEFF\\uFFA0\\uFFF9\\uFFFA\\uFFFB\\u00A6\\u2016\\u2223|,.;()[]{}=*#\\u2217+\\u00D7\\u00B7\\u00F7<>!?:~/\\\\\\\"'\\u00AB\\u00BB\\u201E\\u201D\\u201C\\u2018\\u2019`\\u00B4\\u201B\\u2032\\u203A\\u2039\\u2026\\u00BF\\u00A1\\u203C\\u2047\\u2048\\u2049\\u2122\\u00AE\\u203D\\u00B6\\uFFEB\\u2E2E\\u2012\\u2013\\u2014\\u2015\\u2500\\u3161\\u2713\\u25CF\\u25CB\\u25C6\\u27A2\\u25A0\\u25A1\\u2605\\u274F\\u2794\\u21B5\\u2756\\u25AA\\u2751\\u2022\\u2B9A\\u2265\\u2192\\u21FE\\u21C9\\u21D2\\u21E8\\u21DB\\u00B9\\u00B2\\u00B3\\u2070\\u2071\\u2074\\u2075\\u2076\\u2077\\u2078\\u2079\\t\\n\\r\\u000B\", wordTokenizer0.getTokenizingCharacters());\n    assertEquals(3, list8.size());\n    assertFalse(list8.isEmpty());\n    assertEquals(3, list10.size());\n    assertFalse(list10.isEmpty());\n    assertFalse(list5.isEmpty());\n    assertEquals(3, list5.size());\n    assertTrue(list8.equals((Object) list3));\n    assertTrue(list8.equals((Object) list7));\n    assertTrue(list8.equals((Object) list6));\n    assertTrue(list8.equals((Object) list2));\n    assertTrue(list8.equals((Object) list1));\n    assertTrue(list8.equals((Object) list5));\n    assertFalse(list8.equals((Object) list9));\n    assertTrue(list8.equals((Object) list4));\n    assertTrue(list8.equals((Object) list0));\n    assertTrue(list10.equals((Object) list4));\n    assertTrue(list10.equals((Object) list6));\n    assertTrue(list10.equals((Object) list0));\n    assertTrue(list10.equals((Object) list7));\n    assertFalse(list10.equals((Object) list9));\n    assertTrue(list10.equals((Object) list2));\n    assertTrue(list10.equals((Object) list1));\n    assertTrue(list10.equals((Object) list5));\n    assertTrue(list10.equals((Object) list8));\n    assertTrue(list10.equals((Object) list3));\n    assertTrue(list5.equals((Object) list8));\n    assertTrue(list5.equals((Object) list2));\n    assertFalse(list5.equals((Object) list9));\n    assertTrue(list5.equals((Object) list1));\n    assertNotSame(list8, list1);\n    assertNotSame(list8, list2);\n    assertNotSame(list8, list9);\n    assertNotSame(list8, list10);\n    assertNotSame(list10, list8);\n    assertNotSame(list10, list1);\n    assertNotSame(list10, list9);\n    assertNotSame(list10, list2);\n    assertSame(list5, list6);\n    assertSame(list5, list0);\n    assertSame(list5, list7);\n    assertSame(list5, list3);\n    assertSame(list5, list4);\n    List<String> list11 = wordTokenizer0.joinEMailsAndUrls(list3);\n    assertNotNull(list11);\n    assertFalse(list3.contains(string0));\n    assertFalse(list11.contains(string0));\n    assertEquals(\" \\u00A0\\u115F\\u1160\\u1680\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u200B\\u200C\\u200D\\u200E\\u200F\\u2028\\u2029\\u202A\\u202B\\u202C\\u202D\\u202E\\u202F\\u205F\\u2060\\u2061\\u2062\\u2063\\u206A\\u206B\\u206C\\u206D\\u206E\\u206F\\u3000\\u3164\\uFEFF\\uFFA0\\uFFF9\\uFFFA\\uFFFB\\u00A6\\u2016\\u2223|,.;()[]{}=*#\\u2217+\\u00D7\\u00B7\\u00F7<>!?:~/\\\\\\\"'\\u00AB\\u00BB\\u201E\\u201D\\u201C\\u2018\\u2019`\\u00B4\\u201B\\u2032\\u203A\\u2039\\u2026\\u00BF\\u00A1\\u203C\\u2047\\u2048\\u2049\\u2122\\u00AE\\u203D\\u00B6\\uFFEB\\u2E2E\\u2012\\u2013\\u2014\\u2015\\u2500\\u3161\\u2713\\u25CF\\u25CB\\u25C6\\u27A2\\u25A0\\u25A1\\u2605\\u274F\\u2794\\u21B5\\u2756\\u25AA\\u2751\\u2022\\u2B9A\\u2265\\u2192\\u21FE\\u21C9\\u21D2\\u21E8\\u21DB\\u00B9\\u00B2\\u00B3\\u2070\\u2071\\u2074\\u2075\\u2076\\u2077\\u2078\\u2079\\t\\n\\r\\u000B\", wordTokenizer0.getTokenizingCharacters());\n    assertFalse(list3.isEmpty());\n    assertEquals(3, list3.size());\n    assertEquals(3, list11.size());\n    assertFalse(list11.isEmpty());\n    assertTrue(list3.equals((Object) list2));\n    assertTrue(list3.equals((Object) list10));\n    assertTrue(list3.equals((Object) list1));\n    assertFalse(list3.equals((Object) list9));\n    assertTrue(list3.equals((Object) list8));\n    assertTrue(list11.equals((Object) list5));\n    assertTrue(list11.equals((Object) list4));\n    assertTrue(list11.equals((Object) list2));\n    assertTrue(list11.equals((Object) list6));\n    assertTrue(list11.equals((Object) list8));\n    assertTrue(list11.equals((Object) list7));\n    assertTrue(list11.equals((Object) list10));\n    assertTrue(list11.equals((Object) list0));\n    assertTrue(list11.equals((Object) list3));\n    assertTrue(list11.equals((Object) list1));\n    assertFalse(list11.equals((Object) list9));\n    assertSame(list3, list0);\n    assertSame(list3, list6);\n    assertSame(list3, list5);\n    assertSame(list3, list7);\n    assertSame(list3, list4);\n    assertNotSame(list11, list2);\n    assertNotSame(list11, list10);\n    assertNotSame(list11, list1);\n    assertNotSame(list11, list8);\n    assertNotSame(list11, list9);\n    List<String> list12 = WordTokenizer.getProtocols();\n    assertNotNull(list12);\n    assertFalse(list12.contains(string0));\n    assertEquals(3, list12.size());\n    assertFalse(list12.isEmpty());\n    assertFalse(list12.equals((Object) list9));\n    assertTrue(list12.equals((Object) list2));\n    assertTrue(list12.equals((Object) list10));\n    assertTrue(list12.equals((Object) list11));\n    assertTrue(list12.equals((Object) list8));\n    assertTrue(list12.equals((Object) list1));\n    assertSame(list12, list0);\n    assertSame(list12, list6);\n    assertSame(list12, list4);\n    assertSame(list12, list3);\n    assertSame(list12, list7);\n    assertSame(list12, list5);\n    List<String> list13 = wordTokenizer0.tokenize(\"www. \\u00A0\\u115F\\u1160\\u1680\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u200B\\u200C\\u200D\\u200E\\u200F\\u2028\\u2029\\u202A\\u202B\\u202C\\u202D\\u202E\\u202F\\u205F\\u2060\\u2061\\u2062\\u2063\\u206A\\u206B\\u206C\\u206D\\u206E\\u206F\\u3000\\u3164\\uFEFF\\uFFA0\\uFFF9\\uFFFA\\uFFFB\\u00A6\\u2016\\u2223|,.;()[]{}=*#\\u2217+\\u00D7\\u00B7\\u00F7<>!?:~/\\\"'\\u00AB\\u00BB\\u201E\\u201D\\u201C\\u2018\\u2019`\\u00B4\\u201B\\u2032\\u203A\\u2039\\u2026\\u00BF\\u00A1\\u203C\\u2047\\u2048\\u2049\\u2122\\u00AE\\u203D\\u00B6\\uFFEB\\u2E2E\\u2012\\u2013\\u2014\\u2015\\u2500\\u3161\\u2713\\u25CF\\u25CB\\u25C6\\u27A2\\u25A0\\u25A1\\u2605\\u274F\\u2794\\u21B5\\u2756\\u25AA\\u2751\\u2022\\u2B9A\\u2265\\u2192\\u21FE\\u21C9\\u21D2\\u21E8\\u21DB\\u00B9\\u00B2\\u00B3\\u2070\\u2071\\u2074\\u2075\\u2076\\u2077\\u2078\\u2079\\t\\n\\r\\u000B\");\n    assertNotNull(list13);\n    assertFalse(list13.contains(string0));\n    assertEquals(\" \\u00A0\\u115F\\u1160\\u1680\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u200B\\u200C\\u200D\\u200E\\u200F\\u2028\\u2029\\u202A\\u202B\\u202C\\u202D\\u202E\\u202F\\u205F\\u2060\\u2061\\u2062\\u2063\\u206A\\u206B\\u206C\\u206D\\u206E\\u206F\\u3000\\u3164\\uFEFF\\uFFA0\\uFFF9\\uFFFA\\uFFFB\\u00A6\\u2016\\u2223|,.;()[]{}=*#\\u2217+\\u00D7\\u00B7\\u00F7<>!?:~/\\\\\\\"'\\u00AB\\u00BB\\u201E\\u201D\\u201C\\u2018\\u2019`\\u00B4\\u201B\\u2032\\u203A\\u2039\\u2026\\u00BF\\u00A1\\u203C\\u2047\\u2048\\u2049\\u2122\\u00AE\\u203D\\u00B6\\uFFEB\\u2E2E\\u2012\\u2013\\u2014\\u2015\\u2500\\u3161\\u2713\\u25CF\\u25CB\\u25C6\\u27A2\\u25A0\\u25A1\\u2605\\u274F\\u2794\\u21B5\\u2756\\u25AA\\u2751\\u2022\\u2B9A\\u2265\\u2192\\u21FE\\u21C9\\u21D2\\u21E8\\u21DB\\u00B9\\u00B2\\u00B3\\u2070\\u2071\\u2074\\u2075\\u2076\\u2077\\u2078\\u2079\\t\\n\\r\\u000B\", wordTokenizer0.getTokenizingCharacters());\n    assertFalse(list13.isEmpty());\n    assertEquals(149, list13.size());\n    assertFalse(list13.equals((Object) list10));\n    assertFalse(list13.equals((Object) list0));\n    assertFalse(list13.equals((Object) list1));\n    assertFalse(list13.equals((Object) list2));\n    assertFalse(list13.equals((Object) list3));\n    assertFalse(list13.equals((Object) list9));\n    assertFalse(list13.equals((Object) list6));\n    assertFalse(list13.equals((Object) list8));\n    assertFalse(list13.equals((Object) list11));\n    assertFalse(list13.equals((Object) list7));\n    assertFalse(list13.equals((Object) list12));\n    assertFalse(list13.equals((Object) list5));\n    assertFalse(list13.equals((Object) list4));\n    assertNotSame(list13, list9);\n    assertNotSame(list13, list10);\n    assertNotSame(list13, list8);\n    assertNotSame(list13, list11);\n    assertNotSame(list13, list1);\n    assertNotSame(list13, list2);\n}\n}"
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-language-modules/eo/src/test/java/org/languagetool/tokenizers/eo/EsperantoWordTokenizerTest###testTokenize",
        "generated_path": "EsperantoWordTokenizer_tokenize.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.languagetool.tokenizers.eo;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.util.List;\nimport java.util.NoSuchElementException;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport org.languagetool.tokenizers.eo.EsperantoWordTokenizer;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class EsperantoWordTokenizer_tokenize extends EsperantoWordTokenizer_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test0() throws Throwable {\n    EsperantoWordTokenizer esperantoWordTokenizer0 = new EsperantoWordTokenizer();\n    List<String> list0 = esperantoWordTokenizer0.tokenize(\"m's#+R~mB1&\");\n    assertFalse(list0.contains(\"m's#+R~mB1&\"));\n    assertEquals(7, list0.size());\n}\n}"
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-core/src/test/java/org/languagetool/rules/patterns/AbstractPatternRulePerformerTest###testTestAllReadings",
        "generated_path": "AbstractPatternRulePerformer_testAllReadings.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.languagetool.rules.patterns;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.util.ArrayList;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Vector;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport org.languagetool.AnalyzedSentence;\nimport org.languagetool.AnalyzedToken;\nimport org.languagetool.AnalyzedTokenReadings;\nimport org.languagetool.FakeLanguage;\nimport org.languagetool.rules.patterns.AbstractPatternRulePerformer;\nimport org.languagetool.rules.patterns.FalseFriendPatternRule;\nimport org.languagetool.rules.patterns.PatternRule;\nimport org.languagetool.rules.patterns.PatternRuleMatcher;\nimport org.languagetool.rules.patterns.PatternToken;\nimport org.languagetool.rules.patterns.PatternTokenMatcher;\nimport org.languagetool.rules.patterns.StringMatcher;\nimport org.languagetool.tagging.xx.DemoTagger;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class AbstractPatternRulePerformer_testAllReadings extends AbstractPatternRulePerformer_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    FakeLanguage fakeLanguage0 = new FakeLanguage(\"lambda$recover$3d2ec27e$1\", \"^%X(Ty0OPDS\");\n    LinkedList<PatternToken> linkedList0 = new LinkedList<PatternToken>();\n    PatternRule patternRule0 = new PatternRule(\"lambda$recover$3d2ec27e$1\", fakeLanguage0, linkedList0, \"^%X(Ty0OPDS\", \"lambda$recover$3d2ec27e$1\", \"(Ljava/util/Map;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\", \"lambda$recover$3d2ec27e$1\", false, false);\n    PatternRuleMatcher patternRuleMatcher0 = new PatternRuleMatcher(patternRule0, false);\n    AnalyzedTokenReadings[] analyzedTokenReadingsArray0 = new AnalyzedTokenReadings[9];\n    AnalyzedToken[] analyzedTokenArray0 = new AnalyzedToken[1];\n    DemoTagger demoTagger0 = new DemoTagger();\n    AnalyzedToken analyzedToken0 = demoTagger0.createToken(\"\", \"org.languagetool.rules.patterns.AbstractPatternRulePerformer\");\n    analyzedTokenArray0[0] = analyzedToken0;\n    AnalyzedTokenReadings analyzedTokenReadings0 = new AnalyzedTokenReadings(analyzedTokenArray0, (-753));\n    analyzedTokenReadingsArray0[0] = analyzedTokenReadings0;\n    StringMatcher stringMatcher0 = StringMatcher.create(\"lambda$recover$3d2ec27e$1\", false, false);\n    PatternToken patternToken0 = new PatternToken(true, stringMatcher0);\n    PatternTokenMatcher patternTokenMatcher0 = new PatternTokenMatcher(patternToken0);\n    patternRuleMatcher0.testAllReadings(analyzedTokenReadingsArray0, patternTokenMatcher0, patternTokenMatcher0, 0, (-1886), (-48));\n}\n}"
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-core/src/test/java/org/languagetool/rules/CleanOverlappingFilterTest###testFilter",
        "generated_path": "CleanOverlappingFilter_filter.java",
        "Compile_result": 1,
        "Test_result": 0,
        "Gen_Test": "package org.languagetool.rules;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.util.LinkedList;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.junit.runner.RunWith;\nimport org.languagetool.FakeLanguage;\nimport org.languagetool.JLanguageTool;\nimport org.languagetool.Language;\nimport org.languagetool.broker.ClassBroker;\nimport org.languagetool.rules.CleanOverlappingFilter;\nimport org.languagetool.rules.RemoteRuleConfig;\nimport org.languagetool.rules.RuleMatch;\nimport org.languagetool.rules.TestRemoteRule;\nimport org.languagetool.rules.UnsyncStack;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class CleanOverlappingFilter_filter extends CleanOverlappingFilter_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test3() throws Throwable {\n    FakeLanguage fakeLanguage0 = new FakeLanguage();\n    CleanOverlappingFilter cleanOverlappingFilter0 = new CleanOverlappingFilter(fakeLanguage0, false);\n    RemoteRuleConfig remoteRuleConfig0 = new RemoteRuleConfig();\n    TestRemoteRule testRemoteRule0 = new TestRemoteRule(fakeLanguage0, remoteRuleConfig0);\n    RuleMatch ruleMatch0 = new RuleMatch(testRemoteRule0, (-872), 60, \", waitIntervalFunctionInOpenState=\", \", \", false, \"yy-YY\");\n    LinkedList<RuleMatch> linkedList0 = new LinkedList<RuleMatch>();\n    linkedList0.addLast(ruleMatch0);\n    List<RuleMatch> list0 = cleanOverlappingFilter0.filter((List<RuleMatch>) linkedList0);\n    assertTrue(list0.contains(ruleMatch0));\n}\n}"
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-standalone/src/test/java/org/languagetool/rules/spelling/VagueSpellCheckerTest###testIsValidWord",
        "generated_path": "VagueSpellChecker_isValidWord.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.languagetool.rules.spelling;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport org.languagetool.FakeLanguage;\nimport org.languagetool.Language;\nimport org.languagetool.rules.spelling.VagueSpellChecker;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class VagueSpellChecker_isValidWord extends VagueSpellChecker_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void VagueSpellChecker_isValidWord() throws Throwable {\n    VagueSpellChecker vagueSpellChecker0 = new VagueSpellChecker();\n    // Undeclared exception!\n    try {\n        vagueSpellChecker0.isValidWord(\"picky\", (Language) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        //\n        // language cannot be null\n        //\n        verifyException(\"java.util.Objects\", e);\n    }\n}\n}"
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-language-modules/ru/src/test/java/org/languagetool/rules/ru/DateCheckFilterTest###testGetDayOfWeek",
        "generated_path": "DateCheckFilter_getDayOfWeek.java",
        "Compile_result": 1,
        "Test_result": 0,
        "Gen_Test": "package org.languagetool.rules.pl;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.util.Calendar;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport org.languagetool.rules.pl.DateCheckFilter;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class DateCheckFilter_getDayOfWeek extends DateCheckFilter_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test28() throws Throwable {\n    DateCheckFilter dateCheckFilter0 = new DateCheckFilter();\n    int int0 = dateCheckFilter0.getDayOfWeek(\"sobzj:zgefpmp5gj\");\n    assertEquals(7, int0);\n}\n}"
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-core/src/test/java/org/languagetool/AnalyzedSentenceTest###testCopy",
        "generated_path": "AnalyzedSentence_copy.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.languagetool;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Set;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.junit.runner.RunWith;\nimport org.languagetool.AnalyzedSentence;\nimport org.languagetool.AnalyzedToken;\nimport org.languagetool.AnalyzedTokenReadings;\nimport org.languagetool.chunking.ChunkTag;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class AnalyzedSentence_copy extends AnalyzedSentence_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    AnalyzedTokenReadings[] analyzedTokenReadingsArray0 = new AnalyzedTokenReadings[1];\n    AnalyzedToken analyzedToken0 = new AnalyzedToken(\"&-Rb?U00I%p.a\", \"lTRxOAf&LV!\", \"&-Rb?U00I%p.a\");\n    assertEquals(\"&-Rb?U00I%p.a\", analyzedToken0.getToken());\n    assertFalse(analyzedToken0.isWhitespaceBefore());\n    assertFalse(analyzedToken0.hasNoTag());\n    assertEquals(\"lTRxOAf&LV!\", analyzedToken0.getPOSTag());\n    assertEquals(\"&-Rb?U00I%p.a\", analyzedToken0.getLemma());\n    assertNotNull(analyzedToken0);\n    AnalyzedTokenReadings analyzedTokenReadings0 = new AnalyzedTokenReadings(analyzedToken0);\n    assertEquals(\"&-Rb?U00I%p.a\", analyzedToken0.getToken());\n    assertFalse(analyzedToken0.isWhitespaceBefore());\n    assertFalse(analyzedToken0.hasNoTag());\n    assertEquals(\"lTRxOAf&LV!\", analyzedToken0.getPOSTag());\n    assertEquals(\"&-Rb?U00I%p.a\", analyzedToken0.getLemma());\n    assertFalse(analyzedTokenReadings0.isFieldCode());\n    assertFalse(analyzedTokenReadings0.isWhitespace());\n    assertEquals(\"&-Rb?U00I%p.a\", analyzedTokenReadings0.getCleanToken());\n    assertEquals(0, analyzedTokenReadings0.getPosFix());\n    assertFalse(analyzedTokenReadings0.isSentenceEnd());\n    assertTrue(analyzedTokenReadings0.hasReading());\n    assertFalse(analyzedTokenReadings0.hasTypographicApostrophe());\n    assertEquals(1, analyzedTokenReadings0.getReadingsLength());\n    assertFalse(analyzedTokenReadings0.isLinebreak());\n    assertFalse(analyzedTokenReadings0.isPosTagUnknown());\n    assertTrue(analyzedTokenReadings0.hasSameLemmas());\n    assertFalse(analyzedTokenReadings0.isIgnoredBySpeller());\n    assertEquals(0, analyzedTokenReadings0.getStartPos());\n    assertEquals(0, analyzedTokenReadings0.getImmunizationSourceLine());\n    assertEquals(13, analyzedTokenReadings0.getEndPos());\n    assertTrue(analyzedTokenReadings0.isTagged());\n    assertEquals(\"\", analyzedTokenReadings0.getWhitespaceBefore());\n    assertEquals(\"\", analyzedTokenReadings0.getHistoricalAnnotations());\n    assertEquals(\"&-Rb?U00I%p.a\", analyzedTokenReadings0.getToken());\n    assertFalse(analyzedTokenReadings0.isParagraphEnd());\n    assertFalse(analyzedTokenReadings0.isSentenceStart());\n    assertFalse(analyzedTokenReadings0.isWhitespaceBefore());\n    assertNotNull(analyzedTokenReadings0);\n    analyzedTokenReadingsArray0[0] = analyzedTokenReadings0;\n    AnalyzedSentence analyzedSentence0 = new AnalyzedSentence(analyzedTokenReadingsArray0, analyzedTokenReadingsArray0);\n    assertEquals(13, analyzedSentence0.getCorrectedTextLength());\n    assertEquals(1, analyzedTokenReadingsArray0.length);\n    assertNotNull(analyzedSentence0);\n    AnalyzedSentence analyzedSentence1 = new AnalyzedSentence(analyzedTokenReadingsArray0, analyzedTokenReadingsArray0);\n    assertEquals(13, analyzedSentence1.getCorrectedTextLength());\n    assertEquals(1, analyzedTokenReadingsArray0.length);\n    assertTrue(analyzedSentence1.equals((Object) analyzedSentence0));\n    assertNotNull(analyzedSentence1);\n    AnalyzedSentence analyzedSentence2 = analyzedSentence0.copy(analyzedSentence1);\n    assertEquals(13, analyzedSentence0.getCorrectedTextLength());\n    assertEquals(13, analyzedSentence1.getCorrectedTextLength());\n    assertEquals(13, analyzedSentence2.getCorrectedTextLength());\n    assertEquals(1, analyzedTokenReadingsArray0.length);\n    assertTrue(analyzedSentence0.equals((Object) analyzedSentence1));\n    assertTrue(analyzedSentence1.equals((Object) analyzedSentence0));\n    assertTrue(analyzedSentence2.equals((Object) analyzedSentence1));\n    assertTrue(analyzedSentence2.equals((Object) analyzedSentence0));\n    assertNotNull(analyzedSentence2);\n    assertNotSame(analyzedSentence0, analyzedSentence2);\n    assertNotSame(analyzedSentence0, analyzedSentence1);\n    assertNotSame(analyzedSentence1, analyzedSentence2);\n    assertNotSame(analyzedSentence1, analyzedSentence0);\n    assertNotSame(analyzedSentence2, analyzedSentence0);\n    assertNotSame(analyzedSentence2, analyzedSentence1);\n}\n}"
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-core/src/test/java/org/languagetool/AnalyzedTokenReadingsTest###testMatchesPosTagRegex",
        "generated_path": "AnalyzedTokenReadings_matchesPosTagRegex.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.languagetool;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.google.common.collect.BoundType;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Stack;\nimport java.util.Vector;\nimport java.util.function.Consumer;\nimport java.util.regex.PatternSyntaxException;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.junit.runner.RunWith;\nimport org.languagetool.AnalyzedToken;\nimport org.languagetool.AnalyzedTokenReadings;\nimport org.languagetool.chunking.ChunkTag;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class AnalyzedTokenReadings_matchesPosTagRegex extends AnalyzedTokenReadings_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test010() throws Throwable {\n    AnalyzedToken analyzedToken0 = new AnalyzedToken(\"\", \"\", \"\");\n    AnalyzedTokenReadings analyzedTokenReadings0 = new AnalyzedTokenReadings(analyzedToken0, 69);\n    AnalyzedToken analyzedToken1 = new AnalyzedToken(\"\", \"\", \"Bimgn8VCP\");\n    analyzedToken0.matches(analyzedToken1);\n    analyzedToken1.setNoPOSTag(true);\n    analyzedTokenReadings0.ignoreSpelling();\n    analyzedTokenReadings0.getEndPos();\n    analyzedToken1.equals((Object) null);\n    analyzedTokenReadings0.matchesPosTagRegex(\"Bimgn8VCP\");\n    analyzedToken1.matches(analyzedToken0);\n    analyzedToken1.equals(\"Bimgn8VCP\");\n    AnalyzedToken analyzedToken2 = new AnalyzedToken(\"\", \"7Ul8$#kH?s\\\"Ler\", \"f3 is null\");\n    analyzedTokenReadings0.hasPosTagAndLemma(\"\", \"\");\n    analyzedToken2.setNoPOSTag(false);\n    analyzedTokenReadings0.removeReading(analyzedToken2, \"\");\n    analyzedTokenReadings0.isNonWord();\n    analyzedTokenReadings0.hasPartialPosTag(\"_FH9qu0\");\n    analyzedToken0.toString();\n    analyzedTokenReadings0.readingWithTagRegex(\"\");\n    analyzedTokenReadings0.matchesPosTagRegex(\"W0cpR|OmCwzaP\");\n    analyzedTokenReadings0.setTypographicApostrophe();\n    Integer integer0 = new Integer(69);\n    analyzedTokenReadings0.setPosFix((-820));\n    analyzedTokenReadings0.readingWithLemma(\"\\u0002\");\n    analyzedTokenReadings0.readingWithLemma(\"lambda$null$7e061a81$2\");\n    analyzedTokenReadings0.matchesPosTagRegex(\"y25YItoPG*C\\\"\");\n}\n}"
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-core/src/test/java/org/languagetool/rules/patterns/PatternRuleXmlCreatorTest###testToXML",
        "generated_path": "PatternRuleXmlCreator_toXML.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.languagetool.rules.patterns;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.io.PipedInputStream;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.junit.runner.RunWith;\nimport org.languagetool.FakeLanguage;\nimport org.languagetool.JLanguageTool;\nimport org.languagetool.Language;\nimport org.languagetool.broker.ResourceDataBroker;\nimport org.languagetool.rules.patterns.PatternRuleId;\nimport org.languagetool.rules.patterns.PatternRuleXmlCreator;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class PatternRuleXmlCreator_toXML extends PatternRuleXmlCreator_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void PatternRuleXmlCreator_toXML() throws Throwable {\n    PatternRuleXmlCreator patternRuleXmlCreator0 = new PatternRuleXmlCreator();\n    // Undeclared exception!\n    try {\n        patternRuleXmlCreator0.toXML((PatternRuleId) null, (Language) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        //\n        // no message in exception (getMessage() returned null)\n        //\n        verifyException(\"org.languagetool.rules.patterns.PatternRuleXmlCreator\", e);\n    }\n}\n}"
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-language-modules/de/src/test/java/org/languagetool/rules/de/DateCheckFilterTest###testGetMonth",
        "generated_path": "DateCheckFilter_getMonth.java",
        "Compile_result": 1,
        "Test_result": 0,
        "Gen_Test": "package org.languagetool.rules.pl;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.util.Calendar;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport org.languagetool.rules.pl.DateCheckFilter;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class DateCheckFilter_getMonth extends DateCheckFilter_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    DateCheckFilter dateCheckFilter0 = new DateCheckFilter();\n    int int0 = dateCheckFilter0.getMonth(\"XII\");\n    assertEquals(12, int0);\n}\n}"
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-wikipedia/src/test/java/org/languagetool/dev/wikipedia/WikipediaQuickCheckTest###testCheckWikipediaMarkup",
        "generated_path": "WikipediaQuickCheck_checkWikipediaMarkup.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.languagetool.dev.wikipedia;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.io.File;\nimport java.net.MalformedURLException;\nimport java.net.URI;\nimport java.net.URISyntaxException;\nimport java.net.URL;\nimport java.net.URLStreamHandler;\nimport java.nio.file.FileSystem;\nimport java.nio.file.Path;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.MissingResourceException;\nimport java.util.ResourceBundle;\nimport java.util.Vector;\nimport org.apache.lucene.mockfile.FilterFileSystem;\nimport org.apache.lucene.mockfile.FilterPath;\nimport org.apache.lucene.mockfile.VerboseFS;\nimport org.apache.lucene.util.InfoStream;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.System;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.mock.java.io.MockFile;\nimport org.evosuite.runtime.mock.java.net.MockURI;\nimport org.evosuite.runtime.mock.java.net.MockURL;\nimport org.junit.runner.RunWith;\nimport org.languagetool.AnalyzedSentence;\nimport org.languagetool.AnalyzedToken;\nimport org.languagetool.AnalyzedTokenReadings;\nimport org.languagetool.GlobalConfig;\nimport org.languagetool.JLanguageTool;\nimport org.languagetool.Language;\nimport org.languagetool.chunking.Chunker;\nimport org.languagetool.dev.wikipedia.ErrorMarker;\nimport org.languagetool.dev.wikipedia.MediaWikiContent;\nimport org.languagetool.dev.wikipedia.RuleMatchApplication;\nimport org.languagetool.dev.wikipedia.WikipediaQuickCheck;\nimport org.languagetool.language.AmericanEnglish;\nimport org.languagetool.language.AustrianGerman;\nimport org.languagetool.language.BalearicCatalan;\nimport org.languagetool.language.BelgianDutch;\nimport org.languagetool.language.Catalan;\nimport org.languagetool.language.Dutch;\nimport org.languagetool.language.Esperanto;\nimport org.languagetool.language.French;\nimport org.languagetool.language.Galician;\nimport org.languagetool.language.Italian;\nimport org.languagetool.language.SimpleGerman;\nimport org.languagetool.language.Spanish;\nimport org.languagetool.language.Ukrainian;\nimport org.languagetool.language.Ukrainian1992;\nimport org.languagetool.language.ValencianCatalan;\nimport org.languagetool.noop.NoopLanguage;\nimport org.languagetool.rules.Rule;\nimport org.languagetool.rules.RuleMatch;\nimport org.languagetool.rules.SentenceWhitespaceRule;\nimport org.languagetool.rules.SuggestedReplacement;\nimport org.languagetool.rules.patterns.PatternRule;\nimport org.languagetool.rules.patterns.PatternToken;\nimport org.languagetool.rules.spelling.SpellingCheckRule;\nimport org.languagetool.tagging.ar.ArabicTagger;\nimport org.languagetool.tagging.de.GermanTagger;\nimport org.languagetool.tagging.disambiguation.MultiWordChunker2;\nimport org.languagetool.tagging.eo.EsperantoTagger;\nimport org.languagetool.tagging.ja.JapaneseTagger;\nimport org.languagetool.tagging.xx.DemoTagger;\nimport org.languagetool.tokenizers.SentenceTokenizer;\nimport org.languagetool.tokenizers.Tokenizer;\nimport org.languagetool.tokenizers.WordTokenizer;\nimport org.xml.sax.Attributes;\nimport org.xml.sax.SAXParseException;\nimport org.xml.sax.ext.Attributes2Impl;\nimport org.xml.sax.helpers.AttributesImpl;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class WikipediaQuickCheck_checkWikipediaMarkup extends WikipediaQuickCheck_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test22() throws Throwable {\n    WikipediaQuickCheck wikipediaQuickCheck0 = new WikipediaQuickCheck((File) null, (-1));\n    URL uRL0 = null;\n    MediaWikiContent mediaWikiContent0 = new MediaWikiContent(\"No content but redirect found at '\", \";mM+_Sn~@i7JW\");\n    Esperanto esperanto0 = new Esperanto();\n    ErrorMarker errorMarker0 = new ErrorMarker(\"'(GMQ\", \";mM+_Sn~@i7JW\");\n    wikipediaQuickCheck0.checkWikipediaMarkup((URL) null, mediaWikiContent0, esperanto0, errorMarker0);\n    String string0 = \"Jbc'3'(m`EStj_ofLT\";\n    wikipediaQuickCheck0.getPlainText(string0);\n    WikipediaQuickCheck.RevisionContentHandler wikipediaQuickCheck_RevisionContentHandler0 = wikipediaQuickCheck0.new RevisionContentHandler();\n    char[] charArray0 = new char[5];\n    char char0 = 'r';\n}\n}"
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-core/src/test/java/org/languagetool/tagging/ner/NERServiceTest###testParseBuffer",
        "generated_path": "NERService_parseBuffer.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.languagetool.tagging.ner;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport org.languagetool.tagging.ner.NERService;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class NERService_parseBuffer extends NERService_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    NERService nERService0 = new NERService(\"\");\n    List<NERService.Span> list0 = nERService0.parseBuffer(\"\");\n    assertTrue(list0.isEmpty());\n}\n}"
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-standalone/src/test/java/org/languagetool/LanguageAnnotatorTest###testDetectLanguages",
        "generated_path": "LanguageAnnotator_detectLanguages.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.languagetool;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Stack;\nimport java.util.Vector;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.io.MockFile;\nimport org.junit.runner.RunWith;\nimport org.languagetool.DynamicHunspellLanguage;\nimport org.languagetool.DynamicMorfologikLanguage;\nimport org.languagetool.FakeLanguage;\nimport org.languagetool.FragmentWithLanguage;\nimport org.languagetool.Language;\nimport org.languagetool.LanguageAnnotator;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class LanguageAnnotator_detectLanguages extends LanguageAnnotator_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    Stack<Language> stack0 = new Stack<Language>();\n    FakeLanguage fakeLanguage0 = new FakeLanguage(\"$1wzPMD'H]Bgb9%Fqt\", \"$1wzPMD'H]Bgb9%Fqt\");\n    stack0.add((Language) fakeLanguage0);\n    MockFile mockFile0 = new MockFile(\";*rENB_o<6s U(`=\");\n    DynamicHunspellLanguage dynamicHunspellLanguage0 = new DynamicHunspellLanguage(\"$1wzPMD'H]Bgb9%Fqt\", \"[\\\"\\u201E\\u201C\\u201D\\u00BB\\u00AB]\", mockFile0);\n    LanguageAnnotator languageAnnotator0 = new LanguageAnnotator();\n    languageAnnotator0.detectLanguages(\"[\\\"\\u201E\\u201C\\u201D\\u00BB\\u00AB]\", dynamicHunspellLanguage0, stack0);\n}\n}"
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-core/src/test/java/org/languagetool/rules/patterns/RegexPatternRuleTest###testMatch",
        "generated_path": "RegexPatternRule_match.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.languagetool.rules.patterns;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.util.regex.Pattern;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport org.languagetool.AnalyzedSentence;\nimport org.languagetool.AnalyzedToken;\nimport org.languagetool.AnalyzedTokenReadings;\nimport org.languagetool.FakeLanguage;\nimport org.languagetool.rules.RuleMatch;\nimport org.languagetool.rules.patterns.Match;\nimport org.languagetool.rules.patterns.RegexAntiPatternFilter;\nimport org.languagetool.rules.patterns.RegexPatternRule;\nimport org.languagetool.tagging.xx.DemoTagger;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class RegexPatternRule_match extends RegexPatternRule_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test04() throws Throwable {\n    FakeLanguage fakeLanguage0 = new FakeLanguage(\"\");\n    Pattern pattern0 = Pattern.compile(\"\", (-121));\n    RegexPatternRule regexPatternRule0 = new RegexPatternRule(\"\", \"\", \"\", \"Functions.constant(\", \"Functions.constant(\", fakeLanguage0, pattern0, 0);\n    AnalyzedTokenReadings[] analyzedTokenReadingsArray0 = new AnalyzedTokenReadings[2];\n    AnalyzedToken analyzedToken0 = new AnalyzedToken(\"\", \"Functions.constant(\", \"\");\n    AnalyzedTokenReadings analyzedTokenReadings0 = new AnalyzedTokenReadings(analyzedToken0, (-5840));\n    analyzedTokenReadingsArray0[0] = analyzedTokenReadings0;\n    analyzedTokenReadingsArray0[1] = analyzedTokenReadings0;\n    AnalyzedSentence analyzedSentence0 = new AnalyzedSentence(analyzedTokenReadingsArray0);\n    // Undeclared exception!\n    try {\n        regexPatternRule0.match(analyzedSentence0);\n        fail(\"Expecting exception: StringIndexOutOfBoundsException\");\n    } catch (StringIndexOutOfBoundsException e) {\n    }\n}\n}"
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-core/src/test/java/org/languagetool/rules/patterns/RuleFilterEvaluatorTest###testGetResolvedArguments",
        "generated_path": "RuleFilterEvaluator_getResolvedArguments.java",
        "Compile_result": 1,
        "Test_result": 0,
        "Gen_Test": "package org.languagetool.rules.patterns;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Vector;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport org.languagetool.AnalyzedTokenReadings;\nimport org.languagetool.rules.RuleMatch;\nimport org.languagetool.rules.patterns.ApostropheTypeFilter;\nimport org.languagetool.rules.patterns.MockFilter;\nimport org.languagetool.rules.patterns.RuleFilter;\nimport org.languagetool.rules.patterns.RuleFilterEvaluator;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class RuleFilterEvaluator_getResolvedArguments extends RuleFilterEvaluator_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test2() throws Throwable {\n    MockFilter mockFilter0 = new MockFilter();\n    RuleFilterEvaluator ruleFilterEvaluator0 = new RuleFilterEvaluator(mockFilter0);\n    AnalyzedTokenReadings[] analyzedTokenReadingsArray0 = new AnalyzedTokenReadings[5];\n    Vector<Integer> vector0 = new Vector<Integer>();\n    Map<String, String> map0 = ruleFilterEvaluator0.getResolvedArguments(\"[v:w\", analyzedTokenReadingsArray0, 711, vector0);\n    assertEquals(1, map0.size());\n}\n}"
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-core/src/test/java/org/languagetool/rules/ConfusionPairTest###testEquals",
        "generated_path": "ConfusionPair_equals.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.languagetool.rules;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport org.languagetool.rules.ConfusionPair;\nimport org.languagetool.rules.ConfusionString;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class ConfusionPair_equals extends ConfusionPair_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    ConfusionString confusionString0 = new ConfusionString(\"@RU7Ro\", \"@RU7Ro\");\n    ConfusionPair confusionPair0 = new ConfusionPair(confusionString0, confusionString0, 2L, true);\n    Long long0 = new Long(904L);\n    ConfusionPair confusionPair1 = new ConfusionPair(\"@RU7Ro\", \"@RU7Ro\", long0, false);\n    boolean boolean0 = confusionPair0.equals(confusionPair1);\n    assertTrue(confusionPair0.isBidirectional());\n    assertFalse(boolean0);\n    assertEquals(2L, confusionPair0.getFactor());\n    assertFalse(confusionPair1.isBidirectional());\n}\n}"
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-gui-commons/src/test/java/org/languagetool/gui/ToolsTest###testShortenComment",
        "generated_path": "Tools_shortenComment.java",
        "Compile_result": 1,
        "Test_result": 0,
        "Gen_Test": "package org.languagetool.gui;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport io.vavr.API;\nimport io.vavr.Lazy;\nimport java.awt.Component;\nimport java.awt.Dialog;\nimport java.awt.Dimension;\nimport java.awt.Frame;\nimport java.awt.Graphics;\nimport java.awt.GraphicsConfiguration;\nimport java.awt.HeadlessException;\nimport java.awt.Label;\nimport java.awt.Point;\nimport java.awt.SystemColor;\nimport java.awt.Window;\nimport java.beans.PropertyChangeListener;\nimport java.beans.VetoableChangeListener;\nimport java.beans.VetoableChangeListenerProxy;\nimport java.io.File;\nimport java.io.PrintStream;\nimport java.io.PrintWriter;\nimport java.net.MalformedURLException;\nimport java.net.URI;\nimport java.net.URL;\nimport java.net.URLStreamHandler;\nimport java.sql.BatchUpdateException;\nimport java.sql.ClientInfoStatus;\nimport java.sql.SQLClientInfoException;\nimport java.sql.SQLDataException;\nimport java.sql.SQLException;\nimport java.sql.SQLFeatureNotSupportedException;\nimport java.sql.SQLNonTransientConnectionException;\nimport java.sql.SQLRecoverableException;\nimport java.sql.SQLSyntaxErrorException;\nimport java.sql.SQLTimeoutException;\nimport java.sql.SQLTransactionRollbackException;\nimport java.sql.SQLTransientConnectionException;\nimport java.sql.SQLTransientException;\nimport java.sql.SQLWarning;\nimport java.util.ArrayList;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.ResourceBundle;\nimport java.util.Set;\nimport java.util.concurrent.TimeUnit;\nimport javax.swing.Icon;\nimport javax.swing.JApplet;\nimport javax.swing.JComboBox;\nimport javax.swing.JDialog;\nimport javax.swing.JFrame;\nimport javax.swing.JInternalFrame;\nimport javax.swing.JMenu;\nimport javax.swing.JOptionPane;\nimport javax.swing.JPopupMenu;\nimport javax.swing.JTextPane;\nimport javax.swing.JToolTip;\nimport javax.swing.MenuElement;\nimport javax.swing.border.Border;\nimport javax.swing.event.AncestorListener;\nimport javax.swing.filechooser.FileFilter;\nimport javax.swing.filechooser.FileNameExtensionFilter;\nimport javax.swing.filechooser.FileSystemView;\nimport javax.swing.plaf.metal.MetalTreeUI;\nimport javax.swing.plaf.multi.MultiMenuItemUI;\nimport javax.swing.plaf.synth.SynthSplitPaneUI;\nimport javax.swing.text.DefaultEditorKit;\nimport javax.swing.text.DefaultStyledDocument;\nimport javax.swing.text.Element;\nimport javax.swing.text.JTextComponent;\nimport javax.swing.text.Keymap;\nimport javax.swing.text.Style;\nimport javax.swing.text.StyledDocument;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.mock.java.io.MockFile;\nimport org.evosuite.runtime.mock.java.io.MockPrintStream;\nimport org.evosuite.runtime.mock.java.io.MockPrintWriter;\nimport org.evosuite.runtime.mock.java.net.MockURI;\nimport org.evosuite.runtime.mock.java.net.MockURL;\nimport org.evosuite.runtime.mock.javax.swing.MockJFileChooser;\nimport org.evosuite.runtime.mock.javax.swing.filechooser.MockFileSystemView;\nimport org.junit.runner.RunWith;\nimport org.languagetool.GlobalConfig;\nimport org.languagetool.JLanguageTool;\nimport org.languagetool.Language;\nimport org.languagetool.ResultCache;\nimport org.languagetool.Tag;\nimport org.languagetool.UserConfig;\nimport org.languagetool.broker.DefaultResourceDataBroker;\nimport org.languagetool.gui.Configuration;\nimport org.languagetool.gui.Tools;\nimport org.languagetool.noop.NoopLanguage;\nimport org.languagetool.rules.CommaWhitespaceRule;\nimport org.languagetool.rules.EmptyLineRule;\nimport org.languagetool.rules.IncorrectExample;\nimport org.languagetool.rules.MultipleWhitespaceRule;\nimport org.languagetool.rules.ParagraphRepeatBeginningRule;\nimport org.languagetool.rules.PunctuationMarkAtParagraphEnd2;\nimport org.languagetool.rules.ReadabilityRule;\nimport org.languagetool.rules.Rule;\nimport org.languagetool.rules.TestRemoteRule;\nimport org.languagetool.rules.WhiteSpaceBeforeParagraphEnd;\nimport org.languagetool.rules.patterns.FalseFriendPatternRule;\nimport org.languagetool.rules.patterns.PatternToken;\nimport org.languagetool.tokenizers.SentenceTokenizer;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class Tools_shortenComment extends Tools_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    String string0 = \"\";\n    String string1 = Tools.shortenComment(\"\");\n    String string2 = Tools.shortenComment(\"\");\n    String string3 = Tools.getLabel(\"\");\n    Frame frame0 = null;\n    MockJFileChooser mockJFileChooser0 = new MockJFileChooser(\"\");\n    FileFilter fileFilter0 = mockJFileChooser0.getFileFilter();\n    File file0 = Tools.openFileDialog(frame0, fileFilter0);\n    File file1 = Tools.openDirectoryDialog(frame0, file0);\n    Exception exception0 = null;\n    Tools.showErrorMessage(exception0, mockJFileChooser0);\n    JTextPane jTextPane0 = new JTextPane();\n    Tools.addHyperlinkListener(jTextPane0);\n    Tools.getLabel(string3);\n    Tools.openDirectoryDialog(frame0, file1);\n    Dialog.ModalityType dialog_ModalityType0 = Dialog.ModalityType.TOOLKIT_MODAL;\n    GraphicsConfiguration graphicsConfiguration0 = jTextPane0.getGraphicsConfiguration();\n    JDialog jDialog0 = new JDialog(frame0, string2, dialog_ModalityType0, graphicsConfiguration0);\n    JDialog jDialog1 = new JDialog((Dialog) jDialog0, string0);\n    Tools.centerDialog(jDialog1);\n    Tools.addHyperlinkListener(jTextPane0);\n    Tools.showErrorMessage(exception0, jDialog0);\n    String string4 = \"Yiw%F`m<Y5\";\n    Tools.getMnemonic(string4);\n    Component component0 = null;\n    String string5 = \"<br/><br/>\";\n    Locale locale0 = Locale.US;\n    ResourceBundle resourceBundle0 = ResourceBundle.getBundle(string5, locale0);\n    NoopLanguage noopLanguage0 = new NoopLanguage();\n    Language language0 = noopLanguage0.getDefaultLanguageVariant();\n    WhiteSpaceBeforeParagraphEnd whiteSpaceBeforeParagraphEnd0 = new WhiteSpaceBeforeParagraphEnd(resourceBundle0, language0);\n    String string6 = null;\n    String string7 = \"<Xe7$l(cwkF:<i~M\";\n    DefaultResourceDataBroker defaultResourceDataBroker0 = new DefaultResourceDataBroker(string6, string7);\n    URL uRL0 = defaultResourceDataBroker0.getFromRulesDirAsUrl(string5);\n    URL uRL1 = MockURL.URL(uRL0, noopLanguage0.SHORT_CODE);\n    String string8 = \"<marker>.*?</marker>\";\n    Tools.showRuleInfoDialog(component0, string1, string5, whiteSpaceBeforeParagraphEnd0, uRL1, resourceBundle0, string8);\n}\n}"
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-language-modules/ro/src/test/java/org/languagetool/tokenizers/ro/RomanianWordTokenizerTest###testTokenize",
        "generated_path": "RomanianWordTokenizer_tokenize.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.languagetool.tokenizers.ro;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport org.languagetool.tokenizers.ro.RomanianWordTokenizer;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class RomanianWordTokenizer_tokenize extends RomanianWordTokenizer_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test0() throws Throwable {\n    RomanianWordTokenizer romanianWordTokenizer0 = new RomanianWordTokenizer();\n    List<String> list0 = romanianWordTokenizer0.tokenize(\"\");\n    assertTrue(list0.isEmpty());\n}\n}"
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-dev/src/test/java/org/languagetool/dev/eval/AfterTheDeadlineEvaluatorTest###testIsExpectedErrorFound",
        "generated_path": "AfterTheDeadlineEvaluator_isExpectedErrorFound.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "package org.languagetool.dev.eval;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.System;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.junit.runner.RunWith;\nimport org.languagetool.JLanguageTool;\nimport org.languagetool.broker.ClassBroker;\nimport org.languagetool.dev.eval.AfterTheDeadlineEvaluator;\nimport org.languagetool.rules.IncorrectExample;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class AfterTheDeadlineEvaluator_isExpectedErrorFound extends AfterTheDeadlineEvaluator_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void AfterTheDeadlineEvaluator_isExpectedErrorFound() throws Throwable {\n    AfterTheDeadlineEvaluator afterTheDeadlineEvaluator0 = new AfterTheDeadlineEvaluator(\"\");\n    JLanguageTool.getDataBroker();\n    // Undeclared exception!\n    try {\n        afterTheDeadlineEvaluator0.isExpectedErrorFound((IncorrectExample) null, \"\");\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        //\n        // no message in exception (getMessage() returned null)\n        //\n        verifyException(\"org.languagetool.dev.eval.AfterTheDeadlineEvaluator\", e);\n    }\n}\n}"
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-standalone/src/test/java/org/languagetool/LanguagesTest###testGetLanguageForLocale",
        "generated_path": "Languages_getLanguageForLocale.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.languagetool;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.io.File;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.ResourceBundle;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.io.MockFile;\nimport org.junit.runner.RunWith;\nimport org.languagetool.Language;\nimport org.languagetool.Languages;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class Languages_getLanguageForLocale extends Languages_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void Languages_getLanguageForLocale() throws Throwable {\n    // Undeclared exception!\n    try {\n        Languages.getLanguageForLocale((Locale) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n        //\n        // no message in exception (getMessage() returned null)\n        //\n        verifyException(\"org.languagetool.Languages\", e);\n    }\n}\n}"
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-language-modules/de/src/test/java/org/languagetool/rules/de/GermanHelperTest###testHasReadingOfType",
        "generated_path": "GermanHelper_hasReadingOfType.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.languagetool.rules.de;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport org.languagetool.AnalyzedToken;\nimport org.languagetool.AnalyzedTokenReadings;\nimport org.languagetool.rules.de.GermanHelper;\nimport org.languagetool.tagging.de.GermanToken;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class GermanHelper_hasReadingOfType extends GermanHelper_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test09() throws Throwable {\n    AnalyzedToken analyzedToken0 = new AnalyzedToken(\"\", \"\", \"\");\n    AnalyzedTokenReadings analyzedTokenReadings0 = new AnalyzedTokenReadings(analyzedToken0);\n    analyzedTokenReadings0.setParagraphEnd();\n    GermanToken.POSType germanToken_POSType0 = GermanToken.POSType.PRONOMEN;\n    boolean boolean0 = GermanHelper.hasReadingOfType(analyzedTokenReadings0, germanToken_POSType0);\n    assertFalse(boolean0);\n}\n}"
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-standalone/src/test/java/org/languagetool/tagging/ManualTaggerTest###testTag",
        "generated_path": "ManualTagger_tag.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.languagetool.tagging;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.io.ByteArrayInputStream;\nimport java.io.DataInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.PipedInputStream;\nimport java.io.SequenceInputStream;\nimport java.util.Enumeration;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.junit.runner.RunWith;\nimport org.languagetool.tagging.ManualTagger;\nimport org.languagetool.tagging.TaggedWord;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class ManualTagger_tag extends ManualTagger_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test7() throws Throwable {\n    Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());\n    doReturn(false, false).when(enumeration0).hasMoreElements();\n    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);\n    ManualTagger manualTagger0 = new ManualTagger(sequenceInputStream0);\n    List<TaggedWord> list0 = manualTagger0.tag(\"com.google.common.base.CharMatcher$IsEither\");\n    assertTrue(list0.isEmpty());\n}\n}"
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-core/src/test/java/org/languagetool/AnalyzedTokenReadingsTest###testHasPartialPosTag",
        "generated_path": "AnalyzedTokenReadings_hasPartialPosTag.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.languagetool;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.google.common.collect.BoundType;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Stack;\nimport java.util.Vector;\nimport java.util.function.Consumer;\nimport java.util.regex.PatternSyntaxException;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.junit.runner.RunWith;\nimport org.languagetool.AnalyzedToken;\nimport org.languagetool.AnalyzedTokenReadings;\nimport org.languagetool.chunking.ChunkTag;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class AnalyzedTokenReadings_hasPartialPosTag extends AnalyzedTokenReadings_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test002() throws Throwable {\n    AnalyzedToken analyzedToken0 = new AnalyzedToken(\")ZV_d\", \"\", \"nH/G=5\");\n    analyzedToken0.toString();\n    analyzedToken0.setWhitespaceBefore(true);\n    AnalyzedTokenReadings analyzedTokenReadings0 = new AnalyzedTokenReadings(analyzedToken0);\n    analyzedToken0.setWhitespaceBefore(true);\n    Stack<ChunkTag> stack0 = new Stack<ChunkTag>();\n    ChunkTag chunkTag0 = new ChunkTag(\"Unknown operation: \");\n    stack0.add(chunkTag0);\n    analyzedTokenReadings0.setChunkTags(stack0);\n    analyzedTokenReadings0.immunize((-1894396378));\n    analyzedTokenReadings0.isSentenceStart();\n    analyzedToken0.setNoPOSTag(true);\n    analyzedTokenReadings0.hasPartialPosTag(\"\");\n    analyzedTokenReadings0.hasPosTagStartingWith(\"nH/G=5\");\n    analyzedTokenReadings0.hasPosTagAndLemma(\"\", \"+6 a8\");\n    Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());\n    analyzedTokenReadings0.forEach(consumer0);\n    analyzedTokenReadings0.toString();\n    analyzedTokenReadings0.getChunkTags();\n    String[] stringArray0 = new String[8];\n    stringArray0[0] = \"\";\n    stringArray0[1] = \"\";\n    stringArray0[2] = \"\";\n    stringArray0[3] = \")ZV_d\";\n    stringArray0[4] = \"\";\n    stringArray0[5] = \")ZV_d[nH/G=5/,Unknown operation: ]{!},\";\n    stringArray0[6] = \"\";\n    stringArray0[7] = \")ZV_d[nH/G=5/,Unknown operation: ]{!},\";\n    analyzedTokenReadings0.hasAnyPartialPosTag(stringArray0);\n    analyzedTokenReadings0.hasAnyLemma(stringArray0);\n    analyzedTokenReadings0.getWhitespaceBefore();\n}\n}"
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-language-modules/pl/src/test/java/org/languagetool/tokenizers/pl/PolishWordTokenizerTest###testTokenize",
        "generated_path": "PolishWordTokenizer_tokenize.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.languagetool.tokenizers.pl;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport org.languagetool.tagging.xx.DemoTagger;\nimport org.languagetool.tokenizers.pl.PolishWordTokenizer;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class PolishWordTokenizer_tokenize extends PolishWordTokenizer_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test0() throws Throwable {\n    PolishWordTokenizer polishWordTokenizer0 = new PolishWordTokenizer();\n    List<String> list0 = polishWordTokenizer0.tokenize(\"arcy\");\n    assertTrue(list0.contains(\"arcy\"));\n}\n}"
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-language-modules/uk/src/test/java/org/languagetool/rules/uk/DateCheckFilterTest###testGetDayOfWeek",
        "generated_path": "DateCheckFilter_getDayOfWeek.java",
        "Compile_result": 1,
        "Test_result": 0,
        "Gen_Test": "package org.languagetool.rules.pl;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.util.Calendar;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport org.languagetool.rules.pl.DateCheckFilter;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class DateCheckFilter_getDayOfWeek extends DateCheckFilter_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test28() throws Throwable {\n    DateCheckFilter dateCheckFilter0 = new DateCheckFilter();\n    int int0 = dateCheckFilter0.getDayOfWeek(\"sobzj:zgefpmp5gj\");\n    assertEquals(7, int0);\n}\n}"
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-standalone/src/test/java/org/languagetool/LanguagesTest###testGet",
        "generated_path": "Languages_get.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.languagetool;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.io.File;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.ResourceBundle;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.io.MockFile;\nimport org.junit.runner.RunWith;\nimport org.languagetool.Language;\nimport org.languagetool.Languages;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class Languages_get extends Languages_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test25() throws Throwable {\n    List<Language> list0 = Languages.get();\n    assertEquals(0, list0.size());\n}\n}"
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-standalone/src/test/java/org/languagetool/LanguageAnnotatorTest###testGetTokensWithPotentialLanguages",
        "generated_path": "LanguageAnnotator_getTokensWithPotentialLanguages.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.languagetool;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Stack;\nimport java.util.Vector;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.io.MockFile;\nimport org.junit.runner.RunWith;\nimport org.languagetool.DynamicHunspellLanguage;\nimport org.languagetool.DynamicMorfologikLanguage;\nimport org.languagetool.FakeLanguage;\nimport org.languagetool.FragmentWithLanguage;\nimport org.languagetool.Language;\nimport org.languagetool.LanguageAnnotator;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class LanguageAnnotator_getTokensWithPotentialLanguages extends LanguageAnnotator_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    LanguageAnnotator languageAnnotator0 = new LanguageAnnotator();\n    FakeLanguage fakeLanguage0 = new FakeLanguage(\"_\u007f^e7O\", \"[\\\"\\u201E\\u201C\\u201D\\u00BB\\u00AB]\");\n    ArrayList<Language> arrayList0 = new ArrayList<Language>();\n    languageAnnotator0.getTokensWithPotentialLanguages(\"\", fakeLanguage0, arrayList0);\n}\n}"
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-language-modules/ca/src/test/java/org/languagetool/tokenizers/ca/CatalanWordTokenizerTest###testTokenize",
        "generated_path": "CatalanWordTokenizer_tokenize.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.languagetool.tokenizers.ca;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport org.languagetool.tokenizers.ca.CatalanWordTokenizer;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class CatalanWordTokenizer_tokenize extends CatalanWordTokenizer_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test0() throws Throwable {\n    CatalanWordTokenizer catalanWordTokenizer0 = new CatalanWordTokenizer();\n    List<String> list0 = catalanWordTokenizer0.tokenize(\"org.languagetool.language.Catalan\");\n    assertEquals(5, list0.size());\n}\n}"
    },
    {
        "original_path": "killme2008_xmemcached###killme2008_xmemcached/src/test/java/net/rubyeye/xmemcached/test/unittest/utils/AddrUtilTest###testGetAddressMap",
        "generated_path": "AddrUtil_getAddressMap.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package net.rubyeye.xmemcached.utils;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.net.InetSocketAddress;\nimport net.rubyeye.xmemcached.utils.AddrUtil;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.net.MockInetSocketAddress;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class AddrUtil_getAddressMap extends AddrUtil_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void AddrUtil_getAddressMap() throws Throwable {\n    // Undeclared exception!\n    try {\n        AddrUtil.getAddressMap(\"-:hex]o,\");\n        fail(\"Expecting exception: NumberFormatException\");\n    } catch (NumberFormatException e) {\n        //\n        // For input string: \\\"hex]o\\\"\n        //\n        verifyException(\"java.lang.NumberFormatException\", e);\n    }\n}\n}"
    },
    {
        "original_path": "zeromq_jeromq###zeromq_jeromq/src/test/java/org/zeromq/util/ZDataTest###testEquals",
        "generated_path": "ZData_equals.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.zeromq.util;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.io.PrintStream;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.junit.runner.RunWith;\nimport org.zeromq.util.ZData;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class ZData_equals extends ZData_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    byte[] byteArray0 = new byte[9];\n    ZData zData0 = new ZData((byte[]) null);\n    boolean boolean0 = zData0.equals(byteArray0);\n    assertFalse(boolean0);\n}\n}"
    },
    {
        "original_path": "zeromq_jeromq###zeromq_jeromq/src/test/java/org/zeromq/ZMsgTest###testAppend",
        "generated_path": "ZMsg_append.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.zeromq;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport guide.clonesrv2;\nimport java.io.BufferedInputStream;\nimport java.io.ByteArrayInputStream;\nimport java.io.DataInputStream;\nimport java.io.DataOutputStream;\nimport java.io.EOFException;\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.ObjectInputStream;\nimport java.io.OutputStream;\nimport java.io.PipedInputStream;\nimport java.io.PipedOutputStream;\nimport java.io.PrintWriter;\nimport java.io.PushbackInputStream;\nimport java.io.SequenceInputStream;\nimport java.nio.BufferOverflowException;\nimport java.nio.ByteBuffer;\nimport java.nio.CharBuffer;\nimport java.nio.charset.Charset;\nimport java.util.Collection;\nimport java.util.ConcurrentModificationException;\nimport java.util.Enumeration;\nimport java.util.LinkedList;\nimport java.util.Locale;\nimport java.util.NoSuchElementException;\nimport java.util.Properties;\nimport java.util.Set;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.Future;\nimport java.util.concurrent.TimeUnit;\nimport java.util.function.Consumer;\nimport java.util.function.Predicate;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.mock.java.io.MockFile;\nimport org.evosuite.runtime.mock.java.io.MockFileInputStream;\nimport org.evosuite.runtime.mock.java.io.MockFileOutputStream;\nimport org.evosuite.runtime.mock.java.io.MockPrintStream;\nimport org.evosuite.runtime.mock.java.io.MockPrintWriter;\nimport org.evosuite.runtime.testdata.EvoSuiteFile;\nimport org.evosuite.runtime.testdata.FileSystemHandling;\nimport org.junit.runner.RunWith;\nimport org.zeromq.SocketType;\nimport org.zeromq.ZContext;\nimport org.zeromq.ZFrame;\nimport org.zeromq.ZMQ;\nimport org.zeromq.ZMQException;\nimport org.zeromq.ZMsg;\nimport zmq.Ctx;\nimport zmq.Helper;\nimport zmq.Msg;\nimport zmq.Options;\nimport zmq.SocketBase;\nimport zmq.io.Metadata;\nimport zmq.msg.MsgAllocatorThreshold;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class ZMsg_append extends ZMsg_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test16() throws Throwable {\n    String[] stringArray0 = new String[3];\n    stringArray0[0] = \"{8wIDobn\\\"A$F,\u007fdZ\";\n    stringArray0[2] = \"\";\n    ZMsg zMsg0 = ZMsg.newStringMsg(stringArray0);\n    zMsg0.toArray();\n    ZMsg zMsg1 = zMsg0.append(\"\");\n    zMsg0.unwrap();\n    byte[] byteArray0 = new byte[3];\n    byteArray0[0] = (byte) 10;\n    ZMsg zMsg2 = zMsg0.addString(\"'*8Tu? du8B\");\n    zMsg2.pollFirst();\n    zMsg2.equals(\"{8wIDobn\\\"A$F,\u007fdZ\");\n    ZMsg zMsg3 = new ZMsg();\n    byteArray0[1] = (byte) 77;\n    zMsg1.element();\n    byteArray0[2] = (byte) 2;\n    zMsg1.addLast(\"\");\n    ZMsg zMsg4 = zMsg0.addFirst(byteArray0);\n    ZMsg zMsg5 = zMsg1.dump();\n    zMsg4.peekLast();\n    ZFrame zFrame0 = zMsg1.pop();\n    ZMsg zMsg6 = zMsg3.addString(\"2zy|p*xQ@<KW.%Xwq-k\");\n    zMsg6.pollLast();\n    zMsg0.addFirst(zFrame0);\n    zMsg1.unwrap();\n    Integer integer0 = new Integer(786);\n    zMsg3.equals(integer0);\n    zMsg4.add(\"'*8Tu? du8B\");\n    zMsg6.destroy();\n    zMsg5.addFirst(\"{8wIDobn\\\"A$F,\u007fdZ\");\n    assertEquals(5, zMsg1.size());\n    assertEquals(5, zMsg5.size());\n}\n}"
    },
    {
        "original_path": "zeromq_jeromq###zeromq_jeromq/src/test/java/org/zeromq/ZMsgTest###testHashcode",
        "generated_path": "ZMsg_hashCode.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.zeromq;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport guide.clonesrv2;\nimport java.io.BufferedInputStream;\nimport java.io.ByteArrayInputStream;\nimport java.io.DataInputStream;\nimport java.io.DataOutputStream;\nimport java.io.EOFException;\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.ObjectInputStream;\nimport java.io.OutputStream;\nimport java.io.PipedInputStream;\nimport java.io.PipedOutputStream;\nimport java.io.PrintWriter;\nimport java.io.PushbackInputStream;\nimport java.io.SequenceInputStream;\nimport java.nio.BufferOverflowException;\nimport java.nio.ByteBuffer;\nimport java.nio.CharBuffer;\nimport java.nio.charset.Charset;\nimport java.util.Collection;\nimport java.util.ConcurrentModificationException;\nimport java.util.Enumeration;\nimport java.util.LinkedList;\nimport java.util.Locale;\nimport java.util.NoSuchElementException;\nimport java.util.Properties;\nimport java.util.Set;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.Future;\nimport java.util.concurrent.TimeUnit;\nimport java.util.function.Consumer;\nimport java.util.function.Predicate;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.mock.java.io.MockFile;\nimport org.evosuite.runtime.mock.java.io.MockFileInputStream;\nimport org.evosuite.runtime.mock.java.io.MockFileOutputStream;\nimport org.evosuite.runtime.mock.java.io.MockPrintStream;\nimport org.evosuite.runtime.mock.java.io.MockPrintWriter;\nimport org.evosuite.runtime.testdata.EvoSuiteFile;\nimport org.evosuite.runtime.testdata.FileSystemHandling;\nimport org.junit.runner.RunWith;\nimport org.zeromq.SocketType;\nimport org.zeromq.ZContext;\nimport org.zeromq.ZFrame;\nimport org.zeromq.ZMQ;\nimport org.zeromq.ZMQException;\nimport org.zeromq.ZMsg;\nimport zmq.Ctx;\nimport zmq.Helper;\nimport zmq.Msg;\nimport zmq.Options;\nimport zmq.SocketBase;\nimport zmq.io.Metadata;\nimport zmq.msg.MsgAllocatorThreshold;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class ZMsg_hashCode extends ZMsg_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test25() throws Throwable {\n    ZMsg zMsg0 = new ZMsg();\n    byte[] byteArray0 = new byte[2];\n    byteArray0[0] = (byte) 66;\n    byteArray0[1] = (byte) 81;\n    ZMsg zMsg1 = zMsg0.addLast(byteArray0);\n    ZFrame zFrame0 = new ZFrame(\"L\");\n    zMsg0.offerLast(zFrame0);\n    zMsg1.hashCode();\n    zMsg0.peekLast();\n    ZMsg zMsg2 = zMsg1.push(byteArray0);\n    ZFrame zFrame1 = zMsg2.pop();\n    boolean boolean0 = zMsg0.removeLastOccurrence(zFrame1);\n    assertTrue(boolean0);\n}\n}"
    },
    {
        "original_path": "zeromq_jeromq###zeromq_jeromq/src/test/java/zmq/socket/pubsub/DistTest###testMatch",
        "generated_path": "Dist_match.java",
        "Compile_result": 1,
        "Test_result": 0,
        "Gen_Test": "package zmq.socket.pubsub;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.nio.ByteBuffer;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.junit.runner.RunWith;\nimport zmq.Msg;\nimport zmq.msg.MsgAllocatorHeap;\nimport zmq.msg.MsgAllocatorThreshold;\nimport zmq.pipe.Pipe;\nimport zmq.socket.pubsub.Dist;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class Dist_match extends Dist_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    Dist dist0 = new Dist();\n    Pipe pipe0 = mock(Pipe.class, new ViolatedAssumptionAnswer());\n    dist0.attach(pipe0);\n    dist0.attach((Pipe) null);\n    dist0.match((Pipe) null);\n    assertTrue(dist0.hasOut());\n}\n}"
    },
    {
        "original_path": "zeromq_jeromq###zeromq_jeromq/src/test/java/zmq/poll/PollerBaseTest###testCancelTimer",
        "generated_path": "PollerBase_cancelTimer.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package zmq.poll;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport zmq.poll.IPollEvents;\nimport zmq.poll.PollEvents;\nimport zmq.poll.PollerBaseTested;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class PollerBase_cancelTimer extends PollerBase_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    PollerBaseTested pollerBaseTested0 = new PollerBaseTested();\n    PollEvents pollEvents0 = new PollEvents();\n    pollerBaseTested0.addTimer(1054L, pollEvents0, (-3560));\n    pollerBaseTested0.cancelTimer(pollEvents0, (-3560));\n    long long0 = pollerBaseTested0.executeTimers();\n    assertEquals(0, pollerBaseTested0.getLoad());\n    assertEquals(0L, long0);\n}\n}"
    },
    {
        "original_path": "zeromq_jeromq###zeromq_jeromq/src/test/java/org/zeromq/ZMsgTest###testContentSize",
        "generated_path": "ZMsg_contentSize.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.zeromq;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport guide.clonesrv2;\nimport java.io.BufferedInputStream;\nimport java.io.ByteArrayInputStream;\nimport java.io.DataInputStream;\nimport java.io.DataOutputStream;\nimport java.io.EOFException;\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.ObjectInputStream;\nimport java.io.OutputStream;\nimport java.io.PipedInputStream;\nimport java.io.PipedOutputStream;\nimport java.io.PrintWriter;\nimport java.io.PushbackInputStream;\nimport java.io.SequenceInputStream;\nimport java.nio.BufferOverflowException;\nimport java.nio.ByteBuffer;\nimport java.nio.CharBuffer;\nimport java.nio.charset.Charset;\nimport java.util.Collection;\nimport java.util.ConcurrentModificationException;\nimport java.util.Enumeration;\nimport java.util.LinkedList;\nimport java.util.Locale;\nimport java.util.NoSuchElementException;\nimport java.util.Properties;\nimport java.util.Set;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.Future;\nimport java.util.concurrent.TimeUnit;\nimport java.util.function.Consumer;\nimport java.util.function.Predicate;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.mock.java.io.MockFile;\nimport org.evosuite.runtime.mock.java.io.MockFileInputStream;\nimport org.evosuite.runtime.mock.java.io.MockFileOutputStream;\nimport org.evosuite.runtime.mock.java.io.MockPrintStream;\nimport org.evosuite.runtime.mock.java.io.MockPrintWriter;\nimport org.evosuite.runtime.testdata.EvoSuiteFile;\nimport org.evosuite.runtime.testdata.FileSystemHandling;\nimport org.junit.runner.RunWith;\nimport org.zeromq.SocketType;\nimport org.zeromq.ZContext;\nimport org.zeromq.ZFrame;\nimport org.zeromq.ZMQ;\nimport org.zeromq.ZMQException;\nimport org.zeromq.ZMsg;\nimport zmq.Ctx;\nimport zmq.Helper;\nimport zmq.Msg;\nimport zmq.Options;\nimport zmq.SocketBase;\nimport zmq.io.Metadata;\nimport zmq.msg.MsgAllocatorThreshold;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class ZMsg_contentSize extends ZMsg_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test08() throws Throwable {\n    String[] stringArray0 = new String[8];\n    stringArray0[0] = \" not found matching IPv4/IPv6 settings\";\n    stringArray0[1] = \"k-=Iv\\\"\";\n    FileSystemHandling.appendStringToFile((EvoSuiteFile) null, \"\");\n    stringArray0[2] = \"public key is invalid\";\n    stringArray0[3] = \" ]\";\n    FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);\n    stringArray0[4] = \"iq>gc.\";\n    stringArray0[5] = \"zmq.io.net.pgm.PgmReceiver\";\n    stringArray0[6] = \"socket-\";\n    stringArray0[7] = \".!5'GW\";\n    ZMsg zMsg0 = ZMsg.newStringMsg(stringArray0);\n    Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());\n    zMsg0.forEach(consumer0);\n    ZMsg zMsg1 = zMsg0.dump();\n    ZFrame zFrame0 = zMsg0.pop();\n    zMsg1.remove();\n    ZMsg zMsg2 = zMsg0.dump();\n    zMsg1.peek();\n    zMsg2.remove((Object) zMsg0);\n    ZMsg zMsg3 = ZMsg.newStringMsg(stringArray0);\n    zMsg2.addAll(zMsg3);\n    zMsg1.addLast(zFrame0);\n    zMsg0.peekLast();\n    zMsg1.dump();\n    zMsg2.contentSize();\n    zMsg2.push(\"zmq.io.net.pgm.PgmReceiver\");\n    zMsg1.isEmpty();\n    assertEquals(16, zMsg1.size());\n}\n}"
    },
    {
        "original_path": "zeromq_jeromq###zeromq_jeromq/src/test/java/org/zeromq/ZMsgTest###testEquals",
        "generated_path": "ZMsg_equals.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package org.zeromq;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport guide.clonesrv2;\nimport java.io.BufferedInputStream;\nimport java.io.ByteArrayInputStream;\nimport java.io.DataInputStream;\nimport java.io.DataOutputStream;\nimport java.io.EOFException;\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.ObjectInputStream;\nimport java.io.OutputStream;\nimport java.io.PipedInputStream;\nimport java.io.PipedOutputStream;\nimport java.io.PrintWriter;\nimport java.io.PushbackInputStream;\nimport java.io.SequenceInputStream;\nimport java.nio.BufferOverflowException;\nimport java.nio.ByteBuffer;\nimport java.nio.CharBuffer;\nimport java.nio.charset.Charset;\nimport java.util.Collection;\nimport java.util.ConcurrentModificationException;\nimport java.util.Enumeration;\nimport java.util.LinkedList;\nimport java.util.Locale;\nimport java.util.NoSuchElementException;\nimport java.util.Properties;\nimport java.util.Set;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.Future;\nimport java.util.concurrent.TimeUnit;\nimport java.util.function.Consumer;\nimport java.util.function.Predicate;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.mock.java.io.MockFile;\nimport org.evosuite.runtime.mock.java.io.MockFileInputStream;\nimport org.evosuite.runtime.mock.java.io.MockFileOutputStream;\nimport org.evosuite.runtime.mock.java.io.MockPrintStream;\nimport org.evosuite.runtime.mock.java.io.MockPrintWriter;\nimport org.evosuite.runtime.testdata.EvoSuiteFile;\nimport org.evosuite.runtime.testdata.FileSystemHandling;\nimport org.junit.runner.RunWith;\nimport org.zeromq.SocketType;\nimport org.zeromq.ZContext;\nimport org.zeromq.ZFrame;\nimport org.zeromq.ZMQ;\nimport org.zeromq.ZMQException;\nimport org.zeromq.ZMsg;\nimport zmq.Ctx;\nimport zmq.Helper;\nimport zmq.Msg;\nimport zmq.Options;\nimport zmq.SocketBase;\nimport zmq.io.Metadata;\nimport zmq.msg.MsgAllocatorThreshold;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class ZMsg_equals extends ZMsg_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test13() throws Throwable {\n    ZMsg zMsg0 = new ZMsg();\n    zMsg0.peekLast();\n    String[] stringArray0 = new String[1];\n    stringArray0[0] = \"Kc=ZXK\";\n    ZMsg.newStringMsg(stringArray0);\n    byte[] byteArray0 = new byte[1];\n    zMsg0.removeLast();\n    zMsg0.equals((Object) null);\n    byteArray0[0] = (byte) 0;\n    zMsg0.size();\n    zMsg0.addFirst(\"0:!0U@=&6\");\n    ZMsg zMsg1 = zMsg0.addString(\"Kc=ZXK\");\n    assertSame(zMsg0, zMsg1);\n}\n}"
    },
    {
        "original_path": "zeromq_jeromq###zeromq_jeromq/src/test/java/zmq/TestMsg###testGetBytes",
        "generated_path": "Msg_getBytes.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package zmq;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport java.nio.BufferOverflowException;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.SocketChannel;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.junit.runner.RunWith;\nimport zmq.Msg;\nimport zmq.io.Metadata;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class Msg_getBytes extends Msg_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test002() throws Throwable {\n    Msg.Builder msg_Builder0 = new Msg.Builder();\n    Msg msg0 = msg_Builder0.build();\n    msg_Builder0.setRoutingId(10756);\n    msg0.initJoin();\n    msg_Builder0.initDelimiter();\n    msg0.size();\n    msg0.toString();\n    msg_Builder0.buf();\n    msg_Builder0.buf();\n    msg_Builder0.put((byte) (-81));\n    msg0.fd();\n    msg0.fd();\n    msg_Builder0.buf();\n    msg0.isCommand();\n    msg_Builder0.getMetadata();\n    msg_Builder0.buf();\n    byte[] byteArray0 = new byte[3];\n    byteArray0[0] = (byte) 64;\n    byteArray0[1] = (byte) 1;\n    byteArray0[2] = (byte) (-73);\n    // Undeclared exception!\n    try {\n        msg_Builder0.getBytes(2, byteArray0, (int) (byte) (-73), 1498);\n        fail(\"Expecting exception: ArrayIndexOutOfBoundsException\");\n    } catch (ArrayIndexOutOfBoundsException e) {\n    }\n}\n}"
    },
    {
        "original_path": "zeromq_jeromq###zeromq_jeromq/src/test/java/zmq/poll/PollerBaseTest###testAddTimer",
        "generated_path": "PollerBase_addTimer.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package zmq.poll;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport zmq.poll.IPollEvents;\nimport zmq.poll.PollEvents;\nimport zmq.poll.PollerBaseTested;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class PollerBase_addTimer extends PollerBase_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    PollerBaseTested pollerBaseTested0 = new PollerBaseTested();\n    pollerBaseTested0.clock(1048L);\n    PollEvents pollEvents0 = new PollEvents();\n    pollerBaseTested0.addTimer(1026L, pollEvents0, (-3560));\n    long long0 = pollerBaseTested0.executeTimers();\n    assertEquals(0, pollerBaseTested0.getLoad());\n    assertEquals(1026L, long0);\n}\n}"
    },
    {
        "original_path": "graphhopper_graphhopper###graphhopper_graphhopper/web-api/src/test/java/com/graphhopper/util/HelperTest###testUnderscoreToCamelCase",
        "generated_path": "Helper_underScoreToCamelCase.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.graphhopper.util;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.graphhopper.util.Helper;\nimport com.graphhopper.util.PointList;\nimport java.io.BufferedInputStream;\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.CharArrayReader;\nimport java.io.Closeable;\nimport java.io.File;\nimport java.io.FileDescriptor;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.PipedInputStream;\nimport java.io.Reader;\nimport java.io.StringReader;\nimport java.io.Writer;\nimport java.nio.ByteBuffer;\nimport java.nio.charset.Charset;\nimport java.nio.charset.CharsetDecoder;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.LinkedHashSet;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.io.MockFile;\nimport org.evosuite.runtime.mock.java.io.MockFileReader;\nimport org.evosuite.runtime.mock.java.io.MockFileWriter;\nimport org.evosuite.runtime.mock.java.io.MockPrintWriter;\nimport org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class Helper_underScoreToCamelCase extends Helper_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test046() throws Throwable {\n    // Undeclared exception!\n    try {\n        Helper.underScoreToCamelCase((String) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n    }\n}\n}"
    },
    {
        "original_path": "graphhopper_graphhopper###graphhopper_graphhopper/core/src/test/java/com/graphhopper/util/SimpleIntDequeTest###testPush",
        "generated_path": "SimpleIntDeque_push.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.graphhopper.util;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.graphhopper.util.SimpleIntDeque;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class SimpleIntDeque_push extends SimpleIntDeque_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    SimpleIntDeque simpleIntDeque0 = new SimpleIntDeque();\n    simpleIntDeque0.push(1970);\n    simpleIntDeque0.setGrowFactor(1970);\n    assertFalse(simpleIntDeque0.isEmpty());\n    int int0 = simpleIntDeque0.pop();\n    assertEquals(1970, int0);\n}\n}"
    },
    {
        "original_path": "graphhopper_graphhopper###graphhopper_graphhopper/core/src/test/java/com/graphhopper/reader/dem/SkadiProviderTest###testGetDownloadUrl",
        "generated_path": "SkadiProvider_getDownloadURL.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.graphhopper.reader.dem;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.graphhopper.reader.dem.SkadiProvider;\nimport java.io.EOFException;\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.util.zip.ZipException;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.io.MockFile;\nimport org.evosuite.runtime.testdata.EvoSuiteFile;\nimport org.evosuite.runtime.testdata.EvoSuiteURL;\nimport org.evosuite.runtime.testdata.FileSystemHandling;\nimport org.evosuite.runtime.testdata.NetworkHandling;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class SkadiProvider_getDownloadURL extends SkadiProvider_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    SkadiProvider skadiProvider0 = new SkadiProvider();\n    String string0 = skadiProvider0.getDownloadURL(0.0, 0.0);\n    assertEquals(\"N00/N00E000.hgt.gz\", string0);\n}\n}"
    },
    {
        "original_path": "graphhopper_graphhopper###graphhopper_graphhopper/core/src/test/java/com/graphhopper/util/PointListTest###testToString",
        "generated_path": "PointList_toString.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.graphhopper.util;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.graphhopper.util.PointAccess;\nimport com.graphhopper.util.PointList;\nimport com.graphhopper.util.ShallowImmutablePointList;\nimport com.graphhopper.util.shapes.GHPoint;\nimport com.graphhopper.util.shapes.GHPoint3D;\nimport java.util.Comparator;\nimport java.util.LinkedList;\nimport java.util.function.Consumer;\nimport java.util.function.ToDoubleFunction;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.junit.runner.RunWith;\nimport org.locationtech.jts.geom.Coordinate;\nimport org.locationtech.jts.geom.CoordinateFilter;\nimport org.locationtech.jts.geom.CoordinateSequence;\nimport org.locationtech.jts.geom.CoordinateSequenceComparator;\nimport org.locationtech.jts.geom.CoordinateSequenceFactory;\nimport org.locationtech.jts.geom.Geometry;\nimport org.locationtech.jts.geom.GeometryCollection;\nimport org.locationtech.jts.geom.GeometryFactory;\nimport org.locationtech.jts.geom.LineString;\nimport org.locationtech.jts.geom.LinearRing;\nimport org.locationtech.jts.geom.MultiLineString;\nimport org.locationtech.jts.geom.MultiPoint;\nimport org.locationtech.jts.geom.MultiPolygon;\nimport org.locationtech.jts.geom.Point;\nimport org.locationtech.jts.geom.Polygon;\nimport org.locationtech.jts.geom.PrecisionModel;\nimport org.locationtech.jts.geom.impl.CoordinateArraySequence;\nimport org.locationtech.jts.geom.impl.CoordinateArraySequenceFactory;\nimport org.locationtech.jts.geom.impl.PackedCoordinateSequence;\nimport org.locationtech.jts.geom.impl.PackedCoordinateSequenceFactory;\nimport org.locationtech.jts.util.CoordinateCountFilter;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class PointList_toString extends PointList_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test063() throws Throwable {\n    PointList pointList0 = new PointList();\n    pointList0.EMPTY.toString();\n    pointList0.isImmutable();\n    pointList0.hashCode();\n}\n}"
    },
    {
        "original_path": "graphhopper_graphhopper###graphhopper_graphhopper/core/src/test/java/com/graphhopper/util/AngleCalcTest###testConvertAzimuth2xAxisAngle",
        "generated_path": "AngleCalc_convertAzimuth2xaxisAngle.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.graphhopper.util;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.graphhopper.util.AngleCalc;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class AngleCalc_convertAzimuth2xaxisAngle extends AngleCalc_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    AngleCalc angleCalc0 = new AngleCalc();\n    double double0 = angleCalc0.convertAzimuth2xaxisAngle(0.0);\n    assertEquals(1.5707963267948966, double0, 0.01);\n}\n}"
    },
    {
        "original_path": "graphhopper_graphhopper###graphhopper_graphhopper/core/src/test/java/com/graphhopper/util/PointListTest###testClone",
        "generated_path": "PointList_clone.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.graphhopper.util;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.graphhopper.util.PointAccess;\nimport com.graphhopper.util.PointList;\nimport com.graphhopper.util.ShallowImmutablePointList;\nimport com.graphhopper.util.shapes.GHPoint;\nimport com.graphhopper.util.shapes.GHPoint3D;\nimport java.util.Comparator;\nimport java.util.LinkedList;\nimport java.util.function.Consumer;\nimport java.util.function.ToDoubleFunction;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.junit.runner.RunWith;\nimport org.locationtech.jts.geom.Coordinate;\nimport org.locationtech.jts.geom.CoordinateFilter;\nimport org.locationtech.jts.geom.CoordinateSequence;\nimport org.locationtech.jts.geom.CoordinateSequenceComparator;\nimport org.locationtech.jts.geom.CoordinateSequenceFactory;\nimport org.locationtech.jts.geom.Geometry;\nimport org.locationtech.jts.geom.GeometryCollection;\nimport org.locationtech.jts.geom.GeometryFactory;\nimport org.locationtech.jts.geom.LineString;\nimport org.locationtech.jts.geom.LinearRing;\nimport org.locationtech.jts.geom.MultiLineString;\nimport org.locationtech.jts.geom.MultiPoint;\nimport org.locationtech.jts.geom.MultiPolygon;\nimport org.locationtech.jts.geom.Point;\nimport org.locationtech.jts.geom.Polygon;\nimport org.locationtech.jts.geom.PrecisionModel;\nimport org.locationtech.jts.geom.impl.CoordinateArraySequence;\nimport org.locationtech.jts.geom.impl.CoordinateArraySequenceFactory;\nimport org.locationtech.jts.geom.impl.PackedCoordinateSequence;\nimport org.locationtech.jts.geom.impl.PackedCoordinateSequenceFactory;\nimport org.locationtech.jts.util.CoordinateCountFilter;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class PointList_clone extends PointList_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void PointList_clone() throws Throwable {\n    PrecisionModel.Type precisionModel_Type0 = PrecisionModel.FLOATING;\n    PrecisionModel precisionModel0 = new PrecisionModel(precisionModel_Type0);\n    GeometryFactory geometryFactory0 = new GeometryFactory(precisionModel0);\n    CoordinateArraySequenceFactory coordinateArraySequenceFactory0 = CoordinateArraySequenceFactory.instance();\n    int int0 = 42;\n    CoordinateSequence coordinateSequence0 = coordinateArraySequenceFactory0.create(3034, 42);\n    LineString lineString0 = geometryFactory0.createLineString(coordinateSequence0);\n    PointList pointList0 = PointList.from(lineString0);\n    pointList0.clone(false);\n    pointList0.removeLastPoint();\n    pointList0.clear();\n    // Undeclared exception!\n    try {\n        pointList0.getEle(2144939357);\n        fail(\"Expecting exception: ArrayIndexOutOfBoundsException\");\n    } catch (ArrayIndexOutOfBoundsException e) {\n        //\n        // Tried to access PointList with too big index! index:2144939357, size:0\n        //\n        verifyException(\"com.graphhopper.util.PointList\", e);\n    }\n}\n}"
    },
    {
        "original_path": "graphhopper_graphhopper###graphhopper_graphhopper/core/src/test/java/com/graphhopper/reader/dem/SRTMGL1ProviderTest###testGetDownloadUrl",
        "generated_path": "SRTMGL1Provider_getDownloadURL.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.graphhopper.reader.dem;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.graphhopper.reader.dem.SRTMGL1Provider;\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.io.MockFile;\nimport org.evosuite.runtime.testdata.EvoSuiteFile;\nimport org.evosuite.runtime.testdata.EvoSuiteURL;\nimport org.evosuite.runtime.testdata.FileSystemHandling;\nimport org.evosuite.runtime.testdata.NetworkHandling;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class SRTMGL1Provider_getDownloadURL extends SRTMGL1Provider_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    SRTMGL1Provider sRTMGL1Provider0 = new SRTMGL1Provider();\n    String string0 = sRTMGL1Provider0.getDownloadURL(30.0, 30.0);\n    assertEquals(\"North/North_30_60/N30E030.hgt\", string0);\n}\n}"
    },
    {
        "original_path": "graphhopper_graphhopper###graphhopper_graphhopper/core/src/test/java/com/graphhopper/storage/StorablePropertiesTest###testLoadProperties",
        "generated_path": "StorableProperties_loadProperties.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.graphhopper.storage;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.graphhopper.storage.DAType;\nimport com.graphhopper.storage.Directory;\nimport com.graphhopper.storage.GHDirectory;\nimport com.graphhopper.storage.MMapDirectory;\nimport com.graphhopper.storage.RAMDirectory;\nimport com.graphhopper.storage.StorableProperties;\nimport java.io.IOException;\nimport java.io.Reader;\nimport java.io.StringReader;\nimport java.util.HashMap;\nimport java.util.LinkedHashMap;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.function.BiFunction;\nimport java.util.function.Function;\nimport java.util.regex.PatternSyntaxException;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.testdata.EvoSuiteFile;\nimport org.evosuite.runtime.testdata.FileSystemHandling;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class StorableProperties_loadProperties extends StorableProperties_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test03() throws Throwable {\n    RAMDirectory rAMDirectory0 = new RAMDirectory(\"//\");\n    assertNotNull(rAMDirectory0);\n    assertFalse(rAMDirectory0.isStoring());\n    assertEquals(\"//\", rAMDirectory0.toString());\n    assertEquals(\"//\", rAMDirectory0.getLocation());\n    StorableProperties storableProperties0 = new StorableProperties(rAMDirectory0);\n    assertNotNull(storableProperties0);\n    assertFalse(rAMDirectory0.isStoring());\n    assertEquals(\"//\", rAMDirectory0.toString());\n    assertEquals(\"//\", rAMDirectory0.getLocation());\n    assertFalse(storableProperties0.isClosed());\n    assertEquals(0L, storableProperties0.getCapacity());\n    assertFalse(storableProperties0.containsVersion());\n    StorableProperties storableProperties1 = storableProperties0.put(\"//\", (Object) rAMDirectory0);\n    assertNotNull(storableProperties1);\n    assertFalse(rAMDirectory0.isStoring());\n    assertEquals(\"//\", rAMDirectory0.toString());\n    assertEquals(\"//\", rAMDirectory0.getLocation());\n    assertFalse(storableProperties0.isClosed());\n    assertEquals(0L, storableProperties0.getCapacity());\n    assertFalse(storableProperties0.containsVersion());\n    assertEquals(0L, storableProperties1.getCapacity());\n    assertFalse(storableProperties1.isClosed());\n    assertFalse(storableProperties1.containsVersion());\n    assertSame(storableProperties0, storableProperties1);\n    assertSame(storableProperties1, storableProperties0);\n    HashMap<String, String> hashMap0 = new HashMap<String, String>();\n    assertNotNull(hashMap0);\n    assertEquals(0, hashMap0.size());\n    assertTrue(hashMap0.isEmpty());\n    StorableProperties storableProperties2 = storableProperties1.putAll(hashMap0);\n    assertNotNull(storableProperties2);\n    assertFalse(rAMDirectory0.isStoring());\n    assertEquals(\"//\", rAMDirectory0.toString());\n    assertEquals(\"//\", rAMDirectory0.getLocation());\n    assertFalse(storableProperties0.isClosed());\n    assertEquals(0L, storableProperties0.getCapacity());\n    assertFalse(storableProperties0.containsVersion());\n    assertEquals(0L, storableProperties1.getCapacity());\n    assertFalse(storableProperties1.isClosed());\n    assertFalse(storableProperties1.containsVersion());\n    assertEquals(0, hashMap0.size());\n    assertTrue(hashMap0.isEmpty());\n    assertFalse(storableProperties2.isClosed());\n    assertEquals(0L, storableProperties2.getCapacity());\n    assertFalse(storableProperties2.containsVersion());\n    assertSame(storableProperties0, storableProperties1);\n    assertSame(storableProperties0, storableProperties2);\n    assertSame(storableProperties1, storableProperties0);\n    assertSame(storableProperties1, storableProperties2);\n    assertSame(storableProperties2, storableProperties0);\n    assertSame(storableProperties2, storableProperties1);\n    String string0 = hashMap0.replace((String) null, \"##\");\n    assertNull(string0);\n    assertEquals(0, hashMap0.size());\n    assertTrue(hashMap0.isEmpty());\n    String string1 = storableProperties1.get(\"no\");\n    assertNotNull(string1);\n    assertFalse(rAMDirectory0.isStoring());\n    assertEquals(\"//\", rAMDirectory0.toString());\n    assertEquals(\"//\", rAMDirectory0.getLocation());\n    assertFalse(storableProperties0.isClosed());\n    assertEquals(0L, storableProperties0.getCapacity());\n    assertFalse(storableProperties0.containsVersion());\n    assertEquals(0L, storableProperties1.getCapacity());\n    assertFalse(storableProperties1.isClosed());\n    assertFalse(storableProperties1.containsVersion());\n    assertSame(storableProperties0, storableProperties1);\n    assertSame(storableProperties0, storableProperties2);\n    assertSame(storableProperties1, storableProperties0);\n    assertSame(storableProperties1, storableProperties2);\n    assertEquals(\"\", string1);\n    FileSystemHandling fileSystemHandling0 = new FileSystemHandling();\n    assertNotNull(fileSystemHandling0);\n    StringReader stringReader0 = new StringReader(\"//\");\n    assertNotNull(stringReader0);\n    StorableProperties.loadProperties(hashMap0, stringReader0);\n    assertEquals(0, hashMap0.size());\n    assertTrue(hashMap0.isEmpty());\n    boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);\n    assertFalse(boolean0);\n    Map<String, String> map0 = storableProperties1.getAll();\n    assertNotNull(map0);\n    assertFalse(rAMDirectory0.isStoring());\n    assertEquals(\"//\", rAMDirectory0.toString());\n    assertEquals(\"//\", rAMDirectory0.getLocation());\n    assertFalse(storableProperties0.isClosed());\n    assertEquals(0L, storableProperties0.getCapacity());\n    assertFalse(storableProperties0.containsVersion());\n    assertEquals(0L, storableProperties1.getCapacity());\n    assertFalse(storableProperties1.isClosed());\n    assertFalse(storableProperties1.containsVersion());\n    assertFalse(map0.isEmpty());\n    assertEquals(1, map0.size());\n    assertSame(storableProperties0, storableProperties1);\n    assertSame(storableProperties0, storableProperties2);\n    assertSame(storableProperties1, storableProperties0);\n    assertSame(storableProperties1, storableProperties2);\n    boolean boolean1 = storableProperties1.containsVersion();\n    assertTrue(boolean1 == boolean0);\n    assertFalse(rAMDirectory0.isStoring());\n    assertEquals(\"//\", rAMDirectory0.toString());\n    assertEquals(\"//\", rAMDirectory0.getLocation());\n    assertFalse(storableProperties0.isClosed());\n    assertEquals(0L, storableProperties0.getCapacity());\n    assertFalse(storableProperties0.containsVersion());\n    assertEquals(0L, storableProperties1.getCapacity());\n    assertFalse(storableProperties1.isClosed());\n    assertFalse(storableProperties1.containsVersion());\n    assertSame(storableProperties0, storableProperties1);\n    assertSame(storableProperties0, storableProperties2);\n    assertSame(storableProperties1, storableProperties0);\n    assertSame(storableProperties1, storableProperties2);\n    assertFalse(boolean1);\n}\n}"
    },
    {
        "original_path": "graphhopper_graphhopper###graphhopper_graphhopper/core/src/test/java/com/graphhopper/util/AngleCalcTest###testCalcAzimuth",
        "generated_path": "AngleCalc_calcAzimuth.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.graphhopper.util;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.graphhopper.util.AngleCalc;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class AngleCalc_calcAzimuth extends AngleCalc_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    AngleCalc angleCalc0 = new AngleCalc();\n    double double0 = angleCalc0.ANGLE_CALC.calcAzimuth((-1960.3064), 2220.8561447, 339.8053648832185, 2220.8561447);\n    assertEquals(0.0, double0, 0.01);\n}\n}"
    },
    {
        "original_path": "graphhopper_graphhopper###graphhopper_graphhopper/core/src/test/java/com/graphhopper/reader/osm/OSMReaderUtilityTest###testParseDuration",
        "generated_path": "OSMReaderUtility_parseDuration.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.graphhopper.reader.osm;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.graphhopper.reader.osm.OSMReaderUtility;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class OSMReaderUtility_parseDuration extends OSMReaderUtility_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test2() throws Throwable {\n    long long0 = OSMReaderUtility.parseDuration(\"2\");\n    assertEquals(120L, long0);\n}\n}"
    },
    {
        "original_path": "graphhopper_graphhopper###graphhopper_graphhopper/web-api/src/test/java/com/graphhopper/util/HelperTest###testGetLocale",
        "generated_path": "Helper_getLocale.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.graphhopper.util;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.graphhopper.util.Helper;\nimport com.graphhopper.util.PointList;\nimport java.io.BufferedInputStream;\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.CharArrayReader;\nimport java.io.Closeable;\nimport java.io.File;\nimport java.io.FileDescriptor;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.PipedInputStream;\nimport java.io.Reader;\nimport java.io.StringReader;\nimport java.io.Writer;\nimport java.nio.ByteBuffer;\nimport java.nio.charset.Charset;\nimport java.nio.charset.CharsetDecoder;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.LinkedHashSet;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.io.MockFile;\nimport org.evosuite.runtime.mock.java.io.MockFileReader;\nimport org.evosuite.runtime.mock.java.io.MockFileWriter;\nimport org.evosuite.runtime.mock.java.io.MockPrintWriter;\nimport org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class Helper_getLocale extends Helper_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test003() throws Throwable {\n    Locale locale0 = Helper.getLocale(\"-4/R]^<n= xN5X+Nlq?\");\n    assertNotNull(locale0);\n    assertEquals(\"\", locale0.getLanguage());\n    assertEquals(\"_4/R]^<N= XN5X+NLQ?\", locale0.toString());\n    assertEquals(\"\", locale0.getISO3Language());\n    assertEquals(\"4/R]^<N= XN5X+NLQ?\", locale0.getCountry());\n    assertEquals(\"\", locale0.getVariant());\n}\n}"
    },
    {
        "original_path": "graphhopper_graphhopper###graphhopper_graphhopper/core/src/test/java/com/graphhopper/util/PointListTest###testReverse",
        "generated_path": "PointList_reverse.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.graphhopper.util;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.graphhopper.util.PointAccess;\nimport com.graphhopper.util.PointList;\nimport com.graphhopper.util.ShallowImmutablePointList;\nimport com.graphhopper.util.shapes.GHPoint;\nimport com.graphhopper.util.shapes.GHPoint3D;\nimport java.util.Comparator;\nimport java.util.LinkedList;\nimport java.util.function.Consumer;\nimport java.util.function.ToDoubleFunction;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.junit.runner.RunWith;\nimport org.locationtech.jts.geom.Coordinate;\nimport org.locationtech.jts.geom.CoordinateFilter;\nimport org.locationtech.jts.geom.CoordinateSequence;\nimport org.locationtech.jts.geom.CoordinateSequenceComparator;\nimport org.locationtech.jts.geom.CoordinateSequenceFactory;\nimport org.locationtech.jts.geom.Geometry;\nimport org.locationtech.jts.geom.GeometryCollection;\nimport org.locationtech.jts.geom.GeometryFactory;\nimport org.locationtech.jts.geom.LineString;\nimport org.locationtech.jts.geom.LinearRing;\nimport org.locationtech.jts.geom.MultiLineString;\nimport org.locationtech.jts.geom.MultiPoint;\nimport org.locationtech.jts.geom.MultiPolygon;\nimport org.locationtech.jts.geom.Point;\nimport org.locationtech.jts.geom.Polygon;\nimport org.locationtech.jts.geom.PrecisionModel;\nimport org.locationtech.jts.geom.impl.CoordinateArraySequence;\nimport org.locationtech.jts.geom.impl.CoordinateArraySequenceFactory;\nimport org.locationtech.jts.geom.impl.PackedCoordinateSequence;\nimport org.locationtech.jts.geom.impl.PackedCoordinateSequenceFactory;\nimport org.locationtech.jts.util.CoordinateCountFilter;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class PointList_reverse extends PointList_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test044() throws Throwable {\n    PointList pointList0 = new PointList();\n    pointList0.reverse();\n    // Undeclared exception!\n    try {\n        pointList0.get((-1531));\n        fail(\"Expecting exception: ArrayIndexOutOfBoundsException\");\n    } catch (ArrayIndexOutOfBoundsException e) {\n        //\n        // no message in exception (getMessage() returned null)\n        //\n    }\n}\n}"
    },
    {
        "original_path": "graphhopper_graphhopper###graphhopper_graphhopper/core/src/test/java/com/graphhopper/reader/dem/CGIARProviderTest###testDown",
        "generated_path": "CGIARProvider_down.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.graphhopper.reader.dem;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.graphhopper.reader.dem.CGIARProvider;\nimport java.io.File;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.io.MockFile;\nimport org.evosuite.runtime.testdata.EvoSuiteFile;\nimport org.evosuite.runtime.testdata.FileSystemHandling;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class CGIARProvider_down extends CGIARProvider_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    CGIARProvider cGIARProvider0 = new CGIARProvider();\n    int int0 = cGIARProvider0.down(0.0);\n    assertEquals(0, int0);\n}\n}"
    },
    {
        "original_path": "graphhopper_graphhopper###graphhopper_graphhopper/core/src/test/java/com/graphhopper/util/BitUtilBigTest###testFromBitString",
        "generated_path": "BitUtilBig_fromBitString.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.graphhopper.util;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.graphhopper.util.BitUtil;\nimport com.graphhopper.util.BitUtilBig;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class BitUtilBig_fromBitString extends BitUtilBig_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test28() throws Throwable {\n    BitUtilBig bitUtilBig0 = (BitUtilBig) BitUtil.BIG;\n    assertEquals(\"big\", bitUtilBig0.toString());\n    assertNotNull(bitUtilBig0);\n    byte[] byteArray0 = bitUtilBig0.fromBitString(\"com.graphhopper.util.BitUtilLittle\");\n    assertEquals(5, byteArray0.length);\n    assertEquals(\"big\", bitUtilBig0.toString());\n    assertArrayEquals(new byte[] { (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-64) }, byteArray0);\n    assertNotNull(byteArray0);\n    String string0 = bitUtilBig0.toBitString(byteArray0);\n    assertEquals(5, byteArray0.length);\n    assertEquals(\"big\", bitUtilBig0.toString());\n    assertArrayEquals(new byte[] { (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-64) }, byteArray0);\n    assertNotNull(string0);\n    assertEquals(\"1111111111111111111111111111111111000000\", string0);\n}\n}"
    },
    {
        "original_path": "graphhopper_graphhopper###graphhopper_graphhopper/core/src/test/java/com/graphhopper/reader/dem/GMTEDProviderTest###testGetFileName",
        "generated_path": "GMTEDProvider_getFileName.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.graphhopper.reader.dem;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.graphhopper.reader.dem.GMTEDProvider;\nimport java.io.File;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.io.MockFile;\nimport org.evosuite.runtime.testdata.EvoSuiteFile;\nimport org.evosuite.runtime.testdata.FileSystemHandling;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class GMTEDProvider_getFileName extends GMTEDProvider_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test23() throws Throwable {\n    GMTEDProvider gMTEDProvider0 = new GMTEDProvider();\n    String string0 = gMTEDProvider0.getFileName(0.0, 0.0);\n    assertEquals(\"10s000e_20101117_gmted_mea075\", string0);\n}\n}"
    },
    {
        "original_path": "graphhopper_graphhopper###graphhopper_graphhopper/core/src/test/java/com/graphhopper/coll/GHLongIntBTreeTest###testPut",
        "generated_path": "GHLongIntBTree_put.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.graphhopper.coll;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.graphhopper.coll.GHLongIntBTree;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class GHLongIntBTree_put extends GHLongIntBTree_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    int int0 = 230;\n    GHLongIntBTree gHLongIntBTree0 = new GHLongIntBTree(230);\n    gHLongIntBTree0.clear();\n    gHLongIntBTree0.optimize();\n    gHLongIntBTree0.clear();\n    gHLongIntBTree0.print();\n    gHLongIntBTree0.optimize();\n    gHLongIntBTree0.print();\n    gHLongIntBTree0.toString();\n    gHLongIntBTree0.put(230, 230);\n    gHLongIntBTree0.toString();\n    gHLongIntBTree0.toString();\n    gHLongIntBTree0.clear();\n    gHLongIntBTree0.getSize();\n    gHLongIntBTree0.put(22L, (-1));\n    int int1 = 0;\n    GHLongIntBTree.BTreeEntry gHLongIntBTree_BTreeEntry0 = gHLongIntBTree0.new BTreeEntry(0, true);\n    int int2 = 1563;\n    gHLongIntBTree_BTreeEntry0.entrySize = 1563;\n    // Undeclared exception!\n    try {\n        gHLongIntBTree_BTreeEntry0.checkSplitEntry();\n        fail(\"Expecting exception: ArrayIndexOutOfBoundsException\");\n    } catch (ArrayIndexOutOfBoundsException e) {\n    }\n}\n}"
    },
    {
        "original_path": "graphhopper_graphhopper###graphhopper_graphhopper/core/src/test/java/com/graphhopper/reader/dem/GMTEDProviderTest###testGetDownloadUrl",
        "generated_path": "GMTEDProvider_getDownloadURL.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.graphhopper.reader.dem;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.graphhopper.reader.dem.GMTEDProvider;\nimport java.io.File;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.io.MockFile;\nimport org.evosuite.runtime.testdata.EvoSuiteFile;\nimport org.evosuite.runtime.testdata.FileSystemHandling;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class GMTEDProvider_getDownloadURL extends GMTEDProvider_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    GMTEDProvider gMTEDProvider0 = new GMTEDProvider();\n    String string0 = gMTEDProvider0.getDownloadURL(0.0, 1085.06268968966);\n    assertEquals(\"https://edcintl.cr.usgs.gov/downloads/sciweb1/shared/topo/downloads/GMTED/Global_tiles_GMTED/075darcsec/mea//E1080/10S1080E_20101117_gmted_mea075.tif\", string0);\n}\n}"
    },
    {
        "original_path": "graphhopper_graphhopper###graphhopper_graphhopper/core/src/test/java/com/graphhopper/reader/dem/HeightTileTest###testGetHeight",
        "generated_path": "HeightTile_getHeight.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.graphhopper.reader.dem;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.graphhopper.reader.dem.HeightTile;\nimport com.graphhopper.storage.DataAccess;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.Future;\nimport java.util.concurrent.TimeUnit;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.testdata.EvoSuiteFile;\nimport org.evosuite.runtime.testdata.FileSystemHandling;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class HeightTile_getHeight extends HeightTile_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    HeightTile heightTile0 = new HeightTile(1013, 1013, 2788, 241, 241, 2788, 1013);\n    DataAccess dataAccess0 = mock(DataAccess.class, new ViolatedAssumptionAnswer());\n    doReturn((short) 1419, (short) 1791, (short) 1791, (short) (-6301), (short) 0).when(dataAccess0).getShort(anyLong());\n    heightTile0.setHeights(dataAccess0);\n    HeightTile heightTile1 = heightTile0.setInterpolate(true);\n    heightTile1.getHeight(2.0, 2.0);\n    heightTile0.getHeight(1013, 1013);\n}\n}"
    },
    {
        "original_path": "graphhopper_graphhopper###graphhopper_graphhopper/core/src/test/java/com/graphhopper/util/shapes/BBoxTest###testCalculateIntersection",
        "generated_path": "BBox_calculateIntersection.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.graphhopper.util.shapes;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.graphhopper.util.PointList;\nimport com.graphhopper.util.shapes.BBox;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport org.locationtech.jts.algorithm.RectangleLineIntersector;\nimport org.locationtech.jts.geom.Coordinate;\nimport org.locationtech.jts.geom.CoordinateSequence;\nimport org.locationtech.jts.geom.Envelope;\nimport org.locationtech.jts.geom.GeometryFactory;\nimport org.locationtech.jts.geom.LinearRing;\nimport org.locationtech.jts.geom.PrecisionModel;\nimport org.locationtech.jts.geom.impl.CoordinateArraySequence;\nimport org.locationtech.jts.geom.impl.PackedCoordinateSequence;\nimport org.locationtech.jts.geom.impl.PackedCoordinateSequenceFactory;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class BBox_calculateIntersection extends BBox_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    BBox bBox0 = new BBox(0.0, 0.0, 0.0, 10.0);\n    assertEquals(0.0, bBox0.minLat, 0.01);\n    bBox0.minLat = 10.0;\n    double[] doubleArray0 = new double[7];\n    doubleArray0[2] = 1.0;\n    BBox bBox1 = new BBox(doubleArray0);\n    bBox0.calculateIntersection(bBox1);\n    assertEquals(Double.NaN, bBox0.maxEle, 0.01);\n}\n}"
    },
    {
        "original_path": "graphhopper_graphhopper###graphhopper_graphhopper/core/src/test/java/com/graphhopper/util/UnzipperTest###testUnzip",
        "generated_path": "Unzipper_unzip.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.graphhopper.util;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.graphhopper.util.Unzipper;\nimport java.io.ByteArrayInputStream;\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.PipedInputStream;\nimport java.io.SequenceInputStream;\nimport java.util.Enumeration;\nimport java.util.LongSummaryStatistics;\nimport java.util.function.LongConsumer;\nimport java.util.zip.ZipEntry;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.evosuite.runtime.mock.java.io.MockFile;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class Unzipper_unzip extends Unzipper_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    Unzipper unzipper0 = new Unzipper();\n    byte[] byteArray0 = new byte[0];\n    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-2539), (-2539));\n    MockFile mockFile0 = new MockFile(\"org.apache.commons.io.filefilter.DirectoryFileFilter\");\n    ZipEntry zipEntry0 = new ZipEntry(\"-hZ.l5_XhaU<e5M\");\n    File file0 = unzipper0.getVerifiedFile(mockFile0, zipEntry0);\n    unzipper0.unzip((InputStream) byteArrayInputStream0, file0, (LongConsumer) null);\n    unzipper0.getVerifiedFile(mockFile0, zipEntry0);\n    assertFalse(mockFile0.isFile());\n    assertEquals(1392409281320L, mockFile0.lastModified());\n}\n}"
    },
    {
        "original_path": "graphhopper_graphhopper###graphhopper_graphhopper/core/src/test/java/com/graphhopper/search/KVStorageTest###testFlush",
        "generated_path": "KVStorage_flush.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.graphhopper.search;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.graphhopper.search.KVStorage;\nimport com.graphhopper.storage.DAType;\nimport com.graphhopper.storage.Directory;\nimport com.graphhopper.storage.GHDirectory;\nimport com.graphhopper.storage.MMapDirectory;\nimport com.graphhopper.storage.RAMDirectory;\nimport java.util.Collection;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.testdata.FileSystemHandling;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class KVStorage_flush extends KVStorage_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test38() throws Throwable {\n    MMapDirectory mMapDirectory0 = new MMapDirectory(\" .)+<b,9ZuN4<8J$<\");\n    KVStorage kVStorage0 = new KVStorage(mMapDirectory0, false);\n    KVStorage kVStorage1 = kVStorage0.create(1004L);\n    kVStorage1.flush();\n    assertEquals(1056768L, kVStorage0.getCapacity());\n}\n}"
    },
    {
        "original_path": "graphhopper_graphhopper###graphhopper_graphhopper/core/src/test/java/com/graphhopper/routing/AlternativeRouteCHTest###testCalcAlternatives",
        "generated_path": "AlternativeRouteCH_calcAlternatives.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.graphhopper.routing;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.graphhopper.routing.AlternativeRouteCH;\nimport com.graphhopper.routing.Path;\nimport com.graphhopper.routing.ev.DecimalEncodedValue;\nimport com.graphhopper.routing.ev.SimpleBooleanEncodedValue;\nimport com.graphhopper.routing.weighting.ShortestWeighting;\nimport com.graphhopper.storage.BaseGraph;\nimport com.graphhopper.storage.CHStorage;\nimport com.graphhopper.storage.MMapDirectory;\nimport com.graphhopper.storage.RAMDirectory;\nimport com.graphhopper.storage.RoutingCHGraph;\nimport com.graphhopper.storage.RoutingCHGraphImpl;\nimport com.graphhopper.util.PMap;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class AlternativeRouteCH_calcAlternatives extends AlternativeRouteCH_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void AlternativeRouteCH_calcAlternatives() throws Throwable {\n    MMapDirectory mMapDirectory0 = new MMapDirectory(\"\");\n    BaseGraph baseGraph0 = new BaseGraph(mMapDirectory0, 2181, false, false, 3059);\n    CHStorage cHStorage0 = new CHStorage(mMapDirectory0, \"\", 2181, false);\n    SimpleBooleanEncodedValue simpleBooleanEncodedValue0 = new SimpleBooleanEncodedValue(\"toward_destination\");\n    ShortestWeighting shortestWeighting0 = new ShortestWeighting(simpleBooleanEncodedValue0, (DecimalEncodedValue) null);\n    RoutingCHGraphImpl routingCHGraphImpl0 = new RoutingCHGraphImpl(baseGraph0, cHStorage0, shortestWeighting0);\n    String[] stringArray0 = new String[8];\n    stringArray0[0] = \"toward_destination\";\n    stringArray0[1] = \"\";\n    stringArray0[2] = \"toward_destination\";\n    stringArray0[3] = \"toward_destination\";\n    stringArray0[4] = \"toward_destination\";\n    stringArray0[5] = \"\";\n    stringArray0[6] = \"toward_destination\";\n    stringArray0[7] = \"toward_destination\";\n    PMap pMap0 = PMap.read(stringArray0);\n    AlternativeRouteCH alternativeRouteCH0 = new AlternativeRouteCH(routingCHGraphImpl0, pMap0);\n    // Undeclared exception!\n    try {\n        alternativeRouteCH0.calcAlternatives(2181, (-1));\n        fail(\"Expecting exception: IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n        //\n        // node: 2181 out of bounds [0,0[\n        //\n        verifyException(\"com.graphhopper.storage.BaseGraphNodesAndEdges\", e);\n    }\n}\n}"
    },
    {
        "original_path": "graphhopper_graphhopper###graphhopper_graphhopper/core/src/test/java/com/graphhopper/reader/dem/SRTMGL1ProviderTest###testGetFileName",
        "generated_path": "SRTMGL1Provider_getFileName.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.graphhopper.reader.dem;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.graphhopper.reader.dem.SRTMGL1Provider;\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.io.MockFile;\nimport org.evosuite.runtime.testdata.EvoSuiteFile;\nimport org.evosuite.runtime.testdata.EvoSuiteURL;\nimport org.evosuite.runtime.testdata.FileSystemHandling;\nimport org.evosuite.runtime.testdata.NetworkHandling;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class SRTMGL1Provider_getFileName extends SRTMGL1Provider_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    SRTMGL1Provider sRTMGL1Provider0 = new SRTMGL1Provider();\n    String string0 = sRTMGL1Provider0.getFileName(Double.NaN, Double.NaN);\n    assertEquals(\"s90w180\", string0);\n}\n}"
    },
    {
        "original_path": "graphhopper_graphhopper###graphhopper_graphhopper/core/src/test/java/com/graphhopper/util/shapes/BBoxTest###testParseBBoxString",
        "generated_path": "BBox_parseBBoxString.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.graphhopper.util.shapes;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.graphhopper.util.PointList;\nimport com.graphhopper.util.shapes.BBox;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport org.locationtech.jts.algorithm.RectangleLineIntersector;\nimport org.locationtech.jts.geom.Coordinate;\nimport org.locationtech.jts.geom.CoordinateSequence;\nimport org.locationtech.jts.geom.Envelope;\nimport org.locationtech.jts.geom.GeometryFactory;\nimport org.locationtech.jts.geom.LinearRing;\nimport org.locationtech.jts.geom.PrecisionModel;\nimport org.locationtech.jts.geom.impl.CoordinateArraySequence;\nimport org.locationtech.jts.geom.impl.PackedCoordinateSequence;\nimport org.locationtech.jts.geom.impl.PackedCoordinateSequenceFactory;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class BBox_parseBBoxString extends BBox_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test24() throws Throwable {\n    BBox bBox0 = BBox.parseBBoxString(\"-Infinity,54.165497,-Infinity,1.0\");\n    assertEquals(Double.NEGATIVE_INFINITY, bBox0.minLat, 0.01);\n    assertTrue(bBox0.isValid());\n    assertEquals(1.0, bBox0.maxLat, 0.01);\n    assertEquals(Double.NaN, bBox0.minEle, 0.01);\n    assertEquals(54.165497, bBox0.maxLon, 0.01);\n    assertFalse(bBox0.hasElevation());\n    assertEquals(Double.NEGATIVE_INFINITY, bBox0.minLon, 0.01);\n    assertEquals(Double.NaN, bBox0.maxEle, 0.01);\n}\n}"
    },
    {
        "original_path": "graphhopper_graphhopper###graphhopper_graphhopper/core/src/test/java/com/graphhopper/util/shapes/BBoxTest###testParseTwoPoints",
        "generated_path": "BBox_parseTwoPoints.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.graphhopper.util.shapes;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.graphhopper.util.PointList;\nimport com.graphhopper.util.shapes.BBox;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\nimport org.locationtech.jts.algorithm.RectangleLineIntersector;\nimport org.locationtech.jts.geom.Coordinate;\nimport org.locationtech.jts.geom.CoordinateSequence;\nimport org.locationtech.jts.geom.Envelope;\nimport org.locationtech.jts.geom.GeometryFactory;\nimport org.locationtech.jts.geom.LinearRing;\nimport org.locationtech.jts.geom.PrecisionModel;\nimport org.locationtech.jts.geom.impl.CoordinateArraySequence;\nimport org.locationtech.jts.geom.impl.PackedCoordinateSequence;\nimport org.locationtech.jts.geom.impl.PackedCoordinateSequenceFactory;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class BBox_parseTwoPoints extends BBox_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test23() throws Throwable {\n    BBox bBox0 = BBox.parseTwoPoints(\"54.165497,54.165497,134.13754,-4230.453\");\n    assertEquals(54.165497, bBox0.minLat, 0.01);\n    assertEquals(54.165497, bBox0.maxLon, 0.01);\n    assertEquals(Double.NaN, bBox0.minEle, 0.01);\n    assertEquals((-4230.453), bBox0.minLon, 0.01);\n    assertTrue(bBox0.isValid());\n    assertEquals(Double.NaN, bBox0.maxEle, 0.01);\n    assertFalse(bBox0.hasElevation());\n}\n}"
    },
    {
        "original_path": "graphhopper_graphhopper###graphhopper_graphhopper/core/src/test/java/com/graphhopper/reader/dem/SkadiProviderTest###testGetFileName",
        "generated_path": "SkadiProvider_getFileName.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.graphhopper.reader.dem;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.graphhopper.reader.dem.SkadiProvider;\nimport java.io.EOFException;\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.util.zip.ZipException;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.io.MockFile;\nimport org.evosuite.runtime.testdata.EvoSuiteFile;\nimport org.evosuite.runtime.testdata.EvoSuiteURL;\nimport org.evosuite.runtime.testdata.FileSystemHandling;\nimport org.evosuite.runtime.testdata.NetworkHandling;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class SkadiProvider_getFileName extends SkadiProvider_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test02() throws Throwable {\n    SkadiProvider skadiProvider0 = new SkadiProvider(\"com.graphhopper.reader.dem.SkadiProvider\");\n    String string0 = skadiProvider0.getFileName(11.57517, (-1080.0238));\n    assertEquals(\"n11w1081\", string0);\n}\n}"
    },
    {
        "original_path": "graphhopper_graphhopper###graphhopper_graphhopper/web-api/src/test/java/com/graphhopper/util/HelperTest###testCountBitValue",
        "generated_path": "Helper_countBitValue.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.graphhopper.util;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.graphhopper.util.Helper;\nimport com.graphhopper.util.PointList;\nimport java.io.BufferedInputStream;\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.CharArrayReader;\nimport java.io.Closeable;\nimport java.io.File;\nimport java.io.FileDescriptor;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.PipedInputStream;\nimport java.io.Reader;\nimport java.io.StringReader;\nimport java.io.Writer;\nimport java.nio.ByteBuffer;\nimport java.nio.charset.Charset;\nimport java.nio.charset.CharsetDecoder;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.LinkedHashSet;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.io.MockFile;\nimport org.evosuite.runtime.mock.java.io.MockFileReader;\nimport org.evosuite.runtime.mock.java.io.MockFileWriter;\nimport org.evosuite.runtime.mock.java.io.MockPrintWriter;\nimport org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class Helper_countBitValue extends Helper_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test045() throws Throwable {\n    int int0 = Helper.countBitValue(0);\n    assertEquals(0, int0);\n}\n}"
    },
    {
        "original_path": "graphhopper_graphhopper###graphhopper_graphhopper/core/src/test/java/com/graphhopper/util/DistanceCalcEarthTest###testValidEdgeDistance",
        "generated_path": "DistanceCalcEarth_validEdgeDistance.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.graphhopper.util;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.graphhopper.util.DistanceCalcEarth;\nimport com.graphhopper.util.PointAccess;\nimport com.graphhopper.util.PointList;\nimport com.graphhopper.util.ShallowImmutablePointList;\nimport com.graphhopper.util.shapes.BBox;\nimport com.graphhopper.util.shapes.GHPoint;\nimport java.util.LinkedList;\nimport java.util.function.Consumer;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.junit.runner.RunWith;\nimport org.locationtech.jts.geom.Coordinate;\nimport org.locationtech.jts.geom.CoordinateSequence;\nimport org.locationtech.jts.geom.CoordinateSequenceComparator;\nimport org.locationtech.jts.geom.GeometryFactory;\nimport org.locationtech.jts.geom.LineString;\nimport org.locationtech.jts.geom.LinearRing;\nimport org.locationtech.jts.geom.MultiPolygon;\nimport org.locationtech.jts.geom.Polygon;\nimport org.locationtech.jts.geom.PrecisionModel;\nimport org.locationtech.jts.geom.impl.CoordinateArraySequence;\nimport org.locationtech.jts.geom.impl.PackedCoordinateSequence;\nimport org.locationtech.jts.geom.impl.PackedCoordinateSequenceFactory;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class DistanceCalcEarth_validEdgeDistance extends DistanceCalcEarth_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    DistanceCalcEarth distanceCalcEarth0 = new DistanceCalcEarth();\n    distanceCalcEarth0.intermediatePoint(Double.NaN, Double.NaN, 0.0, (-1.0), 456.3951686113);\n    distanceCalcEarth0.calcCrossingPointToEdge(0.0, 3528.1695367070706, 0.0, 0.0, Double.NaN, 0.0);\n    distanceCalcEarth0.validEdgeDistance(1000000.0, 1000000.0, 0.0, 0.0, 0.0, 0.0);\n    distanceCalcEarth0.calcShrinkFactor(0.0, 1025.4607438070516);\n    PointList pointList0 = PointList.EMPTY;\n    DistanceCalcEarth.calcDistance(pointList0, false);\n    distanceCalcEarth0.calcCrossingPointToEdge(0.0, 0.0, 300.0, 0.0, (-0.8888602332073843), 1000000.0);\n    DistanceCalcEarth.calcDistance(pointList0, false);\n    distanceCalcEarth0.calcNormalizedDist(1576.7555106464497, (-1.0), Double.NaN, 1000000.0);\n    distanceCalcEarth0.isCrossBoundary(4169.74619, 1000000.0);\n    distanceCalcEarth0.hasElevationDiff(0.0, 1.0);\n    distanceCalcEarth0.calcCrossingPointToEdge((-889.07911), (-3327.405963279), 1141.69, 0.0, 1000000.0, 1000000.0);\n    distanceCalcEarth0.hasElevationDiff(0.12144813720046943, Double.NaN);\n}\n}"
    },
    {
        "original_path": "graphhopper_graphhopper###graphhopper_graphhopper/core/src/test/java/com/graphhopper/util/BitUtilLittleTest###testFromBitString",
        "generated_path": "BitUtilLittle_fromBitString.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.graphhopper.util;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.graphhopper.util.BitUtil;\nimport com.graphhopper.util.BitUtilLittle;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class BitUtilLittle_fromBitString extends BitUtilLittle_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    BitUtilLittle bitUtilLittle0 = (BitUtilLittle) BitUtil.LITTLE;\n    assertEquals(\"little\", bitUtilLittle0.toString());\n    assertNotNull(bitUtilLittle0);\n    byte[] byteArray0 = bitUtilLittle0.fromBitString(\"]k`5Depk-7Y\\\\S(P7xf\");\n    assertEquals(\"little\", bitUtilLittle0.toString());\n    assertArrayEquals(new byte[] { (byte) (-64), (byte) (-1), (byte) (-1) }, byteArray0);\n    assertNotNull(byteArray0);\n    assertEquals(3, byteArray0.length);\n}\n}"
    },
    {
        "original_path": "graphhopper_graphhopper###graphhopper_graphhopper/core/src/test/java/com/graphhopper/util/DistanceCalcEarthTest###testIntermediatePoint",
        "generated_path": "DistanceCalcEarth_intermediatePoint.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.graphhopper.util;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.graphhopper.util.DistanceCalcEarth;\nimport com.graphhopper.util.PointAccess;\nimport com.graphhopper.util.PointList;\nimport com.graphhopper.util.ShallowImmutablePointList;\nimport com.graphhopper.util.shapes.BBox;\nimport com.graphhopper.util.shapes.GHPoint;\nimport java.util.LinkedList;\nimport java.util.function.Consumer;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.junit.runner.RunWith;\nimport org.locationtech.jts.geom.Coordinate;\nimport org.locationtech.jts.geom.CoordinateSequence;\nimport org.locationtech.jts.geom.CoordinateSequenceComparator;\nimport org.locationtech.jts.geom.GeometryFactory;\nimport org.locationtech.jts.geom.LineString;\nimport org.locationtech.jts.geom.LinearRing;\nimport org.locationtech.jts.geom.MultiPolygon;\nimport org.locationtech.jts.geom.Polygon;\nimport org.locationtech.jts.geom.PrecisionModel;\nimport org.locationtech.jts.geom.impl.CoordinateArraySequence;\nimport org.locationtech.jts.geom.impl.PackedCoordinateSequence;\nimport org.locationtech.jts.geom.impl.PackedCoordinateSequenceFactory;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class DistanceCalcEarth_intermediatePoint extends DistanceCalcEarth_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    PointList pointList0 = new PointList();\n    pointList0.iterator();\n    DistanceCalcEarth.calcDistance(pointList0, true);\n    DistanceCalcEarth distanceCalcEarth0 = new DistanceCalcEarth();\n    distanceCalcEarth0.calcDenormalizedDist(0.0);\n    DistanceCalcEarth.calcDistance(pointList0, false);\n    distanceCalcEarth0.calcNormalizedEdgeDistance3D(0.0, 0.0, (-625.75032), (-625.75032), 3.141592653589793, 0.0, (-625.75032), 0.0, 0.0);\n    pointList0.iterator();\n    distanceCalcEarth0.intermediatePoint((-744.7643819306895), 0.0, 2.0, 0.0, 300.0);\n    distanceCalcEarth0.calcDistance(pointList0);\n    distanceCalcEarth0.calcNormalizedDist(1938.5422);\n    distanceCalcEarth0.DIST_EARTH.calcDistance(pointList0);\n    distanceCalcEarth0.calcNormalizedDist(2831.647);\n    distanceCalcEarth0.isDateLineCrossOver((-744.7643819306895), 0.0);\n    distanceCalcEarth0.calcCircumference((-625.75032));\n    distanceCalcEarth0.calcNormalizedEdgeDistance3D(0.0, 3857.52, Double.NaN, 0.0, (-5307.0), 0.0, 0.0, 2.0, (-1.7976931348623157E308));\n}\n}"
    },
    {
        "original_path": "graphhopper_graphhopper###graphhopper_graphhopper/web-api/src/test/java/com/graphhopper/util/HelperTest###testCamelCaseToUnderscore",
        "generated_path": "Helper_camelCaseToUnderScore.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.graphhopper.util;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.graphhopper.util.Helper;\nimport com.graphhopper.util.PointList;\nimport java.io.BufferedInputStream;\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.CharArrayReader;\nimport java.io.Closeable;\nimport java.io.File;\nimport java.io.FileDescriptor;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.PipedInputStream;\nimport java.io.Reader;\nimport java.io.StringReader;\nimport java.io.Writer;\nimport java.nio.ByteBuffer;\nimport java.nio.charset.Charset;\nimport java.nio.charset.CharsetDecoder;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.LinkedHashSet;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.io.MockFile;\nimport org.evosuite.runtime.mock.java.io.MockFileReader;\nimport org.evosuite.runtime.mock.java.io.MockFileWriter;\nimport org.evosuite.runtime.mock.java.io.MockPrintWriter;\nimport org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class Helper_camelCaseToUnderScore extends Helper_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test067() throws Throwable {\n    // Undeclared exception!\n    try {\n        Helper.camelCaseToUnderScore((String) null);\n        fail(\"Expecting exception: NullPointerException\");\n    } catch (NullPointerException e) {\n    }\n}\n}"
    },
    {
        "original_path": "graphhopper_graphhopper###graphhopper_graphhopper/core/src/test/java/com/graphhopper/util/AngleCalcTest###testAtan2",
        "generated_path": "AngleCalc_atan2.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.graphhopper.util;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.graphhopper.util.AngleCalc;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class AngleCalc_atan2 extends AngleCalc_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test32() throws Throwable {\n    double double0 = AngleCalc.atan2((-388.28847225785), 90.0002104591497);\n    assertEquals((-1.3500259929105776), double0, 0.01);\n}\n}"
    },
    {
        "original_path": "graphhopper_graphhopper###graphhopper_graphhopper/core/src/test/java/com/graphhopper/routing/util/NameSimilarityEdgeFilterTest###testAccept",
        "generated_path": "NameSimilarityEdgeFilter_accept.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.graphhopper.routing.util;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.shaded.org.mockito.Mockito.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.graphhopper.routing.ev.BooleanEncodedValue;\nimport com.graphhopper.routing.querygraph.VirtualEdgeIteratorState;\nimport com.graphhopper.routing.util.AccessFilter;\nimport com.graphhopper.routing.util.AllEdgesIterator;\nimport com.graphhopper.routing.util.DirectedEdgeFilter;\nimport com.graphhopper.routing.util.EdgeFilter;\nimport com.graphhopper.routing.util.HeadingEdgeFilter;\nimport com.graphhopper.routing.util.NameSimilarityEdgeFilter;\nimport com.graphhopper.search.KVStorage;\nimport com.graphhopper.storage.BaseGraph;\nimport com.graphhopper.storage.IntsRef;\nimport com.graphhopper.storage.RAMDirectory;\nimport com.graphhopper.util.EdgeIteratorState;\nimport com.graphhopper.util.PointList;\nimport com.graphhopper.util.shapes.GHPoint;\nimport java.time.ZoneId;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.LinkedHashMap;\nimport java.util.Map;\nimport java.util.Vector;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.ViolatedAssumptionAnswer;\nimport org.junit.runner.RunWith;\nimport org.locationtech.jts.geom.Coordinate;\nimport org.locationtech.jts.geom.GeometryFactory;\nimport org.locationtech.jts.geom.Point;\nimport org.locationtech.jts.geom.PrecisionModel;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class NameSimilarityEdgeFilter_accept extends NameSimilarityEdgeFilter_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test07() throws Throwable {\n    EdgeFilter edgeFilter0 = EdgeFilter.ALL_EDGES;\n    GHPoint gHPoint0 = new GHPoint();\n    NameSimilarityEdgeFilter nameSimilarityEdgeFilter0 = new NameSimilarityEdgeFilter(edgeFilter0, \"mi'B\", gHPoint0, Double.NaN);\n    boolean boolean0 = nameSimilarityEdgeFilter0.accept((EdgeIteratorState) null);\n    assertTrue(boolean0);\n}\n}"
    },
    {
        "original_path": "graphhopper_graphhopper###graphhopper_graphhopper/core/src/test/java/com/graphhopper/util/AngleCalcTest###testAlignOrientation",
        "generated_path": "AngleCalc_alignOrientation.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.graphhopper.util;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.graphhopper.util.AngleCalc;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class AngleCalc_alignOrientation extends AngleCalc_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test06() throws Throwable {\n    AngleCalc angleCalc0 = new AngleCalc();\n    double double0 = angleCalc0.alignOrientation((-1.7976931348623157E308), (-1.7976931348623157E308));\n    assertEquals((-1.7976931348623157E308), double0, 0.01);\n}\n}"
    },
    {
        "original_path": "graphhopper_graphhopper###graphhopper_graphhopper/web-api/src/test/java/com/graphhopper/util/GHResponseTest###testToString",
        "generated_path": "GHResponse_toString.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.graphhopper;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.graphhopper.GHResponse;\nimport com.graphhopper.ResponsePath;\nimport com.graphhopper.util.PMap;\nimport java.util.LinkedList;\nimport java.util.List;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.evosuite.runtime.mock.java.lang.MockThrowable;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class GHResponse_toString extends GHResponse_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test14() throws Throwable {\n    GHResponse gHResponse0 = new GHResponse();\n    MockThrowable mockThrowable0 = new MockThrowable(\", main errors: \");\n    gHResponse0.addError(mockThrowable0);\n    String string0 = gHResponse0.toString();\n    assertNotNull(string0);\n}\n}"
    },
    {
        "original_path": "graphhopper_graphhopper###graphhopper_graphhopper/core/src/test/java/com/graphhopper/coll/GHSortedCollectionTest###testInsert",
        "generated_path": "GHSortedCollection_insert.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "package com.graphhopper.coll;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.evosuite.runtime.EvoAssertions.*;\nimport com.graphhopper.coll.GHSortedCollection;\nimport org.evosuite.runtime.EvoRunner;\nimport org.evosuite.runtime.EvoRunnerParameters;\nimport org.junit.runner.RunWith;\n@RunWith(EvoRunner.class)\n@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)\npublic class GHSortedCollection_insert extends GHSortedCollection_ESTest_scaffolding {\n@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    GHSortedCollection gHSortedCollection0 = new GHSortedCollection();\n    gHSortedCollection0.insert((-1376), (-1376));\n    gHSortedCollection0.insert((-1376), (-3389));\n    gHSortedCollection0.insert(0, 0);\n    gHSortedCollection0.update(0, 0, (-3389));\n    gHSortedCollection0.toString();\n    assertEquals(3, gHSortedCollection0.getSize());\n}\n}"
    }
]