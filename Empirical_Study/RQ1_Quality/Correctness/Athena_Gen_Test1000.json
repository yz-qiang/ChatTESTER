[
    {
        "original_path": "alexcojocaru_elasticsearch-maven-plugin###alexcojocaru_elasticsearch-maven-plugin/src/test/java/com/github/alexcojocaru/mojo/elasticsearch/v2/step/BootstrapClusterStepTest###testParseMapCommand",
        "generated_path": "BootstrapClusterStepTest###testParseMapCommand.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testParseMapCommand() { Map<String, Object> command = new HashMap<>(); command.put(\"method\", \"GET\"); command.put(\"path\", \"/foo\"); command.put(\"payload\", \"bar\"); ElasticsearchCommand result = bootstrapClusterStep.parseMapCommand(command); assertEquals(ElasticsearchCommand.RequestMethod.GET, result.getRequestMethod()); assertEquals(\"/foo\", result.getRelativeUrl()); assertEquals(\"bar\", result.getJson()); }\n"
    },
    {
        "original_path": "eBay_cors-filter###eBay_cors-filter/src/test/java/org/ebaysf/web/cors/CORSFilterTest###testJoin",
        "generated_path": "CORSFilterTest###testJoin.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testJoin() throws IOException, ServletException { CORSFilter filter = new CORSFilter(); String result = filter.join(Arrays.asList(\"a\", \"b\", \"c\"), \",\"); assertEquals(\"a,b,c\", result); result = filter.join(Arrays.asList(\"a\", \"b\", \"c\"), \",\"); assertEquals(\"a,b,c\", result); result = filter.join(Arrays.asList(\"a\", \"b\", \"c\"), \",\"); assertEquals(\"a,b,c\", result); result = filter.join(Arrays.asList(\"a\", \"b\", \"c\"), \",\"); assertEquals(\"a,b,c\", result); result = filter.join(Arrays.asList(\"a\", \"b\", \"c\"), \",\"); assertEquals(\"a,b,c\", result); result = filter.join(Arrays.asList(\"a\", \"b\", \"c\"), \",\"); assertEquals(\"a,b,c\", result); result = filter.join(Arrays.asList(\"a\", \"b\", \"c\"), \",\"); assertEquals(\"a,b,c\", result); result = filter.join(Arrays.asList(\"a\", \"b\", \"c\"), \",\"); assertEquals(\"a,b,c\", result); result = filter.join(Arrays.asList(\"a\", \"b\", \"c\"), \",\"); assertEquals(\"a,b,c\", result);"
    },
    {
        "original_path": "Wikidata_Wikidata-Toolkit###Wikidata_Wikidata-Toolkit/wdtk-wikibaseapi/src/test/java/org/wikidata/wdtk/wikibaseapi/OAuthApiConnectionTest###testLogout",
        "generated_path": "OAuthApiConnectionTest###testLogout.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testLogout() throws IOException, MediaWikiApiErrorException { System.out.println(\"logout\"); OAuthApiConnection instance = new OAuthApiConnection(\"http: null, null, null, null); instance.logout(); }\n"
    },
    {
        "original_path": "Wikidata_Wikidata-Toolkit###Wikidata_Wikidata-Toolkit/wdtk-wikibaseapi/src/test/java/org/wikidata/wdtk/wikibaseapi/BasicApiConnectionTest###testConfirmClientLogin",
        "generated_path": "BasicApiConnectionTest###testConfirmClientLogin.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test(expected = LoginFailedException.class) public void testConfirmClientLogin() throws IOException, LoginFailedException, MediaWikiApiErrorException { connection.confirmClientLogin(\"token\", \"username\", \"password\"); }\n"
    },
    {
        "original_path": "Wikidata_Wikidata-Toolkit###Wikidata_Wikidata-Toolkit/wdtk-wikibaseapi/src/test/java/org/wikidata/wdtk/wikibaseapi/WbSearchEntitiesActionTest###testWbSearchEntities",
        "generated_path": "WbSearchEntitiesActionTest###testWbSearchEntities.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test(expected = IllegalArgumentException.class) public void wbSearchEntitiesTest() throws Exception { WbSearchEntitiesAction wbSearchEntitiesAction = new WbSearchEntitiesAction(this.connection, this.siteUri); wbSearchEntitiesAction.wbSearchEntities(null, null, null, null, null, null); }\n"
    },
    {
        "original_path": "Wikidata_Wikidata-Toolkit###Wikidata_Wikidata-Toolkit/wdtk-datamodel/src/test/java/org/wikidata/wdtk/datamodel/helpers/TermedDocumentUpdateBuilderTest###testForBaseRevisionId",
        "generated_path": "TermedDocumentUpdateBuilderTest###testForBaseRevisionId.java",
        "Compile_result": 1,
        "Test_result": 0,
        "Gen_Test": "@Test(expected = IllegalArgumentException.class) public void testForBaseRevisionIdInvalidEntityId() { TermedDocumentUpdateBuilder.forBaseRevisionId(null, 1); }\n"
    },
    {
        "original_path": "Wikidata_Wikidata-Toolkit###Wikidata_Wikidata-Toolkit/wdtk-datamodel/src/test/java/org/wikidata/wdtk/datamodel/implementation/LexemeDocumentImplTest###testWithForm",
        "generated_path": "LexemeDocumentImplTest###testWithForm.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void withForm() { }\n"
    },
    {
        "original_path": "Wikidata_Wikidata-Toolkit###Wikidata_Wikidata-Toolkit/wdtk-datamodel/src/test/java/org/wikidata/wdtk/datamodel/implementation/LexemeDocumentImplTest###testWithSense",
        "generated_path": "LexemeDocumentImplTest###testWithSense.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test(expected = IllegalArgumentException.class) public void testWithSenseThrowsExceptionIfSenseIdDoesNotBelongToLexeme() { SenseIdValue senseId = new SenseIdValue(ItemIdValue.of(\"a\"), \"b\"); SenseDocument sense = new SenseDocumentImpl(SenseIdValue.of(\"c\"), \"d\", \"e\"); document.withSense(sense); }\n"
    },
    {
        "original_path": "Wikidata_Wikidata-Toolkit###Wikidata_Wikidata-Toolkit/wdtk-wikibaseapi/src/test/java/org/wikidata/wdtk/wikibaseapi/BasicApiConnectionTest###testConfirmLogin",
        "generated_path": "BasicApiConnectionTest###testConfirmLogin.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test(expected = LoginFailedException.class) public void testConfirmLoginFailed() throws IOException, LoginFailedException, MediaWikiApiErrorException { connection.confirmLogin(TEST_TOKEN, TEST_USERNAME, TEST_PASSWORD); }\n"
    },
    {
        "original_path": "Wikidata_Wikidata-Toolkit###Wikidata_Wikidata-Toolkit/wdtk-datamodel/src/test/java/org/wikidata/wdtk/datamodel/helpers/LabeledDocumentUpdateBuilderTest###testForBaseRevision",
        "generated_path": "LabeledDocumentUpdateBuilderTest###testForBaseRevision.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testForBaseRevision() { LabeledDocumentUpdate update = LabeledDocumentUpdateBuilder.forBaseRevision(new TermedStatementDocument(EntityIdValue.of(\"1\"), \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1"
    },
    {
        "original_path": "Wikidata_Wikidata-Toolkit###Wikidata_Wikidata-Toolkit/wdtk-datamodel/src/test/java/org/wikidata/wdtk/datamodel/helpers/StatementDocumentUpdateBuilderTest###testForBaseRevisionId",
        "generated_path": "StatementDocumentUpdateBuilderTest###testForBaseRevisionId.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test(expected = NullPointerException.class) public void testForBaseRevisionIdNullEntityId() { StatementDocumentUpdateBuilder.forBaseRevisionId(null, 1); }\n"
    },
    {
        "original_path": "Wikidata_Wikidata-Toolkit###Wikidata_Wikidata-Toolkit/wdtk-datamodel/src/test/java/org/wikidata/wdtk/datamodel/helpers/EntityUpdateBuilderTest###testForBaseRevision",
        "generated_path": "EntityUpdateBuilderTest###testForBaseRevision.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test(expected = NullPointerException.class) public void testForBaseRevisionNull() { EntityUpdateBuilder.forBaseRevision(null); }\n"
    },
    {
        "original_path": "Wikidata_Wikidata-Toolkit###Wikidata_Wikidata-Toolkit/wdtk-storage/src/test/java/org/wikidata/wdtk/storage/datastructures/BitVectorImplTest###testToString",
        "generated_path": "BitVectorImplTest###testToString.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testToString() { BitVectorImpl bitVector = new BitVectorImpl(); bitVector.addBit(true); bitVector.addBit(false); bitVector.addBit(true); bitVector.addBit(false); bitVector.addBit(true); bitVector.addBit(false); bitVector.addBit(true); bitVector.addBit(false); bitVector.addBit(false); bitVector.addBit(false); bitVector.addBit(false); bitVector.addBit(false); bitVector.addBit(false); bitVector.addBit(false); bitVector.addBit(false); bitVector.addBit(false); bitVector.addBit(false); bitVector.addBit(false); bitVector.addBit(false); bitVector.addBit(false); bitVector.addBit(false); bitVector.addBit(false); bitVector.addBit(false); bitVector.addBit(false); bitVector.addBit(false); bitVector.addBit(false); bitVector.addBit(false); bitVector.addBit(false); bitVector.addBit(false); bitVector.addBit(false); bitVector.addBit(false); bitVector.addBit(false); bitVector.addBit(false); bitVector.addBit(false); bitVector.addBit(false); bitVector.addBit(false); bitVector.addBit(false); bitVector."
    },
    {
        "original_path": "Wikidata_Wikidata-Toolkit###Wikidata_Wikidata-Toolkit/wdtk-datamodel/src/test/java/org/wikidata/wdtk/datamodel/helpers/TermedDocumentUpdateBuilderTest###testForBaseRevision",
        "generated_path": "TermedDocumentUpdateBuilderTest###testForBaseRevision.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void forBaseRevision() { ItemDocument revision = new ItemDocument(); revision.setId(1L); revision.setName(\"name\"); revision.setDescription(\"description\"); TermedDocumentUpdate update = TermedDocumentUpdateBuilder.forBaseRevision(revision); assertThat(update, instanceOf(ItemUpdate.class)); ItemUpdate itemUpdate = (ItemUpdate) update; assertThat(itemUpdate.getId(), is(1L)); assertThat(itemUpdate.getName(), is(\"name\")); assertThat(itemUpdate.getDescription(), is(\"description\")); assertThat(itemUpdate.getLanguage(), is(\"en\")); assertThat(itemUpdate.getLanguageId(), is(1L)); assertThat(itemUpdate.getDescriptionId(), is(2L)); assertThat(itemUpdate.getDescriptionId(), is(3L)); assertThat(itemUpdate.getDescriptionId(), is(4L)); assertThat(itemUpdate.getLanguageId(), is(5L)); assertThat(itemUpdate.getLanguageId(), is(6L)); assertThat(itemUpdate.getLanguageId(), is(7L)); assertThat(itemUpdate.getLanguageId(), is(8L)); assertThat(itemUpdate.getLanguageId(), is(9L)); assertThat(itemUpdate.getLanguageId(), is(10L)); assertThat(itemUpdate.getLanguageId(), is(11L)); assertThat(itemUpdate.getLanguageId(), is(11L)); assertThat(item"
    },
    {
        "original_path": "Wikidata_Wikidata-Toolkit###Wikidata_Wikidata-Toolkit/wdtk-datamodel/src/test/java/org/wikidata/wdtk/datamodel/helpers/StatementDocumentUpdateBuilderTest###testForBaseRevision",
        "generated_path": "StatementDocumentUpdateBuilderTest###testForBaseRevision.java",
        "Compile_result": 1,
        "Test_result": 0,
        "Gen_Test": "@Test(expected = IllegalArgumentException.class) public void testForBaseRevisionThrowsException() { StatementDocumentUpdateBuilder.forBaseRevision(null); }\n"
    },
    {
        "original_path": "Wikidata_Wikidata-Toolkit###Wikidata_Wikidata-Toolkit/wdtk-datamodel/src/test/java/org/wikidata/wdtk/datamodel/helpers/LabeledDocumentUpdateBuilderTest###testForBaseRevisionId",
        "generated_path": "LabeledDocumentUpdateBuilderTest###testForBaseRevisionId.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void forBaseRevisionId_MediaInfoIdValue() { assertThat(LabeledDocumentUpdateBuilder.forBaseRevisionId(MediaInfoIdValue.of(1L), 1L), instanceOf(MediaInfoUpdateBuilder.class)); }\n"
    },
    {
        "original_path": "GoSimpleLLC_nbvcxz###GoSimpleLLC_nbvcxz/src/test/java/me/gosimple/nbvcxz/matching/YearMatcherTest###testMatch",
        "generated_path": "YearMatcherTest###testMatch.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testMatch() { Configuration configuration = new Configuration(); configuration.setYearPattern(\"[0-9]{4}\"); List<Match> matches = new YearMatcher().match(configuration, \"123456\"); assertThat(matches.size(), is(1)); assertThat(matches.get(0).getClass(), is(YearMatch.class)); assertThat(matches.get(0).getStart(), is(4)); assertThat(matches.get(0).getEnd(), is(5)); assertThat(matches.get(0).getPattern(), is(\"[0-9]{4}\")); assertThat(matches.get(0).getPattern(), is(\"[0-9]{4}\")); assertThat(matches.get(0).getPattern(), is(\"[0-9]{4}\")); assertThat(matches.get(0).getStart(), is(5)); assertThat(matches.get(0).getEnd(), is(5)); assertThat(matches.get(0).getPattern(), is(\"[0-9]{4}\")); assertThat(matches.get(0).getPattern(), is(\"[0-9]{4}\")); assertThat(matches.get(0).getEnd(), is(5)); assertThat(matches.get(0).getPattern(), is(\"[0-9]{4}\")); }\n"
    },
    {
        "original_path": "GoSimpleLLC_nbvcxz###GoSimpleLLC_nbvcxz/src/test/java/me/gosimple/nbvcxz/resources/AdjacencyGraphUtilTest###testCalcAverageDegree",
        "generated_path": "AdjacencyGraphUtilTest###testCalcAverageDegree.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void calcAverageDegree() { System.out.println(\"calcAverageDegree\"); HashMap<Character, String[]> keys = new HashMap<Character, String[]>(); keys.put('a', new String[]{\"a\", \"a\"}); keys.put('b', new String[]{\"b\"}); keys.put('c', new String[]{\"c\"}); keys.put('d', new String[]{\"d\"}); keys.put('e', new String[]{\"e\"}); keys.put('f', new String[]{\"f\"}); keys.put('g', new String[]{\"g\"}); double result = AdjacencyGraphUtil.calcAverageDegree(keys); System.out.println(\"result = \" + result); System.out.println(\"result = \" + result); System.out.println(\"result = \" + result); System.out.println(\"result = \" + result); System.out.println(\"result = \" + result); System.out.println(\"result = \" + result); System.out.println(\"result = \" + result); System.out.println(\"result = \" + result); System.out.println(\"result = \" + result); System.out.println(\"result = \" + result); System.out.println(\"result = \" + result); System.out.println(\"result = \" + result); System.out.println(\"result = \" + result); System.out.println(\"result = \""
    },
    {
        "original_path": "GoSimpleLLC_nbvcxz###GoSimpleLLC_nbvcxz/src/test/java/me/gosimple/nbvcxz/resources/CharacterCaseUtilTest###fractionOfStringUppercaseTest",
        "generated_path": "CharacterCaseUtilTest###fractionOfStringUppercaseTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testFractionOfStringUppercase() { assertEquals(0.0, CharacterCaseUtil.fractionOfStringUppercase(\"\")); assertEquals(0.0, CharacterCaseUtil.fractionOfStringUppercase(\"\")); assertEquals(0.0, CharacterCaseUtil.fractionOfStringUppercase(\"\")); assertEquals(0.0, CharacterCaseUtil.fractionOfStringUppercase(\"\")); assertEquals(0.0, CharacterCaseUtil.fractionOfStringUppercase(\"\")); assertEquals(0.0, CharacterCaseUtil.fractionOfStringUppercase(\"\")); assertEquals(0.0, CharacterCaseUtil.fractionOfStringUppercase(\"\")); assertEquals(0.0, CharacterCaseUtil.fractionOfStringUppercase(\"\")); assertEquals(0.0, CharacterCaseUtil.fractionOfStringUppercase(\" \")); assertEquals(0.0, CharacterCaseUtil.fractionOfStringUppercase(\" \")); assertEquals(0.0, CharacterCaseUtil.fractionOfStringUppercase(\" \")); assertEquals(0.0, CharacterCaseUtil.fractionOfStringUppercase(\" \")); assertEquals(0.0, CharacterCaseUtil.fractionOfStringUppercase(\" \")); assertEquals(0.0, CharacterCaseUtil.fractionOfStringUppercase(\" \")); assertEquals(0.0, CharacterCaseUtil.fractionOfStringUppercase(\" \")); assertEquals(0.0, CharacterCaseUtil.fractionOfStringUppercase(\" \")); assertEquals"
    },
    {
        "original_path": "GoSimpleLLC_nbvcxz###GoSimpleLLC_nbvcxz/src/test/java/me/gosimple/nbvcxz/resources/AdjacencyGraphUtilTest###testNeighborsNumber",
        "generated_path": "AdjacencyGraphUtilTest###testNeighborsNumber.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testNeighborsNumber() { String[] neighbors = new String[]{\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"}; int result = AdjacencyGraphUtil.neighborsNumber(neighbors); assertEquals(2, result); }\n"
    },
    {
        "original_path": "GoSimpleLLC_nbvcxz###GoSimpleLLC_nbvcxz/src/test/java/me/gosimple/nbvcxz/matching/SpacialMatcherTest###testMatch",
        "generated_path": "SpacialMatcherTest###testMatch.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testMatch() { Configuration configuration = new Configuration(); configuration.setAdjacencyGraphs(new ArrayList<>()); configuration.setAdjacencyGraphs(new ArrayList<>()); List<Match> matches = new SpacialMatcher().match(configuration, \"test\"); assertEquals(2, matches.size()); assertEquals(\"test\", matches.get(0).getMatch().getPassword()); assertEquals(\"test\", matches.get(1).getMatch().getPassword()); assertEquals(\"test\", matches.get(2).getMatch().getPassword()); assertEquals(\"test\", matches.get(3).getMatch().getPassword()); assertEquals(\"test\", matches.get(4).getMatch().getPassword()); assertEquals(\"test\", matches.get(5).getMatch().getPassword()); assertEquals(\"test\", matches.get(6).getMatch().getPassword()); assertEquals(\"test\", matches.get(7).getMatch().getPassword()); assertEquals(\"test\", matches.get(8).getMatch().getPassword()); assertEquals(\"test\", matches.get(9).getMatch().getPassword()); assertEquals(\"test\", matches.get(10).getMatch().getPassword()); assertEquals(\"test\", matches.get(11).getMatch().getPassword()); assertEquals(\"test\", matches.get(12).getMatch().getPassword()); assertEquals(\"test\", matches.get(13).getMatch().getPassword()); assertEquals(\"test\", matches.get(13).get"
    },
    {
        "original_path": "GoSimpleLLC_nbvcxz###GoSimpleLLC_nbvcxz/src/test/java/me/gosimple/nbvcxz/matching/match/BaseMatchTest###testNCk",
        "generated_path": "BaseMatchTest###testNCk.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testNCk() { assertEquals(1, BaseMatch.nCk(1, 1)); assertEquals(1, BaseMatch.nCk(1, 1)); assertEquals(1, BaseMatch.nCk(1, 1)); assertEquals(1, BaseMatch.nCk(1, 1)); assertEquals(1, BaseMatch.nCk(1, 1)); assertEquals(1, BaseMatch.nCk(1, 1)); assertEquals(1, BaseMatch.nCk(1, 1)); assertEquals(1, BaseMatch.nCk(1, 1)); assertEquals(1, BaseMatch.nCk(1, 1)); assertEquals(1, BaseMatch.nCk(1, 1)); assertEquals(1, BaseMatch.nCk(1, 1)); assertEquals(1, BaseMatch.nCk(1, 1)); assertEquals(1, BaseMatch.nCk(1, 1)); assertEquals(1, BaseMatch.nCk(1, 1)); assertEquals(1, BaseMatch.nCk(1, 1)); assertEquals(1, BaseMatch.nCk(1, 1)); assertEquals(1, BaseMatch.nCk(1, 1)); assertEquals(1, BaseMatch.nCk(1, 1)); assertEquals(1, BaseMatch.nCk(1, 1)); assertEquals(1"
    },
    {
        "original_path": "GoSimpleLLC_nbvcxz###GoSimpleLLC_nbvcxz/src/test/java/me/gosimple/nbvcxz/matching/SequenceMatcherTest###testMatch",
        "generated_path": "SequenceMatcherTest###testMatch.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testMatch() { List<Match> matches = new SequenceMatcher().match(new MockConfiguration(), \"test\"); Assert.assertEquals(1, matches.size()); Assert.assertTrue(matches.contains(new SequenceMatch(\"test\", new MockConfiguration(), 1, 0))); Assert.assertTrue(matches.contains(new SequenceMatch(\"test\", new MockConfiguration(), 1, 1))); Assert.assertTrue(matches.contains(new SequenceMatch(\"test\", new MockConfiguration(), 1, 1))); Assert.assertTrue(matches.contains(new SequenceMatch(\"test\", new MockConfiguration(), 1, 1))); Assert.assertTrue(matches.contains(new SequenceMatch(\"test\", new MockConfiguration(), 1, 1))); Assert.assertTrue(matches.contains(new SequenceMatch(\"test\", new MockConfiguration(), 1, 1))); Assert.assertTrue(matches.contains(new SequenceMatch(\"test\", new MockConfiguration(), 1, 1))); Assert.assertTrue(matches.contains(new SequenceMatch(\"test\", new MockConfiguration(), 1, 1))); Assert.assertTrue(matches.contains(new SequenceMatch(\"test\", new MockConfiguration(), 1, 1))); Assert.assertTrue(matches.contains(new SequenceMatch(\"test\", new MockConfiguration(), 1, 1))); Assert.assertTrue(matches.contains(new SequenceMatch(\"test\", new MockConfiguration(), 1, 1))); Assert.assertTrue(matches.contains(new SequenceMatch(\"test\", new"
    },
    {
        "original_path": "c-rack_cbor-java###c-rack_cbor-java/src/test/java/co/nstant/in/cbor/model/ArrayTest###testToString",
        "generated_path": "ArrayTest###testToString.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testToString() { assertEquals(\"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,"
    },
    {
        "original_path": "c-rack_cbor-java###c-rack_cbor-java/src/test/java/co/nstant/in/cbor/model/MapTest###testToString",
        "generated_path": "MapTest###testToString.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testToString() { Map map = new Map(); map.put(new DataItem(\"key1\", \"value1\"), new DataItem(\"key2\", \"value2\")); map.put(new DataItem(\"key3\", \"value3\"), new DataItem(\"key4\", \"value4\")); map.put(new DataItem(\"key5\", \"value5\"), new DataItem(\"key6\", \"value6\")); map.put(new DataItem(\"key7\", \"value7\"), new DataItem(\"key8\", \"value8\")); map.put(new DataItem(\"key7\", \"value7\"), new DataItem(\"key8\", \"value8\")); map.put(new DataItem(\"key7\", \"value7\"), new DataItem(\"key8\", \"value8\")); map.put(new DataItem(\"key7\", \"value7\"), new DataItem(\"key7\", \"value7\")); map.put(new DataItem(\"key7\", \"value7\"), new DataItem(\"key7\", \"value7\")); map.put(new DataItem(\"key7\", \"value7\")); map.put(new DataItem(\"key7\", \"value7\"), new DataItem(\"key7\", \"value7\")); map.put(new DataItem(\"key7\", \"value7\")); map.put(new DataItem(\"key7\", \"value7\")); map.put("
    },
    {
        "original_path": "jparsec_jparsec###jparsec_jparsec/jparsec-examples/src/test/java/org/jparsec/examples/java/parser/DeclarationParserTest###testProgram",
        "generated_path": "DeclarationParserTest###testProgram.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void test() throws IOException { Parser<Program> p = DeclarationParser.program(); Program expected = Program.newBuilder().addImport(new Import(\"com.example.Test\")).addImport(new Import(\"com.example.Test2\")).addImport(new Import(\"com.example.Test3\")).addImport(new Import(\"com.example.Test4\")).addImport(new Import(\"com.example.Test5\")).addImport(new Import(\"com.example.Test6\")).addImport(new Import(\"com.example.Test7\")).addImport(new Import(\"com.example.Test8\")).addImport(new Import(\"com.example.Test9\")).addImport(new Import(\"com.example.Test9\")).addImport(new Import(\"com.example.Test9\")).addImport(new Import(\"com.example.Test9\")).addImport(new Import(\"com.example.Test9\")).addImport(new Import(\"com.example.Test7\")).addImport(new Import(\"com.example.Test8\")).addImport(new Import(\"com.example.Test9\")).addImport(new Import(\"com.example.Test9\")).addImport(new Import(\"com.example.Test9\")).addImport(new Import(\"com.example.Test9\")).addImport(new"
    },
    {
        "original_path": "jparsec_jparsec###jparsec_jparsec/jparsec/src/test/java/org/jparsec/LexiconTest###testWord",
        "generated_path": "LexiconTest###testWord.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test(expected = IllegalArgumentException.class) public void testWordMissing() { Lexicon icon = new Lexicon(); icon.word(\"\"); }\n"
    },
    {
        "original_path": "jparsec_jparsec###jparsec_jparsec/jparsec-examples/src/test/java/org/jparsec/examples/sql/parser/RelationParserTest###testUnion",
        "generated_path": "RelationParserTest###testUnion.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testUnion() throws Exception { Parser<Relation> parser = RelationParser.union(Parser.newReference()); assertEquals(Parser.newReference(), parser); assertEquals(Parser.newReference(), parser); assertEquals(Parser.newReference(), parser); assertEquals(Parser.newReference(), parser); assertEquals(Parser.newReference(), parser); assertEquals(Parser.newReference(), parser); assertEquals(Parser.newReference(), parser); assertEquals(Parser.newReference(), parser); assertEquals(Parser.newReference(), parser); assertEquals(Parser.newReference(), parser); assertEquals(Parser.newReference(), parser); assertEquals(Parser.newReference(), parser); assertEquals(Parser.newReference(), parser); assertEquals(Parser.newReference(), parser); assertEquals(Parser.newReference(), parser); assertEquals(Parser.newReference(), parser); assertEquals(Parser.newReference(), parser); assertEquals(Parser.newReference(), parser); assertEquals(Parser.newReference(), parser); assertEquals(Parser.newReference(), parser); assertEquals(Parser.newReference(), parser); assertEquals(Parser.newReference(), parser); assertEquals(Parser.newReference(), parser); assertEquals(Parser.newReference(), parser); assertEquals(Parser.newReference(), parser); assertEquals(Parser.newReference(), parser); assertEquals(Parser.newReference(), parser); }\n"
    },
    {
        "original_path": "jparsec_jparsec###jparsec_jparsec/jparsec/src/test/java/org/jparsec/ScannersTest###testAmong",
        "generated_path": "ScannersTest###testAmong.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testAmong() { assertTrue(Scanners.among(\"a\").apply(null)); assertFalse(Scanners.among(\"a\").apply(null)); assertFalse(Scanners.among(\"a\").apply(null)); assertFalse(Scanners.among(\"a\").apply(null)); assertFalse(Scanners.among(\"a\").apply(null)); assertFalse(Scanners.among(\"a\").apply(null)); assertFalse(Scanners.among(\"a\").apply(null)); assertFalse(Scanners.among(\"a\").apply(null)); assertFalse(Scanners.among(\"a\").apply(null)); assertFalse(Scanners.among(\"a\").apply(null)); assertFalse(Scanners.among(\"a\").apply(null)); assertFalse(Scanners.among(\"a\").apply(null)); assertFalse(Scanners.among(\"a\").apply(null)); assertFalse(Scanners.among(\"a\").apply(null)); assertFalse(Scanners.among(\"a\").apply(null)); assertFalse(Scanners.among(\"a\").apply(null)); assertFalse(Scanners.among(\"a\").apply(null)); assertFalse(Scanners.among(\"a\").apply(null)); assertFalse(Scanners.among(\"a\").apply(null)); assertFalse(Scanners.among(\"a\").apply(null)); assertFalse(Scanners.among(\""
    },
    {
        "original_path": "jparsec_jparsec###jparsec_jparsec/jparsec/src/test/java/org/jparsec/internal/util/IntListTest###testToArray",
        "generated_path": "IntListTest###testToArray.java",
        "Compile_result": 1,
        "Test_result": 0,
        "Gen_Test": "@Test public void testToArray() { IntList list = new IntList(); list.add(1); list.add(2); list.add(3); list.add(4); list.add(5); list.add(6); list.add(7); list.add(8); list.add(9); list.add(10); assertArrayEquals(new int[]{1, 2, 3, 4, 5, 6, 7, 8, 9}, list.toArray()); }\n"
    },
    {
        "original_path": "jparsec_jparsec###jparsec_jparsec/jparsec-examples/src/test/java/org/jparsec/examples/sql/parser/ExpressionParserTest###testExpression",
        "generated_path": "ExpressionParserTest###testExpression.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testSimpleCase() { Parser<Expression> expr = ExpressionParser.expression(Parser.literal(\"a\")); assertEquals(expr, expr.parse()); assertEquals(expr, expr.parse()); assertEquals(expr, expr.parse()); assertEquals(expr, expr.parse()); assertEquals(expr, expr.parse()); assertEquals(expr, expr.parse()); assertEquals(expr, expr.parse()); assertEquals(expr, expr.parse()); assertEquals(expr, expr.parse()); assertEquals(expr, expr.parse()); assertEquals(expr, expr.parse()); assertEquals(expr, expr.parse()); assertEquals(expr, expr.parse()); assertEquals(expr, expr.parse()); assertEquals(expr, expr.parse()); assertEquals(expr, expr.parse()); assertEquals(expr, expr.parse()); assertEquals(expr, expr.parse()); assertEquals(expr, expr.parse()); assertEquals(expr, expr.parse()); assertEquals(expr, expr.parse()); assertEquals(expr, expr.parse()); assertEquals(expr, expr.parse()); assertEquals(expr, expr.parse()); assertEquals(expr, expr.parse()); assertEquals(expr, expr.parse()); assertEquals(expr, expr.parse()); assertEquals(expr, expr.parse()); assertEquals(expr, expr.parse()); assertEquals(expr, expr.parse()); assertEquals(expr, expr.parse()); assertEquals(expr, expr.parse()); }\n"
    },
    {
        "original_path": "jparsec_jparsec###jparsec_jparsec/jparsec-examples/src/test/java/org/jparsec/examples/java/parser/TerminalParserTest###testTerm",
        "generated_path": "TerminalParserTest###testTerm.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testTerm() { Parser<?> p = TerminalParser.term(\"<<\"); assertEquals(p, TerminalParser.term(\"<<\")); assertEquals(p, TerminalParser.term(\">>>\")); assertEquals(p, TerminalParser.term(\"<<\")); assertEquals(p, TerminalParser.term(\"<<\")); assertEquals(p, TerminalParser.term(\">>>\")); assertEquals(p, TerminalParser.term(\">>>\")); assertEquals(p, TerminalParser.term(\"<<>\")); assertEquals(p, TerminalParser.term(\"<<>\")); assertEquals(p, TerminalParser.term(\">>>\")); assertEquals(p, TerminalParser.term(\">>>\")); assertEquals(p, TerminalParser.term(\"<<>\")); assertEquals(p, TerminalParser.term(\"<<>\")); assertEquals(p, TerminalParser.term(\"<<>\")); assertEquals(p, TerminalParser.term(\"<<>\")); assertEquals(p, TerminalParser.term(\"<<>\")); assertEquals(p, TerminalParser.term(\"<<>\")); assertEquals(p, TerminalParser.term(\"<<>\")); assertEquals(p, TerminalParser.term(\"<<>\")); assertEquals(p, TerminalParser.term(\"<<>\")); assertEquals(p, TerminalParser.term(\"<<>\")); assertEquals(p, TerminalParser.term(\"<<>\")); assertEquals(p, TerminalParser.term(\">>>\")); assertEquals(p, TerminalParser.term(\">>>\""
    },
    {
        "original_path": "jparsec_jparsec###jparsec_jparsec/jparsec/src/test/java/org/jparsec/ScannersTest###testNotAmong",
        "generated_path": "ScannersTest###testNotAmong.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void notAmong() { assertTrue(Scanners.notAmong(\"a\").apply(null)); assertFalse(Scanners.notAmong(\"a\").apply(null)); assertFalse(Scanners.notAmong(\"a\").apply(null)); assertFalse(Scanners.notAmong(\"a\").apply(null)); assertFalse(Scanners.notAmong(\"a\").apply(null)); assertFalse(Scanners.notAmong(\"a\").apply(null)); assertFalse(Scanners.notAmong(\"a\").apply(null)); assertFalse(Scanners.notAmong(\"a\").apply(null)); assertFalse(Scanners.notAmong(\"a\").apply(null)); assertFalse(Scanners.notAmong(\"a\").apply(null)); assertFalse(Scanners.notAmong(\"a\").apply(null)); assertFalse(Scanners.notAmong(\"a\").apply(null)); assertFalse(Scanners.notAmong(\"a\").apply(null)); assertFalse(Scanners.notAmong(\"a\").apply(null)); assertFalse(Scanners.notAmong(\"a\").apply(null)); assertFalse(Scanners.notAmong(\"a\").apply(null)); assertFalse(Scanners.notAmong(\"a\").apply(null)); assertFalse(Scanners.notAmong(\"a\").apply(null)); assertFalse(Scanners.notAmong(\"a\").apply(null)); assertFalse(Scanners"
    },
    {
        "original_path": "jparsec_jparsec###jparsec_jparsec/jparsec-examples/src/test/java/org/jparsec/examples/sql/parser/TerminalParserTest###testTerm",
        "generated_path": "TerminalParserTest###testTerm.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testTerm() { Parser<?> p = TerminalParser.term(\"<<\"); assertEquals(p, TerminalParser.term(\"<<\")); assertEquals(p, TerminalParser.term(\">>>\")); assertEquals(p, TerminalParser.term(\"<<\")); assertEquals(p, TerminalParser.term(\"<<\")); assertEquals(p, TerminalParser.term(\">>>\")); assertEquals(p, TerminalParser.term(\">>>\")); assertEquals(p, TerminalParser.term(\"<<>\")); assertEquals(p, TerminalParser.term(\"<<>\")); assertEquals(p, TerminalParser.term(\">>>\")); assertEquals(p, TerminalParser.term(\">>>\")); assertEquals(p, TerminalParser.term(\"<<>\")); assertEquals(p, TerminalParser.term(\"<<>\")); assertEquals(p, TerminalParser.term(\"<<>\")); assertEquals(p, TerminalParser.term(\"<<>\")); assertEquals(p, TerminalParser.term(\"<<>\")); assertEquals(p, TerminalParser.term(\"<<>\")); assertEquals(p, TerminalParser.term(\"<<>\")); assertEquals(p, TerminalParser.term(\"<<>\")); assertEquals(p, TerminalParser.term(\"<<>\")); assertEquals(p, TerminalParser.term(\"<<>\")); assertEquals(p, TerminalParser.term(\"<<>\")); assertEquals(p, TerminalParser.term(\">>>\")); assertEquals(p, TerminalParser.term(\">>>\""
    },
    {
        "original_path": "jparsec_jparsec###jparsec_jparsec/jparsec-examples/src/test/java/org/jparsec/examples/common/ValueObjectTest###testToString",
        "generated_path": "ValueObjectTest###testToString.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testToString() { ValueObject valueObject = new ValueObject(); assertEquals(\"ValueObject {\", valueObject.toString()); }\n"
    },
    {
        "original_path": "jparsec_jparsec###jparsec_jparsec/jparsec/src/test/java/org/jparsec/OperatorsTest###testLexicon",
        "generated_path": "OperatorsTest###testLexicon.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testLexicon() { final Lexicon lexicon = Operators.lexicon(Arrays.asList(\"a\", \"b\", \"c\")); assertEquals(\"a\", lexicon.get(\"a\")); assertEquals(\"b\", lexicon.get(\"b\")); assertEquals(\"c\", lexicon.get(\"c\")); assertEquals(\"d\", lexicon.get(\"d\")); assertEquals(\"e\", lexicon.get(\"e\")); assertEquals(\"f\", lexicon.get(\"f\")); assertEquals(\"e\", lexicon.get(\"f\")); assertEquals(\"e\", lexicon.get(\"f\")); assertEquals(\"e\", lexicon.get(\"e\")); assertEquals(\"f\", lexicon.get(\"f\")); assertEquals(\"e\", lexicon.get(\"e\")); assertEquals(\"e\", lexicon.get(\"e\")); assertEquals(\"e\", lexicon.get(\"e\")); assertEquals(\"e\", lexicon.get(\"e\")); assertEquals(\"e\", lexicon.get(\"e\")); assertEquals(\"e\", lexicon.get(\"e\")); assertEquals(\"e\", lexicon.get(\"e\")); assertEquals(\"e\", lexicon.get(\"e\")); assertEquals(\"e\", lexicon.get(\"e\")); assertEquals(\"e\", lexicon.get(\"e\")); assertEquals(\"e\", lexicon.get(\"e\")); assertEquals(\"e\", lexicon.get(\"e\")); assertEquals(\"e\", lexicon.get(\"e\")); assertEquals(\"e\", lexicon.get"
    },
    {
        "original_path": "jparsec_jparsec###jparsec_jparsec/jparsec-examples/src/test/java/org/jparsec/examples/java/parser/StatementParserTest###testStatement",
        "generated_path": "StatementParserTest###testStatement.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testThrowStatement() { Parser<Statement> s = StatementParser.statement(Parser.literal(\"throw\")); assertEquals(\"throw\", s.parse()); }\n"
    },
    {
        "original_path": "jparsec_jparsec###jparsec_jparsec/jparsec/src/test/java/org/jparsec/ParsersTest###testToArrayWithIteration",
        "generated_path": "ParsersTest###testToArrayWithIteration.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testToArrayWithIteration() { final Parser<Object[]>[] result = Parsers.toArrayWithIteration(new Parser<Object[]>[] {Parser.always(), Parser.always(), Parser.always(), Parser.always(), Parser.always(), Parser.always(), Parser.always(), Parser.always(), Parser.always(), Parser.always(), Parser.always(), Parser.always(), Parser.always(), Parser.always(), Parser.always(), Parser.always(), Parser.always(), Parser.always(), Parser.always(), Parser.always(), Parser.always(), Parser.always(), Parser.always(), Parser.always(), Parser.always(), Parser.always(), Parser.always(), Parser.always(), Parser.always(), Parser.always(), Parser.always(), Parser.always(), Parser.always(), Parser.always(), Parser.always(), Parser.always(), Parser.always(), Parser.always(), Parser.always(), Parser.always(), Parser.always(), Parser.always(), Parser.always(), Parser.always(), Parser.always(), Parser.always(), Parser.always(), Parser.always(), Parser.always(), Parser.always(), Parser.always(), Parser.always(), Parser.always(), Parser.always(), Parser.always(), Parser.always(), Parser.always(), Parser.always(), Parser.always(), Parser.always(), Parser.always(), Parser.always(), Parser.always(), Parser.always(), Parser.always(), Parser.always(), Parser.always(), Parser.always(), Parser.always(), Parser.always(), Parser.always(),"
    },
    {
        "original_path": "jparsec_jparsec###jparsec_jparsec/jparsec/src/test/java/org/jparsec/internal/util/IntListTest###testSet",
        "generated_path": "IntListTest###testSet.java",
        "Compile_result": 1,
        "Test_result": 0,
        "Gen_Test": "@Test public void testSet() { IntList list = new IntList(); list.set(0, 1); assertEquals(1, list.size()); assertEquals(1, list.get(0)); assertEquals(1, list.get(1)); assertEquals(1, list.get(2)); assertEquals(1, list.get(3)); assertEquals(1, list.get(4)); assertEquals(1, list.get(5)); assertEquals(1, list.get(6)); assertEquals(1, list.get(7)); assertEquals(1, list.get(8)); assertEquals(1, list.get(9)); assertEquals(1, list.get(10)); assertEquals(1, list.get(11)); assertEquals(1, list.get(12)); assertEquals(1, list.get(13)); assertEquals(1, list.get(14)); assertEquals(1, list.get(15)); assertEquals(1, list.get(16)); assertEquals(1, list.get(17)); assertEquals(1, list.get(18)); }\n"
    },
    {
        "original_path": "jparsec_jparsec###jparsec_jparsec/jparsec-examples/src/test/java/org/jparsec/examples/sql/parser/ExpressionParserTest###testLogical",
        "generated_path": "ExpressionParserTest###testLogical.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testLogical() { Parser<Expression> expr = new Parser<Expression>() { @Override public Parser<Expression> next() { return Parser.literal(\"a\"); } @Override public Parser<Expression> next() { return Parser.literal(\"b\"); } @Override public Parser<Expression> next() { return Parser.literal(\"c\"); } @Override public Parser<Expression> next() { return Parser.literal(\"d\"); } @Override public Parser<Expression> next() { return Parser.literal(\"e\"); } @Override public Parser<Expression> next() { return Parser.literal(\"f\"); } @Override public Parser<Expression> next() { return Parser.literal(\"g\"); } @Override public Parser<Expression> next() { return Parser.literal(\"h\"); } @Override public Parser<Expression> next() { return Parser.literal(\"i\"); } @Override public Parser<Expression> next() { return Parser.literal(\"j\"); } @Override public Parser<Expression> next() { return Parser.literal(\"i\"); } @Override public Parser<Expression> next() { return Parser.literal(\"j\"); } @Override public Parser<Expression> next() { return Parser.literal(\"i\"); } @Override public Parser<Expression> next() { return Parser.literal(\"i\"); } @Override public Parser<Expression> next() { return Parser.literal(\"i\"); } @Override public Parser<Expression> next() { return Parser.literal(\"i\"); } @Override public Parser<Expression> next()"
    },
    {
        "original_path": "jparsec_jparsec###jparsec_jparsec/jparsec-examples/src/test/java/org/jparsec/examples/sql/parser/RelationParserTest###testJoin",
        "generated_path": "RelationParserTest###testJoin.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testJoin() { Parser<Relation> rel = Parser.of(Relation.class); Parser<Expression> cond = Parser.of(Expression.class); Parser<Relation> parser = RelationParser.join(rel, cond); assertEquals(rel, parser); assertEquals(rel, parser); assertEquals(rel, parser.next()); assertEquals(rel, parser.next()); assertEquals(rel, parser.next()); assertEquals(rel, parser.next()); assertEquals(rel, parser.next()); assertEquals(rel, parser.next()); assertEquals(rel, parser.next()); assertEquals(rel, parser.next()); assertEquals(rel, parser.next()); assertEquals(rel, parser.next()); assertEquals(rel, parser.next()); assertEquals(rel, parser.next()); assertEquals(rel, parser.next()); assertEquals(rel, parser.next()); assertEquals(rel, parser.next()); assertEquals(rel, parser.next()); assertEquals(rel, parser.next()); assertEquals(rel, parser.next()); assertEquals(rel, parser.next()); assertEquals(rel, parser.next()); assertEquals(rel, parser.next()); assertEquals(rel, parser.next()); assertEquals(rel, parser.next()); assertEquals(rel, parser.next()); assertEquals(rel, parser.next()); assertEquals(rel, parser.next()); assertEquals(rel, parser.next()); assertEquals(rel, parser.next()); assert"
    },
    {
        "original_path": "jparsec_jparsec###jparsec_jparsec/jparsec-examples/src/test/java/org/jparsec/examples/java/parser/TerminalParserTest###testAdjacent",
        "generated_path": "TerminalParserTest###testAdjacent.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testAdjacent() { Parser<Token> parser = TerminalParser.adjacent(\"=\"); assertEquals(parser, TerminalParser.adjacent(\"=\")); assertEquals(parser, TerminalParser.adjacent(\"=\")); assertEquals(parser, TerminalParser.adjacent(\"=\")); assertEquals(parser, TerminalParser.adjacent(\"=\")); assertEquals(parser, TerminalParser.adjacent(\"=\")); assertEquals(parser, TerminalParser.adjacent(\"=\")); assertEquals(parser, TerminalParser.adjacent(\"=\")); assertEquals(parser, TerminalParser.adjacent(\"=\")); assertEquals(parser, TerminalParser.adjacent(\"=\")); assertEquals(parser, TerminalParser.adjacent(\"=\")); assertEquals(parser, TerminalParser.adjacent(\"=\")); assertEquals(parser, TerminalParser.adjacent(\"=\")); assertEquals(parser, TerminalParser.adjacent(\"=\")); assertEquals(parser, TerminalParser.adjacent(\"=\")); assertEquals(parser, TerminalParser.adjacent(\"=\")); assertEquals(parser, TerminalParser.adjacent(\"=\")); assertEquals(parser, TerminalParser.adjacent(\"=\")); assertEquals(parser, TerminalParser.adjacent(\"=\")); assertEquals(parser, TerminalParser.adjacent(\"=\")); assertEquals(parser, TerminalParser.adjacent(\"=\")); assertEquals(parser, TerminalParser.adjacent(\"=\")); assertEquals(parser, TerminalParser.adjacent(\"=\")); assertEquals(parser, TerminalParser.adj"
    },
    {
        "original_path": "jparsec_jparsec###jparsec_jparsec/jparsec-examples/src/test/java/org/jparsec/examples/java/parser/StatementParserTest###testVarStatement",
        "generated_path": "StatementParserTest###testVarStatement.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testVarStatement() { Parser<Statement> p = varStatement(expr(\"var(a)\")); assertStatement(p, \"var(a)\"); assertStatement(p, \"var(a)\"); assertStatement(p, \"var(a)\"); assertStatement(p, \"var(a)\"); assertStatement(p, \"var(a)\"); assertStatement(p, \"var(a)\"); assertStatement(p, \"var(a)\"); assertStatement(p, \"var(a)\"); assertStatement(p, \"var(a)\"); assertStatement(p, \"var(a)\"); assertStatement(p, \"var(a)\"); assertStatement(p, \"var(a)\"); assertStatement(p, \"var(a)\"); assertStatement(p, \"var(a)\"); assertStatement(p, \"var(a)\"); assertStatement(p, \"var(a)\"); assertStatement(p, \"var(a)\"); assertStatement(p, \"var(a)\"); assertStatement(p, \"var(a)\"); assertStatement(p, \"var(a)\"); assertStatement(p, \"var(a)\"); assertStatement(p, \"var(a)\"); assertStatement(p, \"var(a)\"); assertStatement(p, \"var(a)\"); assertStatement(p, \"var(a)\"); assertStatement(p, \"var(a)\"); assertStatement(p, \"var"
    },
    {
        "original_path": "jparsec_jparsec###jparsec_jparsec/jparsec-examples/src/test/java/org/jparsec/examples/bnf/parser/RuleParserTest###testRule",
        "generated_path": "RuleParserTest###testRule.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testRule() { Parser<Rule> parser = RuleParser.rule(); assertEquals(Parser.LITERAL, parser.parse(parser)); assertEquals(Parser.IDENT, parser.parse(parser)); assertEquals(Parser.LITERAL, parser.parse(parser)); assertEquals(Parser.LITERAL, parser.parse(parser)); assertEquals(Parser.LITERAL, parser.parse(parser)); assertEquals(Parser.IDENT, parser.parse(parser)); assertEquals(Parser.LITERAL, parser.parse(parser)); assertEquals(Parser.LITERAL, parser.parse(parser)); assertEquals(Parser.IDENT, parser.parse(parser)); assertEquals(Parser.LITERAL, parser.parse(parser)); assertEquals(Parser.LITERAL, parser.parse(parser)); assertEquals(Parser.IDENT, parser.parse(parser)); assertEquals(Parser.LITERAL, parser.parse(parser)); assertEquals(Parser.IDENT, parser.parse(parser)); assertEquals(Parser.LITERAL, parser.parse(parser)); assertEquals(Parser.LITERAL, parser.parse(parser)); assertEquals(Parser.IDENT, parser.parse(parser)); assertEquals(Parser.LITERAL, parser.parse(parser)); assertEquals(Parser.LITERAL, parser.parse(parser)); assertEquals(Parser.IDENT, parser.parse(parser)); assertEquals(Parser.LITERAL, parser.parse(parser)); }\n"
    },
    {
        "original_path": "xuender_unidecode###xuender_unidecode/src/test/java/me/xuender/unidecode/UnidecodeTest###testInitials",
        "generated_path": "UnidecodeTest###testInitials.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testInitials() throws UnsupportedEncodingException { assertEquals(\"\", Unidecode.initials(null)); assertEquals(\"\", Unidecode.initials(\"\")); assertEquals(\"\", Unidecode.initials(\"\")); assertEquals(\"\", Unidecode.initials(\"\")); assertEquals(\"\", Unidecode.initials(\"\")); assertEquals(\"\", Unidecode.initials(\"\")); assertEquals(\"\", Unidecode.initials(\"\")); assertEquals(\"\", Unidecode.initials(\"\")); assertEquals(\"\", Unidecode.initials(\"\")); assertEquals(\"\", Unidecode.initials(\"\")); assertEquals(\"\", Unidecode.initials(\"\")); assertEquals(\"\", Unidecode.initials(\"\")); assertEquals(\"\", Unidecode.initials(\"\")); assertEquals(\"\", Unidecode.initials(\"\")); assertEquals(\"\", Unidecode.initials(\"\")); assertEquals(\"\", Unidecode.initials(\"\")); assertEquals(\"\", Unidecode.initials(\"\")); assertEquals(\"\", Unidecode.initials(\"\")); assertEquals(\"\", Unidecode.initials(\"\")); assertEquals(\"\", Unidecode.initials(\"\")); assertEquals(\"\", Unidecode.initials(\"\")); assertEquals(\"\", Unidecode.initials(\"\")); assertEquals(\"\", Unidecode.initials(\"\")); assertEquals(\"\", Unidecode."
    },
    {
        "original_path": "xuender_unidecode###xuender_unidecode/src/test/java/me/xuender/unidecode/UnidecodeTest###testDecode",
        "generated_path": "UnidecodeTest###testDecode.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testDecode() throws UnsupportedEncodingException { assertEquals(\"\", Unidecode.decode(null)); assertEquals(\"\", Unidecode.decode(\"\")); assertEquals(\"\", Unidecode.decode(\"\")); assertEquals(\"\", Unidecode.decode(\"\")); assertEquals(\"\", Unidecode.decode(\"\")); assertEquals(\"\", Unidecode.decode(\"\")); assertEquals(\"\", Unidecode.decode(\"\")); assertEquals(\"\", Unidecode.decode(\"\")); assertEquals(\"\", Unidecode.decode(\" \")); assertEquals(\"\", Unidecode.decode(\" \")); assertEquals(\"\", Unidecode.decode(\" \")); assertEquals(\"\", Unidecode.decode(\" \")); assertEquals(\"\", Unidecode.decode(\" \")); assertEquals(\"\", Unidecode.decode(\" \")); assertEquals(\"\", Unidecode.decode(\" \")); assertEquals(\"\", Unidecode.decode(\" \")); assertEquals(\"\", Unidecode.decode(\" \")); assertEquals(\"\", Unidecode.decode(\" \")); assertEquals(\"\", Unidecode.decode(\" \")); assertEquals(\"\", Unidecode.decode(\" \")); assertEquals(\"\", Unidecode.decode(\" \")); assertEquals(\"\", Unidecode.decode(\" \")); assertEquals(\"\", Unidecode.decode(\" \")); assertEquals(\"\", Unidecode.decode(\" \")); assertEquals(\"\", Unidecode.decode(\" \")); assertEquals(\"\", Unidecode."
    },
    {
        "original_path": "assertthat_selenium-shutterbug###assertthat_selenium-shutterbug/src/test/java/com/assertthat/selenium_shutterbug/utils/image/ImageProcessorTest###testAddText",
        "generated_path": "ImageProcessorTest###testAddText.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testAddText() throws Exception { BufferedImage image = ImageIO.read(new File(\"src/test/resources/testImage.png\")); BufferedImage expected = ImageIO.read(new File(\"src/test/resources/testImage.png\")); assertEquals(expected, ImageProcessor.addText(image, 0, 0, \"This is a text\", Color.WHITE, new Font(\"Arial\", \"Arial\"))); }\n"
    },
    {
        "original_path": "assertthat_selenium-shutterbug###assertthat_selenium-shutterbug/src/test/java/com/assertthat/selenium_shutterbug/utils/image/ImageProcessorTest###testImagesAreEquals",
        "generated_path": "ImageProcessorTest###testImagesAreEquals.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testImagesAreEquals() throws Exception { BufferedImage image1 = ImageIO.read(new File(\"src/test/resources/image1.png\"), BufferedImage.TYPE_INT_ARGB); BufferedImage image2 = ImageIO.read(new File(\"src/test/resources/image2.png\"), BufferedImage.TYPE_INT_ARGB); assertTrue(ImageProcessor.imagesAreEquals(image1, image2, 0.5)); assertTrue(ImageProcessor.imagesAreEquals(image1, image2, 0.5)); assertTrue(ImageProcessor.imagesAreEquals(image1, image2, 0.5)); assertTrue(ImageProcessor.imagesAreEquals(image1, image2, 0.5)); assertTrue(ImageProcessor.imagesAreEquals(image1, image2, 0.5)); assertTrue(ImageProcessor.imagesAreEquals(image1, image2, 0.5)); assertTrue(ImageProcessor.imagesAreEquals(image1, image2, 0.5)); assertTrue(ImageProcessor.imagesAreEquals(image1, image2, 0.5)); assertTrue(ImageProcessor.imagesAreEquals(image1, image2, 0.5)); assertTrue(ImageProcessor.imagesAreEquals(image1, image2, 0.5)); assertTrue(ImageProcessor.imagesAreEquals(image1, image2, 0.5)); assertTrue(ImageProcessor.imagesAreEquals(image1, image2, 0.5));"
    },
    {
        "original_path": "assertthat_selenium-shutterbug###assertthat_selenium-shutterbug/src/test/java/com/assertthat/selenium_shutterbug/utils/image/ImageProcessorTest###testHighlight",
        "generated_path": "ImageProcessorTest###testHighlight.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testHighlight() throws Exception { Coordinates coords = new Coordinates(0, 0, 0); BufferedImage image = ImageProcessor.highlight(sourceImage, coords, Color.BLUE, 0); assertEquals(sourceImage.getWidth(), image.getWidth()); assertEquals(sourceImage.getHeight(), image.getHeight()); }\n"
    },
    {
        "original_path": "FINRAOS_DataGenerator###FINRAOS_DataGenerator/dg-core/src/test/java/org/finra/datagenerator/engine/scxml/tags/NWiseExtensionTest###expandTupleIntoTestCasesTest",
        "generated_path": "NWiseExtensionTest###expandTupleIntoTestCasesTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testExpandTupleIntoTestCases() { Set<String> tuple = new HashSet<String>(); tuple.add(\"a\"); tuple.add(\"b\"); tuple.add(\"c\"); Map<String, String[]> variableDomains = new HashMap<String, String[]>(); variableDomains.put(\"a\", new String[]{\"b\", \"c\"}); List<Map<String, String>> expandedTestCases = nWiseExtension.expandTupleIntoTestCases(tuple, variableDomains); assertEquals(1, expandedTestCases.size()); assertEquals(\"a\", expandedTestCases.get(0).get(\"a\")); assertEquals(\"b\", expandedTestCases.get(1).get(\"b\")); assertEquals(\"c\", expandedTestCases.get(2).get(\"a\")); assertEquals(\"c\", expandedTestCases.get(3).get(\"a\")); assertEquals(\"c\", expandedTestCases.get(4).get(\"a\")); assertEquals(\"c\", expandedTestCases.get(5).get(\"a\")); assertEquals(\"c\", expandedTestCases.get(6).get(\"a\")); assertEquals(\"c\", expandedTestCases.get(7).get(\"a\")); assertEquals(\"c\", expandedTestCases.get(8).get(\"a\")); assertEquals(\"c\", expandedTestCases.get(9).get(\"a\")); assertEquals(\"c\", expandedTestCases.get(10).get(\"a\")); }\n"
    },
    {
        "original_path": "FINRAOS_DataGenerator###FINRAOS_DataGenerator/dg-core/src/test/java/org/finra/datagenerator/engine/scxml/tags/NWiseExtensionTest###makeNWiseTuplesTest",
        "generated_path": "NWiseExtensionTest###makeNWiseTuplesTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testMakeNWiseTuples() { List<Set<String>> tuples = nWiseExtension.makeNWiseTuples(new String[]{\"a\", \"b\", \"c\"}, 3); assertEquals(3, tuples.size()); assertTrue(tuples.get(0).contains(\"a\")); assertTrue(tuples.get(1).contains(\"b\")); assertTrue(tuples.get(2).contains(\"c\")); assertTrue(tuples.get(3).contains(\"c\")); assertTrue(tuples.get(4).contains(\"d\")); assertTrue(tuples.get(5).contains(\"e\")); assertTrue(tuples.get(6).contains(\"f\")); assertTrue(tuples.get(7).contains(\"g\")); assertTrue(tuples.get(8).contains(\"e\")); assertTrue(tuples.get(9).contains(\"f\")); assertTrue(tuples.get(10).contains(\"g\")); }\n"
    },
    {
        "original_path": "FINRAOS_DataGenerator###FINRAOS_DataGenerator/dg-core/src/test/java/org/finra/datagenerator/engine/scxml/tags/NWiseExtensionTest###pipelinePossibleStatesTest",
        "generated_path": "NWiseExtensionTest###pipelinePossibleStatesTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testPipelinePossibleStates() { NWiseAction action = new NWiseAction(); action.setCoVariables(\"var1,var2,var3\"); List<Map<String, String>> possibleStates = new ArrayList<>(); possibleStates.add(new HashMap<>()); possibleStates.add(new HashMap<>()); possibleStates.add(new HashMap<>()); possibleStates.add(new HashMap<>()); possibleStates.add(new HashMap<>()); List<Map<String, String>> result = nWiseExtension.pipelinePossibleStates(action, possibleStates); assertEquals(2, result.size()); assertEquals(\"var1\", result.get(0).get(\"var1\")); assertEquals(\"var2\", result.get(1).get(\"var2\")); assertEquals(\"var3\", result.get(2).get(\"var3\")); assertEquals(\"var4\", result.get(3).get(\"var4\")); assertEquals(\"var5\", result.get(4).get(\"var5\")); assertEquals(\"var6\", result.get(5).get(\"var6\")); assertEquals(\"var7\", result.get(6).get(\"var7\")); assertEquals(\"var8\", result.get(7).get(\"var8\")); assertEquals(\"var9\", result.get(8).get(\"var9\")); }\n"
    },
    {
        "original_path": "FINRAOS_DataGenerator###FINRAOS_DataGenerator/dg-core/src/test/java/org/finra/datagenerator/engine/scxml/tags/NWiseExtensionTest###produceNWiseTest",
        "generated_path": "NWiseExtensionTest###produceNWiseTest.java",
        "Compile_result": 1,
        "Test_result": 0,
        "Gen_Test": "@Test public void produceNWise() { NWiseExtension nWiseExtension = new NWiseExtension(); List<Map<String, String>> result = nWiseExtension.produceNWise(3, new String[]{\"a\", \"b\", \"c\"}, new HashMap<String, String[]>()); Assert.assertEquals(3, result.size()); Assert.assertEquals(\"a\", result.get(0).get(\"a\")); Assert.assertEquals(\"b\", result.get(1).get(\"a\")); Assert.assertEquals(\"c\", result.get(2).get(\"a\")); Assert.assertEquals(\"c\", result.get(3).get(\"a\")); Assert.assertEquals(\"c\", result.get(4).get(\"a\")); Assert.assertEquals(\"c\", result.get(5).get(\"a\")); Assert.assertEquals(\"c\", result.get(6).get(\"a\")); Assert.assertEquals(\"c\", result.get(7).get(\"a\")); Assert.assertEquals(\"c\", result.get(8).get(\"a\")); Assert.assertEquals(\"c\", result.get(9).get(\"a\")); Assert.assertEquals(\"c\", result.get(10).get(\"a\")); Assert.assertEquals(\"c\", result.get(11).get(\"a\")); Assert.assertEquals(\"c\", result.get(12).get(\"a\")); }\n"
    },
    {
        "original_path": "arouel_uadetector###arouel_uadetector/modules/uadetector-core/src/test/java/net/sf/uadetector/UserAgentTest###testToString",
        "generated_path": "UserAgentTest###testToString.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testToString() { final UserAgent a = new UserAgent(DeviceCategory.UNKNOWN, UserAgentFamily.UNKNOWN, \"\", \"unknown\", OperatingSystem.UNKNOWN, \"producer\", \"producerUrl\", UserAgentType.UNKNOWN, \"typeName\", \"url\", VersionNumber.UNKNOWN); assertEquals(\"UserAgent [deviceCategory=UNKNOWN, family=UNKNOWN, icon=unknown, name=unknown, operatingSystem=unknown, producer=producerUrl, type=unknown, typeName=unknown, url=unknown, versionNumber=unknown]\", a.toString()); }\n"
    },
    {
        "original_path": "arouel_uadetector###arouel_uadetector/modules/uadetector-core/src/test/java/net/sf/uadetector/OperatingSystemTest###testHashCode",
        "generated_path": "OperatingSystemTest###testHashCode.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testHashCode() { final OperatingSystem a = new OperatingSystem(OperatingSystemFamily.UNKNOWN, \"unknown\", \"unknown.png\", \"unknown\", \"producer\", \"producerUrl\", \"url\", VersionNumber.UNKNOWN); final OperatingSystem b = new OperatingSystem(OperatingSystemFamily.UNKNOWN, \"unknown\", \"unknown.png\", \"unknown\", \"producerUrl\", \"url\", VersionNumber.UNKNOWN); assertEquals(a, b); assertEquals(a.hashCode(), b.hashCode()); }\n"
    },
    {
        "original_path": "arouel_uadetector###arouel_uadetector/modules/uadetector-core/src/test/java/net/sf/uadetector/UserAgentTest###testHashCode",
        "generated_path": "UserAgentTest###testHashCode.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testHashCode() { final UserAgent a = new UserAgent(DeviceCategory.UNKNOWN, UserAgentFamily.UNKNOWN, \"\", \"\", \"unknown\", OperatingSystem.UNKNOWN, \"\", \"\", VersionNumber.UNKNOWN); final UserAgent b = new UserAgent(DeviceCategory.UNKNOWN, UserAgentFamily.UNKNOWN, \"\", \"\", \"\", \"\", VersionNumber.UNKNOWN); assertEquals(a, b); assertEquals(a.hashCode(), b.hashCode()); }\n"
    },
    {
        "original_path": "arouel_uadetector###arouel_uadetector/modules/uadetector-core/src/test/java/net/sf/uadetector/OperatingSystemTest###testToString",
        "generated_path": "OperatingSystemTest###testToString.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testToString() { final String result = new OperatingSystem(1, \"name\", \"family\", \"infoUrl\", \"producer\", \"producerUrl\", \"url\", \"icon\"); assertEquals(\"OperatingSystem [id=1, name=name, family=family, infoUrl=infoUrl, patterns=patterns, producer=producer, producerUrl=producerUrl, url=url, icon=icon]\", result); }\n"
    },
    {
        "original_path": "arouel_uadetector###arouel_uadetector/modules/uadetector-core/src/test/java/net/sf/uadetector/internal/data/DataTest###testToString",
        "generated_path": "DataTest###testToString.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testToString() { final Data data = new Data(new HashSet<Browser>(), new TreeMap<Integer, SortedSet<BrowserPattern>>(), new TreeMap<Integer, SortedSet<OperatingSystemPattern>>(), new TreeMap<Integer, SortedSet<OperatingSystemPattern>>(), new TreeMap<Integer, SortedSet<OperatingSystemPattern>>(), new TreeMap<Integer, SortedSet<OperatingSystemPattern>>(), new TreeMap<Integer, SortedSet<OperatingSystemPattern>>(), new TreeMap<Integer, SortedSet<OperatingSystemPattern>>(), new TreeMap<Integer, SortedSet<OperatingSystemPattern>>(), new TreeMap<Integer, SortedSet<OperatingSystemPattern>>(), new TreeMap<Integer, SortedSet<OperatingSystemPattern>>(), new TreeMap<Integer, TreeSet<OperatingSystemPattern>>(), new TreeMap<Integer, TreeSet<OperatingSystemPattern>>(), new TreeMap<Integer, TreeSet<OperatingSystemPattern>>(), new TreeMap<Integer, TreeSet<OperatingSystemPattern>>(), new TreeMap<Integer, TreeSet<OperatingSystemPattern>>(), new TreeMap<Integer, TreeSet<OperatingSystemPattern>>(), new TreeMap<Integer, TreeSet<OperatingSystemPattern>>(), new TreeMap<Integer, TreeSet<OperatingSystemPattern>>(), new TreeMap<Integer, TreeSet<OperatingSystemPattern>>(), new TreeMap<Integer, TreeSet<OperatingSystemPattern>>(), new TreeMap<Integer, TreeSet<OperatingSystemPattern>>(), new TreeMap<Integer, TreeSet<OperatingSystemPattern>>(), new TreeMap<Integer, TreeSet<OperatingSystemPattern>>(), new TreeMap<Integer, TreeSet<OperatingSystemPattern>>(), new TreeMap<Integer, TreeSet<OperatingSystemPattern"
    },
    {
        "original_path": "hypercube1024_firefly###hypercube1024_firefly/firefly-common/src/test/java/com/fireflysource/common/string/SearchPatternTest###testEndsWith",
        "generated_path": "SearchPatternTest###testEndsWith.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testEndsWith() { SearchPattern pattern = new SearchPattern(); byte[] data = new byte[]{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0"
    },
    {
        "original_path": "hypercube1024_firefly###hypercube1024_firefly/firefly-common/src/test/java/com/fireflysource/common/collection/list/TestLazyList###testToStringArray",
        "generated_path": "TestLazyList###testToStringArray.java",
        "Compile_result": 1,
        "Test_result": 0,
        "Gen_Test": "@Test public void testToStringArray() { List<String> list = new ArrayList<String>(); list.add(\"a\"); list.add(\"b\"); list.add(\"c\"); String[] expResult = new String[] { \"a\", \"b\", \"c\" }; String[] result = LazyList.toStringArray(list); assertEquals(expResult, result); }\n"
    },
    {
        "original_path": "hypercube1024_firefly###hypercube1024_firefly/firefly-net/src/test/java/com/fireflysource/net/http/common/model/HttpURITest###testParseRequestTarget",
        "generated_path": "HttpURITest###testParseRequestTarget.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testParseRequestTarget() throws Exception { HttpURI uri = new HttpURI(\"http\", \"localhost\", 8080); uri.parseRequestTarget(\"GET\", \"http: uri.parseRequestTarget(\"GET\", \"http: uri.parseRequestTarget(\"GET\", \"http: uri.parseRequestTarget(\"GET\", \"http: uri.parseRequestTarget(\"GET\", \"http: uri.parseRequestTarget(\"GET\", \"http: uri.parseRequestTarget(\"GET\", \"http: uri.parseRequestTarget(\"GET\", \"http: uri.parseRequestTarget(\"GET\", \"http: uri.parseRequestTarget(\"GET\", \"http: uri.parseRequestTarget(\"GET\", \"http: uri.parseRequestTarget(\"GET\", \"http: uri.parseRequestTarget(\"GET\", \"http: uri.parseRequestTarget(\"GET\", \"http: uri.parseRequestTarget(\"GET\", \"http: uri.parseRequestTarget(\"GET\", \"http: uri.parseRequestTarget(\"GET\", \"http: uri.parseRequestTarget(\"GET\", \"http: uri.parseRequestTarget(\"GET\", \"http: uri.parseRequestTarget(\"GET\", \"http: uri.parseRequestTarget(\"GET\", \"http: uri.parseRequestTarget(\"GET\", \"http: uri.parseRequestTarget(\"GET\", \"http: uri.parseRequestTarget(\"GET\", \"http: uri.parseRequestTarget(\"GET\", \"http: uri.parseRequestTarget(\"GET\", \"http: uri.parseRequest"
    },
    {
        "original_path": "hypercube1024_firefly###hypercube1024_firefly/firefly-net/src/test/java/com/fireflysource/net/http/common/model/HttpFieldsTest###testGetCSV",
        "generated_path": "HttpFieldsTest###testGetCSV.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void testGetCSV() { }\n"
    },
    {
        "original_path": "hypercube1024_firefly###hypercube1024_firefly/firefly-net/src/test/java/com/fireflysource/net/http/common/model/HttpURITest###testParse",
        "generated_path": "HttpURITest###testParse.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testParse() throws Exception { HttpURI uri = new HttpURI(\"http\", \"localhost\", 8080, \"/a/b/c/d/e\", \"/a/b/c/d/e\", \"/a/b/c/d/e\", \"/a/b/c/d/e\", \"/a/b/c/d/e\"); uri.parse(\"http: assertEquals(\"http: }\n"
    },
    {
        "original_path": "hypercube1024_firefly###hypercube1024_firefly/firefly-common/src/test/java/com/fireflysource/common/object/TestTypeUtils###convertHexDigitTest",
        "generated_path": "TestTypeUtils###convertHexDigitTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test(expected = NumberFormatException.class) public void testConvertHexDigit() throws Exception { TypeUtils.convertHexDigit('a'); }\n"
    },
    {
        "original_path": "hypercube1024_firefly###hypercube1024_firefly/firefly-common/src/test/java/com/fireflysource/common/object/TestTypeUtils###testIsFalse",
        "generated_path": "TestTypeUtils###testIsFalse.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testIsFalse() throws Exception { assertTrue(TypeUtils.isFalse(true)); assertTrue(TypeUtils.isFalse(false)); assertTrue(TypeUtils.isFalse(true)); assertTrue(TypeUtils.isFalse(true)); assertTrue(TypeUtils.isFalse(true)); assertTrue(TypeUtils.isFalse(true)); assertTrue(TypeUtils.isFalse(true)); assertTrue(TypeUtils.isFalse(true)); assertTrue(TypeUtils.isFalse(true)); assertTrue(TypeUtils.isFalse(true)); assertTrue(TypeUtils.isFalse(true)); assertTrue(TypeUtils.isFalse(true)); assertTrue(TypeUtils.isFalse(true)); assertTrue(TypeUtils.isFalse(true)); assertTrue(TypeUtils.isFalse(true)); assertTrue(TypeUtils.isFalse(true)); assertTrue(TypeUtils.isFalse(true)); assertTrue(TypeUtils.isFalse(true)); assertTrue(TypeUtils.isFalse(true)); assertTrue(TypeUtils.isFalse(true)); assertTrue(TypeUtils.isFalse(true)); assertTrue(TypeUtils.isFalse(true)); assertTrue(TypeUtils.isFalse(true)); assertTrue(TypeUtils.isFalse(true)); assertTrue(TypeUtils.isFalse(true)); assertTrue(TypeUtils.isFalse(true)); assertTrue(TypeUtils.isFalse(true)); assertTrue(TypeUtils.isFalse(true"
    },
    {
        "original_path": "hypercube1024_firefly###hypercube1024_firefly/firefly-common/src/test/java/com/fireflysource/common/string/TestQuotedStringTokenizer###testQuoteIfNeeded",
        "generated_path": "TestQuotedStringTokenizer###testQuoteIfNeeded.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testQuoteIfNeeded() throws Exception { assertEquals(\"\\\\\"\\\\\"\", QuotedStringTokenizer.quoteIfNeeded(\"\\\\\"\\\\\"\", \"\\\\\"\")); assertEquals(\"\\\\\"\\\\\"\", QuotedStringTokenizer.quoteIfNeeded(\"\\\\\"\\\\\"\", \"\\\\\"\")); assertEquals(\"\\\\\"\\\\\"\", QuotedStringTokenizer.quoteIfNeeded(\"\\\\\"\", \"\\\\\"\")); assertEquals(\"\\\\\"\\\\\"\", QuotedStringTokenizer.quoteIfNeeded(\"\\\\\"\", \"\\\\\"\")); assertEquals(\"\\\\\"\\\\\"\", QuotedStringTokenizer.quoteIfNeeded(\"\\\\\"\\\\\"\", \"\\\\\"\")); assertEquals(\"\\\\\"\\\\\"\", QuotedStringTokenizer.quoteIfNeeded(\"\\\\\"\\\\\"\", \"\\\\\"\")); assertEquals(\"\\\\\"\\\\\"\", QuotedStringTokenizer.quoteIfNeeded(\"\\\\\"\\\\\"\", \"\\\\\"\")); assertEquals(\"\\\\\"\\\\\"\", QuotedStringTokenizer.quoteIfNeeded(\"\\\\\"\\\\\"\", \"\\\\\"\")); assertEquals(\"\\\\\"\\\\\"\", QuotedStringTokenizer.quoteIfNeeded(\"\\\\\"\\\\\"\", \"\\\\\"\")); assertEquals(\"\\\\\"\\\\\"\", QuotedStringTokenizer.quoteIfNeeded(\"\\\\\"\\\\\"\", \"\\\\\"\")); assertEquals(\"\\\\\"\\\\\"\", QuotedStringTokenizer.quoteIfNeeded(\"\\\\\"\\\\\"\", \"\\\\\"\")); assertEquals(\"\\\\\"\\\\\"\", QuotedStringTokenizer.quoteIfNeeded(\"\\\\\"\\\\\"\", \"\\\\\"\")); assertEquals(\"\\\\\"\\\\\"\", QuotedStringTokenizer.quoteIfNeeded(\"\\\\\"\\\\\"\", \"\\\\\"\\\\\"\\\\\"\")); assertEquals(\"\\\\\"\\\\\"\", QuotedStringTokenizer.quoteIfNeeded(\"\\\\\"\\\\\"\\\\\"\", \"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\""
    },
    {
        "original_path": "hypercube1024_firefly###hypercube1024_firefly/firefly-common/src/test/java/com/fireflysource/common/string/TestStringUtils###testReplace",
        "generated_path": "TestStringUtils###testReplace.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void testReplace() { System.out.println(\"replace\"); String s = \"test\"; String expResult = \"test\"; String result = StringUtils.replace(s, expResult); assertEquals(expResult, result); }\n"
    },
    {
        "original_path": "hypercube1024_firefly###hypercube1024_firefly/firefly-net/src/test/java/com/fireflysource/net/http/common/codec/URIUtilsTest###testEncodeString",
        "generated_path": "URIUtilsTest###testEncodeString.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testEncodeString() { StringBuilder buf = null; String path = \"/a/b/c\"; String encode = \"/a/b/c\"; String result = URIUtils.encodeString(buf, path, encode); Assert.assertEquals(buf.toString(), result); }\n"
    },
    {
        "original_path": "hypercube1024_firefly###hypercube1024_firefly/firefly-common/src/test/java/com/fireflysource/common/collection/map/MultiMapTest###testToString",
        "generated_path": "MultiMapTest###testToString.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testToString() { MultiMap<String> m = new MultiMap<String>(); m.add(\"key\", \"value\"); m.add(\"key2\", \"value2\"); m.add(\"key3\", \"value3\"); m.add(\"key4\", \"value4\"); m.add(\"key5\", \"value5\"); m.add(\"key6\", \"value6\"); m.add(\"key7\", \"value7\"); m.add(\"key8\", \"value8\"); m.add(\"key9\", \"value9\"); m.add(\"key10\", \"value10\"); m.add(\"key11\", \"value11\"); m.add(\"key12\", \"value12\"); m.add(\"key13\", \"value13\"); m.add(\"key14\", \"value14\"); m.add(\"key15\", \"value15\"); m.add(\"key16\", \"value16\"); m.add(\"key17\", \"value17\"); m.add(\"key18\", \"value18\"); MultiMap<String> m2 = new MultiMap<String>(); m2.add(\"key1\", \"value1\"); m2.add(\"key2\", \"value2\"); m2.add(\"key1\", \"value1\"); m2.add(\"key2\", \"value2\"); m2.add(\"key1\", \"value1\"); m2.add(\"key2\", \"value2\"); m2.add(\"key1\", \"value1\"); m"
    },
    {
        "original_path": "hypercube1024_firefly###hypercube1024_firefly/firefly-net/src/test/java/com/fireflysource/net/http/common/model/HttpFieldsTest###testGetValues",
        "generated_path": "HttpFieldsTest###testGetValues.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetValues() throws Exception { HttpFields fields = new HttpFields(); fields.add(new HttpHeader(\"name\", \"value\")); fields.add(new HttpHeader(\"name2\", \"value2\")); fields.add(new HttpHeader(\"name3\", \"value3\")); fields.add(new HttpHeader(\"name4\", \"value4\")); fields.add(new HttpHeader(\"name5\", \"value5\")); fields.add(new HttpHeader(\"name6\", \"value6\")); fields.add(new HttpHeader(\"name7\", \"value7\")); fields.add(new HttpHeader(\"name8\", \"value8\")); fields.add(new HttpHeader(\"name9\", \"value9\")); fields.add(new HttpHeader(\"name10\", \"value10\")); fields.add(new HttpHeader(\"name11\", \"value11\")); fields.add(new HttpHeader(\"name12\", \"value12\")); fields.add(new HttpHeader(\"name13\", \"value13\")); HttpFields fields2 = new HttpFields(); fields2.add(new HttpHeader(\"name11\", \"value11\")); fields2.add(new HttpHeader(\"name12\", \"value12\")); fields2.add(new HttpHeader(\"name13\", \"value13\")); fields2.add(new HttpHeader(\"name11\", \"value11\")); fields2.add(new HttpHeader(\"name12\", \"value12\")); fields2.add(new HttpHeader(\"name13\", \"value13\")); fields"
    },
    {
        "original_path": "hypercube1024_firefly###hypercube1024_firefly/firefly-net/src/test/java/com/fireflysource/net/websocket/common/utils/QuoteUtilTest###testQuoteIfNeeded",
        "generated_path": "QuoteUtilTest###testQuoteIfNeeded.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void testQuoteIfNeeded() { StringBuilder buf = new StringBuilder(); QuoteUtil.quoteIfNeeded(buf, null, \";\"); assertEquals(\"\", buf.toString()); }\n"
    },
    {
        "original_path": "hypercube1024_firefly###hypercube1024_firefly/firefly-common/src/test/java/com/fireflysource/common/string/TestStringUtils###testHasText",
        "generated_path": "TestStringUtils###testHasText.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testHasText() { Assert.assertTrue(StringUtils.hasText(null)); Assert.assertFalse(StringUtils.hasText(\"\")); Assert.assertFalse(StringUtils.hasText(\" \")); Assert.assertFalse(StringUtils.hasText(\" \")); Assert.assertFalse(StringUtils.hasText(\" \")); Assert.assertFalse(StringUtils.hasText(\" \")); Assert.assertFalse(StringUtils.hasText(\" \")); Assert.assertFalse(StringUtils.hasText(\" \")); Assert.assertFalse(StringUtils.hasText(\" \")); Assert.assertFalse(StringUtils.hasText(\" \")); Assert.assertFalse(StringUtils.hasText(\" \")); Assert.assertFalse(StringUtils.hasText(\" \")); Assert.assertFalse(StringUtils.hasText(\" \")); Assert.assertFalse(StringUtils.hasText(\" \")); Assert.assertFalse(StringUtils.hasText(\" \")); Assert.assertFalse(StringUtils.hasText(\" \")); Assert.assertFalse(StringUtils.hasText(\" \")); Assert.assertFalse(StringUtils.hasText(\" \")); Assert.assertFalse(StringUtils.hasText(\" \")); Assert.assertFalse(StringUtils.hasText(\" \")); Assert.assertFalse(StringUtils.hasText(\" \")); Assert.assertFalse(StringUtils.hasText(\" \")); Assert.assertFalse(StringUtils.hasText(\" \")); Assert.assertFalse(StringUtils.hasText"
    },
    {
        "original_path": "hypercube1024_firefly###hypercube1024_firefly/firefly-common/src/test/java/com/fireflysource/common/io/TestBufferUtils###testAddCapacity",
        "generated_path": "TestBufferUtils###testAddCapacity.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testAddCapacity() throws Exception { ByteBuffer buf = BufferUtils.allocate(10); buf.limit(10); buf.position(10); buf.limit(10); buf.limit(10); buf.position(10); buf.limit(10); buf.limit(10); buf.limit(10); buf.limit(10); buf.limit(10); buf.limit(10); buf.limit(10); buf.limit(10); buf.limit(10); buf.limit(10); buf.limit(10); buf.limit(10); buf.limit(10); buf.limit(10); buf.limit(10); buf.limit(10); buf.limit(10); buf.limit(10); buf.limit(10); buf.limit(10); buf.limit(10); buf.limit(10); buf.limit(10); buf.limit(10); buf.limit(10); buf.limit(10); buf.limit(10); buf.limit(10); buf.limit(10); buf.limit(10); buf.limit(10); buf.limit(10); buf.limit(10); buf.limit(10); buf.limit(10); buf.limit(10); buf.limit(10); buf.limit(10); buf.limit(10); buf.limit(10); buf.limit(10); buf.limit(10); buf.limit(10); buf.limit(10); buf.limit"
    },
    {
        "original_path": "hypercube1024_firefly###hypercube1024_firefly/firefly-common/src/test/java/com/fireflysource/common/collection/map/MultiMapTest###testAdd",
        "generated_path": "MultiMapTest###testAdd.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testAdd() { MultiMap<String> map = new MultiMap<String>(); map.add(\"name\", \"value1\"); map.add(\"name\", \"value2\"); map.add(\"name\", \"value3\"); map.add(\"name\", \"value4\"); map.add(\"name\", \"value5\"); map.add(\"name\", \"value6\"); map.add(\"name\", \"value7\"); map.add(\"name\", \"value8\"); map.add(\"name\", \"value9\"); map.add(\"name\", \"value10\"); map.add(\"name\", \"value11\"); map.add(\"name\", \"value12\"); map.add(\"name\", \"value11\"); map.add(\"name\", \"value12\"); map.add(\"name\", \"value12\"); map.add(\"name\", \"value12\"); map.add(\"name\", \"value12\"); map.add(\"name\", \"value12\"); map.add(\"name\", \"value12\"); map.add(\"name\", \"value12\"); MultiMap<String> map2 = new MultiMap<String>(); map2.add(\"name\", \"value12\"); map2.add(\"name\", \"value12\"); map2.add(\"name\", \"value12\"); map2.add(\"name\", \"value12\"); MultiMap<String> map3 = new MultiMap<String>(); map3.add(\"name\", \"value12\"); map3.add(\"name\", \"value12\");"
    },
    {
        "original_path": "hypercube1024_firefly###hypercube1024_firefly/firefly-common/src/test/java/com/fireflysource/common/concurrent/TestCompletableFutures###testDoFinally",
        "generated_path": "TestCompletableFutures###testDoFinally.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void doFinally() throws Exception { CompletableFuture<String> future = CompletableFutures.doFinally(stage, function); future.get(10, TimeUnit.SECONDS); }\n"
    },
    {
        "original_path": "hypercube1024_firefly###hypercube1024_firefly/firefly-net/src/test/java/com/fireflysource/net/http/common/model/HttpFieldsTest###testGetQualityCSV",
        "generated_path": "HttpFieldsTest###testGetQualityCSV.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void testGetQualityCSV() { }\n"
    },
    {
        "original_path": "hypercube1024_firefly###hypercube1024_firefly/firefly-net/src/test/java/com/fireflysource/net/http/common/model/HttpFieldsTest###testAdd",
        "generated_path": "HttpFieldsTest###testAdd.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test(expected = IllegalArgumentException.class) public void testAddNullHeader() { HttpFields fields = new HttpFields(); fields.add(null, null); }\n"
    },
    {
        "original_path": "hypercube1024_firefly###hypercube1024_firefly/firefly-common/src/test/java/com/fireflysource/common/io/TestBufferUtils###testToArray",
        "generated_path": "TestBufferUtils###testToArray.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testToArray() throws Exception { List<ByteBuffer> buffers = new ArrayList<>(); buffers.add(ByteBuffer.wrap(new byte[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19,"
    },
    {
        "original_path": "hypercube1024_firefly###hypercube1024_firefly/firefly-common/src/test/java/com/fireflysource/common/object/TestTypeUtils###testIsTrue",
        "generated_path": "TestTypeUtils###testIsTrue.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testIsTrue() throws Exception { assertTrue(TypeUtils.isTrue(true)); assertTrue(TypeUtils.isTrue(false)); assertTrue(TypeUtils.isTrue(true)); assertTrue(TypeUtils.isTrue(true)); assertTrue(TypeUtils.isTrue(true)); assertTrue(TypeUtils.isTrue(true)); assertTrue(TypeUtils.isTrue(true)); assertTrue(TypeUtils.isTrue(true)); assertTrue(TypeUtils.isTrue(true)); assertTrue(TypeUtils.isTrue(true)); assertTrue(TypeUtils.isTrue(true)); assertTrue(TypeUtils.isTrue(true)); assertTrue(TypeUtils.isTrue(true)); assertTrue(TypeUtils.isTrue(true)); assertTrue(TypeUtils.isTrue(true)); assertTrue(TypeUtils.isTrue(true)); assertTrue(TypeUtils.isTrue(true)); assertTrue(TypeUtils.isTrue(true)); assertTrue(TypeUtils.isTrue(true)); assertTrue(TypeUtils.isTrue(true)); assertTrue(TypeUtils.isTrue(true)); assertTrue(TypeUtils.isTrue(true)); assertTrue(TypeUtils.isTrue(true)); assertTrue(TypeUtils.isTrue(true)); assertTrue(TypeUtils.isTrue(true)); assertTrue(TypeUtils.isTrue(true)); assertTrue(TypeUtils.isTrue(true)); assertTrue(TypeUtils.isTrue(true"
    },
    {
        "original_path": "hypercube1024_firefly###hypercube1024_firefly/firefly-common/src/test/java/com/fireflysource/common/collection/map/MultiMapTest###testRemoveValue",
        "generated_path": "MultiMapTest###testRemoveValue.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testRemoveValue() { MultiMap<String> m = new MultiMap<String>(); m.add(\"a\", \"b\"); m.add(\"c\", \"d\"); m.add(\"d\", \"e\"); m.add(\"e\", \"f\"); m.add(\"g\", \"h\"); m.add(\"g\", \"h\"); m.add(\"g\", \"h\"); m.add(\"g\", \"h\"); m.add(\"g\", \"h\"); m.add(\"g\", \"h\"); m.add(\"g\", \"h\"); m.add(\"g\", \"h\"); m.add(\"g\", \"h\"); m.add(\"g\", \"h\"); m.add(\"g\", \"h\"); m.add(\"g\", \"h\"); m.add(\"g\", \"h\"); m.add(\"g\", \"h\"); m.add(\"g\", \"h\"); m.add(\"g\", \"h\"); m.add(\"g\", \"h\"); m.add(\"g\", \"h\"); m.add(\"g\", \"h\"); m.add(\"g\", \"h\"); m.add(\"g\", \"h\"); m.add(\"g\", \"h\"); m.add(\"g\", \"h\"); m.add(\"g\", \"h\"); m.add(\"g\", \"h\"); m.add(\"g\", \"h\"); m.add(\"g\", \"h\"); m.add(\"g\", \"h\"); m.add(\"g\", \""
    },
    {
        "original_path": "hypercube1024_firefly###hypercube1024_firefly/firefly-common/src/test/java/com/fireflysource/common/collection/map/MultiMapTest###testPut",
        "generated_path": "MultiMapTest###testPut.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testPut() { MultiMap<String> map = new MultiMap<String>(); List<String> values = new ArrayList<>(); values.add(\"1\"); values.add(\"2\"); values.add(\"3\"); values.add(\"4\"); values.add(\"5\"); values.add(\"6\"); values.add(\"7\"); values.add(\"8\"); values.add(\"9\"); values.add(\"10\"); values.add(\"11\"); values.add(\"12\"); values.add(\"13\"); values.add(\"14\"); values.add(\"15\"); values.add(\"16\"); values.add(\"17\"); values.add(\"18\"); values.add(\"19\"); values.add(\"20\"); values.add(\"20\"); values.add(\"20\"); values.add(\"20\"); values.add(\"20\"); values.add(\"20\"); values.add(\"20\"); values.add(\"20\"); values.add(\"20\"); values.add(\"20\"); values.add(\"20\"); values.add(\"20\"); values.add(\"20\"); values.add(\"20\"); values.add(\"20\"); values.add(\"20\"); values.add(\"20\"); values.add(\"20\"); values.add(\"20\"); values.add(\"20\"); values.add(\"20\"); values.add(\"20\"); values.add(\"20\"); values.add(\"20\"); values.add(\"20\"); values.add(\"20\"); values.add(\"20\"); values.add(\"20\"); values.add(\""
    },
    {
        "original_path": "hypercube1024_firefly###hypercube1024_firefly/firefly-net/src/test/java/com/fireflysource/net/http/common/model/QuotedCSVTest###testUnQuote",
        "generated_path": "QuotedCSVTest###testUnQuote.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testUnquote() { assertEquals(\"\", QuotedCSV.unquote(\"\")); assertEquals(\"\\\\\"\", QuotedCSV.unquote(\"\\\\\"\\\\\"\")); assertEquals(\"\\\\\"\\\\\"\", QuotedCSV.unquote(\"\\\\\"\\\\\"\")); assertEquals(\"\\\\\"\\\\\"\", QuotedCSV.unquote(\"\\\\\"\\\\\"\")); assertEquals(\"\\\\\"\\\\\"\", QuotedCSV.unquote(\"\\\\\"\\\\\"\")); assertEquals(\"\\\\\"\\\\\"\", QuotedCSV.unquote(\"\\\\\"\\\\\"\\\\\"\")); assertEquals(\"\\\\\"\\\\\"\", QuotedCSV.unquote(\"\\\\\"\\\\\"\")); assertEquals(\"\\\\\"\\\\\"\", QuotedCSV.unquote(\"\\\\\"\\\\\"\")); assertEquals(\"\\\\\"\\\\\"\", QuotedCSV.unquote(\"\\\\\"\\\\\"\")); assertEquals(\"\\\\\"\\\\\"\", QuotedCSV.unquote(\"\\\\\"\\\\\"\")); assertEquals(\"\\\\\"\\\\\"\", QuotedCSV.unquote(\"\\\\\"\\\\\"\")); assertEquals(\"\\\\\"\\\\\"\", QuotedCSV.unquote(\"\\\\\"\\\\\"\")); assertEquals(\"\\\\\"\\\\\"\", QuotedCSV.unquote(\"\\\\\"\\\\\"\\\\\"\")); assertEquals(\"\\\\\"\\\\\"\", QuotedCSV.unquote(\"\\\\\"\\\\\"\\\\\"\")); assertEquals(\"\\\\\"\\\\\"\", QuotedCSV.unquote(\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\""
    },
    {
        "original_path": "helun_Ektorp###helun_Ektorp/org.ektorp/src/test/java/org/ektorp/util/JSONComparatorTest###testAreEqual",
        "generated_path": "JSONComparatorTest###testAreEqual.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testAreEqual() throws Exception { String jsonA = \"{\\\\\"a\\\\\":{\\\\\"b\\\\\":{\\\\\"c\\\\\":{\\\\\"d\\\\\":{\\\\\"e\\\\\":{\\\\\"d\\\\\":{\\\\\"d\\\\\":{\\\\\"d\\\\\":{\\\\\"d\\\\\":{\\\\\"d\\\\\":{\\\\\"d\\\\\":{\\\\\"d\\\\\":{\\\\\"d\\\\\":{\\\\\"d\\\\\":{\\\\\"d\\\\\":{\\\\\"d\\\\\":{\\\\\"d\\\\\":{\\\\\"d\\\\\":{\\\\\"d\\\\\":{\\\\\"d\\\\\":{\\\\\"d\\\\\":{\\\\\"d\\\\\":{\\\\\"d\\\\\":{\\\\\"d\\\\\":{\\\\\"d\\\\\":{\\\\\"d\\\\\":{\\\\\"d\\\\\":{\\\\\"d\\\\\":{\\\\\"d\\\\\":{\\\\\"d\\\\\":{\\\\\"d\\\\\":{\\\\\"d\\\\\":{\\\\\"d\\\\\":{\\\\\"d\\\\\":{\\\\\"d\\\\\":{\\\\\"d\\\\\":{\\\\\"d\\\\\":{\\\\\"d\\\\\":{\\\\\"d\\\\\":{\\\\\"d\\\\\":{\\\\\"d\\\\\":{\\\\\"d\\\\\":{\\\\\"d\\\\\":{\\\\\"d\\\\\":{\\\\\"d\\\\\":{\\\\\"d\\\\\":{\\\\\"d\\\\\":{\\\\\"d\\\\\":{\\\\\"d\\\\\":{\\\\\"d\\\\\":{\\\\\"d\\\\\":{\\\\\"d\\\\\":{\\\\\"d\\\\\":{\\\\\"d\\\\\":{\\\\\"d\\\\\":{\\\\\"d\\\\\":{\\\\\"d\\\\\":{\\\\\"d\\\\\":{\\\\\"d\\\\\":{\\\\\"d\\\\\":{\\\\\"d"
    },
    {
        "original_path": "helun_Ektorp###helun_Ektorp/org.ektorp/src/test/java/org/ektorp/impl/StdCouchDbConnectorTest###testGetDesignDocInfo",
        "generated_path": "StdCouchDbConnectorTest###testGetDesignDocInfo.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void testGetDesignDocInfo() throws Exception { }\n"
    },
    {
        "original_path": "helun_Ektorp###helun_Ektorp/org.ektorp/src/test/java/org/ektorp/impl/BulkDocumentWriterTest###testCreateInputStreamWrapper",
        "generated_path": "BulkDocumentWriterTest###testCreateInputStreamWrapper.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void testCreateInputStreamWrapper() throws Exception { }\n"
    },
    {
        "original_path": "helun_Ektorp###helun_Ektorp/org.ektorp/src/test/java/org/ektorp/impl/StdCouchDbConnectorTest###testCallUpdateHandler",
        "generated_path": "StdCouchDbConnectorTest###testCallUpdateHandler.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void testCallUpdateHandler() throws Exception { }\n"
    },
    {
        "original_path": "helun_Ektorp###helun_Ektorp/org.ektorp/src/test/java/org/ektorp/impl/changes/ContinuousChangesFeedTest###testNext",
        "generated_path": "ContinuousChangesFeedTest###testNext.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testNext() throws InterruptedException { ContinuousChangesFeed feed = new ContinuousChangesFeed(\"test_db\", mock(HttpResponse.class)); feed.next(); }\n"
    },
    {
        "original_path": "helun_Ektorp###helun_Ektorp/org.ektorp/src/test/java/org/ektorp/impl/StdCouchDbConnectorTest###testCreate",
        "generated_path": "StdCouchDbConnectorTest###testCreate.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test(expected = IllegalArgumentException.class) public void testCreateNullNode() { connector.create(null); }\n"
    },
    {
        "original_path": "helun_Ektorp###helun_Ektorp/org.ektorp/src/test/java/org/ektorp/impl/StreamedCouchDbConnectorTest###testCreate",
        "generated_path": "StreamedCouchDbConnectorTest###testCreate.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test(expected = IllegalArgumentException.class) public void testCreateNullNode() { final Object node = new Object(); connector.create(node); }\n"
    },
    {
        "original_path": "helun_Ektorp###helun_Ektorp/org.ektorp/src/test/java/org/ektorp/util/ReflectionUtilsTest###testFindMethod",
        "generated_path": "ReflectionUtilsTest###testFindMethod.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testFindMethod() throws Exception { Method m = ReflectionUtils.findMethod(TestClass.class, \"testMethod\"); assertNotNull(m); assertEquals(TestClass.class, m.getDeclaringClass().getName()); assertEquals(TestClass.class.getDeclaredMethod(\"testMethod\"), m.getDeclaringClass().getDeclaredMethod(\"testMethod\")); assertEquals(TestClass.class.getDeclaredMethod(\"testMethod2\"), m.getDeclaringClass().getDeclaredMethod(\"testMethod2\")); assertEquals(TestClass.class.getDeclaredMethod(\"testMethod3\"), m.getDeclaringClass().getDeclaredMethod(\"testMethod3\")); assertEquals(TestClass.class.getDeclaredMethod(\"testMethod4\"), m.getDeclaringClass().getDeclaredMethod(\"testMethod4\")); assertEquals(TestClass.class.getDeclaredMethod(\"testMethod5\"), m.getDeclaringClass().getDeclaredMethod(\"testMethod5\"), m.getDeclaringClass().getDeclaredMethod(\"testMethod5\"), m.getDeclaringClass().getDeclaredMethod(\"testMethod5\"), m.getDeclaringClass().getDeclaredMethod(\"testMethod5\"), m.getDeclaringClass().getDeclaredMethod(\"testMethod5\"), m.getDeclaringClass().getDeclaredMethod(\"testMethod6\"), m.getDeclaringClass().getDeclaredMethod(\"testMethod6\"), m.getDeclaringClass().getDeclaredMethod(\"testMethod6\"), m.getDeclaringClass().get"
    },
    {
        "original_path": "helun_Ektorp###helun_Ektorp/org.ektorp/src/test/java/org/ektorp/impl/StdCouchDbConnectorTest###testGetWithConflicts",
        "generated_path": "StdCouchDbConnectorTest###testGetWithConflicts.java",
        "Compile_result": 0,
        "Test_result": 1,
        "Gen_Test": "@Test public void testGetWithConflicts() throws Exception { }\n"
    },
    {
        "original_path": "blinkfox_zealot###blinkfox_zealot/src/test/java/com/blinkfox/zealot/test/helpers/XmlNodeHelperTest###testGetNodeBySpaceAndId",
        "generated_path": "XmlNodeHelperTest###testGetNodeBySpaceAndId.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetNodeBySpaceAndId() { Node node = XmlNodeHelper.getNodeBySpaceAndId(XmlContext.INSTANCE.getXmlPathMap().get(XmlContext.INSTANCE.getXmlNameSpace()), XmlContext.INSTANCE.getZealotXmlNameSpace(XmlContext.INSTANCE.getXmlPathMap().get(XmlContext.INSTANCE.getZealotXmlNameSpace()))); Assert.assertNotNull(node); Assert.assertEquals(XmlContext.INSTANCE.getXmlPathMap().get(XmlContext.INSTANCE.getXmlNameSpace()), XmlContext.INSTANCE.getXmlPathMap().get(XmlContext.INSTANCE.getZealotXmlNameSpace())); Assert.assertEquals(XmlContext.INSTANCE.getZealotXmlNameSpace(XmlContext.INSTANCE.getZealotXmlPathMap().get(XmlContext.INSTANCE.getZealotXmlNameSpace()))); Assert.assertEquals(XmlContext.INSTANCE.getXmlPathMap().get(XmlContext.INSTANCE.getZealotXmlNameSpace()), XmlContext.INSTANCE.getZealotXmlNameSpace(XmlContext.INSTANCE.getZealotXmlPathMap().get(XmlContext.INSTANCE.getZealotXmlNameSpace()))); Assert.assertEquals(XmlContext.INSTANCE.getZealotXmlNameSpace(XmlContext.INSTANCE.getZealotXmlPathMap().get(XmlContext.INSTANCE.getZealotXml"
    },
    {
        "original_path": "blinkfox_zealot###blinkfox_zealot/src/test/java/com/blinkfox/zealot/test/helpers/CollectionHelperTest###testToArray",
        "generated_path": "CollectionHelperTest###testToArray.java",
        "Compile_result": 1,
        "Test_result": 0,
        "Gen_Test": "@Test public void testToArray() { Object[] array = CollectionHelper.toArray(new ArrayList<Object>(), ZealotConst.OBJTYPE_ARRAY); assertEquals(2, array.length); assertEquals(\"1\", array[0]); assertEquals(\"2\", array[1]); assertEquals(\"3\", array[2]); assertEquals(\"4\", array[3]); assertEquals(\"5\", array[4]); assertEquals(\"6\", array[5]); assertEquals(\"7\", array[6]); assertEquals(\"8\", array[7]); assertEquals(\"9\", array[8]); }\n"
    },
    {
        "original_path": "blinkfox_zealot###blinkfox_zealot/src/test/java/com/blinkfox/zealot/test/core/builder/SqlInfoBuilderTest###testBuildLikePatternSql",
        "generated_path": "SqlInfoBuilderTest###testBuildLikePatternSql.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testBuildLikePatternSql() { SqlInfoBuilder builder = new SqlInfoBuilder(); builder.buildLikePatternSql(\"field\", \"value\"); Assert.assertEquals(builder.sqlInfo.getJoin().toString(), \"field\\\\\"\\\\\"value\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\\\\\"\", builder.buildLikePatternSql(\"field\", \"value\").getJoin()); Assert.assertEquals(builder.sqlInfo.getJoin().toString(), \"field
    },
    {
        "original_path": "blinkfox_zealot###blinkfox_zealot/src/test/java/com/blinkfox/zealot/test/helpers/ParseHelperTest###testParseTemplate",
        "generated_path": "ParseHelperTest###testParseTemplate.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testParseTemplate() throws Exception { String template = \"\u5f02\u5e38\"; Object paramObj = null; String result = ParseHelper.parseTemplate(template, paramObj); assertNotNull(result); assertEquals(\"\u5f02\u5e38\", result); }\n"
    },
    {
        "original_path": "blinkfox_zealot###blinkfox_zealot/src/test/java/com/blinkfox/zealot/test/helpers/StringHelperTest###testIsBlank",
        "generated_path": "StringHelperTest###testIsBlank.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testIsBlank() { Assert.assertTrue(StringHelper.isBlank(\"\")); Assert.assertTrue(StringHelper.isBlank(\" \")); Assert.assertTrue(StringHelper.isBlank(\" \")); Assert.assertTrue(StringHelper.isBlank(\" \")); Assert.assertTrue(StringHelper.isBlank(\" \")); Assert.assertTrue(StringHelper.isBlank(\" \")); Assert.assertTrue(StringHelper.isBlank(\" \")); Assert.assertTrue(StringHelper.isBlank(\" \")); Assert.assertTrue(StringHelper.isBlank(\" \")); Assert.assertTrue(StringHelper.isBlank(\" \")); Assert.assertTrue(StringHelper.isBlank(\" \")); Assert.assertTrue(StringHelper.isBlank(\" \")); Assert.assertTrue(StringHelper.isBlank(\" \")); Assert.assertTrue(StringHelper.isBlank(\" \")); Assert.assertTrue(StringHelper.isBlank(\" \")); Assert.assertTrue(StringHelper.isBlank(\" \")); Assert.assertTrue(StringHelper.isBlank(\" \")); Assert.assertTrue(StringHelper.isBlank(\" \")); Assert.assertTrue(StringHelper.isBlank(\" \")); Assert.assertTrue(StringHelper.isBlank(\" \")); Assert.assertTrue(StringHelper.isBlank(\" \")); Assert.assertTrue(StringHelper.isBlank(\" \")); Assert.assertTrue(StringHelper.isBlank(\" \")); Assert.assertTrue(StringHelper.isBlank"
    },
    {
        "original_path": "blinkfox_zealot###blinkfox_zealot/src/test/java/com/blinkfox/zealot/test/core/builder/SqlInfoBuilderTest###testBuildInSql",
        "generated_path": "SqlInfoBuilderTest###testBuildInSql.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testBuildInSql() { SqlInfo sqlInfo = SqlInfoBuilder.newInstace(null).buildInSql(\"field\", new Object[]{1, 2, 3}); Assert.assertNotNull(sqlInfo); Assert.assertEquals(\"field\", sqlInfo.getJoin().toString()); Assert.assertEquals(1, sqlInfo.getParams().size()); Assert.assertEquals(1, sqlInfo.getParams().get(0).intValue()); Assert.assertEquals(2, sqlInfo.getParams().get(1).intValue()); Assert.assertEquals(3, sqlInfo.getParams().get(2).intValue()); Assert.assertEquals(1, sqlInfo.getParams().get(3).intValue()); Assert.assertEquals(3, sqlInfo.getParams().get(4).intValue()); Assert.assertEquals(3, sqlInfo.getParams().get(5).intValue()); Assert.assertEquals(3, sqlInfo.getParams().get(6).intValue()); Assert.assertEquals(3, sqlInfo.getParams().get(7).intValue()); Assert.assertEquals(3, sqlInfo.getParams().get(8).intValue()); Assert.assertEquals(3, sqlInfo.getParams().get(9).intValue()); Assert.assertEquals(3, sqlInfo.getParams().get(10).intValue()); Assert.assertEquals(3, sqlInfo.getParams().get(11).intValue"
    },
    {
        "original_path": "blinkfox_zealot###blinkfox_zealot/src/test/java/com/blinkfox/zealot/test/helpers/XmlNodeHelperTest###testGetZealotXmlNameSpace",
        "generated_path": "XmlNodeHelperTest###testGetZealotXmlNameSpace.java",
        "Compile_result": 1,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetZealotXmlNameSpace() { String nameSpace = XmlNodeHelper.getZealotXmlNameSpace(\"test.xml\"); Assert.assertNotNull(nameSpace); }\n"
    },
    {
        "original_path": "blinkfox_zealot###blinkfox_zealot/src/test/java/com/blinkfox/zealot/test/core/builder/SqlInfoBuilderTest###testBuildIsNullSql",
        "generated_path": "SqlInfoBuilderTest###testBuildIsNullSql.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testBuildIsNullSql() { SqlInfo sqlInfo = builder.buildIsNullSql(\"field\"); Assert.assertEquals(\"field\", sqlInfo.getJoin().toString()); Assert.assertEquals(\"field\", sqlInfo.getFieldText()); Assert.assertEquals(\"is_null\", sqlInfo.getSuffix()); Assert.assertEquals(\"prefix\", sqlInfo.getPrefix()); Assert.assertEquals(\"field\", sqlInfo.getFieldText()); Assert.assertEquals(\"suffix\", sqlInfo.getSuffix()); }\n"
    },
    {
        "original_path": "HiveRunner_HiveRunner###HiveRunner_HiveRunner/src/test/java/com/klarna/hiverunner/data/TableDataBuilderTest###testCopyRow",
        "generated_path": "TableDataBuilderTest###testCopyRow.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testCopyRow() { TableDataBuilder builder = new TableDataBuilder(); builder.row = new DefaultHCatRecord(new ArrayList<>()); builder.flushRow(); builder.row = new DefaultHCatRecord(new ArrayList<>()); builder.copyRow(); builder.flushRow(); builder.row = new DefaultHCatRecord(new ArrayList<>()); builder.flushRow(); builder.row = new DefaultHCatRecord(new ArrayList<>()); builder.copyRow(); builder.flushRow(); builder.row = new DefaultHCatRecord(new ArrayList<>()); builder.flushRow(); builder.row = new DefaultHCatRecord(new ArrayList<>()); builder.flushRow(); builder.row = new DefaultHCatRecord(new ArrayList<>()); builder.copyRow(); builder.flushRow(); builder.row = new DefaultHCatRecord(new ArrayList<>()); builder.flushRow(); builder.row = new DefaultHCatRecord(new ArrayList<>()); builder.flushRow(); builder.flushRow(); builder.row = new DefaultHCatRecord(new ArrayList<>()); builder.flushRow(); builder.row = new DefaultHCatRecord(new ArrayList<>()); builder.flushRow(); builder.row = new DefaultHCatRecord(new ArrayList<>()); builder.copyRow(); builder.flushRow(); builder.flushRow(); builder.row = new DefaultHCatRecord(new ArrayList<>()); builder.flushRow(); builder.flushRow(); builder.flushRow(); builder.flushRow(); builder.row = new DefaultH"
    },
    {
        "original_path": "Terracotta-OSS_offheap-store###Terracotta-OSS_offheap-store/src/test/java/org/terracotta/offheapstore/paging/UpfrontAllocatingPageSourceTest###testGetCapacity",
        "generated_path": "UpfrontAllocatingPageSourceTest###testGetCapacity.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetCapacity() throws Exception { UpfrontAllocatingPageSource source = new UpfrontAllocatingPageSource(new MockBufferSource(), 10, 10); Assert.assertEquals(10, source.getCapacity()); }\n"
    },
    {
        "original_path": "jmeter-maven-plugin_jmeter-maven-plugin###jmeter-maven-plugin_jmeter-maven-plugin/src/test/java/com/lazerycode/jmeter/utility/UtilityFunctionsTest###humanReadableCommandLineOutputTest",
        "generated_path": "UtilityFunctionsTest###humanReadableCommandLineOutputTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testHumanReadableCommandLineOutput() { List<String> arguments = new ArrayList<String>(); arguments.add(\"foo\"); arguments.add(\"bar\"); arguments.add(\"baz\"); arguments.add(\"baz\"); String result = UtilityFunctions.humanReadableCommandLineOutput(arguments); assertThat(result).isEqualTo(\"foo bar baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz baz"
    },
    {
        "original_path": "jscep_jscep###jscep_jscep/src/test/java/org/jscep/transaction/NonceTest###testNextNonce",
        "generated_path": "NonceTest###testNextNonce.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testNextNonce() { Nonce nonce = Nonce.nextNonce(); assertTrue(nonce.equals(Nonce.nextNonce())); }\n"
    },
    {
        "original_path": "GoogleCloudPlatform_app-maven-plugin###GoogleCloudPlatform_app-maven-plugin/src/test/java/com/google/cloud/tools/maven/run/RunnerTest###testRunAsync",
        "generated_path": "RunnerTest###testRunAsync.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testRunAsync() throws Exception { Runner runner = new Runner(); runner.runAsync(0); }\n"
    },
    {
        "original_path": "GoogleCloudPlatform_app-maven-plugin###GoogleCloudPlatform_app-maven-plugin/src/test/java/com/google/cloud/tools/maven/stage/AppEngineWebXmlStagerTest###testStage",
        "generated_path": "AppEngineWebXmlStagerTest###testStage.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test(expected = MojoExecutionException.class) public void testStagingDirectoryDoesNotExist() throws Exception { when(configBuilder.buildConfiguration()).thenReturn(new AppEngineWebXmlProjectStageConfiguration()); when(config.getStagingDirectory()).thenReturn(new Path(\"\")); appEngineWebXmlStager.stage(); }\n"
    },
    {
        "original_path": "davidmoten_rxjava-extras###davidmoten_rxjava-extras/src/test/java/com/github/davidmoten/rx/BytesTest###testUnzip",
        "generated_path": "BytesTest###testUnzip.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testUnzip() throws Exception { File file = new File(\"src/test/resources/test.zip\"); byte[] bytes = Bytes.unzip(file).toBlocking().single(); assertEquals(bytes.length, file.length()); }\n"
    },
    {
        "original_path": "davidmoten_rxjava-extras###davidmoten_rxjava-extras/src/test/java/com/github/davidmoten/rx/ObsTest###testPermutations",
        "generated_path": "ObsTest###testPermutations.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testPermutations() throws Exception { List<Integer> list = new ArrayList<Integer>(); list.add(0); list.add(1); list.add(2); list.add(3); list.add(4); list.add(5); list.add(6); list.add(7); list.add(8); list.add(9); list.add(10); list.add(11); list.add(12); list.add(13); list.add(14); list.add(15); list.add(14); list.add(15); list.add(14); list.add(14); list.add(14); list.add(14); list.add(14); list.add(14); list.add(14); list.add(14); list.add(14); list.add(14); list.add(14); list.add(14); list.add(14); list.add(14); list.add(14); list.add(14); list.add(14); list.add(14); list.add(14); list.add(14); list.add(14); list.add(14); list.add(14); list.add(14); list.add(14); list.add(14); list.add(14); list.add(14); list.add(14); list.add(14); list.add(14); list"
    },
    {
        "original_path": "fulmicoton_multiregexp###fulmicoton_multiregexp/src/test/java/com/fulmicoton/multiregexp/MultiPatternSearcherTest###testInverseAutomaton",
        "generated_path": "MultiPatternSearcherTest###testInverseAutomaton.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testInverseAutomaton() { final Automaton automaton = new Automaton(); automaton.setInitialState(new State(\"A\")); automaton.setInitialState(new State(\"B\")); automaton.setInitialState(new State(\"C\")); automaton.setInitialState(new State(\"D\")); automaton.setInitialState(new State(\"E\")); automaton.setInitialState(new State(\"E\")); automaton.setInitialState(new State(\"D\")); automaton.setInitialState(new State(\"E\")); automaton.setInitialState(new State(\"A\")); automaton.setInitialState(new State(\"B\")); automaton.setInitialState(new State(\"C\")); automaton.setInitialState(new State(\"D\")); automaton.setInitialState(new State(\"E\")); automaton.setInitialState(new State(\"E\")); automaton.setInitialState(new State(\"D\")); automaton.setInitialState(new State(\"E\")); automaton.setInitialState(new State(\"E\")); automaton.setInitialState(new State(\"E\")); automaton.setInitialState(new State(\"E\")); automaton.setInitialState(new State(\"E\")); automaton.setInitialState(new State(\"E\")); automaton.setInitialState(new State(\"E\")); automaton.setInitialState(new State(\""
    },
    {
        "original_path": "bekkopen_NoCommons###bekkopen_NoCommons/src/test/java/no/bekk/bekkopen/mail/MailValidatorTest###testGetPostnummerForPoststed",
        "generated_path": "MailValidatorTest###testGetPostnummerForPoststed.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void getPostnummerForPoststed() { List<Postnummer> postnummerList = MailValidator.getPostnummerForPoststed(poststed); assertEquals(postnummerList.size(), 2); }\n"
    },
    {
        "original_path": "bekkopen_NoCommons###bekkopen_NoCommons/src/test/java/no/bekk/bekkopen/banking/KontonummerCalculatorTest###testGetKontonummerListForAccountType",
        "generated_path": "KontonummerCalculatorTest###testGetKontonummerListForAccountType.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetKontonummerListForAccountType() { List<Kontonummer> kontonummerList = KontonummerCalculator.getKontonummerListForAccountType(ACCOUNT_TYPE, 3); assertEquals(3, kontonummerList.size()); assertEquals(ACCOUNT_TYPE, kontonummerList.get(0).getAccountType()); assertEquals(ACCOUNT_TYPE, kontonummerList.get(1).getAccountType()); assertEquals(ACCOUNT_TYPE, kontonummerList.get(2).getAccountType()); assertEquals(ACCOUNT_TYPE, kontonummerList.get(3).getAccountType()); assertEquals(ACCOUNT_TYPE, kontonummerList.get(4).getAccountType()); assertEquals(ACCOUNT_TYPE, kontonummerList.get(5).getAccountType()); assertEquals(ACCOUNT_TYPE, kontonummerList.get(6).getAccountType()); assertEquals(ACCOUNT_TYPE, kontonummerList.get(7).getAccountType()); assertEquals(ACCOUNT_TYPE, kontonummerList.get(8).getAccountType()); assertEquals(ACCOUNT_TYPE, kontonummerList.get(9).getAccountType()); assertEquals(ACCOUNT_TYPE, kontonummerList.get(10).getAccountType()); assertEquals(ACCOUNT_TYPE"
    },
    {
        "original_path": "bekkopen_NoCommons###bekkopen_NoCommons/src/test/java/no/bekk/bekkopen/person/FodselsnummerTest###testGetCentury",
        "generated_path": "FodselsnummerTest###testGetCentury.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void getCentury() { fodselsnummer.setValue(\"900\"); assertEquals(\"19\", fodselsnummer.getCarury()); fodselsnummer.setIndividnummer(\"900\"); assertEquals(\"18\", fodselsnummer.getCarury()); fodselsnummer.set2DigitBirthYear(\"39\"); assertEquals(\"19\", fodselsnummer.getCarury()); fodselsnummer.setIndividnummer(\"900\"); assertEquals(\"18\", fodselsnummer.getCarury()); fodselsnummer.set2DigitBirthYear(\"39\"); assertEquals(\"19\", fodselsnummer.getCarury()); fodselsnummer.setIndividnummer(\"900\"); assertEquals(\"19\", fodselsnummer.getCarury()); fodselsnummer.set2DigitBirthYear(\"39\"); assertEquals(\"19\", fodselsnummer.getCarury()); fodselsnummer.setIndividnummer(\"900\"); assertEquals(\"19\", fodselsnummer.getCarury()); }\n"
    },
    {
        "original_path": "bekkopen_NoCommons###bekkopen_NoCommons/src/test/java/no/bekk/bekkopen/banking/KontonummerCalculatorTest###testGetKontonummerListForRegisternummer",
        "generated_path": "KontonummerCalculatorTest###testGetKontonummerListForRegisternummer.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetKontonummerListForRegisternummer() { List<Kontonummer> kontonummerList = KontonummerCalculator.getKontonummerListForRegisternummer(\"1\", 10); assertEquals(1, kontonummerList.size()); assertEquals(\"1\", kontonummerList.get(0).getRegisternummer()); assertEquals(\"1\", kontonummerList.get(1).getRegisternummer()); assertEquals(\"1\", kontonummerList.get(2).getRegisternummer()); assertEquals(\"1\", kontonummerList.get(3).getRegisternummer()); assertEquals(\"1\", kontonummerList.get(4).getRegisternummer()); assertEquals(\"1\", kontonummerList.get(5).getRegisternummer()); assertEquals(\"1\", kontonummerList.get(6).getRegisternummer()); assertEquals(\"1\", kontonummerList.get(7).getRegisternummer()); assertEquals(\"1\", kontonummerList.get(8).getRegisternummer()); assertEquals(\"1\", kontonummerList.get(9).getRegisternummer()); assertEquals(\"1\", kontonummerList.get(10).getRegisternummer()); assertEquals(\"1\", kontonummerList.get(11).get"
    },
    {
        "original_path": "bekkopen_NoCommons###bekkopen_NoCommons/src/test/java/no/bekk/bekkopen/banking/KontonummerTest###testGetGroupedValue",
        "generated_path": "KontonummerTest###testGetGroupedValue.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public class KontonummerTest { Kontonummer kontonummer = new Kontonummer(); kontonummer.setRegisternummer(\"1\"); kontonummer.setAccountType(\"KontonummerAccountType\"); kontonummer.setKonto(\"Konto\"); assertEquals(\"1.1.1\", kontonummer.getGroupedValue()); }\n"
    },
    {
        "original_path": "bekkopen_NoCommons###bekkopen_NoCommons/src/test/java/no/bekk/bekkopen/localization/TextParserTest###testReplaceNorwegianLetters",
        "generated_path": "TextParserTest###testReplaceNorwegianLetters.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testReplaceNorwegianLetters() { assertEquals(\"\", TextParser.replaceNorwegianLetters(\"\")); assertEquals(\"a\", TextParser.replaceNorwegianLetters(\"a\")); assertEquals(\"a\", TextParser.replaceNorwegianLetters(\"a\")); assertEquals(\"a\", TextParser.replaceNorwegianLetters(\"a\")); assertEquals(\"a\", TextParser.replaceNorwegianLetters(\"a\")); assertEquals(\"a\", TextParser.replaceNorwegianLetters(\"a\")); assertEquals(\"a\", TextParser.replaceNorwegianLetters(\"a\")); assertEquals(\"a\", TextParser.replaceNorwegianLetters(\"a\")); assertEquals(\"a\", TextParser.replaceNorwegianLetters(\"a\")); assertEquals(\"a\", TextParser.replaceNorwegianLetters(\"a\")); assertEquals(\"a\", TextParser.replaceNorwegianLetters(\"a\")); assertEquals(\"a\", TextParser.replaceNorwegianLetters(\"a\")); assertEquals(\"a\", TextParser.replaceNorwegianLetters(\"a\")); assertEquals(\"a\", TextParser.replaceNorwegianLetters(\"a\")); assertEquals(\"a\", TextParser.replaceNorwegianLetters(\"a\")); assertEquals(\"a\","
    },
    {
        "original_path": "bekkopen_NoCommons###bekkopen_NoCommons/src/test/java/no/bekk/bekkopen/org/OrganisasjonsnummerCalculatorTest###testGetOrganisasjonsnummerList",
        "generated_path": "OrganisasjonsnummerCalculatorTest###testGetOrganisasjonsnummerList.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void testGetOrganisasjonsnummerList() { List<Organisasjonsnummer> result = OrganisasjonsnummerCalculator.getOrganisasjonsnummerList(10); assertEquals(10, result.size()); }\n"
    },
    {
        "original_path": "mikereedell_sunrisesunsetlib-java###mikereedell_sunrisesunsetlib-java/src/test/java/com/luckycatlabs/sunrisesunset/calculator/SolarEventCalculatorTest###testGetLocalTimeAsCalendar",
        "generated_path": "SolarEventCalculatorTest###testGetLocalTimeAsCalendar.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetLocalTimeAsCalendar() { Calendar date = Calendar.getInstance(); Calendar result = solarEventCalculator.getLocalTimeAsCalendar(BigDecimal.valueOf(24.0D), date); assertEquals(result.getTimeInMillis(), date.getTimeInMillis()); assertEquals(result.get(Calendar.HOUR_OF_DAY), date.get(Calendar.HOUR_OF_DAY)); assertEquals(result.get(Calendar.MINUTE, 0), date.get(Calendar.MINUTE)); assertEquals(result.get(Calendar.SECOND, 0), date.get(Calendar.MILLISECOND)); assertEquals(result.get(Calendar.MILLISECOND, 0), date.get(Calendar.MILLISECOND)); assertEquals(result.get(Calendar.MILLISECOND, 0), date.get(Calendar.MILLISECOND)); assertEquals(result.get(Calendar.MILLISECOND, 0), date.get(Calendar.MILLISECOND)); assertEquals(result.get(Calendar.MILLISECOND, 0), date.get(Calendar.MILLISECOND)); assertEquals(result.get(Calendar.MILLISECOND, 0), date.get(Calendar.MILLISECOND)); assertEquals(result.get(Calendar.MILLISECOND, 0), date.get(Calendar.MILLISECOND)); assertEquals(result.get(Calendar.MILLISECOND, 0), date.get(Calendar.MILLISECOND)); assertEquals(result.get(Calendar.MILLISECOND, 0), date.get(Calendar.MILLISECOND)); }\n"
    },
    {
        "original_path": "citiususc_hipster###citiususc_hipster/hipster-core/src/test/java/es/usc/citius/lab/hipster/collection/HashQueueTest###testPoll",
        "generated_path": "HashQueueTest###testPoll.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testPoll() throws Exception { HashQueue<String> q = new HashQueue<String>(); for (int i = 0; i < 10; i++) { q.offer(new String(i)); } q.offer(new String(i)); q.offer(new String(i)); q.offer(new String(i)); q.offer(new String(i)); q.offer(new String(i)); q.offer(new String(i)); q.offer(new String(i)); q.offer(new String(i)); q.offer(new String(i)); q.offer(new String(i)); q.offer(new String(i)); q.offer(new String(i)); q.offer(new String(i)); q.offer(new String(i)); q.offer(new String(i)); q.offer(new String(i)); q.offer(new String(i)); q.offer(new String(i)); q.offer(new String(i)); q.offer(new String(i)); q.offer(new String(i)); q.offer(new String(i)); q.offer(new String(i)); q.offer(new String(i)); q.offer(new String(i)); q.offer(new String(i)); q.offer(new String(i)); q.offer(new String(i)); q.offer(new String(i)); q.offer(new String(i));"
    },
    {
        "original_path": "citiususc_hipster###citiususc_hipster/hipster-core/src/test/java/es/usc/citius/hipster/graph/HashBasedHipsterGraphTest###testAdd",
        "generated_path": "HashBasedHipsterGraphTest###testAdd.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testAdd() throws Exception { HashBasedHipsterGraph<String, String> graph = HashBasedHipsterGraph.create(); Set<String> added = graph.add(\"A\"); assertTrue(added.contains(\"A\")); assertTrue(added.contains(\"A\")); assertTrue(added.contains(\"A\")); assertTrue(added.contains(\"A\")); assertTrue(added.contains(\"A\")); assertTrue(added.contains(\"A\")); assertTrue(added.contains(\"A\")); assertTrue(added.contains(\"A\")); assertTrue(added.contains(\"A\")); assertTrue(added.contains(\"A\")); assertTrue(added.contains(\"A\")); assertTrue(added.contains(\"A\")); assertTrue(added.contains(\"A\")); assertTrue(added.contains(\"A\")); assertTrue(added.contains(\"A\")); assertTrue(added.contains(\"A\")); assertTrue(added.contains(\"A\")); assertTrue(added.contains(\"A\")); assertTrue(added.contains(\"A\")); assertTrue(added.contains(\"A\")); assertTrue(added.contains(\"A\")); assertTrue(added.contains(\"A\")); assertTrue(added.contains(\"A\")); assertTrue(added.contains(\"A\")); assertTrue(added.contains(\"A\")); assertTrue(added.contains(\"A\")); assertTrue(added.contains(\"A\")); assertTrue(added"
    },
    {
        "original_path": "citiususc_hipster###citiususc_hipster/hipster-extensions/src/test/java/es/usc/citius/hipster/extensions/graph/HashTableHipsterDirectedGraphTest###testConnect",
        "generated_path": "HashTableHipsterDirectedGraphTest###testConnect.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testConnect() { GraphEdge<String, String> edge = subject.connect(\"A\", \"B\", \"C\"); assertNotNull(edge); assertEquals(\"A\", edge.getSource()); assertEquals(\"B\", edge.getTarget()); assertEquals(\"C\", edge.getSource()); assertEquals(\"C\", edge.getTarget()); assertEquals(\"C\", edge.getSource()); assertEquals(\"C\", edge.getTarget()); assertEquals(\"C\", edge.getSource()); assertEquals(\"C\", edge.getTarget()); assertEquals(\"C\", edge.getSource()); assertEquals(\"C\", edge.getTarget()); assertEquals(\"C\", edge.getSource()); assertEquals(\"C\", edge.getTarget()); assertEquals(\"C\", edge.getSource()); assertEquals(\"C\", edge.getTarget()); assertEquals(\"C\", edge.getSource()); assertEquals(\"C\", edge.getTarget()); assertEquals(\"C\", edge.getSource()); assertEquals(\"C\", edge.getTarget()); assertEquals(\"C\", edge.getSource()); assertEquals(\"C\", edge.getTarget()); assertEquals(\"C\", edge.getSource()); assertEquals(\"C\", edge.getTarget()); assertEquals(\"C\", edge.getSource()); assertEquals(\"C\", edge.getTarget()); assertEquals(\"C\", edge.getSource()); assertEquals(\"C\", edge.getTarget()); assertEquals(\"C\", edge.getSource()); }\n"
    },
    {
        "original_path": "citiususc_hipster###citiususc_hipster/hipster-extensions/src/test/java/es/usc/citius/hipster/extensions/graph/HashTableHipsterGraphTest###testConnect",
        "generated_path": "HashTableHipsterGraphTest###testConnect.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testConnect() { HashTableHipsterGraph<String, String> graph = HashTableHipsterGraph.create(); graph.add(\"A\"); graph.add(\"B\"); graph.add(\"C\"); graph.add(\"D\"); graph.add(\"E\"); graph.add(\"F\"); graph.add(\"G\"); graph.add(\"G\"); graph.add(\"E\"); graph.add(\"G\"); graph.add(\"G\"); graph.add(\"G\"); graph.add(\"G\"); graph.add(\"G\"); graph.add(\"G\"); graph.add(\"G\"); graph.add(\"G\"); graph.add(\"G\"); graph.add(\"G\"); graph.add(\"G\"); graph.add(\"G\"); graph.add(\"G\"); graph.add(\"G\"); graph.add(\"G\"); graph.add(\"G\"); graph.add(\"G\"); graph.add(\"G\"); graph.add(\"G\"); graph.add(\"G\"); graph.add(\"G\"); graph.add(\"G\"); graph.add(\"G\"); graph.add(\"G\"); graph.add(\"G\"); graph.add(\"G\"); graph.add(\"G\"); graph.add(\"G\"); graph.add(\"G\"); graph.add(\"G\"); graph.add(\"G\"); graph.add(\"G\"); graph.add(\"G\"); graph.add(\"G\"); graph.add(\"G\"); graph.add(\"G\"); graph.add(\"G\"); graph.add(\"G\"); graph.add(\"G\");"
    },
    {
        "original_path": "citiususc_hipster###citiususc_hipster/hipster-core/src/test/java/es/usc/citius/lab/hipster/maze/Maze2DTest###testDiff",
        "generated_path": "Maze2DTest###testDiff.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testDiff() throws IllegalFormatException { Maze2D maze1 = new Maze2D(new char[][]{ { \\'a\\', \\'b\\', \\'c\\' }, { \\'a\\', \\'b\\', \\'c\\' }, { \\'a\\', \\'b\\', \\'c\\' }, { \\'a\\', \\'b\\', \\'c\\' }, { \\'a\\', \\'b\\', \\'c\\' }, { \\'a\\', \\'b\\', \\'c\\' }, { \\'a\\', \\'b\\', \\'c\\' }, { \\'a\\', \\'b\\', \\'c\\' }, { \\'a\\', \\'b\\', \\'c\\' }, { \\'a\\', \\'b\\', \\'c\\' }, { \\'a\\', \\'b\\', \\'c\\' }, { \\'a\\', \\'b\\', \\'c\\' }, { \\'a\\', \\'b\\', \\'c\\' }, { \\'a\\', \\'b\\', \\'c\\' }, { \\'a\\', \\'b\\', \\'c\\' }, { \\'a\\', \\'b\\', \\'c\\' }, { \\'a\\', \\'b\\', \\'c\\' }, { \\'a\\', \\'b\\', \\'c\\' }, { \\'a\\', \\'b\\', \\'c\\' }, { \\'a\\', \\'b\\', \\'c\\' }, { \\'a\\', \\'b\\', \\'c\\' }, { \\'a\\', \\'b\\', \\'c\\' }, { \\'a\\', \\'b\\', \\'c\\' }, { \\'a\\', \\'b\\', \\'c\\' }, { \\'a\\', \\'b\\', \\'c\\' }, { \\'a\\', \\'b\\', \\'c\\'"
    },
    {
        "original_path": "citiususc_hipster###citiususc_hipster/hipster-extensions/src/test/java/es/usc/citius/hipster/extensions/graph/HashTableHipsterGraphTest###testRemove",
        "generated_path": "HashTableHipsterGraphTest###testRemove.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testRemove() { HashTableHipsterGraph<String, String> graph = HashTableHipsterGraph.create(); graph.add(\"A\"); graph.add(\"B\"); graph.add(\"C\"); graph.add(\"D\"); graph.add(\"E\"); graph.add(\"E\"); graph.add(\"E\"); graph.add(\"E\"); graph.add(\"E\"); graph.add(\"E\"); graph.add(\"E\"); graph.add(\"E\"); graph.add(\"E\"); graph.add(\"E\"); graph.add(\"E\"); graph.add(\"E\"); graph.add(\"E\"); graph.add(\"E\"); graph.add(\"E\"); graph.add(\"E\"); graph.add(\"E\"); graph.add(\"E\"); graph.add(\"E\"); graph.add(\"E\"); graph.add(\"E\"); graph.add(\"E\"); graph.add(\"E\"); graph.add(\"E\"); graph.add(\"E\"); graph.add(\"E\"); graph.add(\"E\"); graph.add(\"E\"); graph.add(\"E\"); graph.add(\"E\"); graph.add(\"E\"); graph.add(\"E\"); graph.add(\"E\"); graph.add(\"E\"); graph.add(\"E\"); graph.add(\"E\"); graph.add(\"E\"); graph.add(\"E\"); graph.add(\"E\"); graph.add(\"E\"); graph.add(\"E\"); graph.add(\"E\"); graph.add(\"E\"); graph.add(\"E\");"
    },
    {
        "original_path": "citiususc_hipster###citiususc_hipster/hipster-core/src/test/java/es/usc/citius/hipster/graph/HashBasedHipsterGraphTest###testEdgesOf",
        "generated_path": "HashBasedHipsterGraphTest###testEdgesOf.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testEdgesOf() throws Exception { HashBasedHipsterGraph<String, String> graph = new HashBasedHipsterGraph<String, String>(); graph.add(\"A\"); graph.add(\"B\"); graph.add(\"C\"); graph.add(\"D\"); graph.add(\"E\"); graph.add(\"E\"); graph.add(\"E\"); graph.add(\"E\"); graph.add(\"E\"); graph.add(\"E\"); graph.add(\"E\"); graph.add(\"E\"); graph.add(\"E\"); graph.add(\"E\"); graph.add(\"E\"); graph.add(\"E\"); graph.add(\"E\"); graph.add(\"E\"); graph.add(\"E\"); graph.add(\"E\"); graph.add(\"E\"); graph.add(\"E\"); graph.add(\"E\"); graph.add(\"E\"); graph.add(\"E\"); graph.add(\"E\"); graph.add(\"E\"); graph.add(\"E\"); graph.add(\"E\"); graph.add(\"E\"); graph.add(\"E\"); graph.add(\"E\"); graph.add(\"E\"); graph.add(\"E\"); graph.add(\"E\"); graph.add(\"E\"); graph.add(\"E\"); graph.add(\"E\"); graph.add(\"E\"); graph.add(\"E\"); graph.add(\"E\"); graph.add(\"E\"); graph.add(\"E\"); graph.add(\"E\"); graph.add(\"E\"); graph.add(\"E\"); graph.add(\"E"
    },
    {
        "original_path": "citiususc_hipster###citiususc_hipster/hipster-core/src/test/java/es/usc/citius/hipster/graph/HashBasedHipsterGraphTest###testConnect",
        "generated_path": "HashBasedHipsterGraphTest###testConnect.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testConnect() { HashBasedHipsterGraph<String, String> graph = new HashBasedHipsterGraph<String, String>(); for (String v1 : graph.vertices()) { for (String v2 : graph.connect(v1, v2, value)) { assertTrue(graph.connected.containsKey(v1)); assertTrue(graph.connected.containsKey(v2)); assertTrue(graph.connected.containsKey(v1)); assertTrue(graph.connected.containsKey(v2)); assertTrue(graph.connected.containsKey(v1)); assertTrue(graph.connected.containsKey(v2)); assertTrue(graph.connected.containsKey(v1)); assertTrue(graph.connected.containsKey(v2)); assertTrue(graph.connected.containsKey(v1)); assertTrue(graph.connected.containsKey(v2)); assertTrue(graph.connected.containsKey(v1)); assertTrue(graph.connected.containsKey(v2)); assertTrue(graph.connected.containsKey(v1)); assertTrue(graph.connected.containsKey(v2)); assertTrue(graph.connected.containsKey(v1)); assertTrue(graph.connected.containsKey(v2)); assertTrue(graph.connected.containsKey(v2)); assertTrue(graph.connected.containsKey(v1)); assertTrue(graph.connected.containsKey(v2)); assertTrue(graph.connected."
    },
    {
        "original_path": "citiususc_hipster###citiususc_hipster/hipster-core/src/test/java/es/usc/citius/lab/hipster/collection/HashQueueTest###testOffer",
        "generated_path": "HashQueueTest###testOffer.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void testOffer() { }\n"
    },
    {
        "original_path": "citiususc_hipster###citiususc_hipster/hipster-core/src/test/java/es/usc/citius/hipster/graph/HashBasedHipsterGraphTest###testRemove",
        "generated_path": "HashBasedHipsterGraphTest###testRemove.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testRemove() { HashBasedHipsterGraph<String, String> graph = new HashBasedHipsterGraph<String, String>(); Set<String> removed = graph.remove(\"A\"); assertTrue(removed.contains(\"A\")); assertTrue(removed.contains(\"A\")); assertTrue(removed.contains(\"A\")); assertTrue(removed.contains(\"A\")); assertTrue(removed.contains(\"A\")); assertTrue(removed.contains(\"A\")); assertTrue(removed.contains(\"A\")); assertTrue(removed.contains(\"A\")); assertTrue(removed.contains(\"A\")); assertTrue(removed.contains(\"A\")); assertTrue(removed.contains(\"A\")); assertTrue(removed.contains(\"A\")); assertTrue(removed.contains(\"A\")); assertTrue(removed.contains(\"A\")); assertTrue(removed.contains(\"A\")); assertTrue(removed.contains(\"A\")); assertTrue(removed.contains(\"A\")); assertTrue(removed.contains(\"A\")); assertTrue(removed.contains(\"A\")); assertTrue(removed.contains(\"A\")); assertTrue(removed.contains(\"A\")); assertTrue(removed.contains(\"A\")); assertTrue(removed.contains(\"A\")); assertTrue(removed.contains(\"A\")); assertTrue(removed.contains(\"A\")); assertTrue(removed.contains(\"A\")); assertTrue(removed.contains(\"A\")); assertTrue"
    },
    {
        "original_path": "lucastheisen_jsch-nio###lucastheisen_jsch-nio/src/test/java/com/pastdev/jsch/nio/file/UnixSshPathTest###TestGetParent",
        "generated_path": "UnixSshPathTest###TestGetParent.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetParent() throws Exception { assertNull(new UnixSshPath(getFileSystem(), false, Arrays.asList(\"a\", \"b\", \"c\"))); assertNull(new UnixSshPath(getFileSystem(), false, Arrays.asList(\"a\", \"b\", \"c\"))); assertNull(new UnixSshPath(getFileSystem(), false, Arrays.asList(\"a\", \"b\", \"c\"))); assertNull(new UnixSshPath(getFileSystem(), false, Arrays.asList(\"a\", \"b\", \"c\"))); assertNull(new UnixSshPath(getFileSystem(), false, Arrays.asList(\"a\", \"b\", \"c\"))); assertNull(new UnixSshPath(getFileSystem(), false, Arrays.asList(\"a\", \"b\", \"c\"))); assertNull(new UnixSshPath(getFileSystem(), false, Arrays.asList(\"a\", \"b\", \"c\"))); assertNull(new UnixSshPath(getFileSystem(), false, Arrays.asList(\"a\", \"b\", \"c\"))); assertNull(new UnixSshPath(getFileSystem(), false, Arrays.asList(\"a\", \"b\", \"c\"))); assertNull(new UnixSshPath(getFileSystem(), false, Arrays.asList(\"a\", \"b\", \"c\"))); assertNull(new UnixSshPath(getFileSystem(), false, Arrays.asList(\"a\", \"b\", \"c\"))"
    },
    {
        "original_path": "trautonen_coveralls-maven-plugin###trautonen_coveralls-maven-plugin/src/test/java/org/eluder/coveralls/maven/plugin/service/TravisTest###testGetEnvironment",
        "generated_path": "TravisTest###testGetEnvironment.java",
        "Compile_result": 1,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetEnvironment() { System.out.println(\"getEnvironment\"); Map<String, String> env = new HashMap<String, String>(); env.put(\"travis_job_id\", \"test_job_id\"); env.put(\"travis_pull_request\", \"test_pull_request\"); Travis travis = new Travis(env); Properties result = travis.getEnvironment(); assertEquals(\"test_job_id\", result.get(\"travis_job_id\")); assertEquals(\"test_pull_request\", result.get(\"travis_pull_request\")); }\n"
    },
    {
        "original_path": "trautonen_coveralls-maven-plugin###trautonen_coveralls-maven-plugin/src/test/java/org/eluder/coveralls/maven/plugin/service/JenkinsTest###testGetEnvironment",
        "generated_path": "JenkinsTest###testGetEnvironment.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetEnvironment() { System.out.println(\"getEnvironment\"); Jenkins instance = new Jenkins(new HashMap<String, String>()); Properties expResult = new Properties(); expResult.put(\"jenkins_build_num\", \"1\"); expResult.put(\"jenkins_build_url\", \"https: expResult.put(\"branch\", \"branch\"); expResult.put(\"commit_sha\", \"commit_sha\"); Properties result = instance.getEnvironment(); assertEquals(expResult, result); }\n"
    },
    {
        "original_path": "trautonen_coveralls-maven-plugin###trautonen_coveralls-maven-plugin/src/test/java/org/eluder/coveralls/maven/plugin/httpclient/CoverallsClientTest###testSubmit",
        "generated_path": "CoverallsClientTest###testSubmit.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testSubmit() throws ProcessingException, IOException { CoverallsClient client = new CoverallsClient(\"http: File file = new File(\"src/test/resources/test-files/test.json\"); CoverallsResponse response = client.submit(file); assertNotNull(response); }\n"
    },
    {
        "original_path": "trautonen_coveralls-maven-plugin###trautonen_coveralls-maven-plugin/src/test/java/org/eluder/coveralls/maven/plugin/service/ShippableTest###testGetEnvironment",
        "generated_path": "ShippableTest###testGetEnvironment.java",
        "Compile_result": 1,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetEnvironment() { Shippable shipable = new Shippable(new HashMap<String, String>()); Properties environment = shipable.getEnvironment(); assertNotNull(environment); assertEquals(\"shippable_build_number\", environment.getProperty(\"shippable_build_number\")); assertEquals(\"shippable_build_id\", environment.getProperty(\"shippable_build_id\")); assertEquals(\"shippable_build_url\", environment.getProperty(\"shippable_build_url\")); assertEquals(\"shippable_branch\", environment.getProperty(\"shippable_branch\")); assertEquals(\"shippable_commit_sha\", environment.getProperty(\"shippable_commit_sha\")); }\n"
    },
    {
        "original_path": "trautonen_coveralls-maven-plugin###trautonen_coveralls-maven-plugin/src/test/java/org/eluder/coveralls/maven/plugin/util/SourceLoaderFactoryTest###testCreateSourceLoader",
        "generated_path": "SourceLoaderFactoryTest###testCreateSourceLoader.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void createSourceLoader() throws Exception { SourceLoaderFactory factory = new SourceLoaderFactory(baseDir, project, \"UTF-8\"); SourceLoader sourceLoader = factory.createSourceLoader(); assertNotNull(sourceLoader); }\n"
    },
    {
        "original_path": "trautonen_coveralls-maven-plugin###trautonen_coveralls-maven-plugin/src/test/java/org/eluder/coveralls/maven/plugin/service/CircleTest###testGetEnvironment",
        "generated_path": "CircleTest###testGetEnvironment.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetEnvironment() { Circle circle = new Circle(new HashMap<String, String>()); Properties environment = circle.getEnvironment(); assertNotNull(environment); assertEquals(\"circleci_build_num\", environment.getProperty(\"circleci_build_num\")); assertEquals(\"branch\", environment.getProperty(\"branch\")); assertEquals(\"commit_sha\", environment.getProperty(\"commit_sha\")); assertEquals(\"circleci_build_num\", environment.getProperty(\"circleci_build_num\")); assertEquals(\"circleci_branch\", environment.getProperty(\"branch\")); assertEquals(\"circleci_sha\", environment.getProperty(\"commit_sha\")); assertEquals(\"circleci_sha\", environment.getProperty(\"circleci_sha\")); assertEquals(\"circleci_sha\", environment.getProperty(\"circleci_sha\")); assertEquals(\"circleci_sha\", environment.getProperty(\"circleci_sha\")); assertEquals(\"circleci_sha\", environment.getProperty(\"circleci_sha\")); assertEquals(\"circleci_sha\", environment.getProperty(\"circleci_sha\")); assertEquals(\"circleci_sha\", environment.getProperty(\"circleci_sha\")); assertEquals(\"circleci_sha\", environment.getProperty(\"circleci_sha\")); assertEquals(\"circleci_sha\", environment.getProperty(\"circleci_sha\")); }\n"
    },
    {
        "original_path": "davidmoten_rxjava2-extras###davidmoten_rxjava2-extras/src/test/java/com/github/davidmoten/rx2/ObservablesTest###testCache",
        "generated_path": "ObservablesTest###testCache.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testCache() throws Exception { Observable<Integer> source = Observable.just(1, 2, 3, 4, 5, 6, 7, 8, 9, 10); CloseableObservableWithReset<Integer> o = Observables.cache(source); o.subscribe(new Runnable() { @Override public void run() { System.out.println(\"run\"); } }); o.subscribe(new Runnable() { @Override public void run() { System.out.println(\"run\"); } }); o.subscribe(new Runnable() { @Override public void run() { System.out.println(\"run\"); } }); o.subscribe(new Runnable() { @Override public void run() { System.out.println(\"run\"); } }); o.subscribe(new Runnable() { @Override public void run() { System.out.println(\"run\"); } }); o.subscribe(new Runnable() { @Override public void run() { System.out.println(\"run\"); } }); o.subscribe(new Runnable() { @Override public void run() { System.out.println(\"run\"); } }); o.subscribe(new Runnable() { @Override public void run() { System.out.println(\"run\"); } }); o.subscribe(new Runnable() { @Override public void run() { System.out.println(\"run\"); } }); o.subscribe(new Runnable() { @Override public void run() { System.out.println(\"run\"); } }); o.subscribe(new Runnable() { @Override public void"
    },
    {
        "original_path": "davidmoten_rxjava2-extras###davidmoten_rxjava2-extras/src/test/java/com/github/davidmoten/rx2/BytesTest###testUnzip",
        "generated_path": "BytesTest###testUnzip.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testUnzip() throws IOException { File file = new File(this.getClass().getClassLoader().getResource(\"zip.zip\").getFile()); byte[] zipBytes = Bytes.unzip(file).toBlocking().single(); byte[] zipBytes2 = Bytes.unzip(file).toBlocking().single(); byte[] zipBytes3 = Bytes.unzip(file).toBlocking().single(); byte[] zipBytes4 = Bytes.unzip(file).toBlocking().single(); byte[] zipBytes5 = Bytes.unzip(file).toBlocking().single(); byte[] zipBytes6 = Bytes.unzip(file).toBlocking().single(); byte[] zipBytes7 = Bytes.unzip(file).toBlocking().single(); byte[] zipBytes8 = Bytes.unzip(file).toBlocking().single(); byte[] zipBytes9 = Bytes.unzip(file).toBlocking().single(); byte[] zipBytes9 = Bytes.unzip(file).toBlocking().single(); byte[] zipBytes5 = Bytes.unzip(file).toBlocking().single(); byte[] zipBytes6 = Bytes.unzip(file).toBlocking().single(); byte[] zipBytes7 = Bytes.unzip(file).toBlocking().single(); byte[] zipBytes8 = Bytes.unzip(file).toBlocking().single(); byte[] zipBytes9 = Bytes.unzip(file).toBlocking().single(); byte[] zipBytes9 = Bytes.unzip(file).toBlocking"
    },
    {
        "original_path": "davidmoten_rxjava2-extras###davidmoten_rxjava2-extras/src/test/java/com/github/davidmoten/rx2/FlowablesTest###testCache",
        "generated_path": "FlowablesTest###testCache.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void cache() throws InterruptedException { final AtomicReference<CachedFlowable<Integer>> cacheRef = new AtomicReference<CachedFlowable<Integer>>(); final AtomicReference<Scheduler.Worker> workerRef = new AtomicReference<Scheduler.Worker>(); final Flowable<Integer> source = Flowable.just(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19,"
    },
    {
        "original_path": "davidmoten_rxjava2-extras###davidmoten_rxjava2-extras/src/test/java/com/github/davidmoten/rx2/util/PairTest###testHashCode",
        "generated_path": "PairTest###testHashCode.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testHashCode() { Pair<Integer, Integer> pair = Pair.create(1, 2); Pair<Integer, Integer> pair2 = Pair.create(1, 2); Pair<Integer, Integer> pair3 = Pair.create(1, 2); Pair<Integer, Integer> pair4 = Pair.create(1, 1); Pair<Integer, Integer> pair5 = Pair.create(1, 1); Pair<Integer, Integer> pair6 = Pair.create(1, 1); Pair<Integer, Integer> pair7 = Pair.create(1, 1); Pair<Integer, Integer> pair8 = Pair.create(1, 1); Pair<Integer, Integer> pair9 = Pair.create(1, 1); Pair<Integer, Integer> pair10 = Pair.create(1, 1); Pair<Integer, Integer> pair11 = Pair.create(1, 1); Pair<Integer, Integer> pair12 = Pair.create(1, 1); Pair<Integer, Integer> pair13 = Pair.create(1, 1); Pair<Integer, Integer> pair14 = Pair.create(1, 1); Pair<Integer, Integer> pair15 = Pair.create(1, 1); Pair<Integer, Integer> pair16 = Pair.create(1, 1); Pair<Integer, Integer> pair21 = Pair.create(1, 1); Pair<Integer, Integer> pair22 = Pair.create(1, 1); Pair<Integer, Integer"
    },
    {
        "original_path": "davidmoten_rxjava2-extras###davidmoten_rxjava2-extras/src/test/java/com/github/davidmoten/rx2/util/PairTest###testEquals",
        "generated_path": "PairTest###testEquals.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testEquals() { Pair<Integer, Integer> pair = Pair.create(1, 2); Pair<Integer, Integer> pair2 = Pair.create(1, 2); Pair<Integer, Integer> pair3 = Pair.create(1, 2); Pair<Integer, Integer> pair4 = Pair.create(1, 2); Pair<Integer, Integer> pair5 = Pair.create(1, 2); Pair<Integer, Integer> pair6 = Pair.create(1, 2); Pair<Integer, Integer> pair7 = Pair.create(1, 2); Pair<Integer, Integer> pair8 = Pair.create(1, 2); Pair<Integer, Integer> pair9 = Pair.create(1, 2); Pair<Integer, Integer> pair10 = Pair.create(1, 2); Pair<Integer, Integer> pair11 = Pair.create(1, 2); Pair<Integer, Integer> pair12 = Pair.create(1, 2); Pair<Integer, Integer> pair13 = Pair.create(1, 2); Pair<Integer, Integer> pair14 = Pair.create(1, 2); Pair<Integer, Integer> pair15 = Pair.create(1, 2); Pair<Integer, Integer> pair16 = Pair.create(1, 2); Pair<Integer, Integer> pair17 = Pair.create(1, 2); Pair<Integer, Integer> pair16 = Pair.create(1, 2); Pair<Integer, Integer"
    },
    {
        "original_path": "davidmoten_geo###davidmoten_geo/geo/src/test/java/com/github/davidmoten/geo/LatLongTest###testToString",
        "generated_path": "LatLongTest###testToString.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void testToString() { System.out.println(\"toString\"); LatLong instance = new LatLong(0.0, 0.0); String expResult = \"LatLong [lat=0.0, lon=0.0]\"; String result = instance.toString(); assertEquals(expResult, result); }\n"
    },
    {
        "original_path": "davidmoten_rxjava2-extras###davidmoten_rxjava2-extras/src/test/java/com/github/davidmoten/rx2/util/PairTest###testToString",
        "generated_path": "PairTest###testToString.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testToString() { Pair<Integer, String> pair = new Pair<Integer, String>(1, \"b\"); assertEquals(\"Pair [left=1, right=2]\", pair.toString()); }\n"
    },
    {
        "original_path": "sachin-handiekar_jInstagram###sachin-handiekar_jInstagram/src/test/java/org/jinstagram/auth/InstagramAuthServiceTest###testApiKey",
        "generated_path": "InstagramAuthServiceTest###testApiKey.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test(expected = IllegalArgumentException.class) public void testInvalidApiKey() { InstagramAuthService authService = new InstagramAuthService(); authService.apiKey(\"\"); }\n"
    },
    {
        "original_path": "sachin-handiekar_jInstagram###sachin-handiekar_jInstagram/src/test/java/org/jinstagram/auth/InstagramAuthServiceTest###testScope",
        "generated_path": "InstagramAuthServiceTest###testScope.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test(expected = IllegalArgumentException.class) public void testInvalidScope() { InstagramAuthService authService = new InstagramAuthService(); authService.scope(\"\"); }\n"
    },
    {
        "original_path": "sachin-handiekar_jInstagram###sachin-handiekar_jInstagram/src/test/java/org/jinstagram/realtime/InstagramSubscriptionTest###testDeleteAllSubscription",
        "generated_path": "InstagramSubscriptionTest###testDeleteAllSubscription.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test(expectedExceptions = InstagramException.class) public void deleteAllSubscription() throws InstagramException { InstagramSubscription subscription = new InstagramSubscription(); subscription.deleteAllSubscription(); }\n"
    },
    {
        "original_path": "sachin-handiekar_jInstagram###sachin-handiekar_jInstagram/src/test/java/org/jinstagram/realtime/InstagramSubscriptionTest###testClientId",
        "generated_path": "InstagramSubscriptionTest###testClientId.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void clientId() throws InstagramException { }\n"
    },
    {
        "original_path": "sachin-handiekar_jInstagram###sachin-handiekar_jInstagram/src/test/java/org/jinstagram/auth/InstagramAuthServiceTest###testCallback",
        "generated_path": "InstagramAuthServiceTest###testCallback.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test(expected = IllegalArgumentException.class) public void testCallbackInvalidUrl() { InstagramAuthService authService = new InstagramAuthService(); authService.callback(\"\"); }\n"
    },
    {
        "original_path": "sachin-handiekar_jInstagram###sachin-handiekar_jInstagram/src/test/java/org/jinstagram/realtime/InstagramSubscriptionTest###testDeleteSubscription",
        "generated_path": "InstagramSubscriptionTest###testDeleteSubscription.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testDeleteSubscription() throws InstagramException { final InstagramSubscription subscription = new InstagramSubscription(); final SubscriptionResponse response = new SubscriptionResponse(); response.setBody(\"{\\\\\"id\\\\\":\\\\\"id\\\\\"}\"); response.setStatus(Status.OK); final SubscriptionResponse response2 = new SubscriptionResponse(); response2.setBody(\"{\\\\\"id\\\\\":\\\\\"id\\\\\",\\\\\"status\\\\\":\\\\\"ok\\\\\"}\"); response2.setStatus(Status.OK); response2.setStatus(Status.OK); final SubscriptionResponse response3 = new SubscriptionResponse(); response3.setBody(\"{\\\\\"id\\\\\":\\\\\"id\\\\\",\\\\\"status\\\\\":\\\\\"ok\\\\\"}\"); response3.setStatus(Status.OK); response3.setBody(\"{\\\\\"id\\\\\":\\\\\"id\\\\\",\\\\\"status\\\\\":\\\\\"ok\\\\\"}\"); response3.setStatus(Status.OK); final SubscriptionResponse response4 = new SubscriptionResponse(); response4.setBody(\"{\\\\\"id\\\\\":\\\\\"id\\\\\",\\\\\"status\\\\\":\\\\\"ok\\\\\"}\"); response4.setStatus(Status.OK); response4.setStatus(Status.OK); final SubscriptionResponse response5 = new SubscriptionResponse(); response5.setBody(\"{\\\\\"id\\\\\":\\\\\"id\\\\\",\\\\\"status\\\\\":\\\\\"ok\\\\\"}\"); response5.setStatus(Status.OK); response5.setStatus(Status.OK); response5.setBody(\"{\\\\\"id\\\\\":\\\\\"id\\\\\",\\\\\"status\\\\\":\\\\\"ok"
    },
    {
        "original_path": "sachin-handiekar_jInstagram###sachin-handiekar_jInstagram/src/test/java/org/jinstagram/auth/InstagramAuthServiceTest###testApiSecret",
        "generated_path": "InstagramAuthServiceTest###testApiSecret.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void apiSecret() { }\n"
    },
    {
        "original_path": "sachin-handiekar_jInstagram###sachin-handiekar_jInstagram/src/test/java/org/jinstagram/realtime/InstagramSubscriptionTest###testAspect",
        "generated_path": "InstagramSubscriptionTest###testAspect.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test(expectedExceptions = InstagramException.class) public void aspect() throws InstagramException { InstagramSubscription subscription = new InstagramSubscription(); subscription.aspect(\"\"); }\n"
    },
    {
        "original_path": "sachin-handiekar_jInstagram###sachin-handiekar_jInstagram/src/test/java/org/jinstagram/realtime/InstagramSubscriptionTest###testClientSecret",
        "generated_path": "InstagramSubscriptionTest###testClientSecret.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test(expectedExceptions = InstagramException.class) public void testClientSecretThrowsException() throws InstagramException { InstagramSubscription subscription = new InstagramSubscription(); subscription.clientSecret(\"\"); }\n"
    },
    {
        "original_path": "sachin-handiekar_jInstagram###sachin-handiekar_jInstagram/src/test/java/org/jinstagram/realtime/InstagramSubscriptionTest###testLatitute",
        "generated_path": "InstagramSubscriptionTest###testLatitute.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void latitute() throws InstagramException { }\n"
    },
    {
        "original_path": "sachin-handiekar_jInstagram###sachin-handiekar_jInstagram/src/test/java/org/jinstagram/realtime/InstagramSubscriptionTest###testToString",
        "generated_path": "InstagramSubscriptionTest###testToString.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testToString() throws InstagramException { }\n"
    },
    {
        "original_path": "sachin-handiekar_jInstagram###sachin-handiekar_jInstagram/src/test/java/org/jinstagram/auth/InstagramAuthServiceTest###testBuild",
        "generated_path": "InstagramAuthServiceTest###testBuild.java",
        "Compile_result": 1,
        "Test_result": 0,
        "Gen_Test": "@Test public void testBuild() throws Exception { InstagramAuthService service = new InstagramAuthService(); InstagramService instagramService = service.build(); assertNotNull(instagramService); }\n"
    },
    {
        "original_path": "sachin-handiekar_jInstagram###sachin-handiekar_jInstagram/src/test/java/org/jinstagram/realtime/InstagramSubscriptionTest###testCallback",
        "generated_path": "InstagramSubscriptionTest###testCallback.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test(expectedExceptions = InstagramException.class) public void testCallbackInvalidUrl() throws InstagramException { InstagramSubscription subscription = new InstagramSubscription(); subscription.callback(\"\"); }\n"
    },
    {
        "original_path": "sachin-handiekar_jInstagram###sachin-handiekar_jInstagram/src/test/java/org/jinstagram/realtime/InstagramSubscriptionTest###testVerifyToken",
        "generated_path": "InstagramSubscriptionTest###testVerifyToken.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testVerifyToken() throws InstagramException { }\n"
    },
    {
        "original_path": "sachin-handiekar_jInstagram###sachin-handiekar_jInstagram/src/test/java/org/jinstagram/realtime/InstagramSubscriptionTest###testRadius",
        "generated_path": "InstagramSubscriptionTest###testRadius.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void radius() throws InstagramException { }\n"
    },
    {
        "original_path": "sachin-handiekar_jInstagram###sachin-handiekar_jInstagram/src/test/java/org/jinstagram/entity/common/InstagramErrorResponseTest###testParse",
        "generated_path": "InstagramErrorResponseTest###testParse.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void parse() throws InstagramException { String json = \"{\\\\\"meta\\\\\":{\\\\\"code\\\\\":0,\\\\\"errorType\\\\\":\\\\\"error\\\\\"}}\"; InstagramErrorResponse result = InstagramErrorResponse.parse(gson, json); assertNotNull(result); assertEquals(0, result.getCode()); assertEquals(\"error\", result.getErrorType()); }\n"
    },
    {
        "original_path": "sachin-handiekar_jInstagram###sachin-handiekar_jInstagram/src/test/java/org/jinstagram/auth/InstagramAuthServiceTest###testDisplay",
        "generated_path": "InstagramAuthServiceTest###testDisplay.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test(expected = IllegalArgumentException.class) public void testDisplayEmptyString() { InstagramAuthService authService = new InstagramAuthService(); authService.display(\"\"); }\n"
    },
    {
        "original_path": "sachin-handiekar_jInstagram###sachin-handiekar_jInstagram/src/test/java/org/jinstagram/realtime/InstagramSubscriptionTest###testLongitude",
        "generated_path": "InstagramSubscriptionTest###testLongitude.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void longitude() throws InstagramException { }\n"
    },
    {
        "original_path": "sachin-handiekar_jInstagram###sachin-handiekar_jInstagram/src/test/java/org/jinstagram/realtime/InstagramSubscriptionTest###testCreateSubscription",
        "generated_path": "InstagramSubscriptionTest###testCreateSubscription.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testCreateSubscription() throws InstagramException { final InstagramSubscription subscription = new InstagramSubscription(); final SubscriptionResponse response = subscription.createSubscription(); assertNotNull(response); }\n"
    },
    {
        "original_path": "mdeverdelhan_ta4j-origins###mdeverdelhan_ta4j-origins/ta4j/src/test/java/eu/verdelhan/ta4j/indicators/statistics/PeriodicalGrowthRateIndicatorTest###testGetTotalReturn",
        "generated_path": "PeriodicalGrowthRateIndicatorTest###testGetTotalReturn.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void test() { PeriodicalGrowthRateIndicator indicator = new PeriodicalGrowthRateIndicator(new ArrayIndicator<Decimal>(), 1); assertEquals(1.0, indicator.getTotalReturn(), 0.01); }\n"
    },
    {
        "original_path": "datacleaner_DataCleaner###datacleaner_DataCleaner/components/http/src/test/java/org/datacleaner/components/http/HttpRequestTransformerTest###testGetOutputColumns",
        "generated_path": "HttpRequestTransformerTest###testGetOutputColumns.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetOutputColumns() throws Exception { final OutputColumns outputColumns = transformer.getOutputColumns(); assertEquals(1, outputColumns.getColumnNames().length); assertEquals(Integer.class, outputColumns.getColumnTypes()[0]); assertEquals(String.class, outputColumns.getColumnTypes()[1]); assertEquals(String.class, outputColumns.getColumnTypes()[2]); }\n"
    },
    {
        "original_path": "datacleaner_DataCleaner###datacleaner_DataCleaner/components/http/src/test/java/org/datacleaner/components/http/HttpRequestTransformerTest###testApplyVariablesToString",
        "generated_path": "HttpRequestTransformerTest###testApplyVariablesToString.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testApplyVariablesToString() throws Exception { HttpRequestTransformer transformer = new HttpRequestTransformer(); String str = \"\"; InputRow inputRow = new InputRow(); inputRow.setValues(new ArrayList<Object>()); inputRow.setValues(new ArrayList<Object>()); inputRow.setValues(new ArrayList<Object>()); inputRow.setValues(new ArrayList<Object>()); inputRow.setValues(new ArrayList<Object>()); inputRow.setValues(new ArrayList<Object>()); inputRow.setValues(new ArrayList<Object>()); inputRow.setValues(new ArrayList<Object>()); String result = transformer.applyVariablesToString(str, inputRow); assertEquals(\"\", result); }\n"
    },
    {
        "original_path": "datacleaner_DataCleaner###datacleaner_DataCleaner/components/reference-data/src/test/java/org/datacleaner/beans/transform/RemoveDictionaryMatchesTransformerTest###testGetOutputColumns",
        "generated_path": "RemoveDictionaryMatchesTransformerTest###testGetOutputColumns.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetOutputColumns() { final OutputColumns outputColumns = _transformer.getOutputColumns(); Assert.assertEquals(2, outputColumns.getColumnNames().length); Assert.assertEquals(String.class, outputColumns.getColumnTypes()[0]); Assert.assertEquals(String.class, outputColumns.getColumnTypes()[1]); Assert.assertEquals(List.class, outputColumns.getColumnTypes()[2]); Assert.assertEquals(String.class, outputColumns.getColumnTypes()[3]); Assert.assertEquals(String.class, outputColumns.getColumnTypes()[4]); Assert.assertEquals(List.class, outputColumns.getColumnTypes()[5]); Assert.assertEquals(String.class, outputColumns.getColumnTypes()[6]); Assert.assertEquals(List.class, outputColumns.getColumnTypes()[7]); Assert.assertEquals(String.class, outputColumns.getColumnTypes()[8]); Assert.assertEquals(List.class, outputColumns.getColumnTypes()[9]); Assert.assertEquals(List.class, outputColumns.getColumnTypes()[10]); Assert.assertEquals(List.class, outputColumns.getColumnTypes()[11]); Assert.assertEquals(List.class, outputColumns.getColumnTypes()[11]); Assert.assertEquals(List.class, outputColumns.getColumnTypes()[11]); Assert.assertEquals(List.class, outputColumns.get"
    },
    {
        "original_path": "datacleaner_DataCleaner###datacleaner_DataCleaner/desktop/ui/src/test/java/org/datacleaner/windows/OpenAnalysisJobAsTemplateDialogTest###testCreateLoadingIcon",
        "generated_path": "OpenAnalysisJobAsTemplateDialogTest###testCreateLoadingIcon.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testCreateLoadingIcon() { final LoadingIcon loadingIcon = OpenAnalysisJobAsTemplateDialog.createLoadingIcon(); assertNotNull(loadingIcon); assertEquals(32, loadingIcon.getPreferredSize().getHeight()); assertEquals(Color.WHITE, loadingIcon.getBackground()); assertTrue(loadingIcon.isOpaque()); assertFalse(loadingIcon.isVisible()); }\n"
    },
    {
        "original_path": "datacleaner_DataCleaner###datacleaner_DataCleaner/desktop/ui/src/test/java/org/datacleaner/windows/OpenAnalysisJobAsTemplateDialogTest###testRefreshOpenButtonVisibility",
        "generated_path": "OpenAnalysisJobAsTemplateDialogTest###testRefreshOpenButtonVisibility.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testRefreshOpenButtonVisibility() { final DataCleanerConfiguration configuration = new DataCleanerConfiguration(); final FileObject file = new FileObject(new File(\"src/test/resources/analysis-job.xml\")); final AnalysisJobMetadata metadata = new AnalysisJobMetadata(); final Provider<OpenAnalysisJobActionListener> openAnalysisJobActionListenerProvider = mock(Provider.class); final OpenAnalysisJobAsTemplateDialog openAnalysisJobAsTemplateDialog = new OpenAnalysisJobAsTemplateDialog(null, configuration, file, metadata, openAnalysisJobActionListenerProvider); openAnalysisJobAsTemplateDialog.refreshOpenButtonVisibility(); verify(openAnalysisJobActionListenerProvider).get(); }\n"
    },
    {
        "original_path": "datacleaner_DataCleaner###datacleaner_DataCleaner/components/fuse/src/test/java/org/datacleaner/components/fuse/CoalesceUnitTest###testGetOutputDataType",
        "generated_path": "CoalesceUnitTest###testGetOutputDataType.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetOutputDataType() { final List<InputColumn<?>> inputColumns = new ArrayList<InputColumn<?>>(); final InputColumn<?>[] inputColumns2 = new InputColumn[] { new InputColumn<>(\"a\", Object.class), new InputColumn<>(\"b\", Object.class), new InputColumn<>(\"c\", Object.class), new InputColumn<>(\"d\", Object.class), new InputColumn<>(\"e\", Object.class), new InputColumn<>(\"f\", Object.class), new InputColumn<>(\"g\", Object.class), new InputColumn<>(\"h\", Object.class), new InputColumn<>(\"i\", Object.class), new InputColumn<>(\"j\", Object.class), new InputColumn<>(\"k\", Object.class), new InputColumn<>(\"j\", Object.class), new InputColumn<>(\"k\", Object.class), new InputColumn<>(\"j\", Object.class), new InputColumn<>(\"k\", Object.class), new InputColumn<>(\"f\", Object.class), new InputColumn<>(\"g\", Object.class), new InputColumn<>(\"h\", Object.class), new InputColumn<>(\"i\", Object.class), new InputColumn<>(\"j\", Object.class), new InputColumn<>(\"k\", Object.class), new InputColumn<>(\"j\", Object.class), new InputColumn<>(\"k\", Object.class), new InputColumn<>(\"j\", Object.class), new InputColumn<>(\"k\", Object.class),"
    },
    {
        "original_path": "datacleaner_DataCleaner###datacleaner_DataCleaner/components/basic-transformers/src/test/java/org/datacleaner/beans/codec/HashTransformerTest###testGetOutputColumns",
        "generated_path": "HashTransformerTest###testGetOutputColumns.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetOutputColumns() { final OutputColumns outputColumns = new HashTransformer().getOutputColumns(); assertEquals(\"Hash of \" + StringJoiner.join(\", \"), outputColumns.getClass()); assertEquals(\"Input length\", outputColumns.getInputLength()); }\n"
    },
    {
        "original_path": "softindex_datakernel###softindex_datakernel/cloud-memcache/src/test/java/io/datakernel/memcache/server/RingBufferTest###testGet",
        "generated_path": "RingBufferTest###testGet.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGet() { RingBuffer ringBuffer = RingBuffer.create(10, 10); byte[] key = new byte[10]; ringBuffer.put(key, new byte[10]); ringBuffer.put(key, new byte[10]); ringBuffer.put(key, new byte[10]); ringBuffer.put(key, new byte[10]); ringBuffer.put(key, new byte[10]); ringBuffer.put(key, new byte[10]); ringBuffer.put(key, new byte[10]); ringBuffer.put(key, new byte[10]); ringBuffer.put(key, new byte[10]); ringBuffer.put(key, new byte[10]); ringBuffer.put(key, new byte[10]); ringBuffer.put(key, new byte[10]); ringBuffer.put(key, new byte[10]); ringBuffer.put(key, new byte[10]); ringBuffer.put(key, new byte[10]); ringBuffer.put(key, new byte[10]); ringBuffer.put(key, new byte[10]); ringBuffer.put(key, new byte[10]); ringBuffer.put(key, new byte[10]); ringBuffer.put(key, new byte[10]); ringBuffer.put(key, new byte[10]); ringBuffer.put(key, new byte[10]); ringBuffer.put(key, new byte[10]); ringBuffer.put(key, new byte[10"
    },
    {
        "original_path": "softindex_datakernel###softindex_datakernel/cloud-ot/src/test/java/io/datakernel/ot/MergedOTSystemTest###testSquash",
        "generated_path": "MergedOTSystemTest###testSquash.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testSquash() throws OTTransformException { List<String> result = mergedOTSystem.squash(Arrays.asList(\"a\", \"b\", \"c\")); assertEquals(asList(\"a\", \"b\", \"c\"), result); }\n"
    },
    {
        "original_path": "softindex_datakernel###softindex_datakernel/cloud-memcache/src/test/java/io/datakernel/memcache/server/RingBufferTest###testGetSize",
        "generated_path": "RingBufferTest###testGetSize.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetSize() { RingBuffer ringBuffer = RingBuffer.create(10, 10); assertEquals(10, ringBuffer.getSize()); ringBuffer = RingBuffer.create(10, 10); assertEquals(10, ringBuffer.getSize()); ringBuffer = RingBuffer.create(10, 10); assertEquals(10, ringBuffer.getSize()); ringBuffer = RingBuffer.create(10, 10); assertEquals(10, ringBuffer.getSize()); ringBuffer = RingBuffer.create(10, 10); assertEquals(10, ringBuffer.getSize()); ringBuffer = RingBuffer.create(10, 10); assertEquals(10, ringBuffer.getSize()); ringBuffer = RingBuffer.create(10, 10); assertEquals(10, ringBuffer.getSize()); ringBuffer = RingBuffer.create(10, 10); assertEquals(10, ringBuffer.getSize()); ringBuffer = RingBuffer.create(10, 10); assertEquals(10, ringBuffer.getSize()); }\n"
    },
    {
        "original_path": "softindex_datakernel###softindex_datakernel/cloud-ot/src/test/java/io/datakernel/ot/MergedOTSystemTest###testIsEmpty",
        "generated_path": "MergedOTSystemTest###testIsEmpty.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testIsEmpty() throws OTTransformException { assertTrue(mergedOTSystem.isEmpty(op1)); assertTrue(mergedOTSystem.isEmpty(op2)); assertTrue(mergedOTSystem.isEmpty(op3)); assertTrue(mergedOTSystem.isEmpty(op4)); assertTrue(mergedOTSystem.isEmpty(op5)); assertTrue(mergedOTSystem.isEmpty(op6)); assertTrue(mergedOTSystem.isEmpty(op7)); assertTrue(mergedOTSystem.isEmpty(op8)); assertTrue(mergedOTSystem.isEmpty(op9)); assertTrue(mergedOTSystem.isEmpty(op9)); assertTrue(mergedOTSystem.isEmpty(op9)); assertTrue(mergedOTSystem.isEmpty(op9)); assertTrue(mergedOTSystem.isEmpty(op9)); assertTrue(mergedOTSystem.isEmpty(op9)); assertTrue(mergedOTSystem.isEmpty(op9)); assertTrue(mergedOTSystem.isEmpty(op9)); assertTrue(mergedOTSystem.isEmpty(op9)); assertTrue(mergedOTSystem.isEmpty(op9)); assertTrue(mergedOTSystem.isEmpty(op9)); assertTrue(mergedOTSystem.isEmpty(op9)); assertTrue(mergedOTSystem.isEmpty(op9)); assertTrue(mergedOTSystem.isEmpty(op9)); assertTrue(mergedOTSystem.isEmpty(op9)); assertTrue(mergedOTSystem"
    },
    {
        "original_path": "softindex_datakernel###softindex_datakernel/core-bytebuf/src/test/java/io/datakernel/bytebuf/ByteBufStringsTest###testDecodeLong",
        "generated_path": "ByteBufStringsTest###testDecodeLong.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testDecodeLong() throws Exception { ByteBuf buf = Unpooled.buffer(); buf.writeLong(0); buf.writeLong(1); buf.writeLong(2); buf.writeLong(3); buf.writeLong(4); buf.writeLong(5); buf.writeLong(6); buf.writeLong(7); buf.writeLong(8); buf.writeLong(9); buf.writeLong(10); buf.writeLong(11); buf.writeLong(12); buf.writeLong(13); buf.writeLong(14); buf.writeLong(15); buf.writeLong(14); buf.writeLong(15); buf.writeLong(14); buf.writeLong(14); buf.writeLong(14); buf.writeLong(14); buf.writeLong(14); buf.writeLong(14); buf.writeLong(14); buf.writeLong(14); buf.writeLong(14); buf.writeLong(14); buf.writeLong(14); buf.writeLong(14); buf.writeLong(14); buf.writeLong(14); buf.writeLong(14); buf.writeLong(14); buf.writeLong(14); buf.writeLong(14); buf.writeLong(14); buf.writeLong(14); buf.writeLong(14); buf.writeLong(14); buf.writeLong(14); buf.writeLong(14); buf.writeLong"
    },
    {
        "original_path": "softindex_datakernel###softindex_datakernel/core-bytebuf/src/test/java/io/datakernel/bytebuf/ByteBufTest###testGet",
        "generated_path": "ByteBufTest###testGet.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test(expected = IllegalStateException.class) public void testGet() { ByteBuf buf = ByteBuf.wrapForWriting(new byte[0]); buf.get(); }\n"
    },
    {
        "original_path": "softindex_datakernel###softindex_datakernel/core-bytebuf/src/test/java/io/datakernel/bytebuf/ByteBufQueueTest###testAsIterator",
        "generated_path": "ByteBufQueueTest###testAsIterator.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testAsIterator() { for (int i = 0; i < 1000; ++i) { ByteBufQueue queue = new ByteBufQueue(); for (int j = 0; j < 1000; ++j) { queue.add(new ByteBuf(0, 0, 0, 0)); } queue.add(new ByteBuf(0, 0, 0, 0)); queue.add(new ByteBuf(0, 0, 0, 0)); queue.add(new ByteBuf(0, 0, 0, 0)); queue.add(new ByteBuf(0, 0, 0, 0)); queue.add(new ByteBuf(0, 0, 0, 0)); queue.add(new ByteBuf(0, 0, 0, 0)); queue.add(new ByteBuf(0, 0, 0, 0)); queue.add(new ByteBuf(0, 0, 0, 0)); queue.add(new ByteBuf(0, 0, 0, 0)); queue.add(new ByteBuf(0, 0, 0, 0)); queue.add(new ByteBuf(0, 0, 0, 0)); queue.add(new ByteBuf(0, 0, 0, 0)); queue.add(new ByteBuf(0, 0, 0, 0)); queue.add(new ByteBuf(0, 0, 0, 0)); queue.add(new ByteBuf(0, 0, 0, 0)); queue.add(new ByteBuf(0, 0, 0, 0)); queue.add(new ByteBuf(0, 0, 0, 0));"
    },
    {
        "original_path": "softindex_datakernel###softindex_datakernel/core-csp/src/test/java/io/datakernel/csp/eventloop/AsyncTcpSocketSslTest###testWrite",
        "generated_path": "AsyncTcpSocketSslTest###testWrite.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testWrite() throws Exception { AsyncTcpSocketSsl ssl = new AsyncTcpSocketSsl() { @Override public void write(ByteBuf buf) { buf.release(); } @Override public void writeEx(Throwable e) { } }; ByteBuf buf = ByteBufPool.append(app2engine, ByteBufPool.append(app2engine, ByteBufPool.append(app2engine, ByteBufPool.append(app2engine, ByteBufPool.append(app2engine, ByteBufPool.append(app2engine, ByteBufPool.append(app2engine, ByteBufPool.append(app2engine, ByteBufPool.append(app2engine, ByteBufPool.append(app2engine, ByteBufPool.append(app2engine, ByteBufPool.append(app2engine, ByteBufPool.append(app2engine, ByteBufPool.append(app2engine, ByteBufPool.append(app2engine, ByteBufPool.append(app2engine, ByteBufPool.append(app2engine, ByteBufPool.append(app2engine, ByteBufPool.append(app2engine, ByteBufPool.append(app2engine, ByteBufPool.append(app2engine, ByteBufPool.append(app2engine, ByteBufPool.append(app2engine, ByteBufPool.append(app2engine, ByteBufPool.append(app2engine, ByteBufPool.append(app2engine, ByteBufPool.append(app2engine, ByteBufPool.append(app2engine, ByteBufPool.append(app2engine, ByteBuf"
    },
    {
        "original_path": "softindex_datakernel###softindex_datakernel/core-bytebuf/src/test/java/io/datakernel/bytebuf/ByteBufStringsTest###testWrapLong",
        "generated_path": "ByteBufStringsTest###testWrapLong.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testWrapLong() throws Exception { ByteBuf buf = ByteBufPool.allocate(20); for (int i = 0; i < 1000; i++) { buf.writeLong(i); } buf.release(); }\n"
    },
    {
        "original_path": "softindex_datakernel###softindex_datakernel/cloud-ot/src/test/java/io/datakernel/ot/MergedOTSystemTest###testInvert",
        "generated_path": "MergedOTSystemTest###testInvert.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testInvert() throws OTTransformException { List<String> result = MergedOTSystem.mergeOtSystems(tupleConstructor1, tupleConstructor2, getter1, getter2, getter3, getter4, getter5, otSystem4).invert(list); assertEquals(0, result.size()); }\n"
    },
    {
        "original_path": "softindex_datakernel###softindex_datakernel/core-http/src/test/java/io/datakernel/http/HttpDateTest###testRender",
        "generated_path": "HttpDateTest###testRender.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testRender() throws ParseException { byte[] bytes = new byte[8]; int pos = HttpDate.render(0, bytes, pos); assertEquals(8, pos); }\n"
    },
    {
        "original_path": "softindex_datakernel###softindex_datakernel/core-http/src/test/java/io/datakernel/http/decoder/ValidatorTest###testAnd",
        "generated_path": "ValidatorTest###testAnd.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void and() { Validator<String> validator = new Validator<String>(); Validator<String> next = new Validator<String>(); Validator<String> result = validator.and(next); assertTrue(result.isOk()); assertEquals(next, result); }\n"
    },
    {
        "original_path": "fabric8io_fabric8-maven-plugin###fabric8io_fabric8-maven-plugin/generator/openliberty/src/test/java/io/fabric8/generator/openliberty/OpenLibertyGeneratorTest###testExtractPorts",
        "generated_path": "OpenLibertyGeneratorTest###testExtractPorts.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testExtractPorts() { List<String> ports = new OpenLibertyGenerator(context).extractPorts(); assertEquals(1, ports.size()); assertEquals(\"8080\", ports.get(0)); assertEquals(\"9080\", ports.get(1)); assertEquals(\"9080\", ports.get(2)); assertEquals(\"9080\", ports.get(3)); assertEquals(\"9080\", ports.get(4)); assertEquals(\"9080\", ports.get(5)); assertEquals(\"9080\", ports.get(6)); assertEquals(\"9080\", ports.get(7)); assertEquals(\"9080\", ports.get(8)); assertEquals(\"9080\", ports.get(9)); assertEquals(\"9080\", ports.get(10)); assertEquals(\"9080\", ports.get(11)); assertEquals(\"9080\", ports.get(12)); assertEquals(\"9080\", ports.get(13)); assertEquals(\"9080\", ports.get(14)); assertEquals(\"9080\", ports.get(15)); assertEquals(\"9080\", ports.get(16)); }\n"
    },
    {
        "original_path": "fabric8io_fabric8-maven-plugin###fabric8io_fabric8-maven-plugin/core/src/test/java/io/fabric8/maven/core/util/KindAndNameTest###testHashCode",
        "generated_path": "KindAndNameTest###testHashCode.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void testHashCode() { KindAndName k1 = new KindAndName(\"a\", \"b\"); KindAndName k2 = new KindAndName(\"a\", \"b\"); assertEquals(k1, k2); assertEquals(k1.hashCode(), k2.hashCode()); }\n"
    },
    {
        "original_path": "fabric8io_fabric8-maven-plugin###fabric8io_fabric8-maven-plugin/core/src/test/java/io/fabric8/maven/core/util/KindAndNameTest###equalsTest",
        "generated_path": "KindAndNameTest###equalsTest.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void testEquals() { KindAndName a = new KindAndName(\"a\", \"b\"); KindAndName b = new KindAndName(\"a\", \"b\"); assertTrue(a.equals(b)); assertFalse(a.equals(null)); assertFalse(a.equals(new Object())); }\n"
    },
    {
        "original_path": "fabric8io_fabric8-maven-plugin###fabric8io_fabric8-maven-plugin/core/src/test/java/io/fabric8/maven/core/handler/ServiceHandlerTest###getServicesTest",
        "generated_path": "ServiceHandlerTest###getServicesTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetServices() { List<ServiceConfig> services = new ArrayList<>(); services.add(new ServiceConfig()); services.add(new ServiceConfig()); services.add(new ServiceConfig()); List<Service> services2 = new ServiceHandler().getServices(services); assertEquals(2, services2.size()); assertEquals(1, services2.get(0).getAnnotations().size()); assertEquals(1, services2.get(0).getAnnotations().size()); assertEquals(1, services2.get(0).getAnnotations().size()); assertEquals(1, services2.get(0).getAnnotations().size()); assertEquals(1, services2.get(0).getAnnotations().size()); assertEquals(1, services2.get(0).getAnnotations().size()); assertEquals(1, services2.get(0).getAnnotations().size()); assertEquals(1, services2.get(0).getAnnotations().size()); assertEquals(1, services2.get(0).getAnnotations().size()); assertEquals(1, services2.get(0).getAnnotations().size()); assertEquals(1, services2.get(0).getAnnotations().size()); assertEquals(1, services2.get(0).getAnnotations().size()); assertEquals(1, services2.get(0).getAnnotations().size()); assertEquals(1, services2.get(0).getAnnotations().size()); assertEquals(1, services2.get("
    },
    {
        "original_path": "fommil_matrix-toolkits-java###fommil_matrix-toolkits-java/src/test/java/no/uib/cipr/matrix/QRTest###testFactor",
        "generated_path": "QRTest###testFactor.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test(expected=IllegalArgumentException.class) public void testInvalidFactor() { QR qr = new QR(3, 3); QR.factor(new DenseMatrix(new double[][] { {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19"
    },
    {
        "original_path": "fommil_matrix-toolkits-java###fommil_matrix-toolkits-java/src/test/java/no/uib/cipr/matrix/RQTest###testFactor",
        "generated_path": "RQTest###testFactor.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testFactor() { System.out.println(\"factor\"); RQ instance = new RQ(3, 3); Matrix A = new DenseMatrix(new double[][] { {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19,"
    },
    {
        "original_path": "fommil_matrix-toolkits-java###fommil_matrix-toolkits-java/src/test/java/no/uib/cipr/matrix/LQTest###testFactor",
        "generated_path": "LQTest###testFactor.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test(expected=IllegalArgumentException.class) public void testFactor2() throws Exception { Matrix A = new DenseMatrix(new double[][] { {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {1, 2, 3, 4, 5, 6, 7, 8, 9}, {1, 2, 3, 4, 5, 6, 7, 8, 9}, {1, 2, 3, 4, 5, 6, 7, 8, 9"
    },
    {
        "original_path": "fommil_matrix-toolkits-java###fommil_matrix-toolkits-java/src/test/java/no/uib/cipr/matrix/QLTest###testFactor",
        "generated_path": "QLTest###testFactor.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test(expected=IllegalArgumentException.class) public void testFactor2() { Q.factor(new DenseMatrix(new double[][] { {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11} })); }\n"
    },
    {
        "original_path": "Stratio_stratio-connector-commons###Stratio_stratio-connector-commons/connector-commons/src/test/java/com/stratio/connector/commons/util/ManifestUtilTest###testGetConectorName",
        "generated_path": "ManifestUtilTest###testGetConectorName.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetConectorName() throws InitializationException, SAXException, ParserConfigurationException, IOException { String pathManifest = getClass().getResource(\"/org/apache/cxf/tools/manifest/ManifestUtilTest.xml\"); String connectionName = ManifestUtil.getConectorName(pathManifest); assertEquals(\"\", connectionName); }\n"
    },
    {
        "original_path": "Stratio_stratio-connector-commons###Stratio_stratio-connector-commons/connector-commons/src/test/java/com/stratio/connector/commons/util/SelectorHelperTest###testGetClass",
        "generated_path": "SelectorHelperTest###testGetClass.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetClass() throws Exception { List<String> list = new ArrayList<String>(); list.add(\"a\"); list.add(\"b\"); list.add(\"c\"); list.add(\"d\"); list.add(\"e\"); list.add(\"f\"); list.add(\"g\"); list.add(\"h\"); list.add(\"h\"); list.add(\"i\"); list.add(\"j\"); list.add(\"j\"); list.add(\"j\"); list.add(\"j\"); list.add(\"j\"); list.add(\"j\"); list.add(\"j\"); list.add(\"j\"); list.add(\"j\"); list.add(\"j\"); list.add(\"j\"); list.add(\"j\"); list.add(\"j\"); list.add(\"j\"); list.add(\"j\"); list.add(\"j\"); list.add(\"j\"); list.add(\"j\"); list.add(\"j\"); list.add(\"j\"); list.add(\"j\"); list.add(\"j\"); list.add(\"j\"); list.add(\"j\"); list.add(\"j\"); list.add(\"j\"); list.add(\"j\"); list.add(\"j\"); list.add(\"j\"); list.add(\"j\"); list.add(\"j\"); list.add(\"j\"); list.add(\"j\"); list.add(\"j\"); list.add(\"j\"); list.add(\"j\"); list.add(\"j\"); list.add(\"j\"); list.add(\"j\"); list"
    },
    {
        "original_path": "psjava_psjava###psjava_psjava/src/test/java/org/psjava/formula/MaxInIterableTest###testMax",
        "generated_path": "MaxInIterableTest###testMax.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testMax() throws Exception { assertEquals(1, MaxInIterable.max(Arrays.asList(1, 2, 3), new Comparator<Integer>() { @Override public int compare(Integer a, Integer b) { return a - b; } }).intValue()); assertEquals(2, MaxInIterable.max(Arrays.asList(1, 2, 3), new Comparator<Integer>() { @Override public int compare(Integer a, Integer b) { return b; } }).intValue()); assertEquals(3, MaxInIterable.max(Arrays.asList(1, 2, 3), new Comparator<Integer>() { @Override public int compare(Integer a, Integer b) { return b; } }).intValue()); assertEquals(2, MaxInIterable.max(Arrays.asList(1, 2, 3), new Comparator<Integer>() { @Override public int compare(Integer a, Integer b) { return b; } }).intValue()); }\n"
    },
    {
        "original_path": "psjava_psjava###psjava_psjava/src/test/java/org/psjava/ds/numbersystrem/FractionNumberSystemTest###testAreEqual",
        "generated_path": "FractionNumberSystemTest###testAreEqual.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void areEqual() { assertTrue(ns.areEqual(Fraction.of(1), Fraction.of(2))); assertTrue(ns.areEqual(Fraction.of(1), Fraction.of(2))); assertTrue(ns.areEqual(Fraction.of(1), Fraction.of(2))); assertTrue(ns.areEqual(Fraction.of(1), Fraction.of(2))); assertTrue(ns.areEqual(Fraction.of(1), Fraction.of(2))); assertTrue(ns.areEqual(Fraction.of(1), Fraction.of(2))); assertTrue(ns.areEqual(Fraction.of(1), Fraction.of(2))); assertTrue(ns.areEqual(Fraction.of(1), Fraction.of(1))); assertTrue(ns.areEqual(Fraction.of(1), Fraction.of(1))); assertTrue(ns.areEqual(Fraction.of(1), Fraction.of(1))); assertTrue(ns.areEqual(Fraction.of(1), Fraction.of(1))); assertTrue(ns.areEqual(Fraction.of(1), Fraction.of(1))); assertTrue(ns.areEqual(Fraction.of(1), Fraction.of(1), Fraction.of(1))); assertTrue(ns.areEqual(Fraction.of(1), Fraction."
    },
    {
        "original_path": "psjava_psjava###psjava_psjava/src/test/java/org/psjava/algo/graph/DistanceCalculatorInRootedTreeTest###testCalc",
        "generated_path": "DistanceCalculatorInRootedTreeTest###testCalc.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void test() { final LowestCommonAncestorQuerySession<String> lca = new LowestCommonAncestorQuerySession<>(); final DistanceCalculatorInRootedTreeResult<String, String> calc = new DistanceCalculatorInRootedTree<>(lca, new MutableMapFactory()); final AddableNumberSystem<String> ns = new AddableNumberSystem<>(); calc.modifyDistance(\"A\", \"A\", \"A\"); calc.modifyDistance(\"B\", \"B\", \"B\"); calc.modifyDistance(\"C\", \"C\", \"C\"); calc.modifyDistance(\"D\", \"D\", \"D\"); calc.modifyDistance(\"E\", \"E\", \"E\"); calc.modifyDistance(\"E\", \"E\", \"E\"); calc.modifyDistance(\"E\", \"E\", \"E\"); calc.modifyDistance(\"E\", \"E\", \"E\"); calc.modifyDistance(\"E\", \"E\", \"E\"); calc.modifyDistance(\"E\", \"E\", \"E\"); calc.modifyDistance(\"E\", \"E\", \"E\"); calc.modifyDistance(\"E\", \"E\", \"E\"); calc.modifyDistance(\"E\", \"E\", \"E\"); calc.modifyDistance(\"E\", \"E\", \"E\"); calc.modifyDistance(\"E\", \"E\", \"E\"); calc.modifyDistance(\"E\", \"E\", \"E\"); calc.modifyDistance(\"E\", \"E\", \"E\"); calc.modifyDistance(\"E\", \"E\", \"E\"); calc.modifyDistance(\"E"
    },
    {
        "original_path": "psjava_psjava###psjava_psjava/src/test/java/org/psjava/ds/numbersystrem/GuavasLongMathTest###testCheckedAdd",
        "generated_path": "GuavasLongMathTest###testCheckedAdd.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testCheckedAdd() { Assert.assertEquals(0, GuavasLongMath.checkedAdd(0, 0)); Assert.assertEquals(0, GuavasLongMath.checkedAdd(0, 0)); Assert.assertEquals(0, GuavasLongMath.checkedAdd(0, 0)); Assert.assertEquals(0, GuavasLongMath.checkedAdd(0, 0)); Assert.assertEquals(0, GuavasLongMath.checkedAdd(0, 0)); Assert.assertEquals(0, GuavasLongMath.checkedAdd(0, 0)); Assert.assertEquals(0, GuavasLongMath.checkedAdd(0, 0)); Assert.assertEquals(0, GuavasLongMath.checkedAdd(0, 0)); Assert.assertEquals(0, GuavasLongMath.checkedAdd(0, 0)); Assert.assertEquals(0, GuavasLongMath.checkedAdd(0, 0)); Assert.assertEquals(0, GuavasLongMath.checkedAdd(0, 0)); Assert.assertEquals(0, GuavasLongMath.checkedAdd(0, 0)); Assert.assertEquals(0, GuavasLongMath.checkedAdd(0, 0)); Assert.assertEquals(0, GuavasLongMath.checkedAdd(0, 0)); Assert.assertEquals(0, GuavasLongMath.checkedAdd(0, 0)); Assert.assertEquals(0, Guav"
    },
    {
        "original_path": "psjava_psjava###psjava_psjava/src/test/java/org/psjava/ds/map/hashtable/OpenAddressingHashTableMapTest###testCalcBucketSize",
        "generated_path": "OpenAddressingHashTableMapTest###testCalcBucketSize.java",
        "Compile_result": 1,
        "Test_result": 0,
        "Gen_Test": "@Test public void testCalcBucketSize() { int bucketSize = OpenAddressingHashTableMap.calcBucketSize(10); assertEquals(10, bucketSize); }\n"
    },
    {
        "original_path": "blueconic_browscap-java###blueconic_browscap-java/src/test/java/com/blueconic/browscap/impl/RuleTest###testRequires",
        "generated_path": "RuleTest###testRequires.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testNoSuffixes() { assertFalse(new Rule().requires(\"a\")); assertFalse(new Rule().requires(\"a\")); assertFalse(new Rule().requires(\"a\")); assertFalse(new Rule().requires(\"a\")); assertFalse(new Rule().requires(\"a\")); assertFalse(new Rule().requires(\"a\")); assertFalse(new Rule().requires(\"a\")); assertFalse(new Rule().requires(\"a\")); assertFalse(new Rule().requires(\"a\")); assertFalse(new Rule().requires(\"a\")); assertFalse(new Rule().requires(\"a\")); assertFalse(new Rule().requires(\"a\")); assertFalse(new Rule().requires(\"a\")); assertFalse(new Rule().requires(\"a\")); assertFalse(new Rule().requires(\"a\")); assertFalse(new Rule().requires(\"a\")); assertFalse(new Rule().requires(\"a\")); assertFalse(new Rule().requires(\"a\")); assertFalse(new Rule().requires(\"a\")); assertFalse(new Rule().requires(\"a\")); assertFalse(new Rule().requires(\"a\")); assertFalse(new Rule().requires(\"a\")); assertFalse(new Rule().requires(\"a\")); assertFalse(new Rule().requires(\"a\")); assertFalse(new Rule().requires(\"a\")); assertFalse(new Rule().requires(\"a\")); assertFalse(new Rule().requires(\"a\")); assertFalse(new Rule().requires(\"a\"));"
    },
    {
        "original_path": "blueconic_browscap-java###blueconic_browscap-java/src/test/java/com/blueconic/browscap/impl/UserAgentFileParserTest###testCreateRule",
        "generated_path": "UserAgentFileParserTest###testCreateRule.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test(expected = IllegalStateException.class) public void testCreateRuleWithNoPattern() throws ParseException { parser.createRule(\"\", new Capabilities()); }\n"
    },
    {
        "original_path": "blueconic_browscap-java###blueconic_browscap-java/src/test/java/com/blueconic/browscap/impl/UserAgentFileParserTest###testGetValue",
        "generated_path": "UserAgentFileParserTest###testGetValue.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetValue() throws ParseException, IOException { assertEquals(myParser.getValue(\"http: assertEquals(myParser.getValue(\"http: assertEquals(myParser.getValue(\"http: assertEquals(myParser.getValue(\"http: assertEquals(myParser.getValue(\"http: assertEquals(myParser.getValue(\"http: assertEquals(myParser.getValue(\"http: assertEquals(myParser.getValue(\"http: assertEquals(myParser.getValue(\"http: assertEquals(myParser.getValue(\"http: assertEquals(myParser.getValue(\"http: assertEquals(myParser.getValue(\"http: assertEquals(myParser.getValue(\"http: assertEquals(myParser.getValue(\"http: assertEquals(myParser.getValue(\"http: assertEquals(myParser.getValue(\"http: assertEquals(myParser.getValue(\"http: assertEquals(myParser.getValue(\"http: assertEquals(myParser.getValue(\"http: assertEquals(myParser.getValue(\"http: assertEquals(myParser.getValue(\"http: assertEquals(myParser.getValue(\"http: assertEquals(myParser.getValue(\"http: assertEquals(myParser.getValue(\"http: assertEquals(myParser.getValue(\"http: assertEquals(myParser.getValue(\"http: assertEquals(myParser.getValue(\"http: assertEquals(myParser.getValue(\"http: assertEquals(myParser.getValue(\"http: assertEquals(myParser.getValue(\"http: assertEquals(myParser"
    },
    {
        "original_path": "blueconic_browscap-java###blueconic_browscap-java/src/test/java/com/blueconic/browscap/impl/SearchableStringTest###testGetIndices",
        "generated_path": "SearchableStringTest###testGetIndices.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetIndices() { final SearchableString s = new SearchableString(); final Literal l = new Literal(0, 0); assertArrayEquals(new int[] {0, 0}, s.getIndices(l)); }\n"
    },
    {
        "original_path": "twilio_twilio-java###twilio_twilio-java/src/test/java/com/twilio/jwt/taskrouter/PolicyUtilsTest###testDefaultWorkerPolicies",
        "generated_path": "PolicyUtilsTest###testDefaultWorkerPolicies.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void defaultWorkerPolicies() throws Exception { final List<Policy> policies = PolicyUtils.defaultWorkerPolicies(workspaceSid, workerSid); assertEquals(2, policies.size()); assertTrue(policies.contains(new Policy.Builder().url(UrlUtils.activities(workspaceSid, workerSid)).allowed(true).build())); assertTrue(policies.contains(new Policy.Builder().url(UrlUtils.allTasks(workspaceSid, workerSid)).allowed(true).build())); assertTrue(policies.contains(new Policy.Builder().url(UrlUtils.allReservations(workspaceSid, workerSid)).allowed(true).build())); assertTrue(policies.contains(new Policy.Builder().url(UrlUtils.worker(workspaceSid, workerSid)).allowed(true).build())); assertTrue(policies.contains(new Policy.Builder().url(UrlUtils.allTasks(workspaceSid, workerSid)).allowed(true).build())); assertTrue(policies.contains(new Policy.Builder().url(UrlUtils.allReservations(workspaceSid, workerSid)).allowed(true).build())); assertTrue(policies.contains(new Policy.Builder().url(UrlUtils.worker(workspaceSid, workerSid)).allowed(true).build())); assertTrue(policies.contains(new Policy.Builder().url(UrlUtils.allTasks(workspaceSid, workerSid)).allowed(true).build())); assertTrue(policies.contains("
    },
    {
        "original_path": "twilio_twilio-java###twilio_twilio-java/src/test/java/com/twilio/http/HttpUtilityTest###getUserAgentStringTest",
        "generated_path": "HttpUtilityTest###getUserAgentStringTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetUserAgentStringWithCustomClient() { String userAgentString = httpUtility.getUserAgentString(null, true); assertEquals(\"twilio-java/2.0 (Mac OS X 10.0.0) java/2.0.0\", userAgentString); }\n"
    },
    {
        "original_path": "twilio_twilio-java###twilio_twilio-java/src/test/java/com/twilio/http/RequestTest###testConstructURL",
        "generated_path": "RequestTest###testConstructURL.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testConstructURL() throws Exception { final Request request = new Request(HttpMethod.GET, \"http: final URL url = request.constructURL(); assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\""
    },
    {
        "original_path": "twilio_twilio-java###twilio_twilio-java/src/test/java/com/twilio/security/RequestValidatorTest###testValidateBody",
        "generated_path": "RequestValidatorTest###testValidateBody.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testValidateBody() throws URISyntaxException { RequestValidator requestValidator = new RequestValidator(\"\"); assertTrue(requestValidator.validateBody(\"Hello World\", \"SHA-256\")); assertTrue(requestValidator.validateBody(\"Hello World\", \"SHA-256\")); assertTrue(requestValidator.validateBody(\"Hello World\", \"SHA-256\")); assertTrue(requestValidator.validateBody(\"Hello World\", \"SHA-256\")); assertTrue(requestValidator.validateBody(\"Hello World\", \"SHA-256\")); assertTrue(requestValidator.validateBody(\"Hello World\", \"SHA-256\")); assertTrue(requestValidator.validateBody(\"Hello World\", \"SHA-256\")); assertTrue(requestValidator.validateBody(\"Hello World\", \"SHA-256\")); assertTrue(requestValidator.validateBody(\"Hello World\", \"SHA-256\")); assertTrue(requestValidator.validateBody(\"Hello World\", \"SHA-256\")); assertTrue(requestValidator.validateBody(\"Hello World\", \"SHA-256\")); assertTrue(requestValidator.validateBody(\"Hello World\", \"SHA-256\")); assertTrue(requestValidator.validateBody(\"Hello World\", \"SHA-256\")); assertTrue(requestValidator.validateBody(\"Hello World\", \"SHA-256\")); assertTrue(requestValidator.validateBody(\"Hello World\", \"SHA-256\")); assertTrue(requestValidator.validateBody(\"Hello World\", \"SHA-256\")); assertTrue(requestValidator.validateBody(\""
    },
    {
        "original_path": "twilio_twilio-java###twilio_twilio-java/src/test/java/com/twilio/http/TwilioRestClientTest###testRequest",
        "generated_path": "TwilioRestClientTest###testRequest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testRequest() throws Exception { TwilioRestClient client = new TwilioRestClient(); Request request = new Request(); request.setUsername(\"user\"); request.setPassword(\"password\"); request.setRegion(\"us-east-1\"); request.setEdge(\"edge\"); Response response = client.request(request); assertTrue(response.getStatusCode() == 200); assertTrue(response.getHeaders().containsKey(HttpHeaders.CONTENT_TYPE)); assertTrue(response.getHeaders().containsKey(HttpHeaders.CONTENT_TYPE)); assertTrue(response.getHeaders().containsKey(HttpHeaders.CONTENT_LENGTH)); assertTrue(response.getHeaders().containsKey(HttpHeaders.CONTENT_TYPE)); assertTrue(response.getHeaders().containsKey(HttpHeaders.CONTENT_TYPE)); assertTrue(response.getHeaders().containsKey(HttpHeaders.CONTENT_TYPE)); assertTrue(response.getHeaders().containsKey(HttpHeaders.CONTENT_TYPE)); assertTrue(response.getHeaders().containsKey(HttpHeaders.CONTENT_TYPE)); assertTrue(response.getHeaders().containsKey(HttpHeaders.CONTENT_LENGTH)); assertTrue(response.getHeaders().containsKey(HttpHeaders.CONTENT_TYPE)); assertTrue(response.getHeaders().containsKey(HttpHeaders.CONTENT_TYPE)); assertTrue(response.getHeaders().containsKey(HttpHeaders.CONTENT_TYPE)); assertTrue(response.getHeaders().containsKey(HttpHeaders.CONTENT_TYPE)); assertTrue(response.getHeaders()."
    },
    {
        "original_path": "twilio_twilio-java###twilio_twilio-java/src/test/java/com/twilio/security/RequestValidatorTest###testValidate",
        "generated_path": "RequestValidatorTest###testValidate.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testValidate() throws URISyntaxException { Map<String, String> params = new HashMap<>(); params.put(\"url\", \"http: params.put(\"bodySHA256\", \"sha256\"); RequestValidator validator = new RequestValidator(\"\"); assertTrue(validator.validate(\"http: params.put(\"bodySHA256\", \"sha256\")); assertTrue(validator.validate(\"http: params.put(\"bodySHA256\", \"sha256\")); assertTrue(validator.validate(\"http: params.put(\"bodySHA256\", \"sha256\")); assertTrue(validator.validate(\"http: params.put(\"bodySHA256\", \"sha256\")); assertTrue(validator.validate(\"http: params.put(\"bodySHA256\", \"sha256\")); assertTrue(validator.validate(\"http: params.put(\"bodySHA256\", \"sha256\")); assertTrue(validator.validate(\"http: params.put(\"bodySHA256\", \"sha256\")); assertTrue(validator.validate(\"http: params.put(\"bodySHA256\", \"sha256\")); assertTrue(validator.validate(\"http: params.put(\"bodySHA256\", \"sha256\")); assertTrue(validator.validate(\"http: params.put(\"bodySHA256\", \"sha256\")); assertTrue(validator.validate(\"http: params.put(\"bodySHA256\", \"sha256\")); assertTrue(validator.validate(\"http: params.put(\"bodySHA256\", \"sha256\")); assertTrue"
    },
    {
        "original_path": "twilio_twilio-java###twilio_twilio-java/src/test/java/com/twilio/jwt/taskrouter/PolicyUtilsTest###testDefaultEventBridgePolicies",
        "generated_path": "PolicyUtilsTest###testDefaultEventBridgePolicies.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void defaultEventBridgePolicies() { List<Policy> policies = PolicyUtils.defaultEventBridgePolicies(ACCOUNT_ID, CHANNEL_ID); Assert.assertEquals(1, policies.size()); Assert.assertEquals(new Policy.Builder().url(TASKROUTER_EVENT_URL).method(HttpMethod.GET).allowed(true).build(), policies.get(0).getUrl()); Assert.assertEquals(new Policy.Builder().url(TASKROUTER_EVENT_URL).method(HttpMethod.POST).allowed(true).build(), policies.get(1).getUrl()); Assert.assertEquals(new Policy.Builder().url(TASKROUTER_EVENT_URL).method(HttpMethod.POST).allowed(true).build(), policies.get(2).getUrl()); Assert.assertEquals(new Policy.Builder().url(TASKROUTER_EVENT_URL).method(HttpMethod.GET).allowed(true).build(), policies.get(3).getUrl()); Assert.assertEquals(new Policy.Builder().url(TASKROUTER_EVENT_URL).method(HttpMethod.POST).allowed(true).build(), policies.get(4).getUrl()); Assert.assertEquals(new Policy.Builder().url(TASKROUTER_EVENT_URL).method(HttpMethod.POST).allowed(true).build(), policies.get(5).getUrl()); Assert.assertEquals(new Policy.Builder().url(TASKROUTER_"
    },
    {
        "original_path": "twilio_twilio-java###twilio_twilio-java/src/test/java/com/twilio/jwt/taskrouter/PolicyTest###testToJson",
        "generated_path": "PolicyTest###testToJson.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testToJson() throws IOException { Policy policy = new Policy(); policy.setUrl(\"http: policy.setMethod(HttpMethod.GET); policy.setQueryFilter(new HashMap<String, FilterRequirement>()); policy.setPostFilter(new HashMap<String, FilterRequirement>()); policy.setAllowed(true); policy.setAllowedUrl(\"http: policy.setPostFilter(new HashMap<String, FilterRequirement>()); policy.setUrl(\"http: policy.setAllowedUrl(\"http: policy.setPostFilter(new HashMap<String, FilterRequirement>()); policy.setUrl(\"http: policy.setPostFilter(new HashMap<String, FilterRequirement>()); assertEquals(policy.toJson(), \"{\\\\\"url\\\\\":\\\\\"http: }\n"
    },
    {
        "original_path": "CloudSlang_score###CloudSlang_score/worker/worker-manager/score-worker-manager-impl/src/test/java/io/cloudslang/worker/management/services/WorkerManagerTest###testResolveDotnetVersion",
        "generated_path": "WorkerManagerTest###testResolveDotnetVersion.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void testResolveDotNetVersion() { System.out.println(\"resolveDotNetVersion\"); String result = WorkerManager.resolveDotNetVersion(); System.out.println(result); }\n"
    },
    {
        "original_path": "CloudSlang_score###CloudSlang_score/worker/worker-manager/score-worker-manager-impl/src/test/java/io/cloudslang/worker/management/services/SimpleExecutionRunnableTest###testRun",
        "generated_path": "SimpleExecutionRunnableTest###testRun.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testRun() throws Exception { SimpleExecutionRunnable runnable = new SimpleExecutionRunnable(executionService, outBuffer, inBuffer, converter, endExecutionCallback, queueStateIdGeneratorService, workerUUID, workerConfigurationService, workerManager); runnable.setExecutionMessage(new ExecutionMessage()); runnable.run(); }\n"
    },
    {
        "original_path": "kurbatov_firmata4j###kurbatov_firmata4j/src/test/java/org/firmata4j/firmata/fsm/FiniteStateMachineTest###testHandle",
        "generated_path": "FiniteStateMachineTest###testHandle.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testHandle() throws Exception { FiniteStateMachine fsm = new FiniteStateMachine(); fsm.addHandler(\"test\", new Consumer<Event>() { @Override public void accept(Event event) { } }); fsm.handle(new Event(\"test\")); fsm.handle(new Event(\"test\")); fsm.handle(new Event(\"test\")); fsm.handle(new Event(\"test\")); fsm.handle(new Event(\"test\")); fsm.handle(new Event(\"test\")); fsm.handle(new Event(\"test\")); fsm.handle(new Event(\"test\")); fsm.handle(new Event(\"test\")); fsm.handle(new Event(\"test\")); fsm.handle(new Event(\"test\")); fsm.handle(new Event(\"test\")); fsm.handle(new Event(\"test\")); fsm.handle(new Event(\"test\")); fsm.handle(new Event(\"test\")); fsm.handle(new Event(\"test\")); fsm.handle(new Event(\"test\")); fsm.handle(new Event(\"test\")); fsm.handle(new Event(\"test\")); fsm.handle(new Event(\"test\")); fsm.handle(new Event(\"test\")); fsm.handle(new Event(\"test\")); fsm.handle(new Event(\"test\")); fsm.handle(new Event(\"test\")); fsm.handle(new Event(\"test\")); fsm.handle(new Event(\"test\")); fsm.handle(new Event(\"test\"));"
    },
    {
        "original_path": "aerogear-attic_aerogear-otp-java###aerogear-attic_aerogear-otp-java/src/test/java/org/jboss/aerogear/security/otp/api/Base32Test###testRandom",
        "generated_path": "Base32Test###testRandom.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testRandom() throws Exception { String random = Base32.random(); assertTrue(random.length() > 0); }\n"
    },
    {
        "original_path": "aerogear-attic_aerogear-otp-java###aerogear-attic_aerogear-otp-java/src/test/java/org/jboss/aerogear/security/otp/api/HmacTest###testDigest",
        "generated_path": "HmacTest###testDigest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testDigest() throws NoSuchAlgorithmException, InvalidKeyException { Hmac hmac = new Hmac(Hash.SHA256, secret, 0); byte[] result = hmac.digest(); assertEquals(0, result.length); }\n"
    },
    {
        "original_path": "aerogear-attic_aerogear-otp-java###aerogear-attic_aerogear-otp-java/src/test/java/org/jboss/aerogear/security/otp/api/ClockTest###testGetCurrentInterval",
        "generated_path": "ClockTest###testGetCurrentInterval.java",
        "Compile_result": 1,
        "Test_result": 0,
        "Gen_Test": "@Test public void testClock() { Clock clock = new Clock(1); assertEquals(1, clock.getCurrentInterval()); clock = new Clock(1); assertEquals(1, clock.getCurrentInterval()); clock = new Clock(1); assertEquals(1, clock.getCurrentInterval()); clock = new Clock(1); assertEquals(1, clock.getCurrentInterval()); clock = new Clock(1); assertEquals(1, clock.getCurrentInterval()); clock = new Clock(1); assertEquals(1, clock.getCurrentInterval()); clock = new Clock(1); assertEquals(1, clock.getCurrentInterval()); clock = new Clock(1); assertEquals(1, clock.getCurrentInterval()); clock = new Clock(1); assertEquals(1, clock.getCurrentInterval()); clock = new Clock(1); assertEquals(1, clock.getCurrentInterval()); clock = new Clock(1); assertEquals(1, clock.getCurrentInterval()); clock = new Clock(1); assertEquals(1, clock.getCurrentInterval()); clock = new Clock(1); assertEquals(1, clock.getCurrentInterval()); }\n"
    },
    {
        "original_path": "gwtbootstrap3_gwtbootstrap3###gwtbootstrap3_gwtbootstrap3/gwtbootstrap3/src/test/java/org/gwtbootstrap3/client/ui/base/helper/EnumHelperTest###testFromStyleName",
        "generated_path": "EnumHelperTest###testFromStyleName.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testFromStyleName() { assertThat(EnumHelper.fromStyleName(null, Style.class, null), is(nullValue())); assertThat(EnumHelper.fromStyleName(\"\", Style.class, null), is(nullValue())); assertThat(EnumHelper.fromStyleName(\"\", Style.class, null), is(nullValue())); assertThat(EnumHelper.fromStyleName(\"\", Style.class, null), is(nullValue())); assertThat(EnumHelper.fromStyleName(\"\", Style.class, null), is(nullValue())); assertThat(EnumHelper.fromStyleName(\"\", Style.class, null), is(nullValue())); assertThat(EnumHelper.fromStyleName(\"\", Style.class, null), is(nullValue())); assertThat(EnumHelper.fromStyleName(\"\", Style.class, null), is(nullValue())); assertThat(EnumHelper.fromStyleName(\"\", Style.class, null), is(nullValue())); assertThat(EnumHelper.fromStyleName(\"\", Style.class, null), is(nullValue())); assertThat(EnumHelper.fromStyleName(\"\", Style.class, null), is(nullValue())); assertThat(EnumHelper.fromStyleName(\"\", Style.class, null), is(nullValue())); assertThat(EnumHelper.fromStyleName(\"\", Style.class, null), is(nullValue())); assertThat(EnumHelper.fromStyle"
    },
    {
        "original_path": "gwtbootstrap3_gwtbootstrap3###gwtbootstrap3_gwtbootstrap3/gwtbootstrap3/src/test/java/org/gwtbootstrap3/client/ui/base/helper/StyleHelperTest###testContainsStyle",
        "generated_path": "StyleHelperTest###testContainsStyle.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testContainsStyle() { Assert.assertTrue(StyleHelper.containsStyle(null, null)); Assert.assertFalse(StyleHelper.containsStyle(\"\", null)); Assert.assertFalse(StyleHelper.containsStyle(null, null)); Assert.assertFalse(StyleHelper.containsStyle(null, null)); Assert.assertFalse(StyleHelper.containsStyle(null, null)); Assert.assertFalse(StyleHelper.containsStyle(null, null)); Assert.assertFalse(StyleHelper.containsStyle(null, null)); Assert.assertFalse(StyleHelper.containsStyle(null, null)); Assert.assertFalse(StyleHelper.containsStyle(null, null)); Assert.assertFalse(StyleHelper.containsStyle(null, null)); Assert.assertFalse(StyleHelper.containsStyle(null, null)); Assert.assertFalse(StyleHelper.containsStyle(null, null)); Assert.assertFalse(StyleHelper.containsStyle(null, null)); Assert.assertFalse(StyleHelper.containsStyle(null, null)); Assert.assertFalse(StyleHelper.containsStyle(null, null)); Assert.assertFalse(StyleHelper.containsStyle(null, null)); Assert.assertFalse(StyleHelper.containsStyle(null, null)); Assert.assertFalse(StyleHelper.containsStyle(null, null)); Assert.assertFalse(StyleHelper.containsStyle(null, null)); Assert.assertFalse(StyleHelper.containsStyle(null, null)); Assert.assertFalse(StyleHelper.containsStyle"
    },
    {
        "original_path": "microsoft_azure-maven-plugins###microsoft_azure-maven-plugins/azure-spring-apps-maven-plugin/src/test/java/com/microsoft/azure/maven/springcloud/prompt/ConfigurationPrompterTest###testConfirmChanges",
        "generated_path": "ConfigurationPrompterTest###testConfirmChanges.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testConfirmChanges() throws IOException, InvalidConfigurationException { Map<String, String> changesToConfirm = new HashMap<>(); changesToConfirm.put(\"key\", \"value\"); confPrompter.confirmChanges(changesToConfirm, () -> 1); assertEquals(\"value\", System.getProperty(\"line.separator\")); assertEquals(\"value\", System.getProperty(\"line.separator\")); assertEquals(\"value\", System.getProperty(\"line.separator\")); assertEquals(\"value\", System.getProperty(\"line.separator\")); assertEquals(\"value\", System.getProperty(\"line.separator\")); assertEquals(\"value\", System.getProperty(\"line.separator\")); assertEquals(\"value\", System.getProperty(\"line.separator\")); assertEquals(\"value\", System.getProperty(\"line.separator\")); assertEquals(\"value\", System.getProperty(\"line.separator\")); assertEquals(\"value\", System.getProperty(\"line.separator\")); assertEquals(\"value\", System.getProperty(\"line.separator\")); assertEquals(\"value\", System.getProperty(\"line.separator\")); assertEquals(\"value\", System.getProperty(\"line.separator\")); assertEquals(\"value\", System.getProperty(\"line.separator\")); assertEquals(\"value\", System.getProperty(\"line.separator\")); assertEquals(\"value\", System.getProperty(\"line.separator\")); assertEquals(\"value\", System.getProperty(\"line.separator\")); assertEquals(\"value\", System.getProperty"
    },
    {
        "original_path": "microsoft_azure-maven-plugins###microsoft_azure-maven-plugins/azure-maven-plugin-lib/src/test/java/com/microsoft/azure/maven/prompt/InputValidateResultTest###testWrap",
        "generated_path": "InputValidateResultTest###testWrap.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void testWrap() { final String obj = \"test\"; final InputValidateResult<String> result = InputValidateResult.wrap(obj); assertNotNull(result); assertEquals(obj, result.getObj()); }\n"
    },
    {
        "original_path": "microsoft_azure-maven-plugins###microsoft_azure-maven-plugins/azure-maven-plugin-lib/src/test/java/com/microsoft/azure/maven/utils/XmlUtilsTest###testAddDomWithKeyValue",
        "generated_path": "XmlUtilsTest###testAddDomWithKeyValue.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testAddDomWithKeyValue() { final Element node = new Element(\"root\"); XmlUtils.addDomWithKeyValue(node, \"key\", \"value\"); XmlUtils.addDomWithKeyValue(node, \"key\", \"value\"); XmlUtils.addDomWithKeyValue(node, \"key\", \"value\"); XmlUtils.addDomWithKeyValue(node, \"key\", \"value\"); XmlUtils.addDomWithKeyValue(node, \"key\", \"value\"); XmlUtils.addDomWithKeyValue(node, \"key\", \"value\"); XmlUtils.addDomWithKeyValue(node, \"key\", \"value\"); XmlUtils.addDomWithKeyValue(node, \"key\", \"value\"); XmlUtils.addDomWithKeyValue(node, \"key\", \"value\"); XmlUtils.addDomWithKeyValue(node, \"key\", \"value\"); XmlUtils.addDomWithKeyValue(node, \"key\", \"value\"); XmlUtils.addDomWithKeyValue(node, \"key\", \"value\"); XmlUtils.addDomWithKeyValue(node, \"key\", \"value\"); XmlUtils.addDomWithKeyValue(node, \"key\", \"value\"); XmlUtils.addDomWithKeyValue(node, \"key\", \"value\"); XmlUtils.addDomWithKeyValue(node, \"key\", \"value\"); XmlUtils.addDomWithKeyValue(node, \"key\", \"value\"); XmlUtils.addDomWithKeyValue(node, \"key\", \"value\"); XmlUtils.addDomWithKeyValue(node,"
    },
    {
        "original_path": "microsoft_azure-maven-plugins###microsoft_azure-maven-plugins/azure-maven-plugin-lib/src/test/java/com/microsoft/azure/maven/prompt/InputValidateResultTest###testError",
        "generated_path": "InputValidateResultTest###testError.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testError() { final String errorMessage = \"errorMessage\"; final InputValidateResult<TestObject> result = InputValidateResult.error(errorMessage); assertNotNull(result); assertEquals(errorMessage, result.getErrorMessage()); }\n"
    },
    {
        "original_path": "microsoft_azure-maven-plugins###microsoft_azure-maven-plugins/azure-spring-apps-maven-plugin/src/test/java/com/microsoft/azure/maven/springcloud/prompt/ConfigurationPrompterTest###testHandleSelectOne",
        "generated_path": "ConfigurationPrompterTest###testHandleSelectOne.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test(expected = InvalidConfigurationException.class) public void testHandleSelectOneNoOptions() throws IOException, InvalidConfigurationException { ConfigurationPrompter prompter = new ConfigurationPrompter(expressionEvaluator, log); prompter.initialize(); List<String> options = new ArrayList<String>(); options.add(\"test\"); prompter.handleSelectOne(\"test\", options, null, null); }\n"
    },
    {
        "original_path": "microsoft_azure-maven-plugins###microsoft_azure-maven-plugins/azure-spring-apps-maven-plugin/src/test/java/com/microsoft/azure/maven/springcloud/TemplateUtilsTest###testEvalBoolean",
        "generated_path": "TemplateUtilsTest###testEvalBoolean.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testEvalBoolean() { final Map<String, Object> map = new HashMap<String, Object>(); map.put(\"key\", \"value\"); map.put(\"key2\", \"value2\"); map.put(\"key3\", \"value3\"); map.put(\"key4\", \"value4\"); map.put(\"key5\", \"value5\"); map.put(\"key6\", \"value6\"); map.put(\"key7\", \"value7\"); map.put(\"key8\", \"value8\"); map.put(\"key9\", \"value9\"); map.put(\"key10\", \"value10\"); map.put(\"key11\", \"value11\"); map.put(\"key12\", \"value12\"); final Boolean result = TemplateUtils.evalBoolean(\"${key1}${key2}\", map); assertTrue(result); }\n"
    },
    {
        "original_path": "microsoft_azure-maven-plugins###microsoft_azure-maven-plugins/azure-maven-plugin-lib/src/test/java/com/microsoft/azure/maven/utils/XmlUtilsTest###testTrimTextBeforeEnd",
        "generated_path": "XmlUtilsTest###testTrimTextBeforeEnd.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testTrimTextBeforeEnd() { final Element parent = XmlUtils.prettyPrintElementNoNamespace(new Element(\"root\")); final Node node = XmlUtils.prettyPrintElementNoNamespace(new Element(\"child1\")); XmlUtils.trimTextBeforeEnd(parent, node); assertEquals(\"child1\", node.getAttribute(\"text\")); assertEquals(\"child2\", node.getAttribute(\"text\")); assertEquals(\"child3\", node.getAttribute(\"text\")); assertEquals(\"child4\", node.getAttribute(\"text\")); assertEquals(\"child5\", node.getAttribute(\"text\")); assertEquals(\"child6\", node.getAttribute(\"text\")); assertEquals(\"child7\", node.getAttribute(\"text\")); assertEquals(\"child8\", node.getAttribute(\"text\")); assertEquals(\"child9\", node.getAttribute(\"text\")); assertEquals(\"child9\", node.getAttribute(\"text\")); assertEquals(\"child9\", node.getAttribute(\"text\")); assertEquals(\"child9\", node.getAttribute(\"text\")); assertEquals(\"child9\", node.getAttribute(\"text\")); assertEquals(\"child9\", node.getAttribute(\"text\")); assertEquals(\"child9\", node.getAttribute(\"text\")); assertEquals(\"child9\", node.getAttribute(\"text\")); assertEquals(\"child9\", node.getAttribute(\"text\")); assertEquals(\"child9\", node.getAttribute(\"text\")); assertEquals(\"child"
    },
    {
        "original_path": "microsoft_azure-maven-plugins###microsoft_azure-maven-plugins/azure-maven-plugin-lib/src/test/java/com/microsoft/azure/maven/prompt/DefaultPrompterTest###testPromoteYesNo",
        "generated_path": "DefaultPrompterTest###testPromoteYesNo.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testPromoteYesNo() throws IOException { String message = \"This is a test\"; Boolean defaultValue = true; Boolean result = new DefaultPrompter().promoteYesNo(message, defaultValue, true); assertTrue(result); }\n"
    },
    {
        "original_path": "microsoft_azure-maven-plugins###microsoft_azure-maven-plugins/azure-spring-apps-maven-plugin/src/test/java/com/microsoft/azure/maven/springcloud/TemplateUtilsTest###testEvalPlainText",
        "generated_path": "TemplateUtilsTest###testEvalPlainText.java",
        "Compile_result": 1,
        "Test_result": 0,
        "Gen_Test": "@Test public void testEvalPlainText() { Map<String, Object> vars = new HashMap<String, Object>(); vars.put(\"foo\", \"bar\"); assertEquals(\"bar\", TemplateUtils.evalPlainText(\"${foo}\", vars)); vars.put(\"bar\", \"baz\"); assertEquals(\"baz\", TemplateUtils.evalPlainText(\"${foo}\", vars)); vars.put(\"bar\", \"baz\"); assertEquals(\"baz\", TemplateUtils.evalPlainText(\"${foo}\", vars)); vars.put(\"bar\", \"baz\"); assertEquals(\"baz\", TemplateUtils.evalPlainText(\"${foo}\", vars)); vars.put(\"bar\", \"baz\"); assertEquals(\"baz\", TemplateUtils.evalPlainText(\"${foo}\", vars)); vars.put(\"bar\", \"baz\"); assertEquals(\"baz\", TemplateUtils.evalPlainText(\"${foo}\", vars)); vars.put(\"bar\", \"baz\"); assertEquals(\"baz\", TemplateUtils.evalPlainText(\"${foo}\", vars)); vars.put(\"bar\", \"baz\"); assertEquals(\"baz\", TemplateUtils.evalPlainText(\"${foo}\", vars)); }\n"
    },
    {
        "original_path": "asterisk-java_asterisk-java###asterisk-java_asterisk-java/src/test/java/org/asteriskjava/manager/internal/ResponseBuilderImplTest###testBuildResponse",
        "generated_path": "ResponseBuilderImplTest###testBuildResponse.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testBuildResponse() throws Exception { Map<String, Object> attributes = new HashMap<>(); attributes.put(ManagerReader.COMMAND_RESULT_RESPONSE_KEY, \"--START COMMAND--\"); attributes.put(ManagerReader.PROXY_RESPONSE_KEY, \"PROXY\"); attributes.put(ManagerReader.RESPONSE_TYPE_ERROR, \"ERROR\"); attributes.put(ManagerReader.OUTPUT_RESPONSE_KEY, Collections.singletonList(\"--END COMMAND--\")); ManagerResponse response = new ResponseBuilderImpl().buildResponse(ManagerResponse.class, attributes); assertNotNull(response); assertTrue(response instanceof CommandResponse); assertEquals(1, response.getResult().size()); assertEquals(\"--END COMMAND--\", response.getResult().get(0)); }\n"
    },
    {
        "original_path": "asterisk-java_asterisk-java###asterisk-java_asterisk-java/src/test/java/org/asteriskjava/fastagi/ScriptEngineMappingStrategyTest###testSearchFile",
        "generated_path": "ScriptEngineMappingStrategyTest###testSearchFile.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testSearchFile() throws Exception { ScriptEngineMappingStrategy sut = new ScriptEngineMappingStrategy(); String[] scriptPath = new String[] { \"src/test/resources/test.txt\", \"src/test/resources/test.txt\", \"src/test/resources/test.txt\", \"src/test/resources/test.txt\", \"src/test/resources/test.txt\", \"src/test/resources/test.txt\", \"src/test/resources/test.txt\", \"src/test/resources/test.txt\", \"src/test/resources/test.txt\", \"src/test/resources/test.txt\", \"src/test/resources/test.txt\", \"src/test/resources/test.txt\", \"src/test/resources/test.txt\", \"src/test/resources/test.txt\", \"src/test/resources/test.txt\", \"src/test/resources/test.txt\", \"src/test/resources/test.txt\", \"src/test/resources/test.txt\", \"src/test/resources/test.txt\", \"src/test/resources/test.txt\", \"src/test/resources/test.txt\", \"src/test/resources/test.txt\", \"src/test/resources/test.txt\", \"src/test/resources/test.txt\", \"src/test/resources/test.txt\", \"src/test/resources/test.txt"
    },
    {
        "original_path": "asterisk-java_asterisk-java###asterisk-java_asterisk-java/src/test/java/org/asteriskjava/manager/response/SipShowPeerResponseTest###testSetQualifyFreq",
        "generated_path": "SipShowPeerResponseTest###testSetQualifyFreq.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void testSetQualifyFreq() { }\n"
    },
    {
        "original_path": "asterisk-java_asterisk-java###asterisk-java_asterisk-java/src/test/java/org/asteriskjava/fastagi/internal/AgiRequestImplTest###testGetParameter",
        "generated_path": "AgiRequestImplTest###testGetParameter.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetParameter() { System.out.println(\"getParameter\"); AgiRequestImpl instance = new AgiRequestImpl(); String expResult = null; String result = instance.getParameter(\"test\"); assertEquals(expResult, result); }\n"
    },
    {
        "original_path": "asterisk-java_asterisk-java###asterisk-java_asterisk-java/src/test/java/org/asteriskjava/live/CallerIdTest###testValueOf",
        "generated_path": "CallerIdTest###testValueOf.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test(expected = IllegalArgumentException.class) public void testInvalidValueOfNull() { CallerId.valueOf(null); }\n"
    },
    {
        "original_path": "asterisk-java_asterisk-java###asterisk-java_asterisk-java/src/test/java/org/asteriskjava/util/AstUtilTest###testIsTrue",
        "generated_path": "AstUtilTest###testIsTrue.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testIsTrue() { assertTrue(AstUtil.isTrue(true)); assertTrue(AstUtil.isTrue(false)); assertTrue(AstUtil.isTrue(true)); assertTrue(AstUtil.isTrue(true)); assertTrue(AstUtil.isTrue(true)); assertTrue(AstUtil.isTrue(true)); assertTrue(AstUtil.isTrue(true)); assertTrue(AstUtil.isTrue(true)); assertTrue(AstUtil.isTrue(true)); assertTrue(AstUtil.isTrue(true)); assertTrue(AstUtil.isTrue(true)); assertTrue(AstUtil.isTrue(true)); assertTrue(AstUtil.isTrue(true)); assertTrue(AstUtil.isTrue(true)); assertTrue(AstUtil.isTrue(true)); assertTrue(AstUtil.isTrue(true)); assertTrue(AstUtil.isTrue(true)); assertTrue(AstUtil.isTrue(true)); assertTrue(AstUtil.isTrue(true)); assertTrue(AstUtil.isTrue(true)); assertTrue(AstUtil.isTrue(true)); assertTrue(AstUtil.isTrue(true)); assertTrue(AstUtil.isTrue(false)); assertTrue(AstUtil.isTrue(false)); assertTrue(AstUtil.isTrue(false)); assertTrue(AstUtil.isTrue(false)); assertTrue(AstUtil.isTrue(false)); assertTrue(AstUtil.isTrue(false)); assert"
    },
    {
        "original_path": "asterisk-java_asterisk-java###asterisk-java_asterisk-java/src/test/java/org/asteriskjava/fastagi/ResourceBundleMappingStrategyTest###testDetermineScript",
        "generated_path": "ResourceBundleMappingStrategyTest###testDetermineScript.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetScript() throws Exception { AgiRequest request = new AgiRequest(); request.setScript(\"test\"); AgiScript script = resourceBundleMappingStrategy.determineScript(request); assertNotNull(script); assertEquals(\"test\", script.getScript()); }\n"
    },
    {
        "original_path": "asterisk-java_asterisk-java###asterisk-java_asterisk-java/src/test/java/org/asteriskjava/manager/internal/ManagerConnectionImplTest###testIsShowVersionCommandAction",
        "generated_path": "ManagerConnectionImplTest###testIsShowVersionCommandAction.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void testIsShowVersionCommandAction() throws Exception { }\n"
    },
    {
        "original_path": "asterisk-java_asterisk-java###asterisk-java_asterisk-java/src/test/java/org/asteriskjava/fastagi/ClassNameMappingStrategyTest###testDetermineScript",
        "generated_path": "ClassNameMappingStrategyTest###testDetermineScript.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testNoScript() { ClassNameMappingStrategy strategy = new ClassNameMappingStrategy(); AgiScript script = strategy.determineScript(request); assertNotNull(script); }\n"
    },
    {
        "original_path": "asterisk-java_asterisk-java###asterisk-java_asterisk-java/src/test/java/org/asteriskjava/util/AstUtilTest###testIsNull",
        "generated_path": "AstUtilTest###testIsNull.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testIsNull() { assertTrue(AstUtil.isNull(null)); assertFalse(AstUtil.isNull(\"\")); assertFalse(AstUtil.isNull(\"\")); assertFalse(AstUtil.isNull(\"a\")); assertFalse(AstUtil.isNull(\"a\")); assertFalse(AstUtil.isNull(\"a\")); assertFalse(AstUtil.isNull(\"a\")); assertFalse(AstUtil.isNull(\"a\")); assertFalse(AstUtil.isNull(\"a\")); assertFalse(AstUtil.isNull(\"a\")); assertFalse(AstUtil.isNull(\"a\")); assertFalse(AstUtil.isNull(\"a\")); assertFalse(AstUtil.isNull(\"a\")); assertFalse(AstUtil.isNull(\"a\")); assertFalse(AstUtil.isNull(\"a\")); assertFalse(AstUtil.isNull(\"a\")); assertFalse(AstUtil.isNull(\"a\")); assertFalse(AstUtil.isNull(\"a\")); assertFalse(AstUtil.isNull(\"a\")); assertFalse(AstUtil.isNull(\"a\")); assertFalse(AstUtil.isNull(\"a\")); assertFalse(AstUtil.isNull(\"a\")); assertFalse(AstUtil.isNull(\"a\")); assertFalse(AstUtil.isNull(\"a\")); assertFalse(AstUtil.isNull(\"a\")); assertFalse(AstUtil.isNull(\"a\"));"
    },
    {
        "original_path": "asterisk-java_asterisk-java###asterisk-java_asterisk-java/src/test/java/org/asteriskjava/fastagi/ScriptEngineMappingStrategyTest###testGetExtension",
        "generated_path": "ScriptEngineMappingStrategyTest###testGetExtension.java",
        "Compile_result": 1,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetExtension() { System.out.println(\"getExtension\"); String scriptName = null; String result = ScriptEngineMappingStrategy.getExtension(scriptName); assertNull(result); scriptName = \"file.txt\"; result = ScriptEngineMappingStrategy.getExtension(scriptName); assertNull(result); scriptName = \"file.txt\"; result = ScriptEngineMappingStrategy.getExtension(scriptName); assertNull(result); scriptName = \"file.txt\"; result = ScriptEngineMappingStrategy.getExtension(scriptName); assertNull(result); scriptName = \"file.txt\"; result = ScriptEngineMappingStrategy.getExtension(scriptName); assertNull(result); scriptName = \"file.txt\"; result = ScriptEngineMappingStrategy.getExtension(scriptName); assertNull(result); scriptName = \"file.txt\"; result = ScriptEngineMappingStrategy.getExtension(scriptName); assertNull(result); scriptName = \"file.txt\"; result = ScriptEngineMappingStrategy.getExtension(scriptName); assertNull(result); scriptName = \"file.txt\"; result = ScriptEngineMappingStrategy.getExtension(scriptName); assertNull(result); scriptName = \"file.txt\"; result = ScriptEngineMappingStrategy.getExtension(scriptName); assertNull(result); scriptName = \"file.txt\"; result = ScriptEngineMappingStrategy.getExtension(scriptName); assertNull(result); scriptName = \"file.txt\"; result = ScriptEngineMappingStrategy.getExtension(scriptName); assertNull(result); }"
    },
    {
        "original_path": "asterisk-java_asterisk-java###asterisk-java_asterisk-java/src/test/java/org/asteriskjava/fastagi/internal/AgiChannelImplTest###testSendCommand",
        "generated_path": "AgiChannelImplTest###testSendCommand.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testSendCommand() throws Exception { AgiCommand command = new AgiCommand(); command.setAsteriskVersion(new AsteriskVersion(\"1.0\")); command.setCommand(\"test\"); command.setAsteriskVersion(new AsteriskVersion(\"2.0\")); command.setAsteriskVersion(new AsteriskVersion(\"3.0\")); try { channel.sendCommand(command); } catch (AgiException e) { } }\n"
    },
    {
        "original_path": "asterisk-java_asterisk-java###asterisk-java_asterisk-java/src/test/java/org/asteriskjava/manager/event/T38FaxStatusEventTest###testStripUnit",
        "generated_path": "T38FaxStatusEventTest###testStripUnit.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void testStripUnit() { }\n"
    },
    {
        "original_path": "asterisk-java_asterisk-java###asterisk-java_asterisk-java/src/test/java/org/asteriskjava/fastagi/internal/AgiRequestImplTest###testGetArguments",
        "generated_path": "AgiRequestImplTest###testGetArguments.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetArguments() { System.out.println(\"getArguments\"); AgiRequestImpl instance = new AgiRequestImpl(); String[] result = instance.getArguments(); assertNotNull(result); assertEquals(0, result.length); }\n"
    },
    {
        "original_path": "asterisk-java_asterisk-java###asterisk-java_asterisk-java/src/test/java/org/asteriskjava/live/CallerIdTest###testToString",
        "generated_path": "CallerIdTest###testToString.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testToString() { CallerId callerId = CallerId.valueOf(\"name\", \"number\"); assertEquals(\"name <number>\", callerId.toString()); }\n"
    },
    {
        "original_path": "Azure_azure-functions-java-worker###Azure_azure-functions-java-worker/src/test/java/com/microsoft/azure/functions/worker/broker/tests/CoreTypeResolverTest###testIsValidOutputType",
        "generated_path": "CoreTypeResolverTest###testIsValidOutputType.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testIsValidOutputType() throws Exception { assertTrue(CoreTypeResolver.isValidOutputType(TestOutput.class)); assertTrue(CoreTypeResolver.isValidOutputType(TestOutput.class.getDeclaredMethod(\"test\"))); assertTrue(CoreTypeResolver.isValidOutputType(TestOutput.class.getDeclaredMethod(\"test2\"))); assertTrue(CoreTypeResolver.isValidOutputType(TestOutput.class.getDeclaredMethod(\"test3\"))); assertTrue(CoreTypeResolver.isValidOutputType(TestOutput.class.getDeclaredMethod(\"test4\"))); assertTrue(CoreTypeResolver.isValidOutputType(TestOutput.class.getDeclaredMethod(\"test5\"))); assertTrue(CoreTypeResolver.isValidOutputType(TestOutput.class.getDeclaredMethod(\"test6\"))); assertTrue(CoreTypeResolver.isValidOutputType(TestOutput.class.getDeclaredMethod(\"test7\"))); assertTrue(CoreTypeResolver.isValidOutputType(TestOutput.class.getDeclaredMethod(\"test8\"))); assertTrue(CoreTypeResolver.isValidOutputType(TestOutput.class.getDeclaredMethod(\"test9\"))); assertTrue(CoreTypeResolver.isValidOutputType(TestOutput.class.getDeclaredMethod(\"test8\"))); assertTrue(CoreTypeResolver.isValidOutputType(TestOutput.class.getDeclaredMethod(\"test9\"))); assertTrue(CoreTypeResolver.isValidOutputType(TestOutput.class.getDeclared"
    },
    {
        "original_path": "raydac_java-comment-preprocessor###raydac_java-comment-preprocessor/jcp/src/test/java/com/igormaznitsa/jcp/utils/PreprocessorUtilsTest###testReplaceStringPrefix",
        "generated_path": "PreprocessorUtilsTest###testReplaceStringPrefix.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testReplaceStringPrefix() { final String[] allowedPrefixesToBeReplaced = new String[]{\"a\", \"b\", \"c\"}; final String[] strings = new String[]{\"a\", \"b\", \"c\"}; final String[] result = PreprocessorUtils.replaceStringPrefix(allowedPrefixesToBeReplaced, \"a\", strings); Assert.assertEquals(1, result.length); Assert.assertEquals(\"a\", result[0]); Assert.assertEquals(\"b\", result[1]); Assert.assertEquals(\"c\", result[2]); Assert.assertEquals(\"c\", result[3]); Assert.assertEquals(\"d\", result[4]); Assert.assertEquals(\"d\", result[5]); Assert.assertEquals(\"d\", result[6]); Assert.assertEquals(\"d\", result[7]); Assert.assertEquals(\"d\", result[8]); Assert.assertEquals(\"d\", result[9]); Assert.assertEquals(\"d\", result[10]); Assert.assertEquals(\"d\", result[11]); Assert.assertEquals(\"d\", result[12]); Assert.assertEquals(\"d\", result[13]); Assert.assertEquals(\"d\", result[13]); Assert.assertEquals(\"d\", result[14]); Assert.assertEquals(\"d\", result[15]); Assert.assertEquals(\"d\", result[16]); Assert.assertEquals(\"d\", result[15]); Assert.assertEquals(\"d\", result[16]); Assert.assertEquals(\"d\", result[16]);"
    },
    {
        "original_path": "raydac_java-comment-preprocessor###raydac_java-comment-preprocessor/jcp/src/test/java/com/igormaznitsa/jcp/utils/PreprocessorUtilsTest###testGenerateStringForChar",
        "generated_path": "PreprocessorUtilsTest###testGenerateStringForChar.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGenerateStringForChar() throws Exception { assertEquals(\"abc\", PreprocessorUtils.generateStringForChar('a', 1)); assertEquals(\"abc\", PreprocessorUtils.generateStringForChar('a', 1)); assertEquals(\"abc\", PreprocessorUtils.generateStringForChar('a', 1)); assertEquals(\"abc\", PreprocessorUtils.generateStringForChar('a', 1)); assertEquals(\"abc\", PreprocessorUtils.generateStringForChar('a', 1)); assertEquals(\"abc\", PreprocessorUtils.generateStringForChar('a', 1)); assertEquals(\"abc\", PreprocessorUtils.generateStringForChar('a', 1)); assertEquals(\"abc\", PreprocessorUtils.generateStringForChar('a', 1)); assertEquals(\"abc\", PreprocessorUtils.generateStringForChar('a', 1)); assertEquals(\"abc\", PreprocessorUtils.generateStringForChar('a', 1)); assertEquals(\"abc\", PreprocessorUtils.generateStringForChar('a', 1)); assertEquals(\"abc\", PreprocessorUtils.generateStringForChar('a', 1)); assertEquals(\"abc\", PreprocessorUtils.generateStringForChar('a', 1)); assertEquals(\"abc\", PreprocessorUtils.generateStringForChar('a', 1)); assertEquals(\"abc\", PreprocessorUtils.generateStringForChar('a', 1)); assertEquals(\"abc\", PreprocessorUtils.generateStringForChar('a', 1)); assertEquals(\"abc\", PreprocessorUtils.generateStringForChar('a', 1"
    },
    {
        "original_path": "raydac_java-comment-preprocessor###raydac_java-comment-preprocessor/jcp/src/test/java/com/igormaznitsa/jcp/utils/PreprocessorUtilsTest###testReplacePartByChar",
        "generated_path": "PreprocessorUtilsTest###testReplacePartByChar.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test(expected = IllegalArgumentException.class) public void testReplacePartByChar_startPositionNegative() { PreprocessorUtils.replacePartByChar(\"\", \\'a\\', -1, -1); }\n"
    },
    {
        "original_path": "bpsm_edn-java###bpsm_edn-java/src/test/java/us/bpsm/edn/parser/InstantUtilsTest###testParse",
        "generated_path": "InstantUtilsTest###testParse.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test(expected = EdnSyntaxException.class) public void testInvalidInInstant() { InstantUtils.parse(\"2013-01-01T00:00:00.000Z\"); }\n"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/FavoritesInterfaceTest###testGetContext",
        "generated_path": "FavoritesInterfaceTest###testGetContext.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test(expected = FlickrException.class) public void testGetContextThrowsException() throws FlickrException { Map<String, Object> parameters = new HashMap<String, Object>(); parameters.put(\"method\", METHOD_GET_CONTEXT); parameters.put(\"photo_id\", PHOTO_ID); parameters.put(\"user_id\", USER_ID); Mockito.when(transportAPI.post(Mockito.anyString(), Mockito.anyMap(), Mockito.anyString(), Mockito.anyString())).thenThrow(new FlickrException(\"\")); favoritesInterface.getContext(PHOTO_ID, USER_ID); }\n"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/PhotosInterfaceTest###testGetRecent",
        "generated_path": "PhotosInterfaceTest###testGetRecent.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void getRecent() throws Exception { }\n"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/PoolsInterfaceTest###testGetGroups",
        "generated_path": "PoolsInterfaceTest###testGetGroups.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void getGroups() throws FlickrException { Collection<Group> groups = interfaces.getGroups(); assertNotNull(groups); assertEquals(1, groups.size()); assertEquals(\"1\", groups.iterator().next().getId()); assertEquals(\"1\", groups.iterator().next().getName()); assertEquals(\"1\", groups.iterator().next().getId()); assertEquals(\"1\", groups.iterator().next().getPrivacy()); assertEquals(\"1\", groups.iterator().next().getIconServer()); assertEquals(\"1\", groups.iterator().next().getIconFarm()); assertEquals(\"1\", groups.iterator().next().getId()); assertEquals(\"1\", groups.iterator().next().getName()); assertEquals(\"1\", groups.iterator().next().getIconServer()); assertEquals(\"1\", groups.iterator().next().getIconFarm()); assertEquals(\"1\", groups.iterator().next().getId()); assertEquals(\"1\", groups.iterator().next().getName()); assertEquals(\"1\", groups.iterator().next().getPrivacy()); assertEquals(\"1\", groups.iterator().next().getIconServer()); assertEquals(\"1\", groups.iterator().next().getIconFarm()); assertEquals(\"1\", groups.iterator().next().getPhotoCount()); }\n"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/TagsInterfaceTest###testGetListPhoto",
        "generated_path": "TagsInterfaceTest###testGetListPhoto.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test(expected = FlickrException.class) public void testGetListPhotoThrowsException() throws FlickrException { TagsInterface tagsInterface = new TagsInterface(API_KEY, SHARED_SECRET, transportAPI); tagsInterface.getListPhoto(PHOTO_ID); }\n"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/PlacesInterfaceTest###testGetTopPlacesList",
        "generated_path": "PlacesInterfaceTest###testGetTopPlacesList.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetTopPlacesList() throws FlickrException { PlacesList<Place> placesList = interface.getTopPlacesList(PlaceType.PERSON, new Date(), null, null); assertNotNull(placesList); assertEquals(1, placesList.size()); assertEquals(PlaceType.PERSON, placesList.get(0).getPlaceType()); assertEquals(PlaceType.PERSON, placesList.get(1).getPlaceType()); assertEquals(null, placesList.get(2).getPlaceType()); assertEquals(null, placesList.get(3).getPlaceType()); assertEquals(null, placesList.get(4).getPlaceType()); assertEquals(null, placesList.get(5).getPlaceType()); assertEquals(null, placesList.get(6).getPlaceType()); assertEquals(null, placesList.get(7).getPlaceType()); assertEquals(null, placesList.get(8).getPlaceType()); assertEquals(null, placesList.get(9).getPlaceType()); assertEquals(null, placesList.get(10).getPlaceType()); assertEquals(null, placesList.get(11).getPlaceType()); assertEquals(null, placesList.get(12).getPlaceType()); assertEquals(null, placesList.get(13).getPlaceType()); assertEquals(null, placesList.get(14).getPlaceType()); assertEquals(null, placesList.get(15)."
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/PhotosetsInterfaceTest###testEditPhotos",
        "generated_path": "PhotosetsInterfaceTest###testEditPhotos.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void testEditPhotos() throws Exception { }\n"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/GeoInterfaceTest###testSetLocation",
        "generated_path": "GeoInterfaceTest###testSetLocation.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void setLocation() throws FlickrException { GeoData location = new GeoData(); location.setLatitude(0.0); location.setLongitude(0.0); location.setAccuracy(0.0); geoInterface.setLocation(\"photo_id\", location); }\n"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/MachinetagsInterfaceTest###testGetPredicates",
        "generated_path": "MachinetagsInterfaceTest###testGetPredicates.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void getPredicates() throws FlickrException { NamespacesList<Predicate> predicates = service.getPredicates(\"namespace\", 10, 0); assertNotNull(predicates); assertEquals(10, predicates.getPages()); assertEquals(0, predicates.getPage()); assertEquals(0, predicates.getPerPage()); assertEquals(0, predicates.getPage()); assertEquals(0, predicates.getTotal()); }\n"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/OAuthUtilitiesTest###testCreateOAuthService",
        "generated_path": "OAuthUtilitiesTest###testCreateOAuthService.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testCreateOAuthService() { OAuth10aService service = OAuthUtilities.createOAuthService(\"apiKey\", \"sharedSecret\", null, null); assertNotNull(service); }\n"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/CamerasInterfaceTest###testGetBrands",
        "generated_path": "CamerasInterfaceTest###testGetBrands.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void getBrands() throws FlickrException { }\n"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/TestInterfaceTest###testLogin",
        "generated_path": "TestInterfaceTest###testLogin.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void testLogin() throws Exception { }\n"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/CommonsInterfaceTest###testGetInstitutions",
        "generated_path": "CommonsInterfaceTest###testGetInstitutions.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void getInstitutions() throws FlickrException { }\n"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/TestInterfaceTest###testEcho",
        "generated_path": "TestInterfaceTest###testEcho.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void testEcho() throws Exception { }\n"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/PlacesInterfaceTest###testGetInfoByUrl",
        "generated_path": "PlacesInterfaceTest###testGetInfoByUrl.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test(expected = FlickrException.class) public void testGetInfoByUrl() throws FlickrException { PlacesInterface placesInterface = new PlacesInterface(apiKey, sharedSecret, transportAPI); placesInterface.getInfoByUrl(\"http: }\n"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/PlacesInterfaceTest###testResolvePlaceUrl",
        "generated_path": "PlacesInterfaceTest###testResolvePlaceUrl.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test(expected = FlickrException.class) public void testResolvePlaceURL() throws FlickrException { PlacesInterface placesInterface = new PlacesInterface(apiKey, sharedSecret, transportAPI); placesInterface.resolvePlaceURL(\"http: }\n"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/UrlsInterfaceTest###testLookupGroup",
        "generated_path": "UrlsInterfaceTest###testLookupGroup.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void lookupGroup() throws Exception { }\n"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/PeopleInterfaceTest###testFindByEmail",
        "generated_path": "PeopleInterfaceTest###testFindByEmail.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testFindByEmail() throws FlickrException { User user = peopleInterface.findByEmail(\"test@test.com\"); assertNotNull(user); assertEquals(\"test@test.com\", user.getUsername()); }\n"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/PandaInterfaceTest###testGetList",
        "generated_path": "PandaInterfaceTest###testGetList.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetList() throws FlickrException { ArrayList<Panda> list = pandaInterface.getList(); assertNotNull(list); }\n"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/GalleriesInterfaceTest###testCreate",
        "generated_path": "GalleriesInterfaceTest###testCreate.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testCreate() throws FlickrException { Gallery gallery = galleriesInterface.create(\"title\", \"description\", null); assertEquals(\"title\", gallery.getTitle()); assertEquals(\"description\", gallery.getDescription()); assertEquals(\"primary_photo_id\", gallery.getPrimaryPhotoId()); }\n"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/TagsInterfaceTest###testGetClusterPhotos",
        "generated_path": "TagsInterfaceTest###testGetClusterPhotos.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void getClusterPhotos() throws Exception { }\n"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/PrefsInterfaceTest###testGetGeoPerms",
        "generated_path": "PrefsInterfaceTest###testGetGeoPerms.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetGeoPerms() throws Exception { Map<String, Object> parameters = new HashMap<String, Object>(); parameters.put(\"method\", METHOD_GET_GEO_PERMS); Mockito.when(transportAPI.get(Mockito.anyString(), Mockito.anyMap(), Mockito.anyString(), Mockito.anyString())).thenReturn(new Response(null, null, null)); PrefsInterface prefsInterface = new PrefsInterface(null, null, transportAPI); prefsInterface.getGeoPerms(); Mockito.verify(transportAPI, Mockito.times(1)).get(Mockito.anyString(), Mockito.anyMap(), Mockito.anyString(), Mockito.anyString()); }\n"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/LicensesInterfaceTest###testGetInfo",
        "generated_path": "LicensesInterfaceTest###testGetInfo.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test(expected = FlickrException.class) public void testGetInfoError() throws FlickrException { Mockito.when(transportAPI.get(Mockito.anyString(), Mockito.anyMap(), Mockito.anyString(), Mockito.anyString())).thenThrow(new FlickrException(\"error\")); licensesInterface.getInfo(); }\n"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/PhotosetsInterfaceTest###testGetInfo",
        "generated_path": "PhotosetsInterfaceTest###testGetInfo.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void getInfo() throws Exception { }\n"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/ActivityInterfaceTest###testUserComments",
        "generated_path": "ActivityInterfaceTest###testUserComments.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test(expected = FlickrException.class) public void testUserCommentsThrowsFlickrException() throws FlickrException { ActivityInterface activityInterface = new ActivityInterface(apiKey, sharedSecret, transport); activityInterface.userComments(10, 0); }\n"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/PhotosInterfaceTest###testSetMeta",
        "generated_path": "PhotosInterfaceTest###testSetMeta.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void setMeta() throws Exception { }\n"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/CamerasInterfaceTest###testGetBrandModels",
        "generated_path": "CamerasInterfaceTest###testGetBrandModels.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetBrandModels() throws FlickrException { List<Camera> cameras = camerasInterface.getBrandModels(\"test\"); assertNotNull(cameras); assertEquals(1, cameras.size()); Camera cam1 = cameras.get(0); Camera cam2 = cameras.get(1); assertNotNull(cam2); assertEquals(\"test\", cam1.getName()); assertEquals(\"test\", cam2.getMegapixels().get(0).getName()); assertEquals(\"test\", cam2.getMegapixels().get(1).getName()); assertEquals(\"test\", cam2.getMegapixels().get(2).getName()); assertEquals(\"test\", cam2.getMegapixels().get(3).getName()); assertEquals(\"test\", cam2.getMegapixels().get(4).getName()); assertEquals(\"test\", cam2.getMegapixels().get(5).getName()); assertEquals(\"test\", cam2.getMegapixels().get(6).getName()); assertEquals(\"test\", cam2.getMegapixels().get(7).getName()); assertEquals(\"test\", cam2.getMegapixels().get(8).getName()); assertEquals(\"test\", cam2.getMegapixels().get(9).getName()); assertEquals(\"test\", cam2.getMegapixels().get(10).getName()); assertEquals(\"test\","
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/PeopleInterfaceTest###testGetPublicGroups",
        "generated_path": "PeopleInterfaceTest###testGetPublicGroups.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetPublicGroups() throws FlickrException { Collection<Group> groups = peopleInterface.getPublicGroups(userId); assertNotNull(groups); assertEquals(1, groups.size()); assertEquals(\"1\", groups.iterator().next().getId()); assertEquals(\"1\", groups.iterator().next().getName()); assertEquals(\"1\", groups.iterator().next().getAdmin()); assertEquals(\"1\", groups.iterator().next().getEighteenPlus()); assertEquals(\"1\", groups.iterator().next().getId()); assertEquals(\"1\", groups.iterator().next().getName()); assertEquals(\"1\", groups.iterator().next().getAdmin()); assertEquals(\"1\", groups.iterator().next().getEighteenPlus()); assertEquals(\"1\", groups.iterator().next().getId()); assertEquals(\"1\", groups.iterator().next().getName()); assertEquals(\"1\", groups.iterator().next().getAdmin()); assertEquals(\"1\", groups.iterator().next().getEighteenPlus()); assertEquals(\"1\", groups.iterator().next().getId()); assertEquals(\"1\", groups.iterator().next().getName()); assertEquals(\"1\", groups.iterator().next().getAdmin()); assertEquals(\"1\", groups.iterator().next().getId()); assertEquals(\"1\", groups.iterator().next().getName()); assertEquals(\"1\", groups.iterator().next().getAdmin()); assertEquals(\"1\", groups.iterator().next().getEighteenPlus()); }\n"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/GroupsInterfaceTest###testGetInfo",
        "generated_path": "GroupsInterfaceTest###testGetInfo.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void getInfo() throws FlickrException { GroupsInterface groupsInterface = new GroupsInterface(apiKey, sharedSecret, transportAPI); Group info = groupsInterface.getInfo(\"group_id\"); assertEquals(\"group_id\", info.getId()); assertEquals(\"group_description\", info.getDescription()); assertEquals(\"group_iconfarm\", info.getIconFarm()); assertEquals(\"group_iconserver\", info.getIconServer()); assertEquals(\"group_pool_count\", info.getPoolCount()); assertEquals(\"group_topic_count\", info.getTopicCount()); assertEquals(\"group_privacy\", info.getPrivacy()); assertEquals(\"group_name\", info.getName()); assertEquals(\"group_description\", info.getDescription()); assertEquals(\"group_pool_moderated\", info.getPoolModerated()); assertEquals(\"group_name\", info.getName()); assertEquals(\"group_lang\", info.getLang()); assertEquals(\"group_members\", info.getMembers()); assertEquals(\"group_pool_count\", info.getPoolCount()); assertEquals(\"group_privacy\", info.getPrivacy()); assertEquals(\"group_id\", info.getGroupId()); assertEquals(\"group_id\", info.getId()); assertEquals(\"group_id\", info.getId()); assertEquals(\"group_id\", info.getId()); assertEquals(\"group_id\", info.getId()); assertEquals(\"group_id\", info.getId()); assertEquals(\"group_id\", info.getId());"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/GeoInterfaceTest###testGetLocation",
        "generated_path": "GeoInterfaceTest###testGetLocation.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void getLocation() throws FlickrException { GeoData geoData = geoInterface.getLocation(\"photo_id\"); assertNotNull(geoData); assertEquals(geoData.getLatitude(), \"12.34.34\"); assertEquals(geoData.getLongitude(), \"12.34.34\"); assertEquals(geoData.getAccuracy(), \"0.0\"); assertEquals(geoData.getLocation(), new GeoData(\"12.34.34\", \"0.0\")); assertEquals(geoData.getLocation(), new GeoData(\"12.34.34\", \"0.0\")); assertEquals(geoData.getLocation(), new GeoData(\"12.34.34\", \"0.0\")); assertEquals(geoData.getLocation(), new GeoData(\"12.34.34\", \"0.0\")); assertEquals(geoData.getLocation(), new GeoData(\"12.34.34\", \"0.0\")); assertEquals(geoData.getLocation(), new GeoData(\"12.34.34\", \"0.0\")); assertEquals(geoData.getLocation(), new GeoData(\"12.34.34\", \"0.0\")); assertEquals(geoData.getLocation(), new GeoData(\"12.34.34\", \"0.0\")); assertEquals(geoData.getLocation(), new GeoData(\"12.34.34\", \"0.0\")); assertEquals(geoData.getLocation(), new GeoData(\"12.34"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/PhotosInterfaceTest###testGetUntagged",
        "generated_path": "PhotosInterfaceTest###testGetUntagged.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void testGetUntagged() throws Exception { }\n"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/StatsInterfaceTest###testGetPopularPhotos",
        "generated_path": "StatsInterfaceTest###testGetPopularPhotos.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void getPopularPhotos() throws FlickrException { }\n"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/PhotosInterfaceTest###testGetNotInSet",
        "generated_path": "PhotosInterfaceTest###testGetNotInSet.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void testGetNotInSet() throws Exception { }\n"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/PrefsInterfaceTest###testGetSafetyLevel",
        "generated_path": "PrefsInterfaceTest###testGetSafetyLevel.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test(expected = FlickrException.class) public void testGetSafetyLevelThrowsException() throws FlickrException { Mockito.when(transportAPI.get(Mockito.anyString(), Mockito.anyMap(), Mockito.anyString(), Mockito.anyString())).thenThrow(new FlickrException(\"\")); PrefsInterface prefsInterface = new PrefsInterface(null, null, transportAPI); prefsInterface.getSafetyLevel(); }\n"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/PeopleInterfaceTest###testGetPhotosOf",
        "generated_path": "PeopleInterfaceTest###testGetPhotosOf.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void testGetPhotosOf() throws Exception { }\n"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/GalleriesInterfaceTest###testGetList",
        "generated_path": "GalleriesInterfaceTest###testGetList.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void getList() throws FlickrException { List<Gallery> galleries = galleriesInterface.getList(userId, 100, 0); System.out.println(galleries); }\n"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/TagsInterfaceTest###testGetListUser",
        "generated_path": "TagsInterfaceTest###testGetListUser.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test(expected = FlickrException.class) public void testGetListUserThrowsException() throws FlickrException { TagsInterface tagsInterface = new TagsInterface(API_KEY, SHARED_SECRET, transportAPI); tagsInterface.getListUser(USER_ID); }\n"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/GeoInterfaceTest###testGetPerms",
        "generated_path": "GeoInterfaceTest###testGetPerms.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetPerms() throws FlickrException { GeoPermissions perms = geoInterface.getPerms(\"photo_id\"); assertNotNull(perms); assertTrue(perms.isPublic()); assertTrue(perms.isContact()); assertTrue(perms.isFriend()); assertTrue(perms.isFamily()); assertTrue(perms.isPublic()); assertTrue(perms.isContact()); assertTrue(perms.isFriend()); assertTrue(perms.isFamily()); assertTrue(perms.isPublic()); assertTrue(perms.isContact()); assertTrue(perms.isPublic()); assertTrue(perms.isFamily()); assertTrue(perms.isPublic()); assertTrue(perms.isContact()); assertTrue(perms.isFriend()); assertTrue(perms.isFamily()); assertTrue(perms.isId()); assertTrue(perms.isPublic()); assertTrue(perms.isContact()); assertTrue(perms.isFriend()); assertTrue(perms.isFamily()); assertTrue(perms.isId()); assertTrue(perms.isPublic()); assertTrue(perms.isContact()); assertTrue(perms.isFamily()); assertTrue(perms.isPublic()); assertTrue(perms.isFriend()); assertTrue(perms.isFamily()); assertTrue(perms.isId()); }\n"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/GalleriesInterfaceTest###testGetInfo",
        "generated_path": "GalleriesInterfaceTest###testGetInfo.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void getInfo() throws Exception { }\n"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/PlacesInterfaceTest###testGetInfo",
        "generated_path": "PlacesInterfaceTest###testGetInfo.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetInfo() throws FlickrException { PlacesInterface placesInterface = new PlacesInterface(apiKey, sharedSecret, transportAPI); Location location = placesInterface.getInfo(placeId, woeId); assertNotNull(location); assertEquals(placeId, location.getPlaceId()); assertEquals(woeId, location.getWoeId()); }\n"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/OAuthUtilitiesTest###testBuildMultipartRequest",
        "generated_path": "OAuthUtilitiesTest###testBuildMultipartRequest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testBuildMultipartRequest() throws Exception { Map<String, String> parameters = new HashMap<>(); parameters.put(\"key\", \"value\"); parameters.put(\"key2\", \"value2\"); parameters.put(\"key3\", \"value3\"); parameters.put(\"key4\", \"value4\"); parameters.put(\"key5\", \"value5\"); parameters.put(\"key6\", \"value6\"); parameters.put(\"key7\", \"value7\"); parameters.put(\"key8\", \"value8\"); parameters.put(\"key9\", \"value9\"); parameters.put(\"key9\", \"value9\"); parameters.put(\"key8\", \"value8\"); parameters.put(\"key9\", \"value9\"); parameters.put(\"key8\", \"value8\"); parameters.put(\"key9\", \"value9\"); parameters.put(\"key8\", \"value8\"); parameters.put(\"key8\", \"value8\"); parameters.put(\"key8\", \"value8\"); parameters.put(\"key8\", \"value8\"); parameters.put(\"key8\", \"value8\"); parameters.put(\"key8\", \"value8\"); parameters.put(\"key8\", \"value8\"); parameters.put(\"key8\", \"value8\"); parameters.put(\"key8\", \"value8\"); parameters.put(\"key8\", \"value8\"); parameters.put(\"key8\", \"value8\"); parameters.put(\"key8\", \"value8\"); parameters.put(\"key8\", \"value8"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/PlacesInterfaceTest###testResolvePlaceId",
        "generated_path": "PlacesInterfaceTest###testResolvePlaceId.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test(expected = FlickrException.class) public void testResolvePlaceId() throws FlickrException { PlacesInterface placesInterface = new PlacesInterface(apiKey, sharedSecret, transportAPI); placesInterface.resolvePlaceId(placeId); }\n"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/ContactsInterfaceTest###testGetList",
        "generated_path": "ContactsInterfaceTest###testGetList.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetList() throws FlickrException { ContactList<Contact> contacts = contactsInterface.getList(); assertNotNull(contacts); assertEquals(1, contacts.size()); assertEquals(\"1\", contacts.get(0).getId()); assertEquals(\"1\", contacts.get(0).getUsername()); assertEquals(\"1\", contacts.get(0).getRealName()); assertEquals(\"1\", contacts.get(0).getPathAlias()); assertEquals(\"1\", contacts.get(0).getIconFarm()); assertEquals(\"1\", contacts.get(0).getIconServer()); assertEquals(\"1\", contacts.get(0).getId()); assertEquals(\"1\", contacts.get(0).getUsername()); assertEquals(\"1\", contacts.get(0).getRealName()); assertEquals(\"1\", contacts.get(0).getIconFarm()); assertEquals(\"1\", contacts.get(0).getPathAlias()); assertEquals(\"1\", contacts.get(0).getIconServer()); }\n"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/ActivityInterfaceTest###testUserPhotos",
        "generated_path": "ActivityInterfaceTest###testUserPhotos.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test(expected = FlickrException.class) public void testUserPhotosInvalidTimeframe() throws FlickrException { ActivityInterface activityInterface = new ActivityInterface(apiKey, sharedSecret, transport); activityInterface.userPhotos(0, 0, \"0\"); }\n"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/TagsInterfaceTest###testGetRelated",
        "generated_path": "TagsInterfaceTest###testGetRelated.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetRelated() throws FlickrException { RelatedTagsList tags = tagsInterface.getRelated(\"tag1\"); assertNotNull(tags); assertEquals(\"tag1\", tags.getSource()); assertEquals(\"tag2\", tags.getSource()); assertEquals(\"tag3\", tags.getSource()); assertEquals(\"tag4\", tags.getSource()); assertEquals(\"tag5\", tags.getSource()); assertEquals(\"tag6\", tags.getSource()); assertEquals(\"tag7\", tags.getSource()); assertEquals(\"tag8\", tags.getSource()); assertEquals(\"tag9\", tags.getSource()); assertEquals(\"tag10\", tags.getSource()); assertEquals(\"tag11\", tags.getSource()); assertEquals(\"tag12\", tags.getSource()); }\n"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/UrlsInterfaceTest###testGetUserPhotos",
        "generated_path": "UrlsInterfaceTest###testGetUserPhotos.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetUserPhotos() throws FlickrException { String url = urlsInterface.getUserPhotos(userId); Assert.assertNotNull(url); }\n"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/PlacesInterfaceTest###testPlacesForUser",
        "generated_path": "PlacesInterfaceTest###testPlacesForUser.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void placesForUser() throws FlickrException { PlacesList<Place> placesList = interface.placesForUser(1, null, null, null, null, null, null); assertNotNull(placesList); assertEquals(1, placesList.size()); assertEquals(\"1\", placesList.get(0).getPlaceTypeId()); assertEquals(\"1\", placesList.get(0).getWoeId()); assertEquals(\"1\", placesList.get(0).getMinTakenDate()); assertEquals(\"1\", placesList.get(0).getTotal()); assertEquals(\"1\", placesList.get(0).getPage()); assertEquals(\"1\", placesList.get(0).getPages()); assertEquals(\"1\", placesList.get(0).getPerPage()); assertEquals(\"1\", placesList.get(0).getTotal()); assertEquals(\"1\", placesList.get(0).getPage()); assertEquals(\"1\", placesList.get(0).getPages()); assertEquals(\"1\", placesList.get(0).getPerPage()); assertEquals(\"1\", placesList.get(0).getTotal()); assertEquals(\"1\", placesList.get(0).getPage()); assertEquals(\"1\", placesList.get(0).getTotal()); assertEquals(\"1\", placesList.get(0).getPages()); assertEquals(\"1\", placesList.get(0).getPerPage()); assertEquals(\"1\", placesList.get(0).getTotal()); }\n"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/PhotosInterfaceTest###testGetPerms",
        "generated_path": "PhotosInterfaceTest###testGetPerms.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetPerms() throws FlickrException { Permissions permissions = new Permissions(); permissions.setId(\"1\"); permissions.setFamilyFlag(\"1\"); permissions.setComment(\"comment\"); permissions.setFriendFlag(\"1\"); permissions.setComment(\"comment\"); permissions.setAddmeta(\"addmeta\"); Permissions result = photosInterface.getPerms(\"1\"); assertNotNull(result); assertEquals(\"1\", result.getId()); assertEquals(\"comment\", result.getComment()); assertEquals(\"1\", result.getFamilyFlag()); assertEquals(\"1\", result.getFriendFlag()); assertEquals(\"1\", result.getFamilyFlag()); assertEquals(\"1\", result.getComment()); assertEquals(\"1\", result.getAddmeta()); assertEquals(\"1\", result.getFamilyFlag()); assertEquals(\"1\", result.getFamilyFlag()); assertEquals(\"1\", result.getFamilyFlag()); assertEquals(\"1\", result.getComment()); assertEquals(\"1\", result.getAddmeta()); assertEquals(\"1\", result.getFamilyFlag()); assertEquals(\"1\", result.getFamilyFlag()); assertEquals(\"1\", result.getFamilyFlag()); assertEquals(\"1\", result.getFamilyFlag()); assertEquals(\"1\", result.getComment()); assertEquals(\"1\", result.getAddmeta()); assertEquals(\"1\", result.getFamilyFlag()); assertEquals(\"1\", result.getFamilyFlag()); assertEquals(\"1\", result.getFamilyFlag()); assertEquals(\"1\", result.getFamilyFlag()); assert"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/PeopleInterfaceTest###testGetGroups",
        "generated_path": "PeopleInterfaceTest###testGetGroups.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void testGetGroups() throws Exception { }\n"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/PlacesInterfaceTest###testGetChildrenWithPhotosPublic",
        "generated_path": "PlacesInterfaceTest###testGetChildrenWithPhotosPublic.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void getChildrenWithPhotosPublic() throws FlickrException { PlacesList<Place> places = interface.getChildrenWithPhotosPublic(null, null); assertNotNull(places); assertEquals(1, places.size()); assertEquals(\"1\", places.get(0).getPlaceId()); assertEquals(\"1\", places.get(1).getWoeId()); assertEquals(\"1\", places.get(2).getPlaceId()); assertEquals(\"1\", places.get(3).getPlaceId()); assertEquals(\"1\", places.get(4).getPlaceId()); assertEquals(\"1\", places.get(5).getPlaceId()); assertEquals(\"1\", places.get(6).getPlaceId()); assertEquals(\"1\", places.get(7).getPlaceId()); assertEquals(\"1\", places.get(8).getPlaceId()); assertEquals(\"1\", places.get(9).getPlaceId()); assertEquals(\"1\", places.get(10).getPlaceId()); assertEquals(\"1\", places.get(11).getPlaceId()); assertEquals(\"1\", places.get(12).getPlaceId()); assertEquals(\"1\", places.get(13).getPlaceId()); assertEquals(\"1\", places.get(14).getPlaceId()); assertEquals(\"1\", places.get(15).getPlaceId()); }\n"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/CollectionsInterfaceTest###testGetInfo",
        "generated_path": "CollectionsInterfaceTest###testGetInfo.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void getInfo() throws FlickrException { }\n"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/PhotosInterfaceTest###testGetExif",
        "generated_path": "PhotosInterfaceTest###testGetExif.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void getExifTest() throws Exception { Collection<Exif> exifs = photosInterface.getExif(null, null); assertNotNull(exifs); assertEquals(1, exifs.size()); Exif exif = exifs.iterator().next(); assertNotNull(exif); assertEquals(1, exif.getTagspaceId().intValue()); assertEquals(1, exif.getTagspaceId().intValue()); assertEquals(1, exif.getTagspaceId().intValue()); assertEquals(1, exif.getTagspaceId().intValue()); assertEquals(1, exif.getTagspaceId().intValue()); assertEquals(1, exif.getTagspaceId().intValue()); assertEquals(1, exif.getTagspaceId().intValue()); assertEquals(1, exif.getTagspaceId().intValue()); assertEquals(1, exif.getTagspaceId().intValue()); assertEquals(1, exif.getTagspaceId().intValue()); assertEquals(1, exif.getTagspaceId().intValue()); assertEquals(1, exif.getTagspaceId().intValue()); assertEquals(1, exif.getTagspaceId().intValue()); assertEquals(1, exif.getTagspaceId().intValue()); assertEquals(1, exif.getTagspaceId().intValue()); assertEquals(1, exif.getTagspaceId().intValue()); assertEquals(1, exif.getTagspaceId().intValue()); assertEquals"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/BlogsInterfaceTest###testGetServices",
        "generated_path": "BlogsInterfaceTest###testGetServices.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void getServices() throws FlickrException { Collection<Service> services = blogsInterface.getServices(); assertNotNull(services); }\n"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/PhotosInterfaceTest###testGetContext",
        "generated_path": "PhotosInterfaceTest###testGetContext.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void getContext() throws FlickrException { }\n"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/MachinetagsInterfaceTest###testGetRecentValues",
        "generated_path": "MachinetagsInterfaceTest###testGetRecentValues.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void getRecentValues() throws FlickrException { }\n"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/PlacesInterfaceTest###testPlacesForBoundingBox",
        "generated_path": "PlacesInterfaceTest###testPlacesForBoundingBox.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void placesForBoundingBox() throws FlickrException { PlacesList<Place> placesList = interface.placesForBoundingBox(1, \"10\"); assertNotNull(placesList); assertEquals(1, placesList.size()); assertEquals(\"10\", placesList.get(0).getPlaceTypeId()); assertEquals(\"10\", placesList.get(1).getPlaceTypeId()); assertEquals(\"10\", placesList.get(2).getPlaceTypeId()); assertEquals(\"10\", placesList.get(3).getPlaceTypeId()); assertEquals(\"10\", placesList.get(4).getPlaceTypeId()); assertEquals(\"10\", placesList.get(5).getPlaceTypeId()); assertEquals(\"10\", placesList.get(6).getPlaceTypeId()); assertEquals(\"10\", placesList.get(7).getPlaceTypeId()); assertEquals(\"10\", placesList.get(8).getPlaceTypeId()); assertEquals(\"10\", placesList.get(9).getPlaceTypeId()); assertEquals(\"10\", placesList.get(10).getPlaceTypeId()); assertEquals(\"10\", placesList.get(11).getPlaceTypeId()); assertEquals(\"10\", placesList.get(12).getPlaceTypeId()); assertEquals(\"10\", placesList.get(13).getPlaceTypeId()); assertEquals(\"10\", placesList.get(14).getPlaceTypeId()); assertEquals(\"10\", placesList.get(15).getPlaceTypeId()); assertEquals(\"10\", placesList.get(16).getPlaceTypeId"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/BlogsInterfaceTest###testGetList",
        "generated_path": "BlogsInterfaceTest###testGetList.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetList() throws FlickrException { Collection<Blog> blogs = blogsInterface.getList(); assertNotNull(blogs); }\n"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/OAuthUtilitiesTest###testBuildNormalPostRequest",
        "generated_path": "OAuthUtilitiesTest###testBuildNormalPostRequest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testBuildNormalPostRequest() { Map<String, String> parameters = new HashMap<>(); parameters.put(\"key\", \"value\"); parameters.put(\"secret\", \"secret\"); OAuthRequest request = OAuthUtilities.buildNormalPostRequest(parameters, \"http: assertEquals(\"POST\", request.getVerb()); assertEquals(\"http: assertEquals(\"secret\", request.getBodyParameter(\"key\")); assertEquals(\"value\", request.getBodyParameter(\"secret\")); }\n"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/PhotosInterfaceTest###testSetSafetyLevel",
        "generated_path": "PhotosInterfaceTest###testSetSafetyLevel.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testSetSafetyLevel() throws FlickrException { PhotosInterface photosInterface = new PhotosInterface(apiKey, sharedSecret, transport); photosInterface.setSafetyLevel(photosInterface.getPhotoId(), null, true); }\n"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/CommentsInterfaceTest###testGetList",
        "generated_path": "CommentsInterfaceTest###testGetList.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void getList() throws FlickrException { }\n"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/UrlsInterfaceTest###testLookupGallery",
        "generated_path": "UrlsInterfaceTest###testLookupGallery.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testLookupGallery() throws FlickrException { Gallery gallery = urlsInterface.lookupGallery(GALLERY_ID); assertEquals(GALLERY_ID, gallery.getId()); assertEquals(GALLERY_URL, gallery.getUrl()); assertEquals(GALLERY_ID, gallery.getPrimaryPhotoId()); assertEquals(GALLERY_ID, gallery.getPrimaryPhotoServer()); assertEquals(GALLERY_ID, gallery.getPrimaryPhotoId()); assertEquals(GALLERY_ID, gallery.getPrimaryPhotoId()); assertEquals(GALLERY_ID, gallery.getPrimaryPhotoServer()); assertEquals(GALLERY_ID, gallery.getPrimaryPhotoId()); assertEquals(GALLERY_ID, gallery.getPrimaryPhotoId()); assertEquals(GALLERY_ID, gallery.getPrimaryPhotoServer()); assertEquals(GALLERY_ID, gallery.getPrimaryPhotoId()); assertEquals(GALLERY_ID, gallery.getPrimaryPhotoId()); assertEquals(GALLERY_ID, gallery.getPrimaryPhotoId()); assertEquals(GALLERY_ID, gallery.getPrimaryPhotoServer()); assertEquals(GALLERY_ID, gallery.getPrimaryPhotoId()); assertEquals(GALLERY_ID, gallery.getPrimaryPhotoId()); assertEquals(GALLERY_ID, gallery.getPrimaryPhotoId()); assertEquals(GALLERY_ID, gallery.getPrimaryPhotoId()); assertEquals(GALLERY_ID"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/PhotosInterfaceTest###testSetContentType",
        "generated_path": "PhotosInterfaceTest###testSetContentType.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void setContentType() throws Exception { photosInterface.setContentType(\"id\", \"image/png\"); }\n"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/OAuthUtilitiesTest###testSignRequest",
        "generated_path": "OAuthUtilitiesTest###testSignRequest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testSignRequest() throws Exception { RequestContext.setRequestContext(new RequestContext()); OAuthRequest request = new OAuthRequest(); request.setHeader(\"Authorization\", \"Bearer \" + OAuthConstants.TOKEN_SECRET); OAuthUtilities.signRequest(new OAuth10aService(), request, null); Assert.assertEquals(request.getHeader(\"Proxy-Authorization\"), \"Bearer \" + OAuthConstants.TOKEN_SECRET); }\n"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/StatsInterfaceTest###testGetCsvFiles",
        "generated_path": "StatsInterfaceTest###testGetCsvFiles.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test(expected = FlickrException.class) public void testGetCsvFiles() throws FlickrException { List<Csv> csvFiles = statsInterface.getCsvFiles(); }\n"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/MachinetagsInterfaceTest###testGetNamespaces",
        "generated_path": "MachinetagsInterfaceTest###testGetNamespaces.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test(expected = FlickrException.class) public void testGetNamespacesError() throws FlickrException { Map<String, Object> params = new HashMap<String, Object>(); params.put(\"method\", METHOD_GET_NAMESPACES); params.put(\"predicate\", null); params.put(\"page\", 0); Mockito.when(transportAPI.getPath()).thenReturn(\"/api/v1/namespaces\"); Mockito.when(transportAPI.getPayload()).thenReturn(new Element(\"ns\")); MachinetagsInterface machinetagsInterface = new MachinetagsInterface(null, null, transportAPI); machinetagsInterface.getNamespaces(null, 0, 0); }\n"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/PhotosInterfaceTest###testGetInfo",
        "generated_path": "PhotosInterfaceTest###testGetInfo.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void getInfo() throws Exception { }\n"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/PoolsInterfaceTest###testGetContext",
        "generated_path": "PoolsInterfaceTest###testGetContext.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void getContext() throws FlickrException { PhotoContext photoContext = new PhotoContext(); photoContext.setPreviousPhoto(new Photo()); photoContext.setNextPhoto(new Photo()); photoContext.setPreviousPhoto(new Photo()); photoContext.setNextPhoto(new Photo()); photoContext.setPreviousPhoto(new Photo()); photoContext.setNextPhoto(new Photo()); photoContext.setPreviousPhoto(new Photo()); photoContext.setNextPhoto(new Photo()); photoContext.setPreviousPhoto(new Photo()); photoContext.setNextPhoto(new Photo()); photoContext.setPreviousPhoto(new Photo()); photoContext.setNextPhoto(new Photo()); photoContext.setPreviousPhoto(new Photo()); photoContext.setNextPhoto(new Photo()); photoContext.setPreviousPhoto(new Photo()); photoContext.setNextPhoto(new Photo()); photoContext.setPreviousPhoto(new Photo()); photoContext.setNextPhoto(new Photo()); photoContext.setPreviousPhoto(new Photo()); photoContext.setNextPhoto(new Photo()); photoContext.setNextPhoto(new Photo()); photoContext.setPreviousPhoto(new Photo()); photoContext.setNextPhoto(new Photo()); photoContext.setPreviousPhoto(new Photo()); photoContext.setNextPhoto(new Photo()); photoContext.setPreviousPhoto(new Photo()); photoContext.setNextPhoto(new Photo()); photoContext.setNextPhoto(new Photo()); photoContext.setPreviousPhoto(new Photo()); photoContext.setNextPhoto(new Photo"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/FavoritesInterfaceTest###testGetList",
        "generated_path": "FavoritesInterfaceTest###testGetList.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void testGetList() throws Exception { }\n"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/PlacesInterfaceTest###testPlacesForTags",
        "generated_path": "PlacesInterfaceTest###testPlacesForTags.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testPlacesForTags() throws FlickrException { PlacesList<Place> places = interface.placesForTags(1, null, null, null, null, null, null, null, null, null); assertNotNull(places); assertEquals(1, places.size()); assertEquals(1, places.get(0).getPlaceTypeId()); assertEquals(1, places.get(0).getTags().length); assertEquals(1, places.get(0).getTagMode()); assertEquals(1, places.get(0).getMinUploadDate().getTime()); assertEquals(1, places.get(0).getMaxUploadDate().getTime()); assertEquals(1, places.get(0).getMinTakenDate().getTime()); assertEquals(1, places.get(0).getTotal()); assertEquals(1, places.get(0).getPage()); assertEquals(\"1\", places.get(0).getPerPage()); assertEquals(1, places.get(0).getTotal()); assertEquals(1, places.get(0).getPage()); assertEquals(\"1\", places.get(0).getPages()); assertEquals(\"1\", places.get(0).getTotal()); }\n"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/PrefsInterfaceTest###testGetHidden",
        "generated_path": "PrefsInterfaceTest###testGetHidden.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test(expected = FlickrException.class) public void testGetHiddenThrowsException() throws Exception { when(transportAPI.get(anyString(), anyMap(), anyString(), anyString())).thenThrow(new FlickrException(\"\")); new PrefsInterface(null, null, transportAPI).getHidden(); }\n"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/GroupsInterfaceTest###testSearch",
        "generated_path": "GroupsInterfaceTest###testSearch.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testSearch() throws FlickrException { GroupsInterface groupsInterface = new GroupsInterface(apiKey, sharedSecret, transportAPI); Collection<Group> groups = groupsInterface.search(TEXT, PER_PAGE, PAGE); Assert.assertNotNull(groups); Assert.assertEquals(PER_PAGE, groups.size()); Assert.assertEquals(PAGE, groups.get(0).getPage()); Assert.assertEquals(PAGE, groups.get(1).getPage()); Assert.assertEquals(PER_PAGE, groups.get(2).getPage()); Assert.assertEquals(PAGE, groups.get(3).getPage()); Assert.assertEquals(PER_PAGE, groups.get(4).getPage()); Assert.assertEquals(PER_PAGE, groups.get(5).getPage()); Assert.assertEquals(PER_PAGE, groups.get(6).getPage()); Assert.assertEquals(PER_PAGE, groups.get(7).getPage()); Assert.assertEquals(PER_PAGE, groups.get(8).getPage()); Assert.assertEquals(PER_PAGE, groups.get(9).getPage()); Assert.assertEquals(PER_PAGE, groups.get(10).getPage()); Assert.assertEquals(PER_PAGE, groups.get(11).getPage()); Assert.assertEquals(PER_PAGE, groups.get(11).getPerPage()); Assert.assertEquals(TOTAL, groups.get(11).getTotal()); }\n"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/ContactsInterfaceTest###testGetPublicList",
        "generated_path": "ContactsInterfaceTest###testGetPublicList.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetPublicList() throws FlickrException { Collection<Contact> contacts = contactsInterface.getPublicList(userId); assertNotNull(contacts); assertEquals(1, contacts.size()); assertEquals(userId, contacts.iterator().next().getUserId()); assertEquals(userId, contacts.iterator().next().getUserId()); }\n"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/PhotosInterfaceTest###testGetCounts",
        "generated_path": "PhotosInterfaceTest###testGetCounts.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetCounts() throws Exception { Date[] dates = new Date[] { new Date(0), new Date(1), new Date(2), new Date(3), new Date(4), new Date(5), new Date(6), new Date(7), new Date(8), new Date(9), new Date(10), new Date(11), new Date(12), new Date(13), new Date(14), new Date(14), new Date(14), new Date(14), new Date(14), new Date(14), new Date(14), new Date(14), new Date(14), new Date(14), new Date(14), new Date(14), new Date(14), new Date(14), new Date(14), new Date(14), new Date(14), new Date(14), new Date(14), new Date(14), new Date(14), new Date(14), new Date(14), new Date(14), new Date(14), new Date(14), new Date(14), new Date(14), new Date(14), new Date(14), new Date(14), new Date(14), new Date(14), new Date(14), new Date(14), new Date(14), new Date(14), new Date(14), new Date(14), new Date(14), new Date(14), new Date(14), new Date(14), new Date(14), new Date(14), new Date(14"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/TagsInterfaceTest###testGetHotList",
        "generated_path": "TagsInterfaceTest###testGetHotList.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetHotList() throws FlickrException { Collection<HotlistTag> hotList = tagsInterface.getHotList(Period.WEEK, 1); assertNotNull(hotList); assertEquals(1, hotList.size()); assertEquals(Period.WEEK, hotList.get(0).getPeriod()); assertEquals(1, hotList.get(1).getCount()); assertEquals(1, hotList.get(2).getPeriod()); assertEquals(1, hotList.get(3).getCount()); assertEquals(1, hotList.get(4).getCount()); assertEquals(1, hotList.get(5).getPeriod()); assertEquals(1, hotList.get(6).getCount()); assertEquals(1, hotList.get(7).getCount()); assertEquals(1, hotList.get(8).getPeriod()); assertEquals(1, hotList.get(9).getCount()); assertEquals(1, hotList.get(10).getCount()); assertEquals(1, hotList.get(11).getCount()); assertEquals(1, hotList.get(11).getCount()); assertEquals(1, hotList.get(11).getCount()); assertEquals(1, hotList.get(11).getCount()); assertEquals(1, hotList.get(11).getCount()); }\n"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/PhotosInterfaceTest###testSetTags",
        "generated_path": "PhotosInterfaceTest###testSetTags.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testSetTags() throws FlickrException { String[] tags = new String[] { \"tag1\", \"tag2\" }; photosInterface.setTags(\"photo_id\", tags); }\n"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/PhotosetsInterfaceTest###testOrderSets",
        "generated_path": "PhotosetsInterfaceTest###testOrderSets.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testOrderSets() throws FlickrException { String[] photosetIds = new String[]{\"1\", \"2\", \"3\"}; photosetsInterface.orderSets(photosetIds); }\n"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/PeopleInterfaceTest###testGetInfo",
        "generated_path": "PeopleInterfaceTest###testGetInfo.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void getInfo() throws FlickrException { User user = peopleInterface.getInfo(userId); System.out.println(user.getId()); System.out.println(user.getDescription()); System.out.println(user.getMbox_sha1sum()); System.out.println(user.getPhotosFirstDateTaken()); System.out.println(user.getPhotosCount()); System.out.println(user.getPhotosFirstDateTaken()); System.out.println(user.getPhotosLastDateTaken()); System.out.println(user.getPhotosCount()); System.out.println(user.getPhotosLastDateTaken()); System.out.println(user.getPhotosLastDateTaken()); System.out.println(user.getPhotosLastDateTaken()); System.out.println(user.getPhotosLastDateTaken()); System.out.println(user.getPhotosLastDateTaken()); System.out.println(user.getPhotosLastDateTaken()); System.out.println(user.getPhotosLastDateTaken()); System.out.println(user.getPhotosLastDateTaken()); System.out.println(user.getPhotosLastDateTaken()); System.out.println(user.getPhotosLastDateTaken()); System.out.println(user.getPhotosLastDateTaken()); System.out.println(user.getPhotosLastDateTaken()); System.out.println(user.get"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/PandaInterfaceTest###testGetPhotos",
        "generated_path": "PandaInterfaceTest###testGetPhotos.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetPhotos() throws FlickrException { PandaInterface pandaInterface = new PandaInterface(apiKey, sharedSecret, transportAPI); PhotoList<Photo> photos = pandaInterface.getPhotos(panda, null, 0, 0); assertNotNull(photos); assertEquals(1, photos.size()); Photo photo = photos.get(0); assertNotNull(photo); assertEquals(panda.getName(), photo.getName()); }\n"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/PeopleInterfaceTest###testGetPhotos",
        "generated_path": "PeopleInterfaceTest###testGetPhotos.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test(expected = FlickrException.class) public void testGetPhotos() throws FlickrException { PeopleInterface peopleInterface = new PeopleInterface(apiKey, sharedSecret, transportAPI); photosInterface.getPhotos(userId, safeSearch, minUploadDate, maxUploadDate, minTakenDate, maxTakenDate, contentType, privacyFilter, null, 0, 0); }\n"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/PeopleInterfaceTest###testFindByUsername",
        "generated_path": "PeopleInterfaceTest###testFindByUsername.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testFindByUsername() throws FlickrException { User user = peopleInterface.findByUsername(USERNAME); assertNotNull(user); assertEquals(USERNAME, user.getUsername()); }\n"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/UrlsInterfaceTest###testLookupUser",
        "generated_path": "UrlsInterfaceTest###testLookupUser.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testLookupUser() throws FlickrException { String url = \"http: UrlsInterface urlsInterface = new UrlsInterface(apiKey, sharedSecret, transportAPI); String result = urlsInterface.lookupUser(url); assertEquals(url, result); }\n"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/FavoritesInterfaceTest###testGetPublicList",
        "generated_path": "FavoritesInterfaceTest###testGetPublicList.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test(expected = FlickrException.class) public void testGetPublicListError() throws FlickrException { Mockito.when(transportAPI.get(Mockito.anyString(), Mockito.anyMap(), Mockito.anyString())).thenThrow(new FlickrException(\"error\")); photosInterface.getPublicList(\"123\", 10, 0, null); }\n"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/PlacesInterfaceTest###testPlacesForContacts",
        "generated_path": "PlacesInterfaceTest###testPlacesForContacts.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void placesForContacts() throws FlickrException { PlacesList<Place> places = interface.placesForContacts(1, null, null, null); assertNotNull(places); assertEquals(1, places.size()); assertEquals(\"1\", places.get(0).getPlaceTypeId()); assertEquals(\"1\", places.get(0).getWoeId()); assertEquals(\"1\", places.get(0).getThreshold()); assertEquals(\"1\", places.get(0).getTotal()); assertEquals(\"1\", places.get(0).getPage()); assertEquals(\"1\", places.get(0).getPages()); assertEquals(\"1\", places.get(0).getPerPage()); assertEquals(\"1\", places.get(0).getTotal()); }\n"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/PrefsInterfaceTest###testGetContentType",
        "generated_path": "PrefsInterfaceTest###testGetContentType.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test(expected = FlickrException.class) public void testGetContentTypeThrowsException() throws FlickrException { String contentType = \"text/plain\"; Response response = new Response(); response.setError(true); response.setPayload(new Element(contentType)); Mockito.when(transportAPI.get(Mockito.anyString(), Mockito.anyMap(), Mockito.anyString(), Mockito.anyString())).thenReturn(response); PrefsInterface prefsInterface = new PrefsInterface(null, null, transportAPI); prefsInterface.getContentType(); }\n"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/UrlsInterfaceTest###testGetUserProfile",
        "generated_path": "UrlsInterfaceTest###testGetUserProfile.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetUserProfile() throws FlickrException { String url = urlsInterface.getUserProfile(userId); Assert.assertNotNull(url); }\n"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/MachinetagsInterfaceTest###testGetPairs",
        "generated_path": "MachinetagsInterfaceTest###testGetPairs.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void testGetPairs() throws FlickrException { }\n"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/PlacesInterfaceTest###testGetPlaceTypes",
        "generated_path": "PlacesInterfaceTest###testGetPlaceTypes.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void testGetPlaceTypes() throws FlickrException { }\n"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/CommentsInterfaceTest###testGetRecentForContacts",
        "generated_path": "CommentsInterfaceTest###testGetRecentForContacts.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void getRecentForContacts() throws FlickrException { }\n"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/MembersInterfaceTest###testGetList",
        "generated_path": "MembersInterfaceTest###testGetList.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetList() throws FlickrException { MembersList<Member> members = new MembersList<Member>(); members.add(new Member()); members.add(new Member()); members.add(new Member()); members.add(new Member()); members.add(new Member()); members.add(new Member()); members.add(new Member()); members.add(new Member()); members.add(new Member()); members.add(new Member()); members.add(new Member()); members.add(new Member()); members.add(new Member()); members.add(new Member()); members.add(new Member()); members.add(new Member()); members.add(new Member()); members.add(new Member()); members.add(new Member()); members.add(new Member()); members.add(new Member()); members.add(new Member()); members.add(new Member()); members.add(new Member()); members.add(new Member()); members.add(new Member()); members.add(new Member()); members.add(new Member()); members.add(new Member()); members.add(new Member()); members.add(new Member()); members.add(new Member()); members.add(new Member()); members.add(new Member()); members.add(new Member()); members.add(new Member()); members.add(new Member()); members.add(new Member()); members.add(new Member()); members.add(new Member()); members.add(new Member()); members.add(new"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/StatsInterfaceTest###testGetTotalViews",
        "generated_path": "StatsInterfaceTest###testGetTotalViews.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test(expected = FlickrException.class) public void testGetTotalViewsNullDate() throws FlickrException { statsInterface.getTotalViews(null); }\n"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/UrlsInterfaceTest###testGetGroup",
        "generated_path": "UrlsInterfaceTest###testGetGroup.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetGroup() throws FlickrException { String groupId = \"1\"; String url = urlsInterface.getGroup(groupId); Assert.assertEquals(groupId, url); }\n"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/PeopleInterfaceTest###testGetUploadStatus",
        "generated_path": "PeopleInterfaceTest###testGetUploadStatus.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetUploadStatus() throws FlickrException { User user = peopleInterface.getUploadStatus(); assertNotNull(user); assertEquals(\"1\", user.getId()); assertEquals(\"1\", user.getUsername()); assertEquals(\"1\", user.getBandwidthMax()); assertEquals(\"1\", user.getBandwidthUsed()); assertEquals(\"1\", user.getIsBandwidthUnlimited()); assertEquals(\"1\", user.getVideoSizeMax()); }\n"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/MachinetagsInterfaceTest###testGetValues",
        "generated_path": "MachinetagsInterfaceTest###testGetValues.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void getValues() throws FlickrException { }\n"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/PhotosInterfaceTest###testGetContactsPhotos",
        "generated_path": "PhotosInterfaceTest###testGetContactsPhotos.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void testGetContactsPhotos() throws Exception { }\n"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/PhotosetsInterfaceTest###testGetContext",
        "generated_path": "PhotosetsInterfaceTest###testGetContext.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void getContext() throws Exception { }\n"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/ReflectionInterfaceTest###testGetMethods",
        "generated_path": "ReflectionInterfaceTest###testGetMethods.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test(expected = FlickrException.class) public void testGetMethodsThrowsException() throws FlickrException { ReflectionInterface reflectionInterface = new ReflectionInterface(API_KEY, SHARED_SECRET, transport); ReflectionInterface.METHOD_GET_METHODS.getMethods(); }\n"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/PhotosInterfaceTest###testSearch",
        "generated_path": "PhotosInterfaceTest###testSearch.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void testSearch() throws Exception { }\n"
    },
    {
        "original_path": "boncey_Flickr4Java###boncey_Flickr4Java/src/test/java/com/flickr4java/flickr/test/PlacesInterfaceTest###testTagsForPlace",
        "generated_path": "PlacesInterfaceTest###testTagsForPlace.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testTagsForPlace() throws FlickrException { ArrayList<Tag> tags = interface.tagsForPlace(null, null, null, null, null, null); assertNotNull(tags); assertEquals(1, tags.size()); assertEquals(\"tag1\", tags.get(0).getValue()); assertEquals(\"tag2\", tags.get(1).getValue()); assertEquals(\"tag3\", tags.get(2).getValue()); assertEquals(\"tag4\", tags.get(3).getValue()); assertEquals(\"tag5\", tags.get(4).getValue()); assertEquals(\"tag6\", tags.get(5).getValue()); assertEquals(\"tag7\", tags.get(6).getValue()); assertEquals(\"tag8\", tags.get(7).getValue()); assertEquals(\"tag9\", tags.get(8).getValue()); }\n"
    },
    {
        "original_path": "blinkfox_zealot###blinkfox_zealot/src/test/java/com/blinkfox/zealot/test/helpers/ParseHelperTest###testParseExpressWithException",
        "generated_path": "ParseHelperTest###testParseExpressWithException.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testParseExpressWithException() { System.out.println(\"parseExpressWithException\"); String exp = \"\"; Object paramObj = null; try { exp = ParseHelper.parseExpressWithException(exp, paramObj); } catch (ParseExpressionException e) { e.printStackTrace(); } }\n"
    },
    {
        "original_path": "hypercube1024_firefly###hypercube1024_firefly/firefly-net/src/test/java/com/fireflysource/net/http/common/v2/hpack/HpackContextTest###testResize",
        "generated_path": "HpackContextTest###testResize.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testResize() { HpackContext context = new HpackContext(10); context.resize(10); assertEquals(10, context.size()); assertEquals(10, context.getDynamicTableSize()); assertEquals(10, context.getDynamicTableSizeInBytes()); assertEquals(10, context.getDynamicTableSizeInBytes()); assertEquals(10, context.getDynamicTableSizeInBytes()); assertEquals(10, context.getDynamicTableSizeInBytes()); assertEquals(10, context.getDynamicTableSizeInBytes()); assertEquals(10, context.getDynamicTableSizeInBytes()); assertEquals(10, context.getDynamicTableSizeInBytes()); assertEquals(10, context.getDynamicTableSizeInBytes()); assertEquals(10, context.getDynamicTableSizeInBytes()); assertEquals(10, context.getDynamicTableSizeInBytes()); assertEquals(10, context.getDynamicTableSizeInBytes()); assertEquals(10, context.getDynamicTableSizeInBytes()); assertEquals(10, context.getDynamicTableSizeInBytes()); assertEquals(10, context.getDynamicTableSizeInBytes()); assertEquals(10, context.getDynamicTableSizeInBytes()); assertEquals(10, context.getDynamicTableSizeInBytes()); assertEquals(10, context.getDynamicTableSizeInBytes()); assertEquals(10, context.getDynamicTableSizeInBytes()); assertEquals(10, context.getDynamicTableSizeInBytes()); assertEquals(10, context.getDynamicTableSizeInBytes()); assertEquals(10, context.getDynamicTableSize"
    },
    {
        "original_path": "jroyalty_jglm###jroyalty_jglm/src/test/java/com/hackoeur/jglm/Vec3Test###testGetUnitVector",
        "generated_path": "Vec3Test###testGetUnitVector.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetUnitVector() { Vec3 vec = new Vec3(1, 2, 3); Vec3 unitVector = vec.getUnitVector(); assertEquals(\"unit vector\", new Vec3(1, 2, 3), unitVector); }\n"
    },
    {
        "original_path": "jroyalty_jglm###jroyalty_jglm/src/test/java/com/hackoeur/jglm/MatricesTest###testOrtho2d",
        "generated_path": "MatricesTest###testOrtho2d.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testOrtho2d() { Mat4 matrix = Matrices.ortho2d(0, 1, 2, 3); assertEquals(0, matrix.getM00(), 0); assertEquals(0, matrix.getM11(), 0); assertEquals(0, matrix.getM22(), 0); assertEquals(0, matrix.getM30(), 0); assertEquals(0, matrix.getM31(), 0); assertEquals(0, matrix.getM30(), 0); assertEquals(0, matrix.getM22(), 0); assertEquals(0, matrix.getM31(), 0); assertEquals(0, matrix.getM30(), 0); assertEquals(0, matrix.getM22(), 0); assertEquals(0, matrix.getM31(), 0); assertEquals(0, matrix.getM30(), 0); assertEquals(0, matrix.getM31(), 0); assertEquals(0, matrix.getM22(), 0); assertEquals(0, matrix.getM31(), 0); assertEquals(0, matrix.getM30(), 0); assertEquals(0, matrix.getM31(), 0); assertEquals(0, matrix.getM22(), 0); assertEquals(0, matrix.getM31(), 0); }\n"
    },
    {
        "original_path": "jroyalty_jglm###jroyalty_jglm/src/test/java/com/hackoeur/jglm/Mat3Test###testGetColumns",
        "generated_path": "Mat3Test###testGetColumns.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetColumns() { Vec3 col0 = new Vec3(0, 1, 2, 3); Vec3 col1 = new Vec3(0, 1, 2); Vec3 col2 = new Vec3(0, 1, 3); Vec3 col3 = new Vec3(0, 1, 2); Vec3 col4 = new Vec3(0, 1, 3); Vec3 col5 = new Vec3(0, 1, 2); Vec3 col6 = new Vec3(0, 1, 2); Vec3 col7 = new Vec3(0, 1, 2); Vec3 col8 = new Vec3(0, 1, 2); Vec3 col9 = new Vec3(0, 1, 2); Vec3 col10 = new Vec3(0, 1, 2); Vec3 col11 = new Vec3(0, 1, 2); Vec3 col12 = new Vec3(0, 1, 2); Vec3 col20 = new Vec3(0, 1, 2); Vec3 col21 = new Vec3(0, 1, 2); Vec3 col22 = new Vec3(0, 1, 2); Mat3 mat3 = new Mat3(col0, col1, col2); mat3.getColumns().add(col0); mat3.getColumns().add(col1); mat3.getColumns().add(col2); mat3.getColumns().add(col3); assertEquals(mat3"
    },
    {
        "original_path": "jroyalty_jglm###jroyalty_jglm/src/test/java/com/hackoeur/jglm/MatricesTest###testLookAt",
        "generated_path": "MatricesTest###testLookAt.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testLookAt() throws Exception { Vec3 eye = new Vec3(0, 0, 0); Vec3 center = new Vec3(0, 0, 0); Vec3 up = new Vec3(0, 0, 0); Mat4 matrix = Matrices.lookAt(eye, center, up); assertEquals(matrix.getX(), 0); assertEquals(matrix.getY(), 0); assertEquals(matrix.getZ(), 0); assertEquals(matrix.getZ(), 0); assertEquals(matrix.getX(), 0); assertEquals(matrix.getY(), 0); assertEquals(matrix.getZ(), 0); assertEquals(matrix.getX(), 0); assertEquals(matrix.getY(), 0); assertEquals(matrix.getZ(), 0); assertEquals(matrix.getZ(), 0); assertEquals(matrix.getX(), 0); assertEquals(matrix.getY(), 0); assertEquals(matrix.getZ(), 0); assertEquals(matrix.getZ(), 0); assertEquals(matrix.getX(), 0); assertEquals(matrix.getY(), 0); assertEquals(matrix.getZ(), 0); assertEquals(matrix.getZ(), 0); assertEquals(matrix.getX(), 0); assertEquals(matrix.getY(), 0); assertEquals(matrix.getZ(), 0); assertEquals(matrix.getZ(), 0); }\n"
    },
    {
        "original_path": "jroyalty_jglm###jroyalty_jglm/src/test/java/com/hackoeur/jglm/MatricesTest###testRotate",
        "generated_path": "MatricesTest###testRotate.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testRotate() throws Exception { Vec3 a = new Vec3(0, 0, 0); Vec3 b = new Vec3(0, 0, 0); Mat4 m = Matrices.rotate(0, a); Vec4 v1 = m.getV1(); Vec4 v2 = m.getV2(); Vec4 v3 = m.getV3(); Vec4 v4 = m.getV4(); Vec4 v42 = m.getV4(); Vec4 v43 = m.getV4(); Vec4 v44 = m.getV4(); Vec4 v442 = m.getV4(); Vec4 v443 = m.getV4(); Vec4 v444 = m.getV4(); Vec4 v444 = m.getV4(); Vec4 v444 = m.getV4(); Vec4 v442 = m.getV4(); Vec4 v444 = m.getV4(); Vec4 v442 = m.getV4(); Vec4 v443 = m.getV4(); Vec4 v4444 = m.getV4(); Vec4 v444 = m.getV4(); Vec4 v444 = m.getV4(); Vec4 v444 = m.getV4(); Vec4 v442 = m.getV4(); Vec4 v4"
    },
    {
        "original_path": "jroyalty_jglm###jroyalty_jglm/src/test/java/com/hackoeur/jglm/Mat4Test###testTranslate",
        "generated_path": "Mat4Test###testTranslate.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testTranslate() throws Exception { Vec3 translation = new Vec3(1, 2, 3, 4, 5); Mat4 result = MAT4_IDENTITY.translate(translation); assertTrue(result.equals(new Mat4(1.0f, 2.0f, 3.0f, 4.0f, 5.0f, 6.0f, 4.0f, 5.0f, 6.0f, 5.0f, 6.0f, 6.0f, 6.0f, 6.0f, 6.0f, 6.0f, 6.0f, 6.0f, 6.0f, 6.0f, 6.0f, 6.0f, 6.0f, 6.0f, 6.0f, 6.0f, 6.0f, 6.0f, 6.0f, 6.0f, 6.0f, 6.0f, 6.0f, 6.0f, 6.0f, 6.0f, 6.0f, 6.0f, 6.0f, 6.0f, 6.0f, 6.0f, 6.0f, 6.0f, 6.0f, 6.0f, 6.0f, 6.0f, 6.0f, 6.0f, 6.0f, 6.0f, 6.0f,"
    },
    {
        "original_path": "jroyalty_jglm###jroyalty_jglm/src/test/java/com/hackoeur/jglm/MatricesTest###testPerspective",
        "generated_path": "MatricesTest###testPerspective.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testPerspective() throws Exception { Mat4 matrix = Matrices.perspective(1.0f, 2.0f, 3.0f, 4.0f); assertEquals(4.0f, matrix.getX(), 0f); assertEquals(4.0f, matrix.getY(), 0f); assertEquals(4.0f, matrix.getZ(), 0f); matrix = Matrices.perspective(1.0f, 2.0f, 4.0f, 4.0f); assertEquals(4.0f, matrix.getX(), 0f); assertEquals(4.0f, matrix.getY(), 0f); matrix = Matrices.perspective(1.0f, 2.0f, 4.0f, 4.0f); assertEquals(4.0f, matrix.getX(), 0f); assertEquals(4.0f, matrix.getZ(), 0f); matrix = Matrices.perspective(1.0f, 2.0f, 4.0f, 4.0f); assertEquals(4.0f, matrix.getX(), 0f); assertEquals(4.0f, matrix.getY(), 0f); matrix = Matrices.perspective(1.0f, 2.0f, 4.0f, 4.0f); assertEquals(4.0f, matrix.getZ(), 0f); matrix = Matrices."
    },
    {
        "original_path": "jroyalty_jglm###jroyalty_jglm/src/test/java/com/hackoeur/jglm/MatricesTest###testOrtho",
        "generated_path": "MatricesTest###testOrtho.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testOrtho() throws Exception { Vec3 a = new Vec3(0, 0, 1); Vec3 b = new Vec3(0, 1); Vec3 c = new Vec3(0, 1); Mat4 matrix = Matrices.ortho(a, b, c, 0, 1); assertEquals(a, matrix); }\n"
    },
    {
        "original_path": "jroyalty_jglm###jroyalty_jglm/src/test/java/com/hackoeur/jglm/Mat4Test###testGetColumns",
        "generated_path": "Mat4Test###testGetColumns.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetColumns() throws Exception { Mat4 mat = new Mat4(new Vec3(0, 0, 0, 0, 0), new Vec3(0, 0, 0, 0, 0), new Vec3(0, 0, 0, 0, 0), new Vec3(0, 0, 0, 0, 0)); assertEquals(4, mat.getColumns().size()); assertEquals(new Vec4(0, 0, 0, 0), mat.getColumns().iterator().next()); assertEquals(new Vec4(0, 0, 0, 0), mat.getColumns().iterator().next()); assertEquals(new Vec4(0, 0, 0, 0), mat.getColumns().iterator().next()); assertEquals(new Vec4(0, 0, 0, 0), mat.getColumns().iterator().next()); assertEquals(new Vec4(0, 0, 0, 0), mat.getColumns().iterator().next()); assertEquals(new Vec4(0, 0, 0, 0), mat.getColumns().iterator().next()); assertEquals(new Vec4(0, 0, 0, 0), mat.getColumns().iterator().next()); assertEquals(new Vec4(0, 0, 0, 0), mat.getColumns().iterator().next()); assertEquals(new Vec4(0, 0, 0, 0), mat.getColumns().iterator().next()); assertEquals(new Vec4(0, 0, 0, 0),"
    },
    {
        "original_path": "CycloneDX_cyclonedx-core-java###CycloneDX_cyclonedx-core-java/src/test/java/org/cyclonedx/util/BomUtilsTest###calculateHashesTest",
        "generated_path": "BomUtilsTest###calculateHashesTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testCalculateHashes() throws IOException { final File file = new File(getClass().getResource(\"/bom-utils/test-files/test-1.2.txt\").toURI()); final CycloneDxSchema.Version version = CycloneDxSchema.Version.parse(\"1.2\"); final List<Hash> hashes = BomUtils.calculateHashes(file, version); Assert.assertEquals(1, hashes.size()); Assert.assertTrue(hashes.get(0).equals(new Hash(DigestUtils.getSha3_384Digest(), Hex.encodeHexString(DigestUtils.getSha3_256Digest())))); Assert.assertTrue(hashes.get(1).equals(new Hash(DigestUtils.getSha3_512Digest(), Hex.encodeHexString(DigestUtils.getSha3_512Digest()))); Assert.assertTrue(hashes.get(2).equals(new Hash(DigestUtils.getSha3_384Digest(), Hex.encodeHexString(DigestUtils.getSha3_256Digest())))); Assert.assertTrue(hashes.get(3).equals(new Hash(DigestUtils.getSha3_512Digest(), Hex.encodeHexString(DigestUtils.getSha3_512Digest())))); Assert.assertTrue(hashes.get(4).equals(new Hash(DigestUtils.getSha3_512Digest(), Hex.encodeHexString(DigestUtils.getSha3_512Digest()))); }\n"
    },
    {
        "original_path": "IMSGlobal_basiclti-util-java###IMSGlobal_basiclti-util-java/src/test/java/org/imsglobal/lti/BasicLTIUtilTest###testGetRealPath",
        "generated_path": "BasicLTIUtilTest###testGetRealPath.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetRealPath() { HttpServletRequest request = mock(HttpServletRequest.class); String extUrl = \"http: String result = BasicLTIUtil.getRealPath(request, extUrl); Assert.assertEquals(result, \"http: }\n"
    },
    {
        "original_path": "MagicTheGathering_mtg-sdk-java###MagicTheGathering_mtg-sdk-java/src/test/java/io/magicthegathering/javasdk/api/SetAPITest###testGetSet",
        "generated_path": "SetAPITest###testGetSet.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetSet() throws Exception { MtgSet set = SetAPI.getSet(\"123\"); Assert.assertNotNull(set); Assert.assertEquals(123, set.getId()); }\n"
    },
    {
        "original_path": "MagicTheGathering_mtg-sdk-java###MagicTheGathering_mtg-sdk-java/src/test/java/io/magicthegathering/javasdk/api/SetAPITest###testGetAllSetsWithCards",
        "generated_path": "SetAPITest###testGetAllSetsWithCards.java",
        "Compile_result": 1,
        "Test_result": 0,
        "Gen_Test": "@Test public void getAllSetsWithCards() throws Exception { List<MtgSet> sets = SetAPI.getAllSetsWithCards(); assertEquals(2, sets.size()); assertEquals(\"set1\", sets.get(0).getCode()); assertEquals(\"set2\", sets.get(1).getCode()); assertEquals(\"set3\", sets.get(2).getCode()); assertEquals(\"set4\", sets.get(3).getCode()); assertEquals(\"set5\", sets.get(4).getCode()); assertEquals(\"set6\", sets.get(5).getCode()); assertEquals(\"set7\", sets.get(6).getCode()); assertEquals(\"set8\", sets.get(7).getCode()); assertEquals(\"set9\", sets.get(8).getCode()); assertEquals(\"set10\", sets.get(10).getCode()); }\n"
    },
    {
        "original_path": "perwendel_spark###perwendel_spark/src/test/java/spark/utils/SparkUtilsTest###testConvertRouteToList",
        "generated_path": "SparkUtilsTest###testConvertRouteToList.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testConvertRouteToList() { List<String> path = SparkUtils.convertRouteToList(\"/foo/bar\"); Assert.assertEquals(1, path.size()); Assert.assertEquals(\"/foo/bar\", path.get(0)); Assert.assertEquals(\"/foo/bar\", path.get(1)); Assert.assertEquals(\"/foo/bar\", path.get(2)); Assert.assertEquals(\"/foo/bar\", path.get(3)); Assert.assertEquals(\"/foo/bar\", path.get(4)); Assert.assertEquals(\"/foo/bar\", path.get(5)); Assert.assertEquals(\"/foo/bar\", path.get(6)); Assert.assertEquals(\"/foo/bar\", path.get(7)); Assert.assertEquals(\"/foo/bar\", path.get(8)); Assert.assertEquals(\"/foo/bar\", path.get(9)); Assert.assertEquals(\"/foo/bar\", path.get(10)); Assert.assertEquals(\"/foo/bar\", path.get(11)); Assert.assertEquals(\"/foo/bar\", path.get(12)); Assert.assertEquals(\"/foo/bar\", path.get(13)); Assert.assertEquals(\"/foo/bar\", path.get(14)); Assert.assertEquals(\"/foo/bar\", path.get(15)); Assert.assertEquals(\"/foo/bar\", path.get(16)); Assert.assertEquals(\"/foo"
    },
    {
        "original_path": "perwendel_spark###perwendel_spark/src/test/java/spark/embeddedserver/jetty/SocketConnectorFactoryTest###testCreateSocketConnector",
        "generated_path": "SocketConnectorFactoryTest###testCreateSocketConnector.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test(expected = IllegalArgumentException.class) public void testNullHost() { SocketConnectorFactory.createSocketConnector(null, \"localhost\", 8080, false); }\n"
    },
    {
        "original_path": "perwendel_spark###perwendel_spark/src/test/java/spark/embeddedserver/jetty/SocketConnectorFactoryTest###testCreateSecureSocketConnector",
        "generated_path": "SocketConnectorFactoryTest###testCreateSecureSocketConnector.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test(expected = IllegalArgumentException.class) public void testNullSslStores() { SocketConnectorFactory.createSecureSocketConnector(null, \"localhost\", 8080, new SslStores(), false); }\n"
    },
    {
        "original_path": "perwendel_spark###perwendel_spark/src/test/java/spark/utils/MimeParseTest###testBestMatch",
        "generated_path": "MimeParseTest###testBestMatch.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testBestMatch() throws Exception { Collection<String> supported = new ArrayList<>(); String mime = MimeParse.bestMatch(supported, \"text/html,application/xhtml+xml,application/xml;q=0.9,application/xml;q=0.9,application/xml;q=0.9,application/xml;q=0.9,application/xml;q=0.9,application/xml;q=0.9,application/xml;q=0.9,application/xml;q=0.9,application/xml;q=0.9,application/xml;q=0.9,application/xml;q=0.9,application/xml;q=0.9,application/xml;q=0.9,application/xml;q=0.9,application/xml;q=0.9,application/xml;q=0.9,application/xml;q=0.9,application/xml;q=0.9,application/xml;q=0.9,application/xml;q=0.9,application/xml;q=0.9,application/xml;q=0.9,application/xml;q=0.9,application/xml;q=0.9,application/xml;q=0.9,application/xml;q=0.9,application/xml;q=0.9,application/xml;q"
    },
    {
        "original_path": "perwendel_spark###perwendel_spark/src/test/java/spark/SessionTest###testAttributes",
        "generated_path": "SessionTest###testAttributes.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testAttributes() throws Exception { Set<String> attributes = session.attributes(); assertEquals(1, attributes.size()); assertEquals(\"a\", attributes.iterator().next()); assertEquals(\"b\", attributes.iterator().next()); assertEquals(\"c\", attributes.iterator().next()); assertEquals(\"d\", attributes.iterator().next()); assertEquals(\"e\", attributes.iterator().next()); assertEquals(\"f\", attributes.iterator().next()); assertEquals(\"g\", attributes.iterator().next()); assertEquals(\"g\", attributes.iterator().next()); assertEquals(\"h\", attributes.iterator().next()); assertEquals(\"i\", attributes.iterator().next()); assertEquals(\"j\", attributes.iterator().next()); assertEquals(\"i\", attributes.iterator().next()); assertEquals(\"f\", attributes.iterator().next()); assertEquals(\"g\", attributes.iterator().next()); assertEquals(\"e\", attributes.iterator().next()); assertEquals(\"f\", attributes.iterator().next()); assertEquals(\"g\", attributes.iterator().next()); assertEquals(\"g\", attributes.iterator().next()); assertEquals(\"h\", attributes.iterator().next()); assertEquals(\"i\", attributes.iterator().next()); assertEquals(\"i\", attributes.iterator().next()); assertEquals(\"i\", attributes.iterator().next()); assertEquals(\"i\", attributes.iterator().next()); assertEquals(\"i\", attributes.iterator().next()); }\n"
    },
    {
        "original_path": "hyperledger_fabric-sdk-java###hyperledger_fabric-sdk-java/src/test/java/org/hyperledger/fabric/sdk/security/CryptoPrimitivesTest###testVerify",
        "generated_path": "CryptoPrimitivesTest###testVerify.java",
        "Compile_result": 1,
        "Test_result": 0,
        "Gen_Test": "@Test(expected = CryptoException.class) public void testVerifyNullCertificate() throws Exception { CryptoPrimitives cryptoPrimitives = new CryptoPrimitives(); assertFalse(cryptoPrimitives.verify(null, null, null, null)); }\n"
    },
    {
        "original_path": "hyperledger_fabric-sdk-java###hyperledger_fabric-sdk-java/src/test/java/org/hyperledger/fabric/sdk/helper/UtilsTest###testGenerateParameterHash",
        "generated_path": "UtilsTest###testGenerateParameterHash.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGenerateParameterHash() throws Exception { List<String> args = new ArrayList<>(); args.add(\"foo\"); args.add(\"bar\"); args.add(\"baz\"); String hash = Utils.generateParameterHash(\"/path\", \"foo\", args); assertEquals(Hex.toHexString(hash), \"f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f"
    },
    {
        "original_path": "hyperledger_fabric-sdk-java###hyperledger_fabric-sdk-java/src/test/java/org/hyperledger/fabric/sdk/OrdererTest###testSetChannel",
        "generated_path": "OrdererTest###testSetChannel.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testSetChannel() throws Exception { Orderer orderer = new Orderer(); try { orderer.setChannel(null); } catch (InvalidArgumentException e) { Assert.fail(e.getMessage()); } try { orderer.setChannel(new Channel()); } catch (InvalidArgumentException e) { Assert.fail(e.getMessage()); } try { orderer.setChannel(new Channel()); } catch (InvalidArgumentException e) { Assert.fail(e.getMessage()); } try { orderer.setChannel(new Channel()); } catch (InvalidArgumentException e) { Assert.fail(e.getMessage()); } try { orderer.setChannel(new Channel()); } catch (InvalidArgumentException e) { Assert.fail(e.getMessage()); } try { orderer.setChannel(new Channel()); } catch (InvalidArgumentException e) { Assert.fail(e.getMessage()); } try { orderer.setChannel(new Channel()); } catch (InvalidArgumentException e) { Assert.fail(e.getMessage()); } try { orderer.setChannel(new Channel()); } catch (InvalidArgumentException e) { Assert.fail(e.getMessage()); } try { orderer.setChannel(new Channel()); } catch (InvalidArgumentException e) { Assert.fail(e.getMessage()); } try { orderer.setChannel(new Channel()); } catch (InvalidArgumentException e) { Assert.fail(e.getMessage()); } }\n"
    },
    {
        "original_path": "hyperledger_fabric-sdk-java###hyperledger_fabric-sdk-java/src/test/java/org/hyperledger/fabric/sdk/helper/UtilsTest###testGenerateNonce",
        "generated_path": "UtilsTest###testGenerateNonce.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGenerateNonce() throws Exception { byte[] nonce = Utils.generateNonce(); Assert.assertNotNull(nonce); Assert.assertEquals(Utils.NONONCE_LENGTH, nonce.length); }\n"
    },
    {
        "original_path": "hyperledger_fabric-sdk-java###hyperledger_fabric-sdk-java/src/test/java/org/hyperledger/fabric_ca/sdk/HFCAClientTest###testAddCAToURL",
        "generated_path": "HFCAClientTest###testAddCAToURL.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testAddCAToURL() throws Exception { HFCAClient hfca = new HFCAClient(); String url = \"hfca: assertEquals(url, hfca.addCAToURL(url)); url = \"hfca: assertEquals(url, hfca.addCAToURL(url)); url = \"hfca: assertEquals(url, hfca.addCAToURL(url)); url = \"hfca: assertEquals(url, hfca.addCAToURL(url)); url = \"hfca: assertEquals(url, hfca.addCAToURL(url)); url = \"hfca: assertEquals(url, hfca.addCAToURL(url)); url = \"hfca: assertEquals(url, hfca.addCAToURL(url)); url = \"hfca: assertEquals(url, hfca.addCAToURL(url)); url = \"hfca: assertEquals(url, hfca.addCAToURL(url)); url = \"hfca: assertEquals(url, hfca.addCAToURL(url)); url = \"hfca: assertEquals(url, hfca.addCAToURL(url)); url = \"hfca: assertEquals(url, hfca.addCAToURL(url)); url = \"hfca: assertEquals(url, hf"
    },
    {
        "original_path": "hyperledger_fabric-sdk-java###hyperledger_fabric-sdk-java/src/test/java/org/hyperledger/fabric/sdk/helper/UtilsTest###testParseGrpcUrl",
        "generated_path": "UtilsTest###testParseGrpcUrl.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testParseGrpcUrl() { try { Utils.parseGrpcUrl(\"grpc: } catch (RuntimeException e) { assertEquals(\"Invalid protocol expected grpc or grpcs and found grpc: \" + e.getMessage(), e.getMessage()); } }\n"
    },
    {
        "original_path": "hyperledger_fabric-sdk-java###hyperledger_fabric-sdk-java/src/test/java/org/hyperledger/fabric/sdk/helper/UtilsTest###testHash",
        "generated_path": "UtilsTest###testHash.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testHash() throws Exception { Digest digest = new Digest(DigestAlgorithm.SHA1); byte[] bytes = Utils.hash(new byte[0], digest); Assert.assertArrayEquals(new byte[0], bytes); Assert.assertArrayEquals(new byte[0], bytes); Assert.assertArrayEquals(new byte[0], bytes); Assert.assertArrayEquals(new byte[0], bytes); Assert.assertArrayEquals(new byte[0], bytes); Assert.assertArrayEquals(new byte[0], bytes); Assert.assertArrayEquals(new byte[0], bytes); Assert.assertArrayEquals(new byte[0], bytes); Assert.assertArrayEquals(new byte[0], bytes); Assert.assertArrayEquals(new byte[0], bytes); Assert.assertArrayEquals(new byte[0], bytes); Assert.assertArrayEquals(new byte[0], bytes); Assert.assertArrayEquals(new byte[0], bytes); Assert.assertArrayEquals(new byte[0], bytes); Assert.assertArrayEquals(new byte[0], bytes); Assert.assertArrayEquals(new byte[0], bytes); Assert.assertArrayEquals(new byte[0], bytes); Assert.assertArrayEquals(new byte[0], bytes); Assert.assertArrayEquals(new byte[0], bytes); Assert.assertArrayEquals(new byte[0], bytes); Assert.assertArrayEquals(new byte[0], bytes); Assert.assertArrayEquals(new byte"
    },
    {
        "original_path": "hyperledger_fabric-sdk-java###hyperledger_fabric-sdk-java/src/test/java/org/hyperledger/fabric/sdk/helper/UtilsTest###testLogString",
        "generated_path": "UtilsTest###testLogString.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testLogString() throws Exception { assertEquals(\"\", Utils.logString(null)); assertEquals(\"\", Utils.logString(\"\")); assertEquals(\"\", Utils.logString(\"\")); assertEquals(\"\", Utils.logString(\"\")); assertEquals(\"\", Utils.logString(\" \")); assertEquals(\"\", Utils.logString(\" \")); assertEquals(\"\", Utils.logString(\" \")); assertEquals(\"\", Utils.logString(\" \")); assertEquals(\"\", Utils.logString(\" \")); assertEquals(\"\", Utils.logString(\" \")); assertEquals(\"\", Utils.logString(\" \")); assertEquals(\"\", Utils.logString(\" \")); assertEquals(\"\", Utils.logString(\" \")); assertEquals(\"\", Utils.logString(\" \")); assertEquals(\"\", Utils.logString(\" \")); assertEquals(\"\", Utils.logString(\" \")); assertEquals(\"\", Utils.logString(\" \")); assertEquals(\"\", Utils.logString(\" \")); assertEquals(\"\", Utils.logString(\" \")); assertEquals(\"\", Utils.logString(\" \")); assertEquals(\"\", Utils.logString(\" \")); assertEquals(\"\", Utils.logString(\" \")); assertEquals(\"\", Utils.logString(\" \")); assertEquals(\"\", Utils.logString(\" \")); assertEquals(\"\", Utils.logString(\" \")); assertEquals(\"\", Utils.logString(\" \")); assertEquals(\"\", Utils.logString(\" \")); }\n"
    },
    {
        "original_path": "hyperledger_fabric-sdk-java###hyperledger_fabric-sdk-java/src/test/java/org/hyperledger/fabric/sdk/helper/UtilsTest###testGenerateTarGz",
        "generated_path": "UtilsTest###testGenerateTarGz.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGenerateTarGz() throws Exception { byte[] bytes = Utils.generateTarGz(new File(\"src/test/resources/chaincode/chaincode-metadata.tar\"), null, null); assertArrayEquals(bytes, new String(bytes)); }\n"
    },
    {
        "original_path": "jqno_equalsverifier###jqno_equalsverifier/equalsverifier-core/src/test/java/nl/jqno/equalsverifier/internal/prefabvalues/TypeTagTest###testToString",
        "generated_path": "TypeTagTest###testToString.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testToString() throws Exception { assertThat(new TypeTag(String.class).toString()).isEqualTo(\"String\"); assertThat(new TypeTag(Integer.class).toString()).isEqualTo(\"Integer\"); assertThat(new TypeTag(Integer.class).toString()).isEqualTo(\"Integer\"); assertThat(new TypeTag(Integer.class).toString()).isEqualTo(\"Integer\"); assertThat(new TypeTag(Integer.class).toString()).isEqualTo(\"Integer\"); assertThat(new TypeTag(Integer.class).toString()).isEqualTo(\"Integer\"); assertThat(new TypeTag(Integer.class).toString()).isEqualTo(\"Integer\"); assertThat(new TypeTag(Integer.class).toString()).isEqualTo(\"Integer\"); assertThat(new TypeTag(Integer.class).toString()).isEqualTo(\"Integer\"); assertThat(new TypeTag(Integer.class).toString()).isEqualTo(\"Integer\"); assertThat(new TypeTag(Integer.class).toString()).isEqualTo(\"Integer\"); assertThat(new TypeTag(Integer.class).toString()).isEqualTo(\"Integer\"); assertThat(new TypeTag(Integer.class).toString()).isEqualTo(\"Integer\"); assertThat(new TypeTag(Integer.class).toString()).isEqualTo(\"Integer\"); assertThat(new TypeTag(Integer.class).toString()).isEqualTo(\"Integer\"); assertThat(new TypeTag(Integer"
    },
    {
        "original_path": "fabric8io_docker-maven-plugin###fabric8io_docker-maven-plugin/src/test/java/io/fabric8/maven/docker/service/JibBuildServiceTest###testPrependRegistry",
        "generated_path": "JibBuildServiceTest###testPrependRegistry.java",
        "Compile_result": 1,
        "Test_result": 0,
        "Gen_Test": "@Test public void prependRegistry() throws Exception { ImageConfiguration imageConfig = new ImageConfiguration(); imageConfig.setName(\"image1\"); imageConfig.setRegistry(\"registry1\"); ImageConfiguration result = JibBuildService.prependRegistry(imageConfig, \"registry1\"); assertEquals(\"registry1/image1\", result.getName()); assertEquals(\"registry1/image1\", result.getRegistry()); }\n"
    },
    {
        "original_path": "fabric8io_docker-maven-plugin###fabric8io_docker-maven-plugin/src/test/java/io/fabric8/maven/docker/service/JibBuildServiceTest###testGetAssemblyTarArchive",
        "generated_path": "JibBuildServiceTest###testGetAssemblyTarArchive.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void getAssemblyTarArchive() throws Exception { final File image = JibBuildService.getAssemblyTarArchive(new ImageConfiguration(\"image\", \"image.xml\"), serviceHub, mojoParameters, log); Assert.assertNotNull(image); Assert.assertTrue(image.exists()); Assert.assertTrue(image.canRead()); Assert.assertTrue(image.canWrite()); Assert.assertTrue(image.canRead()); Assert.assertTrue(image.canRead()); Assert.assertTrue(image.canRead()); Assert.assertTrue(image.canRead()); Assert.assertTrue(image.canRead()); Assert.assertTrue(image.canRead()); Assert.assertTrue(image.canRead()); Assert.assertTrue(image.canRead()); Assert.assertTrue(image.canRead()); Assert.assertTrue(image.canRead()); Assert.assertTrue(image.canRead()); Assert.assertTrue(image.canRead()); Assert.assertTrue(image.canRead()); Assert.assertTrue(image.canRead()); Assert.assertTrue(image.canRead()); Assert.assertTrue(image.canRead()); Assert.assertTrue(image.canRead()); Assert.assertTrue(image.canRead()); Assert.assertTrue(image.canRead()); Assert.assertTrue(image.canRead()); Assert.assertTrue(image.canRead()); Assert.assertTrue(image.canRead()); Assert.assertTrue(image.canRead()); Assert.assertTrue("
    },
    {
        "original_path": "fabric8io_docker-maven-plugin###fabric8io_docker-maven-plugin/src/test/java/io/fabric8/maven/docker/access/ContainerCreateConfigTest###testEnvironment",
        "generated_path": "ContainerCreateConfigTest###testEnvironment.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testEnvironment() { Map<String, String> env = new HashMap<String, String>(); Map<String, String> mavenProps = new HashMap<String, String>(); mavenProps.put(\"maven.version\", \"1.0.0\"); env.put(\"maven.name\", \"maven\"); env.put(\"maven.version\", \"1.0.0\"); ContainerCreateConfig config = new ContainerCreateConfig(\"imageName\", \"platform\"); config.environment(null, env, mavenProps); Assert.assertEquals(\"imageName\", config.getImageName()); Assert.assertEquals(\"platform\", config.getPlatform()); Assert.assertEquals(\"maven.version\", config.getVersion()); Assert.assertEquals(\"1.0.0\", config.getMavenVersion()); Assert.assertEquals(\"maven.version\", config.getMavenVersion()); Assert.assertEquals(\"maven.version\", config.getMavenVersion()); Assert.assertEquals(\"maven.version\", config.getMavenVersion()); Assert.assertEquals(\"maven.version\", config.getMavenVersion()); Assert.assertEquals(\"maven.version\", config.getMavenVersion()); Assert.assertEquals(\"maven.version\", config.getMavenVersion()); Assert.assertEquals(\"maven.version\", config.getMavenVersion()); Assert.assertEquals(\"maven.version\", config.getMavenVersion()); Assert.assertEquals(\"maven.version"
    },
    {
        "original_path": "twitter_twitter-korean-text###twitter_twitter-korean-text/src/test/java/com/twitter/penguin/korean/TwitterKoreanProcessorJavaTest###testTokensToJavaStringList",
        "generated_path": "TwitterKoreanProcessorJavaTest###testTokensToJavaStringList.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testTokensToJavaStringList() { List<String> output = TwitterKoreanProcessorJava.tokensToJavaStringList(tokens, true); Assert.assertEquals(2, output.size()); Assert.assertEquals(\"a\", output.get(0)); Assert.assertEquals(\"b\", output.get(1)); Assert.assertEquals(\"c\", output.get(2)); Assert.assertEquals(\"d\", output.get(3)); Assert.assertEquals(\"e\", output.get(4)); Assert.assertEquals(\"f\", output.get(5)); Assert.assertEquals(\"g\", output.get(6)); Assert.assertEquals(\"h\", output.get(7)); Assert.assertEquals(\"h\", output.get(8)); Assert.assertEquals(\"h\", output.get(9)); Assert.assertEquals(\"g\", output.get(10)); Assert.assertEquals(\"g\", output.get(11)); Assert.assertEquals(\"e\", output.get(12)); Assert.assertEquals(\"f\", output.get(13)); Assert.assertEquals(\"g\", output.get(14)); Assert.assertEquals(\"g\", output.get(15)); Assert.assertEquals(\"g\", output.get(16)); Assert.assertEquals(\"g\", output.get(17)); Assert.assertEquals(\"g\", output.get(18)); Assert.assertEquals(\"g\", output.get(19)); Assert.assertEquals(\"g\", output.get(19"
    },
    {
        "original_path": "twitter_twitter-korean-text###twitter_twitter-korean-text/src/test/java/com/twitter/penguin/korean/TwitterKoreanProcessorJavaTest###testTokensToJavaKoreanTokenList",
        "generated_path": "TwitterKoreanProcessorJavaTest###testTokensToJavaKoreanTokenList.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testTokensToJavaKoreanTokenList() { List<KoreanToken> tokens = TwitterKoreanProcessorJava.tokensToJavaKoreanTokenList(tokens, true); Assert.assertEquals(tokens.size(), 1); Assert.assertEquals(tokens.get(0).text(), \"test\"); Assert.assertEquals(tokens.get(1).text(), \"test\"); Assert.assertEquals(tokens.get(2).text(), \"test\"); Assert.assertEquals(tokens.get(3).text(), \"test\"); Assert.assertEquals(tokens.get(4).text(), \"test\"); Assert.assertEquals(tokens.get(5).text(), \"test\"); Assert.assertEquals(tokens.get(6).text(), \"test\"); Assert.assertEquals(tokens.get(7).text(), \"test\"); Assert.assertEquals(tokens.get(8).text(), \"test\"); Assert.assertEquals(tokens.get(9).text(), \"test\"); Assert.assertEquals(tokens.get(10).text(), \"test\"); Assert.assertEquals(tokens.get(11).text(), \"test\"); Assert.assertEquals(tokens.get(12).text(), \"test\"); Assert.assertEquals(tokens.get(13).text(), \"test\"); Assert.assertEquals(tokens.get(14).text(), \"test\"); Assert.assertEquals(tokens.get(15).text(), \"test\"); Assert.assertEquals(tokens."
    },
    {
        "original_path": "networknt_json-schema-validator###networknt_json-schema-validator/src/test/java/com/networknt/schema/SpecVersionTest###testGetVersionValue",
        "generated_path": "SpecVersionTest###testGetVersionValue.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetVersionValue() { Set<VersionFlag> flags = new HashSet<VersionFlag>(); flags.add(new VersionFlag(0)); flags.add(new VersionFlag(1)); flags.add(new VersionFlag(2)); flags.add(new VersionFlag(3)); flags.add(new VersionFlag(4)); flags.add(new VersionFlag(5)); flags.add(new VersionFlag(6)); flags.add(new VersionFlag(7)); flags.add(new VersionFlag(8)); flags.add(new VersionFlag(9)); flags.add(new VersionFlag(10)); flags.add(new VersionFlag(11)); flags.add(new VersionFlag(12)); flags.add(new VersionFlag(13)); flags.add(new VersionFlag(14)); flags.add(new VersionFlag(15)); flags.add(new VersionFlag(16)); flags.add(new VersionFlag(17)); flags.add(new VersionFlag(18)); flags.add(new VersionFlag(18)); flags.add(new VersionFlag(18)); flags.add(new VersionFlag(18)); flags.add(new VersionFlag(18)); flags.add(new VersionFlag(18)); flags.add(new VersionFlag(18)); flags.add(new VersionFlag(18)); flags.add(new VersionFlag(18)); flags.add(new VersionFlag(18)); flags.add(new VersionFlag(18)); flags.add("
    },
    {
        "original_path": "networknt_json-schema-validator###networknt_json-schema-validator/src/test/java/com/networknt/schema/SpecVersionTest###testGetVersionFlags",
        "generated_path": "SpecVersionTest###testGetVersionFlags.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetVersionFlags() { SpecVersion version = new SpecVersion(); EnumSet<VersionFlag> versionFlags = version.getVersionFlags(1); assertEquals(1, versionFlags.size()); assertTrue(versionFlags.contains(VersionFlag.VERSION_1)); assertTrue(versionFlags.contains(VersionFlag.VERSION_2)); assertTrue(versionFlags.contains(VersionFlag.VERSION_3)); assertTrue(versionFlags.contains(VersionFlag.VERSION_4)); assertTrue(versionFlags.contains(VersionFlag.VERSION_5)); assertTrue(versionFlags.contains(VersionFlag.VERSION_6)); assertTrue(versionFlags.contains(VersionFlag.VERSION_7)); assertTrue(versionFlags.contains(VersionFlag.VERSION_8)); assertTrue(versionFlags.contains(VersionFlag.VERSION_9)); assertTrue(versionFlags.contains(VersionFlag.VERSION_10)); assertTrue(versionFlags.contains(VersionFlag.VERSION_11)); assertTrue(versionFlags.contains(VersionFlag.VERSION_12)); assertTrue(versionFlags.contains(VersionFlag.VERSION_13)); assertTrue(versionFlags.contains(VersionFlag.VERSION_14)); }\n"
    },
    {
        "original_path": "NanoHttpd_nanohttpd###NanoHttpd_nanohttpd/core/src/test/java/org/nanohttpd/junit/protocols/http/CookieTest###testGetHTTPTime",
        "generated_path": "CookieTest###testGetHTTPTime.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetHTTPTime() throws Exception { System.out.println(\"getHTTPTime\"); int days = 1; String expResult = \"2019-01-01T00:00:00.000Z\"; String result = Cookie.getHTTPTime(days); assertEquals(expResult, result); }\n"
    },
    {
        "original_path": "j256_ormlite-core###j256_ormlite-core/src/test/java/com/j256/ormlite/misc/BaseDaoEnabledTest###testExtractId",
        "generated_path": "BaseDaoEnabledTest###testExtractId.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void testExtractId() throws Exception { }\n"
    },
    {
        "original_path": "j256_ormlite-core###j256_ormlite-core/src/test/java/com/j256/ormlite/table/TableUtilsTest###testClearTable",
        "generated_path": "TableUtilsTest###testClearTable.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testClearTable() throws Exception { ConnectionSource connectionSource = mock(ConnectionSource.class); DatabaseTableConfig tableConfig = mock(DatabaseTableConfig.class); when(connectionSource.getDatabaseType()).thenReturn(DatabaseType.MySQL); when(connectionSource.getDatabaseType()).thenReturn(DatabaseType.MySQL); when(connectionSource.getDatabaseType()).thenReturn(DatabaseType.MySQL); when(connectionSource.getDatabaseType()).thenReturn(DatabaseType.MySQL); when(connectionSource.getDatabaseType()).thenReturn(DatabaseType.MySQL); when(connectionSource.getDatabaseType()).thenReturn(DatabaseType.MySQL); when(connectionSource.getDatabaseType()).thenReturn(DatabaseType.MySQL); when(connectionSource.getDatabaseType()).thenReturn(DatabaseType.MySQL); when(connectionSource.getDatabaseType()).thenReturn(DatabaseType.MySQL); when(connectionSource.getDatabaseType()).thenReturn(DatabaseType.MySQL); when(connectionSource.getDatabaseType()).thenReturn(DatabaseType.MySQL); when(connectionSource.getDatabaseType()).thenReturn(DatabaseType.MySQL); when(connectionSource.getDatabaseType()).thenReturn(DatabaseType.MySQL); int result = TableUtils.clearTable(connectionSource, tableConfig); assertEquals(0, result); verify(connectionSource, times(1)).getDatabaseType(); verify(connectionSource, times(1)).get"
    },
    {
        "original_path": "j256_ormlite-core###j256_ormlite-core/src/test/java/com/j256/ormlite/dao/BaseDaoImplTest###testCreateIfNotExists",
        "generated_path": "BaseDaoImplTest###testCreateIfNotExists.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void testCreateIfNotExists() throws Exception { }\n"
    },
    {
        "original_path": "j256_ormlite-core###j256_ormlite-core/src/test/java/com/j256/ormlite/table/TableUtilsTest###testDropTable",
        "generated_path": "TableUtilsTest###testDropTable.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testDropTable() throws Exception { ConnectionSource connectionSource = mock(ConnectionSource.class); DatabaseTableConfig<TestData> tableConfig = mock(DatabaseTableConfig.class); when(connectionSource.getDatabaseType()).thenReturn(DatabaseType.MySQL); when(connectionSource.getDatabaseName()).thenReturn(\"test\"); when(connectionSource.getDatabaseType()).thenReturn(DatabaseType.MySQL); when(connectionSource.getDatabaseType()).thenReturn(DatabaseType.MySQL); int result = TableUtils.dropTable(connectionSource, tableConfig, true); verify(connectionSource, times(1)).getDatabaseType(); verify(connectionSource, times(1)).getDatabaseName(); verify(connectionSource, times(1)).getDatabaseType(); verify(connectionSource, times(1)).getDatabaseType(); verify(connectionSource, times(1)).getDatabaseName(); verify(connectionSource, times(1)).getDatabaseType(); verify(connectionSource, times(1)).getDatabaseName(); verify(connectionSource, times(1)).getDatabaseType(); verify(connectionSource, times(1)).getDatabaseName(); verify(connectionSource, times(1)).getDatabaseName(); verify(connectionSource, times(1)).getDatabaseType(); verify(connectionSource, times(1)).getDatabaseType(); verify(connectionSource, times(1)).getDatabaseName(); verify(connectionSource, times(1)"
    },
    {
        "original_path": "j256_ormlite-core###j256_ormlite-core/src/test/java/com/j256/ormlite/dao/BaseDaoImplTest###testUpdate",
        "generated_path": "BaseDaoImplTest###testUpdate.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void update() throws Exception { }\n"
    },
    {
        "original_path": "j256_ormlite-core###j256_ormlite-core/src/test/java/com/j256/ormlite/dao/BaseDaoImplTest###testIsTableExists",
        "generated_path": "BaseDaoImplTest###testIsTableExists.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void testIsTableExists() throws Exception { }\n"
    },
    {
        "original_path": "j256_ormlite-core###j256_ormlite-core/src/test/java/com/j256/ormlite/stmt/StatementBuilderTest###testPrepareStatementInfo",
        "generated_path": "StatementBuilderTest###testPrepareStatementInfo.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void prepareStatementInfo() throws Exception { StatementBuilder<String, Integer> sut = new StatementBuilder<String, Integer>(DatabaseType.MySQL, new TableInfo<String, Integer>(DatabaseType.MySQL, new TableInfo<String, Integer>(DatabaseType.MySQL, new TableInfo<String, Integer>(DatabaseType.MySQL, new TableInfo<String, Integer>(DatabaseType.MySQL, new TableInfo<String, Integer>(DatabaseType.MySQL, new TableInfo<String, Integer>(DatabaseType.MySQL, new TableInfo<String, Integer>(DatabaseType.MySQL, new TableInfo<String, Integer>(DatabaseType.MySQL, new TableInfo<String, Integer>(DatabaseType.MySQL, new TableInfo<String, Integer>(DatabaseType.MySQL, new TableInfo<String, Integer>(DatabaseType.MySQL, new TableInfo<String, Integer>(DatabaseType.MySQL, new TableInfo<String, Integer>(DatabaseType.MySQL, new TableInfo<String, Integer>(DatabaseType.MySQL, new TableInfo<String, Integer>(DatabaseType.MySQL, new TableInfo<String, Integer>(DatabaseType.MySQL, new TableInfo<String, Integer>(DatabaseType.MySQL, new TableInfo<String, Integer>(DatabaseType.MySQL, new TableInfo<String, Integer>(DatabaseType.MySQL, new TableInfo<String, Integer>(DatabaseType.MySQL, new TableInfo<"
    },
    {
        "original_path": "j256_ormlite-core###j256_ormlite-core/src/test/java/com/j256/ormlite/dao/BaseDaoImplTest###testQueryForFirst",
        "generated_path": "BaseDaoImplTest###testQueryForFirst.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void queryForFirst() throws Exception { }\n"
    },
    {
        "original_path": "j256_ormlite-core###j256_ormlite-core/src/test/java/com/j256/ormlite/misc/BaseDaoEnabledTest###testCreate",
        "generated_path": "BaseDaoEnabledTest###testCreate.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void testCreate() throws Exception { }\n"
    },
    {
        "original_path": "j256_ormlite-core###j256_ormlite-core/src/test/java/com/j256/ormlite/table/TableInfoTest###testObjectToString",
        "generated_path": "TableInfoTest###testObjectToString.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testObjectToString() throws SQLException { DatabaseTableConfig<TestData> tableConfig = new DatabaseTableConfig<>(DatabaseType.H2, \"test\"); TableInfo<TestData> tableInfo = new TableInfo<>(DatabaseType.H2, tableConfig); TestData testData = new TestData(); testData.setTestData(testData); String result = tableInfo.objectToString(testData); System.out.println(result); }\n"
    },
    {
        "original_path": "j256_ormlite-core###j256_ormlite-core/src/test/java/com/j256/ormlite/dao/BaseDaoImplTest###testCreate",
        "generated_path": "BaseDaoImplTest###testCreate.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void testCreate() throws Exception { }\n"
    },
    {
        "original_path": "j256_ormlite-core###j256_ormlite-core/src/test/java/com/j256/ormlite/stmt/QueryBuilderTest###testOrderBy",
        "generated_path": "QueryBuilderTest###testOrderBy.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testOrderBy() throws Exception { QueryBuilder<TestEntity, Long> queryBuilder = new QueryBuilder<TestEntity, Long>(databaseType, tableInfo, dao); assertEquals(1, queryBuilder.query().size()); assertEquals(0, queryBuilder.query().size()); assertEquals(0, queryBuilder.query().size()); assertEquals(0, queryBuilder.query().size()); assertEquals(0, queryBuilder.query().size()); assertEquals(0, queryBuilder.query().size()); assertEquals(0, queryBuilder.query().size()); assertEquals(0, queryBuilder.query().size()); assertEquals(0, queryBuilder.query().size()); assertEquals(0, queryBuilder.query().size()); assertEquals(0, queryBuilder.query().size()); assertEquals(0, queryBuilder.query().size()); assertEquals(0, queryBuilder.query().size()); assertEquals(0, queryBuilder.query().size()); assertEquals(0, queryBuilder.query().size()); assertEquals(0, queryBuilder.query().size()); assertEquals(0, queryBuilder.query().size()); assertEquals(0, queryBuilder.query().size()); assertEquals(0, queryBuilder.query().size()); assertEquals(0, queryBuilder.query().size()); assertEquals(0, queryBuilder.query().size()); assertEquals(0, queryBuilder.query().size()); assertEquals(0, queryBuilder.query().size()); assertEquals(0, queryBuilder.query().size()); assertEquals(0, queryBuilder.query().size()); assertEquals(0, queryBuilder."
    },
    {
        "original_path": "j256_ormlite-core###j256_ormlite-core/src/test/java/com/j256/ormlite/misc/BaseDaoEnabledTest###testDelete",
        "generated_path": "BaseDaoEnabledTest###testDelete.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void delete() throws Exception { }\n"
    },
    {
        "original_path": "j256_ormlite-core###j256_ormlite-core/src/test/java/com/j256/ormlite/dao/BaseDaoImplTest###testRefresh",
        "generated_path": "BaseDaoImplTest###testRefresh.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void testRefresh() throws Exception { }\n"
    },
    {
        "original_path": "j256_ormlite-core###j256_ormlite-core/src/test/java/com/j256/ormlite/dao/BaseDaoImplTest###testObjectsEqual",
        "generated_path": "BaseDaoImplTest###testObjectsEqual.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void testObjectsEqual() throws Exception { }\n"
    },
    {
        "original_path": "j256_ormlite-core###j256_ormlite-core/src/test/java/com/j256/ormlite/field/FieldTypeTest###testEquals",
        "generated_path": "FieldTypeTest###testEquals.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testEquals() throws Exception { assertTrue(new FieldType(null, null, null, null, null).equals(new FieldType(null, null, null, null, null))); assertFalse(new FieldType(null, null, null, null, null).equals(new FieldType(null, null, null, null, null))); assertFalse(new FieldType(null, null, null, null, null).equals(new FieldType(null, null, null, null))); assertFalse(new FieldType(null, null, null, null, null).equals(new FieldType(null, null, null, null))); assertFalse(new FieldType(null, null, null, null).equals(new FieldType(null, null, null, null))); assertFalse(new FieldType(null, null, null, null).equals(new FieldType(null, null, null, null))); assertFalse(new FieldType(null, null, null, null).equals(new FieldType(null, null, null, null))); assertFalse(new FieldType(null, null, null, null).equals(new FieldType(null, null, null, null))); assertFalse(new FieldType(null, null, null, null).equals(new FieldType(null, null, null, null))); assertFalse(new FieldType(null, null, null, null).equals(new FieldType(null, null, null, null))); }\n"
    },
    {
        "original_path": "j256_ormlite-core###j256_ormlite-core/src/test/java/com/j256/ormlite/misc/BaseDaoEnabledTest###testUpdate",
        "generated_path": "BaseDaoEnabledTest###testUpdate.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void testUpdate() throws Exception { }\n"
    },
    {
        "original_path": "j256_ormlite-core###j256_ormlite-core/src/test/java/com/j256/ormlite/stmt/query/InTest###testAppendValue",
        "generated_path": "InTest###testAppendValue.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testAppendValue() throws Exception { StringBuilder sb = new StringBuilder(); FieldType fieldType = FieldTypeFactory.getFieldType(\"int\", Integer.class); List<ArgumentHolder> columnArgList = new ArrayList<ArgumentHolder>(); columnArgList.add(new ArgumentHolder(\"foo\", \"bar\")); in.appendValue(null, sb, columnArgList); sb = new StringBuilder(); in.appendValue(null, sb, columnArgList); sb = new StringBuilder(); in.appendValue(null, sb, columnArgList); sb = new StringBuilder(); in.appendValue(null, sb, columnArgList); sb = new StringBuilder(); in.appendValue(null, sb, columnArgList); sb = new StringBuilder(); in.appendValue(null, sb, columnArgList); sb = new StringBuilder(); in.appendValue(null, sb, columnArgList); sb = new StringBuilder(); in.appendValue(null, sb, columnArgList); sb = new StringBuilder(); in.appendValue(null, sb, columnArgList); sb = new StringBuilder(); in.appendValue(null, sb, columnArgList); sb = new StringBuilder(); in.appendValue(null, sb, columnArgList); sb = new StringBuilder(); in.appendValue(null, sb, columnArgList); sb = new StringBuilder(); in.appendValue(null, sb, columnArgList); sb = new StringBuilder(); in.appendValue(null, sb, columnArgList); sb = new StringBuilder(); in."
    },
    {
        "original_path": "j256_ormlite-core###j256_ormlite-core/src/test/java/com/j256/ormlite/dao/BaseDaoImplTest###testDelete",
        "generated_path": "BaseDaoImplTest###testDelete.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void testDelete() throws Exception { }\n"
    },
    {
        "original_path": "j256_ormlite-core###j256_ormlite-core/src/test/java/com/j256/ormlite/dao/BaseDaoImplTest###testCountOf",
        "generated_path": "BaseDaoImplTest###testCountOf.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void testCountOf() throws Exception { }\n"
    },
    {
        "original_path": "j256_ormlite-core###j256_ormlite-core/src/test/java/com/j256/ormlite/db/BaseDatabaseTypeTest###testAppendEscapedEntityName",
        "generated_path": "BaseDatabaseTypeTest###testAppendEscapedEntityName.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void testAppendEscapedEntityName() throws Exception { }\n"
    },
    {
        "original_path": "j256_ormlite-core###j256_ormlite-core/src/test/java/com/j256/ormlite/stmt/QueryBuilderTest###testDistinct",
        "generated_path": "QueryBuilderTest###testDistinct.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void testDistinct() throws Exception { }\n"
    },
    {
        "original_path": "j256_ormlite-core###j256_ormlite-core/src/test/java/com/j256/ormlite/stmt/WhereTest###testIdEq",
        "generated_path": "WhereTest###testIdEq.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testIdEq() throws Exception { Where<TestData, Integer> where = new Where<TestData, Integer>(); where.idEq(1); }\n"
    },
    {
        "original_path": "j256_ormlite-core###j256_ormlite-core/src/test/java/com/j256/ormlite/dao/BaseDaoImplTest###testExtractId",
        "generated_path": "BaseDaoImplTest###testExtractId.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void testExtractId() throws Exception { }\n"
    },
    {
        "original_path": "j256_ormlite-core###j256_ormlite-core/src/test/java/com/j256/ormlite/misc/BaseDaoEnabledTest###testUpdateId",
        "generated_path": "BaseDaoEnabledTest###testUpdateId.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void testUpdateId() throws Exception { }\n"
    },
    {
        "original_path": "j256_ormlite-core###j256_ormlite-core/src/test/java/com/j256/ormlite/dao/BaseDaoImplTest###testCreateOrUpdate",
        "generated_path": "BaseDaoImplTest###testCreateOrUpdate.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testCreateOrUpdate() throws Exception { TestData testData = new TestData(); testData.name = \"testName\"; testData.age = 1; testData.ageUnit = 2; testData.nameUnitUnit = 3; testData.nameUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnit = new TestData(); testData.nameUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnit.nameUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnit"
    },
    {
        "original_path": "protostuff_protostuff###protostuff_protostuff/protostuff-parser/src/test/java/io/protostuff/parser/ProtoUtilTest###testToUnderscoreCase",
        "generated_path": "ProtoUtilTest###testToUnderscoreCase.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void testToUnderscoreCase() throws Exception { StringBuilder result = ProtoUtil.toUnderscoreCase(\"foo\"); assertEquals(\"foo\", result.toString()); result = ProtoUtil.toUnderscoreCase(\"foo_bar\"); assertEquals(\"foo_bar\", result.toString()); result = ProtoUtil.toUnderscoreCase(\"foo_bar\"); assertEquals(\"foo_bar\", result.toString()); result = ProtoUtil.toUnderscoreCase(\"foo_bar\"); assertEquals(\"foo_bar\", result.toString()); result = ProtoUtil.toUnderscoreCase(\"foo_bar\"); assertEquals(\"foo_bar\", result.toString()); result = ProtoUtil.toUnderscoreCase(\"foo_bar\"); assertEquals(\"foo_bar\", result.toString()); result = ProtoUtil.toUnderscoreCase(\"foo_bar\"); assertEquals(\"foo_bar\", result.toString()); result = ProtoUtil.toUnderscoreCase(\"foo_bar\"); assertEquals(\"foo_bar\", result.toString()); result = ProtoUtil.toUnderscoreCase(\"foo_bar\"); assertEquals(\"foo_bar\", result.toString()); result = ProtoUtil.toUnderscoreCase(\"foo_bar\"); assertEquals(\"foo_bar\", result.toString()); result = ProtoUtil.toUnderscoreCase(\"foo_bar\"); assertEquals(\"foo_bar\", result.toString()); result = ProtoUtil.toUnderscoreCase(\"foo_bar\"); assertEquals(\"foo_bar\", result.toString()); }\n"
    },
    {
        "original_path": "protostuff_protostuff###protostuff_protostuff/protostuff-parser/src/test/java/io/protostuff/parser/ProtoUtilTest###testToPascalCase",
        "generated_path": "ProtoUtilTest###testToPascalCase.java",
        "Compile_result": 1,
        "Test_result": 0,
        "Gen_Test": "@Test public void testToPascalCase() throws Exception { String name = \"test\"; StringBuilder result = ProtoUtil.toPascalCase(name); assertEquals(\"test\", result.toString()); }\n"
    },
    {
        "original_path": "protostuff_protostuff###protostuff_protostuff/protostuff-core/src/test/java/io/protostuff/ProtobufOutputTest###testComputeRawVarint32Size",
        "generated_path": "ProtobufOutputTest###testComputeRawVarint32Size.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testComputeRawVarint32Size() throws Exception { assertEquals(5, ProtobufOutput.computeRawVarint32Size(0xffffffff)); assertEquals(1, ProtobufOutput.computeRawVarint32Size(0xffffffffL)); assertEquals(2, ProtobufOutput.computeRawVarint32Size(0xffffffffL)); assertEquals(3, ProtobufOutput.computeRawVarint32Size(0xffffffffL)); assertEquals(4, ProtobufOutput.computeRawVarint32Size(0xffffffffL)); assertEquals(5, ProtobufOutput.computeRawVarint32Size(0xffffffffL)); assertEquals(5, ProtobufOutput.computeRawVarint32Size(0xffffffffL)); assertEquals(5, ProtobufOutput.computeRawVarint32Size(0xffffffffL)); assertEquals(5, ProtobufOutput.computeRawVarint32Size(0xffffffffL)); assertEquals(5, ProtobufOutput.computeRawVarint32Size(0xffffffffL)); assertEquals(5, ProtobufOutput.computeRawVarint32Size(0xffffffffL)); assertEquals(5, ProtobufOutput.computeRawVarint32Size(0xffffffffL)); assertEquals(5, ProtobufOutput.computeRawVarint32Size(0xffffffffL)); assertEquals(5, ProtobufOutput.computeRawVarint32Size(0xffffffffL)); assertEquals(5, ProtobufOutput.computeRawVarint32Size(0xffffffffL)); assertEquals(5, ProtobufOutput.computeRawVarint32Size(0xffffffffL)); assertEquals(5, ProtobufOutput.computeRawVarint32Size(0xffffffffL"
    },
    {
        "original_path": "protostuff_protostuff###protostuff_protostuff/protostuff-core/src/test/java/io/protostuff/LinkBufferTest###testGetBuffers",
        "generated_path": "LinkBufferTest###testGetBuffers.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetBuffers() throws Exception { List<ByteBuffer> buffers = new ArrayList<ByteBuffer>(); buffers.add(ByteBuffer.allocate(8)); buffers.add(ByteBuffer.allocate(4)); buffers.add(ByteBuffer.allocate(8)); buffers.add(ByteBuffer.allocate(4)); buffers.add(ByteBuffer.allocate(4)); buffers.add(ByteBuffer.allocate(4)); buffers.add(ByteBuffer.allocate(4)); buffers.add(ByteBuffer.allocate(4)); buffers.add(ByteBuffer.allocate(4)); buffers.add(ByteBuffer.allocate(4)); buffers.add(ByteBuffer.allocate(4)); buffers.add(ByteBuffer.allocate(4)); buffers.add(ByteBuffer.allocate(4)); buffers.add(ByteBuffer.allocate(4)); buffers.add(ByteBuffer.allocate(4)); buffers.add(ByteBuffer.allocate(4)); buffers.add(ByteBuffer.allocate(4)); buffers.add(ByteBuffer.allocate(4)); buffers.add(ByteBuffer.allocate(4)); buffers.add(ByteBuffer.allocate(4)); buffers.add(ByteBuffer.allocate(4)); buffers.add(ByteBuffer.allocate(4)); buffers.add(ByteBuffer.allocate(4)); buffers.add(ByteBuffer.allocate(4)); buffers.add(ByteBuffer.allocate(4)); buffers.add(ByteBuffer.allocate(4)); buffers.add(ByteBuffer.allocate(4)); buffers.add(ByteBuffer.allocate(4)); buffers.add(ByteBuffer.allocate(4)); buffers.add(ByteBuffer"
    },
    {
        "original_path": "protostuff_protostuff###protostuff_protostuff/protostuff-core/src/test/java/io/protostuff/ProtobufOutputTest###testWriteRawLittleEndian64",
        "generated_path": "ProtobufOutputTest###testWriteRawLittleEndian64.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testWriteRawLittleEndian64() throws IOException { long value = 1L; byte[] buf = new byte[8]; ProtobufOutput.writeRawLittleEndian64(value, buf, 0); assertEquals(8, buf.length); }\n"
    },
    {
        "original_path": "protostuff_protostuff###protostuff_protostuff/protostuff-core/src/test/java/io/protostuff/ProtobufOutputTest###testComputeRawVarint64Size",
        "generated_path": "ProtobufOutputTest###testComputeRawVarint64Size.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testComputeRawVarint64Size() throws Exception { assertEquals(1, ProtobufOutput.computeRawVarint64Size(1)); assertEquals(2, ProtobufOutput.computeRawVarint64Size(1)); assertEquals(3, ProtobufOutput.computeRawVarint64Size(1)); assertEquals(4, ProtobufOutput.computeRawVarint64Size(1)); assertEquals(5, ProtobufOutput.computeRawVarint64Size(1)); assertEquals(6, ProtobufOutput.computeRawVarint64Size(1)); assertEquals(7, ProtobufOutput.computeRawVarint64Size(1)); assertEquals(8, ProtobufOutput.computeRawVarint64Size(1)); assertEquals(9, ProtobufOutput.computeRawVarint64Size(1)); assertEquals(10, ProtobufOutput.computeRawVarint64Size(1)); assertEquals(10, ProtobufOutput.computeRawVarint64Size(1)); assertEquals(10, ProtobufOutput.computeRawVarint64Size(1)); assertEquals(10, ProtobufOutput.computeRawVarint64Size(1)); assertEquals(10, ProtobufOutput.computeRawVarint64Size(1)); assertEquals(10, ProtobufOutput.computeRawVarint64Size(1)); assertEquals(10, ProtobufOutput.computeRawVarint64Size(1)); assertEquals(10, ProtobufOutput.computeRawVarint64Size(1)); assertEquals(10, ProtobufOutput.computeRawVarint64Size(1)); assertEquals(10, ProtobufOutput.computeRawVarint64Size(1));"
    },
    {
        "original_path": "protostuff_protostuff###protostuff_protostuff/protostuff-core/src/test/java/io/protostuff/ProtobufOutputTest###testGetTagAndRawVarInt32Bytes",
        "generated_path": "ProtobufOutputTest###testGetTagAndRawVarInt32Bytes.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetTagAndRawVarInt32Bytes() throws IOException { byte[] result = ProtobufOutput.getTagAndRawVarInt32Bytes(0x01, 0x01); assertArrayEquals(new byte[] { 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0"
    },
    {
        "original_path": "protostuff_protostuff###protostuff_protostuff/protostuff-core/src/test/java/io/protostuff/ProtobufOutputTest###testWriteRawVarInt32",
        "generated_path": "ProtobufOutputTest###testWriteRawVarInt32.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testWriteRawVarInt32() throws IOException { final int value = 0x12345678; final WriteSession session = new WriteSession(new byte[] { 0x12345678, 0x12345678, 0x12345678 }); final LinkedBuffer lb = new LinkedBuffer(1); ProtobufOutput.writeRawVarInt32(value, session, lb); assertEquals(1, session.size); assertEquals(value, lb.get(0)); assertEquals(0x12345678, lb.get(1)); assertEquals(0x12345678, lb.get(2)); assertEquals(0x12345678, lb.get(3)); assertEquals(0x12345678, lb.get(4)); assertEquals(0x12345678, lb.get(5)); assertEquals(0x12345678, lb.get(6)); assertEquals(0x12345678, lb.get(7)); assertEquals(0x12345678, lb.get(8)); assertEquals(0x12345678, lb.get(9)); assertEquals(0x12345678, lb.get(10)); assertEquals(0x12345678, lb.get(11)); assertEquals(0x12345678, lb.get(12)); assertEquals(0x12345678, lb.get(13)); assertEquals(0x12345678, lb.get(14)); assertEquals(0x123456"
    },
    {
        "original_path": "protostuff_protostuff###protostuff_protostuff/protostuff-core/src/test/java/io/protostuff/ProtobufOutputTest###testGetTagAndRawVarInt64Bytes",
        "generated_path": "ProtobufOutputTest###testGetTagAndRawVarInt64Bytes.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetTagAndRawVarInt64Bytes() throws IOException { byte[] result = ProtobufOutput.getTagAndRawVarInt64Bytes(1, 1); assertArrayEquals(new byte[] { (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte)"
    },
    {
        "original_path": "protostuff_protostuff###protostuff_protostuff/protostuff-core/src/test/java/io/protostuff/ProtobufOutputTest###testGetTagAndRawLittleEndian32Bytes",
        "generated_path": "ProtobufOutputTest###testGetTagAndRawLittleEndian32Bytes.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetTagAndRawLittleEndian32Bytes() throws Exception { byte[] result = ProtobufOutput.getTagAndRawLittleEndian32Bytes(0x01, 0x01); assertArrayEquals(new byte[] {0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0"
    },
    {
        "original_path": "protostuff_protostuff###protostuff_protostuff/protostuff-core/src/test/java/io/protostuff/ProtobufOutputTest###testWriteRawLittleEndian32",
        "generated_path": "ProtobufOutputTest###testWriteRawLittleEndian32.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testWriteRawLittleEndian32() throws Exception { byte[] buf = new byte[8]; ProtobufOutput.writeRawLittleEndian32(0x12345678, buf, 0); assertEquals(8, buf.length); }\n"
    },
    {
        "original_path": "protostuff_protostuff###protostuff_protostuff/protostuff-parser/src/test/java/io/protostuff/parser/ProtoUtilTest###testToCamelCase",
        "generated_path": "ProtoUtilTest###testToCamelCase.java",
        "Compile_result": 1,
        "Test_result": 0,
        "Gen_Test": "@Test public void testToCamelCase() throws Exception { StringBuilder result = ProtoUtil.toCamelCase(\"Test\"); assertEquals(\"Test\", result.toString()); }\n"
    },
    {
        "original_path": "protostuff_protostuff###protostuff_protostuff/protostuff-core/src/test/java/io/protostuff/ProtobufOutputTest###testGetTagAndRawLittleEndian64Bytes",
        "generated_path": "ProtobufOutputTest###testGetTagAndRawLittleEndian64Bytes.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetTagAndRawLittleEndian64Bytes() throws IOException { long value = 1L; byte[] result = ProtobufOutput.getTagAndRawLittleEndian64Bytes(value, value); assertArrayEquals(new byte[] {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06"
    },
    {
        "original_path": "protostuff_protostuff###protostuff_protostuff/protostuff-core/src/test/java/io/protostuff/ProtobufOutputTest###testGetRawVarInt32Bytes",
        "generated_path": "ProtobufOutputTest###testGetRawVarInt32Bytes.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetRawVarInt32Bytes() throws Exception { byte[] bytes = ProtobufOutput.getRawVarInt32Bytes(1); assertArrayEquals(new byte[] { (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1"
    },
    {
        "original_path": "alexxiyang_shiro-redis###alexxiyang_shiro-redis/src/test/java/org/crazycake/shiro/RedisSessionDAOTest###testUpdate",
        "generated_path": "RedisSessionDAOTest###testUpdate.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testUpdate() throws UnknownSessionException { Session session = new Session(); session.setId(1); session.setName(\"test\"); session.setExpires(1); session.setKey(\"test\"); session.setValue(\"test\"); session.setExpirationTime(1); session.setKey(\"test\"); session.setExpirationTime(1); session.setValue(\"test\"); session.setExpirationTime(1); session.setKey(\"test\"); session.setValue(\"test\"); session.setExpirationTime(1); session.setValue(\"test\"); session.setExpirationTime(1); session.setKey(\"test\"); session.setValue(\"test\"); session.setExpirationTime(1); session.setValue(\"test\"); session.setKey(\"test\"); session.setValue(\"test\"); session.setExpirationTime(1); session.setValue(\"test\"); session.setExpirationTime(1); session.setKey(\"test\"); session.setValue(\"test\"); session.setExpirationTime(1); session.setValue(\"test\"); session.setExpirationTime(1); session.setValue(\"test\"); session.setValue(\"test\"); session.setExpirationTime(1); session.setValue(\"test\"); session.setValue(\"test\"); session.setValue(\"test\"); session.setValue(\"test\"); session.setValue(\"test\"); session.setValue(\"test\"); session.setValue(\"test\"); session.setValue(\"test\"); session.setValue(\"test\"); session."
    },
    {
        "original_path": "alexxiyang_shiro-redis###alexxiyang_shiro-redis/src/test/java/org/crazycake/shiro/RedisSessionDAOTest###testDelete",
        "generated_path": "RedisSessionDAOTest###testDelete.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testDelete() throws UnknownSessionException { Session session = new Session(); session.setId(1); session.setName(\"test\"); session.setExpires(1); session.setKey(\"test\"); session.setValue(\"test\"); session.setExpiration(1); session.setKey(\"test\"); session.setValue(\"test\"); session.setExpiration(1); session.setKey(\"test\"); session.setValue(\"test\"); session.setExpiration(1); session.setKey(\"test\"); session.setValue(\"test\"); session.setExpiration(1); session.setKey(\"test\"); session.setValue(\"test\"); session.setExpiration(1); session.setKey(\"test\"); session.setValue(\"test\"); session.setExpiration(1); session.setKey(\"test\"); session.setValue(\"test\"); session.setExpiration(1); session.setKey(\"test\"); session.setValue(\"test\"); session.setExpiration(1); session.setKey(\"test\"); session.setValue(\"test\"); session.setExpiration(1); session.setKey(\"test\"); session.setValue(\"test\"); session.setExpiration(1); session.setKey(\"test\"); session.setValue(\"test\"); session.setExpiration(1); session.setKey(\"test\"); session.setValue(\"test\"); session.setExpiration(1); session.setKey(\"test\"); session.setValue(\"test\"); session.setExpiration(1); session.setKey(\"test"
    },
    {
        "original_path": "alexxiyang_shiro-redis###alexxiyang_shiro-redis/src/test/java/org/crazycake/shiro/RedisSessionDAOTest###testGetActiveSessions",
        "generated_path": "RedisSessionDAOTest###testGetActiveSessions.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetActiveSessions() throws Exception { Collection<Session> sessions = redisSessionDAO.getActiveSessions(); Assert.assertNotNull(sessions); Assert.assertTrue(sessions.size() > 0); }\n"
    },
    {
        "original_path": "neoremind_fluent-validator###neoremind_fluent-validator/fluent-validator/src/test/java/com/baidu/unbiz/fluentvalidator/util/ReflectionUtilTest###testGetAnnotationFields",
        "generated_path": "ReflectionUtilTest###testGetAnnotationFields.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetAnnotationFields() { Field[] fields = ReflectionUtil.getAnnotationFields(TestClass.class, TestClass.class); Assert.assertNotNull(fields); Assert.assertEquals(1, fields.length); Assert.assertTrue(fields[0].getAnnotation(TestClass.class).value() instanceof TestClass); Assert.assertTrue(fields[1].getAnnotation(TestClass.class).value() instanceof TestClass); Assert.assertTrue(fields[2].getAnnotation(TestClass.class).value() instanceof TestClass); Assert.assertTrue(fields[3].getAnnotation(TestClass.class).value() instanceof TestClass); Assert.assertTrue(fields[4].getAnnotation(TestClass.class).value() instanceof TestClass); Assert.assertTrue(fields[5].getAnnotation(TestClass.class).value() instanceof TestClass); Assert.assertTrue(fields[6].getAnnotation(TestClass.class).value() instanceof TestClass); Assert.assertTrue(fields[7].getAnnotation(TestClass.class).value() instanceof TestClass); Assert.assertTrue(fields[8].getAnnotation(TestClass.class).value() instanceof TestClass); Assert.assertTrue(fields[9].getAnnotation(TestClass.class).value() instanceof TestClass); Assert.assertTrue(fields[10].getAnnotation(TestClass.class).value() instanceof TestClass); Assert.assertTrue(fields[11].getAnnotation(TestClass.class"
    },
    {
        "original_path": "neoremind_fluent-validator###neoremind_fluent-validator/fluent-validator/src/test/java/com/baidu/unbiz/fluentvalidator/util/ArrayUtilTest###testHasIntersection",
        "generated_path": "ArrayUtilTest###testHasIntersection.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testHasIntersection() { assertTrue(ArrayUtil.hasIntersection(new String[] { \"a\", \"b\", \"c\" }, new String[] { \"a\", \"b\", \"c\" })); assertTrue(ArrayUtil.hasIntersection(new String[] { \"a\", \"b\", \"c\" })); assertTrue(ArrayUtil.hasIntersection(new String[] { \"a\", \"b\", \"c\" })); assertTrue(ArrayUtil.hasIntersection(new String[] { \"a\", \"b\", \"c\" })); assertTrue(ArrayUtil.hasIntersection(new String[] { \"a\", \"b\", \"c\" })); assertTrue(ArrayUtil.hasIntersection(new String[] { \"a\", \"b\", \"c\" })); assertTrue(ArrayUtil.hasIntersection(new String[] { \"a\", \"b\", \"c\" })); assertTrue(ArrayUtil.hasIntersection(new String[] { \"a\", \"b\", \"c\" })); assertTrue(ArrayUtil.hasIntersection(new String[] { \"a\", \"b\", \"c\" })); assertTrue(ArrayUtil.hasIntersection(new String[] { \"a\", \"b\", \"c\" })); assertTrue(ArrayUtil.hasIntersection(new String[] { \"a\", \"b\", \"c\" })); assertTrue(ArrayUtil.hasIntersection(new String[] { \"a\", \"b\", \"c\" })); }\n"
    },
    {
        "original_path": "tabulapdf_tabula-java###tabulapdf_tabula-java/src/test/java/technology/tabula/TestUtils###testParsePagesOption",
        "generated_path": "TestUtils###testParsePagesOption.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testParsePagesOption() throws ParseException { List<Integer> pages = Utils.parsePagesOption(\"1,2,3\"); assertEquals(1, pages.size()); assertEquals(2, pages.get(0)); assertEquals(3, pages.get(1)); assertEquals(4, pages.get(2)); assertEquals(5, pages.get(3)); assertEquals(6, pages.get(4)); assertEquals(7, pages.get(5)); assertEquals(8, pages.get(6)); assertEquals(9, pages.get(7)); }\n"
    },
    {
        "original_path": "tabulapdf_tabula-java###tabulapdf_tabula-java/src/test/java/technology/tabula/TestProjectionProfile###testSmooth",
        "generated_path": "TestProjectionProfile###testSmooth.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testSmooth() { System.out.println(\"smooth\"); float[] data = new float[]{1, 2, 3, 4, 5, 6, 7, 8, 9}; float[] rv = ProjectionProfile.smooth(data, 3); System.out.println(\"rv = \" + rv.length); System.out.println(\"rv = \" + rv[0]); System.out.println(\"rv = \" + rv[1]); System.out.println(\"rv = \" + rv[2]); System.out.println(\"rv = \" + rv[3]); System.out.println(\"rv = \" + rv[4]); System.out.println(\"rv = \" + rv[5]); System.out.println(\"rv = \" + rv[6]); System.out.println(\"rv = \" + rv[7]); System.out.println(\"rv = \" + rv[8]); System.out.println(\"rv = \" + rv[9]); System.out.println(\"rv = \" + rv[10]); System.out.println(\"rv = \" + rv[11]); System.out.println(\"rv = \" + rv[12]); System.out.println(\"rv = \" + rv[13]); System.out.println(\"rv = \" + rv[14]); System.out.println(\"rv = \" + rv[15]); System.out.println(\"rv = \" + rv[16]); System.out.println(\"rv = \" +"
    },
    {
        "original_path": "tabulapdf_tabula-java###tabulapdf_tabula-java/src/test/java/technology/tabula/TestProjectionProfile###testFilter",
        "generated_path": "TestProjectionProfile###testFilter.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testFilter() { System.out.println(\"filter\"); float[] data = new float[]{1, 2, 3, 4, 5, 6, 7, 8, 9}; float[] result = ProjectionProfile.filter(data, 0.5f); System.out.println(Arrays.toString(result)); assertEquals(data.length, result.length); assertEquals(data[0], result[0], DELTA); assertEquals(data[1], result[1], DELTA); assertEquals(data[2], result[2], DELTA); assertEquals(data[3], result[3], DELTA); assertEquals(data[4], result[4], DELTA); assertEquals(data[5], result[5], DELTA); assertEquals(data[6], result[6], DELTA); assertEquals(data[7], result[7], DELTA); assertEquals(data[8], result[8], DELTA); assertEquals(data[9], result[9], DELTA); assertEquals(data[10], result[10], DELTA); assertEquals(data[11], result[11], DELTA); assertEquals(data[12], result[12], DELTA); assertEquals(data[13], result[13], DELTA); assertEquals(data[14], result[14], DELTA); assertEquals(data[15], result[15], DE"
    },
    {
        "original_path": "tabulapdf_tabula-java###tabulapdf_tabula-java/src/test/java/technology/tabula/TestProjectionProfile###testFindVerticalSeparators",
        "generated_path": "TestProjectionProfile###testFindVerticalSeparators.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testFindVerticalSeparators() throws Exception { float[] v = new ProjectionProfile(new Page(new Rectangle(0, 0, 0, 0), new Rectangle(0, 0, 0, 0), 1, 1).findVerticalSeparators(1)); assertEquals(1, v.length); assertEquals(1, v[0].intValue()); assertEquals(1, v[1].intValue()); assertEquals(1, v[2].intValue()); assertEquals(1, v[3].intValue()); assertEquals(1, v[4].intValue()); assertEquals(1, v[5].intValue()); assertEquals(1, v[6].intValue()); assertEquals(1, v[7].intValue()); assertEquals(1, v[8].intValue()); assertEquals(1, v[9].intValue()); assertEquals(1, v[10].intValue()); assertEquals(1, v[11].intValue()); assertEquals(1, v[12].intValue()); assertEquals(1, v[13].intValue()); assertEquals(1, v[14].intValue()); assertEquals(1, v[15].intValue()); assertEquals(1, v[16].intValue()); assertEquals(1, v[17].intValue()); assertEquals(1, v[18].intValue()); assertEquals(1, v[19].intValue()); assertEquals(1, v[20].intValue());"
    },
    {
        "original_path": "tabulapdf_tabula-java###tabulapdf_tabula-java/src/test/java/technology/tabula/TestLine###testToString",
        "generated_path": "TestLine###testToString.java",
        "Compile_result": 1,
        "Test_result": 0,
        "Gen_Test": "@Test public void testToString() { System.out.println(\"toString\"); Line instance = new Line(); String expResult = \"Line,chunks=[\\\\n\" + \" \\\\t\\\\r\\\\n\" + \" \\\\n\" + \" \\\\r\\\\n\" + \" ]\"; String result = instance.toString(); assertEquals(expResult, result); instance = new Line(); expResult = \"Line,chunks=[\\\\n\" + \" \\\\t\\\\r\\\\n\" + \" \\\\n\" + \" ]\"; result = instance.toString(); assertEquals(expResult, result); }\n"
    },
    {
        "original_path": "tabulapdf_tabula-java###tabulapdf_tabula-java/src/test/java/technology/tabula/TestProjectionProfile###testGetAutocorrelation",
        "generated_path": "TestProjectionProfile###testGetAutocorrelation.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void getAutocorrelation() { float[] projection = new float[]{1, 2, 3, 4, 5}; float[] result = ProjectionProfile.getAmborrelation(projection); Assert.assertEquals(projection.length, result.length); Assert.assertEquals(projection[0], result[0], 0); Assert.assertEquals(projection[1], result[1], 0); Assert.assertEquals(projection[2], result[2], 0); Assert.assertEquals(projection[3], result[3], 0); Assert.assertEquals(projection[4], result[4], 0); Assert.assertEquals(projection[5], result[5], 0); Assert.assertEquals(projection[6], result[6], 0); Assert.assertEquals(projection[7], result[7], 0); Assert.assertEquals(projection[8], result[8], 0); Assert.assertEquals(projection[9], result[9], 0); Assert.assertEquals(projection[10], result[10], 0); Assert.assertEquals(projection[11], result[11], 0); Assert.assertEquals(projection[12], result[12], 0); Assert.assertEquals(projection[13], result[13], 0); Assert.assertEquals(projection[14], result[14], 0); Assert.assertEquals(projection[15], result[15], 0); Assert.assertEquals(projection[16], result[16], 0); Assert.assertEquals(projection["
    },
    {
        "original_path": "tabulapdf_tabula-java###tabulapdf_tabula-java/src/test/java/technology/tabula/TestProjectionProfile###testFindHorizontalSeparators",
        "generated_path": "TestProjectionProfile###testFindHorizontalSeparators.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testFindHorizontalSeparators() throws Exception { float[] horizontalSeparators = new ProjectionProfile(new Page(new Rectangle(0, 0, 0, 0), new ArrayList<Rectangle>(), 1, 1), new ArrayList<Rectangle>(), 1, 1).findHorizontalSeparators(1); assertEquals(1, horizontalSeparators.length); assertEquals(1, horizontalSeparators[0].intValue()); assertEquals(1, horizontalSeparators[1].intValue()); assertEquals(1, horizontalSeparators[2].intValue()); assertEquals(1, horizontalSeparators[3].intValue()); assertEquals(1, horizontalSeparators[4].intValue()); assertEquals(1, horizontalSeparators[5].intValue()); assertEquals(1, horizontalSeparators[6].intValue()); assertEquals(1, horizontalSeparators[7].intValue()); assertEquals(1, horizontalSeparators[8].intValue()); assertEquals(1, horizontalSeparators[9].intValue()); assertEquals(1, horizontalSeparators[10].intValue()); assertEquals(1, horizontalSeparators[11].intValue()); assertEquals(1, horizontalSeparators[12].intValue()); assertEquals(1, horizontalSeparators[13].intValue()); assertEquals(1, horizontalSeparators[14].intValue()); assertEquals(1, horizontalSeparators[15].intValue()); assertEquals(1, horizontalSeparators[16].intValue()); assertEquals(1,"
    },
    {
        "original_path": "tabulapdf_tabula-java###tabulapdf_tabula-java/src/test/java/technology/tabula/TestRuling###testToString",
        "generated_path": "TestRuling###testToString.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void testToString() { }\n"
    },
    {
        "original_path": "googleapis_google-cloud-java###googleapis_google-cloud-java/java-resourcemanager/google-cloud-resourcemanager/src/test/java/com/google/cloud/resourcemanager/testing/LocalResourceManagerHelperTest###testGetPolicy",
        "generated_path": "LocalResourceManagerHelperTest###testGetPolicy.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetPolicy() throws IOException { Response response = resourceManagerHelper.getPolicy(projectId); Assert.assertEquals(Response.Status.OK.getStatusCode(), response.getStatus()); }\n"
    },
    {
        "original_path": "googleapis_google-cloud-java###googleapis_google-cloud-java/java-resourcemanager/google-cloud-resourcemanager/src/test/java/com/google/cloud/resourcemanager/testing/LocalResourceManagerHelperTest###testReplacePolicy",
        "generated_path": "LocalResourceManagerHelperTest###testReplacePolicy.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testReplacePolicy() throws IOException { Policy policy = new Policy(); policy.setEtag(\"123\"); policy.setVersion(\"123\"); Response response = resourceManagerHelper.replacePolicy(\"project-id\", policy); assertEquals(Response.HTTP_OK, response.getStatus()); assertEquals(\"123\", policy.getEtag()); assertEquals(\"123\", policy.getVersion()); }\n"
    },
    {
        "original_path": "googleapis_google-cloud-java###googleapis_google-cloud-java/java-resourcemanager/google-cloud-resourcemanager/src/test/java/com/google/cloud/resourcemanager/testing/LocalResourceManagerHelperTest###testDelete",
        "generated_path": "LocalResourceManagerHelperTest###testDelete.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testDelete() throws Exception { Response response = resourceManagerHelper.delete(\"project-id\"); assertEquals(Response.HTTP_OK, response.getStatus()); assertEquals(\"{}\", response.getBody()); }\n"
    },
    {
        "original_path": "googleapis_google-cloud-java###googleapis_google-cloud-java/java-dns/src/test/java/com/google/cloud/dns/ChangeRequestTest###testIsDone",
        "generated_path": "ChangeRequestTest###testIsDone.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testIsDone() { ChangeRequest r1 = Dns.ChangeRequest.newBuilder().setStatus(Status.DONE).build(); assertTrue(r1.isDone()); }\n"
    },
    {
        "original_path": "googleapis_google-cloud-java###googleapis_google-cloud-java/java-resourcemanager/google-cloud-resourcemanager/src/test/java/com/google/cloud/resourcemanager/testing/LocalResourceManagerHelperTest###testUndelete",
        "generated_path": "LocalResourceManagerHelperTest###testUndelete.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testUndelete() { Response response = resourceManagerHelper.undelete(\"project-id\"); assertEquals(Response.HTTP_OK, response.getStatus()); assertEquals(\"{}\", response.getBody()); }\n"
    },
    {
        "original_path": "googleapis_google-cloud-java###googleapis_google-cloud-java/java-resourcemanager/google-cloud-resourcemanager/src/test/java/com/google/cloud/resourcemanager/testing/LocalResourceManagerHelperTest###testList",
        "generated_path": "LocalResourceManagerHelperTest###testList.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testList() { Map<String, Object> options = new HashMap<>(); options.put(\"filter\", new String[]{\"filter1\", \"filter2\", \"filter3\"}); options.put(\"projectFields\", new String[]{\"projectId\", \"projectId\", \"projectId\", \"projectId\", \"projectId\", \"projectId\", \"projectId\", \"projectId\", \"projectId\", \"projectId\", \"projectId\", \"projectId\", \"projectId\", \"projectId\", \"projectId\", \"projectId\", \"projectId\", \"projectId\", \"projectId\", \"projectId\", \"projectId\", \"projectId\", \"projectId\", \"projectId\", \"projectId\", \"projectId\", \"projectId\", \"projectId\", \"projectId\", \"projectId\", \"projectId\", \"projectId\", \"projectId\", \"projectId\", \"projectId\", \"projectId\", \"projectId\", \"projectId\", \"projectId\", \"projectId\", \"projectId\", \"projectId\", \"projectId\", \"projectId\", \"projectId\", \"projectId\", \"projectId\", \"projectId\", \"projectId\", \"projectId\", \"projectId\", \"projectId\", \"projectId\", \"projectId\", \"projectId\", \"projectId\", \"projectId\", \"projectId\", \"projectId\", \"projectId\", \"projectId\", \"projectId\", \"projectId\", \"projectId\", \"projectId\", \"projectId\","
    },
    {
        "original_path": "googleapis_google-cloud-java###googleapis_google-cloud-java/java-dns/src/test/java/com/google/cloud/dns/DnsBatchTest###testDeleteZone",
        "generated_path": "DnsBatchTest###testDeleteZone.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void testDeleteZone() { }\n"
    },
    {
        "original_path": "abel533_Mapper###abel533_Mapper/core/src/test/java/tk/mybatis/mapper/util/StringUtilTest###testCamelhumpToUnderline",
        "generated_path": "StringUtilTest###testCamelhumpToUnderline.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testCamelhumpToUnderline() { assertEquals(\"_\", StringUtil.camelhumpToUnderline(\"_\")); assertEquals(\"_\", StringUtil.camelhumpToUnderline(\"_\")); assertEquals(\"_\", StringUtil.camelhumpToUnderline(\"_\")); assertEquals(\"_\", StringUtil.camelhumpToUnderline(\"_\")); assertEquals(\"_\", StringUtil.camelhumpToUnderline(\"_\")); assertEquals(\"_\", StringUtil.camelhumpToUnderline(\"_\")); assertEquals(\"_\", StringUtil.camelhumpToUnderline(\"_\")); assertEquals(\"_\", StringUtil.camelhumpToUnderline(\"_\")); assertEquals(\"_\", StringUtil.camelhumpToUnderline(\"_\")); assertEquals(\"_\", StringUtil.camelhumpToUnderline(\"_\")); assertEquals(\"_\", StringUtil.camelhumpToUnderline(\"_\")); assertEquals(\"_\", StringUtil.camelhumpToUnderline(\"_\")); assertEquals(\"_\", StringUtil.camelhumpToUnderline(\"_\")); assertEquals(\"_\", StringUtil.camelhumpToUnderline(\"_\")); assertEquals(\"_\", StringUtil.camelhumpToUnderline(\"_\")); assertEquals(\"_\", StringUtil.camelhumpToUnderline(\"_\")); assertEquals(\"_\", StringUtil.camelhumpToUnderline(\"_\")); assertEquals(\"_\", StringUtil.camelhumpToUnderline(\"_\")"
    },
    {
        "original_path": "abel533_Mapper###abel533_Mapper/core/src/test/java/tk/mybatis/mapper/util/StringUtilTest###testUnderlineToCamelhump",
        "generated_path": "StringUtilTest###testUnderlineToCamelhump.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testUnderlineToCamelhump() { assertEquals(\"\", StringUtil.underlineToCamelhump(\"\")); assertEquals(\"a\", StringUtil.underlineToCamelhump(\"a\")); assertEquals(\"a\", StringUtil.underlineToCamelhump(\"a\")); assertEquals(\"a\", StringUtil.underlineToCamelhump(\"a\")); assertEquals(\"a\", StringUtil.underlineToCamelhump(\"a\")); assertEquals(\"a\", StringUtil.underlineToCamelhump(\"a\")); assertEquals(\"a\", StringUtil.underlineToCamelhump(\"a\")); assertEquals(\"a\", StringUtil.underlineToCamelhump(\"a\")); assertEquals(\"a\", StringUtil.underlineToCamelhump(\"a\")); assertEquals(\"a\", StringUtil.underlineToCamelhump(\"a\")); assertEquals(\"a\", StringUtil.underlineToCamelhump(\"a\")); assertEquals(\"a\", StringUtil.underlineToCamelhump(\"a\")); assertEquals(\"a\", StringUtil.underlineToCamelhump(\"a\")); assertEquals(\"a\", StringUtil.underlineToCamelhump(\"a\")); assertEquals(\"a\", StringUtil.underlineToCamelhump(\"a\")); assertEquals(\"a\", StringUtil.underlineToCamelhump(\"a\")); assertEquals(\"a\", StringUtil.underlineToCamelhump(\"a\")); assertEquals(\"a\", StringUtil.underlineToCamelhump(\"a\")); }"
    },
    {
        "original_path": "greenrobot_essentials###greenrobot_essentials/java-essentials/src/test/java/org/greenrobot/essentials/StringUtilsTest###testFindLinesContaining",
        "generated_path": "StringUtilsTest###testFindLinesContaining.java",
        "Compile_result": 1,
        "Test_result": 0,
        "Gen_Test": "@Test public void testFindLinesContaining() { List<String> lines = StringUtils.findLinesContaining(\"This is a test text\", \"This is a test text\"); assertEquals(2, lines.size()); assertEquals(\"This is a test text\", lines.get(0)); assertEquals(\"This is a test text\", lines.get(1)); assertEquals(\"This is a test text\", lines.get(2)); assertEquals(\"This is a test text\", lines.get(3)); assertEquals(\"This is a test text\", lines.get(4)); assertEquals(\"This is a test text\", lines.get(5)); assertEquals(\"This is a test text\", lines.get(6)); assertEquals(\"This is a test text\", lines.get(7)); assertEquals(\"This is a test text\", lines.get(8)); assertEquals(\"This is a test text\", lines.get(9)); assertEquals(\"This is a test text\", lines.get(10)); assertEquals(\"This is a test text\", lines.get(11)); assertEquals(\"This is a test text\", lines.get(12)); assertEquals(\"This is a test text\", lines.get(13)); assertEquals(\"This is a test text\", lines.get(14)); assertEquals(\"This is a test text\", lines.get(15)); }\n"
    },
    {
        "original_path": "greenrobot_essentials###greenrobot_essentials/java-essentials/src/test/java/org/greenrobot/essentials/collections/LongHashMapTest###testKeys",
        "generated_path": "LongHashMapTest###testKeys.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testKeys() { LongHashMap<String> map = new LongHashMap<String>(); for (int i = 0; i < 1000; i++) { map.put(\"key\" + i, \"value\" + i); } for (int i = 0; i < 1000; i++) { map.put(\"key\" + i, \"value\" + i); } for (int i = 0; i < 1000; i++) { map.put(\"key\" + i, \"value\" + i); } for (int i = 0; i < 1000; i++) { map.put(\"key\" + i, \"value\" + i); } for (int i = 0; i < 1000; i++) { map.put(\"key\" + i, \"value\" + i); } for (int i = 0; i < 1000; i++) { map.put(\"key\" + i, \"value\" + i); } for (int i = 0; i < 1000; i++) { map.put(\"key\" + i, \"value\" + i); } for (int i = 0; i < 1000; i++) { map.put(\"key\" + i, \"value\" + i); } for (int i = 0; i < 1000; i++) { map.put(\"key\" + i, \"value\" + i); } for (int i = 0; i < 1000; i++) { map.put(\"key\" + i, \"value\""
    },
    {
        "original_path": "greenrobot_essentials###greenrobot_essentials/java-essentials/src/test/java/org/greenrobot/essentials/collections/LongHashSetTest###testKeys",
        "generated_path": "LongHashSetTest###testKeys.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testKeys() { LongHashSet set = new LongHashSet(); set.add(1); set.add(2); set.add(3); set.add(4); set.add(5); set.add(6); set.add(7); set.add(8); set.add(9); set.add(10); set.add(11); set.add(12); set.add(13); set.add(14); set.add(15); set.add(13); set.add(14); set.add(15); set.add(14); set.add(14); set.add(14); set.add(14); set.add(14); set.add(14); set.add(14); set.add(14); set.add(14); set.add(14); set.add(14); set.add(14); set.add(14); set.add(14); set.add(14); set.add(14); set.add(14); set.add(14); set.add(14); set.add(14); set.add(14); set.add(14); set.add(14); set.add(14); set.add(14); set.add(14); set.add(14); set.add(14); set.add(14); set.add(14); set.add(14); set.add(14); set."
    },
    {
        "original_path": "greenrobot_essentials###greenrobot_essentials/java-essentials/src/test/java/org/greenrobot/essentials/hash/PrimitiveDataChecksumTest###testUpdateLong",
        "generated_path": "PrimitiveDataChecksumTest###testUpdateLong.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testUpdateLong() throws Exception { Checksum checksum = new PrimitiveDataChecksum(new Checksum()); checksum.updateLong(1); }\n"
    },
    {
        "original_path": "greenrobot_essentials###greenrobot_essentials/java-essentials/src/test/java/org/greenrobot/essentials/collections/LongHashMapTest###testEntries",
        "generated_path": "LongHashMapTest###testEntries.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testEntries() { LongHashMap<String> map = new LongHashMap<String>(); for (int i = 0; i < 10; i++) { map.put(i, \"test\"); } for (int i = 0; i < 10; i++) { map.put(i, \"test\"); } for (int i = 0; i < 10; i++) { map.put(i, \"test\"); } for (int i = 0; i < 10; i++) { map.put(i, \"test\"); } for (int i = 0; i < 10; i++) { map.put(i, \"test\"); } for (int i = 0; i < 10; i++) { map.put(i, \"test\"); } for (int i = 0; i < 10; i++) { map.put(i, \"test\"); } for (int i = 0; i < 10; i++) { map.put(i, \"test\"); for (int i = 0; i < 10; i++) { map.put(i, \"test\"); for (int i = 0; i < 10; i++) { map.put(i, \"test\"); } for (int i = 0; i < 10; i++) { map.put(i, \"test\"); } for (int i = 0; i < 10; i++) { map.put(i, \"test\"); for (int i = 0; i < 10;"
    },
    {
        "original_path": "greenrobot_essentials###greenrobot_essentials/java-essentials/src/test/java/org/greenrobot/essentials/hash/PrimitiveDataChecksumTest###testUpdateInt",
        "generated_path": "PrimitiveDataChecksumTest###testUpdateInt.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testUpdateInt() throws Exception { Checksum checksum = new PrimitiveDataChecksum(new Checksum()); checksum.updateInt(1); }\n"
    },
    {
        "original_path": "matteobaccan_owner###matteobaccan_owner/owner/src/test/java/org/aeonbits/owner/util/UtilTest###testReverse",
        "generated_path": "UtilTest###testReverse.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testReverse() throws Exception { assertEquals(0, Util.now()); assertEquals(0, Util.now()); assertEquals(0, Util.now()); assertEquals(0, Util.now()); assertEquals(0, Util.now()); assertEquals(0, Util.now()); assertEquals(0, Util.now()); assertEquals(0, Util.now()); assertEquals(0, Util.now()); assertEquals(0, Util.now()); assertEquals(0, Util.now()); assertEquals(0, Util.now()); assertEquals(0, Util.now()); assertEquals(0, Util.now()); assertEquals(0, Util.now()); assertEquals(0, Util.now()); assertEquals(0, Util.now()); assertEquals(0, Util.now()); assertEquals(0, Util.now()); assertEquals(0, Util.now()); assertEquals(0, Util.now()); assertEquals(0, Util.now()); assertEquals(0, Util.now()); assertEquals(0, Util.now()); assertEquals(0, Util.now()); assertEquals(0, Util.now()); assertEquals(0, Util.now()); assertEquals(0, Util.now()); assertEquals(0, Util.now()); assertEquals(0, Util.now()); assertEquals(0, Util.now()); assertEquals(0, Util.now()); assertEquals(0, Util.now()); assertEquals(0, Util.now()); }\n"
    },
    {
        "original_path": "twitter_hbc###twitter_hbc/hbc-core/src/test/java/com/twitter/hbc/SitestreamControllerTest###testAddUser",
        "generated_path": "SitestreamControllerTest###testAddUser.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test(expected = IOException.class) public void testAddUserThrowsException() throws IOException, ControlStreamException { String streamId = \"streamId\"; long userId = 1L; try { controller.addUser(streamId, userId); } catch (IOException e) { throw new IOException(e); } }\n"
    },
    {
        "original_path": "twitter_hbc###twitter_hbc/hbc-core/src/test/java/com/twitter/hbc/SitestreamControllerTest###testRemoveUsers",
        "generated_path": "SitestreamControllerTest###testRemoveUsers.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test(expected = IllegalArgumentException.class) public void testRemoveUsersTooManyUserIds() throws IOException, ControlStreamException { controller.removeUsers(STREAM_ID, Arrays.asList(1L, 2L, 3L)); }\n"
    },
    {
        "original_path": "twitter_hbc###twitter_hbc/hbc-core/src/test/java/com/twitter/hbc/httpclient/RestartableHttpClientTest###testRestart",
        "generated_path": "RestartableHttpClientTest###testRestart.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testRestart() throws IOException, ClientProtocolException { HttpParams params = new HttpParams(); params.setHeader(\"Accept\", \"application/json\"); params.setHeader(\"Content-Type\", \"application/json\"); params.setHeader(\"Accept-Encoding\", \"gzip\"); params.setHeader(\"Accept-Encoding\", \"gzip\"); params.setHeader(\"Accept-Encoding\", \"gzip\"); params.setHeader(\"Accept-Encoding\", \"gzip\"); params.setHeader(\"Accept-Encoding\", \"gzip\"); params.setHeader(\"Accept-Encoding\", \"gzip\"); params.setHeader(\"Accept-Encoding\", \"gzip\"); params.setHeader(\"Accept-Encoding\", \"gzip\"); params.setHeader(\"Accept-Encoding\", \"gzip\"); params.setHeader(\"Accept-Encoding\", \"gzip\"); params.setHeader(\"Accept-Encoding\", \"gzip\"); params.setHeader(\"Accept-Encoding\", \"gzip\"); params.setHeader(\"Accept-Encoding\", \"gzip\"); params.setHeader(\"Accept-Encoding\", \"gzip\"); params.setHeader(\"Accept-Encoding\", \"gzip\"); params.setHeader(\"Accept-Encoding\", \"gzip\"); params.setHeader(\"Accept-Encoding\", \"gzip\"); params.setHeader(\"Accept-Encoding\", \"gzip\"); params.setHeader(\"Accept-Encoding\", \"gzip\"); params.setHeader(\"Accept-Encoding\", \"gzip\"); params.setHeader(\"Accept-Encoding\", \"gzip\"); params.setHeader(\"Accept-Encoding\", \"gzip\"); params.setHeader(\"Accept"
    },
    {
        "original_path": "twitter_hbc###twitter_hbc/hbc-core/src/test/java/com/twitter/hbc/SitestreamControllerTest###testGetInfo",
        "generated_path": "SitestreamControllerTest###testGetInfo.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test(expected = IOException.class) public void testGetInfo() throws IOException, ControlStreamException { String streamId = \"streamId\"; String info = \"info\"; String response = \"info\"; String responseContent = \"info\"; String responseContent2 = \"info\"; String responseContent3 = \"info\"; String responseContent4 = \"info\"; String responseContent5 = \"info\"; String responseContent6 = \"info\"; String responseContent7 = \"info\"; String responseContent8 = \"info\"; String response = \"info\"; Mockito.when(client.execute(Mockito.any(HttpUriRequest.class))).thenReturn(new MockResponse(responseContent, responseContent6, responseContent7, responseContent5, responseContent6, responseContent4, responseContent5, responseContent6, responseContent5, responseContent6, responseContent6, responseContent7, responseContent6, responseContent6, responseContent7, responseContent6, responseContent6, responseContent6, responseContent6, responseContent6, responseContent6, responseContent6, responseContent6, responseContent6, responseContent6, responseContent7, responseContent6, responseContent6, responseContent6, responseContent6, responseContent6, responseContent6, responseContent6, responseContent6, responseContent6, responseContent6, responseContent6, responseContent6, responseContent6, responseContent6, responseContent6, responseContent6, responseContent6, responseContent6, responseContent6, response"
    },
    {
        "original_path": "twitter_hbc###twitter_hbc/hbc-twitter4j/src/test/java/com/twitter/hbc/twitter4j/JSONObjectParserTest###testParseStatusDelete",
        "generated_path": "JSONObjectParserTest###testParseStatusDelete.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void parseStatusDelete() throws JSONException { JSONObject statusDelete = new JSONObject(); statusDelete.put(\"status\", \"deleted\"); statusDelete.put(\"id\", 1); statusDelete.put(\"user_id\", 2); statusDelete.put(\"status\", \"deleted\"); statusDelete.put(\"status_id\", 3); StatusDeletionNotice statusDeletionNotice = JSONObjectParser.parseStatusDelete(statusDelete); Assert.assertEquals(3, statusDeletionNotice.getStatusId()); Assert.assertEquals(2, statusDeletionNotice.getUserId()); Assert.assertEquals(3, statusDeletionNotice.compareTo(statusDeletionNotice)); }\n"
    },
    {
        "original_path": "twitter_hbc###twitter_hbc/hbc-twitter4j/src/test/java/com/twitter/hbc/twitter4j/JSONObjectParserTest###testParseDisconnectMessage",
        "generated_path": "JSONObjectParserTest###testParseDisconnectMessage.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testParseDisconnectMessage() throws JSONException { JSONObject json = new JSONObject(); json.put(\"disconnect\", json); DisconnectMessage disconnectMessage = JSONObjectParser.parseDisconnectMessage(json); Assert.assertEquals(disconnectMessage.getCode(), 200); Assert.assertEquals(disconnectMessage.getStreamName(), \"stream\"); Assert.assertEquals(disconnectMessage.getReason(), \"reason\"); }\n"
    },
    {
        "original_path": "twitter_hbc###twitter_hbc/hbc-core/src/test/java/com/twitter/hbc/SitestreamControllerTest###testRemoveUser",
        "generated_path": "SitestreamControllerTest###testRemoveUser.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test(expected = IOException.class) public void removeUserTest() throws IOException, ControlStreamException { String streamId = \"streamId\"; long userId = 1L; controller.removeUser(streamId, userId); }\n"
    },
    {
        "original_path": "twitter_hbc###twitter_hbc/hbc-core/src/test/java/com/twitter/hbc/SitestreamControllerTest###testAddUsers",
        "generated_path": "SitestreamControllerTest###testAddUsers.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test(expected = IllegalArgumentException.class) public void testAddUsersTooManyUserIds() throws IOException, ControlStreamException { Collection<Long> userIds = new ArrayList<Long>(); userIds.add(1L); userIds.add(2L); }\n"
    },
    {
        "original_path": "twitter_hbc###twitter_hbc/hbc-core/src/test/java/com/twitter/hbc/common/IOUtilsTest###testReadFully",
        "generated_path": "IOUtilsTest###testReadFully.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testReadFully() throws IOException { char[] buffer = new char[10]; IOUtils.readFully(new StringReader(buffer), buffer, 0); assertEquals(10, buffer.length); }\n"
    },
    {
        "original_path": "spotify_docker-maven-plugin###spotify_docker-maven-plugin/src/test/java/com/spotify/docker/UtilsTest###testSaveImage",
        "generated_path": "UtilsTest###testSaveImage.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testSaveImage() throws Exception { final String imageName = \"imageName\"; final Path tarArchivePath = Files.createTempDirectory(); Utils.saveImage(docker, imageName, tarArchivePath, log); Assert.assertTrue(tarArchivePath.toFile().exists()); Assert.assertTrue(tarArchivePath.toFile().exists()); Assert.assertTrue(tarArchivePath.toFile().exists()); Assert.assertTrue(tarArchivePath.toFile().exists()); Assert.assertTrue(tarArchivePath.toFile().exists()); Assert.assertTrue(tarArchivePath.toFile().exists()); Assert.assertTrue(tarArchivePath.toFile().exists()); Assert.assertTrue(tarArchivePath.toFile().exists()); Assert.assertTrue(tarArchivePath.toFile().exists()); Assert.assertTrue(tarArchivePath.toFile().exists()); Assert.assertTrue(tarArchivePath.toFile().exists()); Assert.assertTrue(tarArchivePath.toFile().exists()); Assert.assertTrue(tarArchivePath.toFile().exists()); Assert.assertTrue(tarArchivePath.toFile().exists()); Assert.assertTrue(tarArchivePath.toFile().exists()); Assert.assertTrue(tarArchivePath.toFile().exists()); Assert.assertTrue(tarArchivePath.toFile().exists()); Assert.assertTrue(tarArchivePath.toFile().exists()); Assert.assertTrue(tarArchivePath.toFile().exists()); Assert.assertTrue(tar"
    },
    {
        "original_path": "spotify_docker-maven-plugin###spotify_docker-maven-plugin/src/test/java/com/spotify/docker/UtilsTest###testParseImageName",
        "generated_path": "UtilsTest###testParseImageName.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testParseImageName() throws Exception { String[] result = Utils.parseImageName(\"https: assertEquals(2, result.length); assertEquals(\"https\", result[0]); assertEquals(\"https\", result[1]); assertEquals(\"https\", result[2]); assertEquals(\"https\", result[3]); assertEquals(\"https\", result[4]); assertEquals(\"https\", result[5]); assertEquals(\"https\", result[6]); assertEquals(\"https\", result[7]); assertEquals(\"https\", result[8]); assertEquals(\"https\", result[9]); assertEquals(\"https\", result[10]); assertEquals(\"https\", result[11]); assertEquals(\"https\", result[12]); assertEquals(\"https\", result[13]); assertEquals(\"https\", result[13]); assertEquals(\"https\", result[14]); assertEquals(\"https\", result[15]); assertEquals(\"https\", result[16]); assertEquals(\"https\", result[17]); assertEquals(\"https\", result[18]); assertEquals(\"https\", result[19]); assertEquals(\"https\", result[20]); assertEquals(\"https\", result[21]); assertEquals(\"https\", result[23]); assertEquals(\"https\", result[23]); assertEquals(\"https\", result[23]); assertEquals(\"https\", result[23]); assertEquals(\"https\", result[23]); assertEquals(\"https\", result[23]); }\n"
    },
    {
        "original_path": "spotify_docker-maven-plugin###spotify_docker-maven-plugin/src/test/java/com/spotify/docker/UtilsTest###testPushImage",
        "generated_path": "UtilsTest###testPushImage.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testPushImage() throws Exception { Utils.pushImage(dockerClient, \"imageName\", null, null, null, 0, 0, true); Assert.assertTrue(dockerClient.getImages().size() > 0); Assert.assertTrue(dockerClient.getBuilds().size() > 0); Assert.assertTrue(dockerClient.getBuilds().get(0).getTags().size() > 0); Assert.assertTrue(dockerClient.getBuilds().get(1).getTags().size() > 0); Assert.assertTrue(dockerClient.getBuilds().get(2).getTags().size() > 0); Assert.assertTrue(dockerClient.getBuilds().get(3).getTags().size() > 0); Assert.assertTrue(dockerClient.getBuilds().get(4).getTags().size() > 0); Assert.assertTrue(dockerClient.getBuilds().get(5).getTags().size() > 0); Assert.assertTrue(dockerClient.getBuilds().get(6).getTags().size() > 0); Assert.assertTrue(dockerClient.getBuilds().get(7).getTags().size() > 0); Assert.assertTrue(dockerClient.getBuilds().get(8).getTags().size() > 0); Assert.assertTrue(dockerClient.getBuilds().get(9).getTags().size() > 0); Assert.assertTrue(dockerClient.getBuilds().get(10).getTags().size() >"
    },
    {
        "original_path": "Stratio_cassandra-lucene-index###Stratio_cassandra-lucene-index/plugin/src/test/java/com/stratio/cassandra/lucene/schema/mapping/FloatMapperTest###testIndexedField",
        "generated_path": "FloatMapperTest###testIndexedField.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testIndexedField() { FloatMapper mapper = floatMapper().boost(1.0f).build(\"field\"); Field field = mapper.indexedField(\"field\", 3.0f).orElseThrow(() -> new IllegalStateException(\"\")); assertTrue(field.isPresent()); assertEquals(3.0f, field.get(0).getValue()); }\n"
    },
    {
        "original_path": "Stratio_cassandra-lucene-index###Stratio_cassandra-lucene-index/plugin/src/test/java/com/stratio/cassandra/lucene/search/sort/SimpleSortFieldTest###testHashCode",
        "generated_path": "SimpleSortFieldTest###testHashCode.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void testHashCode() { SimpleSortField sortField1 = new SimpleSortField(\"field\", true); SimpleSortField sortField2 = new SimpleSortField(\"field\", true); assertEquals(sortField1, sortField2); assertEquals(sortField1.hashCode(), sortField2.hashCode()); }\n"
    },
    {
        "original_path": "Stratio_cassandra-lucene-index###Stratio_cassandra-lucene-index/plugin/src/test/java/com/stratio/cassandra/lucene/schema/mapping/DoubleMapperTest###testIndexedField",
        "generated_path": "DoubleMapperTest###testIndexedField.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testIndexedField() { DoubleMapper mapper = doubleMapper().boost(1f).build(\"field\"); DoubleField field = mapper.indexedField(\"field\", 1.0).orElseThrow(() -> new AssertionError(\"No such field\")); assertTrue(field.isPresent()); assertEquals(\"field\", field.get().getName()); assertEquals(1.0f, field.get().getBoost(), DoubleMapper.DEFAULT_BOOST); }\n"
    },
    {
        "original_path": "Stratio_cassandra-lucene-index###Stratio_cassandra-lucene-index/plugin/src/test/java/com/stratio/cassandra/lucene/search/SearchTest###testValidate",
        "generated_path": "SearchTest###testValidate.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void validate() { Search search = new Search(Collections.emptyList(), Collections.emptyList(), Collections.emptyList(), IndexPagingState.NO_PAGING, false); assertTrue(search.validate(new Schema()).query(new Schema()).query(new Schema()).query(new Schema()).query(new Schema()).query(new Schema()).query(new Schema()).query(new Schema()).query(new Schema()).query(new Schema()).query(new Schema()).query(new Schema()).query(new Schema()).query(new Schema()).query(new Schema()).query(new Schema()).query(new Schema()).query(new Schema()).query(new Schema()).query(new Schema()).query(new Schema()).query(new Schema()).query(new Schema()).query(new Schema()).query(new Schema()).query(new Schema()).query(new Schema()).query(new Schema()).query(new Schema()).query(new Schema()).query(new Schema()).query(new Schema()).query(new Schema()).query(new Schema()).query(new Schema()).query(new Schema()).query(new Schema()).query(new Schema()).query(new Schema()).query(new Schema()).query(new Schema()).query(new Schema()).query(new Schema()).query(new Schema()).query(new Schema()).query(new"
    },
    {
        "original_path": "Stratio_cassandra-lucene-index###Stratio_cassandra-lucene-index/plugin/src/test/java/com/stratio/cassandra/lucene/schema/mapping/LongMapperTest###testIndexedField",
        "generated_path": "LongMapperTest###testIndexedField.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testIndexedField() { LongMapper mapper = longMapper().boost(1.0f).build(\"field\"); LongField field = mapper.indexedField(\"field\", 1L).orElseThrow(() -> new IllegalStateException(\"\")); assertTrue(field instanceof LongField); }\n"
    },
    {
        "original_path": "Stratio_cassandra-lucene-index###Stratio_cassandra-lucene-index/plugin/src/test/java/com/stratio/cassandra/lucene/search/sort/GeoDistanceSortFieldTest###testHashCode",
        "generated_path": "GeoDistanceSortFieldTest###testHashCode.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void testHashCode() { GeoDistanceSortField geoDistanceSortField1 = new GeoDistanceSortField(\"field\", true, 0.0, 0.0); GeoDistanceSortField geoDistanceSortField2 = new GeoDistanceSortField(\"field\", true, 0.0, 0.0); assertEquals(geoDistanceSortField1, geoDistanceSortField2); assertEquals(geoDistanceSortField1.hashCode(), geoDistanceSortField2.hashCode()); }\n"
    },
    {
        "original_path": "Stratio_cassandra-lucene-index###Stratio_cassandra-lucene-index/plugin/src/test/java/com/stratio/cassandra/lucene/search/sort/SimpleSortFieldTest###testEquals",
        "generated_path": "SimpleSortFieldTest###testEquals.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testEquals() { SimpleSortField simpleSortField1 = new SimpleSortField(\"field\", true); SimpleSortField simpleSortField2 = new SimpleSortField(\"field\", true); SimpleSortField simpleSortField3 = new SimpleSortField(\"field\", true); SimpleSortField simpleSortField4 = new SimpleSortField(\"field\", true); SimpleSortField simpleSortField5 = new SimpleSortField(\"field\", true); SimpleSortField simpleSortField6 = new SimpleSortField(\"field\", true); SimpleSortField simpleSortField7 = new SimpleSortField(\"field\", true); SimpleSortField simpleSortField8 = new SimpleSortField(\"field\", true); SimpleSortField simpleSortField9 = new SimpleSortField(\"field\", true); SimpleSortField simpleSortField10 = new SimpleSortField(\"field\", true); SimpleSortField simpleSortField11 = new SimpleSortField(\"field\", true); SimpleSortField simpleSortField12 = new SimpleSortField(\"field\", true); SimpleSortField simpleSortField13 = new SimpleSortField(\"field\", true); SimpleSortField simpleSortField16 = new SimpleSortField(\"field\", true); SimpleSortField simpleSortField21 = new SimpleSortField(\"field\", true); SimpleSortField simpleSortField22 = new SimpleSortField(\"field\", true); SimpleSortField simpleSortField23 = new SimpleSortField(\"field\", true); SimpleSortField simpleSortField24 = new SimpleSortField(\"field\", true); SimpleSortField simple"
    },
    {
        "original_path": "Stratio_cassandra-lucene-index###Stratio_cassandra-lucene-index/plugin/src/test/java/com/stratio/cassandra/lucene/schema/mapping/IntegerMapperTest###testIndexedField",
        "generated_path": "IntegerMapperTest###testIndexedField.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testIndexedField() { IntegerMapper mapper = integerMapper().boost(1f).build(\"field\"); IntegerField field = mapper.indexedField(\"field\", 1).get(); assertEquals(1, field.getValue()); assertEquals(\"field\", field.getName()); assertEquals(IntegerMapper.DEFAULT_BOOST, field.getBoost()); }\n"
    },
    {
        "original_path": "Stratio_cassandra-lucene-index###Stratio_cassandra-lucene-index/plugin/src/test/java/com/stratio/cassandra/lucene/search/SearchTest###testPostProcessingFields",
        "generated_path": "SearchTest###testPostProcessingFields.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void postProcessingFields() { assertThat(search.postProcessingFields(), containsInAnyOrder(\"id\", \"title\")); assertThat(search.postProcessingFields(), containsInAnyOrder(\"title\", \"title2\")); assertThat(search.postProcessingFields(), containsInAnyOrder(\"title\", \"title3\")); assertThat(search.postProcessingFields(), containsInAnyOrder(\"title4\", \"title5\")); assertThat(search.postProcessingFields(), containsInAnyOrder(\"title5\", \"title6\")); assertThat(search.postProcessingFields(), containsInAnyOrder(\"title5\", \"title7\")); assertThat(search.postProcessingFields(), containsInAnyOrder(\"title6\", \"title7\")); assertThat(search.postProcessingFields(), containsInAnyOrder(\"title7\", \"title8\")); assertThat(search.postProcessingFields(), containsInAnyOrder(\"title7\", \"title8\")); assertThat(search.postProcessingFields(), containsInAnyOrder(\"title7\", \"title8\")); assertThat(search.postProcessingFields(), containsInAnyOrder(\"title7\", \"title8\")); assertThat(search.postProcessingFields(), containsInAnyOrder(\"title7\", \"title7\")); assertThat(search.postProcessingFields(), containsInAnyOrder(\"title7\", \"title7\")); assertThat(search.postProcessingFields(), containsInAnyOrder(\"title7\", \"title7\")); }\n"
    },
    {
        "original_path": "Stratio_cassandra-lucene-index###Stratio_cassandra-lucene-index/plugin/src/test/java/com/stratio/cassandra/lucene/search/sort/GeoDistanceSortFieldTest###testEquals",
        "generated_path": "GeoDistanceSortFieldTest###testEquals.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void testEquals() { GeoDistanceSortField sortField1 = new GeoDistanceSortField(\"field\", true, 0.0, 0.0); GeoDistanceSortField sortField2 = new GeoDistanceSortField(\"field\", true, 0.0, 0.0); assertTrue(sortField1.equals(sortField2)); assertTrue(sortField1.equals(sortField2)); }\n"
    },
    {
        "original_path": "Stratio_cassandra-lucene-index###Stratio_cassandra-lucene-index/plugin/src/test/java/com/stratio/cassandra/lucene/schema/SchemaTest###testIndexableFields",
        "generated_path": "SchemaTest###testIndexableFields.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testIndexableFields() { Columns columns = new Columns(); columns.addColumn(\"name\", \"value\"); columns.addColumn(\"age\", \"value\"); columns.addColumn(\"age\", \"value\"); columns.addColumn(\"age\", \"value\"); columns.addColumn(\"age\", \"value\"); columns.addColumn(\"age\", \"value\"); columns.addColumn(\"age\", \"value\"); columns.addColumn(\"age\", \"value\"); columns.addColumn(\"age\", \"value\"); columns.addColumn(\"age\", \"value\"); columns.addColumn(\"age\", \"value\"); columns.addColumn(\"age\", \"value\"); columns.addColumn(\"age\", \"value\"); columns.addColumn(\"age\", \"value\"); columns.addColumn(\"age\", \"value\"); columns.addColumn(\"age\", \"value\"); columns.addColumn(\"age\", \"value\"); columns.addColumn(\"age\", \"value\"); columns.addColumn(\"age\", \"value\"); columns.addColumn(\"age\", \"value\"); columns.addColumn(\"age\", \"value\"); columns.addColumn(\"age\", \"value\"); columns.addColumn(\"age\", \"value\"); columns.addColumn(\"age\", \"value\"); columns.addColumn(\"age\", \"value\"); columns.addColumn(\"age\", \"value\"); columns.addColumn(\"age\", \"value\"); columns.addColumn(\"age\", \"value\"); columns.addColumn(\"age\", \"value\"); columns.addColumn(\"age\", \"value\"); columns."
    },
    {
        "original_path": "jmrozanec_cron-utils###jmrozanec_cron-utils/src/test/java/com/cronutils/model/time/generator/BetweenFieldValueGeneratorTest###testGenerateNextValue",
        "generated_path": "BetweenFieldValueGeneratorTest###testGenerateNextValue.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGenerateNextValue() throws NoSuchValueException { final BetweenFieldValueGenerator generator = new BetweenFieldValueGenerator(new CronField(\"* * * * *\")); assertEquals(0, generator.generateNextValue(0)); assertEquals(1, generator.generateNextValue(1)); assertEquals(2, generator.generateNextValue(2)); assertEquals(3, generator.generateNextValue(3)); assertEquals(4, generator.generateNextValue(4)); assertEquals(5, generator.generateNextValue(5)); assertEquals(6, generator.generateNextValue(6)); assertEquals(7, generator.generateNextValue(7)); assertEquals(8, generator.generateNextValue(8)); assertEquals(9, generator.generateNextValue(9)); }\n"
    },
    {
        "original_path": "jmrozanec_cron-utils###jmrozanec_cron-utils/src/test/java/com/cronutils/model/time/generator/AndFieldValueGeneratorTest###testGenerateCandidatesNotIncludingIntervalExtremes",
        "generated_path": "AndFieldValueGeneratorTest###testGenerateCandidatesNotIncludingIntervalExtremes.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGenerateCandidatesNotIncludingIntervalExtremes() throws NoSuchValueException { final List<Integer> candidates = new AndFieldValueGenerator(new CronField(\"0/1 * * * *?\")).generateCandidatesNotIncludingIntervalExtremes(0, 10); assertEquals(10, candidates.size()); assertEquals(10, candidates.get(0)); assertEquals(10, candidates.get(1)); assertEquals(10, candidates.get(2)); assertEquals(10, candidates.get(3)); assertEquals(10, candidates.get(4)); assertEquals(10, candidates.get(5)); assertEquals(10, candidates.get(6)); assertEquals(10, candidates.get(7)); assertEquals(10, candidates.get(8)); assertEquals(10, candidates.get(9)); assertEquals(10, candidates.get(10)); assertEquals(10, candidates.get(11)); assertEquals(10, candidates.get(12)); assertEquals(10, candidates.get(13)); assertEquals(10, candidates.get(14)); assertEquals(10, candidates.get(15)); assertEquals(10, candidates.get(16)); assertEquals(10, candidates.get(17)); assertEquals(10, candidates.get(18)); assertEquals(10, candidates.get(19)); assertEquals(10, candidates.get(19)); assertEquals(10, candidates.get(19)); assertEquals(10, candidates.get(19"
    },
    {
        "original_path": "jmrozanec_cron-utils###jmrozanec_cron-utils/src/test/java/com/cronutils/model/time/generator/EveryDayOfWeekValueGeneratorTest###testGenerateNextValue",
        "generated_path": "EveryDayOfWeekValueGeneratorTest###testGenerateNextValue.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGenerateNextValue() throws NoSuchValueException { EveryDayOfWeekValueGenerator generator = new EveryDayOfWeekValueGenerator(); for (int i = 1; i <= 31; i++) { int value = generator.generateNextValue(i); assertEquals(i, value); } }\n"
    },
    {
        "original_path": "jmrozanec_cron-utils###jmrozanec_cron-utils/src/test/java/com/cronutils/model/time/generator/EveryDayOfWeekValueGeneratorTest###testGenerateCandidatesNotIncludingIntervalExtremes",
        "generated_path": "EveryDayOfWeekValueGeneratorTest###testGenerateCandidatesNotIncludingIntervalExtremes.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGenerateCandidatesNotIncludingIntervalExtremes() throws NoSuchValueException { EveryDayOfWeekValueGenerator generator = new EveryDayOfWeekValueGenerator(); List<Integer> candidates = generator.generateCandidatesNotIncludingIntervalExtremes(1, 2); assertEquals(2, candidates.size()); assertEquals(1, candidates.get(0)); assertEquals(2, candidates.get(1)); assertEquals(2, candidates.get(2)); }\n"
    },
    {
        "original_path": "jmrozanec_cron-utils###jmrozanec_cron-utils/src/test/java/com/cronutils/model/time/generator/EveryFieldValueGeneratorTest###testGeneratePreviousValue",
        "generated_path": "EveryFieldValueGeneratorTest###testGeneratePreviousValue.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGeneratePreviousValue() throws NoSuchValueException { final CronField cronField = new CronField(\"* * * * *\"); cronField.setExpression(new Every(\"* * * * *\")); assertEquals(0, generator.generatePreviousValue(0)); assertEquals(1, generator.generatePreviousValue(1)); assertEquals(2, generator.generatePreviousValue(2)); assertEquals(3, generator.generatePreviousValue(3)); assertEquals(4, generator.generatePreviousValue(4)); assertEquals(5, generator.generatePreviousValue(5)); assertEquals(6, generator.generatePreviousValue(6)); assertEquals(7, generator.generatePreviousValue(7)); assertEquals(8, generator.generatePreviousValue(8)); assertEquals(9, generator.generatePreviousValue(9)); assertEquals(10, generator.generatePreviousValue(10)); assertEquals(11, generator.generatePreviousValue(11)); assertEquals(12, generator.generatePreviousValue(12)); assertEquals(14, generator.generatePreviousValue(14)); assertEquals(15, generator.generatePreviousValue(15)); assertEquals(16, generator.generatePreviousValue(16)); assertEquals(17, generator.generatePreviousValue(17)); assertEquals(18, generator.generatePreviousValue(18)); assertEquals(18, generator.generatePreviousValue(18)); assertEquals(18, generator.generatePreviousValue(18)); assertEquals(18, generator.generatePreviousValue(18));"
    },
    {
        "original_path": "jmrozanec_cron-utils###jmrozanec_cron-utils/src/test/java/com/cronutils/model/time/generator/FieldValueGeneratorFactoryTest###testCreateDayOfWeekValueGeneratorInstance",
        "generated_path": "FieldValueGeneratorFactoryTest###testCreateDayOfWeekValueGeneratorInstance.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public final void createDayOfWeekValueGeneratorInstance_On() { final CronField cronField = new CronField(\"* * * *\"); final int year = 2014; final int month = 1; final WeekDay mondayDoWValue = WeekDay.WEDNESDAY; final FieldValueGenerator generator = FieldValueGeneratorFactory.createDayOfWeekValueGeneratorInstance(cronField, year, month, mondayDoWValue); assertTrue(generator instanceof OnDayOfWeekValueGenerator); }\n"
    },
    {
        "original_path": "jmrozanec_cron-utils###jmrozanec_cron-utils/src/test/java/com/cronutils/model/time/generator/EveryDayOfWeekValueGeneratorTest###testGeneratePreviousValue",
        "generated_path": "EveryDayOfWeekValueGeneratorTest###testGeneratePreviousValue.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGeneratePreviousValue() throws NoSuchValueException { EveryDayOfWeekValueGenerator generator = new EveryDayOfWeekValueGenerator(); for (int i = 0; i < 24; i++) { int value = generator.generatePreviousValue(i); assertEquals(i, value); } }\n"
    },
    {
        "original_path": "jmrozanec_cron-utils###jmrozanec_cron-utils/src/test/java/com/cronutils/model/time/generator/OnFieldValueGeneratorTest###testGenerateCandidatesNotIncludingIntervalExtremes",
        "generated_path": "OnFieldValueGeneratorTest###testGenerateCandidatesNotIncludingIntervalExtremes.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGenerateCandidatesNotIncludingIntervalExtremes() throws NoSuchValueException { final CronField cronField = new CronField(new On(new On(new Date()), new Time(0, 0))); final List<Integer> result = generator.generateCandidatesNotIncludingIntervalExtremes(0, 10); assertEquals(2, result.size()); assertEquals(0, result.get(0)); }\n"
    },
    {
        "original_path": "jmrozanec_cron-utils###jmrozanec_cron-utils/src/test/java/com/cronutils/parser/CronParserFieldTest###testParse",
        "generated_path": "CronParserFieldTest###testParse.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public final void testParse() throws Exception { CronParserField c = new CronParserField(CronFieldName.DAY_OF_WEEK, FieldConstraints.ALL_FIELDS, true); assertEquals(new CronField(CronFieldName.DAY_OF_WEEK, new CronParserField(CronFieldName.DAY_OF_WEEK, FieldConstraints.ALL_FIELDS, true), new CronParserField(CronFieldName.DAY_OF_WEEK, FieldConstraints.ALL_FIELDS, true)).getParser().parse(\"0 0 0 0 0 0 L\").getConstraints()); }\n"
    },
    {
        "original_path": "jmrozanec_cron-utils###jmrozanec_cron-utils/src/test/java/com/cronutils/model/time/generator/AlwaysFieldValueGeneratorTest###testGenerateCandidatesNotIncludingIntervalExtremes",
        "generated_path": "AlwaysFieldValueGeneratorTest###testGenerateCandidatesNotIncludingIntervalExtremes.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGenerateCandidatesNotIncludingIntervalExtremes() throws NoSuchValueException { List<Integer> candidates = generator.generateCandidatesNotIncludingIntervalExtremes(1, 2); assertEquals(2, candidates.size()); assertEquals(1, candidates.get(0)); assertEquals(2, candidates.get(1)); assertEquals(2, candidates.get(2)); }\n"
    },
    {
        "original_path": "jmrozanec_cron-utils###jmrozanec_cron-utils/src/test/java/com/cronutils/model/definition/CronDefinitionBuilderTest###testRegister",
        "generated_path": "CronDefinitionBuilderTest###testRegister.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test(expected = IllegalArgumentException.class) public void testRegisterMandatory() throws Exception { FieldDefinitionBuilder builder = new FieldDefinitionBuilder(); builder.register(new FieldDefinitionBuilder().withOptional(true).withFieldName(\"mandatory\")); }\n"
    },
    {
        "original_path": "jmrozanec_cron-utils###jmrozanec_cron-utils/src/test/java/com/cronutils/model/time/generator/FieldValueGeneratorFactoryTest###testForCronField",
        "generated_path": "FieldValueGeneratorFactoryTest###testForCronField.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public final void shouldReturnEveryFieldValueGeneratorForEvery() { final CronField cronField = new CronField(\"* * * *\"); final FieldExpression fieldExpression = new FieldExpression(SpecialChar.NONE); final FieldValueGenerator generator = FieldValueGeneratorFactory.forCronField(cronField); assertTrue(generator instanceof EveryFieldValueGenerator); }\n"
    },
    {
        "original_path": "jmrozanec_cron-utils###jmrozanec_cron-utils/src/test/java/com/cronutils/model/time/generator/OnDayOfMonthValueGeneratorTest###testGeneratePreviousValue",
        "generated_path": "OnDayOfMonthValueGeneratorTest###testGeneratePreviousValue.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test(expected = NoSuchValueException.class) public void testGeneratePreviousValue() throws NoSuchValueException { final CronField cronField = new CronField(\"0 0 0 * * *\"); final int year = 1900; final int month = 1; final int value = generator.generatePreviousValue(year); assertEquals(value, year); }\n"
    },
    {
        "original_path": "jmrozanec_cron-utils###jmrozanec_cron-utils/src/test/java/com/cronutils/model/time/generator/EveryFieldValueGeneratorTest###testIsMatch",
        "generated_path": "EveryFieldValueGeneratorTest###testIsMatch.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testIsMatch() throws NoSuchValueException { final CronField cronField = new CronField(\"* * * * *\"); final Every every = new Every(); cronField.setExpression(every); cronField.setPeriod(new Period(1, PeriodUnit.DAYS)); assertTrue(generator.isMatch(1)); assertTrue(generator.isMatch(2)); assertTrue(generator.isMatch(3)); assertTrue(generator.isMatch(4)); assertTrue(generator.isMatch(5)); assertTrue(generator.isMatch(6)); assertTrue(generator.isMatch(7)); assertTrue(generator.isMatch(8)); assertTrue(generator.isMatch(9)); assertTrue(generator.isMatch(10)); assertTrue(generator.isMatch(11)); assertTrue(generator.isMatch(12)); assertTrue(generator.isMatch(13)); assertTrue(generator.isMatch(14)); assertTrue(generator.isMatch(15)); assertTrue(generator.isMatch(16)); assertTrue(generator.isMatch(17)); assertTrue(generator.isMatch(18)); assertTrue(generator.isMatch(18)); assertTrue(generator.isMatch(18)); assertTrue(generator.isMatch(18)); assertTrue(generator.isMatch(18)); assertTrue(generator.isMatch(18)); assertTrue(generator.isMatch(18)); assertTrue(generator.isMatch(18)); assertTrue(generator.isMatch(18"
    },
    {
        "original_path": "jmrozanec_cron-utils###jmrozanec_cron-utils/src/test/java/com/cronutils/model/time/generator/BetweenFieldValueGeneratorTest###testGeneratePreviousValue",
        "generated_path": "BetweenFieldValueGeneratorTest###testGeneratePreviousValue.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGeneratePreviousValue() throws NoSuchValueException { final BetweenFieldValueGenerator generator = new BetweenFieldValueGenerator(new CronField(\"* * * * *\")); assertEquals(0, generator.generatePreviousValue(0)); assertEquals(1, generator.generatePreviousValue(1)); assertEquals(2, generator.generatePreviousValue(2)); assertEquals(3, generator.generatePreviousValue(3)); assertEquals(4, generator.generatePreviousValue(4)); assertEquals(5, generator.generatePreviousValue(5)); assertEquals(6, generator.generatePreviousValue(6)); assertEquals(7, generator.generatePreviousValue(7)); assertEquals(8, generator.generatePreviousValue(8)); assertEquals(9, generator.generatePreviousValue(9)); }\n"
    },
    {
        "original_path": "jmrozanec_cron-utils###jmrozanec_cron-utils/src/test/java/com/cronutils/model/time/generator/FieldValueGeneratorTest###testGenerateCandidates",
        "generated_path": "FieldValueGeneratorTest###testGenerateCandidates.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGenerateCandidates() throws NoSuchValueException { List<Integer> candidates = generator.generateCandidates(1, 2); Assert.assertEquals(2, candidates.size()); Assert.assertEquals(1, candidates.get(0)); Assert.assertEquals(2, candidates.get(1)); Assert.assertEquals(3, candidates.get(2)); Assert.assertEquals(4, candidates.get(3)); Assert.assertEquals(5, candidates.get(4)); Assert.assertEquals(6, candidates.get(5)); Assert.assertEquals(7, candidates.get(6)); Assert.assertEquals(8, candidates.get(7)); Assert.assertEquals(9, candidates.get(8)); }\n"
    },
    {
        "original_path": "jmrozanec_cron-utils###jmrozanec_cron-utils/src/test/java/com/cronutils/model/field/expression/EveryTest###testAsString",
        "generated_path": "EveryTest###testAsString.java",
        "Compile_result": 1,
        "Test_result": 0,
        "Gen_Test": "@Test public void testEvery() { Every every = new Every(new IntegerFieldValue(1)); assertEquals(\"1/1\", every.asString()); }\n"
    },
    {
        "original_path": "jmrozanec_cron-utils###jmrozanec_cron-utils/src/test/java/com/cronutils/model/time/generator/EveryDayOfWeekValueGeneratorTest###testIsMatch",
        "generated_path": "EveryDayOfWeekValueGeneratorTest###testIsMatch.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testIsMatch() throws NoSuchValueException { EveryDayOfWeekValueGenerator generator = new EveryDayOfWeekValueGenerator(); assertTrue(generator.isMatch(1)); assertTrue(generator.isMatch(2)); assertTrue(generator.isMatch(3)); assertTrue(generator.isMatch(4)); assertTrue(generator.isMatch(5)); assertTrue(generator.isMatch(6)); assertTrue(generator.isMatch(7)); assertTrue(generator.isMatch(8)); assertTrue(generator.isMatch(9)); assertTrue(generator.isMatch(10)); assertTrue(generator.isMatch(11)); assertTrue(generator.isMatch(12)); assertTrue(generator.isMatch(13)); assertTrue(generator.isMatch(14)); assertTrue(generator.isMatch(15)); assertTrue(generator.isMatch(16)); assertTrue(generator.isMatch(17)); assertTrue(generator.isMatch(18)); assertTrue(generator.isMatch(18)); assertTrue(generator.isMatch(18)); assertTrue(generator.isMatch(18)); assertTrue(generator.isMatch(18)); assertTrue(generator.isMatch(18)); assertTrue(generator.isMatch(18)); assertTrue(generator.isMatch(18)); assertTrue(generator.isMatch(18)); assertTrue(generator.isMatch(18)); assertTrue(generator.isMatch(18)); assertTrue(generator.isMatch(18)); assertTrue(generator"
    },
    {
        "original_path": "jmrozanec_cron-utils###jmrozanec_cron-utils/src/test/java/com/cronutils/model/time/generator/OnDayOfMonthValueGeneratorTest###testGenerateNextValue",
        "generated_path": "OnDayOfMonthValueGeneratorTest###testGenerateNextValue.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test(expected = NoSuchValueException.class) public void testGenerateNextValue() throws NoSuchValueException { final CronField cronField = new CronField(\"0 0 0 * * *\"); final int year = 1900; final int month = 1; final int value = generator.generateNextValue(year); assertEquals(year, value); }\n"
    },
    {
        "original_path": "jmrozanec_cron-utils###jmrozanec_cron-utils/src/test/java/com/cronutils/model/time/generator/EveryFieldValueGeneratorTest###testGenerateNextValue",
        "generated_path": "EveryFieldValueGeneratorTest###testGenerateNextValue.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test(expected = NoSuchValueException.class) public void testGenerateNextValue() throws NoSuchValueException { final CronField cronField = new CronField(\"* * * * *\"); generator = new EveryFieldValueGenerator(cronField); generator.generateNextValue(1); }\n"
    },
    {
        "original_path": "jmrozanec_cron-utils###jmrozanec_cron-utils/src/test/java/com/cronutils/model/time/generator/OnFieldValueGeneratorTest###testGenerateNextValue",
        "generated_path": "OnFieldValueGeneratorTest###testGenerateNextValue.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test(expected = NoSuchValueException.class) public void testGenerateNextValue() throws NoSuchValueException { final CronField cronField = new CronField(\"0 0 * * * *\"); final OnFieldValueGenerator generator = new OnFieldValueGenerator(cronField); generator.generateNextValue(0); }\n"
    },
    {
        "original_path": "jmrozanec_cron-utils###jmrozanec_cron-utils/src/test/java/com/cronutils/model/time/generator/AndFieldValueGeneratorTest###testIsMatch",
        "generated_path": "AndFieldValueGeneratorTest###testIsMatch.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testIsMatch() throws NoSuchValueException { final CronField cronField = new CronField(\"test\", \"0/1 * * *\"); final AndFieldValueGenerator generator = new AndFieldValueGenerator(cronField); assertTrue(generator.isMatch(1)); assertTrue(generator.isMatch(2)); assertTrue(generator.isMatch(3)); assertTrue(generator.isMatch(4)); assertTrue(generator.isMatch(5)); assertTrue(generator.isMatch(6)); assertTrue(generator.isMatch(7)); assertTrue(generator.isMatch(8)); assertTrue(generator.isMatch(9)); assertTrue(generator.isMatch(10)); assertTrue(generator.isMatch(11)); assertTrue(generator.isMatch(12)); assertTrue(generator.isMatch(13)); assertTrue(generator.isMatch(14)); assertTrue(generator.isMatch(15)); assertTrue(generator.isMatch(15)); assertTrue(generator.isMatch(15)); assertTrue(generator.isMatch(15)); assertTrue(generator.isMatch(15)); assertTrue(generator.isMatch(15)); assertTrue(generator.isMatch(15)); assertTrue(generator.isMatch(15)); assertTrue(generator.isMatch(15)); assertTrue(generator.isMatch(15)); assertTrue(generator.isMatch(15)); assertTrue(generator.isMatch(15)); assertTrue(generator.isMatch(15)); }\n"
    },
    {
        "original_path": "jmrozanec_cron-utils###jmrozanec_cron-utils/src/test/java/com/cronutils/model/time/generator/OnFieldValueGeneratorTest###testGeneratePreviousValue",
        "generated_path": "OnFieldValueGeneratorTest###testGeneratePreviousValue.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test(expected = NoSuchValueException.class) public void testGeneratePreviousValue() throws NoSuchValueException { final CronField cronField = new CronField(\"0 0 * * * *\"); final OnFieldValueGenerator generator = new OnFieldValueGenerator(cronField); generator.generatePreviousValue(0); }\n"
    },
    {
        "original_path": "jmrozanec_cron-utils###jmrozanec_cron-utils/src/test/java/com/cronutils/model/time/generator/EveryFieldValueGeneratorTest###testGenerateCandidatesNotIncludingIntervalExtremes",
        "generated_path": "EveryFieldValueGeneratorTest###testGenerateCandidatesNotIncludingIntervalExtremes.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGenerateCandidatesNotIncludingIntervalExtremes() throws NoSuchValueException { EveryFieldValueGenerator generator = new EveryFieldValueGenerator(new CronField(\"0/1 * * * * *\")); List<Integer> values = generator.generateCandidatesNotIncludingIntervalExtremes(0, 10); assertEquals(1, values.size()); assertEquals(0, values.get(0)); assertEquals(10, values.get(1)); assertEquals(10, values.get(2)); assertEquals(10, values.get(3)); assertEquals(10, values.get(4)); assertEquals(10, values.get(5)); assertEquals(10, values.get(6)); assertEquals(10, values.get(7)); assertEquals(10, values.get(8)); assertEquals(10, values.get(9)); assertEquals(10, values.get(10)); assertEquals(10, values.get(11)); assertEquals(10, values.get(12)); assertEquals(10, values.get(13)); assertEquals(10, values.get(14)); assertEquals(10, values.get(15)); assertEquals(10, values.get(16)); }\n"
    },
    {
        "original_path": "jfaster_mango###jfaster_mango/src/test/java/org/jfaster/mango/binding/BindingParameterTest###testEquals",
        "generated_path": "BindingParameterTest###testEquals.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testEquals() { BindingParameter p1 = BindingParameter.create(\"p1\", \"property\", JdbcType.MYSQL); BindingParameter p2 = BindingParameter.create(\"p2\", \"property\", JdbcType.MYSQL); Assert.assertTrue(p1.equals(p2)); Assert.assertTrue(p2.equals(p1)); Assert.assertFalse(p1.equals(null)); Assert.assertFalse(p1.equals(p2)); Assert.assertFalse(p1.equals(null)); Assert.assertFalse(p1.equals(p2)); Assert.assertFalse(p1.equals(null)); Assert.assertFalse(p1.equals(p2)); Assert.assertFalse(p1.equals(null)); Assert.assertFalse(p1.equals(p2)); Assert.assertFalse(p1.equals(null)); Assert.assertFalse(p1.equals(p2)); Assert.assertFalse(p1.equals(p1)); Assert.assertFalse(p1.equals(p2)); Assert.assertFalse(p1.equals(p2)); Assert.assertFalse(p1.equals(p1)); Assert.assertFalse(p1.equals(p2)); Assert.assertFalse(p1.equals(p1)); Assert.assertFalse(p1.equals(p2)); Assert.assertFalse(p1.equals(p2)); Assert.assertFalse(p1.equals(p"
    },
    {
        "original_path": "jfaster_mango###jfaster_mango/src/test/java/org/jfaster/mango/util/reflect/ReflectionTest###testGetAnnotations",
        "generated_path": "ReflectionTest###testGetAnnotations.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetAnnotations() { List<Annotation> annos = new ArrayList<Annotation>(); annos.add(new AnnotationImpl(\"foo\")); annos.add(new AnnotationImpl(\"bar\")); Reflection.getAnnotations(Reflection.class, annos); assertEquals(1, annos.size()); assertEquals(\"foo\", annos.get(0).value()); assertEquals(\"bar\", annos.get(1).value()); assertEquals(\"bar\", annos.get(2).value()); assertEquals(\"bar\", annos.get(3).value()); assertEquals(\"bar\", annos.get(4).value()); assertEquals(\"bar\", annos.get(5).value()); assertEquals(\"bar\", annos.get(6).value()); assertEquals(\"bar\", annos.get(7).value()); assertEquals(\"bar\", annos.get(8).value()); assertEquals(\"bar\", annos.get(9).value()); assertEquals(\"bar\", annos.get(10).value()); assertEquals(\"bar\", annos.get(11).value()); assertEquals(\"bar\", annos.get(12).value()); assertEquals(\"bar\", annos.get(13).value()); assertEquals(\"bar\", annos.get(14).value()); assertEquals(\"bar\", annos.get(15).value()); }\n"
    },
    {
        "original_path": "jfaster_mango###jfaster_mango/src/test/java/org/jfaster/mango/parser/ParserTest###testParse",
        "generated_path": "ParserTest###testParse.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public final void StringLiteral() throws ParseException { Parser parser = new Parser(\"testStringLiteral\"); try { parser.parse(); } catch (ParseException e) { } }\n"
    },
    {
        "original_path": "jfaster_mango###jfaster_mango/src/test/java/org/jfaster/mango/util/reflect/TypeTokenTest###testGetRawType",
        "generated_path": "TypeTokenTest###testGetRawType.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetRawType() { TypeToken<String> typeToken = TypeToken.of(String.class); assertEquals(String.class, typeToken.getRawType()); }\n"
    },
    {
        "original_path": "jfaster_mango###jfaster_mango/src/test/java/org/jfaster/mango/binding/DefaultInvocationContextTest###testTrim",
        "generated_path": "DefaultInvocationContextTest###testTrim.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void trim() { DefaultInvocationContext context = DefaultInvocationContext.create(); context.trim(\"\"); context.trim(\"\"); context.trim(\"\"); context.trim(\"\"); context.trim(\"\"); context.trim(\"\"); context.trim(\"\"); context.trim(\"\"); context.trim(\"\"); context.trim(\"\"); context.trim(\"\"); context.trim(\"\"); context.trim(\"\"); context.trim(\"\"); context.trim(\"\"); context.trim(\"\"); context.trim(\"\"); context.trim(\"\"); context.trim(\"\"); context.trim(\"\"); context.trim(\"\"); context.trim(\"\"); context.trim(\"\"); context.trim(\"\"); context.trim(\"\"); context.trim(\"\"); context.trim(\"\"); context.trim(\"\"); context.trim(\"\"); context.trim(\"\"); context.trim(\"\"); context.trim(\"\"); context.trim(\"\"); context.trim(\"\"); context.trim(\"\"); context.trim(\"\"); context.trim(\"\"); context.trim(\"\"); context.trim(\"\"); context.trim(\"\"); context.trim(\"\"); context.trim(\"\"); context.trim(\"\"); context.trim(\"\"); context.trim(\"\"); context.trim(\"\"); context.trim(\"\"); context.trim(\"\"); context.trim(\"\"); context.trim(\"\"); context.trim(\"\"); context.trim(\"\"); context.trim(\"\"); context.trim(\"\"); context.trim(\"\"); context.trim(\"\"); context.trim(\"\"); context.trim(\"\"); context.trim(\"\"); context.trim(\"\");"
    },
    {
        "original_path": "jfaster_mango###jfaster_mango/src/test/java/org/jfaster/mango/util/reflect/TypeTokenTest###testResolveType",
        "generated_path": "TypeTokenTest###testResolveType.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void resolveType() { TypeToken<?> typeToken = TypeToken.of(String.class); TypeToken<?> resolvedType = typeToken.resolveType(String.class); assertEquals(String.class, resolvedType.getRawType()); }\n"
    },
    {
        "original_path": "jfaster_mango###jfaster_mango/src/test/java/org/jfaster/mango/util/reflect/TypeTokenTest###testGetTypes",
        "generated_path": "TypeTokenTest###testGetTypes.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetTypes() { TypeToken<?> type = TypeToken.of(String.class); Set<TypeToken<?>> types = type.getTypes(); assertEquals(1, types.size()); assertEquals(String.class, types.get(0).getClass()); assertEquals(Integer.class, types.get(1).getClass()); assertEquals(Integer.class, types.get(2).getClass()); assertEquals(Integer.class, types.get(3).getClass()); assertEquals(Integer.class, types.get(4).getClass()); assertEquals(Integer.class, types.get(5).getClass()); assertEquals(Integer.class, types.get(6).getClass()); assertEquals(Integer.class, types.get(7).getClass()); assertEquals(Integer.class, types.get(8).getClass()); assertEquals(Integer.class, types.get(9).getClass()); assertEquals(Integer.class, types.get(10).getClass()); assertEquals(Integer.class, types.get(11).getClass()); assertEquals(Integer.class, types.get(12).getClass()); assertEquals(Integer.class, types.get(13).getClass()); assertEquals(Integer.class, types.get(14).getClass()); assertEquals(Integer.class, types.get(15).getClass()); assertEquals(Integer.class, types.get(16).getClass()); }\n"
    },
    {
        "original_path": "HaraldWalker_user-agent-utils###HaraldWalker_user-agent-utils/src/test/java/eu/bitwalker/useragentutils/UserAgentTest###testValueOf",
        "generated_path": "UserAgentTest###testValueOf.java",
        "Compile_result": 1,
        "Test_result": 0,
        "Gen_Test": "@Test(expected = IllegalArgumentException.class) public void testValueOfInvalidOperatingSystem() { UserAgent.valueOf(null); }\n"
    },
    {
        "original_path": "actframework_actframework###actframework_actframework/src/test/java/act/validation/PasswordSpecTest###testToString",
        "generated_path": "PasswordSpecTest###testToString.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testToString() { PasswordSpec passwordSpec = PasswordSpec.builder().build(); assertTrue(passwordSpec.lowercaseRequired()); assertTrue(passwordSpec.upppercaseRequired()); assertTrue(passwordSpec.digitRequired()); assertTrue(passwordSpec.toString().contains(\"a\")); assertTrue(passwordSpec.toString().contains(\"b\")); assertTrue(passwordSpec.toString().contains(\"c\")); assertTrue(passwordSpec.toString().contains(\"d\")); assertTrue(passwordSpec.toString().contains(\"e\")); assertTrue(passwordSpec.toString().contains(\"f\")); }\n"
    },
    {
        "original_path": "actframework_actframework###actframework_actframework/src/test/java/act/plugin/PluginScannerTest###testScan",
        "generated_path": "PluginScannerTest###testScan.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void testPluginScanner() { PluginScanner pluginScanner = new PluginScanner(); pluginScanner.scan(); }\n"
    },
    {
        "original_path": "actframework_actframework###actframework_actframework/src/test/java/act/route/RouterTest###testInferFullActionPath",
        "generated_path": "RouterTest###testInferFullActionPath.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testInferFullActionPath() throws Exception { String path = \"/foo/bar\"; String result = Router.inferFullActionPath(path, new $.Func0<String>() { @Override public String apply() { return path; } }); assertEquals(\"/foo/bar\", result); }\n"
    },
    {
        "original_path": "actframework_actframework###actframework_actframework/src/test/java/act/util/AnnotationUtilTest###testGetAnnotation",
        "generated_path": "AnnotationUtilTest###testGetAnnotation.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetAnnotation() { System.out.println(\"getAnnotation\"); Class<?> clazz = Object.class; Class<?> clazz2 = Object.class; Class<?> clazz3 = Object.class; Class<?> clazz4 = Object.class; Class<?> clazz5 = Object.class; Class<?> clazz6 = Object.class; Class<?> clazz7 = Object.class; Class<?> clazz8 = Object.class; Class<?> clazz9 = Object.class; Class<?> clazz10 = Object.class; Class<?> clazz11 = Object.class; Class<?> clazz12 = Object.class; Class<?> clazz13 = Object.class; Class<?> clazz14 = Object.class; Class<?> clazz15 = Object.class; Class<?> clazz16 = Object.class; Class<?> clazz17 = Object.class; Class<?> clazz16 = Object.class; Class<?> clazz17 = Object.class; Class<?> clazz16 = Object.class; Class<?> clazz16 = Object.class; Class<?> clazz17 = Object.class; Class<?> clazz17 = Object.class; Class<?> clazz17 = Object.class; Class<?> clazz16 = Object.class; Class<?> clazz16 = Object.class; Class<?> clazz17 = Object.class; Class<?> clazz172 = Object.class; Class<?> clazz172 = Object.class; Class<?> clazz173 = Object."
    },
    {
        "original_path": "google_jimfs###google_jimfs/jimfs/src/test/java/com/google/common/jimfs/JimfsFileChannelTest###testTransferTo",
        "generated_path": "JimfsFileChannelTest###testTransferTo.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testTransferTo() throws IOException { JimfsFileChannel channel = newChannel(fileSystemState); channel.transferTo(0, 1, newChannel(fileSystemState)); channel.transferTo(0, 1, newChannel(fileSystemState)); channel.transferTo(0, 1, newChannel(fileSystemState)); channel.transferTo(0, 1, newChannel(fileSystemState)); channel.transferTo(0, 1, newChannel(fileSystemState)); channel.transferTo(0, 1, newChannel(fileSystemState)); channel.transferTo(0, 1, newChannel(fileSystemState)); channel.transferTo(0, 1, newChannel(fileSystemState)); channel.transferTo(0, 1, newChannel(fileSystemState)); channel.transferTo(0, 1, newChannel(fileSystemState)); channel.transferTo(0, 1, newChannel(fileSystemState)); channel.transferTo(0, 1, newChannel(fileSystemState)); channel.transferTo(0, 1, newChannel(fileSystemState)); channel.transferTo(0, 1, newChannel(fileSystemState)); channel.transferTo(0, 1, newChannel(fileSystemState)); channel.transferTo(0, 1, newChannel(fileSystemState)); channel.transferTo(0, 1, newChannel(fileSystemState)); channel.transferTo(0, 1, newChannel(fileSystemState)); channel.transferTo("
    },
    {
        "original_path": "google_jimfs###google_jimfs/jimfs/src/test/java/com/google/common/jimfs/JimfsFileChannelTest###testTransferFrom",
        "generated_path": "JimfsFileChannelTest###testTransferFrom.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void transferFrom() throws IOException { JimfsFileChannel channel = newChannel(false, true); try { channel.transferFrom(new MockReadableByteChannel(), 0, 1); } catch (IOException e) { fail(\"Should not allow transferFrom with negative count\"); } channel.transferFrom(new MockReadableByteChannel(), 0, 1); try { channel.transferFrom(new MockReadableByteChannel(), 0, 1); } catch (IOException e) { fail(\"Should not allow transferFrom with negative count\"); } channel.transferFrom(new MockReadableByteChannel(), 0, 1); try { channel.transferFrom(new MockReadableByteChannel(), 0, 1); } catch (IOException e) { fail(\"Should not allow transferFrom with negative count\"); } channel.transferFrom(new MockReadableByteChannel(), 0, 1); try { channel.transferFrom(new MockReadableByteChannel(), 0, 1); } catch (IOException e) { fail(\"Should allow transferFrom with negative count\"); } channel.transferFrom(new MockReadableByteChannel(), 0, 1); try { channel.transferFrom(new MockReadableByteChannel(), 0, 1); } catch (IOException e) { fail(\"Should allow transferFrom with negative count\"); } try { channel.transferFrom(new MockReadableByteChannel(), 0, 1); } catch (IOException e) { fail(\"Should allow transferFrom with negative count\"); } }\n"
    },
    {
        "original_path": "google_jimfs###google_jimfs/jimfs/src/test/java/com/google/common/jimfs/DirectoryTest###testSnapshot",
        "generated_path": "DirectoryTest###testSnapshot.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testSnapshot() { Directory dir = Directory.create(1, new FileTime(0, 0, 0)); assertEquals(1, dir.snapshot().size()); assertEquals(1, dir.snapshot().size()); assertEquals(1, dir.snapshot().size()); assertEquals(1, dir.snapshot().size()); assertEquals(1, dir.snapshot().size()); assertEquals(1, dir.snapshot().size()); assertEquals(1, dir.snapshot().size()); assertEquals(1, dir.snapshot().size()); assertEquals(1, dir.snapshot().size()); assertEquals(1, dir.snapshot().size()); assertEquals(1, dir.snapshot().size()); assertEquals(1, dir.snapshot().size()); assertEquals(1, dir.snapshot().size()); assertEquals(1, dir.snapshot().size()); assertEquals(1, dir.snapshot().size()); assertEquals(1, dir.snapshot().size()); assertEquals(1, dir.snapshot().size()); assertEquals(1, dir.snapshot().size()); assertEquals(1, dir.snapshot().size()); assertEquals(1, dir.snapshot().size()); assertEquals(1, dir.snapshot().size()); assertEquals(1, dir.snapshot().size()); assertEquals(1, dir.snapshot().size()); assertEquals(1, dir.snapshot().size()); assertEquals(1, dir.snapshot().size()); assertEquals(1, dir.snapshot().size()); assertEquals(1,"
    },
    {
        "original_path": "google_jimfs###google_jimfs/jimfs/src/test/java/com/google/common/jimfs/DirectoryTest###testRemove",
        "generated_path": "DirectoryTest###testRemove.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testRemove() { Directory directory = Directory.createRoot(1, new FileTime(0, 0, 0)); DirectoryEntry entry = directory.entryInParent(); assertEquals(entry, directory.remove(new Name(\"a\"))); assertEquals(entry, directory.remove(new Name(\"b\"))); assertEquals(entry, directory.remove(new Name(\"c\"))); assertEquals(entry, directory.entryInParent()); assertEquals(entry, directory.entryInParent()); assertEquals(entry, directory.entryInParent()); assertEquals(entry, directory.entryInParent()); assertEquals(entry, directory.entryInParent()); assertEquals(entry, directory.entryInParent()); assertEquals(entry, directory.entryInParent()); assertEquals(entry, directory.entryInParent()); assertEquals(entry, directory.entryInParent()); assertEquals(entry, directory.entryInParent()); assertEquals(entry, directory.entryInParent()); assertEquals(entry, directory.entryInParent()); assertEquals(entry, directory.entryInParent()); assertEquals(entry, directory.entryInParent()); assertEquals(entry, directory.entryInParent()); assertEquals(entry, directory.entryInParent()); assertEquals(entry, directory.entryInParent()); assertEquals(entry, directory.entryInParent()); assertEquals(entry, directory.entryInParent()); assertEquals(entry, directory.entryInParent()); assertEquals(entry, directory.entryInParent()); assert"
    },
    {
        "original_path": "google_jimfs###google_jimfs/jimfs/src/test/java/com/google/common/jimfs/AttributeServiceTest###testGetFileAttributeView",
        "generated_path": "AttributeServiceTest###testGetFileAttributeView.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetFileAttributeView() throws Exception { FileLookup fileLookup = new FileLookup(); FileAttributeView view = attributeService.getFileAttributeView(fileLookup, FileAttributeView.class); assertNotNull(view); assertTrue(view instanceof FileAttributeView); }\n"
    },
    {
        "original_path": "google_jimfs###google_jimfs/jimfs/src/test/java/com/google/common/jimfs/PollingWatchServiceTest###testRegister",
        "generated_path": "PollingWatchServiceTest###testRegister.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testRegister() throws IOException { PollingWatchService pollingWatchService = new PollingWatchService(); Path path = new JimfsPath(new Path(\"/path\", EnumSet.of(Path.Type.file))); Path file = new JimfsPath(path, EnumSet.of(Path.Type.file)); Path file2 = new JimfsPath(path, EnumSet.of(Path.Type.file)); Path file3 = new JimfsPath(path, EnumSet.of(Path.Type.file)); Path file4 = new JimfsPath(path, EnumSet.of(Path.Type.file)); Path file5 = new JimfsPath(path, EnumSet.of(Path.Type.file)); Path file6 = new JimfsPath(path, EnumSet.of(Path.Type.file)); Path file7 = new JimfsPath(path, EnumSet.of(Path.Type.file)); Path file8 = new JimfsPath(path, EnumSet.of(Path.Type.file)); Path file9 = new JimfsPath(path, EnumSet.of(Path.Type.file)); Path file10 = new JimfsPath(path, EnumSet.of(Path.Type.file)); Path file11 = new JimfsPath(path, EnumSet.of(Path.Type.file)); Path file12 = new JimfsPath(path, EnumSet.of(Path.Type.file)); Path file12 = new"
    },
    {
        "original_path": "google_jimfs###google_jimfs/jimfs/src/test/java/com/google/common/jimfs/HeapDiskTest###testAllocate",
        "generated_path": "HeapDiskTest###testAllocate.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testHeapDisk() throws IOException { HeapDisk disk = new HeapDisk(1024, 1024, 1024); for (int i = 0; i < 1024; i++) { disk.allocate(file, 100); } assertEquals(100, disk.getUnallocatedSpace()); }\n"
    },
    {
        "original_path": "google_jimfs###google_jimfs/jimfs/src/test/java/com/google/common/jimfs/AttributeServiceTest###testSetAttribute",
        "generated_path": "AttributeServiceTest###testSetAttribute.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testSetAttribute() throws Exception { File file = new File(\"test.txt\"); FileAttribute<?> a = new FileAttribute<>(\"a\", \"b\"); FileAttribute<?> b = new FileAttribute<>(\"b\", \"c\"); FileAttribute<?> c = new FileAttribute<>(\"c\", \"d\"); FileAttribute<?> d = new FileAttribute<>(\"d\"); FileAttribute<?> e = new FileAttribute<>(\"e\"); FileAttribute<?> f = new FileAttribute<>(\"f\"); FileAttribute<?> f2 = new FileAttribute<>(\"f2\"); FileAttribute<?> f3 = new FileAttribute<>(\"f3\"); FileAttribute<?> f4 = new FileAttribute<>(\"f4\"); FileAttribute<?> f5 = new FileAttribute<>(\"f5\"); FileAttribute<?> f6 = new FileAttribute<>(\"f6\"); FileAttribute<?> f7 = new FileAttribute<>(\"f7\"); FileAttribute<?> f8 = new FileAttribute<>(\"f8\"); FileAttribute<?> f9 = new FileAttribute<>(\"f9\"); FileAttribute<?> f10 = new FileAttribute<>(\"f10\"); FileAttribute<?> f11 = new FileAttribute<>(\"f11\"); FileAttribute<?> f12 = new FileAttribute<>(\"f12\"); FileAttribute<?> f12 = new FileAttribute<>(\"f12\"); FileAttribute<?> f11 = new FileAttribute<>(\"f12\"); FileAttribute<?> f12 = new FileAttribute<>(\"f12\");"
    },
    {
        "original_path": "google_jimfs###google_jimfs/jimfs/src/test/java/com/google/common/jimfs/JimfsFileChannelTest###testSize",
        "generated_path": "JimfsFileChannelTest###testSize.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testSize() throws IOException { JimfsFileChannel channel = new JimfsFileChannel(file, null, null); assertEquals(0, channel.size()); }\n"
    },
    {
        "original_path": "google_jimfs###google_jimfs/jimfs/src/test/java/com/google/common/jimfs/DirectoryTest###testGet",
        "generated_path": "DirectoryTest###testGet.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGet() throws Exception { DirectoryEntry entry = Directory.createRoot(0, new FileTime(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0"
    },
    {
        "original_path": "google_jimfs###google_jimfs/jimfs/src/test/java/com/google/common/jimfs/DirectoryTest###testLink",
        "generated_path": "DirectoryTest###testLink.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testLink() throws Exception { Directory dir = Directory.createRoot(1, new FileTime(0, 0, 0, 0)); dir.link(new Name(\"a\", \"b\"), new File(0, 0, 0, 0)); dir.link(new Name(\"a\", \"b\"), new File(0, 0, 0, 0)); dir.link(new Name(\"a\", \"b\"), new File(0, 0, 0, 0)); dir.link(new Name(\"a\", \"b\"), new File(0, 0, 0, 0)); dir.link(new Name(\"a\", \"b\"), new File(0, 0, 0, 0)); dir.link(new Name(\"a\", \"b\"), new File(0, 0, 0, 0)); dir.link(new Name(\"a\", \"b\"), new File(0, 0, 0, 0)); dir.link(new Name(\"a\", \"b\"), new File(0, 0, 0, 0)); dir.link(new Name(\"a\", \"b\"), new File(0, 0, 0, 0)); dir.link(new Name(\"a\", \"b\"), new File(0, 0, 0, 0)); dir.link(new Name(\"a\", \"b\"), new File(0, 0, 0, 0)); dir.link(new Name(\"a\", \"b\"), new File(0, 0, 0,"
    },
    {
        "original_path": "OpenHFT_Chronicle-Map###OpenHFT_Chronicle-Map/src/test/java/net/openhft/chronicle/map/BuildVersionTest###testVersion",
        "generated_path": "BuildVersionTest###testVersion.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testVersion() { System.out.println(\"version\"); BuildVersion instance = new BuildVersion(); String version = instance.version(); System.out.println(version); }\n"
    },
    {
        "original_path": "OpenHFT_Chronicle-Map###OpenHFT_Chronicle-Map/src/test/java/net/openhft/chronicle/hash/serialization/impl/ByteBufferDataAccessTest###getUsingTest",
        "generated_path": "ByteBufferDataAccessTest###getUsingTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetUsing() { ByteBuffer bb = ByteBuffer.allocate(1024); ByteBufferDataAccess dataAccess = new ByteBufferDataAccess(); dataAccess.getUsing(bb); assertEquals(bb, dataAccess.getUsing(null)); assertEquals(bb.remaining(), dataAccess.getUsing(bb).remaining()); }\n"
    },
    {
        "original_path": "dnsjava_dnsjava###dnsjava_dnsjava/src/test/java/org/xbill/DNS/dnssec/TestValUtils###testNsecProvesNoDS",
        "generated_path": "TestValUtils###testNsecProvesNoDS.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testNsecProvesNoDS() throws Exception { NSECRecord nsec = new NSECRecord(Type.SOA, new Name(\"test\"), new Name(\"test\")); assertEquals(SecurityStatus.SECURE, ValUtils.nsecProvesNoDS(nsec, Name.root)); }\n"
    },
    {
        "original_path": "rhuss_jolokia###rhuss_jolokia/agent/core/src/test/java/org/jolokia/detector/LightstreamerDetectorTest###testDetect",
        "generated_path": "LightstreamerDetectorTest###testDetect.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testDetect() throws Exception { MBeanServerExecutor mBeanServerExecutor = mock(MBeanServerExecutor.class); when(mBeanServerExecutor.getAttribute(eq(\"com.lightstreamer:type=Server\"), eq(\"LSVersion\"))).thenReturn(\"1.0.0\"); ServerHandle result = new LightstreamerDetector().detect(mBeanServerExecutor); assertNotNull(result); assertEquals(\"LightStreamer\", result.getClass().getName()); assertEquals(\"1.0.0\", result.getVersion()); }\n"
    },
    {
        "original_path": "rhuss_jolokia###rhuss_jolokia/agent/core/src/test/java/org/jolokia/util/JolokiaCipherTest###testDecrypt",
        "generated_path": "JolokiaCipherTest###testDecrypt.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testDecrypt() throws GeneralSecurityException, NoSuchAlgorithmException { JolokiaCipher jolokiaCipher = new JolokiaCipher(new KeyHolder()); String decrypted = jolokiaCipher.decrypt(jolokiaCipher.encrypt(jolokiaCipher.decrypt(jolokiaCipher.decrypt(jolokiaCipher.encrypt(jolokiaCipher.decrypt(jolokiaCipher.decrypt(jolokiaCipher.decrypt(jolokiaCipher.decrypt(jolokiaCipher.decrypt(jolokiaCipher.decrypt(jolokiaCipher.decrypt(jolokiaCipher.decrypt(jolokiaCipher.decrypt(jolokiaCipher.decrypt(jolokiaCipher.decrypt(jolokiaCipher.decrypt(jolokiaCipher.decrypt(jolokiaCipher.encrypt(jolokiaCipher.decrypt(jolokiaCipher.decrypt(jolokiaCipher.decrypt(jolokiaCipher.decrypt(jolokiaCipher.decrypt(jolokiaCipher.decrypt(jolokiaCipher.decrypt(jolokiaCipher.decrypt(jolokiaCipher.decrypt(jolokiaCipher.decrypt(jolokiaCipher.decrypt(jolokiaCipher.decrypt(jolokiaCipher.decrypt(jolokiaCipher.decrypt(jolokiaCipher.decrypt(jolokiaCipher.decrypt(jolokiaCipher.decrypt(jolokiaCipher.decrypt(jolokiaCipher.decrypt(jolokiaCipher.decrypt(jolokiaCipher.decrypt(jolokia"
    },
    {
        "original_path": "eirslett_frontend-maven-plugin###eirslett_frontend-maven-plugin/frontend-plugin-core/src/test/java/com/github/eirslett/maven/plugins/frontend/lib/UtilsTest###testImplode",
        "generated_path": "UtilsTest###testImplode.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void implode() { List<String> list = new ArrayList<String>(); list.add(\"foo\"); list.add(\"bar\"); list.add(\"baz\"); list.add(\"baz\"); list.add(\"baz\"); list.add(\"baz\"); list.add(\"baz\"); list.add(\"baz\"); list.add(\"baz\"); list.add(\"baz\"); list.add(\"baz\"); list.add(\"baz\"); list.add(\"baz\"); list.add(\"baz\"); list.add(\"baz\"); list.add(\"baz\"); list.add(\"baz\"); list.add(\"baz\"); list.add(\"baz\"); list.add(\"baz\"); list.add(\"baz\"); list.add(\"baz\"); list.add(\"baz\"); list.add(\"baz\"); list.add(\"baz\"); list.add(\"baz\"); list.add(\"baz\"); list.add(\"baz\"); list.add(\"baz\"); list.add(\"baz\"); list.add(\"baz\"); list.add(\"baz\"); list.add(\"baz\"); list.add(\"baz\"); list.add(\"baz\"); list.add(\"baz\"); list.add(\"baz\"); list.add(\"baz\"); list.add(\"baz\"); list.add(\"baz\"); list.add(\"baz\"); list.add(\"baz\"); list.add(\"baz\");"
    },
    {
        "original_path": "eirslett_frontend-maven-plugin###eirslett_frontend-maven-plugin/frontend-plugin-core/src/test/java/com/github/eirslett/maven/plugins/frontend/lib/UtilsTest###testMerge",
        "generated_path": "UtilsTest###testMerge.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testMerge() { List<String> first = new ArrayList<String>(); first.add(\"a\"); first.add(\"b\"); first.add(\"c\"); List<String> second = new ArrayList<String>(); second.add(\"d\"); first.add(\"e\"); second.add(\"f\"); List<String> result = Utils.merge(first, second); Assert.assertEquals(1, result.size()); Assert.assertEquals(\"a\", result.get(0)); Assert.assertEquals(\"b\", result.get(1)); Assert.assertEquals(\"c\", result.get(2)); Assert.assertEquals(\"d\", result.get(3)); Assert.assertEquals(\"e\", result.get(4)); Assert.assertEquals(\"f\", result.get(5)); Assert.assertEquals(\"f\", result.get(6)); Assert.assertEquals(\"f\", result.get(7)); Assert.assertEquals(\"f\", result.get(8)); Assert.assertEquals(\"f\", result.get(9)); }\n"
    },
    {
        "original_path": "opentracing_opentracing-java###opentracing_opentracing-java/opentracing-mock/src/test/java/io/opentracing/mock/MockTracerTest###testFinishedTraces",
        "generated_path": "MockTracerTest###testFinishedTraces.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testFinishedTraces() { MockTracer tracer = new MockTracer(); Map<String, Map<String, MockSpan>> result = tracer.finishedTraces(); assertEquals(0, result.size()); }\n"
    },
    {
        "original_path": "jenkinsci_java-client-api###jenkinsci_java-client-api/jenkins-client/src/test/java/com/offbytwo/jenkins/client/util/UrlUtilsTest###testToViewBaseUrl",
        "generated_path": "UrlUtilsTest###testToViewBaseUrl.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testToViewBaseUrl() throws Exception { final FolderJob folderJob = new FolderJob(); folderJob.setName(\"test\"); folderJob.setUrl(\"http: final String result = UrlUtils.toViewBaseUrl(folderJob, \"test\"); Assert.assertEquals(\"http: }\n"
    },
    {
        "original_path": "jenkinsci_java-client-api###jenkinsci_java-client-api/jenkins-client/src/test/java/com/offbytwo/jenkins/client/util/UrlUtilsTest###testToJobBaseUrl",
        "generated_path": "UrlUtilsTest###testToJobBaseUrl.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testToJobBaseUrl() throws Exception { final FolderJob folderJob = new FolderJob(); folderJob.setName(\"test\"); folderJob.setFolder(folder); final String jobBaseUrl = UrlUtils.toJobBaseUrl(folderJob, \"test\"); assertEquals(\"job/test\", jobBaseUrl); }\n"
    },
    {
        "original_path": "devnied_EMV-NFC-Paycard-Enrollment###devnied_EMV-NFC-Paycard-Enrollment/library/src/test/java/com/github/devnied/emvnfccard/utils/TlvUtilTest###testParseTagAndLength",
        "generated_path": "TlvUtilTest###testParseTagAndLength.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testParseTagAndLength() throws Exception { List<TagAndLength> result = TlvUtil.parseTagAndLength(new byte[]{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,"
    },
    {
        "original_path": "devnied_EMV-NFC-Paycard-Enrollment###devnied_EMV-NFC-Paycard-Enrollment/library/src/test/java/com/github/devnied/emvnfccard/utils/TlvUtilTest###testGetLength",
        "generated_path": "TlvUtilTest###testGetLength.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetLength() { List<TagAndLength> tlList = new ArrayList<TagAndLength>(); tlList.add(new TagAndLength(0, 0, 0)); tlList.add(new TagAndLength(1, 0, 0)); tlList.add(new TagAndLength(2, 0, 0)); tlList.add(new TagAndLength(3, 0, 0)); tlList.add(new TagAndLength(4, 0, 0)); tlList.add(new TagAndLength(5, 0, 0)); tlList.add(new TagAndLength(6, 0, 0)); tlList.add(new TagAndLength(7, 0, 0)); tlList.add(new TagAndLength(8, 0, 0)); tlList.add(new TagAndLength(9, 0, 0)); tlList.add(new TagAndLength(10, 0, 0)); tlList.add(new TagAndLength(20, 0, 0)); tlList.add(new TagAndLength(20, 0, 0)); tlList.add(new TagAndLength(20, 0, 0)); tlList.add(new TagAndLength(20, 0, 0)); tlList.add(new TagAndLength(10, 0, 0)); tlList.add(new TagAndLength(20, 0, 0)); tlList.add(new TagAndLength(10, 0, 0)); tlList.add"
    },
    {
        "original_path": "devnied_EMV-NFC-Paycard-Enrollment###devnied_EMV-NFC-Paycard-Enrollment/library/src/test/java/com/github/devnied/emvnfccard/utils/TlvUtilTest###testGetFormattedTagAndLength",
        "generated_path": "TlvUtilTest###testGetFormattedTagAndLength.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetFormattedTagAndLength() throws Exception { String result = TlvUtil.getFormattedTagAndLength(getBytes(TEST_TLV), 0); System.out.println(result); }\n"
    },
    {
        "original_path": "julianhyde_sqlline###julianhyde_sqlline/src/test/java/sqlline/SqlLineTest###testIsCharEscaped",
        "generated_path": "SqlLineTest###testIsCharEscaped.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testIsCharEscaped() throws Exception { assertTrue(SqlLine.isCharEscaped(\"\", -1)); assertTrue(SqlLine.isCharEscaped(\"\", 1)); assertTrue(SqlLine.isCharEscaped(\"\", 2)); assertTrue(SqlLine.isCharEscaped(\"\", 3)); assertTrue(SqlLine.isCharEscaped(\"\", 4)); assertTrue(SqlLine.isCharEscaped(\"\", 5)); assertTrue(SqlLine.isCharEscaped(\"\", 6)); assertTrue(SqlLine.isCharEscaped(\"\", 7)); assertTrue(SqlLine.isCharEscaped(\"\", 8)); assertTrue(SqlLine.isCharEscaped(\"\", 9)); assertTrue(SqlLine.isCharEscaped(\"\", 9)); assertTrue(SqlLine.isCharEscaped(\"\", 9)); assertTrue(SqlLine.isCharEscaped(\"\", 9)); assertTrue(SqlLine.isCharEscaped(\"\", 9)); assertTrue(SqlLine.isCharEscaped(\"\", 9)); assertTrue(SqlLine.isCharEscaped(\"\", 9)); assertTrue(SqlLine.isCharEscaped(\"\", 9)); assertTrue(SqlLine.isCharEscaped(\"\", 9)); assertTrue(SqlLine.isCharEscaped(\"\", 9)); assertTrue(SqlLine.isCharEscaped(\"\", 9)); assertTrue(SqlLine.isCharEscaped(\"\", 9)); assertTrue(SqlLine.isCharEscaped(\"\", 9)); assertTrue(SqlLine.isCharEscaped(\"\", 9)); assertTrue(SqlLine."
    },
    {
        "original_path": "julianhyde_sqlline###julianhyde_sqlline/src/test/java/sqlline/ReflectorTest###testInvoke",
        "generated_path": "ReflectorTest###testInvoke.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test(expected = IllegalArgumentException.class) public void testNoMethod() throws InvocationTargetException, IllegalAccessException, ClassNotFoundException { Reflector reflector = new Reflector(); reflector.invoke(new Person(), null, null, null); }\n"
    },
    {
        "original_path": "julianhyde_sqlline###julianhyde_sqlline/src/test/java/sqlline/RowsTest###testEscapeControlSymbols",
        "generated_path": "RowsTest###testEscapeControlSymbols.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testEscapeControlSymbols() { assertEquals(\"\", Rows.escapeControlSymbols(\"\")); assertEquals(\"a\", Rows.escapeControlSymbols(\"a\")); assertEquals(\"a\", Rows.escapeControlSymbols(\"a\")); assertEquals(\"a\", Rows.escapeControlSymbols(\"a\")); assertEquals(\"a\", Rows.escapeControlSymbols(\"a\")); assertEquals(\"a\", Rows.escapeControlSymbols(\"a\")); assertEquals(\"a\", Rows.escapeControlSymbols(\"a\")); assertEquals(\"a\", Rows.escapeControlSymbols(\"a\")); assertEquals(\"a\", Rows.escapeControlSymbols(\"a\")); assertEquals(\"a\", Rows.escapeControlSymbols(\"a\")); assertEquals(\"a\", Rows.escapeControlSymbols(\"a\")); assertEquals(\"a\", Rows.escapeControlSymbols(\"a\")); assertEquals(\"a\", Rows.escapeControlSymbols(\"a\")); assertEquals(\"a\", Rows.escapeControlSymbols(\"a\")); assertEquals(\"a\", Rows.escapeControlSymbols(\"a\")); assertEquals(\"a\", Rows.escapeControlSymbols(\"a\")); assertEquals(\"a\", Rows.escapeControlSymbols(\"a\")); assertEquals(\"a\", Rows.escapeControlSymbols(\"a\")); assertEquals(\"a\", Rows.escapeControlSymbols(\"a\")); assertEquals(\"a\", Rows.escapeControlSymbols(\"a\")); assertEquals(\"a\", Rows.escapeControlSymbols(\"a\")); assertEquals(\"a\", Rows.escapeControlSymbols(\"a\")); assertEquals"
    },
    {
        "original_path": "julianhyde_sqlline###julianhyde_sqlline/src/test/java/sqlline/SqlLineTest###testEscapeAndQuote",
        "generated_path": "SqlLineTest###testEscapeAndQuote.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testEscapeAndQuote() throws Exception { assertEquals(\"\\\\\"\\\\\"\", SqlLine.escapeAndQuote(\"\\\\\"\\\\\"\")); assertEquals(\"\\\\\"\\\\\"\", SqlLine.escapeAndQuote(\"\\\\\"\\\\\"\")); assertEquals(\"\\\\\"\\\\\"\", SqlLine.escapeAndQuote(\"\\\\\"\\\\\"\")); assertEquals(\"\\\\\"\\\\\"\", SqlLine.escapeAndQuote(\"\\\\\"\\\\\"\")); assertEquals(\"\\\\\"\\\\\"\", SqlLine.escapeAndQuote(\"\\\\\"\\\\\"\")); assertEquals(\"\\\\\"\\\\\"\", SqlLine.escapeAndQuote(\"\\\\\"\\\\\"\")); assertEquals(\"\\\\\"\\\\\"\", SqlLine.escapeAndQuote(\"\\\\\"\\\\\"\")); assertEquals(\"\\\\\"\\\\\"\", SqlLine.escapeAndQuote(\"\\\\\"\\\\\"\")); assertEquals(\"\\\\\"\\\\\"\", SqlLine.escapeAndQuote(\"\\\\\"\\\\\"\")); assertEquals(\"\\\\\"\\\\\"\", SqlLine.escapeAndQuote(\"\\\\\"\\\\\"\")); assertEquals(\"\\\\\"\\\\\"\", SqlLine.escapeAndQuote(\"\\\\\"\\\\\"\")); assertEquals(\"\\\\\"\\\\\"\", SqlLine.escapeAndQuote(\"\\\\\"\\\\\"\")); assertEquals(\"\\\\\"\\\\\"\", SqlLine.escapeAndQuote(\"\\\\\"\\\\\"\")); assertEquals(\"\\\\\"\\\\\"\", SqlLine.escapeAndQuote(\"\\\\\"\\\\\"\")); assertEquals(\"\\\\\"\\\\\"\", SqlLine.escapeAndQuote(\"\\\\\"\\\\\"\")); assertEquals(\"\\\\\"\\\\\"\", SqlLine.escapeAndQuote(\"\\\\\"\\\\\"\")); }\n"
    },
    {
        "original_path": "julianhyde_sqlline###julianhyde_sqlline/src/test/java/sqlline/SqlLineTest###testUnescape",
        "generated_path": "SqlLineTest###testUnescape.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testUnescape() throws Exception { assertEquals(\"\", SqlLine.unescape(\"\\\\\"\")); assertEquals(\"\\\\\"\", SqlLine.unescape(\"\\\\\"\")); assertEquals(\"\\\\\"\", SqlLine.unescape(\"\\\\\"\")); assertEquals(\"\\\\\"\", SqlLine.unescape(\"\\\\\"\")); assertEquals(\"\\\\\"\", SqlLine.unescape(\"\\\\\"\")); assertEquals(\"\\\\\"\", SqlLine.unescape(\"\\\\\"\")); assertEquals(\"\\\\\"\", SqlLine.unescape(\"\\\\\"\")); assertEquals(\"\\\\\"\", SqlLine.unescape(\"\\\\\"\")); assertEquals(\"\\\\\"\", SqlLine.unescape(\"\\\\\"\")); assertEquals(\"\\\\\"\", SqlLine.unescape(\"\\\\\"\")); assertEquals(\"\\\\\"\", SqlLine.unescape(\"\\\\\"\")); assertEquals(\"\\\\\"\", SqlLine.unescape(\"\\\\\" \")); assertEquals(\"\\\\\"\", SqlLine.unescape(\"\\\\\" \")); assertEquals(\"\\\\\"\", SqlLine.unescape(\"\\\\\" \")); assertEquals(\"\\\\\"\", SqlLine.unescape(\"\\\\\" \")); assertEquals(\"\\\\\"\", SqlLine.unescape(\"\\\\\" \")); assertEquals(\"\\\\\"\", SqlLine.unescape(\"\\\\\" \")); assertEquals(\"\\\\\"\", SqlLine.unescape(\"\\\\\" \")); assertEquals(\"\\\\\"\", SqlLine.unescape(\"\\\\\" \")); assertEquals(\"\\\\\"\", SqlLine.unescape(\"\\\\\" \")); assertEquals(\"\\\\\"\", SqlLine.unescape(\"\\\\\" \")); assertEquals(\"\\\\\"\", SqlLine.unescape(\"\\\\\" \"));"
    },
    {
        "original_path": "skyscreamer_JSONassert###skyscreamer_JSONassert/src/test/java/org/skyscreamer/jsonassert/comparator/JSONCompareUtilTest###testGetCardinalityMap",
        "generated_path": "JSONCompareUtilTest###testGetCardinalityMap.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetCardinalityMap() throws Exception { Map<String, Integer> cardinalityMap = JSONCompareUtil.getCardinalityMap(Arrays.asList(\"a\", \"b\", \"c\")); assertEquals(1, cardinalityMap.size()); assertEquals(1, cardinalityMap.get(\"a\")); assertEquals(1, cardinalityMap.get(\"b\")); assertEquals(1, cardinalityMap.get(\"c\")); assertEquals(1, cardinalityMap.get(\"c\")); assertEquals(1, cardinalityMap.get(\"d\")); assertEquals(1, cardinalityMap.get(\"e\")); assertEquals(1, cardinalityMap.get(\"f\")); assertEquals(1, cardinalityMap.get(\"g\")); assertEquals(1, cardinalityMap.get(\"g\")); assertEquals(1, cardinalityMap.get(\"e\")); assertEquals(1, cardinalityMap.get(\"f\")); assertEquals(1, cardinalityMap.get(\"g\")); assertEquals(1, cardinalityMap.get(\"g\")); assertEquals(1, cardinalityMap.get(\"e\")); assertEquals(1, cardinalityMap.get(\"f\")); assertEquals(1, cardinalityMap.get(\"f\")); assertEquals(1, cardinalityMap.get(\"g\")); assertEquals(1, cardinalityMap.get(\"g\")); assertEquals(1, cardinalityMap.get(\"g\")); assertEquals(1, cardinalityMap.get(\"g\")); assertEquals(1,"
    },
    {
        "original_path": "rackerlabs_blueflood###rackerlabs_blueflood/blueflood-core/src/test/java/com/rackspacecloud/blueflood/eventemitter/EmitterTest###testOn",
        "generated_path": "EmitterTest###testOn.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testOn() { Emitter emitter = new Emitter(); Emitter emitter2 = new Emitter(); emitter2.on(\"test\", new TestListener()); emitter2.on(\"test\", new TestListener()); emitter2.on(\"test\", new TestListener()); emitter2.on(\"test\", new TestListener()); emitter2.on(\"test\", new TestListener()); emitter2.on(\"test\", new TestListener()); emitter2.on(\"test\", new TestListener()); emitter2.on(\"test\", new TestListener()); emitter2.on(\"test\", new TestListener()); emitter2.on(\"test\", new TestListener()); emitter2.on(\"test\", new TestListener()); emitter2.on(\"test\", new TestListener()); emitter2.on(\"test\", new TestListener()); emitter2.on(\"test\", new TestListener()); emitter2.on(\"test\", new TestListener()); emitter2.on(\"test\", new TestListener()); emitter2.on(\"test\", new TestListener()); emitter2.on(\"test\", new TestListener()); emitter2.on(\"test\", new TestListener()); emitter2.on(\"test\", new TestListener()); emitter2.on(\"test\", new TestListener()); emitter2.on(\"test\", new TestListener()); emitter2.on(\"test\", new TestListener()); emitter2.on(\"test\", new TestListener()); emitter2.on(\"test\", new TestListener()); emitter2.on(\"test\", new TestListener()); emitter2.on(\"test\","
    },
    {
        "original_path": "rackerlabs_blueflood###rackerlabs_blueflood/blueflood-core/src/test/java/com/rackspacecloud/blueflood/types/BluefloodTimerRollupTest###testMax",
        "generated_path": "BluefloodTimerRollupTest###testMax.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void testMax() throws IOException { }\n"
    },
    {
        "original_path": "rackerlabs_blueflood###rackerlabs_blueflood/blueflood-core/src/test/java/com/rackspacecloud/blueflood/io/serializers/metrics/SlotStateSerDesTest###testGranularityFromStateCol",
        "generated_path": "SlotStateSerDesTest###testGranularityFromStateCol.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGranularityFromStateCol() { Granularity g = SlotStateSerDes.granularityFromStateCol(\"granularity(1,2,3)\"); assertEquals(Granularity.granularity(1), g); g = SlotStateSerDes.granularityFromStateCol(\"granularity(1,2,3)\"); assertEquals(Granularity.granularity(2), g); g = SlotStateSerDes.granularityFromStateCol(\"granularity(1,2,3)\"); assertEquals(Granularity.granularity(3), g); g = SlotStateSerDes.granularityFromStateCol(\"granularity(1,2,3)\"); assertEquals(Granularity.granularity(3), g); g = SlotStateSerDes.granularityFromStateCol(\"granularity(1,2,3)\"); assertEquals(Granularity.granularity(1), g); g = SlotStateSerDes.granularityFromStateCol(\"granularity(1,2,3)\"); assertEquals(Granularity.granularity(1), g); g = SlotStateSerDes.granularityFromStateCol(\"granularity(1,2,3)\"); assertEquals(Granularity.granularity(1), g); g = SlotStateSerDes.granularityFromStateCol(\"granularity(1,2,3)\"); assertEquals(Granularity.granularity(1), g); g = SlotStateSerDes.granularityFromStateCol(\"granularity("
    },
    {
        "original_path": "rackerlabs_blueflood###rackerlabs_blueflood/blueflood-core/src/test/java/com/rackspacecloud/blueflood/rollup/UtilTest###testParseShards",
        "generated_path": "UtilTest###testParseShards.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testParseShards() { Collection<Integer> shards = Util.parseShards(\"ALL\"); assertEquals(Constants.NUMBER_OF_SHARDS, shards.size()); }\n"
    },
    {
        "original_path": "rackerlabs_blueflood###rackerlabs_blueflood/blueflood-core/src/test/java/com/rackspacecloud/blueflood/types/BluefloodTimerRollupTest###testSum",
        "generated_path": "BluefloodTimerRollupTest###testSum.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void testSum() throws IOException { }\n"
    },
    {
        "original_path": "rackerlabs_blueflood###rackerlabs_blueflood/blueflood-core/src/test/java/com/rackspacecloud/blueflood/io/serializers/metrics/SlotKeySerDesTest###testGranularityFromSlotKey",
        "generated_path": "SlotKeySerDesTest###testGranularityFromSlotKey.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGranularityFromSlotKey() { assertEquals(Granularity.Granularity.ONE, SlotKeySerDes.granularityFromSlotKey(\"ONE,ONE,ONE\")); assertEquals(Granularity.Granularity.ONE, SlotKeySerDes.granularityFromSlotKey(\"ONE,ONE,ONE\")); assertEquals(Granularity.Granularity.ONE, SlotKeySerDes.granularityFromSlotKey(\"ONE,ONE,ONE\")); assertEquals(Granularity.Granularity.ONE, SlotKeySerDes.granularityFromSlotKey(\"ONE,ONE,ONE\")); assertEquals(Granularity.Granularity.ONE, SlotKeySerDes.granularityFromSlotKey(\"ONE,ONE,ONE\")); assertEquals(Granularity.Granularity.ONE, SlotKeySerDes.granularityFromSlotKey(\"ONE,ONE,ONE\")); assertEquals(Granularity.Granularity.ONE, SlotKeySerDes.granularityFromSlotKey(\"ONE,ONE,ONE\")); assertEquals(Granularity.Granularity.ONE, SlotKeySerDes.granularityFromSlotKey(\"ONE,ONE,ONE\")); assertEquals(Granularity.Granularity.ONE, SlotKeySerDes.granularityFromSlotKey(\"ONE,ONE,ONE\")); assertEquals(Granularity.Granularity.ONE, SlotKeySerDes.granularityFromSlotKey(\"ONE,ONE,ONE\")); assertEquals(Granularity.Granularity.ONE, SlotKeySerDes."
    },
    {
        "original_path": "rackerlabs_blueflood###rackerlabs_blueflood/blueflood-core/src/test/java/com/rackspacecloud/blueflood/eventemitter/EmitterTest###testOnce",
        "generated_path": "EmitterTest###testOnce.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testOnce() { Emitter emitter = new Emitter(); emitter.once(\"foo\", new Listener<Object>() { @Override public void call(Object... args) { } }); emitter.emit(\"foo\", \"bar\"); emitter.emit(\"foo\", \"baz\"); emitter.emit(\"foo\", \"baz\"); emitter.emit(\"foo\", \"baz\"); emitter.emit(\"foo\", \"baz\"); emitter.emit(\"foo\", \"baz\"); emitter.emit(\"foo\", \"baz\"); emitter.emit(\"foo\", \"baz\"); emitter.emit(\"foo\", \"baz\"); emitter.emit(\"foo\", \"baz\"); emitter.emit(\"foo\", \"baz\"); emitter.emit(\"foo\", \"baz\"); emitter.emit(\"foo\", \"baz\"); emitter.emit(\"foo\", \"baz\", \"baz\"); emitter.emit(\"foo\", \"baz\", \"baz\"); emitter.emit(\"foo\", \"baz\", \"baz\"); emitter.emit(\"foo\", \"baz\", \"baz\"); emitter.emit(\"foo\", \"baz\", \"baz\"); emitter.emit(\"foo\", \"baz\", \"baz\"); emitter.emit(\"foo\", \"baz\", \"baz\"); emitter.emit(\"foo\", \"baz\", \"baz\", \"baz\"); emitter.emit(\"foo\", \"baz\", \"baz\", \"baz\"); emitter.emit(\"foo\", \"baz\", \"baz"
    },
    {
        "original_path": "rackerlabs_blueflood###rackerlabs_blueflood/blueflood-core/src/test/java/com/rackspacecloud/blueflood/rollup/SlotKeyTest###testExtrapolate",
        "generated_path": "SlotKeyTest###testExtrapolate.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test(expected = IllegalArgumentException.class) public void testExtrapolate() { SlotKey key = SlotKey.of(Granularity.of(Granularity.of(Granularity.of(Granularity.of(Granularity.of(Granularity.of(Granularity.of(Granularity.of(Granularity.of(Granularity.of(Granularity.of(Granularity.of(Granularity.of(Granularity.of(Granularity.of(Granularity.of(Granularity.of(Granularity.of(Granularity.of(Granularity.of(Granularity.of(Granularity.of(Granularity.of(Granularity.of(Granularity.of(Granularity.of(Granularity.of(Granularity.of(Granularity.of(Granularity.of(Granularity.of(Granularity.of(Granularity.of(Granularity.of(Granularity.of(Granularity.of(Granularity.of(Granularity.of(Granularity.of(Granularity.of(Granularity.of(Granularity.of(Granularity.of(Granularity.of(Granularity.of(Granularity.of(Granularity.of(Granularity.of(Granularity.of(Granularity.of(Granularity.of(Granularity.of(Granularity.of(Granularity.of(Granularity.of(Granularity.of(Granularity.of(Granularity.of(Granularity"
    },
    {
        "original_path": "rackerlabs_blueflood###rackerlabs_blueflood/blueflood-http/src/test/java/com/rackspacecloud/blueflood/tracker/TrackerTest###testTrackResponse",
        "generated_path": "TrackerTest###testTrackResponse.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testTrackResponse() throws Exception { FullHttpResponse response = mock(FullHttpResponse.class); when(response.getStatus()).thenReturn(HttpResponseStatus.OK); when(response.headers().names()).thenReturn(Collections.singletonList(\"foo\")); when(response.content()).thenReturn(new ByteArrayInputStream(\"bar\".getBytes())); tracker.trackResponse(request, response); verify(response).getStatus(); verify(response).headers(); verify(response).content(); }\n"
    },
    {
        "original_path": "rackerlabs_blueflood###rackerlabs_blueflood/blueflood-core/src/test/java/com/rackspacecloud/blueflood/cache/CombinedTtlProviderTest###testGetTTL",
        "generated_path": "CombinedTtlProviderTest###testGetTTL.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetTTL() throws Exception { TimeValue timeValue1 = new TimeValue(0, 0, 0); TimeValue timeValue2 = new TimeValue(0, 0, 0); TimeValue timeValue3 = new TimeValue(0, 0, 0); TimeValue timeValue4 = new TimeValue(0, 0, 0); TimeValue timeValue5 = new TimeValue(0, 0, 0); TimeValue timeValue6 = new TimeValue(0, 0, 0); TimeValue timeValue7 = new TimeValue(0, 0, 0); TimeValue timeValue8 = new TimeValue(0, 0, 0); TimeValue timeValue9 = new TimeValue(0, 0, 0); TimeValue timeValue10 = new TimeValue(0, 0, 0); TimeValue timeValue11 = new TimeValue(0, 0, 0); TimeValue timeValue12 = new TimeValue(0, 0, 0); TimeValue timeValue16 = new TimeValue(0, 0, 0); TimeValue timeValue17 = new TimeValue(0, 0, 0); TimeValue timeValue18 = new TimeValue(0, 0, 0); TimeValue timeValue19 = new TimeValue(0, 0, 0); TimeValue timeValue20 = new TimeValue(0, 0, 0); TimeValue timeValue21 = new TimeValue(0, 0, 0); TimeValue timeValue22 = new TimeValue(0, 0, 0); TimeValue time"
    },
    {
        "original_path": "rackerlabs_blueflood###rackerlabs_blueflood/blueflood-core/src/test/java/com/rackspacecloud/blueflood/io/SearchResultTest###testEquals",
        "generated_path": "SearchResultTest###testEquals.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testEquals() { SearchResult result = new SearchResult(\"tenant\", \"name\", \"unit\"); assertTrue(result.equals(result)); }\n"
    },
    {
        "original_path": "davidmoten_rxjava-jdbc###davidmoten_rxjava-jdbc/src/test/java/com/github/davidmoten/rx/jdbc/UtilTest###testCamelCaseToUnderscore",
        "generated_path": "UtilTest###testCamelCaseToUnderscore.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testCamelCaseToUnderscore() throws Exception { assertThat(Util.camelCaseToUnderscore(\"camelCase\")).isEqualTo(\"camelCase\"); assertThat(Util.camelCaseToUnderscore(\"camelCase\")).isEqualTo(\"camelCase\"); assertThat(Util.camelCaseToUnderscore(\"camelCase\")).isEqualTo(\"camelCase\"); assertThat(Util.camelCaseToUnderscore(\"camelCase\")).isEqualTo(\"camelCase\"); assertThat(Util.camelCaseToUnderscore(\"camelCase\")).isEqualTo(\"camelCase\"); assertThat(Util.camelCaseToUnderscore(\"camelCase\")).isEqualTo(\"camelCase\"); assertThat(Util.camelCaseToUnderscore(\"camelCase\")).isEqualTo(\"camelCase\"); assertThat(Util.camelCaseToUnderscore(\"camelCase\")).isEqualTo(\"camelCase\"); assertThat(Util.camelCaseToUnderscore(\"camelCase\")).isEqualTo(\"camelCase\"); assertThat(Util.camelCaseToUnderscore(\"camelCase\")).isEqualTo(\"camelCase\"); assertThat(Util.camelCaseToUnderscore(\"camelCase\")).isEqualTo(\"camelCase\"); assertThat(Util.camelCaseToUnderscore(\"camelCase\")).isEqualTo(\"camelCase\"); assertThat(Util.camelCaseToUnderscore(\"camelCase\")).isEqualTo(\"camelCase\"); assertThat(Util.camelCaseToUnderscore(\"camelCase\")).isEqualTo(\"camelCase\"); assertThat(Util.camelCaseToUnderscore(\"camelCase"
    },
    {
        "original_path": "Esri_geometry-api-java###Esri_geometry-api-java/src/test/java/com/esri/core/geometry/TestEnvelope###testMerge",
        "generated_path": "TestEnvelope###testMerge.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testMerge() { Geometry geom = new Geometry(new Point(1, 2), new Point(3, 4)); Envelope envelope = new Envelope(geom); Envelope2D env2D = new Envelope2D(new Point(1, 2), new Point(3, 4)); envelope.queryEnvelope2D(env2D); Envelope1D env1 = new Envelope1D(); env1.queryEnvelope2D(env2D); Envelope2D env2D2 = new Envelope2D(); env2D2.queryEnvelope2D(env2D2); Envelope envelope2 = new Envelope(geom); envelope2.queryEnvelope2D(env2D2); envelope2.queryEnvelope2D(env2D2); Envelope envelope3 = new Envelope(geom); envelope3.queryEnvelope2D(env2D2); Envelope envelope4 = new Envelope(geom); envelope4.queryEnvelope2D(env2D2); Envelope envelope5 = new Envelope(geom); envelope5.queryEnvelope2D(env2D2); envelope5.queryEnvelope2D(env2D2); envelope5.queryEnvelope2D(env2D2); envelope5.queryEnvelope2D(env2D2); envelope5.queryEnvelope2D(env2D2); envelope5.queryEnvelope2D(env2D2); envelope5.queryEnvelope2D(env2D2); Envelope envelope6 = new Envelope(geom); envelope6.queryEnvelope2"
    },
    {
        "original_path": "Esri_geometry-api-java###Esri_geometry-api-java/src/test/java/com/esri/core/geometry/TestPoint###testReplaceNaNs",
        "generated_path": "TestPoint###testReplaceNaNs.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testReplaceNaNs() { Point pt = new Point(1, 2, 3); pt.replaceNaNs(1, 1.0); assertEquals(1.0, pt.getAttributeAsDbl(1, 0), 0.0); assertEquals(1.0, pt.getAttributeAsDbl(1, 1), 0.0); assertEquals(1.0, pt.getAttributeAsDbl(1, 1), 0.0); assertEquals(1.0, pt.getAttributeAsDbl(1, 1), 0.0); assertEquals(1.0, pt.getAttributeAsDbl(1, 1), 0.0); assertEquals(1.0, pt.getAttributeAsDbl(1, 1), 0.0); assertEquals(1.0, pt.getAttributeAsDbl(1, 1), 0.0); assertEquals(1.0, pt.getAttributeAsDbl(1, 1), 0.0); assertEquals(1.0, pt.getAttributeAsDbl(1, 1), 0.0); assertEquals(1.0, pt.getAttributeAsDbl(1, 1), 0.0); assertEquals(1.0, pt.getAttributeAsDbl(1, 1), 0.0); assertEquals(1.0, pt.getAttributeAsDbl(1, 1), 0.0); assertEquals(1.0, pt"
    },
    {
        "original_path": "JCTools_JCTools###JCTools_JCTools/jctools-core/src/test/java/org/jctools/util/PaddedAtomicLongTest###testGetAndUpdate",
        "generated_path": "PaddedAtomicLongTest###testGetAndUpdate.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public class PaddedAtomicLongTest { PaddedAtomicLong atomicLong = new PaddedAtomicLong(1); atomicLong.getAndUpdate(new LongUnaryOperator() { @Override public long applyAsLong(long prev) { return prev + 1; } }); }\n"
    },
    {
        "original_path": "JCTools_JCTools###JCTools_JCTools/jctools-core/src/test/java/org/jctools/util/PaddedAtomicLongTest###testAccumulateAndGet",
        "generated_path": "PaddedAtomicLongTest###testAccumulateAndGet.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testAccumulateAndGet() { PaddedAtomicLong atomicLong = new PaddedAtomicLong(); atomicLong.accumulateAndGet(1, new LongUnaryOperator() { @Override public long applyAsLong(long prev, long x) { return prev + x; } }); assertEquals(1, atomicLong.get()); }\n"
    },
    {
        "original_path": "JCTools_JCTools###JCTools_JCTools/jctools-core/src/test/java/org/jctools/util/PaddedAtomicLongTest###testGetAndAccumulate",
        "generated_path": "PaddedAtomicLongTest###testGetAndAccumulate.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetAndAccumulate() { PaddedAtomicLong atomicLong = new PaddedAtomicLong(1); assertEquals(1, atomicLong.getAndAccumulate(1, new LongUnaryOperator() { @Override public long applyAsLong(long prev, long v) { return prev + v; } })); }\n"
    },
    {
        "original_path": "JCTools_JCTools###JCTools_JCTools/jctools-core/src/test/java/org/jctools/util/PaddedAtomicLongTest###testUpdateAndGet",
        "generated_path": "PaddedAtomicLongTest###testUpdateAndGet.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public class PaddedAtomicLongTest { PaddedAtomicLong atomicLong = new PaddedAtomicLong(); atomicLong.updateAndGet(new LongUnaryOperator() { @Override public long applyAsLong(long prev) { return prev + 1; } }); }\n"
    },
    {
        "original_path": "JakeWharton_RxRelay###JakeWharton_RxRelay/src/test/java/com/jakewharton/rxrelay3/ReplayRelayTest###testGetValues",
        "generated_path": "ReplayRelayTest###testGetValues.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetValues() { ReplayRelay<Integer> r = ReplayRelay.create(); assertEquals(0, r.getValues().length); assertEquals(0, r.getValues(new Integer[0])[0]); assertEquals(0, r.getValues(new Integer[0])[0]); assertEquals(0, r.getValues(new Integer[0])[0]); assertEquals(0, r.getValues(new Integer[0])[0]); assertEquals(0, r.getValues(new Integer[0])[0]); assertEquals(0, r.getValues(new Integer[0])[0]); assertEquals(0, r.getValues(new Integer[0])[0]); assertEquals(0, r.getValues(new Integer[0])[0]); assertEquals(0, r.getValues(new Integer[0])[0]); assertEquals(0, r.getValues(new Integer[0])[0]); assertEquals(0, r.getValues(new Integer[0])[0]); assertEquals(0, r.getValues(new Integer[0])[0]); assertEquals(0, r.getValues(new Integer[0])[0]); assertEquals(0, r.getValues(new Integer[0])[0]); assertEquals(0, r.getValues(new Integer[0])[0]); assertEquals(0, r.getValues(new Integer["
    },
    {
        "original_path": "OWASP_java-html-sanitizer###OWASP_java-html-sanitizer/src/test/java/org/owasp/html/HtmlElementTablesTest###testImpliedElements",
        "generated_path": "HtmlElementTablesTest###testImpliedElements.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testImpliedElements() { HtmlElementTables tables = new HtmlElementTables(new HtmlElementNames(), new DenseElementBinaryMatrix(), new DenseElementBinaryMatrix(), new DenseElementBinaryMatrix(), new SparseElementMultitable(), new TextContentModel(), new DenseElementSet()); assertArrayEquals(new int[]{LI_TAG_ARR}, tables.impliedElements(LI_TAG, LI_TAG)); assertArrayEquals(new int[]{LI_TAG_ARR}, tables.impliedElements(LI_TAG, LI_TAG)); assertArrayEquals(new int[]{LI_TAG_ARR}, tables.impliedElements(LI_TAG, LI_TAG)); assertArrayEquals(new int[]{LI_TAG_ARR}, tables.impliedElements(LI_TAG, LI_TAG)); assertArrayEquals(new int[]{LI_TAG_ARR}, tables.impliedElements(LI_TAG, LI_TAG)); assertArrayEquals(new int[]{LI_TAG_ARR}, tables.impliedElements(LI_TAG, LI_TAG)); assertArrayEquals(new int[]{LI_TAG_ARR}, tables.impliedElements(LI_TAG, LI_TAG)); assertArrayEquals(new int[]{LI_TAG_ARR}, tables.impliedElements(LI_TAG, LI_TAG)); assertArrayEquals(new int[]{LI_TAG_ARR}, tables.impliedElements(LI_TAG, LI_"
    },
    {
        "original_path": "OWASP_java-html-sanitizer###OWASP_java-html-sanitizer/src/test/java/org/owasp/html/HtmlPolicyBuilderTest###testAllowUrlProtocols",
        "generated_path": "HtmlPolicyBuilderTest###testAllowUrlProtocols.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void allowUrlProtocols() { HtmlPolicy policy = builder.allowUrlProtocols(\"http\", \"https\"); assertEquals(\"<a href=\\\\\"http: assertEquals(\"<img src=\\\\\"http: assertEquals(\"<img src=\\\\\"http: assertEquals(\"<img src=\\\\\"http: assertEquals(\"<img src=\\\\\"http: assertEquals(\"<img src=\\\\\"http: assertEquals(\"<img src=\\\\\"http: assertEquals(\"<img src=\\\\\"http: assertEquals(\"<img src=\\\\\"http: assertEquals(\"<img src=\\\\\"http: assertEquals(\"<img src=\\\\\"http: assertEquals(\"<img src=\\\\\"http: assertEquals(\"<img src=\\\\\"http: assertEquals(\"<img src=\\\\\"http: assertEquals(\"<img src=\\\\\"http: assertEquals(\"<img src=\\\\\"http: assertEquals(\"<img src=\\\\\"http: assertEquals(\"<img src=\\\\\"http: assertEquals(\"<img src=\\\\\"http: assertEquals(\"<img src=\\\\\"http: assertEquals(\"<img src=\\\\\"http: assertEquals(\"<img src=\\\\\"http: assertEquals(\"<img src=\\\\\"http: assertEquals(\"<img src=\\\\\"http: assertEquals(\"<img src=\\\\\"http: assertEquals(\"<img src=\\\\\"http: assertEquals(\"<img src=\\\\\"http: assertEquals(\"<img src=\\\\\"http: assertEquals(\"<img src=\\\\\"http: assertEquals(\"<"
    },
    {
        "original_path": "OWASP_java-html-sanitizer###OWASP_java-html-sanitizer/src/test/java/org/owasp/html/CssGrammarTest###testCssContent",
        "generated_path": "CssGrammarTest###testCssContent.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testCssContent() { assertEquals(\"\", CssGrammar.cssContent(\"a\")); assertEquals(\"a\", CssGrammar.cssContent(\"a\")); assertEquals(\"a\", CssGrammar.cssContent(\"a\")); assertEquals(\"a\", CssGrammar.cssContent(\"a\")); assertEquals(\"a\", CssGrammar.cssContent(\"a\")); assertEquals(\"a\", CssGrammar.cssContent(\"a\")); assertEquals(\"a\", CssGrammar.cssContent(\"a\")); assertEquals(\"a\", CssGrammar.cssContent(\"a\")); assertEquals(\"a\", CssGrammar.cssContent(\"a\")); assertEquals(\"a\", CssGrammar.cssContent(\"a\")); assertEquals(\"a\", CssGrammar.cssContent(\"a\")); assertEquals(\"a\", CssGrammar.cssContent(\"a\")); assertEquals(\"a\", CssGrammar.cssContent(\"a\")); assertEquals(\"a\", CssGrammar.cssContent(\"a\")); assertEquals(\"a\", CssGrammar.cssContent(\"a\")); assertEquals(\"a\", CssGrammar.cssContent(\"a\")); assertEquals(\"a\", CssGrammar.cssContent(\"a\")); assertEquals(\"a\", CssGrammar.cssContent(\"a\")); assertEquals(\"a\", CssGrammar.cssContent(\"a\")); assertEquals(\"a\", CssGrammar.cssContent(\"a\")); assertEquals(\"a\", CssGrammar.cssContent(\"a\")); assertEquals(\"a\", CssGrammar.cssContent(\"a\")); assertEquals"
    },
    {
        "original_path": "docker-java_docker-java###docker-java_docker-java/docker-java/src/test/java/com/github/dockerjava/api/model/DeviceTest###testParse",
        "generated_path": "DeviceTest###testParse.java",
        "Compile_result": 1,
        "Test_result": 0,
        "Gen_Test": "@Test(expected = IllegalArgumentException.class) public void testParseInvalidDevice() { Device.parse(\"invalid\"); }\n"
    },
    {
        "original_path": "docker-java_docker-java###docker-java_docker-java/docker-java/src/test/java/com/github/dockerjava/core/NameParserTest###testValidateRepoName",
        "generated_path": "NameParserTest###testValidateRepoName.java",
        "Compile_result": 1,
        "Test_result": 0,
        "Gen_Test": "@Test(expected = InvalidRepositoryNameException.class) public void testValidateRepoNameInvalid() { NameParser.validateRepoName(\"\"); }\n"
    },
    {
        "original_path": "docker-java_docker-java###docker-java_docker-java/docker-java/src/test/java/com/github/dockerjava/api/model/IdentifierTest###testFromCompoundString",
        "generated_path": "IdentifierTest###testFromCompoundString.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testIdentifierFromCompoundString() { assertEquals(new Identifier(new Repository(\"http: assertEquals(new Identifier(new Repository(\"http: assertEquals(new Identifier(new Repository(\"http: assertEquals(new Identifier(new Repository(\"http: assertEquals(new Identifier(new Repository(\"http: assertEquals(new Identifier(new Repository(\"http: assertEquals(new Identifier(new Repository(\"http: assertEquals(new Identifier(new Repository(\"http: assertEquals(new Identifier(new Repository(\"http: assertEquals(new Identifier(new Repository(\"http: assertEquals(new Identifier(new Repository(\"http: assertEquals(new Identifier(new Repository(\"http: assertEquals(new Identifier(new Repository(\"http: assertEquals(new Identifier(new Repository(\"http: assertEquals(new Identifier(new Repository(\"http: assertEquals(new Identifier(new Repository(\"http: assertEquals(new Identifier(new Repository(\"http: assertEquals(new Identifier(new Repository(\"http: assertEquals(new Identifier(new Repository(\"http: assertEquals(new Identifier(new Repository(\"http: assertEquals(new Identifier(new Repository(\"http: assertEquals(new Identifier(new Repository(\"http: assertEquals(new Identifier(new Repository(\"http: assertEquals(new Identifier(new Repository(\"http: assertEquals(new Identifier(new Repository(\"http: assertEquals(new Identifier(new Repository(\"http: assertEquals(new Identifier(new Repository(\"http: assertEquals(new Identifier(new Repository(\"http"
    },
    {
        "original_path": "docker-java_docker-java###docker-java_docker-java/docker-java/src/test/java/com/github/dockerjava/core/GoLangFileMatchTest###testMatch",
        "generated_path": "GoLangFileMatchTest###testMatch.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testMatchFile() { List<String> patterns = new ArrayList<>(); patterns.add(\"*.java\"); patterns.add(\"*.java\"); patterns.add(\"*.java\"); patterns.add(\"*.java\"); patterns.add(\"*.java\"); patterns.add(\"*.java\"); patterns.add(\"*.java\"); patterns.add(\"*.java\"); patterns.add(\"*.java\"); patterns.add(\"*.java\"); patterns.add(\"*.java\"); patterns.add(\"*.java\"); patterns.add(\"*.java\"); patterns.add(\"*.java\"); patterns.add(\"*.java\"); patterns.add(\"*.java\"); patterns.add(\"*.java\"); patterns.add(\"*.java\"); patterns.add(\"*.java\"); patterns.add(\"*.java\"); patterns.add(\"*.java\"); patterns.add(\"*.java\"); patterns.add(\"*.java\"); patterns.add(\"*.java\"); patterns.add(\"*.java\"); patterns.add(\"*.java\"); patterns.add(\"*.java\"); patterns.add(\"*.java\"); patterns.add(\"*.java\"); patterns.add(\"*.java\"); patterns.add(\"*.java\"); patterns.add(\"*.java\"); patterns.add(\"*.java\"); patterns.add(\"*.java\"); patterns.add(\"*.java\"); patterns.add(\"*.java\"); patterns.add(\"*.java\"); patterns.add(\"*.java\"); patterns.add(\"*.java\"); patterns.add(\"*.java\"); patterns.add(\"*.java\"); patterns.add(\"*.java\"); patterns.add(\"*."
    },
    {
        "original_path": "ysc_word###ysc_word/src/test/java/org/apdplat/word/dictionary/impl/DictionaryTrieTest###testPrefix",
        "generated_path": "DictionaryTrieTest###testPrefix.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testPrefix() { List<String> result = dictionaryTrie.prefix(\"a\"); assertEquals(2, result.size()); assertEquals(\"a\", result.get(0)); assertEquals(\"a\", result.get(1)); assertEquals(\"a\", result.get(2)); assertEquals(\"a\", result.get(3)); assertEquals(\"a\", result.get(4)); assertEquals(\"a\", result.get(5)); assertEquals(\"a\", result.get(6)); assertEquals(\"a\", result.get(7)); assertEquals(\"a\", result.get(8)); assertEquals(\"a\", result.get(9)); assertEquals(\"a\", result.get(10)); assertEquals(\"a\", result.get(11)); assertEquals(\"a\", result.get(12)); assertEquals(\"a\", result.get(13)); assertEquals(\"a\", result.get(14)); assertEquals(\"a\", result.get(15)); assertEquals(\"a\", result.get(16)); }\n"
    },
    {
        "original_path": "ysc_word###ysc_word/src/test/java/org/apdplat/word/recognition/RecognitionToolTest###testIsEnglishAndNumberMix",
        "generated_path": "RecognitionToolTest###testIsEnglishAndNumberMix.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testIsEnglishAndNumberMix() { assertTrue(RecognitionTool.isEnglishAndNumberMix(\"\u6d4b\u8bd5\u6d4b\u8bd5\u6d4b\u8bd5\u6d4b\u8bd5\u6d4b\u8bd5\u6d4b\u8bd5\u6d4b\u8bd5\u6d4b\u8bd5\u6d4b\u8bd5\u6d4b\u8bd5\u6d4b\u8bd5\u6d4b\u8bd5\", 0, \"\u6d4b\u8bd5\u6d4b\u8bd5\u6d4b\u8bd5\u6d4b\u8bd5\u6d4b\u8bd5\u6d4b\u8bd5\u6d4b\u8bd5\u6d4b\u8bd5\u6d4b\u8bd5\", 0, \"\u6d4b\u8bd5\u6d4b\u8bd5\u6d4b\u8bd5\u6d4b\u8bd5\u6d4b\u8bd5\u6d4b\u8bd5\u6d4b\u8bd5\u6d4b\u8bd5\u6d4b\u8bd5\u6d4b\u8bd5\u6d4b\u8bd5\u6d4b\u8bd5\u6d4b\u8bd5\u6d4b\u8bd5\u6d4b\u8bd5\u6d4b\u8bd5\", 0, \"\u6d4b\u8bd5\u6d4b\u8bd5\u6d4b\u8bd5\u6d4b\u8bd5\u6d4b\u8bd5\u6d4b\u8bd5\u6d4b\u8bd5\u6d4b\u8bd5\u6d4b\u8bd5\u6d4b"
    },
    {
        "original_path": "ysc_word###ysc_word/src/test/java/org/apdplat/word/recognition/RecognitionToolTest###testIsQuantifier",
        "generated_path": "RecognitionToolTest###testIsQuantifier.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testIsQuantifier() { assertTrue(RecognitionTool.isQuantifier(\"\u6d4b\u8bd5\u662f\u5426\u5b58\u5728\")); assertFalse(RecognitionTool.isQuantifier(\"\u6d4b\u8bd5\u662f\u5426\u5b58\u5728\")); assertFalse(RecognitionTool.isQuantifier(\"\u6d4b\u8bd5\u662f\u5426\u5b58\u5728\")); assertFalse(RecognitionTool.isQuantifier(\"\u6d4b\u8bd5\u662f\u5426\u5b58\u5728\")); assertFalse(RecognitionTool.isQuantifier(\"\u6d4b\u8bd5\u662f\u5426\u5b58\u5728\")); assertFalse(RecognitionTool.isQuantifier(\"\u6d4b\u8bd5\u662f\u5426\u5b58\u5728\")); assertFalse(RecognitionTool.isQuantifier(\"\u6d4b\u8bd5\")); assertFalse(RecognitionTool.isQuantifier(\"\u6d4b\u8bd5\u662f\u5426\u5b58\u5728\")); assertFalse(RecognitionTool.isQuantifier(\"\u6d4b\u8bd5\u662f\u5426\u5b58\u5728\")); assertFalse(RecognitionTool.isQuantifier(\"\u6d4b\u8bd5\")); assertFalse(RecognitionTool.isQuantifier(\"\u6d4b\u8bd5\")); assertFalse("
    },
    {
        "original_path": "ysc_word###ysc_word/src/test/java/org/apdplat/word/recognition/RecognitionToolTest###testIsNumber",
        "generated_path": "RecognitionToolTest###testIsNumber.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testIsNumber() { assertTrue(RecognitionTool.isNumber(\"123\")); assertTrue(RecognitionTool.isNumber(\"123\")); assertTrue(RecognitionTool.isNumber(\"123\")); assertTrue(RecognitionTool.isNumber(\"123\")); assertTrue(RecognitionTool.isNumber(\"123\")); assertTrue(RecognitionTool.isNumber(\"123\")); assertTrue(RecognitionTool.isNumber(\"123\")); assertTrue(RecognitionTool.isNumber(\"123\")); assertTrue(RecognitionTool.isNumber(\"123\")); assertTrue(RecognitionTool.isNumber(\"123\")); assertTrue(RecognitionTool.isNumber(\"123\")); assertTrue(RecognitionTool.isNumber(\"123\")); assertTrue(RecognitionTool.isNumber(\"123\")); assertTrue(RecognitionTool.isNumber(\"123\")); assertTrue(RecognitionTool.isNumber(\"123\")); assertTrue(RecognitionTool.isNumber(\"123\")); assertTrue(RecognitionTool.isNumber(\"123\")); assertTrue(RecognitionTool.isNumber(\"123\")); assertTrue(RecognitionTool.isNumber(\"123\")); assertTrue(RecognitionTool.isNumber(\"123\")); assertTrue(RecognitionTool.isNumber(\"123\")); assertTrue(RecognitionTool.isNumber(\"123\")); assertTrue(RecognitionTool.isNumber(\"123\")); assertTrue(RecognitionTool.isNumber(\""
    },
    {
        "original_path": "ysc_word###ysc_word/src/test/java/org/apdplat/word/recognition/RecognitionToolTest###testIsChineseNumber",
        "generated_path": "RecognitionToolTest###testIsChineseNumber.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testIsChineseNumber() { assertTrue(RecognitionTool.isChineseNumber(\"\u6d4b\u8bd5\u6587\u6570\u5b57\")); assertFalse(RecognitionTool.isChineseNumber(\"\u6d4b\u8bd5\u6587\u6570\u5b57\")); assertFalse(RecognitionTool.isChineseNumber(\"\u6d4b\u8bd5\u6587\u6570\u5b57\")); assertFalse(RecognitionTool.isChineseNumber(\"\u6d4b\u8bd5\u6587\u6570\u5b57\")); assertFalse(RecognitionTool.isChineseNumber(\"\u6d4b\u8bd5\u6587\u6570\u5b57\")); assertFalse(RecognitionTool.isChineseNumber(\"\u6d4b\u8bd5\u6587\u6570\u5b57\")); assertFalse(RecognitionTool.isChineseNumber(\"\u6d4b\u8bd5\u6587\u6570\u5b57\")); assertFalse(RecognitionTool.isChineseNumber(\"\u6d4b\u8bd5\u6587\u6570\u5b57\")); assertFalse(RecognitionTool.isChineseNumber(\"\u6d4b\u8bd5\u6587\u6570\u5b57\")); assertFalse(RecognitionTool.isChineseNumber(\"\u6d4b\u8bd5\u6587\u6570\u5b57\")); assertFalse(RecognitionTool.isChineseNumber(\"\u6d4b\ufffd"
    },
    {
        "original_path": "ysc_word###ysc_word/src/test/java/org/apdplat/word/recognition/RecognitionToolTest###testIsEnglish",
        "generated_path": "RecognitionToolTest###testIsEnglish.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testIsEnglish() { assertTrue(RecognitionTool.isEnglish(\"\u6d4b\u8bd5\u6587\u5355\u8bcd\")); assertTrue(RecognitionTool.isEnglish(\"\u6d4b\u8bd5\u6587\u5355\u8bcd\")); assertTrue(RecognitionTool.isEnglish(\"\u6d4b\u8bd5\u6587\u5355\u8bcd\")); assertTrue(RecognitionTool.isEnglish(\"\u6d4b\u8bd5\u6587\u5355\u8bcd\")); assertTrue(RecognitionTool.isEnglish(\"\u6d4b\u8bd5\u6587\u5355\u8bcd\")); assertTrue(RecognitionTool.isEnglish(\"\u6d4b\u8bd5\u6587\u5355\u8bcd\")); assertTrue(RecognitionTool.isEnglish(\"\u6d4b\u8bd5\u6587\u5355\u8bcd\")); assertTrue(RecognitionTool.isEnglish(\"\u6d4b\u8bd5\u6587\u5355\u8bcd\")); assertTrue(RecognitionTool.isEnglish(\"\u6d4b\u8bd5\u6587\u5355\u8bcd\")); assertTrue(RecognitionTool.isEnglish(\"\u6d4b\u8bd5\u6587\u5355\u8bcd\")); assertTrue(RecognitionTool.isEnglish(\"\u6d4b\u8bd5\u6587\u5355\u8bcd\"));"
    },
    {
        "original_path": "ysc_word###ysc_word/src/test/java/org/apdplat/word/util/DoubleArrayGenericTrieTest###testClear",
        "generated_path": "DoubleArrayGenericTrieTest###testClear.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void testClear() { System.out.println(\"clear\"); DoubleArrayGenericTrie instance = new DoubleArrayGenericTrie(); instance.clear(); }\n"
    },
    {
        "original_path": "jmxtrans_jmxtrans###jmxtrans_jmxtrans/jmxtrans-utils/src/test/java/com/googlecode/jmxtrans/util/NumberUtilsTest###testIsNumeric",
        "generated_path": "NumberUtilsTest###testIsNumeric.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testIsNumeric() { assertTrue(NumberUtils.isNumeric(null)); assertTrue(NumberUtils.isNumeric(\"\")); assertTrue(NumberUtils.isNumeric(\"1\")); assertTrue(NumberUtils.isNumeric(\"1\")); assertTrue(NumberUtils.isNumeric(\"1\")); assertTrue(NumberUtils.isNumeric(\"1\")); assertTrue(NumberUtils.isNumeric(\"1\")); assertTrue(NumberUtils.isNumeric(\"1\")); assertTrue(NumberUtils.isNumeric(\"1\")); assertTrue(NumberUtils.isNumeric(\"1\")); assertTrue(NumberUtils.isNumeric(\"1\")); assertTrue(NumberUtils.isNumeric(\"1\")); assertTrue(NumberUtils.isNumeric(\"1\")); assertTrue(NumberUtils.isNumeric(\"1\")); assertTrue(NumberUtils.isNumeric(\"1\")); assertTrue(NumberUtils.isNumeric(\"1\")); assertTrue(NumberUtils.isNumeric(\"1\")); assertTrue(NumberUtils.isNumeric(\"1\")); assertTrue(NumberUtils.isNumeric(\"1\")); assertTrue(NumberUtils.isNumeric(\"1\")); assertTrue(NumberUtils.isNumeric(\"1\")); assertTrue(NumberUtils.isNumeric(\"1\")); assertTrue(NumberUtils.isNumeric(\"1\")); assertTrue(NumberUtils.isNumeric(\"1\")); assertTrue(NumberUtils.isNumeric(\"1\")); assertTrue(NumberUtils.isNumeric(\"1\")"
    },
    {
        "original_path": "jmxtrans_jmxtrans###jmxtrans_jmxtrans/jmxtrans-utils/src/test/java/com/googlecode/jmxtrans/util/NumberUtilsTest###testIsValidNumber",
        "generated_path": "NumberUtilsTest###testIsValidNumber.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testIsValidNumber() { assertTrue(NumberUtils.isValidNumber(1.0)); assertTrue(NumberUtils.isValidNumber(1.0)); assertTrue(NumberUtils.isValidNumber(1.0)); assertTrue(NumberUtils.isValidNumber(1.0)); assertTrue(NumberUtils.isValidNumber(1.0)); assertTrue(NumberUtils.isValidNumber(1.0)); assertTrue(NumberUtils.isValidNumber(1.0f)); assertTrue(NumberUtils.isValidNumber(1.0f)); assertTrue(NumberUtils.isValidNumber(1.0f)); assertTrue(NumberUtils.isValidNumber(1.0f)); assertTrue(NumberUtils.isValidNumber(1.0f)); assertTrue(NumberUtils.isValidNumber(1.0f)); assertTrue(NumberUtils.isValidNumber(1.0f)); assertTrue(NumberUtils.isValidNumber(1.0f)); assertTrue(NumberUtils.isValidNumber(1.0f)); assertTrue(NumberUtils.isValidNumber(1.0f)); assertTrue(NumberUtils.isValidNumber(1.0f)); assertTrue(NumberUtils.isValidNumber(1.0f)); assertTrue(NumberUtils.isValidNumber(1.0f)); assertTrue(NumberUtils.isValidNumber(1.0f)); assertTrue(NumberUtils.isValidNumber(1.0f)); assertTrue(NumberUtils.isValidNumber(1.0f)); assertTrue(NumberUtils.isValid"
    },
    {
        "original_path": "jmxtrans_jmxtrans###jmxtrans_jmxtrans/jmxtrans-core/src/test/java/com/googlecode/jmxtrans/scheduler/ServerSchedulerTest###testSchedule",
        "generated_path": "ServerSchedulerTest###testSchedule.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testSchedule() throws Exception { Server server = new Server(); server.setRunPeriodSeconds(10); serverScheduler.schedule(server); assertEquals(10, server.getRunPeriodSeconds()); }\n"
    },
    {
        "original_path": "w3c_epubcheck###w3c_epubcheck/src/test/java/com/adobe/epubcheck/util/PathUtilTest###testRemoveWorkingDirectory",
        "generated_path": "PathUtilTest###testRemoveWorkingDirectory.java",
        "Compile_result": 1,
        "Test_result": 0,
        "Gen_Test": "@Test public void testRemoveWorkingDirectory() { System.setProperty(\"user.dir\", \"/home\"); String result = PathUtil.removeWorkingDirectory(\"/home\"); assertEquals(\"/home\", result); }\n"
    },
    {
        "original_path": "wstrange_GoogleAuth###wstrange_GoogleAuth/src/test/java/com/warrenstrange/googleauth/GoogleAuthenticatorQRGeneratorTest###testGetOtpAuthTotpURL",
        "generated_path": "GoogleAuthenticatorQRGeneratorTest###testGetOtpAuthTotpURL.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test(expected = IllegalArgumentException.class) public void testInvalidIssuer() { GoogleAuthenticatorQRGenerator.getOtpAuthTotpURL(null, \"account\", new GoogleAuthenticatorKey(\"secret\")); }\n"
    },
    {
        "original_path": "magro_memcached-session-manager###magro_memcached-session-manager/core/src/test/java/de/javakaffee/web/msm/MemcachedNodesManagerTest###testGetNextAvailableNodeId",
        "generated_path": "MemcachedNodesManagerTest###testGetNextAvailableNodeId.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetNextAvailableNodeId() throws Exception { final NodeIdList primaryNodeIds = new NodeIdList(); primaryNodeIds.add(\"1\"); primaryNodeIds.add(\"2\"); primaryNodeIds.add(\"3\"); primaryNodeIds.add(\"4\"); primaryNodeIds.add(\"5\"); primaryNodeIds.add(\"6\"); primaryNodeIds.add(\"7\"); primaryNodeIds.add(\"8\"); primaryNodeIds.add(\"9\"); final MemcachedNodesManager nodesManager = new MemcachedNodesManager(\"memcached\", primaryNodeIds, null, null, null); assertEquals(\"1\", nodesManager.getNextAvailableNodeId(\"1\")); assertEquals(\"2\", nodesManager.getNextAvailableNodeId(\"2\")); assertEquals(\"3\", nodesManager.getNextAvailableNodeId(\"3\")); assertEquals(\"4\", nodesManager.getNextAvailableNodeId(\"4\")); assertEquals(\"5\", nodesManager.getNextAvailableNodeId(\"5\")); assertEquals(\"6\", nodesManager.getNextAvailableNodeId(\"6\")); assertEquals(\"7\", nodesManager.getNextAvailableNodeId(\"7\")); assertEquals(\"8\", nodesManager.getNextAvailableNodeId(\"8\")); assertEquals(\"9\", nodesManager.getNextAvailableNodeId(\"9\")); assertEquals(\"8\", nodesManager.getNextAvailableNodeId(\"9\")); assertEquals(\"8\", nodesManager.getNextAvailableNodeId(\"8\")); assertEquals(\"9\", nodesManager.getNextAvailableNodeId(\"9\")); assertEquals(\"9\","
    },
    {
        "original_path": "magro_memcached-session-manager###magro_memcached-session-manager/core/src/test/java/de/javakaffee/web/msm/MemcachedNodesManagerTest###testGetNodeId",
        "generated_path": "MemcachedNodesManagerTest###testGetNodeId.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test(expected = IllegalArgumentException.class) public void testGetNodeIdNull() { _memcachedNodesManager.getNodeId(null); }\n"
    },
    {
        "original_path": "magro_memcached-session-manager###magro_memcached-session-manager/core/src/test/java/de/javakaffee/web/msm/MemcachedNodesManagerTest###testChangeSessionIdForTomcatFailover",
        "generated_path": "MemcachedNodesManagerTest###testChangeSessionIdForTomcatFailover.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testChangeSessionIdForTomcatFailover() { final String newSessionId = _memcachedNodesManager.changeSessionIdForTomcatFailover(SESSION_ID, null); assertEquals(newSessionId, _sessionIdFormat.changeJvmRoute(SESSION_ID, null)); assertEquals(newSessionId, _sessionIdFormat.stripJvmRoute(SESSION_ID)); assertEquals(newSessionId, _memcachedNodesManager.changeSessionIdForTomcatFailover(SESSION_ID, \"\")); assertEquals(newSessionId, _memcachedNodesManager.changeSessionIdForTomcatFailover(SESSION_ID, \"\")); assertEquals(newSessionId, _memcachedNodesManager.changeSessionIdForTomcatFailover(SESSION_ID, \"\")); assertEquals(newSessionId, _memcachedNodesManager.changeSessionIdForTomcatFailover(SESSION_ID, \"\")); assertEquals(newSessionId, _memcachedNodesManager.changeSessionIdForTomcatFailover(SESSION_ID, \"\")); assertEquals(newSessionId, _memcachedNodesManager.changeSessionIdForTomcatFailover(SESSION_ID, \"\")); assertEquals(newSessionId, _memcachedNodesManager.changeSessionIdForTomcatFailover(SESSION_ID, \"\")); assertEquals(newSessionId, _memcachedNodesManager.changeSessionIdForTomcatFailover(SESSION_ID, \"\")); assertEquals(newSessionId, _memcachedNodesManager.changeSessionIdForTomcatFailover(SESSION_ID, \"\")); assertEquals(newSessionId"
    },
    {
        "original_path": "magro_memcached-session-manager###magro_memcached-session-manager/core/src/test/java/de/javakaffee/web/msm/SessionIdFormatTest###testCreateSessionId",
        "generated_path": "SessionIdFormatTest###testCreateSessionId.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testCreateSessionId() throws Exception { final SessionIdFormat sessionIdFormat = new SessionIdFormat(); assertThat(sessionIdFormat.createSessionId(\"test\", null), is(\"test\")); assertThat(sessionIdFormat.createSessionId(\"test\", \"memcached\"), is(\"test\")); assertThat(sessionIdFormat.createSessionId(\"test\", \"memcached\"), is(\"test\")); assertThat(sessionIdFormat.createSessionId(\"test\", \"memcached\"), is(\"test\")); assertThat(sessionIdFormat.createSessionId(\"test\", \"memcached\"), is(\"test\")); assertThat(sessionIdFormat.createSessionId(\"test\", \"memcached\"), is(\"test\")); assertThat(sessionIdFormat.createSessionId(\"test\", \"memcached\"), is(\"test\")); assertThat(sessionIdFormat.createSessionId(\"test\", \"memcached\"), is(\"test\")); assertThat(sessionIdFormat.createSessionId(\"test\", \"memcached\"), is(\"test\")); assertThat(sessionIdFormat.createSessionId(\"test\", \"memcached\"), is(\"test\")); assertThat(sessionIdFormat.createSessionId(\"test\", \"memcached\"), is(\"test\")); assertThat(sessionIdFormat.createSessionId(\"test\", \"memcached\"), is(\"test\")); assertThat(sessionIdFormat.createSessionId(\"test\", \"memcached\"), is(\"test\")); assertThat(sessionIdFormat.createSessionId(\"test\","
    },
    {
        "original_path": "magro_memcached-session-manager###magro_memcached-session-manager/core/src/test/java/de/javakaffee/web/msm/SessionIdFormatTest###testExtractMemcachedId",
        "generated_path": "SessionIdFormatTest###testExtractMemcachedId.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void extractMemcachedId() { assertThat( sessionIdFormat.extractMemcachedId(\"-memcached-id-1.memcached-id-2.memcached-id-3\")).isEqualTo(\"memcached-id-2\"); assertThat( sessionIdFormat.extractMemcachedId(\"-memcached-id-3.memcached-id-3\")).isEqualTo(\"memcached-id-3\"); assertThat( sessionIdFormat.extractMemcachedId(\"-memcached-id-3.memcached-id-4\")).isEqualTo(\"memcached-id-4\"); assertThat( sessionIdFormat.extractMemcachedId(\"-memcached-id-4.memcached-id-5\")).isEqualTo(\"memcached-id-5\"); assertThat( sessionIdFormat.extractMemcachedId(\"-memcached-id-4.memcached-id-6\")).isEqualTo(\"memcached-id-6\"); assertThat( sessionIdFormat.extractMemcachedId(\"-memcached-id-6.memcached-id-7\")).isEqualTo(\"memcached-id-7\"); assertThat( sessionIdFormat.extractMemcachedId(\"-memcached-id-6.memcached-id-7\")).isEqualTo(\"memcached-id-6.memcached-id-7\"); assertThat( sessionIdFormat.extractMemcachedId(\"-memcached-id-7\")).isEqualTo(\"memcached-id"
    },
    {
        "original_path": "jcodec_jcodec###jcodec_jcodec/src/test/java/org/jcodec/containers/mp4/SampleOffsetUtilsTest###testGetChunkBySample",
        "generated_path": "SampleOffsetUtilsTest###testGetChunkBySample.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetChunkBySample() throws Exception { ChunkOffsetsBox chunkOffsets = new ChunkOffsetsBox(new int[]{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
    },
    {
        "original_path": "jcodec_jcodec###jcodec_jcodec/src/test/java/org/jcodec/codecs/h264/CoeffTransformerTest###testQuantizeDC2x2",
        "generated_path": "CoeffTransformerTest###testQuantizeDC2x2.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testQuantizeDC2x2() { CoeffTransformer.quantizeDC2x2(new int[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 24, 31, 32, 35, 36, 29, 20, 24, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 32, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31,"
    },
    {
        "original_path": "jcodec_jcodec###jcodec_jcodec/src/test/java/org/jcodec/common/io/ByteBufferSeekableByteChannelTest###testWrite",
        "generated_path": "ByteBufferSeekableByteChannelTest###testWrite.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testWrite() throws IOException { ByteBufferSeekableByteChannel channel = new ByteBufferSeekableByteChannel(ByteBuffer.allocate(10), 10); ByteBuffer src = ByteBuffer.allocate(10); src.put(new byte[10]); src.put(new byte[10]); src.flip(); assertEquals(10, channel.read(src)); assertEquals(10, channel.read(src)); assertEquals(10, channel.read(src)); assertEquals(10, channel.read(src)); assertEquals(10, channel.read(src)); assertEquals(10, channel.read(src)); assertEquals(10, channel.read(src)); assertEquals(10, channel.read(src)); assertEquals(10, channel.read(src)); assertEquals(10, channel.read(src)); assertEquals(10, channel.read(src)); assertEquals(10, channel.read(src)); assertEquals(10, channel.read(src)); assertEquals(10, channel.read(src)); assertEquals(10, channel.read(src)); assertEquals(10, channel.read(src)); assertEquals(10, channel.read(src)); assertEquals(10, channel.read(src)); assertEquals(10, channel.read(src)); assertEquals(10, channel.read(src)); assertEquals(10, channel.read(src)); assertEquals(10, channel.read(src)); assertEquals(10, channel.read(src)); assertEquals"
    },
    {
        "original_path": "jcodec_jcodec###jcodec_jcodec/src/test/java/org/jcodec/movtool/MoovVersionsTest###testRollback",
        "generated_path": "MoovVersionsTest###testRollback.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testRollback() throws IOException { File file = new File(this.getClass().getResource(\"/moov/moov-versions.txt\").toURI()); MoovVersions.rollback(file, new MP4Util.Atom(1, \"A\")); }\n"
    },
    {
        "original_path": "jcodec_jcodec###jcodec_jcodec/src/test/java/org/jcodec/containers/mp4/SampleOffsetUtilsTest###testGetSamplesInChunk",
        "generated_path": "SampleOffsetUtilsTest###testGetSamplesInChunk.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetSamplesInChunk() throws Exception { int sampleCount = SampleOffsetUtils.getSamplesInChunk(1, new SampleToChunkBox(new int[] {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19,"
    },
    {
        "original_path": "jcodec_jcodec###jcodec_jcodec/src/test/java/org/jcodec/containers/mkv/SeekHeadFactoryTest###testEstimeteSeekSize",
        "generated_path": "SeekHeadFactoryTest###testEstimeteSeekSize.java",
        "Compile_result": 1,
        "Test_result": 0,
        "Gen_Test": "@Test public void testEstimeteSeekSize() { int size = SeekHeadFactory.estimeteSeekSize(10, 10); assertEquals(10, size); }\n"
    },
    {
        "original_path": "jcodec_jcodec###jcodec_jcodec/src/test/java/org/jcodec/codecs/h264/CABACTest###testReadIntraChromaPredMode",
        "generated_path": "CABACTest###testReadIntraChromaPredMode.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testReadIntraChromaPredMode() throws Exception { CABAC cabac = new CABAC(10); mDecoder.readIntraChromaPredMode(mDecoder, 10, null, null, true, true); mDecoder.readIntraChromaPredMode(mDecoder, 10, null, true, true); mDecoder.readIntraChromaPredMode(mDecoder, 10, null, true, true); mDecoder.readIntraChromaPredMode(mDecoder, 10, null, true, true); mDecoder.readIntraChromaPredMode(mDecoder, 10, null, true, true); mDecoder.readIntraChromaPredMode(mDecoder, 10, null, true, true); mDecoder.readIntraChromaPredMode(mDecoder, 10, null, true, true); mDecoder.readIntraChromaPredMode(mDecoder, 10, null, true, true); mDecoder.readIntraChromaPredMode(mDecoder, 10, null, true, true); mDecoder.readIntraChromaPredMode(mDecoder, 10, null, true, true); mDecoder.readIntraChromaPredMode(mDecoder, 10, null, true, true); mDecoder.readIntraChromaPredMode(mDecoder, 10, null, true, true); mDecoder.readIntraChromaPredMode(mDecoder, 10, null, true, true);"
    },
    {
        "original_path": "jcodec_jcodec###jcodec_jcodec/src/test/java/org/jcodec/movtool/MoovVersionsTest###testUndo",
        "generated_path": "MoovVersionsTest###testUndo.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testUndo() throws IOException { MovieBox moov = new MovieBox(); moov.setMoov(new MovieBox(moov)); MoovVersions.undo(moov); }\n"
    },
    {
        "original_path": "jcodec_jcodec###jcodec_jcodec/src/test/java/org/jcodec/codecs/h264/CoeffTransformerTest###testQuantizeDC4x4",
        "generated_path": "CoeffTransformerTest###testQuantizeDC4x4.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testQuantizeDC4x4() { CoeffTransformer.quantizeDC4x4(new int[]{1, 2, 3, 4, 5, 6}, 0); CoeffTransformer.quantizeDC4x4(new int[]{1, 2, 3, 4, 5, 6}, 1); CoeffTransformer.quantizeDC4x4(new int[]{1, 2, 3, 4, 5, 6}, 1); CoeffTransformer.quantizeDC4x4(new int[]{1, 2, 3, 4, 5, 6}, 1); CoeffTransformer.quantizeDC4x4(new int[]{1, 2, 3, 4, 5, 6}, 1); CoeffTransformer.quantizeDC4x4(new int[]{1, 2, 3, 4, 5, 6}, 1); CoeffTransformer.quantizeDC4x4(new int[]{1, 2, 3, 4, 5, 6}, 1); CoeffTransformer.quantizeDC4x4(new int[]{1, 2, 3, 4, 5, 6}, 1); CoeffTransformer.quantizeDC4x4(new int[]{1, 2, 3, 4, 5, 6}, 1); CoeffTransformer.quantizeDC4x4(new int[]{1, 2, 3, 4, 5, 6}, 1); CoeffTransformer.quantizeDC4x4(new int[]{"
    },
    {
        "original_path": "jcodec_jcodec###jcodec_jcodec/src/test/java/org/jcodec/codecs/mpeg12/MPEGDecoderTest###testProbe",
        "generated_path": "MPEGDecoderTest###testProbe.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testProbe() throws IOException { ByteBuffer buffer = ByteBuffer.allocate(100); int probe = MPEGDecoder.probe(buffer); assertEquals(0, probe); buffer = ByteBuffer.allocate(100); probe = MPEGDecoder.probe(buffer); assertEquals(0, probe); buffer = ByteBuffer.allocate(100); probe = MPEGDecoder.probe(buffer); assertEquals(0, probe); buffer = ByteBuffer.allocate(100); probe = MPEGDecoder.probe(buffer); assertEquals(0, probe); buffer = ByteBuffer.allocate(100); probe = MPEGDecoder.probe(buffer); assertEquals(0, probe); buffer = ByteBuffer.allocate(100); probe = MPEGDecoder.probe(buffer); assertEquals(0, probe); buffer = ByteBuffer.allocate(100); probe = MPEGDecoder.probe(buffer); assertEquals(0, probe); buffer = ByteBuffer.allocate(100); probe = MPEGDecoder.probe(buffer); assertEquals(0, probe); buffer = ByteBuffer.allocate(100); probe = MPEGDecoder.probe(buffer); assertEquals(0, probe); buffer = ByteBuffer.allocate(100); probe = MPEGDecoder.probe(buffer); assertEquals(0, probe); buffer = ByteBuffer.allocate(100); probe = MPEGDecoder.probe(buffer); assertEquals(0, probe); buffer = ByteBuffer.allocate(100); probe = MPEGDecoder.probe(buffer); assertEquals(0, probe); }\n"
    },
    {
        "original_path": "jcodec_jcodec###jcodec_jcodec/src/test/java/org/jcodec/common/io/ByteBufferSeekableByteChannelTest###testRead",
        "generated_path": "ByteBufferSeekableByteChannelTest###testRead.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testRead() throws IOException { ByteBufferSeekableByteChannel channel = new ByteBufferSeekableByteChannel(ByteBuffer.allocate(10), 10); assertEquals(10, channel.read(ByteBuffer.allocate(10))); assertEquals(10, channel.read(ByteBuffer.allocate(10))); assertEquals(10, channel.read(ByteBuffer.allocate(10))); assertEquals(10, channel.read(ByteBuffer.allocate(10))); assertEquals(10, channel.read(ByteBuffer.allocate(10))); assertEquals(10, channel.read(ByteBuffer.allocate(10))); assertEquals(10, channel.read(ByteBuffer.allocate(10))); assertEquals(10, channel.read(ByteBuffer.allocate(10))); assertEquals(10, channel.read(ByteBuffer.allocate(10))); assertEquals(10, channel.read(ByteBuffer.allocate(10))); assertEquals(10, channel.read(ByteBuffer.allocate(10))); assertEquals(10, channel.read(ByteBuffer.allocate(10))); assertEquals(10, channel.read(ByteBuffer.allocate(10))); assertEquals(10, channel.read(ByteBuffer.allocate(10))); assertEquals(10, channel.read(ByteBuffer.allocate(10))); assertEquals(10, channel.read(ByteBuffer.allocate(10))); assertEquals(10, channel.read(ByteBuffer.allocate(10))); assertEquals(10, channel.read(ByteBuffer.allocate(10"
    },
    {
        "original_path": "jcodec_jcodec###jcodec_jcodec/src/test/java/org/jcodec/containers/dpx/DPXReaderTest###testTryParseISO8601Date",
        "generated_path": "DPXReaderTest###testTryParseISO8601Date.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testParseISO8601Date() throws IOException { Date date = DPXReader.tryParseISO8601Date(\"2013-01-01\"); assertNotNull(date); assertEquals(\"2013-01-01\", date.getTime()); assertEquals(\"2013-01-01\", date.getTime()); assertEquals(\"2013-01-01\", date.getTime()); assertEquals(\"2013-01-01\", date.getTime()); assertEquals(\"2013-01-01\", date.getTime()); assertEquals(\"2013-01-01\", date.getTime()); assertEquals(\"2013-01-01\", date.getTime()); assertEquals(\"2013-01-01\", date.getTime()); assertEquals(\"2013-01-01\", date.getTime()); assertEquals(\"2013-01-01\", date.getTime()); assertEquals(\"2013-01-01\", date.getTime()); assertEquals(\"2013-01-01\", date.getTime()); assertEquals(\"2013-01-01\", date.getTime()); assertEquals(\"2013-01-01\", date.getTime()); assertEquals(\"2013-01-01\", date.getTime()); assertEquals(\"2013-01-01\", date.getTime()); assertEquals(\"2013-01-01\", date.getTime()); assertEquals(\"2013-01-01\", date.getTime()); assertEquals(\"2013-01-01\","
    },
    {
        "original_path": "jcodec_jcodec###jcodec_jcodec/src/test/java/org/jcodec/containers/mkv/EbmlUtilTest###testComputeLength",
        "generated_path": "EbmlUtilTest###testComputeLength.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test(expected = RuntimeException.class) public void testComputeLength() { EbmlUtil.computeLength((byte) 0x00); }\n"
    },
    {
        "original_path": "jcodec_jcodec###jcodec_jcodec/src/test/java/org/jcodec/containers/mp4/SampleOffsetUtilsTest###testGetFirstSampleAtChunk",
        "generated_path": "SampleOffsetUtilsTest###testGetFirstSampleAtChunk.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetFirstSampleAtChunk() throws Exception { ChunkOffsetsBox chunkOffsets = new ChunkOffsetsBox(new int[]{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0"
    },
    {
        "original_path": "jcodec_jcodec###jcodec_jcodec/src/test/java/org/jcodec/containers/mp4/SegmentIndexBoxTest###testParse",
        "generated_path": "SegmentIndexBoxTest###testParse.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testParse() { SegmentIndexBox box = SegmentIndexBox.createSegmentIndexBox(); box.parse(ByteBuffer.wrap(new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,"
    },
    {
        "original_path": "jcodec_jcodec###jcodec_jcodec/src/test/java/org/jcodec/containers/mp4/muxer/MP4MuxerTest###testAddTrackWithId",
        "generated_path": "MP4MuxerTest###testAddTrackWithId.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test(expected = IllegalArgumentException.class) public void testAddTrackWithIdThrowsException() throws IOException { MP4Muxer.createMP4MuxerToChannel(null); }\n"
    },
    {
        "original_path": "jcodec_jcodec###jcodec_jcodec/src/test/java/org/jcodec/codecs/vpx/vp9/ModeInfoTest###testReadSkipFlag",
        "generated_path": "ModeInfoTest###testReadSkipFlag.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testReadSkipFlag() { ModeInfo modeInfo = new ModeInfo(0, true, 0, 0, 0, 0, 0); assertTrue(modeInfo.readSkipFlag(0, 0, 0, decoder, context)); assertTrue(modeInfo.readSkipFlag(0, 0, 0, decoder, context)); assertTrue(modeInfo.readSkipFlag(0, 0, 0, decoder, context)); assertTrue(modeInfo.readSkipFlag(0, 0, 0, decoder, context)); assertTrue(modeInfo.readSkipFlag(0, 0, 0, decoder, context)); assertTrue(modeInfo.readSkipFlag(0, 0, 0, decoder, context)); assertTrue(modeInfo.readSkipFlag(0, 0, 0, decoder, context)); assertTrue(modeInfo.readSkipFlag(0, 0, 0, decoder, context)); assertTrue(modeInfo.readSkipFlag(0, 0, 0, decoder, context)); assertTrue(modeInfo.readSkipFlag(0, 0, 0, decoder, context)); assertTrue(modeInfo.readSkipFlag(0, 0, 0, decoder, context)); assertTrue(modeInfo.readSkipFlag(0, 0, 0, decoder, context)); assertTrue(modeInfo.readSkipFlag(0, 0, 0, decoder, context)); assertTrue(modeInfo.readSkipFlag(0, 0, 0, decoder, context)); assertTrue(modeInfo"
    },
    {
        "original_path": "jcodec_jcodec###jcodec_jcodec/src/test/java/org/jcodec/movtool/MoovVersionsTest###testAddVersion",
        "generated_path": "MoovVersionsTest###testAddVersion.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testAddVersion() throws IOException { MovieBox moov = new MovieBox(); moov.setHeader(new Header()); moov.setEstimateSize(1024); moov.setOffset(0); moov.setAtomCount(1); moov.setAtomCount(2); MoovVersions.addVersion(moov, moov); assertEquals(1024, moov.getHeader().getSize()); assertEquals(1024, moov.getHeader().estimateSize()); assertEquals(1024, moov.getHeader().getOffset()); assertEquals(1024, moov.getHeader().estimateSize()); assertEquals(1024, moov.getHeader().estimateSize()); assertEquals(1024, moov.getHeader().estimateSize()); assertEquals(1024, moov.getHeader().estimateSize()); assertEquals(1024, moov.getHeader().estimateSize()); assertEquals(1024, moov.getHeader().estimateSize()); assertEquals(1024, moov.getHeader().estimateSize()); assertEquals(1024, moov.getHeader().estimateSize()); assertEquals(1024, moov.getHeader().estimateSize()); assertEquals(1024, moov.getHeader().estimateSize()); assertEquals(1024, moov.getHeader().estimateSize()); assertEquals(1024, moov.getHeader().estimateSize()); assertEquals(1024, moov.getHeader().estimateSize());"
    },
    {
        "original_path": "jcodec_jcodec###jcodec_jcodec/src/test/java/org/jcodec/common/model/RationalTest###testParse",
        "generated_path": "RationalTest###testParse.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testParse() { assertEquals(Rational.ONE, Rational.parse(\"1/2\")); assertEquals(Rational.ONE, Rational.parse(\"1/2\")); assertEquals(Rational.ONE, Rational.parse(\"1/2\")); assertEquals(Rational.ONE, Rational.parse(\"1/2\")); assertEquals(Rational.ONE, Rational.parse(\"1/2\")); assertEquals(Rational.ONE, Rational.parse(\"1/2\")); assertEquals(Rational.ONE, Rational.parse(\"1/2\")); assertEquals(Rational.ONE, Rational.parse(\"1/2\")); assertEquals(Rational.ONE, Rational.parse(\"1/2\")); assertEquals(Rational.ONE, Rational.parse(\"1/2\")); assertEquals(Rational.ONE, Rational.parse(\"1/2\")); assertEquals(Rational.ONE, Rational.parse(\"1/2\")); assertEquals(Rational.ONE, Rational.parse(\"1/2\")); assertEquals(Rational.ONE, Rational.parse(\"1/2\")); assertEquals(Rational.ONE, Rational.parse(\"1/2\")); assertEquals(Rational.ONE, Rational.parse(\"1/2\")); assertEquals(Rational.ONE, Rational.parse(\"1/2\")); assertEquals(R"
    },
    {
        "original_path": "jcodec_jcodec###jcodec_jcodec/src/test/java/org/jcodec/codecs/h264/CoeffTransformerTest###testQuantizeAC",
        "generated_path": "CoeffTransformerTest###testQuantizeAC.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testQuantizeAC() { CoeffTransformer.quantizeAC(new int[]{1, 2, 3, 4, 5, 6}, 0); CoeffTransformer.quantizeAC(new int[]{1, 2, 3, 4, 5, 6}, 1); CoeffTransformer.quantizeAC(new int[]{1, 2, 3, 4, 5, 6}, 1); CoeffTransformer.quantizeAC(new int[]{1, 2, 3, 4, 5, 6}, 1); CoeffTransformer.quantizeAC(new int[]{1, 2, 3, 4, 5, 6}, 1); CoeffTransformer.quantizeAC(new int[]{1, 2, 3, 4, 5, 6}, 1); CoeffTransformer.quantizeAC(new int[]{1, 2, 3, 4, 5, 6}, 1); CoeffTransformer.quantizeAC(new int[]{1, 2, 3, 4, 5, 6}, 1); CoeffTransformer.quantizeAC(new int[]{1, 2, 3, 4, 5, 6}, 1); CoeffTransformer.quantizeAC(new int[]{1, 2, 3, 4, 5, 6}, 1); CoeffTransformer.quantizeAC(new int[]{1, 2, 3, 4, 5, 6}, 1); CoeffTransformer.quantizeAC(new int[]{1, 2, 3, 4, 5,"
    },
    {
        "original_path": "jcodec_jcodec###jcodec_jcodec/src/test/java/org/jcodec/codecs/vpx/vp9/InterModeInfoTest###testReadInterMode",
        "generated_path": "InterModeInfoTest###testReadInterMode.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testInterModeZEROMV() { InterModeInfo info = new InterModeInfo(0, false, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0"
    },
    {
        "original_path": "jcodec_jcodec###jcodec_jcodec/src/test/java/org/jcodec/movtool/StripTest###testCutChunksToGaps",
        "generated_path": "StripTest###testCutChunksToGaps.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testCutChunksToGaps() throws Exception { List<Chunk> chunks = new ArrayList<Chunk>(); List<Chunk> gaps = new ArrayList<Chunk>(); gaps.add(new _2<Long, Long>(0, 0)); gaps.add(new _2<Long, Long>(0, 0)); chunks.add(new Chunk(0, 0, 0)); chunks.add(new Chunk(0, 0, 0)); chunks.add(new Chunk(0, 0, 0)); chunks.add(new Chunk(0, 0, 0)); chunks.add(new Chunk(0, 0, 0)); chunks.add(new Chunk(0, 0, 0)); chunks.add(new Chunk(0, 0, 0)); chunks.add(new Chunk(0, 0, 0)); chunks.add(new Chunk(0, 0, 0)); chunks.add(new Chunk(0, 0, 0)); chunks.add(new Chunk(0, 0, 0)); chunks.add(new Chunk(0, 0, 0)); chunks.add(new Chunk(0, 0, 0)); chunks.add(new Chunk(0, 0, 0)); chunks.add(new Chunk(0, 0, 0)); chunks.add(new Chunk(0, 0, 0)); chunks.add(new Chunk(0, 0, 0)); chunks.add(new Chunk(0, 0, 0)); chunks.add(new Chunk(0, 0, 0"
    },
    {
        "original_path": "jcodec_jcodec###jcodec_jcodec/src/test/java/org/jcodec/containers/mkv/EbmlUtilTest###testEbmlLength",
        "generated_path": "EbmlUtilTest###testEbmlLength.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testEbmlLength() throws Exception { long value = 1; int length = EbmlUtil.ebmlLength(value); assertEquals(8, length); }\n"
    },
    {
        "original_path": "soabase_exhibitor###soabase_exhibitor/exhibitor-core/src/test/java/com/netflix/exhibitor/core/state/TestMonitorRunningInstance###testServerListHasChanged",
        "generated_path": "TestMonitorRunningInstance###testServerListHasChanged.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testServerListHasChanged() throws Exception { ServerList serverList = new ServerList(); serverList.addServer(new ServerSpec(\"localhost\", 8080)); serverList.addServer(new ServerSpec(\"localhost\", 8080)); ServerSpec localUs = new ServerSpec(); localUs.addServer(new ServerSpec(\"localhost\", 8080)); InstanceState instanceState = new InstanceState(); instanceState.setServerList(serverList); InstanceState localCurrentInstanceState = new InstanceState(); localCurrentInstanceState.setServerList(localUs); assertTrue(instance.serverListHasChanged(instanceState, localCurrentInstanceState)); assertFalse(instance.serverListHasChanged(instanceState, null)); assertFalse(instance.serverListHasChanged(instanceState, null)); assertFalse(instance.serverListHasChanged(instanceState, localCurrentInstanceState)); assertFalse(instance.serverListHasChanged(instanceState, null)); assertFalse(instance.serverListHasChanged(instanceState, null)); assertFalse(instance.serverListHasChanged(instanceState, null)); assertFalse(instance.serverListHasChanged(instanceState, null)); assertFalse(instance.serverListHasChanged(instanceState, localCurrentInstanceState)); assertFalse(instance.serverListHasChanged(instanceState, localCurrentInstanceState)); assertFalse(instance.serverListHasChanged(instanceState, null)); assertFalse(instance.serverListHasChanged(instanceState, null)); assertFalse(instance.serverListHasChanged(instanceState, null"
    },
    {
        "original_path": "jhy_jsoup###jhy_jsoup/src/test/java/org/jsoup/nodes/ElementTest###testWholeText",
        "generated_path": "ElementTest###testWholeText.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void wholeText() { Document doc = Jsoup.parse(\"<p>Hello</p><p>There</p><p>There</p><p>There</p><p>There</p><p>There</p><p>There</p><p>There</p><p>There</p><p>There</p><p>There</p><p>There</p><p>There</p><p>There</p><p>There</p><p>There</p><p>There</p><p>There</p><p>There</p><p>There</p><p>There</p><p>There</p><p>There</p><p>There</p><p>There</p><p>There</p><p>There</p><p>There</p><p>There</p><p>There</p><p>There</p><p>There</p><p>There</p><p>There</p><p>There</p><p>There</p><p>There</p><p>There</p><p>There</p><p>There</p><p>There</p><p>There</p><p>There</p><p>There</p><p>There</p><p>There</p><p>There</p><p>There</p><p>There</p><p>There</p></"
    },
    {
        "original_path": "jhy_jsoup###jhy_jsoup/src/test/java/org/jsoup/nodes/ElementTest###testHasText",
        "generated_path": "ElementTest###testHasText.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testHasText() { Document doc = Jsoup.parse(\"<div><p>Hello</p></div>\"); Elements divs = doc.select(\"p\").select(\"p\").select(\"p\").select(\"p\").select(\"p\").select(\"p\").select(\"p\").select(\"p\").select(\"p\").select(\"p\").select(\"p\").select(\"p\").select(\"p\").select(\"p\").select(\"p\").select(\"p\").select(\"p\").select(\"p\").select(\"p\").select(\"p\").select(\"p\").select(\"p\").select(\"p\").select(\"p\").select(\"p\").select(\"p\").select(\"p\").select(\"p\").select(\"p\").select(\"p\").select(\"p\").select(\"p\").select(\"p\").select(\"p\").select(\"p\").select(\"p\").select(\"p\").select(\"p\").select(\"p\").select(\"p\").select(\"p\").select(\"p\").select(\"p\").select(\"p\").select(\"p\").select(\"p\").select(\"p\").select(\"p\").select(\"p\").select(\"p\").select(\"p\").select(\"p\").select(\"p\").select(\"p\").select(\"p\").select(\"p\").select(\"p\").select(\"p\").select(\"p\").select(\"p\").select(\"p\").select(\"p\").select(\"p\").select(\"p\").select(\"p\").select(\"p\").select(\"p\").select(\"p\").select(\"p\").select(\"p\").select(\""
    },
    {
        "original_path": "jhy_jsoup###jhy_jsoup/src/test/java/org/jsoup/nodes/ElementTest###testClosest",
        "generated_path": "ElementTest###testClosest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testClosest() { Document doc = Jsoup.parse(\"<div><p>Hello</p></div>\"); Elements els = doc.select(\"p\").first(); assertEquals(1, els.size()); assertEquals(\"Hello\", els.get(0).text()); assertEquals(\"\", els.get(1).text()); assertEquals(\"\", els.get(2).text()); assertEquals(\"\", els.get(3).text()); assertEquals(\"\", els.get(4).text()); assertEquals(\"\", els.get(5).text()); assertEquals(\"\", els.get(6).text()); assertEquals(\"\", els.get(7).text()); assertEquals(\"\", els.get(8).text()); assertEquals(\"\", els.get(9).text()); assertEquals(\"\", els.get(10).text()); assertEquals(\"\", els.get(11).text()); assertEquals(\"\", els.get(12).text()); assertEquals(\"\", els.get(13).text()); assertEquals(\"\", els.get(14).text()); assertEquals(\"\", els.get(15).text()); assertEquals(\"\", els.get(16).text()); assertEquals(\"\", els.get(17).text()); assertEquals(\"\", els.get(18).text()); assertEquals(\"\", els.get(19).text()); assertEquals(\"\", els.get(20).text()); assertEquals(\"\", els.get(20).text()); assertEquals(\""
    },
    {
        "original_path": "jhy_jsoup###jhy_jsoup/src/test/java/org/jsoup/nodes/ElementTest###testGetElementById",
        "generated_path": "ElementTest###testGetElementById.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void getElementById() { }\n"
    },
    {
        "original_path": "jhy_jsoup###jhy_jsoup/src/test/java/org/jsoup/nodes/DocumentTest###testClone",
        "generated_path": "DocumentTest###testClone.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testClone() { Document doc = Jsoup.parse(\"<html><head><meta http-equiv=\\\\\"Content-Type\\\\\" content=\\\\\"text/html; charset=utf-8\\\\\" /></head><body><form><form><form><form><form><form><form><form><form><form><form><form><form><form><form><form><form><form><form><form><form><form><form><form><form><form><form><form><form><form><form><form><form><form><form><form><form><form><form><form><form><form><form><form><form><form><form><form><form><form><form><form><form><form><form><form><form><form><form><form><form><form><form><form><form><form><form><form><form><form><form><form><form><form><form><form><form><form><form><form><form><form><form><form><form><form><form><form><form><form><form><form><form><form><form><form><form><form><form><form><form><form><form><form><form><form><form><form><form><form><form><form><form><form><form><form><form><form><form><form><form><form><form><form><form><form><form><form><form><form><form><form><form><"
    },
    {
        "original_path": "jhy_jsoup###jhy_jsoup/src/test/java/org/jsoup/nodes/ElementTest###testAppendTo",
        "generated_path": "ElementTest###testAppendTo.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void appendTo() { Document doc = Jsoup.parse(\"<div><p>Hello</p></div>\"); doc.select(\"p\").appendTo(doc); assertEquals(\"<div><p>Hello</p></div>\", TextUtil.stripNewlines(doc.body().html())); }\n"
    },
    {
        "original_path": "jhy_jsoup###jhy_jsoup/src/test/java/org/jsoup/nodes/ElementTest###testPrependText",
        "generated_path": "ElementTest###testPrependText.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void prependText() { Document doc = Jsoup.parse(\"<p>Hello</p><p>There</p><p>There</p></p>\"); doc.select(\"p\").prependText(\"hello\"); assertEquals(\"Hello\", doc.select(\"p\").text()); }\n"
    },
    {
        "original_path": "larsga_Duke###larsga_Duke/duke-core/src/test/java/no/priv/garshol/duke/genetic/GeneticConfigurationTest###testMakeRandomCopy",
        "generated_path": "GeneticConfigurationTest###testMakeRandomCopy.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testMakeRandomCopy() { GeneticConfiguration c = new GeneticConfiguration(new Configuration()); GeneticConfiguration copy = c.makeRandomCopy(); assertEquals(c, copy); }\n"
    },
    {
        "original_path": "spotify_apollo###spotify_apollo/modules/okhttp-client/src/test/java/com/spotify/apollo/http/client/HttpClientTest###testSend",
        "generated_path": "HttpClientTest###testSend.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testSend() throws Exception { HttpClient client = HttpClient.create(); com.spotify.apollo.Request apolloRequest = new com.spotify.apollo.Request.Builder().uri(\"http: com.spotify.apollo.Request apolloIncomingRequest = new com.spotify.apollo.Request.Builder().payload(new byte[0]).headerEntries(Collections.singletonMap(\"key\", \"value\")).headerEntries(Collections.singletonMap(\"key\", \"value\")).build(); CompletableFuture<com.spotify.apollo.Response<ByteString>> result = client.send(apolloRequest, Optional.of(apolloIncomingRequest)); assertTrue(result.isDone()); }\n"
    },
    {
        "original_path": "spotify_apollo###spotify_apollo/apollo-api-impl/src/test/java/com/spotify/apollo/meta/MetaDescriptorTest###testLoadApolloVersion",
        "generated_path": "MetaDescriptorTest###testLoadApolloVersion.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testLoadApolloVersion() throws IOException { String apolloVersion = MetaDescriptor.loadApolloVersion(ClassLoader.getSystemClassLoader()); assertEquals(\"1.0.0\", apolloVersion); }\n"
    },
    {
        "original_path": "bazaarvoice_jolt###bazaarvoice_jolt/json-utils/src/test/java/com/bazaarvoice/jolt/JsonUtilsTest###testRemoveRecursive",
        "generated_path": "JsonUtilsTest###testRemoveRecursive.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testRemoveRecursive() throws Exception { Map<String, Object> map = new HashMap<String, Object>(); map.put(\"a\", \"1\"); map.put(\"b\", \"2\"); map.put(\"c\", \"3\"); map.put(\"d\", \"4\"); map.put(\"e\", \"5\"); map.put(\"f\", \"6\"); map.put(\"f\", \"7\"); map.put(\"e\", \"8\"); map.put(\"f\", \"9\"); JsonUtils.removeRecursive(map, \"a\"); Assert.assertEquals(2, map.size()); Assert.assertEquals(\"1\", map.get(\"a\")); Assert.assertEquals(\"2\", map.get(\"b\")); Assert.assertEquals(\"3\", map.get(\"c\")); Assert.assertEquals(\"4\", map.get(\"e\")); Assert.assertEquals(\"5\", map.get(\"f\")); Assert.assertEquals(\"6\", map.get(\"f\")); Assert.assertEquals(\"7\", map.get(\"e\")); Assert.assertEquals(\"8\", map.get(\"f\")); Assert.assertEquals(\"9\", map.get(\"e\")); Assert.assertEquals(\"8\", map.get(\"f\")); Assert.assertEquals(\"9\", map.get(\"f\")); Assert.assertEquals(\"8\", map.get(\"f\")); Assert.assertEquals(\"9\", map.get(\"f\")); Assert.assertEquals(\"9"
    },
    {
        "original_path": "bazaarvoice_jolt###bazaarvoice_jolt/jolt-core/src/test/java/com/bazaarvoice/jolt/utils/JoltUtilsTest###testListKeyChains",
        "generated_path": "JoltUtilsTest###testListKeyChains.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testListKeyChains() throws Exception { List<Object[]> keyChains = JoltUtils.listKeyChains(Arrays.asList(\"a\", \"b\", \"c\")); assertEquals(2, keyChains.size()); assertEquals(\"a\", keyChains.get(0)); assertEquals(\"b\", keyChains.get(1)); assertEquals(\"c\", keyChains.get(2)); assertEquals(\"d\", keyChains.get(3)); assertEquals(\"e\", keyChains.get(4)); assertEquals(\"f\", keyChains.get(5)); assertEquals(\"g\", keyChains.get(6)); assertEquals(\"h\", keyChains.get(7)); assertEquals(\"h\", keyChains.get(8)); assertEquals(\"h\", keyChains.get(9)); assertEquals(\"h\", keyChains.get(10)); assertEquals(\"h\", keyChains.get(11)); assertEquals(\"h\", keyChains.get(12)); assertEquals(\"h\", keyChains.get(13)); assertEquals(\"h\", keyChains.get(14)); assertEquals(\"h\", keyChains.get(15)); assertEquals(\"h\", keyChains.get(16)); assertEquals(\"h\", keyChains.get(17)); assertEquals(\"h\", keyChains.get(18)); assertEquals(\"h\", keyChains.get(19)); assertEquals(\"h\", keyChains.get(19)); assertEquals(\"h\", keyChains.get(19)); }\n"
    },
    {
        "original_path": "bazaarvoice_jolt###bazaarvoice_jolt/jolt-core/src/test/java/com/bazaarvoice/jolt/utils/StringToolsTest###testCountMatches",
        "generated_path": "StringToolsTest###testCountMatches.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testCountMatches() { assertEquals(0, StringTools.countMatches(\"\", \"\")); assertEquals(0, StringTools.countMatches(\"\", \"\")); assertEquals(0, StringTools.countMatches(\"\", \"\")); assertEquals(0, StringTools.countMatches(\"\", \"\")); assertEquals(0, StringTools.countMatches(\"\", \"\")); assertEquals(0, StringTools.countMatches(\"\", \"\")); assertEquals(0, StringTools.countMatches(\"\", \"\")); assertEquals(0, StringTools.countMatches(\"\", \"\")); assertEquals(0, StringTools.countMatches(\"\", \"\")); assertEquals(0, StringTools.countMatches(\"\", \"\")); assertEquals(0, StringTools.countMatches(\"\", \"\")); assertEquals(0, StringTools.countMatches(\"\", \"\")); assertEquals(0, StringTools.countMatches(\"\", \"\")); assertEquals(0, StringTools.countMatches(\"\", \"\")); assertEquals(0, StringTools.countMatches(\"\", \"\")); assertEquals(0, StringTools.countMatches(\"\", \"\")); assertEquals(0, StringTools.countMatches(\"\", \"\")); assertEquals(0, StringTools.countMatches(\"\", \"\")); assertEquals(0, StringTools.countMatches(\"\", \"\")); assertEquals(0, StringTools.countMatches(\"\", \"\")); assertEquals(0, StringTools.countMatches(\"\", \"\")); assertEquals(0, StringTools.countMatches(\"\", \"\")); }"
    },
    {
        "original_path": "bazaarvoice_jolt###bazaarvoice_jolt/jolt-core/src/test/java/com/bazaarvoice/jolt/utils/StringToolsTest###testIsBlank",
        "generated_path": "StringToolsTest###testIsBlank.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testIsBlank() { Assert.assertTrue(StringTools.isBlank(\" \")); Assert.assertTrue(StringTools.isBlank(\" \")); Assert.assertTrue(StringTools.isBlank(\" \")); Assert.assertTrue(StringTools.isBlank(\" \")); Assert.assertTrue(StringTools.isBlank(\" \")); Assert.assertTrue(StringTools.isBlank(\" \")); Assert.assertTrue(StringTools.isBlank(\" \")); Assert.assertTrue(StringTools.isBlank(\" \")); Assert.assertTrue(StringTools.isBlank(\" \")); Assert.assertTrue(StringTools.isBlank(\" \")); Assert.assertTrue(StringTools.isBlank(\" \")); Assert.assertTrue(StringTools.isBlank(\" \")); Assert.assertTrue(StringTools.isBlank(\" \")); Assert.assertTrue(StringTools.isBlank(\" \")); Assert.assertTrue(StringTools.isBlank(\" \")); Assert.assertTrue(StringTools.isBlank(\" \")); Assert.assertTrue(StringTools.isBlank(\" \")); Assert.assertTrue(StringTools.isBlank(\" \")); Assert.assertTrue(StringTools.isBlank(\" \")); Assert.assertTrue(StringTools.isBlank(\" \")); Assert.assertTrue(StringTools.isBlank(\" \")); Assert.assertTrue(StringTools.isBlank(\" \")); Assert.assertTrue(StringTools.isBlank(\" \")); Assert.assertTrue(StringTools.isBlank"
    },
    {
        "original_path": "bazaarvoice_jolt###bazaarvoice_jolt/cli/src/test/java/com/bazaarvoice/jolt/JoltCliTest###testRunJolt",
        "generated_path": "JoltCliTest###testRunJolt.java",
        "Compile_result": 1,
        "Test_result": 0,
        "Gen_Test": "@Test public void testRunJolt() { JoltCli.runJolt(new String[]{\"jolt\"}); }\n"
    },
    {
        "original_path": "haraldk_TwelveMonkeys###haraldk_TwelveMonkeys/imageio/imageio-tiff/src/test/java/com/twelvemonkeys/imageio/plugins/tiff/TIFFImageMetadataTest###testMergeTree",
        "generated_path": "TIFFImageMetadataTest###testMergeTree.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testMergeTree() throws IIOInvalidTreeException { TIFFImageMetadata TIFFImageMetadata = new TIFFImageMetadata(); TIFFImageMetadata.IFD ifd = new TIFFImageMetadata.IFD(new ArrayList<IFD>()); TIFFImageMetadata.IFD ifd2 = new TIFFImageMetadata.IFD(new ArrayList<IFD>()); TIFFImageMetadata.IFD ifd3 = new TIFFImageMetadata.IFD(new ArrayList<IFD>()); TIFFImageMetadata.IFD ifd4 = new TIFFImageMetadata.IFD(new ArrayList<IFD>()); TIFFImageMetadata.IFD ifd5 = new TIFFImageMetadata.IFD(new ArrayList<IFD>()); TIFFImageMetadata.IFD ifd6 = new TIFFImageMetadata.IFD(new ArrayList<IFD>()); TIFFImageMetadata.IFD ifd7 = new TIFFImageMetadata.IFD(new ArrayList<IFD>()); TIFFImageMetadata.IFD ifd5 = new TIFFImageMetadata.IFD(new ArrayList<IFD>()); TIFFImageMetadata.IFD ifd6 = new TIFFImageMetadata.IFD(new ArrayList<IFD>()); TIFFImageMetadata.IFD ifd6 = new TIFFImageMetadata.IFD(new ArrayList<IFD>()); TIFFImageMetadata.IFD ifd7 = new TIFFImageMetadata.IFD(new ArrayList<IFD>()); TIFFImageMetadata.IFD ifd5 = new TIFFImageMetadata.IFD"
    },
    {
        "original_path": "haraldk_TwelveMonkeys###haraldk_TwelveMonkeys/common/common-io/src/test/java/com/twelvemonkeys/io/LittleEndianDataInputStreamTest###testReadInt",
        "generated_path": "LittleEndianDataInputStreamTest###testReadInt.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test(expected = EOFException.class) public void testReadIntNegative() throws IOException { in.readInt(-1); }\n"
    },
    {
        "original_path": "haraldk_TwelveMonkeys###haraldk_TwelveMonkeys/imageio/imageio-clippath/src/test/java/com/twelvemonkeys/imageio/path/PathsTest###testReadClipped",
        "generated_path": "PathsTest###testReadClipped.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testReadClipped() throws IOException { Path2D path = Paths.readClipped(new ByteArrayInputStream(new byte[0])); Path2D clipPath = Paths.applyClippingPath(path, image); assertEquals(clipPath.getWidth(), image.getWidth()); assertEquals(clipPath.getHeight(), image.getHeight()); assertEquals(clipPath.getWidth(), image.getWidth()); assertEquals(clipPath.getHeight(), image.getHeight()); assertEquals(clipPath.getWidth(), image.getWidth()); assertEquals(clipPath.getHeight(), image.getHeight()); assertEquals(clipPath.getWidth(), image.getWidth()); assertEquals(clipPath.getHeight(), image.getHeight()); assertEquals(clipPath.getWidth(), image.getWidth()); assertEquals(clipPath.getHeight(), image.getHeight()); assertEquals(clipPath.getWidth(), image.getWidth()); assertEquals(clipPath.getHeight(), image.getHeight()); assertEquals(clipPath.getWidth(), image.getWidth()); assertEquals(clipPath.getHeight(), image.getHeight()); assertEquals(clipPath.getWidth(), image.getWidth()); assertEquals(clipPath.getHeight(), image.getHeight()); assertEquals(clipPath.getWidth(), image.getWidth()); assertEquals(clipPath.getHeight(), image.getHeight()); assertEquals(clipPath.getWidth(), image.getWidth()); assertEquals("
    },
    {
        "original_path": "haraldk_TwelveMonkeys###haraldk_TwelveMonkeys/common/common-lang/src/test/java/com/twelvemonkeys/lang/StringUtilTest###testToColorString",
        "generated_path": "StringUtilTest###testToColorString.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testToColorString() { System.out.println(\"toColorString\"); Color color = new Color(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
    },
    {
        "original_path": "haraldk_TwelveMonkeys###haraldk_TwelveMonkeys/imageio/imageio-core/src/test/java/com/twelvemonkeys/imageio/stream/BufferedChannelImageInputStreamTest###testRead",
        "generated_path": "BufferedChannelImageInputStreamTest###testRead.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testRead() throws IOException { try (BufferedChannelImageInputStream inputStream = new BufferedChannelImageInputStream(file)) { inputStream.read(); } }\n"
    },
    {
        "original_path": "haraldk_TwelveMonkeys###haraldk_TwelveMonkeys/contrib/src/test/java/com/twelvemonkeys/contrib/tiff/TIFFUtilitiesTest###testApplyOrientation",
        "generated_path": "TIFFUtilitiesTest###testApplyOrientation.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testApplyOrientation() throws Exception { BufferedImage image = ImageIO.read(new File(\"src/test/resources/image_tiff_4.png\")); BufferedImage result = TIFFUtilities.applyOrientation(image, TIFFBaseline.ORIENTATION_TOPLEFT); assertEquals(image.getWidth(), result.getWidth()); assertEquals(image.getHeight(), result.getHeight()); }\n"
    },
    {
        "original_path": "haraldk_TwelveMonkeys###haraldk_TwelveMonkeys/imageio/imageio-metadata/src/test/java/com/twelvemonkeys/imageio/metadata/tiff/RationalTest###testPlus",
        "generated_path": "RationalTest###testPlus.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testPlus() { Rational a = new Rational(1, 2); Rational b = new Rational(1, 2); assertEquals(a, b.plus(a)); assertEquals(a, b.plus(a)); assertEquals(a, b.plus(a)); assertEquals(a, b.plus(a)); assertEquals(a, b.plus(a)); assertEquals(a, b.plus(a)); assertEquals(a, b.plus(a)); assertEquals(a, b.plus(a)); assertEquals(a, b.plus(a)); assertEquals(a, b.plus(a)); assertEquals(a, b.plus(a)); assertEquals(a, b.plus(a)); assertEquals(a, b.plus(a)); assertEquals(a, b.plus(a)); assertEquals(a, b.plus(a)); assertEquals(a, b.plus(a)); assertEquals(a, b.plus(a)); assertEquals(a, b.plus(a)); assertEquals(a, b.plus(a)); assertEquals(a, b.plus(a)); assertEquals(a, b.plus(a)); assertEquals(a, b.plus(a)); assertEquals(a, b.plus(a)); assertEquals(a, b.plus(a)); assertEquals(a, b.plus(a)); assertEquals(a, b.plus(a));"
    },
    {
        "original_path": "haraldk_TwelveMonkeys###haraldk_TwelveMonkeys/imageio/imageio-metadata/src/test/java/com/twelvemonkeys/imageio/metadata/tiff/RationalTest###testTimes",
        "generated_path": "RationalTest###testTimes.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testTimes() { Rational a = new Rational(1, 2); Rational b = new Rational(1, 2); assertEquals(a, b.times(a)); assertEquals(b, a.times(b)); assertEquals(a, b.times(a)); assertEquals(a, b.times(a)); assertEquals(a, b.times(a)); assertEquals(a, b.times(a)); assertEquals(a, b.times(a)); assertEquals(a, b.times(a)); assertEquals(a, b.times(a)); assertEquals(a, b.times(a)); assertEquals(a, b.times(a)); assertEquals(a, b.times(a)); assertEquals(a, b.times(a)); assertEquals(a, b.times(a)); assertEquals(a, b.times(a)); assertEquals(a, b.times(a)); assertEquals(a, b.times(a)); assertEquals(a, b.times(a)); assertEquals(a, b.times(a)); assertEquals(a, b.times(a)); assertEquals(a, b.times(a)); assertEquals(a, b.times(a)); assertEquals(a, b.times(a)); assertEquals(a, b.times(a)); assertEquals(a, b.times(a)); assertEquals(a, b.times(a));"
    },
    {
        "original_path": "haraldk_TwelveMonkeys###haraldk_TwelveMonkeys/common/common-image/src/test/java/com/twelvemonkeys/image/ImageUtilTest###testBrightness",
        "generated_path": "ImageUtilTest###testBrightness.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void testBrightness() throws Exception { }\n"
    },
    {
        "original_path": "haraldk_TwelveMonkeys###haraldk_TwelveMonkeys/common/common-lang/src/test/java/com/twelvemonkeys/lang/StringUtilTest###testPad",
        "generated_path": "StringUtilTest###testPad.java",
        "Compile_result": 1,
        "Test_result": 0,
        "Gen_Test": "@Test public void testPad() { System.out.println(\"pad\"); String source = \"\"; String padString = \"\"; assertEquals(\"\", StringUtil.pad(source, 1, padString, true)); source = \" \"; padString = \"\"; assertEquals(\"\", StringUtil.pad(source, 1, padString, true)); source = \" \"; padString = \"\"; assertEquals(\"\", StringUtil.pad(source, 1, padString, true)); source = \" \"; padString = \"\"; assertEquals(\"\", StringUtil.pad(source, 1, padString, true)); source = \" \"; padString = \"\"; assertEquals(\"\", StringUtil.pad(source, 1, padString, true)); source = \" \"; padString = \"\"; assertEquals(\"\", StringUtil.pad(source, 1, padString, true)); source = \" \"; padString = \"\"; assertEquals(\"\", StringUtil.pad(source, 1, padString, true)); source = \" \"; padString = \"\"; assertEquals(\"\", StringUtil.pad(source, 1, padString, true)); source = \" \"; padString = \"\"; assertEquals(\"\", StringUtil.pad(source, 1, padString, true)); source = \" \"; padString = \"\"; assertEquals(\"\", StringUtil.pad(source, 1, padString, true)); source = \" \"; padString = \"\"; assertEquals(\"\", StringUtil.pad(source, 1, padString, true)); }\n"
    },
    {
        "original_path": "haraldk_TwelveMonkeys###haraldk_TwelveMonkeys/common/common-io/src/test/java/com/twelvemonkeys/io/LittleEndianDataInputStreamTest###testReadByte",
        "generated_path": "LittleEndianDataInputStreamTest###testReadByte.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public final void testReadByte() throws IOException { byte[] bytes = new byte[1]; InputStream is = new ByteArrayInputStream(bytes); LittleEndianDataInputStream lis = new LittleEndianDataInputStream(is); for (int i = 0; i < bytes.length; i++) { assertEquals(bytes[i], lis.readByte()); } }\n"
    },
    {
        "original_path": "haraldk_TwelveMonkeys###haraldk_TwelveMonkeys/common/common-io/src/test/java/com/twelvemonkeys/io/LittleEndianDataInputStreamTest###testReadUnsignedByte",
        "generated_path": "LittleEndianDataInputStreamTest###testReadUnsignedByte.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test(expected = EOFException.class) public void testReadUnsignedByteNegative() throws IOException { in.readUnsignedByte(-1); }\n"
    },
    {
        "original_path": "haraldk_TwelveMonkeys###haraldk_TwelveMonkeys/imageio/imageio-core/src/test/java/com/twelvemonkeys/imageio/stream/BufferedFileImageInputStreamTest###testRead",
        "generated_path": "BufferedFileImageInputStreamTest###testRead.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testRead() throws IOException { try (BufferedFileImageInputStream in = new BufferedFileImageInputStream(new File(\"src/test/resources/test.jpg\")) { int length = in.read(new byte[10], 0, 10); assertEquals(10, length); } }\n"
    },
    {
        "original_path": "haraldk_TwelveMonkeys###haraldk_TwelveMonkeys/common/common-io/src/test/java/com/twelvemonkeys/io/LittleEndianDataInputStreamTest###testReadLong",
        "generated_path": "LittleEndianDataInputStreamTest###testReadLong.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test(expected = EOFException.class) public void testReadLongThrowsEOFException() throws IOException { InputStream is = new ByteArrayInputStream(new byte[0]); LittleEndianDataInputStream lis = new LittleEndianDataInputStream(is); lis.readLong(); }\n"
    },
    {
        "original_path": "haraldk_TwelveMonkeys###haraldk_TwelveMonkeys/common/common-lang/src/test/java/com/twelvemonkeys/util/service/ServiceRegistryTest###testDeregister",
        "generated_path": "ServiceRegistryTest###testDeregister.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testDeregister() throws Exception { ServiceRegistry<Object> s = new ServiceRegistry<Object>(Collections.emptyIterator()); assertTrue(s.deregister(null)); assertFalse(s.deregister(null)); assertFalse(s.deregister(null)); assertFalse(s.deregister(null)); assertFalse(s.deregister(null)); assertFalse(s.deregister(null)); assertFalse(s.deregister(null)); assertFalse(s.deregister(null)); assertFalse(s.deregister(null)); assertFalse(s.deregister(null)); assertFalse(s.deregister(null)); assertFalse(s.deregister(null)); assertFalse(s.deregister(null)); assertFalse(s.deregister(null)); assertFalse(s.deregister(null)); assertFalse(s.deregister(null)); assertFalse(s.deregister(null)); assertFalse(s.deregister(null)); assertFalse(s.deregister(null)); assertFalse(s.deregister(null)); assertFalse(s.deregister(null)); assertFalse(s.deregister(null)); assertFalse(s.deregister(null)); assertFalse(s.deregister(null)); assertFalse(s.deregister(null)); assertFalse(s.deregister(null)); assertFalse"
    },
    {
        "original_path": "haraldk_TwelveMonkeys###haraldk_TwelveMonkeys/imageio/imageio-metadata/src/test/java/com/twelvemonkeys/imageio/metadata/jpeg/JPEGQualityTest###testGetQTables",
        "generated_path": "JPEGQualityTest###testGetQTables.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetQTables() throws IOException { List<JPEGSegment> segments = new ArrayList<JPEGSegment>(); JPEGQTable[] qTables = JPEGQuality.getQTables(segments); Assert.assertEquals(1, qTables.length); Assert.assertEquals(1, qTables[0].getQuantizationTable().length); Assert.assertEquals(1, qTables[1].getQuantizationTable().length); Assert.assertEquals(1, qTables[2].getQuantizationTable().length); Assert.assertEquals(1, qTables[3].getQuantizationTable().length); Assert.assertEquals(1, qTables[4].getQuantizationTable().length); Assert.assertEquals(1, qTables[5].getQuantizationTable().length); Assert.assertEquals(1, qTables[6].getQuantizationTable().length); Assert.assertEquals(1, qTables[7].getQuantizationTable().length); Assert.assertEquals(1, qTables[8].getQuantizationTable().length); Assert.assertEquals(1, qTables[9].getQuantizationTable().length); Assert.assertEquals(1, qTables[10].getQuantizationTable().length); Assert.assertEquals(1, qTables[11].getQuantizationTable().length); Assert.assertEquals(1, qTables[12].getQuantizationTable().length); Assert.assertEquals(1, qTables[13].getQuantizationTable()."
    },
    {
        "original_path": "haraldk_TwelveMonkeys###haraldk_TwelveMonkeys/contrib/src/test/java/com/twelvemonkeys/contrib/tiff/TIFFUtilitiesTest###testSplit",
        "generated_path": "TIFFUtilitiesTest###testSplit.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testSplit() throws IOException { File inputFile = new File(\"src/test/resources/testTIFFUtilities.tif\"); File outputDirectory = new File(\"target/testTIFFUtilities.tif\"); List<File> outputFiles = TIFFUtilities.split(inputFile, outputDirectory); assertNotNull(outputFiles); assertEquals(outputFiles.size(), outputFiles.size()); }\n"
    },
    {
        "original_path": "haraldk_TwelveMonkeys###haraldk_TwelveMonkeys/imageio/imageio-metadata/src/test/java/com/twelvemonkeys/imageio/metadata/iptc/IPTCWriterTest###testWrite",
        "generated_path": "IPTCWriterTest###testWrite.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test(expected = IllegalArgumentException.class) public void testWriteNullDirectory() throws IOException { IPTCWriter writer = new IPTCWriter(); writer.write(null, imageOutputStream); }\n"
    },
    {
        "original_path": "haraldk_TwelveMonkeys###haraldk_TwelveMonkeys/common/common-lang/src/test/java/com/twelvemonkeys/util/service/ServiceRegistryTest###testRegister",
        "generated_path": "ServiceRegistryTest###testRegister.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testServiceRegistry() { ServiceRegistry<Service> s = new ServiceRegistry<Service>(Collections.singletonList(Service.class)); assertTrue(s.register(Service.class)); assertTrue(s.register(Service.class)); assertTrue(s.register(Service.class)); assertTrue(s.register(Service.class)); assertTrue(s.register(Service.class)); assertTrue(s.register(Service.class)); assertTrue(s.register(Service.class)); assertTrue(s.register(Service.class)); assertTrue(s.register(Service.class)); assertTrue(s.register(Service.class)); assertTrue(s.register(Service.class)); assertTrue(s.register(Service.class)); assertTrue(s.register(Service.class)); assertTrue(s.register(Service.class)); assertTrue(s.register(Service.class)); assertTrue(s.register(Service.class)); assertTrue(s.register(Service.class)); assertTrue(s.register(Service.class)); assertTrue(s.register(Service.class)); assertTrue(s.register(Service.class)); assertTrue(s.register(Service.class)); assertTrue(s.register(Service.class)); assertTrue(s.register(Service.class)); assertTrue(s.register(Service.class)); assertTrue(s.register(Service.class)); assertTrue(s.register(Service.class));"
    },
    {
        "original_path": "haraldk_TwelveMonkeys###haraldk_TwelveMonkeys/common/common-lang/src/test/java/com/twelvemonkeys/lang/StringUtilTest###testReplaceIgnoreCase",
        "generated_path": "StringUtilTest###testReplaceIgnoreCase.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void testReplaceIgnoreCase() { System.out.println(\"replaceIgnoreCase\"); String source = \"\"; String pattern = \"\"; String replace = \"\"; String result = StringUtil.replaceIgnoreCase(source, pattern, replace); System.out.println(result); result = StringUtil.replaceIgnoreCase(source, pattern, replace); System.out.println(result); result = StringUtil.replaceIgnoreCase(source, pattern, replace); System.out.println(result); result = StringUtil.replaceIgnoreCase(source, pattern, replace); System.out.println(result); }\n"
    },
    {
        "original_path": "haraldk_TwelveMonkeys###haraldk_TwelveMonkeys/common/common-lang/src/test/java/com/twelvemonkeys/lang/StringUtilTest###testIsEmpty",
        "generated_path": "StringUtilTest###testIsEmpty.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testIsEmpty() { assertTrue(StringUtil.isEmpty(null)); assertTrue(StringUtil.isEmpty(\"\")); assertTrue(StringUtil.isEmpty(\"\")); assertTrue(StringUtil.isEmpty(\" \")); assertTrue(StringUtil.isEmpty(\" \")); assertTrue(StringUtil.isEmpty(\" \")); assertTrue(StringUtil.isEmpty(\" \")); assertTrue(StringUtil.isEmpty(\" \")); assertTrue(StringUtil.isEmpty(\" \")); assertTrue(StringUtil.isEmpty(\" \")); assertTrue(StringUtil.isEmpty(\" \")); assertTrue(StringUtil.isEmpty(\" \")); assertTrue(StringUtil.isEmpty(\" \")); assertTrue(StringUtil.isEmpty(\" \")); assertTrue(StringUtil.isEmpty(\" \")); assertTrue(StringUtil.isEmpty(\" \")); assertTrue(StringUtil.isEmpty(\" \")); assertTrue(StringUtil.isEmpty(\" \")); assertTrue(StringUtil.isEmpty(\" \")); assertTrue(StringUtil.isEmpty(\" \")); assertTrue(StringUtil.isEmpty(\" \")); assertTrue(StringUtil.isEmpty(\" \")); assertTrue(StringUtil.isEmpty(\" \")); assertTrue(StringUtil.isEmpty(\" \")); assertTrue(StringUtil.isEmpty(\" \")); assertTrue(StringUtil.isEmpty(\" \")); assertTrue(StringUtil.isEmpty(\" \")); assertTrue(StringUtil.isEmpty(\" \")); assertTrue(StringUtil.isEmpty(\" \")); assertTrue(StringUtil.isEmpty(\" \")); assertTrue(StringUtil.isEmpty(\" \")"
    },
    {
        "original_path": "haraldk_TwelveMonkeys###haraldk_TwelveMonkeys/imageio/imageio-core/src/test/java/com/twelvemonkeys/imageio/stream/BufferedImageInputStreamTest###testReadBits",
        "generated_path": "BufferedImageInputStreamTest###testReadBits.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test(expected = IllegalArgumentException.class) public void testReadBitsNegative() throws IOException { BufferedImageInputStream is = new BufferedImageInputStream(null); is.readBits(-1); }\n"
    },
    {
        "original_path": "haraldk_TwelveMonkeys###haraldk_TwelveMonkeys/imageio/imageio-core/src/test/java/com/twelvemonkeys/imageio/stream/DirectImageInputStreamTest###testRead",
        "generated_path": "DirectImageInputStreamTest###testRead.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testRead() throws IOException { byte[] bytes = new byte[10]; try (DirectImageInputStream in = new DirectImageInputStream(new ByteArrayInputStream(bytes)) { in.read(bytes, 0, bytes.length); } }\n"
    },
    {
        "original_path": "haraldk_TwelveMonkeys###haraldk_TwelveMonkeys/imageio/imageio-core/src/test/java/com/twelvemonkeys/imageio/color/ColorProfilesTest###testIsOffendingColorProfile",
        "generated_path": "ColorProfilesTest###testIsOffendingColorProfile.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test(expectedExceptions = IllegalArgumentException.class) public void testIsOffendingColorProfileNull() { ColorProfiles.isOffendingColorProfile(null); }\n"
    },
    {
        "original_path": "haraldk_TwelveMonkeys###haraldk_TwelveMonkeys/imageio/imageio-core/src/test/java/com/twelvemonkeys/imageio/stream/BufferedFileImageInputStreamTest###testClose",
        "generated_path": "BufferedFileImageInputStreamTest###testClose.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testBufferedFileImageInputStream() throws IOException { try (BufferedFileImageInputStream in = new BufferedFileImageInputStream(new File(\"src/test/resources/BufferedFileImageInputStream.txt\")) { in.close(); } }\n"
    },
    {
        "original_path": "haraldk_TwelveMonkeys###haraldk_TwelveMonkeys/imageio/imageio-core/src/test/java/com/twelvemonkeys/imageio/stream/ByteArrayImageInputStreamTest###testRead",
        "generated_path": "ByteArrayImageInputStreamTest###testRead.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testByteArrayImageInputStream() throws IOException { byte[] data = new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x"
    },
    {
        "original_path": "haraldk_TwelveMonkeys###haraldk_TwelveMonkeys/common/common-lang/src/test/java/com/twelvemonkeys/lang/StringUtilTest###testReplace",
        "generated_path": "StringUtilTest###testReplace.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void testReplace() { System.out.println(\"replace\"); String source = \"\"; String pattern = \"\"; String replace = \"\"; String result = StringUtil.replace(source, pattern, replace); System.out.println(result); result = StringUtil.replace(source, pattern, replace); System.out.println(result); result = StringUtil.replace(source, pattern, replace); System.out.println(result); result = StringUtil.replace(source, pattern, replace); System.out.println(result); result = StringUtil.replace(source, pattern, replace); System.out.println(result); System.out.println(result); result = StringUtil.replace(source, pattern, replace); System.out.println(result); System.out.println(result); result = StringUtil.replace(source, pattern, replace); System.out.println(result); System.out.println(result); System.out.println(result); }\n"
    },
    {
        "original_path": "haraldk_TwelveMonkeys###haraldk_TwelveMonkeys/imageio/imageio-core/src/test/java/com/twelvemonkeys/imageio/stream/BufferedImageInputStreamTest###testReadBit",
        "generated_path": "BufferedImageInputStreamTest###testReadBit.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test(expected = EOFException.class) public void testReadBit() throws IOException { BufferedImageInputStream is = new BufferedImageInputStream(new ByteArrayInputStream(new byte[]{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0"
    },
    {
        "original_path": "haraldk_TwelveMonkeys###haraldk_TwelveMonkeys/common/common-lang/src/test/java/com/twelvemonkeys/lang/StringUtilTest###testCut",
        "generated_path": "StringUtilTest###testCut.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testCut() { System.out.println(\"cut\"); String string = \"Hello World\"; String result = StringUtil.cut(string, 10, null); System.out.println(result); String result2 = StringUtil.cut(string, 20, null); System.out.println(result2); String result3 = StringUtil.cut(string, 20, null); System.out.println(result3); String result4 = StringUtil.cut(string, 20, null); System.out.println(result4); String result5 = StringUtil.cut(string, 20, null); System.out.println(result5); String result6 = StringUtil.cut(string, 20, null); System.out.println(result6); String result7 = StringUtil.cut(string, 20, null); System.out.println(result7); String result8 = StringUtil.cut(string, 20, null); System.out.println(result8); String result9 = StringUtil.cut(string, 20, null); System.out.println(result9); String result10 = StringUtil.cut(string, 20, null); System.out.println(result10); System.out.println(result10); System.out.println(result10); System.out.println(result10); System.out.println(result9); System.out.println(result9); System.out.println(result9); System.out.println(result9); System.out."
    },
    {
        "original_path": "haraldk_TwelveMonkeys###haraldk_TwelveMonkeys/common/common-io/src/test/java/com/twelvemonkeys/io/LittleEndianDataInputStreamTest###testReadBoolean",
        "generated_path": "LittleEndianDataInputStreamTest###testReadBoolean.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testReadBoolean() throws IOException { InputStream is = new ByteArrayInputStream(new byte[] { (byte) 0x01, (byte) 0x02, (byte) 0x03, (byte) 0x04 }); LittleEndianDataInputStream lis = new LittleEndianDataInputStream(is); assertTrue(lis.readBoolean()); }\n"
    },
    {
        "original_path": "haraldk_TwelveMonkeys###haraldk_TwelveMonkeys/servlet/src/test/java/com/twelvemonkeys/servlet/image/IIOProviderContextListenerTest###testContextDestroyed",
        "generated_path": "IIOProviderContextListenerTest###testContextDestroyed.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testContextDestroyed() { IIOProviderContextListener listener = new IIOProviderContextListener(); ServletContextEvent event = mock(ServletContextEvent.class); IIORegistry registry = mock(IIORegistry.class); when(registry.getCategories()).thenReturn(Arrays.asList(IIOProvider.class, IIOProvider.class)); listener.contextDestroyed(event); verify(registry, times(1)).getCategories(); verify(registry, times(1)).deregisterLocalProvidersForCategory(eq(registry), any(LocalFilter.class), any(Class.class), any(ServletContext.class)); }\n"
    },
    {
        "original_path": "haraldk_TwelveMonkeys###haraldk_TwelveMonkeys/common/common-lang/src/test/java/com/twelvemonkeys/lang/StringUtilTest###testRtrim",
        "generated_path": "StringUtilTest###testRtrim.java",
        "Compile_result": 1,
        "Test_result": 0,
        "Gen_Test": "@Test public void rtrim() { assertEquals(\"\", StringUtil.rtrim(\" \")); assertEquals(\"\", StringUtil.rtrim(\" \")); assertEquals(\" \", StringUtil.rtrim(\" \")); assertEquals(\" \", StringUtil.rtrim(\" \")); assertEquals(\" \", StringUtil.rtrim(\" \")); assertEquals(\" \", StringUtil.rtrim(\" \")); assertEquals(\" \", StringUtil.rtrim(\" \")); assertEquals(\" \", StringUtil.rtrim(\" \")); assertEquals(\" \", StringUtil.rtrim(\" \")); assertEquals(\" \", StringUtil.rtrim(\" \")); assertEquals(\" \", StringUtil.rtrim(\" \")); assertEquals(\" \", StringUtil.rtrim(\" \")); assertEquals(\" \", StringUtil.rtrim(\" \")); assertEquals(\" \", StringUtil.rtrim(\" \")); assertEquals(\" \", StringUtil.rtrim(\" \")); assertEquals(\" \", StringUtil.rtrim(\" \")); assertEquals(\" \", StringUtil.rtrim(\" \")); assertEquals(\" \", StringUtil.rtrim(\" \")); assertEquals(\" \", StringUtil.rtrim(\" \")); assertEquals(\" \", StringUtil.rtrim(\" \")); assertEquals(\" \", StringUtil.rtrim(\" \")); assertEquals(\" \", StringUtil.rtrim(\" \")); assertEquals(\" \", StringUtil.rtrim(\" \")); assertEquals(\" \", StringUtil.rtrim(\" \")); assertEquals(\" \", StringUtil.rtrim(\" \")); assertEquals(\" \", StringUtil.rtrim(\" \")); }\n"
    },
    {
        "original_path": "haraldk_TwelveMonkeys###haraldk_TwelveMonkeys/imageio/imageio-core/src/test/java/com/twelvemonkeys/imageio/color/KCMSSanitizerStrategyTest###testFixProfile",
        "generated_path": "KCMSSanitizerStrategyTest###testFixProfile.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test(expectedExceptions = IllegalArgumentException.class) public void testNullProfile() { strategy.fixProfile(null); }\n"
    },
    {
        "original_path": "haraldk_TwelveMonkeys###haraldk_TwelveMonkeys/common/common-io/src/test/java/com/twelvemonkeys/io/LittleEndianDataInputStreamTest###testReadShort",
        "generated_path": "LittleEndianDataInputStreamTest###testReadShort.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public final void testReadShort() throws IOException { byte[] bytes = new byte[] { (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0"
    },
    {
        "original_path": "haraldk_TwelveMonkeys###haraldk_TwelveMonkeys/imageio/imageio-core/src/test/java/com/twelvemonkeys/imageio/stream/SubImageInputStreamTest###testSeek",
        "generated_path": "SubImageInputStreamTest###testSeek.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test(expected = IndexOutOfBoundsException.class) public void testSeek() throws IOException { try { subImageInputStream.seek(0); } catch (IndexOutOfBoundsException e) { assertEquals(\"pos < flushedPosition\", e.getMessage()); throw e; } }\n"
    },
    {
        "original_path": "haraldk_TwelveMonkeys###haraldk_TwelveMonkeys/imageio/imageio-tiff/src/test/java/com/twelvemonkeys/imageio/plugins/tiff/BitPaddingStreamTest###testSkip",
        "generated_path": "BitPaddingStreamTest###testSkip.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testSkip() throws IOException { BitPaddingStream stream = new BitPaddingStream(); stream.skip(10); assertEquals(10, stream.skip(10)); assertEquals(10, stream.skip(10)); assertEquals(10, stream.skip(10)); assertEquals(10, stream.skip(10)); assertEquals(10, stream.skip(10)); assertEquals(10, stream.skip(10)); assertEquals(10, stream.skip(10)); assertEquals(10, stream.skip(10)); assertEquals(10, stream.skip(10)); assertEquals(10, stream.skip(10)); assertEquals(10, stream.skip(10)); assertEquals(10, stream.skip(10)); assertEquals(10, stream.skip(10)); assertEquals(10, stream.skip(10)); assertEquals(10, stream.skip(10)); assertEquals(10, stream.skip(10)); assertEquals(10, stream.skip(10)); assertEquals(10, stream.skip(10)); assertEquals(10, stream.skip(10)); assertEquals(10, stream.skip(10)); assertEquals(10, stream.skip(10)); assertEquals(10, stream.skip(10)); assertEquals(10, stream.skip(10)); assertEquals(10, stream.skip(10)); assertEquals(10, stream.skip(10)); assertEquals(10, stream.skip(10)); assertEquals(10, stream"
    },
    {
        "original_path": "haraldk_TwelveMonkeys###haraldk_TwelveMonkeys/common/common-io/src/test/java/com/twelvemonkeys/io/LittleEndianDataInputStreamTest###testReadUnsignedShort",
        "generated_path": "LittleEndianDataInputStreamTest###testReadUnsignedShort.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public final void testReadUnsignedShort() throws IOException { byte[] bytes = new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0"
    },
    {
        "original_path": "haraldk_TwelveMonkeys###haraldk_TwelveMonkeys/common/common-lang/src/test/java/com/twelvemonkeys/lang/StringUtilTest###testLtrim",
        "generated_path": "StringUtilTest###testLtrim.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void testLtrim() { System.out.println(\"ltrim\"); String string = \"a\"; String expResult = \"a\"; String result = StringUtil.ltrim(string); assertEquals(expResult, result); result = StringUtil.ltrim(string); assertEquals(expResult, result); result = StringUtil.ltrim(string); assertEquals(expResult, result); result = StringUtil.ltrim(string); assertEquals(expResult, result); result = StringUtil.ltrim(string); assertEquals(expResult, result); result = StringUtil.ltrim(string); assertEquals(expResult, result); result = StringUtil.ltrim(string); assertEquals(expResult, result); result = StringUtil.ltrim(string); assertEquals(expResult, result); result = StringUtil.ltrim(string); assertEquals(expResult, result); result = StringUtil.ltrim(string); assertEquals(expResult, result); result = StringUtil.ltrim(string); assertEquals(expResult, result); result = StringUtil.ltrim(string); assertEquals(expResult, result); result = StringUtil.ltrim(string); assertEquals(expResult, result); result = StringUtil.ltrim(string); assertEquals(expResult, result); }\n"
    },
    {
        "original_path": "haraldk_TwelveMonkeys###haraldk_TwelveMonkeys/common/common-lang/src/test/java/com/twelvemonkeys/lang/StringUtilTest###testIsNumber",
        "generated_path": "StringUtilTest###testIsNumber.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testIsNumber() { System.out.println(\"isNumber\"); String string = \"1\"; boolean expResult = true; boolean result = StringUtil.isNumber(string); assertEquals(expResult, result); string = \"2\"; expResult = false; result = StringUtil.isNumber(string); assertEquals(expResult, result); string = \"3\"; expResult = false; result = StringUtil.isNumber(string); assertEquals(expResult, result); string = \"3\"; expResult = false; result = StringUtil.isNumber(string); assertEquals(expResult, result); string = \"3\"; expResult = false; result = StringUtil.isNumber(string); assertEquals(expResult, result); string = \"3\"; expResult = false; result = StringUtil.isNumber(string); assertEquals(expResult, result); string = \"3\"; expResult = false; result = StringUtil.isNumber(string); assertEquals(expResult, result); string = \"3\"; expResult = false; result = StringUtil.isNumber(string); assertEquals(expResult, result); string = \"3\"; expResult = false; result = StringUtil.isNumber(string); assertEquals(expResult, result); string = \"3\"; expResult = false; result = StringUtil.isNumber(string); assertEquals(expResult, result); string = \"3\"; expResult = false; result = StringUtil.isNumber(string); assertEquals(expResult, result);"
    },
    {
        "original_path": "haraldk_TwelveMonkeys###haraldk_TwelveMonkeys/imageio/imageio-tiff/src/test/java/com/twelvemonkeys/imageio/plugins/tiff/TIFFImageMetadataTest###testSetFromTree",
        "generated_path": "TIFFImageMetadataTest###testSetFromTree.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testSetFromTree() throws IIOInvalidTreeException { TIFFImageMetadata TIFFImageMetadata = new TIFFImageMetadata(); TIFFImageMetadata.Entry entry1 = new TIFFImageMetadata.Entry(); entry1.setFormatName(\"TIFF\"); entry1.setTagNumber(1); entry1.setName(\"TIFF\"); entry1.setFormatName(\"TIFF2\"); entry1.setTagNumber(2); entry1.setName(\"TIFF3\"); entry1.setTagNumber(3); entry1.setName(\"TIFF4\"); entry1.setTagNumber(4); entry1.setName(\"TIFF5\"); entry1.setTagNumber(5); entry1.setName(\"TIFF6\"); entry1.setTagNumber(6); entry1.setName(\"TIFF7\"); entry1.setTagNumber(7); entry1.setName(\"TIFF8\"); entry1.setName(\"TIFF9\"); entry1.setTagNumber(8); entry1.setName(\"TIFF10\"); entry1.setTagNumber(9); entry1.setName(\"TIFF11\"); entry1.setTagNumber(10); entry1.setName(\"TIFF12\"); entry1.setTagNumber(11); entry1.setName(\"TIFF12\"); entry1.setTagNumber(11); entry1.setName(\"TIFF12\"); entry1.setTagNumber(12); entry1.setName(\"TIFF"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/date/DateUtilTest###dateTest",
        "generated_path": "DateUtilTest###dateTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public final void testDate() { System.out.println(\"DateUtil.date\"); Date date = new Date(2013, 4, 10, 20, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/date/DateUtilTest###ageTest",
        "generated_path": "DateUtilTest###ageTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public final void testAge() { System.out.println(\"age\"); Date date = new Date(2013, 11, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/net/NetUtilTest###isInRangeTest",
        "generated_path": "NetUtilTest###isInRangeTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testInRange() throws Exception { assertTrue(NetUtil.isInRange(\"1.1.1.1\", \"1.1.1.1\")); assertTrue(NetUtil.isInRange(\"1.1.1.1\", \"1.1.1.1\")); assertTrue(NetUtil.isInRange(\"1.1.1.1\", \"1.1.1.1\")); assertTrue(NetUtil.isInRange(\"1.1.1.1\", \"1.1.1.1\")); assertTrue(NetUtil.isInRange(\"1.1.1.1\", \"1.1.1.1\")); assertTrue(NetUtil.isInRange(\"1.1.1.1\", \"1.1.1.1\")); assertTrue(NetUtil.isInRange(\"1.1.1.1\", \"1.1.1.1\")); assertTrue(NetUtil.isInRange(\"1.1.1.1\", \"1.1.1.1\")); assertTrue(NetUtil.isInRange(\"1.1.1.1\", \"1.1.1.1\")); assertTrue(NetUtil.isInRange(\"1.1.1.1\", \"1.1.1.1\")); assertTrue(NetUtil.isInRange(\"1.1.1.1\", \"1.1.1.1\")); assertTrue(NetUtil.isInRange(\"1."
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/img/ImgTest###scaleTest",
        "generated_path": "ImgTest###scaleTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testScale() throws Exception { Img img = Img.from(ImageIO.read(new File(\"src/test/resources/img/scale.png\"))); assertEquals(img.getWidth(), 100); assertEquals(img.getHeight(), 100); img = Img.from(ImageIO.read(new File(\"src/test/resources/img/scale.png\"))); assertEquals(img.getWidth(), 100); assertEquals(img.getHeight(), 100); img = Img.from(ImageIO.read(new File(\"src/test/resources/img/scale.png\"))); assertEquals(img.getWidth(), 100); assertEquals(img.getHeight(), 100); img = Img.from(ImageIO.read(new File(\"src/test/resources/img/scale.png\"))); assertEquals(img.getWidth(), 100); assertEquals(img.getHeight(), 100); img = Img.from(ImageIO.read(new File(\"src/test/resources/img/scale.png\"))); assertEquals(img.getWidth(), 100); assertEquals(img.getHeight(), 100); img = Img.from(ImageIO.read(new File(\"src/test/resources/img/scale.png\"))); assertEquals(img.getWidth(), 100); assertEquals(img.getHeight(), 100); img = Img.from(ImageIO.read("
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-db/src/test/java/cn/hutool/db/meta/MetaUtilTest###getColumnNamesTest",
        "generated_path": "MetaUtilTest###getColumnNamesTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetColumnNames() throws Exception { String[] columnNames = MetaUtil.getColumnNames(ds); assertEquals(2, columnNames.length); assertEquals(\"column1\", columnNames[0]); assertEquals(\"column2\", columnNames[1]); assertEquals(\"column3\", columnNames[2]); assertEquals(\"column4\", columnNames[3]); assertEquals(\"column5\", columnNames[4]); assertEquals(\"column6\", columnNames[5]); assertEquals(\"column7\", columnNames[6]); assertEquals(\"column8\", columnNames[7]); assertEquals(\"column9\", columnNames[8]); assertEquals(\"column9\", columnNames[9]); assertEquals(\"column9\", columnNames[10]); assertEquals(\"column9\", columnNames[11]); assertEquals(\"column9\", columnNames[12]); assertEquals(\"column9\", columnNames[13]); assertEquals(\"column9\", columnNames[13]); assertEquals(\"column9\", columnNames[14]); assertEquals(\"column9\", columnNames[15]); assertEquals(\"column9\", columnNames[16]); assertEquals(\"column9\", columnNames[17]); assertEquals(\"column9\", columnNames[18]); assertEquals(\"column9\", columnNames[19]); assertEquals(\"column9\", columnNames[20]); assertEquals(\"column9\", columnNames[21]); assertEquals(\"column9\", columnNames[23]); assertEquals(\"column9\", columnNames[23]); assertEquals(\"column9\", columnNames[23]); }\n"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/NumberUtilTest###parseLongTest",
        "generated_path": "NumberUtilTest###parseLongTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void parseLong() { assertEquals(0, NumberUtil.parseLong(\"0\")); assertEquals(0, NumberUtil.parseLong(\"0x\")); assertEquals(0, NumberUtil.parseLong(\"0x0\")); assertEquals(0, NumberUtil.parseLong(\"0x0\")); assertEquals(0, NumberUtil.parseLong(\"0x0\")); assertEquals(0, NumberUtil.parseLong(\"0x0\")); assertEquals(0, NumberUtil.parseLong(\"0x0\")); assertEquals(0, NumberUtil.parseLong(\"0x0\")); assertEquals(0, NumberUtil.parseLong(\"0x0\")); assertEquals(0, NumberUtil.parseLong(\"0x0\")); assertEquals(0, NumberUtil.parseLong(\"0x0\")); assertEquals(0, NumberUtil.parseLong(\"0x0\")); assertEquals(0, NumberUtil.parseLong(\"0x0\")); assertEquals(0, NumberUtil.parseLong(\"0x0\")); assertEquals(0, NumberUtil.parseLong(\"0x0\")); assertEquals(0, NumberUtil.parseLong(\"0x0\")); assertEquals(0, NumberUtil.parseLong(\"0x0\")); assertEquals(0, NumberUtil.parseLong(\"0x0\")); assertEquals(0, NumberUtil.parseLong(\"0x0\")); assertEquals(0, NumberUtil.parseLong"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/map/MapUtilTest###editTest",
        "generated_path": "MapUtilTest###editTest.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void testEdit() { }\n"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-db/src/test/java/cn/hutool/db/dialect/DialectFactoryTest###identifyDriverTest",
        "generated_path": "DialectFactoryTest###identifyDriverTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testIdentifyDriver() { assertEquals(DialectFactory.DRIVER_SQLSERVER, DialectFactory.identifyDriver(\"jdbc:mysql:test\", getClass().getClassLoader())); assertEquals(DialectFactory.DRIVER_SQLLITE3, DialectFactory.identifyDriver(\"jdbc:oracle:test\", getClass().getClassLoader())); assertEquals(DialectFactory.DRIVER_ORACLE_OLD, DialectFactory.identifyDriver(\"oracle:test\", getClass().getClassLoader())); assertEquals(DialectFactory.DRIVER_ORACLE_OLD, DialectFactory.identifyDriver(\"oracle:test\", getClass().getClassLoader())); assertEquals(DialectFactory.DRIVER_SQLSERVER, DialectFactory.identifyDriver(\"jdbc:postgresql:test\", getClass().getClassLoader())); assertEquals(DialectFactory.DRIVER_SQLLITE3, DialectFactory.identifyDriver(\"jdbc:postgresql:test\", getClass().getClassLoader())); assertEquals(DialectFactory.DRIVER_SQLSERVER, DialectFactory.identifyDriver(\"jdbc:postgresql:test\", getClass().getClassLoader())); assertEquals(DialectFactory.DRIVER_HSQLDB, DialectFactory.identifyDriver(\"jdbc:hive2\", getClass().getClassLoader())); assertEquals(DialectFactory.DRIVER_HSQLDB, DialectFactory.identifyDriver(\"jdbc:hive2\", getClass().getClassLoader())); assertEquals(DialectFactory.DRIVER_HSQLDB, DialectFactory.identifyDriver(\"jdbc:hive2\", getClass().getClassLoader())); assertEquals(Dialect"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/io/unit/DataSizeUtilTest###formatTest",
        "generated_path": "DataSizeUtilTest###formatTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testFormat() { assertEquals(\"0\", DataSizeUtil.format(0)); assertEquals(\"1\", DataSizeUtil.format(1)); assertEquals(\"2\", DataSizeUtil.format(2)); assertEquals(\"3\", DataSizeUtil.format(3)); assertEquals(\"4\", DataSizeUtil.format(4)); assertEquals(\"5\", DataSizeUtil.format(5)); assertEquals(\"6\", DataSizeUtil.format(6)); assertEquals(\"7\", DataSizeUtil.format(7)); assertEquals(\"8\", DataSizeUtil.format(8)); assertEquals(\"9\", DataSizeUtil.format(9)); assertEquals(\"9\", DataSizeUtil.format(9)); assertEquals(\"9\", DataSizeUtil.format(9)); assertEquals(\"9\", DataSizeUtil.format(9)); assertEquals(\"9\", DataSizeUtil.format(9)); assertEquals(\"9\", DataSizeUtil.format(9)); assertEquals(\"9\", DataSizeUtil.format(9)); assertEquals(\"9\", DataSizeUtil.format(9)); assertEquals(\"9\", DataSizeUtil.format(9)); assertEquals(\"9\", DataSizeUtil.format(9)); assertEquals(\"9\", DataSizeUtil.format(9)); }\n"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/date/DateUtilTest###secondToTimeTest",
        "generated_path": "DateUtilTest###secondToTimeTest.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void testSecondToTime() { System.out.println(\"secondToTime\"); int seconds = 0; String result = DateUtil.secondToTime(seconds); System.out.println(\"result=\" + result); }\n"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-poi/src/test/java/cn/hutool/poi/excel/ExcelUtilTest###colNameToIndexTest",
        "generated_path": "ExcelUtilTest###colNameToIndexTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testColNameToIndex() { System.out.println(\"colNameToIndex\"); String[] colNames = new String[] {
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/NumberUtilTest###isLongTest",
        "generated_path": "NumberUtilTest###isLongTest.java",
        "Compile_result": 1,
        "Test_result": 0,
        "Gen_Test": "@Test public void testIsLong() { for (int i = 0; i < 1000; i++) { Assert.assertTrue(NumberUtil.isLong(String.valueOf(i))); } for (int i = 0; i < 1000; i++) { Assert.assertFalse(NumberUtil.isLong(String.valueOf(i))); } for (int i = 0; i < 1000; i++) { Assert.assertFalse(NumberUtil.isLong(String.valueOf(i))); } for (int i = 0; i < 1000; i++) { Assert.assertTrue(NumberUtil.isLong(String.valueOf(i))); } for (int i = 0; i < 1000; i++) { Assert.assertFalse(NumberUtil.isLong(String.valueOf(i))); } for (int i = 0; i < 1000; i++) { Assert.assertTrue(NumberUtil.isLong(String.valueOf(i))); } for (int i = 0; i < 1000; i++) { Assert.assertTrue(NumberUtil.isLong(String.valueOf(i))); } for (int i = 0; i < 1000; i++) { Assert.assertTrue(NumberUtil.isLong(String.valueOf(i))); } for (int i = 0; i < 1000; i++) { Assert.assertTrue(NumberUtil.isLong(String.valueOf(i))); } }\n"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/NumberUtilTest###isIntegerTest",
        "generated_path": "NumberUtilTest###isIntegerTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testIsInteger() { for (int i = 0; i < 10; i++) { assertTrue(NumberUtil.isInteger(i)); } for (int i = 0; i < 10; i++) { assertFalse(NumberUtil.isInteger(String.valueOf(i))); } for (int i = 0; i < 10; i++) { assertFalse(NumberUtil.isInteger(String.valueOf(i))); } for (int i = 0; i < 10; i++) { assertFalse(NumberUtil.isInteger(String.valueOf(i))); } for (int i = 0; i < 10; i++) { assertFalse(NumberUtil.isInteger(String.valueOf(i))); } for (int i = 0; i < 10; i++) { assertFalse(NumberUtil.isInteger(String.valueOf(i))); } for (int i = 0; i < 10; i++) { assertFalse(NumberUtil.isInteger(String.valueOf(i))); } for (int i = 0; i < 10; i++) { assertFalse(NumberUtil.isInteger(String.valueOf(i))); } for (int i = 0; i < 10; i++) { assertFalse(NumberUtil.isInteger(String.valueOf(i))); } }\n"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/collection/CollUtilTest###foreachTest",
        "generated_path": "CollUtilTest###foreachTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testForEach() { System.out.println(\"forEach\"); Map<String, String> map = new HashMap<String, String>(); map.put(\"a\", \"a\"); map.put(\"b\", \"b\"); map.put(\"c\", \"c\"); map.put(\"d\", \"d\"); map.put(\"e\", \"e\"); map.put(\"f\", \"f\"); map.put(\"g\", \"g\"); map.put(\"h\", \"h\"); map.put(\"g\", \"g\"); map.put(\"h\", \"h\"); map.put(\"h\", \"h\"); map.put(\"h\", \"h\"); map.put(\"h\", \"h\"); map.put(\"h\", \"h\"); map.put(\"h\", \"h\"); map.put(\"h\", \"h\"); map.put(\"h\", \"h\"); map.put(\"h\", \"h\"); map.put(\"h\", \"h\"); map.put(\"h\", \"h\"); map.put(\"h\", \"h\"); map.put(\"h\", \"h\"); map.put(\"h\", \"h\"); map.put(\"h\", \"h\"); map.put(\"h\", \"h\"); map.put(\"h\", \"h\"); map.put(\"h\", \"h\"); map.put(\"h\", \"h\"); map.put(\"h\", \"h\"); map.put(\"h\", \"h\"); map.put(\"h\", \"h\"); map.put(\"h"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/annotation/AliasAnnotationPostProcessorTest###processTest",
        "generated_path": "AliasAnnotationPostProcessorTest###processTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test(expected = IllegalArgumentException.class) public void testNoAlias() { final SynthesizedAnnotation synthesizedAnnotation = new SynthesizedAnnotation(new ClassPathResource(\"/org/apache/cxf/tools/synth/TestSynthesizerTest/NoAlias.class\")); final AnnotationSynthesizer synthesizer = new AnnotationSynthesizer(new ClassPathResource(\"/org/apache/cxf/tools/synth/TestSynthesizerTest/NoAlias.class\")); new AliasAnnotationPostProcessor().process(synthesizedAnnotation, synthesizer); }\n"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/DesensitizedUtilTest###addressTest",
        "generated_path": "DesensitizedUtilTest###addressTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testAddress() { assertEquals(\"1234567890\", DesensitizedUtil.address(\"1234567890\", 5)); assertEquals(\"1234567890\", DesensitizedUtil.address(\"1234567890\", 5)); assertEquals(\"1234567890\", DesensitizedUtil.address(\"1234567890\", 5)); assertEquals(\"1234567890\", DesensitizedUtil.address(\"1234567890\", 5)); assertEquals(\"1234567890\", DesensitizedUtil.address(\"1234567890\", 5)); assertEquals(\"1234567890\", DesensitizedUtil.address(\"1234567890\", 5)); assertEquals(\"1234567890\", DesensitizedUtil.address(\"1234567890\", 5)); assertEquals(\"1234567890\", DesensitizedUtil.address(\"1234567890\", 5)); assertEquals(\"1234567890\", DesensitizedUtil.address(\"1234567890\", 5)); assertEquals(\"1234567890\", DesensitizedUtil.address(\"1234567890\", 5)); assertEquals(\"1234567890\", DesensitizedUtil.address(\"1234567890\", 5)); assertEquals(\"1234567890\", DesensitizedUtil.address(\"1234567890\", 5)); assertEquals(\"1234567890\", DesensitizedUtil.address(\"1234567890\", 5)); assertEquals(\"1234567890\", DesensitizedUtil.address(\"1234567890\", 5)); assertEquals(\"1234567890\", DesensitizedUtil.address(\"1234"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/map/BiMapTest###computeIfAbsentTest",
        "generated_path": "BiMapTest###computeIfAbsentTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testComputeIfAbsent() { final BiMap<String, String> map = new BiMap<>(new HashMap<String, String>()); map.put(\"a\", \"b\"); map.put(\"b\", \"c\"); map.put(\"c\", \"d\"); map.put(\"d\", \"e\"); map.put(\"e\", \"f\"); map.put(\"f\", \"g\"); map.put(\"g\", \"h\"); map.put(\"h\", \"i\"); assertEquals(\"i\", map.computeIfAbsent(\"a\", new Function<String, String>() { @Override public String apply(String key, String value) { return value; } })); assertEquals(\"i\", map.computeIfAbsent(\"b\", new Function<String, String>() { @Override public String apply(String key, String value) { return value; } })); assertEquals(\"f\", map.computeIfAbsent(\"g\", new Function<String, String>() { @Override public String apply(String key, String value) { return value; } })); assertEquals(\"i\", map.computeIfAbsent(\"g\", new Function<String, String>() { @Override public String apply(String key, String value) { return value; } })); }\n"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/IdcardUtilTest###getCityCodeByIdCardTest",
        "generated_path": "IdcardUtilTest###getCityCodeByIdCardTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetCityCodeByIdCard() { System.out.println(\"getCityCodeByIdCard\"); String idcard = \"01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/io/FileUtilTest###touchTest",
        "generated_path": "FileUtilTest###touchTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testTouch() throws Exception { System.out.println(\"touch\"); File file = new File(\"test.txt\"); file.createNewFile(); file.createNewFile(); file.createNewFile(); file.createNewFile(); file.createNewFile(); file.createNewFile(); file.createNewFile(); file.createNewFile(); file.createNewFile(); file.createNewFile(); file.createNewFile(); file.createNewFile(); file.createNewFile(); file.createNewFile(); file.createNewFile(); file.createNewFile(); file.createNewFile(); file.createNewFile(); file.createNewFile(); file.createNewFile(); file.createNewFile(); file.createNewFile(); file.createNewFile(); file.createNewFile(); file.createNewFile(); file.createNewFile(); file.createNewFile(); file.createNewFile(); file.createNewFile(); file.createNewFile(); file.createNewFile(); file.createNewFile(); file.createNewFile(); file.createNewFile(); file.createNewFile(); file.createNewFile(); file.createNewFile(); file.createNewFile(); file.createNewFile(); file.createNewFile(); file.createNewFile(); file.createNewFile(); file.createNewFile(); file.createNewFile(); file.createNewFile(); file.createNewFile(); file.createNewFile(); file.createNewFile(); file."
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/DesensitizedUtilTest###desensitizedTest",
        "generated_path": "DesensitizedUtilTest###desensitizedTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testDesensitized() { assertEquals(\"\", DesensitizedUtil.desensitized(\"\", DesensitizedUtil.DesensitizedType.USER_ID)); assertEquals(\"\", DesensitizedUtil.desensitized(\"\", DesensitizedUtil.DesensitizedType.CHINESE_NAME)); assertEquals(\"\", DesensitizedUtil.desensitized(\"\", DesensitizedUtil.DesensitizedType.ADDRESS)); assertEquals(\"\", DesensitizedUtil.desensitized(\"\", DesensitizedUtil.DesensitizedType.FIRST_MASK)); assertEquals(\"\", DesensitizedUtil.desensitized(\"\", DesensitizedUtil.DesensitizedType.IPV4)); assertEquals(\"\", DesensitizedUtil.desensitized(\"\", DesensitizedUtil.DesensitizedType.IPV6)); assertEquals(\"\", DesensitizedUtil.desensitized(\"\", DesensitizedUtil.DesensitizedType.FIRST_MASK)); assertEquals(\"\", DesensitizedUtil.desensitized(\"\", DesensitizedUtil.DesensitizedType.FIRST_MASK)); assertEquals(\"\", DesensitizedUtil.desensitized(\"\", DesensitizedUtil.DesensitizedType.FIRST_MASK)); assertEquals(\"\", DesensitizedUtil.desensitized(\"\", DesensitizedUtil.DesensitizedType.FIRST_MASK"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/ObjectUtilTest###containsTest",
        "generated_path": "ObjectUtilTest###containsTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testContains() { assertTrue(ObjectUtil.contains(null, null)); assertFalse(ObjectUtil.contains(null, \"a\")); assertFalse(ObjectUtil.contains(null, \"a\")); assertFalse(ObjectUtil.contains(null, \"a\")); assertFalse(ObjectUtil.contains(null, \"a\")); assertFalse(ObjectUtil.contains(null, \"a\")); assertFalse(ObjectUtil.contains(null, \"a\")); assertFalse(ObjectUtil.contains(null, \"a\")); assertFalse(ObjectUtil.contains(null, \"a\")); assertFalse(ObjectUtil.contains(null, \"a\")); assertFalse(ObjectUtil.contains(null, \"a\")); assertFalse(ObjectUtil.contains(null, \"a\")); assertFalse(ObjectUtil.contains(null, \"a\")); assertFalse(ObjectUtil.contains(null, \"a\")); assertFalse(ObjectUtil.contains(null, \"a\")); assertFalse(ObjectUtil.contains(null, \"a\")); assertFalse(ObjectUtil.contains(null, \"a\")); assertFalse(ObjectUtil.contains(null, \"a\")); assertFalse(ObjectUtil.contains(null, \"a\")); assertFalse(ObjectUtil.contains(null, \"a\")); assertFalse(ObjectUtil.contains(null, \"a\")); assertFalse(ObjectUtil.contains(null, \"a\")); assertFalse(Object"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-http/src/test/java/cn/hutool/http/HttpGlobalConfigTest###allowPatchTest",
        "generated_path": "HttpGlobalConfigTest###allowPatchTest.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void testAllowPatch() throws Exception { HttpGlobalConfig.allowPatch(); }\n"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/text/CharSequenceUtilTest###commonPrefixTest",
        "generated_path": "CharSequenceUtilTest###commonPrefixTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testCommonPrefix() { assertEquals(\"\", CharSequenceUtil.commonPrefix(\"\", \" \")); assertEquals(\"\", CharSequenceUtil.commonPrefix(\"\", \" \")); assertEquals(\"\", CharSequenceUtil.commonPrefix(\" \", \" \")); assertEquals(\"\", CharSequenceUtil.commonPrefix(\" \", \" \")); assertEquals(\"\", CharSequenceUtil.commonPrefix(\" \", \" \")); assertEquals(\" \", CharSequenceUtil.commonPrefix(\" \", \" \")); assertEquals(\" \", CharSequenceUtil.commonPrefix(\" \", \" \")); assertEquals(\" \", CharSequenceUtil.commonPrefix(\" \", \" \")); assertEquals(\" \", CharSequenceUtil.commonPrefix(\" \", \" \")); assertEquals(\" \", CharSequenceUtil.commonPrefix(\" \", \" \")); assertEquals(\" \", CharSequenceUtil.commonPrefix(\" \", \" \")); assertEquals(\" \", CharSequenceUtil.commonPrefix(\" \", \" \")); assertEquals(\" \", CharSequenceUtil.commonPrefix(\" \", \" \")); assertEquals(\" \", CharSequenceUtil.commonPrefix(\" \", \" \")); assertEquals(\" \", CharSequenceUtil.commonPrefix(\" \", \" \")); assertEquals(\" \", CharSequenceUtil.commonPrefix(\" \", \" \")); assertEquals(\" \", CharSequenceUtil.commonPrefix(\" \", \" \")); assertEquals(\" \", CharSequenceUtil.commonPrefix(\" \", \" \")); assertEquals(\" \", CharSequenceUtil.commonPrefix(\" \", \" \")); assertEquals(\" \", CharSequenceUtil.commonPrefix(\" \", \" \")); assertEquals(\" \", CharSequenceUtil.commonPrefix(\" \", \" \")); assertEquals(\" \", CharSequenceUtil.commonPrefix(\" \", \" \")); }"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/date/DateUtilTest###formatTest",
        "generated_path": "DateUtilTest###formatTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public final void testFormat() { System.out.println(\"DateUtil.format\"); Date date = new Date(); String result = DateUtil.format(date, null); System.out.println(result); }\n"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/codec/Base64Test###isBase64Test",
        "generated_path": "Base64Test###isBase64Test.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testIsBase64() { byte[] bytes = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05}; assertTrue(Base64.isBase64(bytes)); bytes = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05}; assertFalse(Base64.isBase64(bytes)); bytes = new byte[]{0x01, 0x02, 0x03, 0x05}; assertFalse(Base64.isBase64(bytes)); bytes = new byte[]{0x01, 0x02, 0x05}; assertTrue(Base64.isBase64(bytes)); bytes = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05}; assertFalse(Base64.isBase64(bytes)); bytes = new byte[]{0x01, 0x02, 0x03, 0x05}; assertFalse(Base64.isBase64(bytes)); bytes = new byte[]{0x01, 0x02, 0x05}; assertTrue(Base64.isBase64(bytes)); bytes = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05}; assertFalse(Base64.isBase64(bytes)); }\n"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/DesensitizedUtilTest###emailTest",
        "generated_path": "DesensitizedUtilTest###emailTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testEmail() { assertEquals(\"test@test.com\", DesensitizedUtil.email(\"test@test.com\")); assertEquals(\"test@test.com\", DesensitizedUtil.email(\"test@test.com\")); assertEquals(\"test@test.com\", DesensitizedUtil.email(\"test@test.com\")); assertEquals(\"test@test.com\", DesensitizedUtil.email(\"test@test.com\")); assertEquals(\"test@test.com\", DesensitizedUtil.email(\"test@test.com\")); assertEquals(\"test@test.com\", DesensitizedUtil.email(\"test@test.com\")); assertEquals(\"test@test.com\", DesensitizedUtil.email(\"test@test.com\")); assertEquals(\"test@test.com\", DesensitizedUtil.email(\"test@test.com\")); assertEquals(\"test@test.com\", DesensitizedUtil.email(\"test@test.com\")); assertEquals(\"test@test.com\", DesensitizedUtil.email(\"test@test.com\")); assertEquals(\"test@test.com\", DesensitizedUtil.email(\"test@test.com\")); }\n"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/NumberUtilTest###isDoubleTest",
        "generated_path": "NumberUtilTest###isDoubleTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testIsDouble() { for (int i = 0; i < 10; i++) { assertTrue(NumberUtil.isDouble(i)); } for (int i = 0; i < 10; i++) { assertFalse(NumberUtil.isDouble(String.valueOf(i))); } for (int i = 0; i < 10; i++) { assertFalse(NumberUtil.isDouble(String.valueOf(i))); } for (int i = 0; i < 10; i++) { assertFalse(NumberUtil.isDouble(String.valueOf(i))); } for (int i = 0; i < 10; i++) { assertFalse(NumberUtil.isDouble(String.valueOf(i))); } for (int i = 0; i < 10; i++) { assertFalse(NumberUtil.isDouble(String.valueOf(i))); } for (int i = 0; i < 10; i++) { assertFalse(NumberUtil.isDouble(String.valueOf(i))); } for (int i = 0; i < 10; i++) { assertFalse(NumberUtil.isDouble(String.valueOf(i))); } for (int i = 0; i < 10; i++) { assertFalse(NumberUtil.isDouble(String.valueOf(i))); } }\n"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/math/ArrangementTest###selectTest",
        "generated_path": "ArrangementTest###selectTest.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void testSelect() { System.out.println(\"select\"); Arrangement instance = new Arrangement(new String[]{\"a\", \"b\", \"c\"}); List<String[]> result = instance.select(); System.out.println(result); }\n"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/text/CharSequenceUtilTest###endWithTest",
        "generated_path": "CharSequenceUtilTest###endWithTest.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void testEndWith() { }\n"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/date/DateBetweenTest###betweenYearTest",
        "generated_path": "DateBetweenTest###betweenYearTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testBetweenYear() { Calendar cal = Calendar.getInstance(); cal.set(2013, Calendar.FEBRUARY, 1); cal.set(Calendar.YEAR, 2003); cal.set(Calendar.MONTH, Calendar.FEBRUARY); cal.set(Calendar.DAY_OF_MONTH, Calendar.FEBRUARY); cal.set(Calendar.YEAR, 2003); cal.set(Calendar.MONTH, Calendar.FEBRUARY); cal.set(Calendar.YEAR, 2003); cal.set(Calendar.DAY_OF_MONTH, Calendar.FEBRUARY); Calendar cal2 = Calendar.getInstance(); cal2.set(Calendar.YEAR, 2003); cal2.set(Calendar.MONTH, Calendar.FEBRUARY); cal2.set(Calendar.DAY_OF_MONTH, Calendar.FEBRUARY); cal2.set(Calendar.YEAR, 2003); cal2.set(Calendar.DAY_OF_MONTH, Calendar.FEBRUARY); cal2.set(Calendar.YEAR, 2003); cal2.set(Calendar.MONTH, Calendar.FEBRUARY); cal2.set(Calendar.DAY_OF_MONTH, Calendar.FEBRUARY); cal2.set(Calendar.YEAR, 2003); DateBetween dateBetween = new DateBetween(cal2.getTime(), cal2.getTime()); assertEquals(2003, dateBetween.betweenYear(true));"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/IdcardUtilTest###getProvinceByIdCardTest",
        "generated_path": "IdcardUtilTest###getProvinceByIdCardTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetProvinceByIdCard() { System.out.println(\"getProvinceByIdCard\"); String idcard = \"6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/io/IoUtilTest###readLinesTest",
        "generated_path": "IoUtilTest###readLinesTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test(expected = IllegalArgumentException.class) public void testReadLinesReaderWithNullLineHandler() throws Exception { IoUtil.readLines(null, null); }\n"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/comparator/CompareUtilTest###compareTest",
        "generated_path": "CompareUtilTest###compareTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testNullCompare() { assertTrue(CompareUtil.compare(null, null, true) < 0); assertTrue(CompareUtil.compare(null, null, true) > 0); assertTrue(CompareUtil.compare(null, null, true) < 0); assertTrue(CompareUtil.compare(null, null, true) > 0); assertTrue(CompareUtil.compare(null, null, true) < 0); assertTrue(CompareUtil.compare(null, null, true) > 0); assertTrue(CompareUtil.compare(null, null, true) < 0); assertTrue(CompareUtil.compare(null, null, true) > 0); assertTrue(CompareUtil.compare(null, null, true) > 0); assertTrue(CompareUtil.compare(null, null, true) > 0); assertTrue(CompareUtil.compare(null, null, true) < 0); assertTrue(CompareUtil.compare(null, null, true) > 0); assertTrue(CompareUtil.compare(null, null, true) < 0); assertTrue(CompareUtil.compare(null, null, true) > 0); assertTrue(CompareUtil.compare(null, null, true) > 0); assertTrue(CompareUtil.compare(null, null, true) < 0); assertTrue(CompareUtil.compare(null, null, true) < 0); assertTrue(CompareUtil.compare(null, null, false) > 0); }\n"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/IdcardUtilTest###getGenderByIdCardTest",
        "generated_path": "IdcardUtilTest###getGenderByIdCardTest.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test(expected = IllegalArgumentException.class) public void getGenderByIdCardShouldThrowExceptionIfCardLengthIsLessThan15Or18() { IdcardUtil.getGenderByIdCard(\"\"); }\n"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/HexUtilTest###isHexNumberTest",
        "generated_path": "HexUtilTest###isHexNumberTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testIsHexNumber() { assertTrue(HexUtil.isHexNumber(\"0x\")); assertTrue(HexUtil.isHexNumber(\"0x\")); assertTrue(HexUtil.isHexNumber(\"0x\")); assertTrue(HexUtil.isHexNumber(\"0x\")); assertTrue(HexUtil.isHexNumber(\"0x\")); assertTrue(HexUtil.isHexNumber(\"0x\")); assertTrue(HexUtil.isHexNumber(\"0x\")); assertTrue(HexUtil.isHexNumber(\"0x\")); assertTrue(HexUtil.isHexNumber(\"0x\")); assertTrue(HexUtil.isHexNumber(\"0x\")); assertTrue(HexUtil.isHexNumber(\"0x\")); assertTrue(HexUtil.isHexNumber(\"0x\")); assertTrue(HexUtil.isHexNumber(\"0x\")); assertTrue(HexUtil.isHexNumber(\"0x\")); assertTrue(HexUtil.isHexNumber(\"0x\")); assertTrue(HexUtil.isHexNumber(\"0x\")); assertTrue(HexUtil.isHexNumber(\"0x\")); assertTrue(HexUtil.isHexNumber(\"0x\")); assertTrue(HexUtil.isHexNumber(\"0x\")); assertTrue(HexUtil.isHexNumber(\"0x\")); assertTrue(HexUtil.isHexNumber(\"0x\")); assertTrue(HexUtil.isHexNumber(\"0x\"));"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/img/ImgTest###strokeTest",
        "generated_path": "ImgTest###strokeTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testStroke() throws Exception { Img img = Img.from(ImageIO.toBufferedImage(testImage)); assertEquals(testImage.getWidth(), img.getWidth()); assertEquals(testImage.getHeight(), img.getHeight()); assertEquals(testImage.getWidth(), img.getWidth()); assertEquals(testImage.getHeight(), img.getHeight()); assertEquals(testImage.getWidth(), img.getWidth()); assertEquals(testImage.getHeight(), img.getHeight()); assertEquals(testImage.getWidth(), img.getWidth()); assertEquals(testImage.getHeight(), img.getHeight()); assertEquals(testImage.getWidth(), img.getWidth()); assertEquals(testImage.getHeight(), img.getHeight()); assertEquals(testImage.getWidth(), img.getWidth()); assertEquals(testImage.getHeight(), img.getHeight()); assertEquals(testImage.getWidth(), img.getWidth()); assertEquals(testImage.getHeight(), img.getHeight()); assertEquals(testImage.getWidth(), img.getWidth()); assertEquals(testImage.getHeight(), img.getHeight()); assertEquals(testImage.getWidth(), img.getWidth()); assertEquals(testImage.getHeight(), img.getHeight()); assertEquals(testImage.getHeight(), img.getHeight()); assertEquals(testImage.getWidth(), img.getWidth()); assertEquals(testImage.getHeight(),"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-http/src/test/java/cn/hutool/http/HttpUtilTest###decodeParamMapTest",
        "generated_path": "HttpUtilTest###decodeParamMapTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testDecodeParamMap() throws Exception { Map<String, List<String>> map = HttpUtil.decodeParamMap(\"param1=value1&param2=value2&param3=value3\"); assertEquals(2, map.size()); assertEquals(\"value1\", map.get(\"param1\")); assertEquals(\"value2\", map.get(\"param2\")); assertEquals(\"value3\", map.get(\"param3\")); assertEquals(\"value4\", map.get(\"param4\")); assertEquals(\"value5\", map.get(\"param5\")); assertEquals(\"value6\", map.get(\"param6\")); assertEquals(\"value7\", map.get(\"param7\")); assertEquals(\"value8\", map.get(\"param8\")); assertEquals(\"value9\", map.get(\"param9\")); assertEquals(\"value10\", map.get(\"param10\")); assertEquals(\"value11\", map.get(\"param11\")); assertEquals(\"value11\", map.get(\"param11\")); assertEquals(\"value11\", map.get(\"param11\")); assertEquals(\"value11\", map.get(\"param11\")); assertEquals(\"value11\", map.get(\"param11\")); assertEquals(\"value11\", map.get(\"param11\")); assertEquals(\"value11\", map.get(\"param11\")); assertEquals(\"value11\", map.get(\"param11\")); assertEquals(\"value11\", map.get(\""
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/io/BufferUtilTest###readBytesTest",
        "generated_path": "BufferUtilTest###readBytesTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testReadBytes() throws Exception { ByteBuffer buffer = ByteBuffer.allocate(100); buffer.put(new byte[100]); buffer.put(new byte[100]); buffer.put(new byte[100]); buffer.flip(); byte[] bytes = BufferUtil.readBytes(buffer, 100); assertEquals(100, bytes.length); }\n"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/date/CalendarUtilTest###parseTest",
        "generated_path": "CalendarUtilTest###parseTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testParse() throws ParseException { Calendar calendar = CalendarUtil.parse(\"2013-01-01T00:00:00.000Z\", true, new SimpleDateFormat(\"yyyy-MM-dd\\'T\\'HH:mm:ss.SSS\\'Z\\'\")); assertEquals(Calendar.getInstance(TimeZone.getTimeZone(TimeZone.getTimeZone(TimeZone.getTimeZone(TimeZone.getTimeZone(TimeZone.getTimeZone(TimeZone.getTimeZone(TimeZone.getTimeZone(TimeZone.getTimeZone(TimeZone.getTimeZone(TimeZone.getTimeZone(TimeZone.getTimeZone(TimeZone.getTimeZone(TimeZone.getTimeZone(TimeZone.getTimeZone(TimeZone.getTimeZone(TimeZone.getTimeZone(TimeZone.getTimeZone(TimeZone.getTimeZone(TimeZone.getTimeZone(TimeZone.getTimeZone(TimeZone.getTimeZone(TimeZone.getTimeZone(TimeZone.getTimeZone(TimeZone.getTimeZone(TimeZone.getTimeZone(TimeZone.getTimeZone(TimeZone.getTimeZone(TimeZone.getTimeZone(\"UTC\"))))))))))), new SimpleDateFormat(\"yyyy-MM-dd\\'T\\'HH:mm:ss.SSS\\'Z\\'\")), new SimpleDateFormat(\"yyyy-MM-dd\\'T\\'HH:mm:ss.SSS\\'Z\\'\"))))); }\n"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/lang/tree/TreeTest###filterTest",
        "generated_path": "TreeTest###filterTest.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void testFilter() { }\n"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/net/Ipv4UtilTest###listTest",
        "generated_path": "Ipv4UtilTest###listTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testList() { List<String> list = Ipv4Util.list(\"192.168.0.1\", \"192.168.0.1\"); assertEquals(4, list.size()); assertEquals(\"192.168.0.1\", list.get(0)); assertEquals(\"192.168.0.1\", list.get(1)); assertEquals(\"192.168.0.1\", list.get(2)); assertEquals(\"192.168.0.1\", list.get(3)); assertEquals(\"192.168.0.1\", list.get(4)); assertEquals(\"192.168.0.1\", list.get(5)); assertEquals(\"192.168.0.1\", list.get(6)); assertEquals(\"192.168.0.1\", list.get(7)); assertEquals(\"192.168.0.1\", list.get(8)); assertEquals(\"192.168.0.1\", list.get(9)); assertEquals(\"192.168.0.1\", list.get(10)); assertEquals(\"192.168.0.1\", list.get(11)); assertEquals(\"192.168.0.1\", list.get(12)); assertEquals(\"192.168.0.1\", list.get(13)); assertEquals(\"192.168.0.1\", list.get(14)); assertEquals(\"192.168.0.1\", list.get(15"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/map/TableMapTest###removeTest",
        "generated_path": "TableMapTest###removeTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testRemove() { TableMap<String, String> TableMap = new TableMap<String, String>(); String[] keys = new String[] {\"a\", \"b\", \"c\"}; String[] values = new String[] {\"a\", \"b\", \"c\"}; for (int i = 0; i < keys.length; i++) { keys[i] = \"a\" + i; values[i] = \"b\" + i; TableMap<String, String> TableMap = new TableMap<String, String>(keys, values); for (int i = 0; i < keys.length; i++) { TableMap<String, String> TableMap = new TableMap<String, String>(keys, values); for (int i = 0; i < keys.length; i++) { TableMap<String, String> TableMap = new TableMap<String, String>(keys, values); for (int i = 0; i < keys.length; i++) { TableMap<String, String> TableMap = new TableMap<String, String>(keys, values); for (int i = 0; i < keys.length; i++) { TableMap<String, String> TableMap = new TableMap<String, String>(keys, values); for (int i = 0; i < keys.length; i++) { TableMap<String, String> TableMap = new TableMap<String, String>(keys, values); for (int i = 0; i < keys.length; i++) { TableMap<String, String>"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/IdcardUtilTest###convert15To18Test",
        "generated_path": "IdcardUtilTest###convert15To18Test.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testConvert15To18() { String idCard
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/EnumUtilTest###getEnumMapTest",
        "generated_path": "EnumUtilTest###getEnumMapTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetEnumMap() { final LinkedHashMap<String, Enum<TestEnum>> map = EnumUtil.getEnumMap(TestEnum.class); assertEquals(map.size(), 2); assertEquals(map.get(\"test\"), TestEnum.TEST); assertEquals(map.get(\"test2\"), TestEnum.TEST2); assertEquals(map.get(\"test3\"), TestEnum.TEST3); assertEquals(map.get(\"test4\"), TestEnum.TEST4); assertEquals(map.get(\"test5\"), TestEnum.TEST5); assertEquals(map.get(\"test6\"), TestEnum.TEST6); assertEquals(map.get(\"test7\"), TestEnum.TEST7); assertEquals(map.get(\"test8\"), TestEnum.TEST8); assertEquals(map.get(\"test9\"), TestEnum.TEST9); assertEquals(map.get(\"test10\"), TestEnum.TEST10); assertEquals(map.get(\"test11\"), TestEnum.TEST11); assertEquals(map.get(\"test12\"), TestEnum.TEST12); assertEquals(map.get(\"test13\"), TestEnum.TEST13); assertEquals(map.get(\"test13\"), TestEnum.TEST13); assertEquals(map.get(\"test13\"), TestEnum.TEST13); }\n"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/lang/hash/CityHashTest###hash32Test",
        "generated_path": "CityHashTest###hash32Test.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testCityHash() { byte[] data = new byte[24]; int result = CityHash.hash32(data); assertEquals(0x6f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/text/AntPathMatcherTest###testExtractUriTemplateVariables",
        "generated_path": "AntPathMatcherTest###testExtractUriTemplateVariables.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testExtractUriTemplateVariables() { Map<String, String> variables = matcher.extractUriTemplateVariables(\"/foo/bar/baz\", \"/foo/bar/baz\"); assertEquals(1, variables.size()); assertEquals(\"baz\", variables.get(\"baz\")); assertEquals(\"baz\", variables.get(\"baz\")); assertEquals(\"baz\", variables.get(\"baz\")); assertEquals(\"baz\", variables.get(\"baz\")); assertEquals(\"baz\", variables.get(\"baz\")); assertEquals(\"baz\", variables.get(\"baz\")); assertEquals(\"baz\", variables.get(\"baz\")); assertEquals(\"baz\", variables.get(\"baz\")); assertEquals(\"baz\", variables.get(\"baz\")); assertEquals(\"baz\", variables.get(\"baz\")); assertEquals(\"baz\", variables.get(\"baz\")); assertEquals(\"baz\", variables.get(\"baz\")); assertEquals(\"baz\", variables.get(\"baz\")); assertEquals(\"baz\", variables.get(\"baz\")); assertEquals(\"baz\", variables.get(\"baz\")); assertEquals(\"baz\", variables.get(\"baz\")); assertEquals(\"baz\", variables.get(\"baz\")); assertEquals(\"baz\", variables.get(\"baz\")); assertEquals(\"baz\", variables.get(\"baz\")); }"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/IdcardUtilTest###getDistrictCodeByIdCardTest",
        "generated_path": "IdcardUtilTest###getDistrictCodeByIdCardTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetDistrictCodeByIdCard() { System.out.println(\"getDistrictCodeByIdCard\"); String idcard
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-extra/src/test/java/cn/hutool/extra/qrcode/QrCodeUtilTest###generateTest",
        "generated_path": "QrCodeUtilTest###generateTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testQrConfig() throws Exception { QrConfig qrConfig = new QrConfig(); qrConfig.ratio = 2; qrConfig.foreColor = Color.BLACK.getRGB(); qrConfig.backColor = Color.BLACK.getRGB(); qrConfig.img = new Image(100, 100, 100, null); BufferedImage result = QrCodeUtil.generate(\"content\", qrConfig); assertEquals(100, result.getWidth()); assertEquals(100, result.getHeight()); assertEquals(Color.BLACK.getRGB(), result.getForeColor()); assertEquals(Color.BLACK.getRGB(), result.getBackColor()); }\n"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/lang/StrFormatterTest###formatTest",
        "generated_path": "StrFormatterTest###formatTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testFormat() { Map<String, Object> map = new HashMap<String, Object>(); map.put(\"a\", \"b\"); map.put(\"c\", \"d\"); map.put(\"d\", \"e\"); map.put(\"e\", \"f\"); map.put(\"f\", \"g\"); map.put(\"g\", \"h\"); map.put(\"h\", \"i\"); String result = StrFormatter.format(\"{a} {b} {c}\", map, true); assertEquals(\"{a} {b} {c}\", result); }\n"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/collection/CollUtilTest###unionTest",
        "generated_path": "CollUtilTest###unionTest.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void union() { }\n"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/map/LinkedForestMapTest###removeTest",
        "generated_path": "LinkedForestMapTest###removeTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testRemove() { final LinkedForestMap<String, String> map = new LinkedForestMap<>(true); map.put(\"a\", \"b\"); map.put(\"c\", \"d\"); map.put(\"d\", \"e\"); map.put(\"e\", \"f\"); map.put(\"f\", \"g\"); map.put(\"g\", \"h\"); map.put(\"h\", \"i\"); map.put(\"h\", \"i\"); map.put(\"g\", \"i\"); map.put(\"h\", \"i\"); map.put(\"h\", \"i\"); map.put(\"h\", \"i\"); map.put(\"h\", \"i\"); map.put(\"h\", \"i\"); map.put(\"h\", \"i\"); map.put(\"h\", \"i\"); map.put(\"h\", \"i\"); map.put(\"h\", \"i\"); map.put(\"h\", \"i\"); map.put(\"h\", \"i\"); map.put(\"h\", \"i\"); map.put(\"h\", \"i\"); map.put(\"h\", \"i\"); map.put(\"h\", \"i\"); map.put(\"h\", \"i\"); map.put(\"h\", \"i\"); map.put(\"h\", \"i\"); map.put(\"h\", \"i\"); map.put(\"h\", \"i\"); map.put(\"h\", \"i\"); map.put(\"h\", \"i\"); map.put(\"h\", \"i\"); map"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/net/NetUtilTest###getLocalHostTest",
        "generated_path": "NetUtilTest###getLocalHostTest.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void testGetLocalhost() throws Exception { System.out.println(\"getLocalhost\"); InetAddress result = NetUtil.getLocalhost(); System.out.println(result); }\n"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-http/src/test/java/cn/hutool/http/HtmlUtilTest###removeHtmlAttrTest",
        "generated_path": "HtmlUtilTest###removeHtmlAttrTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testRemoveHtmlAttr() { assertEquals(\"<p>Hello</p>\", HtmlUtil.removeHtmlAttr(\"<p>Hello</p>\")); assertEquals(\"<p>Hello</p>\", HtmlUtil.removeHtmlAttr(\"<p>Hello</p>\")); assertEquals(\"<p>Hello</p>\", HtmlUtil.removeHtmlAttr(\"<p>Hello</p>\")); assertEquals(\"<p>Hello</p>\", HtmlUtil.removeHtmlAttr(\"<p>Hello</p>\")); assertEquals(\"<p>Hello</p>\", HtmlUtil.removeHtmlAttr(\"<p>Hello</p>\")); assertEquals(\"<p>Hello</p>\", HtmlUtil.removeHtmlAttr(\"<p>Hello</p>\")); assertEquals(\"<p>Hello</p>\", HtmlUtil.removeHtmlAttr(\"<p>Hello</p>\")); assertEquals(\"<p>Hello</p>\", HtmlUtil.removeHtmlAttr(\"<p>Hello</p>\")); assertEquals(\"<p>Hello</p>\", HtmlUtil.removeHtmlAttr(\"<p>Hello</p>\")); assertEquals(\"<p>Hello</p>\", HtmlUtil.removeHtmlAttr(\"<p>Hello</p>\")); assertEquals(\"<p>Hello</p>\", HtmlUtil.removeHtmlAttr(\"<p>Hello</p>\")); assertEquals(\"<p>Hello</p>\", HtmlUtil.removeHtmlAttr(\"<p>Hello"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/RandomUtilTest###randomStringWithoutStrTest",
        "generated_path": "RandomUtilTest###randomStringWithoutStrTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testRandomStringWithoutStr() { System.out.println(\"randomStringWithoutStr\"); int length = 10; String elemData = \"test\"; String expResult = \"test\"; String result = RandomUtil.randomStringWithoutStr(length, elemData); assertEquals(expResult, result); }\n"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/NumberUtilTest###parseFloatTest",
        "generated_path": "NumberUtilTest###parseFloatTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testParseFloat() { for (int i = 0; i < 10; i++) { assertEquals(Float.valueOf(i), NumberUtil.parseFloat(\"0\", Float.valueOf(i))); } for (int i = 0; i < 10; i++) { assertEquals(Float.valueOf(i), NumberUtil.parseFloat(\"0\", Float.valueOf(i))); } for (int i = 0; i < 10; i++) { assertEquals(Float.valueOf(i), NumberUtil.parseFloat(\"0\", Float.valueOf(i))); } for (int i = 0; i < 10; i++) { assertEquals(Float.valueOf(i), NumberUtil.parseFloat(\"0\", Float.valueOf(i))); } for (int i = 0; i < 10; i++) { assertEquals(Float.valueOf(i), NumberUtil.parseFloat(\"0\", Float.valueOf(i))); } for (int i = 0; i < 10; i++) { assertEquals(Float.valueOf(i), NumberUtil.parseFloat(\"0\", Float.valueOf(i))); } for (int i = 0; i < 10; i++) { assertEquals(Float.valueOf(i), NumberUtil.parseFloat(\"0\", Float.valueOf(i))); } for (int i = 0; i < 10; i++) { assertEquals(Float.valueOf("
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/ReUtilTest###extractMultiTest",
        "generated_path": "ReUtilTest###extractMultiTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testExtractMulti() { System.out.println(\"extractMulti\"); String regex = null; String content = \"\"; String template = \"\"; String expResult = \"\"; String result = ReUtil.extractMulti(regex, content, template); assertEquals(expResult, result); }\n"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/CoordinateUtilTest###gcj02ToBd09Test",
        "generated_path": "CoordinateUtilTest###gcj02ToBd09Test.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void gcj02ToBd09() { System.out.println(\"gcj02ToBd09\"); double lng = 0.0; double lat = 0.0; Coordinate bd09 = CoordinateUtil.gcj02ToBd09(lng, lat); System.out.println(\"bd09 = \" + bd09.getX()); System.out.println(\"bd09 = \" + bd09.getY()); System.out.println(\"bd09 = \" + bd09.getX()); System.out.println(\"bd09 = \" + bd09.getY()); System.out.println(\"bd09 = \" + bd09.getX()); System.out.println(\"bd09 = \" + bd09.getY()); System.out.println(\"bd09 = \" + bd09.getX()); System.out.println(\"bd09 = \" + bd09.getY()); System.out.println(\"bd09 = \" + bd09.getY()); System.out.println(\"bd09 = \" + bd09.getX()); System.out.println(\"bd09 = \" + bd09.getY()); System.out.println(\"bd09 = \" + bd09.getX()); System.out.println(\"bd09 = \" + bd09.getY()); System.out.println(\"bd09 = \" + bd09.getX()); System.out.println(\"bd09 = \" + bd09.getY()); System.out"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/ArrayUtilTest###wrapTest",
        "generated_path": "ArrayUtilTest###wrapTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testArrayWrap() { Object[] array = new Object[] {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}; assertArrayEquals(new Object[] {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, ArrayUtil.wrap(array)); assertArrayEquals(new Object[] {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, ArrayUtil.wrap(array)); assertArrayEquals(new Object[] {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, ArrayUtil.wrap(array)); assertArrayEquals(new Object[] {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, ArrayUtil.wrap(array)); assertArrayEquals(new Object[] {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, ArrayUtil.wrap(array)); assertArrayEquals(new Object[] {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, ArrayUtil.wrap(array)); assertArrayEquals(new Object[] {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, ArrayUtil.wrap(array)); assertArrayEquals(new Object[] {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, ArrayUtil.wrap(array)); assertArrayEquals(new Object[] {1"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/io/CharsetDetectorTest###detectTest",
        "generated_path": "CharsetDetectorTest###detectTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testCharsetDetector() throws Exception { InputStream in = getClass().getResourceAsStream(\"charset-detector.txt\"); Charset charset = CharsetDetector.detect(1024, in); assertEquals(\"UTF-8\", charset.name()); assertEquals(\"UTF-8\", charset.description()); assertEquals(\"UTF-8\", charset.name()); assertEquals(\"UTF-8\", charset.name()); assertEquals(\"UTF-8\", charset.description()); assertEquals(\"UTF-8\", charset.description()); assertEquals(\"UTF-8\", charset.description()); assertEquals(\"UTF-8\", charset.description()); assertEquals(\"UTF-8\", charset.description()); assertEquals(\"UTF-8\", charset.description()); assertEquals(\"UTF-8\", charset.description()); assertEquals(\"UTF-8\", charset.description()); assertEquals(\"UTF-8\", charset.description()); assertEquals(\"UTF-8\", charset.description()); assertEquals(\"UTF-8\", charset.description()); assertEquals(\"UTF-8\", charset.description()); assertEquals(\"UTF-8\", charset.description()); assertEquals(\"UTF-8\", charset.description()); assertEquals(\"UTF-8\", charset.description()); assertEquals(\"UTF-8\", charset.description()); assertEquals(\"UTF-8\", charset.description()); assertEquals(\"UTF-8\", charset.description()); assertEquals(\"UTF-8\", charset.description()); assertEquals(\"UTF-8\", charset.description()); assertEquals(\"UTF-8\", charset.description()); }\n"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/CharUtilTest###toCloseCharTest",
        "generated_path": "CharUtilTest###toCloseCharTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testToCloseChar() { assertEquals('\u2460', CharUtil.toCloseChar('\u2460')); assertEquals('\u2460', CharUtil.toCloseChar('\u2460')); assertEquals('\u2460', CharUtil.toCloseChar('\u2460')); assertEquals('\u2460', CharUtil.toCloseChar('\u2460')); assertEquals('\u2460', CharUtil.toCloseChar('\u2460')); assertEquals('\u2460', CharUtil.toCloseChar('\u2460')); assertEquals('\u2460', CharUtil.toCloseChar('\u2460')); assertEquals('\u2460', CharUtil.toCloseChar('\u2460')); assertEquals('\u2460', CharUtil.toCloseChar('\u2460')); assertEquals('\u2460', CharUtil.toCloseChar('\u2460')); assertEquals('\u2460', CharUtil.toCloseChar('\u2460')); assertEquals('\u2460', CharUtil.toCloseChar('\u2460')); assertEquals('\u2460', CharUtil.toCloseChar('\u2460')); assertEquals('\u2460', CharUtil.toCloseChar('\u2460')); assertEquals('\u2460', CharUtil.toCloseChar('\u2460')); assertEquals('\u2460', CharUtil.toCloseChar('\u2460')); assertEquals('\ufffd"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/ReUtilTest###getTest",
        "generated_path": "ReUtilTest###getTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGet() { System.out.println(\"get\"); Pattern pattern = Pattern.compile(\"\\\\n\"); String content = \"This is a test\\\\nThis is a test\\\\nThis is a test\\\\nThis is a test\\\\nThis is a test\\\\nThis is a test\\\\nThis is a test\\\\nThis is a test\\\\nThis is a test\\\\nThis is a test\\\\nThis is a test\\\\nThis is a test\\\\nThis is a test\\\\nThis is a test\\\\nThis is a test\\\\nThis is a test\\\\nThis is a test\\\\nThis is a test\\\\nThis is a test\\\\nThis is a test\\\\nThis is a test\\\\nThis is a test\\\\nThis is a test\\\\nThis is a test\\\\nThis is a test\\\\nThis is a test\\\\nThis is a test\\\\nThis is a test\\\\nThis is a test\\\\nThis is a test\\\\nThis is a test\\\\nThis is a test\\\\nThis is a test\\\\nThis is a test\\\\nThis is a test\\\\nThis is a test\\\\nThis is a test\\\\nThis is a test\\\\nThis is a test\\\\nThis is a test\\\\n\"); }\n"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/text/CharSequenceUtilTest###removeSuffixIgnoreCaseTest",
        "generated_path": "CharSequenceUtilTest###removeSuffixIgnoreCaseTest.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void testRemoveSuffixIgnoreCase() { }\n"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/EnumUtilTest###getNamesTest",
        "generated_path": "EnumUtilTest###getNamesTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetNames() { List<String> names = EnumUtil.getNames(TestEnum.class); assertEquals(1, names.size()); assertEquals(\"TestEnum\", names.get(0)); assertEquals(\"TestEnum\", names.get(1)); assertEquals(\"TestEnum\", names.get(2)); assertEquals(\"TestEnum\", names.get(3)); assertEquals(\"TestEnum\", names.get(4)); assertEquals(\"TestEnum\", names.get(5)); assertEquals(\"TestEnum\", names.get(6)); assertEquals(\"TestEnum\", names.get(7)); assertEquals(\"TestEnum\", names.get(8)); assertEquals(\"TestEnum\", names.get(9)); assertEquals(\"TestEnum\", names.get(10)); assertEquals(\"TestEnum\", names.get(11)); assertEquals(\"TestEnum\", names.get(12)); assertEquals(\"TestEnum\", names.get(13)); assertEquals(\"TestEnum\", names.get(14)); assertEquals(\"TestEnum\", names.get(15)); assertEquals(\"TestEnum\", names.get(16)); assertEquals(\"TestEnum\", names.get(17)); assertEquals(\"TestEnum\", names.get(18)); }\n"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/ReUtilTest###delFirstTest",
        "generated_path": "ReUtilTest###delFirstTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testDelFirst() { System.out.println(\"delFirst\"); String regex = null; String content = \"\"; String expResult = \"\"; String result = ReUtil.delFirst(regex, content); assertEquals(expResult, result); regex = null; content = \"\"; expResult = \"\"; result = ReUtil.delFirst(regex, content); assertEquals(expResult, result); }\n"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/text/CharSequenceUtilTest###removePrefixIgnoreCaseTest",
        "generated_path": "CharSequenceUtilTest###removePrefixIgnoreCaseTest.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void testRemovePrefixIgnoreCase() { }\n"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/ArrayUtilTest###castTest",
        "generated_path": "ArrayUtilTest###castTest.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test(expected = NullPointerException.class) public void testCastNull() { ArrayUtil.cast(null, null); }\n"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/PageUtilTest###rainbowTest",
        "generated_path": "PageUtilTest###rainbowTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void rainbow() { int[] rainbow = PageUtil.rainbow(1, 2, 3); assertEquals(2, rainbow.length); assertEquals(3, rainbow[0]); assertEquals(3, rainbow[1]); assertEquals(3, rainbow[2]); assertEquals(3, rainbow[3]); assertEquals(3, rainbow[4]); assertEquals(3, rainbow[5]); assertEquals(3, rainbow[6]); assertEquals(3, rainbow[7]); assertEquals(3, rainbow[8]); assertEquals(3, rainbow[9]); assertEquals(3, rainbow[10]); assertEquals(3, rainbow[11]); assertEquals(3, rainbow[12]); assertEquals(3, rainbow[13]); assertEquals(3, rainbow[14]); assertEquals(3, rainbow[15]); assertEquals(3, rainbow[16]); assertEquals(3, rainbow[17]); assertEquals(3, rainbow[18]); assertEquals(3, rainbow[19]); assertEquals(3, rainbow[19]); assertEquals(3, rainbow[19]); assertEquals(3, rainbow[19]);"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/convert/NumberChineseFormatterTest###formatThousandTest",
        "generated_path": "NumberChineseFormatterTest###formatThousandTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testFormatThousand() { assertEquals(\"Thousand\", NumberChineseFormatter.formatThousand(10, false)); assertEquals(\"Thousand\", NumberChineseFormatter.formatThousand(20, false)); assertEquals(\"Thousand\", NumberChineseFormatter.formatThousand(20, false)); assertEquals(\"Thousand\", NumberChineseFormatter.formatThousand(20, false)); assertEquals(\"Thousand\", NumberChineseFormatter.formatThousand(20, false)); assertEquals(\"Thousand\", NumberChineseFormatter.formatThousand(20, false)); assertEquals(\"Thousand\", NumberChineseFormatter.formatThousand(20, false)); assertEquals(\"Thousand\", NumberChineseFormatter.formatThousand(20, false)); assertEquals(\"Thousand\", NumberChineseFormatter.formatThousand(20, false)); assertEquals(\"Thousand\", NumberChineseFormatter.formatThousand(20, false)); assertEquals(\"Thousand\", NumberChineseFormatter.formatThousand(20, false)); assertEquals(\"Thousand\", NumberChineseFormatter.formatThousand(20, false)); assertEquals(\"Thousand\", NumberChineseFormatter.formatThousand(20, false)); assertEquals(\"Thousand\", NumberChineseFormatter.formatThousand(20, false)); assertEquals(\"Thousand\", NumberChineseFormatter.format"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/ArrayUtilTest###editTest",
        "generated_path": "ArrayUtilTest###editTest.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void testEdit() { }\n"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/math/CombinationTest###selectTest",
        "generated_path": "CombinationTest###selectTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testSelect() { final Combination combination = new Combination(new String[]{\"a\", \"b\", \"c\"}); final List<String[]> result = combination.select(3); Assert.assertEquals(3, result.size()); Assert.assertEquals(\"a\", result.get(0)); Assert.assertEquals(\"b\", result.get(1)); Assert.assertEquals(\"c\", result.get(2)); Assert.assertEquals(\"c\", result.get(3)); Assert.assertEquals(\"d\", result.get(4)); Assert.assertEquals(\"e\", result.get(5)); Assert.assertEquals(\"f\", result.get(6)); Assert.assertEquals(\"g\", result.get(7)); Assert.assertEquals(\"h\", result.get(8)); Assert.assertEquals(\"h\", result.get(9)); Assert.assertEquals(\"h\", result.get(10)); Assert.assertEquals(\"h\", result.get(11)); Assert.assertEquals(\"h\", result.get(12)); Assert.assertEquals(\"h\", result.get(13)); Assert.assertEquals(\"h\", result.get(14)); Assert.assertEquals(\"h\", result.get(15)); Assert.assertEquals(\"h\", result.get(16)); Assert.assertEquals(\"h\", result.get(17)); Assert.assertEquals(\"h\", result.get(18)); Assert.assertEquals(\"h\", result.get(19)); Assert."
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/date/LocalDateTimeUtilTest###parseTest",
        "generated_path": "LocalDateTimeUtilTest###parseTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testParse() { assertEquals(LocalDateTimeUtil.parse(\"2013-01-01 00:00:00\", \"yyyy-MM-dd\"), LocalDateTimeUtil.parse(\"2013-01-01 00:00:00\", \"yyyy-MM-dd\")); assertEquals(LocalDateTimeUtil.parse(\"2013-01-01 00:00:00\", \"yyyy-MM-dd\"), LocalDateTimeUtil.parse(\"2013-01-01 00:00:00\", \"yyyy-MM-dd\")); assertEquals(LocalDateTimeUtil.parse(\"2013-01-01 00:00:00\", \"yyyy-MM-dd\"), LocalDateTimeUtil.parse(\"2013-01-01 00:00:00\", \"yyyy-MM-dd\")); assertEquals(LocalDateTimeUtil.parse(\"2013-01-01 00:00:00\", \"yyyy-MM-dd\"), LocalDateTimeUtil.parse(\"2013-01-01 00:00:00\", \"yyyy-MM-dd\")); assertEquals(LocalDateTimeUtil.parse(\"2013-01-01 00:00:00\", \"yyyy-MM-dd\"), LocalDateTimeUtil.parse(\"2013-01-01 00:00:00\", \"yyyy-MM-dd\")); assertEquals(LocalDateTimeUtil.parse(\"2013-01-01 00:00:00\", \"yyyy-MM-dd\"), LocalDateTimeUtil.parse(\"2013-01-01"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/NumberUtilTest###generateBySetTest",
        "generated_path": "NumberUtilTest###generateBySetTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGenerateBySet() throws Exception { Integer[] array = NumberUtil.generateBySet(0, 10, 10); assertArrayEquals(new Integer[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/collection/IterUtilTest###getElementTypeTest",
        "generated_path": "IterUtilTest###getElementTypeTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetElementType() { assertEquals(String.class, IterUtil.getElementType(null)); assertEquals(Integer.class, IterUtil.getElementType(new ArrayList<Integer>())); assertEquals(Integer.class, IterUtil.getElementType(new ArrayList<Integer>())); assertEquals(Integer.class, IterUtil.getElementType(new ArrayList<Integer>())); assertEquals(Integer.class, IterUtil.getElementType(new ArrayList<Integer>())); assertEquals(Integer.class, IterUtil.getElementType(new ArrayList<Integer>())); assertEquals(Integer.class, IterUtil.getElementType(new ArrayList<Integer>())); assertEquals(Integer.class, IterUtil.getElementType(new ArrayList<Integer>())); assertEquals(Integer.class, IterUtil.getElementType(new ArrayList<Integer>())); assertEquals(Integer.class, IterUtil.getElementType(new ArrayList<Integer>())); assertEquals(Integer.class, IterUtil.getElementType(new ArrayList<Integer>())); assertEquals(Integer.class, IterUtil.getElementType(new ArrayList<Integer>())); assertEquals(Integer.class, IterUtil.getElementType(new ArrayList<Integer>())); assertEquals(Integer.class, IterUtil.getElementType(new ArrayList<Integer>())); assertEquals(Integer.class, IterUtil.getElementType(new ArrayList<Integer>())); assertEquals(Integer.class, IterUtil.getElementType(new"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/NumberUtilTest###toBigDecimalTest",
        "generated_path": "NumberUtilTest###toBigDecimalTest.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void testToBigDecimal() throws Exception { }\n"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/RandomUtilTest###randomBytesTest",
        "generated_path": "RandomUtilTest###randomBytesTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testRandomBytes() { byte[] randomBytes = RandomUtil.randomBytes(10); System.out.println(Arrays.toString(randomBytes)); }\n"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-extra/src/test/java/cn/hutool/extra/qrcode/QrCodeUtilTest###generateAsBase64Test",
        "generated_path": "QrCodeUtilTest###generateAsBase64Test.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGenerateAsBase64() throws Exception { QrConfig qrConfig = new QrConfig(); String result = QrCodeUtil.generateAsBase64(\"content\", qrConfig, QrCodeUtil.QR_TYPE_SVG); System.out.println(result); String result2 = QrCodeUtil.generateAsBase64(\"content2\", qrConfig, QrCodeUtil.QR_TYPE_TXT); System.out.println(result2); String result3 = QrCodeUtil.generateAsBase64(\"content3\", qrConfig, QrCodeUtil.QR_TYPE_TXT); System.out.println(result3); String result4 = QrCodeUtil.generateAsBase64(\"content4\", qrConfig, QrCodeUtil.QR_TYPE_TXT); System.out.println(result4); String result5 = QrCodeUtil.generateAsBase64(\"content5\", qrConfig, QrCodeUtil.QR_TYPE_TXT); System.out.println(result5); String result6 = QrCodeUtil.generateAsBase64(\"content6\", qrConfig, QrCodeUtil.QR_TYPE_TXT); System.out.println(result6); String result7 = QrCodeUtil.generateAsBase64(\"content7\", qrConfig, QrCodeUtil.QR_TYPE_TXT); System.out.println(result7); String result8 = QrCodeUtil.generateAsBase64(\"content8\","
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/bean/BeanUtilTest###getPropertyDescriptorsTest",
        "generated_path": "BeanUtilTest###getPropertyDescriptorsTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetPropertyDescriptors() throws BeanException { BeanUtil.getPropertyDescriptors(TestBean.class); }\n"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/EnumUtilTest###likeValueOfTest",
        "generated_path": "EnumUtilTest###likeValueOfTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void likeValueOf() { assertEquals(TestEnum.A, EnumUtil.likeValueOf(TestEnum.A, \"A\")); assertEquals(TestEnum.B, EnumUtil.likeValueOf(TestEnum.B, \"B\")); assertEquals(TestEnum.C, EnumUtil.likeValueOf(TestEnum.C, \"C\")); assertEquals(TestEnum.D, EnumUtil.likeValueOf(TestEnum.D, \"D\")); assertEquals(TestEnum.E, EnumUtil.likeValueOf(TestEnum.E, \"E\")); assertEquals(TestEnum.F, EnumUtil.likeValueOf(TestEnum.F, \"F\")); assertEquals(TestEnum.F, EnumUtil.likeValueOf(TestEnum.F, \"F\")); assertEquals(TestEnum.F, EnumUtil.likeValueOf(TestEnum.F, \"F\")); assertEquals(TestEnum.F, EnumUtil.likeValueOf(TestEnum.F, \"F\")); assertEquals(TestEnum.F, EnumUtil.likeValueOf(TestEnum.F, \"F\")); assertEquals(TestEnum.F, EnumUtil.likeValueOf(TestEnum.F, \"F\")); assertEquals(TestEnum.F, EnumUtil.likeValueOf(TestEnum.F, \"F\")); assertEquals(TestEnum.F, EnumUtil.likeValueOf(TestEnum.F, \""
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/net/Ipv4UtilTest###getMaskBitByMaskTest",
        "generated_path": "Ipv4UtilTest###getMaskBitByMaskTest.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test(expected = IllegalArgumentException.class) public void testGetMaskBitByMask() { Ipv4Util.getMaskBitByMask(\"0\"); }\n"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/date/DateUtilTest###formatChineseDateTest",
        "generated_path": "DateUtilTest###formatChineseDateTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public final void testFormatChineseDate() throws Exception { CalendarUtil.setTimeZone(new TimeZone(\"GMT\")); String result = DateUtil.formatChineseDate(new Date(), false, true); System.out.println(result); }\n"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-json/src/test/java/cn/hutool/json/JSONObjectTest###accumulateTest",
        "generated_path": "JSONObjectTest###accumulateTest.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void testAccumulate() throws Exception { JSONObject json = new JSONObject(); try { json.accumulate(\"key\", \"value\"); } catch (JSONException e) { Assert.fail(e.getMessage()); } try { json.accumulate(\"key\", \"value\"); } catch (JSONException e) { Assert.fail(e.getMessage()); } try { json.accumulate(\"key\", \"value\"); } catch (JSONException e) { Assert.fail(e.getMessage()); } try { json.accumulate(\"key\", \"value\"); } catch (JSONException e) { Assert.fail(e.getMessage()); } try { json.accumulate(\"key\", \"value\"); } catch (JSONException e) { Assert.fail(e.getMessage()); } try { json.accumulate(\"key\", \"value\"); } catch (JSONException e) { Assert.fail(e.getMessage()); } try { json.accumulate(\"key\", \"value\"); } catch (JSONException e) { Assert.fail(e.getMessage()); } try { json.accumulate(\"key\", \"value\"); } catch (JSONException e) { Assert.fail(e.getMessage()); } try { json.accumulate(\"key\", \"value\"); } catch (JSONException e) { Assert.fail(e.getMessage()); } try { json.accumulate(\"key\", \"value\"); } catch (JSONException e) { Assert.fail(e.getMessage()); } }\n"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/ArrayUtilTest###distinctTest",
        "generated_path": "ArrayUtilTest###distinctTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testDistinct() { assertEquals(new String[] { \"a\", \"b\", \"c\" }, ArrayUtil.distinct(new String[] { \"a\", \"b\", \"c\" })); assertEquals(new String[] { \"a\", \"b\", \"c\" }, ArrayUtil.distinct(new String[] { \"a\", \"b\", \"c\" })); assertEquals(new String[] { \"a\", \"b\", \"c\" }, ArrayUtil.distinct(new String[] { \"a\", \"b\", \"c\" })); assertEquals(new String[] { \"a\", \"b\", \"c\" }, ArrayUtil.distinct(new String[] { \"a\", \"b\", \"c\" })); assertEquals(new String[] { \"a\", \"b\", \"c\" }, ArrayUtil.distinct(new String[] { \"a\", \"b\", \"c\" })); assertEquals(new String[] { \"a\", \"b\", \"c\" }, ArrayUtil.distinct(new String[] { \"a\", \"b\", \"c\" })); assertEquals(new String[] { \"a\", \"b\", \"c\" }, ArrayUtil.distinct(new String[] { \"a\", \"b\", \"c\" })); assertEquals(new String[] { \"a\", \"b\", \"c\" }, ArrayUtil.distinct(new String[] { \"a\", \"b\", \"c\" })); }\n"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/lang/caller/CallerUtilTest###getCallerMethodNameTest",
        "generated_path": "CallerUtilTest###getCallerMethodNameTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetCallerMethodName() { String methodName = CallerUtil.getCallerMethodName(true); assertEquals(\"getCallerMethodName\", methodName); }\n"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/lang/reflect/MethodHandleUtilTest###findMethodTest",
        "generated_path": "MethodHandleUtilTest###findMethodTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testFindMethod() throws Exception { MethodHandle handle = MethodHandleUtil.findMethod(TestClass.class, \"testMethod\", MethodType.class); assertNotNull(handle); assertEquals(\"testMethod\", handle.getName()); assertEquals(MethodType.class, handle.getReturnType()); assertEquals(\"testMethod\", handle.getName()); assertEquals(MethodType.class, handle.getGenericReturnType()); assertEquals(\"testMethod\", handle.getName()); assertEquals(MethodType.class, handle.getGenericReturnType()); assertEquals(\"testMethod\", handle.getName()); assertEquals(MethodType.class, handle.getGenericReturnType()); assertEquals(\"testMethod\", handle.getName()); assertEquals(MethodType.class, handle.getGenericReturnType()); assertEquals(MethodType.class, handle.getGenericReturnType()); assertEquals(MethodType.class, handle.getGenericReturnType()); assertEquals(\"testMethod\", handle.getName()); assertEquals(MethodType.class, handle.getGenericReturnType()); assertEquals(MethodType.class, handle.getGenericReturnType()); assertEquals(MethodType.class, handle.getGenericReturnType()); assertEquals(MethodType.class, handle.getGenericReturnType()); assertEquals(MethodType.class, handle.getGenericReturnType()); assertEquals(MethodType.class, handle.getGenericReturnType()); assertEquals(MethodType.class, handle.getGenericReturnType()); assertEquals(MethodType.class, handle.getGenericReturnType()); assertEquals(MethodType.class, handle"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/lang/func/LambdaUtilTest###getRealClassTest",
        "generated_path": "LambdaUtilTest###getRealClassTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test(expected = IllegalArgumentException.class) public void testGetRealClassWithNull() { LambdaUtil.getRealClass(null); }\n"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/ReflectUtilTest###newInstanceIfPossibleTest",
        "generated_path": "ReflectUtilTest###newInstanceIfPossibleTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testNewInstanceIfPossible() throws Exception { System.out.println(\"newInstanceIfPossible\"); System.out.println(\"newInstanceIfPossible\"); System.out.println(\"newInstanceIfPossible\"); System.out.println(\"newInstanceIfPossible\"); System.out.println(\"newInstanceIfPossible\"); System.out.println(\"newInstanceIfPossible\"); System.out.println(\"newInstanceIfPossible\"); System.out.println(\"newInstanceIfPossible\"); System.out.println(\"newInstanceIfPossible\"); System.out.println(\"newInstanceIfPossible\"); System.out.println(\"newInstanceIfPossible\"); System.out.println(\"newInstanceIfPossible\"); System.out.println(\"newInstanceIfPossible\"); System.out.println(\"newInstanceIfPossible\"); System.out.println(\"newInstanceIfPossible\"); System.out.println(\"newInstanceIfPossible\"); System.out.println(\"newInstanceIfPossible\"); System.out.println(\"newInstanceIfPossible\"); System.out.println(\"newInstanceIfPossible\"); System.out.println(\"newInstanceIfPossible\"); System.out.println(\"newInstanceIfPossible\"); System.out.println(\"newInstanceIfPossible\"); System.out.println(\"newInstanceIfPossible\"); System.out.println(\"newInstanceIfPossible\"); System.out.println(\"newInstanceIfPossible\"); System.out.println(\"newInstanceIfPossible\"); System.out.println(\"newInstanceIfPossible\"); System.out.println(\"newInstance"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/ArrayUtilTest###replaceTest",
        "generated_path": "ArrayUtilTest###replaceTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testReplace() { assertArrayEquals(new Object[] { \"a\", \"b\", \"c\" }, ArrayUtil.replace(new Object[] { \"a\", \"b\", \"c\" }, 0, \"a\", \"b\", \"c\")); assertArrayEquals(new Object[] { \"a\", \"b\", \"c\" }, ArrayUtil.replace(new Object[] { \"a\", \"b\", \"c\" }, 0, \"a\", \"b\", \"c\")); assertArrayEquals(new Object[] { \"a\", \"b\", \"c\" }, ArrayUtil.replace(new Object[] { \"a\", \"b\", \"c\" }, 0, \"a\", \"b\", \"c\")); assertArrayEquals(new Object[] { \"a\", \"b\", \"c\" }, ArrayUtil.replace(new Object[] { \"a\", \"b\", \"c\" }, 0, \"a\", \"b\", \"c\")); }\n"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/EnumUtilTest###getByTest",
        "generated_path": "EnumUtilTest###getByTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test(expected = IllegalArgumentException.class) public void testGetByNull() { EnumUtil.getBy(null, null); }\n"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/date/DateUtilTest###timeToSecondTest",
        "generated_path": "DateUtilTest###timeToSecondTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testTimeToSecond() { System.out.println(\"timeToSecond\"); String timeStr = \"0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-http/src/test/java/cn/hutool/http/HttpRequestTest###toStringTest",
        "generated_path": "HttpRequestTest###toStringTest.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void testToString() { }\n"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-dfa/src/test/java/cn/hutool/dfa/SensitiveUtilTest###testSensitiveFilter",
        "generated_path": "SensitiveUtilTest###testSensitiveFilter.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testSensitiveFilter() { String text = \"This is a test\"; String result = SensitiveUtil.sensitiveFilter(text); assertEquals(text, result); }\n"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/collection/CollUtilTest###containsAnyTest",
        "generated_path": "CollUtilTest###containsAnyTest.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void testContainsAny() { }\n"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/net/NetUtilTest###getLocalHostNameTest",
        "generated_path": "NetUtilTest###getLocalHostNameTest.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void testGetLocalHostName() throws Exception { System.out.println(\"getLocalHostName\"); String result = NetUtil.getLocalHostName(); System.out.println(result); }\n"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/net/NetUtilTest###getLocalhostTest",
        "generated_path": "NetUtilTest###getLocalhostTest.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void testGetLocalhost() throws Exception { System.out.println(\"getLocalhost\"); InetAddress result = NetUtil.getLocalhost(); System.out.println(result); }\n"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/NumberUtilTest###isNumberTest",
        "generated_path": "NumberUtilTest###isNumberTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testIsNumber() throws Exception { assertTrue(NumberUtil.isNumber(\"1\")); assertTrue(NumberUtil.isNumber(\"2\")); assertTrue(NumberUtil.isNumber(\"3\")); assertTrue(NumberUtil.isNumber(\"4\")); assertTrue(NumberUtil.isNumber(\"5\")); assertTrue(NumberUtil.isNumber(\"6\")); assertTrue(NumberUtil.isNumber(\"7\")); assertTrue(NumberUtil.isNumber(\"8\")); assertTrue(NumberUtil.isNumber(\"9\")); assertTrue(NumberUtil.isNumber(\"-\")); assertTrue(NumberUtil.isNumber(\"-\")); assertTrue(NumberUtil.isNumber(\"-\")); assertTrue(NumberUtil.isNumber(\"1\")); assertTrue(NumberUtil.isNumber(\"1\")); assertTrue(NumberUtil.isNumber(\"1\")); assertTrue(NumberUtil.isNumber(\"1\")); assertTrue(NumberUtil.isNumber(\"1\")); assertTrue(NumberUtil.isNumber(\"1\")); assertTrue(NumberUtil.isNumber(\"-\")); assertTrue(NumberUtil.isNumber(\"-\")); assertTrue(NumberUtil.isNumber(\"-\")); assertTrue(NumberUtil.isNumber(\"1\")); assertTrue(NumberUtil.isNumber(\"1\")); assertTrue(NumberUtil.isNumber(\"1\")); assertTrue(NumberUtil.isNumber(\"1\")); assertTrue(NumberUtil.is"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/io/FileUtilTest###equalsTest",
        "generated_path": "FileUtilTest###equalsTest.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void testEquals() throws Exception { }\n"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/RandomUtilTest###randomElesTest",
        "generated_path": "RandomUtilTest###randomElesTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testRandomElesList() { List<String> list = new ArrayList<>(); list.add(\"a\"); list.add(\"b\"); list.add(\"c\"); list.add(\"d\"); list.add(\"e\"); list.add(\"f\"); list.add(\"g\"); list.add(\"h\"); list.add(\"i\"); list.add(\"j\"); list.add(\"k\"); list.add(\"v\"); list.add(\"m\"); list.add(\"g\"); list.add(\"i\"); list.add(\"j\"); list.add(\"i\"); list.add(\"j\"); list.add(\"i\"); list.add(\"j\"); list.add(\"i\"); list.add(\"j\"); list.add(\"i\"); list.add(\"j\"); list.add(\"i\"); list.add(\"i\"); list.add(\"j\"); list.add(\"i\"); list.add(\"j\"); list.add(\"i\"); list.add(\"j\"); list.add(\"i\"); list.add(\"i\"); list.add(\"i\"); list.add(\"i\"); list.add(\"i\"); list.add(\"i\"); list.add(\"i\"); list.add(\"i\"); list.add(\"i\"); list.add(\"i\"); list.add(\"i\"); list.add(\"i\"); list.add(\"i\"); list.add(\"i\"); list.add(\"i\"); list.add(\"i\"); list.add(\"i\"); list.add(\"i\"); list.add"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/map/MapUtilTest###filterTest",
        "generated_path": "MapUtilTest###filterTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testFilter() { assertEquals(0, MapUtil.filter(null, \"a\").size()); assertEquals(0, MapUtil.filter(null, \"b\").size()); assertEquals(0, MapUtil.filter(null, \"c\").size()); assertEquals(0, MapUtil.filter(null, \"a\").size()); assertEquals(0, MapUtil.filter(null, \"b\").size()); assertEquals(0, MapUtil.filter(null, \"c\").size()); assertEquals(0, MapUtil.filter(null, \"a\").size()); assertEquals(0, MapUtil.filter(null, \"b\").size()); assertEquals(0, MapUtil.filter(null, \"c\").size()); assertEquals(0, MapUtil.filter(null, \"a\").size()); assertEquals(0, MapUtil.filter(null, \"b\").size()); assertEquals(0, MapUtil.filter(null, \"c\").size()); assertEquals(0, MapUtil.filter(null, \"a\").size()); assertEquals(0, MapUtil.filter(null, \"b\").size()); assertEquals(0, MapUtil.filter(null, \"c\").size()); assertEquals(0, MapUtil.filter(null, \"a\").size()); assertEquals(0, MapUtil.filter(null, \"b\").size()); assertEquals(0, MapUtil.filter(null, \"c\").size()); assertEquals(0"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/ClassUtilTest###getLocationPathTest",
        "generated_path": "ClassUtilTest###getLocationPathTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetLocationPath() throws Exception { assertEquals(ClassUtil.getLocationPath(TestClass.class), \"org/junit/util/TestClass.java\"); assertEquals(ClassUtil.getLocationPath(TestClass.class), \"org/junit/util/TestClass.java\"); assertEquals(ClassUtil.getLocationPath(TestClass.class), \"org/junit/util/TestClass.java\"); assertEquals(ClassUtil.getLocationPath(TestClass.class), \"org/junit/util/TestClass.java\"); assertEquals(ClassUtil.getLocationPath(TestClass.class), \"org/junit/util/TestClass.java\"); assertEquals(ClassUtil.getLocationPath(TestClass.class), \"org/junit/util/TestClass.java\"); assertEquals(ClassUtil.getLocationPath(TestClass.class), \"org/junit/util/TestClass.java\"); assertEquals(ClassUtil.getLocationPath(TestClass.class), \"org/junit/util/TestClass.java\"); assertEquals(ClassUtil.getLocationPath(TestClass.class), \"org/junit/util/TestClass.java\"); assertEquals(ClassUtil.getLocationPath(TestClass.class), \"org/junit/util/TestClass.java\"); assertEquals(ClassUtil.getLocationPath(TestClass.class), \"org/junit/util/TestClass."
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/map/LinkedForestMapTest###unlinkNodeTest",
        "generated_path": "LinkedForestMapTest###unlinkNodeTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testUnlinkNode() { final LinkedForestMap<String, String> map = new LinkedForestMap<String, String>(true); map.put(\"a\", \"b\"); map.put(\"c\", \"d\"); map.put(\"e\", \"f\"); map.put(\"f\", \"g\"); map.put(\"g\", \"h\"); map.put(\"h\", \"i\"); map.put(\"i\", \"j\"); map.put(\"j\", \"i\"); map.put(\"i\", \"j\"); map.put(\"i\", \"j\"); map.put(\"i\", \"j\"); map.put(\"i\", \"j\"); map.put(\"i\", \"j\"); map.put(\"i\", \"j\"); map.put(\"j\", \"j\"); map.put(\"j\", \"j\"); map.put(\"j\", \"j\"); map.put(\"j\", \"j\"); map.put(\"j\", \"j\"); map.put(\"j\", \"j\"); map.put(\"j\", \"j\"); map.put(\"j\", \"j\"); map.put(\"j\", \"j\"); map.put(\"j\", \"j\"); map.put(\"j\", \"j\"); map.put(\"j\", \"j\"); map.put(\"j\", \"j\"); map.put(\"j\", \"j\"); map.put(\"j\", \"j\"); map.put(\"j\", \"j\"); map.put(\"j\", \"j\"); map.put(\""
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/lang/tree/TreeTest###walkTest",
        "generated_path": "TreeTest###walkTest.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void testWalk() { }\n"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/io/FileUtilTest###getWebRootTest",
        "generated_path": "FileUtilTest###getWebRootTest.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void testGetWebRoot() throws Exception { }\n"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/ObjectUtilTest###toStringTest",
        "generated_path": "ObjectUtilTest###toStringTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testToString() { Assert.assertEquals(null, ObjectUtil.toString(null)); Assert.assertEquals(null, ObjectUtil.toString(null)); Assert.assertEquals(null, ObjectUtil.toString(null)); Assert.assertEquals(null, ObjectUtil.toString(null)); Assert.assertEquals(null, ObjectUtil.toString(null)); Assert.assertEquals(null, ObjectUtil.toString(null)); Assert.assertEquals(null, ObjectUtil.toString(null)); Assert.assertEquals(null, ObjectUtil.toString(null)); Assert.assertEquals(null, ObjectUtil.toString(null)); Assert.assertEquals(null, ObjectUtil.toString(null)); Assert.assertEquals(null, ObjectUtil.toString(null)); Assert.assertEquals(null, ObjectUtil.toString(null)); Assert.assertEquals(null, ObjectUtil.toString(null)); Assert.assertEquals(null, ObjectUtil.toString(null)); Assert.assertEquals(null, ObjectUtil.toString(null)); Assert.assertEquals(null, ObjectUtil.toString(null)); Assert.assertEquals(null, ObjectUtil.toString(null)); Assert.assertEquals(null, ObjectUtil.toString(null)); Assert.assertEquals(null, ObjectUtil.toString(null)); Assert.assertEquals(null, ObjectUtil.toString(null)); Assert.assertEquals(null, ObjectUtil.toString(null)); Assert.assertEquals(null, ObjectUtil.toString(null)); Assert."
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-extra/src/test/java/cn/hutool/extra/ssh/SftpTest###delDirTest",
        "generated_path": "SftpTest###delDirTest.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void delDir() throws Exception { }\n"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/net/NetUtilTest###isUsableLocalPortTest",
        "generated_path": "NetUtilTest###isUsableLocalPortTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testIsUsableLocalPort() throws Exception { assertTrue(NetUtil.isUsableLocalPort(0)); assertTrue(NetUtil.isUsableLocalPort(1)); assertTrue(NetUtil.isUsableLocalPort(2)); assertTrue(NetUtil.isUsableLocalPort(3)); assertTrue(NetUtil.isUsableLocalPort(4)); assertTrue(NetUtil.isUsableLocalPort(5)); assertTrue(NetUtil.isUsableLocalPort(6)); assertTrue(NetUtil.isUsableLocalPort(7)); assertTrue(NetUtil.isUsableLocalPort(8)); assertTrue(NetUtil.isUsableLocalPort(9)); assertTrue(NetUtil.isUsableLocalPort(10)); assertTrue(NetUtil.isUsableLocalPort(10)); assertTrue(NetUtil.isUsableLocalPort(10)); assertTrue(NetUtil.isUsableLocalPort(10)); assertTrue(NetUtil.isUsableLocalPort(10)); assertTrue(NetUtil.isUsableLocalPort(10)); assertTrue(NetUtil.isUsableLocalPort(10)); assertTrue(NetUtil.isUsableLocalPort(10)); assertTrue(NetUtil.isUsableLocalPort(10)); assertTrue(NetUtil.isUsableLocalPort(10)); assertTrue(NetUtil.isUsableLocalPort(10)); assertTrue(NetUtil.isUsableLocalPort(10)); assertTrue(NetUtil.isUsableLocalPort(10)); assertTrue(NetUtil."
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/img/ImgUtilTest###convertTest",
        "generated_path": "ImgUtilTest###convertTest.java",
        "Compile_result": 1,
        "Test_result": 0,
        "Gen_Test": "@Test public void testScaleImage() throws Exception { System.out.println(\"testScaleImage\"); File srcImageFile = new File(getClass().getResource(\"/testScaleImage.jpg\").toURI()); File destImageFile = new File(getClass().getResource(\"/testScaleImage.png\").toURI()); ImgUtil.convert(srcImageFile, destImageFile); }\n"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/collection/RingIndexUtilTest###ringNextIntByObjTest",
        "generated_path": "RingIndexUtilTest###ringNextIntByObjTest.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test(expected = IllegalArgumentException.class) public void testRingNextIntByObjNull() { RingIndexUtil.ringNextIntByObj(null, new AtomicInteger()); }\n"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/ClassUtilTest###getShortClassNameTest",
        "generated_path": "ClassUtilTest###getShortClassNameTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetShortClassName() throws Exception { String className = \"org.apache.cxf.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util.util"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/ReUtilTest###findAllTest",
        "generated_path": "ReUtilTest###findAllTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testFindAll() { System.out.println(\"findAll\"); Pattern pattern = Pattern.compile(\"\\\\\\\\d+\\\\\\\\d+\\\\\\\\d+\\\\\\\\d+\\\\\\\\d+\\\\\\\\d+\\\\\\\\d+\\\\\\\\d+\\\\\\\\d+\\\\\\\\d+\\\\\\\\d+\\\\\\\\d+\\\\\\\\d+\\\\\\\\d+\\\\\\\\d+\\\\\\\\d+\\\\\\\\d+\\\\\\\\d+\\\\\\\\d+\\\\\\\\d+\\\\\\\\d+\\\\\\\\d+\\\\\\\\d+\\\\\\\\d+\\\\\\\\d+\\\\\\\\d+\\\\\\\\d+\\\\\\\\d+\\\\\\\\d+\\\\\\\\d+\\\\\\\\d+\\\\\\\\d+\\\\\\\\d+\\\\\\\\d+\\\\\\\\d+\\\\\\\\d+\\\\\\\\d+\\\\\\\\d+\\\\\\\\d+\\\\\\\\d+\\\\\\\\d+\\\\\\\\d+\\\\\\\\d+\\\\\\\\d+\\\\\\\\d+\\\\\\\\d+\\\\\\\\d+\\\\\\\\d+\\\\\\\\d+\\\\\\\\d+\\\\\\\\d+\\\\\\\\d+\\\\\\\\d+\\\\\\\\d+\\\\\\\\d+\\\\\\\\d+\\\\\\\\d+\\\\\\\\d+\\\\\\\\d+\\\\\\\\d+\\\\\\\\d+\\\\\\\\d+\\\\\\\\d+\\\\\\\\d+\\\\\\\\d+\\\\\\\\d+\\\\\\\\d+\\\\\\\\d+\\\\\\\\d+\\\\\\\\d+\\\\\\\\d+\\\\\\\\d+\\\\\\\\d+\\\\\\\\d+\\\\\\\\d+\\\\\\\\d+\\\\\\\\d+\\\\\\\\d+\\\\\\\\d+\\\\\\\\d+\\\\\\\\d+\\\\\\\\d+\\\\\\\\d+\\\\\\\\d+\\\\\\\\d+\\\\\\\\d+\\\\\\\\d+\\\\\\\\d+\\\\\\\\d+\\\\\\\\d+\\\\\\\\d+\\\\\\\\d+\\\\\\\\d+\\\\\\\\d+\\\\\\\\d+\\\\\\\\d+\\\\\\\\d+\\\\\\\\d"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/convert/NumberChineseFormatterTest###chineseToNumberTest",
        "generated_path": "NumberChineseFormatterTest###chineseToNumberTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testChineseToNumber() { assertEquals(0, NumberChineseFormatter.chineseToNumber('\u4e24')); assertEquals(0, NumberChineseFormatter.chineseToNumber('\u4e24')); assertEquals(0, NumberChineseFormatter.chineseToNumber('\u4e24')); assertEquals(0, NumberChineseFormatter.chineseToNumber('\u4e24')); assertEquals(0, NumberChineseFormatter.chineseToNumber('\u4e24')); assertEquals(0, NumberChineseFormatter.chineseToNumber('\u4e24')); assertEquals(0, NumberChineseFormatter.chineseToNumber('\u4e24')); assertEquals(0, NumberChineseFormatter.chineseToNumber('\u4e24')); assertEquals(0, NumberChineseFormatter.chineseToNumber('\u4e24')); assertEquals(0, NumberChineseFormatter.chineseToNumber('\u4e24')); assertEquals(0, NumberChineseFormatter.chineseToNumber('\u4e24')); assertEquals(0, NumberChineseFormatter.chineseToNumber('\u4e24')); assertEquals(0, NumberChineseFormatter.chineseToNumber('\u4e24')); assertEquals(0, NumberChineseFormatter.chineseToNumber('\u4e24')); assertEquals(0, NumberChineseFormatter.chineseToNumber('\u4e24')); assertEquals(0, NumberCh"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-extra/src/test/java/cn/hutool/extra/servlet/ServletUtilTest###writeTest",
        "generated_path": "ServletUtilTest###writeTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testWriteInputStream() throws Exception { InputStream in = new ByteArrayInputStream(\"test\".getBytes()); ServletUtil.write(response, in, \"text/plain\"); assertEquals(\"test\", response.getHeader(\"Content-Disposition\")); assertEquals(\"attachment;filename=test.txt;filename*=UTF-8\", response.getHeader(\"Content-Disposition\")); }\n"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/lang/tree/TreeTest###cloneTreeTest",
        "generated_path": "TreeTest###cloneTreeTest.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void testCloneTree() { }\n"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/ClassUtilTest###getClassNameTest",
        "generated_path": "ClassUtilTest###getClassNameTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetClassName() throws Exception { assertEquals(\"java.lang.String\", ClassUtil.getClassName(null, false)); assertEquals(\"java.lang.Integer\", ClassUtil.getClassName(Integer.class, false)); assertEquals(\"java.lang.Integer\", ClassUtil.getClassName(Integer.class, false)); assertEquals(\"java.lang.Integer\", ClassUtil.getClassName(Integer.class, false)); assertEquals(\"java.lang.Integer\", ClassUtil.getClassName(Integer.class, false)); assertEquals(\"java.lang.Integer\", ClassUtil.getClassName(Integer.class, false)); assertEquals(\"java.lang.Integer\", ClassUtil.getClassName(Integer.class, false)); assertEquals(\"java.lang.Integer\", ClassUtil.getClassName(Integer.class, false)); assertEquals(\"java.lang.Integer\", ClassUtil.getClassName(Integer.class, false)); assertEquals(\"java.lang.Integer\", ClassUtil.getClassName(Integer.class, false)); assertEquals(\"java.lang.Integer\", ClassUtil.getClassName(Integer.class, false)); assertEquals(\"java.lang.Integer\", ClassUtil.getClassName(Integer.class, false)); assertEquals(\"java.lang.Integer\", ClassUtil.getClassName(Integer.class, false)); assertEquals(\"java.lang.Integer\", ClassUtil.getClassName(Integer.class, false)); assertEquals(\"java.lang.Integer\", ClassUtil.getClassName("
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/convert/NumberChineseFormatterTest###formatSimpleTest",
        "generated_path": "NumberChineseFormatterTest###formatSimpleTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testFormatSimple() { assertEquals(\"\u4e07\", NumberChineseFormatter.formatSimple(1)); assertEquals(\"\u4e07\u4ebf\", NumberChineseFormatter.formatSimple(1)); assertEquals(\"\u4e07\u4ebf\", NumberChineseFormatter.formatSimple(1)); assertEquals(\"\u4e07\u4ebf\", NumberChineseFormatter.formatSimple(-1)); assertEquals(\"\u4e07\u4ebf\", NumberChineseFormatter.formatSimple(-1)); assertEquals(\"\u4e07\u4ebf\", NumberChineseFormatter.formatSimple(-1)); assertEquals(\"\u4e07\u4ebf\", NumberChineseFormatter.formatSimple(-1)); assertEquals(\"\u4e07\u4ebf\", NumberChineseFormatter.formatSimple(-1)); assertEquals(\"\u4e07\u4ebf\", NumberChineseFormatter.formatSimple(-1)); assertEquals(\"\u4e07\u4ebf\", NumberChineseFormatter.formatSimple(-1)); assertEquals(\"\u4e07\u4ebf\", NumberChineseFormatter.formatSimple(-1)); assertEquals(\"\u4e07\u4ebf\", NumberChineseFormatter.formatSimple(-1)); assertEquals(\"\u4e07\u4ebf\", NumberChineseFormatter.formatSimple(-1)); assertEquals(\"\u4e07\u4ebf\", NumberChineseFormatter.formatSimple(-1)); assertEquals(\"\u4e07\u4ebf\", NumberChineseFormatter.formatSimple(-1)); assertEquals(\"\u4e07\u4ebf\", NumberCh"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/collection/CollUtilTest###emptyTest",
        "generated_path": "CollUtilTest###emptyTest.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void testEmpty() { }\n"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/NumberUtilTest###parseDoubleTest",
        "generated_path": "NumberUtilTest###parseDoubleTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testParseDouble() { try { NumberUtil.parseDouble(null, null); fail(\"Expected IllegalArgumentException\"); } catch (IllegalArgumentException e) { } try { NumberUtil.parseDouble(\"\", null); fail(\"Expected IllegalArgumentException\"); } catch (IllegalArgumentException e) { } try { NumberUtil.parseDouble(\"\", null); fail(\"Expected IllegalArgumentException\"); } catch (IllegalArgumentException e) { } try { NumberUtil.parseDouble(\"\", Double.NaN); fail(\"Expected IllegalArgumentException\"); } catch (IllegalArgumentException e) { } try { NumberUtil.parseDouble(\"\", Double.NaN); fail(\"Expected IllegalArgumentException\"); } catch (IllegalArgumentException e) { } try { NumberUtil.parseDouble(\"\", Double.NaN); fail(\"Expected IllegalArgumentException\"); } catch (IllegalArgumentException e) { } try { NumberUtil.parseDouble(\"\", Double.NaN); fail(\"Expected IllegalArgumentException\"); } catch (IllegalArgumentException e) { } try { NumberUtil.parseDouble(\"\", Double.NaN); fail(\"Expected IllegalArgumentException\"); } catch (IllegalArgumentException e) { } try { NumberUtil.parseDouble(\"\", Double.NaN); fail(\"Expected IllegalArgumentException\"); } catch (IllegalArgumentException e) { } try { NumberUtil.parseDouble(\"\", Double.NaN); fail(\"Expected IllegalArgumentException\"); } catch (IllegalArgumentException e) { } try { NumberUtil.parseDouble(\"\", Double.NaN); fail(\"Expected IllegalArgumentException\"); } catch (IllegalArgumentException e) { } try { NumberUtil.parseDouble(\"\", Double.NaN); fail(\"Expected IllegalArgumentException\"); } catch (IllegalArgumentException e) { } }\n"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/lang/OptTest###peekTest",
        "generated_path": "OptTest###peekTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void peek() throws Exception { try { Opt<String> opt = Opt.of(\"hello\"); opt.peek(new Consumer<String>() { @Override public void accept(String value) { } }); } catch (NullPointerException e) { e.printStackTrace(); } }\n"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/collection/ListUtilTest###pageTest",
        "generated_path": "ListUtilTest###pageTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testPage() { List<Integer> list = new ArrayList<Integer>(); list.add(1); list.add(2); list.add(3); list.add(4); list.add(5); list.add(6); list.add(7); list.add(8); list.add(9); list.add(10); list.add(11); list.add(12); list.add(13); list.add(12); list.add(12); list.add(13); list.add(13); list.add(13); list.add(13); list.add(13); list.add(13); list.add(13); list.add(13); list.add(13); list.add(13); list.add(13); list.add(13); list.add(13); list.add(13); list.add(13); list.add(13); list.add(13); list.add(13); list.add(13); list.add(13); list.add(13); list.add(13); list.add(13); list.add(13); list.add(13); list.add(13); list.add(13); list.add(13); list.add(13); list.add(13); list.add(13); list.add(13); list.add(13); list.add(13); list.add("
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/io/FileUtilTest###isSubTest",
        "generated_path": "FileUtilTest###isSubTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testIsSub() throws Exception { File parent = new File(\"test\"); File sub = new File(\"test\"); Assert.assertTrue(FileUtil.isSub(parent, sub)); Assert.assertTrue(FileUtil.isSub(parent, sub)); Assert.assertTrue(FileUtil.isSub(parent, sub)); Assert.assertTrue(FileUtil.isSub(parent, sub)); Assert.assertTrue(FileUtil.isSub(parent, sub)); Assert.assertTrue(FileUtil.isSub(parent, sub)); Assert.assertTrue(FileUtil.isSub(parent, sub)); Assert.assertTrue(FileUtil.isSub(parent, sub)); Assert.assertTrue(FileUtil.isSub(parent, sub)); Assert.assertTrue(FileUtil.isSub(parent, sub)); Assert.assertTrue(FileUtil.isSub(parent, sub)); Assert.assertTrue(FileUtil.isSub(parent, sub)); Assert.assertTrue(FileUtil.isSub(parent, sub)); Assert.assertTrue(FileUtil.isSub(parent, sub)); Assert.assertTrue(FileUtil.isSub(parent, sub)); Assert.assertTrue(FileUtil.isSub(parent, sub)); Assert.assertTrue(FileUtil.isSub(parent, sub)); Assert.assertTrue(FileUtil.isSub(parent, sub)); Assert.assertTrue(FileUtil.isSub(parent, sub)); Assert.assertTrue(File"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/DesensitizedUtilTest###idCardNumTest",
        "generated_path": "DesensitizedUtilTest###idCardNumTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testIdCardNum() { assertEquals(\"\", DesensitizedUtil.idCardNum(\"\", 0, 0)); assertEquals(\"\", DesensitizedUtil.idCardNum(\"\", 0, 0)); assertEquals(\"\", DesensitizedUtil.idCardNum(\"\", 0, 0)); assertEquals(\"\", DesensitizedUtil.idCardNum(\"\", 0, 0)); assertEquals(\"\", DesensitizedUtil.idCardNum(\"\", 0, 0)); assertEquals(\"\", DesensitizedUtil.idCardNum(\"\", 0, 0)); assertEquals(\"\", DesensitizedUtil.idCardNum(\"\", 0, 0)); assertEquals(\"\", DesensitizedUtil.idCardNum(\"\", 0, 0)); assertEquals(\"\", DesensitizedUtil.idCardNum(\"\", 0, 0)); assertEquals(\"\", DesensitizedUtil.idCardNum(\"\", 0, 0)); assertEquals(\"\", DesensitizedUtil.idCardNum(\"\", 0, 0)); assertEquals(\"\", DesensitizedUtil.idCardNum(\"\", 0, 0)); assertEquals(\"\", DesensitizedUtil.idCardNum(\"\", 0, 0)); assertEquals(\"\", DesensitizedUtil.idCardNum(\"\", 0, 0)); assertEquals(\"\", DesensitizedUtil.idCardNum(\"\", 0, 0)); assertEquals(\"\", DesensitizedUtil.idCardNum(\"\", 0, 0)); }\n"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/io/FileUtilTest###listFileNamesTest",
        "generated_path": "FileUtilTest###listFileNamesTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testListFileNames() throws Exception { List<String> names = FileUtil.listFileNames(\"src/test/resources/test.txt\"); assertEquals(1, names.size()); assertTrue(names.get(0) == \"src/test/resources/test.txt\"); assertTrue(names.get(1) == \"src/test/resources/test.txt\"); assertTrue(names.get(2) == \"src/test/resources/test.txt\"); assertTrue(names.get(3) == \"src/test/resources/test.txt\"); assertTrue(names.get(4) == \"src/test/resources/test.txt\"); assertTrue(names.get(5) == \"src/test/resources/test.txt\"); assertTrue(names.get(6) == \"src/test/resources/test.txt\"); assertTrue(names.get(7) == \"src/test/resources/test.txt\"); assertTrue(names.get(8) == \"src/test/resources/test.txt\"); assertTrue(names.get(9) == \"src/test/resources/test.txt\"); assertTrue(names.get(10) == \"src/test/resources/test.txt\"); assertTrue(names.get(11) == \"src/test/resources/test.txt\"); assertTrue(names.get(12) == \"src/test/resources/test.txt\"); assert"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/DesensitizedUtilTest###carLicenseTest",
        "generated_path": "DesensitizedUtilTest###carLicenseTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testCarLicense() { assertEquals(\"\", DesensitizedUtil.carLicense(null)); assertEquals(\"\", DesensitizedUtil.carLicense(\"\")); assertEquals(\"\", DesensitizedUtil.carLicense(\" \")); assertEquals(\"\", DesensitizedUtil.carLicense(\" \")); assertEquals(\"\", DesensitizedUtil.carLicense(\" \")); assertEquals(\"\", DesensitizedUtil.carLicense(\" \")); assertEquals(\"\", DesensitizedUtil.carLicense(\" \")); assertEquals(\"\", DesensitizedUtil.carLicense(\" \")); assertEquals(\"\", DesensitizedUtil.carLicense(\" \")); assertEquals(\"\", DesensitizedUtil.carLicense(\" \")); assertEquals(\"\", DesensitizedUtil.carLicense(\" \")); assertEquals(\"\", DesensitizedUtil.carLicense(\" \")); assertEquals(\"\", DesensitizedUtil.carLicense(\" \")); assertEquals(\"\", DesensitizedUtil.carLicense(\" \")); assertEquals(\"\", DesensitizedUtil.carLicense(\" \")); assertEquals(\"\", DesensitizedUtil.carLicense(\" \")); assertEquals(\"\", DesensitizedUtil.carLicense(\" \")); assertEquals(\"\", DesensitizedUtil.carLicense(\" \")); assertEquals(\"\", DesensitizedUtil.carLicense(\" \")); assertEquals(\"\", DesensitizedUtil.carLicense(\" \")); assertEquals(\"\", DesensitizedUtil"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/text/finder/CharFinderTest###startTest",
        "generated_path": "CharFinderTest###startTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test(expected = IllegalArgumentException.class) public void testStartWithNullText() { new CharFinder(null).start(0); }\n"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/img/ImgTest###roundTest",
        "generated_path": "ImgTest###roundTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testRound() throws Exception { Img img = Img.from(new BufferedImage(100, 100, BufferedImage.TYPE_INT_ARGB)); assertEquals(100, img.getWidth()); assertEquals(100, img.getHeight()); img = Img.from(new BufferedImage(100, 100, BufferedImage.TYPE_INT_ARGB)); assertEquals(100, img.getWidth()); assertEquals(100, img.getHeight()); img = Img.from(new BufferedImage(100, 100, BufferedImage.TYPE_INT_ARGB)); assertEquals(100, img.getWidth()); assertEquals(100, img.getHeight()); img = Img.from(new BufferedImage(100, 100, BufferedImage.TYPE_INT_ARGB)); assertEquals(100, img.getWidth()); assertEquals(100, img.getHeight()); img = Img.from(new BufferedImage(100, 100, BufferedImage.TYPE_INT_ARGB)); assertEquals(100, img.getWidth()); assertEquals(100, img.getHeight()); img = Img.from(new BufferedImage(100, 100, BufferedImage.TYPE_INT_ARGB)); assertEquals(100, img.getWidth()); assertEquals(100, img.getHeight()); img = Img.from(new BufferedImage(100, 100, BufferedImage.TYPE_INT_ARGB)); assertEquals(100, img.getHeight()); }\n"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/text/StrBuilderTest###delTest",
        "generated_path": "StrBuilderTest###delTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void del() { StrBuilder sb = StrBuilder.create(); sb.del(0, 0); assertEquals(\"\", sb.toString()); }\n"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/RandomUtilTest###randomEleSetTest",
        "generated_path": "RandomUtilTest###randomEleSetTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test(expected = IllegalArgumentException.class) public void testRandomEleSet() { RandomUtil.randomEleSet(new ArrayList<String>(), 1); }\n"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/StrUtilTest###trimTest",
        "generated_path": "StrUtilTest###trimTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testTrim() { String[] strs = new String[]{\"a\", \"b\", \"c\"}; StrUtil.trim(strs); assertEquals(\"a\", strs[0]); assertEquals(\"b\", strs[1]); assertEquals(\"c\", strs[2]); }\n"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-db/src/test/java/cn/hutool/db/dialect/DriverUtilTest###identifyDriverTest",
        "generated_path": "DriverUtilTest###identifyDriverTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testIdentifyDriverDataSource() throws Exception { DataSource ds = new DataSource(); ds.setDriverName(\"test\"); ds.setDatabaseProductName(\"test\"); ds.setDatabaseVersion(\"1.0\"); ds.setDatabaseProductName(\"test\"); ds.setDatabaseProductVersion(\"1.0\"); ds.setDatabaseProductVersion(\"1.0\"); ds.setDatabaseProductVersion(\"1.0\"); ds.setDatabaseProductVersion(\"1.0\"); ds.setDatabaseVersion(\"1.0\"); ds.setDatabaseProductVersion(\"1.0\"); ds.setDatabaseProductVersion(\"1.0\"); ds.setDatabaseProductVersion(\"1.0\"); ds.setDatabaseProductVersion(\"1.0\"); ds.setDatabaseVersion(\"1.0\"); ds.setDatabaseProductVersion(\"1.0\"); ds.setDatabaseProductVersion(\"1.0\"); ds.setDatabaseProductVersion(\"1.0\"); ds.setDatabaseProductVersion(\"1.0\"); ds.setDatabaseVersion(\"1.0\"); ds.setDatabaseVersion(\"1.0\"); ds.setDatabaseVersion(\"1.0\"); ds.setDatabaseVersion(\"1.0\"); ds.setDatabaseVersion(\"1.0\"); ds.setDatabaseVersion(\"1.0\"); ds.setDatabaseVersion(\"1.0\"); ds.setDatabaseVersion(\"1.0\"); ds.setDatabaseVersion(\"1.0\"); ds.setDatabaseVersion(\"1.0\"); ds.setDatabaseVersion(\"1.0\"); ds."
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/ObjectUtilTest###lengthTest",
        "generated_path": "ObjectUtilTest###lengthTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testLength() { assertEquals(0, ObjectUtil.length(null)); assertEquals(0, ObjectUtil.length(new ArrayList<Object>())); assertEquals(0, ObjectUtil.length(new ArrayList<Object>())); assertEquals(0, ObjectUtil.length(new ArrayList<Object>())); assertEquals(0, ObjectUtil.length(new ArrayList<Object>())); assertEquals(0, ObjectUtil.length(new ArrayList<Object>())); assertEquals(0, ObjectUtil.length(new ArrayList<Object>())); assertEquals(0, ObjectUtil.length(new ArrayList<Object>())); assertEquals(0, ObjectUtil.length(new ArrayList<Object>())); assertEquals(0, ObjectUtil.length(new ArrayList<Object>())); assertEquals(0, ObjectUtil.length(new ArrayList<Object>())); assertEquals(0, ObjectUtil.length(new ArrayList<Object>())); assertEquals(0, ObjectUtil.length(new ArrayList<Object>())); assertEquals(0, ObjectUtil.length(new ArrayList<Object>())); assertEquals(0, ObjectUtil.length(new ArrayList<Object>())); assertEquals(0, ObjectUtil.length(new ArrayList<Object>())); assertEquals(0, ObjectUtil.length(new ArrayList<Object>())); assertEquals(0, ObjectUtil.length(new ArrayList<Object>())); assertEquals(0, ObjectUtil.length"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/io/file/FileNameUtilTest###mainNameTest",
        "generated_path": "FileNameUtilTest###mainNameTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testMainName() { System.out.println(\"mainName\"); String[] args = new String[] { \"test.java\", \"test.class\", \"test.class\" }; for (String[] args : args) { System.out.println(args[0]); } String[] result = new String[] { \"test.java\", \"test.class\", \"test.class\", \"test.class\", \"test.class\" }; for (String[] args : result) { System.out.println(args[1]); } for (String[] args : result) { System.out.println(args[2]); } for (String[] args : result) { System.out.println(args[3]); } for (String[] args : result) { System.out.println(args[4]); } for (String[] args : result) { System.out.println(args[5]); } for (String[] args : result) { System.out.println(args[6]); } for (String[] args : result) { System.out.println(args[7]); } for (String[] args : result) { System.out.println(args[8]); } for (String[] args : result) { System.out.println(args[9]); } for (String[] args : result) { System.out.println(args[9]); } } }\n"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/map/LinkedForestMapTest###putNodeTest",
        "generated_path": "LinkedForestMapTest###putNodeTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testPutNode() { final LinkedForestMap<String, String> map = new LinkedForestMap<>(true); map.putNode(\"key\", \"value\"); map.putNode(\"key\", \"value\"); map.putNode(\"key\", \"value\"); map.putNode(\"key\", \"value\"); map.putNode(\"key\", \"value\"); map.putNode(\"key\", \"value\"); map.putNode(\"key\", \"value\"); map.putNode(\"key\", \"value\"); map.putNode(\"key\", \"value\"); map.putNode(\"key\", \"value\"); map.putNode(\"key\", \"value\"); map.putNode(\"key\", \"value\"); map.putNode(\"key\", \"value\"); map.putNode(\"key\", \"value\"); map.putNode(\"key\", \"value\"); map.putNode(\"key\", \"value\"); map.putNode(\"key\", \"value\"); map.putNode(\"key\", \"value\"); map.putNode(\"key\", \"value\"); map.putNode(\"key\", \"value\"); map.putNode(\"key\", \"value\"); map.putNode(\"key\", \"value\"); map.putNode(\"key\", \"value\"); map.putNode(\"key\", \"value\"); map.putNode(\"key\", \"value\"); map.putNode(\"key\", \"value\"); map.putNode(\"key\", \"value\"); map.putNode(\"key\", \"value\"); map.putNode(\"key\", \""
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/CoordinateUtilTest###bd09toGcj02Test",
        "generated_path": "CoordinateUtilTest###bd09toGcj02Test.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void bd09ToGcj02() { System.out.println(\"bd09ToGcj02\"); double lng = 0.0065; double lat = 0.006; Coordinate gg = CoordinateUtil.bd09ToGcj02(lng, lat); System.out.println(\"gg_lng = \" + gg.getLng()); System.out.println(\"gg_lat = \" + gg.getLat()); System.out.println(\"gg_lat = \" + gg.getLng()); System.out.println(\"gg_lng = \" + gg.getLng()); System.out.println(\"gg_lat = \" + gg.getLat()); System.out.println(\"gg_lng = \" + gg.getLng()); System.out.println(\"gg_lat = \" + gg.getLat()); System.out.println(\"gg_lng = \" + gg.getLng()); System.out.println(\"gg_lat = \" + gg.getLat()); System.out.println(\"gg_lng = \" + gg.getLng()); System.out.println(\"gg_lat = \" + gg.getLat()); System.out.println(\"gg_lng = \" + gg.getLng()); System.out.println(\"gg_lat = \" + gg.getLat()); System.out.println(\"gg_lng = \" + gg.getLng()); System.out.println(\"gg_lat = \" + gg.getLat()); System."
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/ReUtilTest###delLastTest",
        "generated_path": "ReUtilTest###delLastTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testDelLast() { System.out.println(\"delLast\"); String regex = null; String content = \"\"; String expResult = \"\"; String result = ReUtil.delLast(regex, content); assertEquals(expResult, result); expResult = \"\"; result = ReUtil.delLast(regex, content); assertEquals(expResult, result); expResult = \"\"; result = ReUtil.delLast(regex, content); assertEquals(expResult, result); expResult = \"\"; result = ReUtil.delLast(regex, content); assertEquals(expResult, result); expResult = \"\"; result = ReUtil.delLast(regex, content); assertEquals(expResult, result); expResult = \"\"; result = ReUtil.delLast(regex, content); assertEquals(expResult, result); expResult = \"\"; result = ReUtil.delLast(regex, content); assertEquals(expResult, result); expResult = \"\"; result = ReUtil.delLast(regex, content); assertEquals(expResult, result); expResult = \"\"; result = ReUtil.delLast(regex, content); assertEquals(expResult, result); expResult = \"\"; result = ReUtil.delLast(regex, content); assertEquals(expResult, result); expResult = \"\"; result = ReUtil.delLast(regex, content); assertEquals(expResult, result); }\n"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/map/TableMapTest###getTest",
        "generated_path": "TableMapTest###getTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGet() { TableMap<String, String> TableMap = new TableMap<String, String>(); assertNull( TableMap.get(\"a\")); assertNull( TableMap.get(\"b\")); assertNull( TableMap.get(\"c\")); assertNull( TableMap.get(\"d\")); assertNull( TableMap.get(\"e\")); assertNull( TableMap.get(\"f\")); assertNull( TableMap.get(\"g\")); assertNull( TableMap.get(\"g\")); assertNull( TableMap.get(\"g\")); assertNull( TableMap.get(\"g\")); assertNull( TableMap.get(\"g\")); assertNull( TableMap.get(\"g\")); assertNull( TableMap.get(\"g\")); assertNull( TableMap.get(\"g\")); assertNull( TableMap.get(\"g\")); assertNull( TableMap.get(\"g\")); assertNull( TableMap.get(\"g\")); assertNull( TableMap.get(\"g\")); assertNull( TableMap.get(\"g\")); assertNull( TableMap.get(\"g\")); assertNull( TableMap.get(\"g\")); assertNull( TableMap.get(\"g\")); assertNull( TableMap.get(\"g\")); assertNull( TableMap.get(\"g\")); assertNull( TableMap.get(\"g\")); assertNull( TableMap.get(\"g\")); assertNull( TableMap.get(\"g\")); }\n"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/io/BufferUtilTest###readLineTest",
        "generated_path": "BufferUtilTest###readLineTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testReadLine() { System.out.println(\"readLine\"); ByteBuffer buffer = ByteBuffer.allocate(10); buffer.position(10); buffer.limit(10); String result = BufferUtil.readLine(buffer, Charset.forName(\"UTF-8\")); System.out.println(result); }\n"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-setting/src/test/java/cn/hutool/setting/SettingTest###storeTest",
        "generated_path": "SettingTest###storeTest.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void testStore() { }\n"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/net/NetUtilTest###getDnsInfoTest",
        "generated_path": "NetUtilTest###getDnsInfoTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetDnsInfo() throws Exception { List<String> infos = NetUtil.getDnsInfo(\"test.com\", \"test.com\", \"test.com\", \"test.com\", \"test.com\", \"test.com\", \"test.com\", \"test.com\", \"test.com\", \"test.com\", \"test.com\", \"test.com\", \"test.com\", \"test.com\", \"test.com\", \"test.com\", \"test.com\", \"test.com\", \"test.com\", \"test.com\", \"test.com\", \"test.com\", \"test.com\", \"test.com\", \"test.com\", \"test.com\", \"test.com\", \"test.com\", \"test.com\", \"test.com\", \"test.com\", \"test.com\", \"test.com\", \"test.com\", \"test.com\", \"test.com\", \"test.com\", \"test.com\", \"test.com\", \"test.com\", \"test.com\", \"test.com\", \"test.com\", \"test.com\", \"test.com\", \"test.com\", \"test.com\", \"test.com\", \"test.com\", \"test.com\", \"test.com\", \"test.com\", \"test.com\", \"test.com\", \"test.com\", \"test.com\", \"test.com\", \"test.com\", \"test.com"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/text/StrBuilderTest###insertTest",
        "generated_path": "StrBuilderTest###insertTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testInsert() { StrBuilder sb = StrBuilder.create(); sb.insert(0, \"a\"); sb.insert(1, \"b\"); sb.insert(2, \"c\"); sb.insert(3, \"d\"); sb.insert(4, \"e\"); sb.insert(5, \"f\"); sb.insert(6, \"g\"); sb.insert(7, \"g\"); sb.insert(8, \"g\"); sb.insert(9, \"g\"); sb.insert(10, \"g\"); sb.insert(11, \"g\"); sb.insert(12, \"g\"); sb.insert(13, \"g\"); sb.insert(14, \"g\"); sb.insert(14, \"g\"); sb.insert(14, \"g\"); sb.insert(14, \"g\"); sb.insert(14, \"g\"); sb.insert(14, \"g\"); sb.insert(14, \"g\"); sb.insert(14, \"g\"); sb.insert(14, \"g\"); sb.insert(14, \"g\"); sb.insert(14, \"g\"); sb.insert(14, \"g\"); sb.insert(14, \"g\"); sb.insert(14, \"g\"); sb.insert(14, \"g\"); sb.insert(14, \"g\"); sb.insert(14, \"g\"); sb.insert(14, \"g\"); sb.insert(14, \"g\"); sb.insert("
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-extra/src/test/java/cn/hutool/extra/ftp/FtpTest###downloadTest",
        "generated_path": "FtpTest###downloadTest.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void testDownload() throws Exception { }\n"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-db/src/test/java/cn/hutool/db/sql/SqlBuilderTest###orderByTest",
        "generated_path": "SqlBuilderTest###orderByTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void orderBy() { SqlBuilder sb = SqlBuilder.create(); sb.orderBy(new Order(\"field\", Order.Direction.ASC)); Assert.assertEquals(\"ORDER BY field\", sb.build()); }\n"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/RuntimeUtilTest###getProcessorCountTest",
        "generated_path": "RuntimeUtilTest###getProcessorCountTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetProcessorCount() throws Exception { int cpu = Runtime.getRuntime().availableProcessors(); assertEquals(cpu, RuntimeUtil.getProcessorCount()); }\n"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/convert/NumberChineseFormatterTest###formatTest",
        "generated_path": "NumberChineseFormatterTest###formatTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testFormat() { assertEquals(\"\u96f6\", NumberChineseFormatter.format(0, false)); assertEquals(\"\u96f6\", NumberChineseFormatter.format(0, false)); assertEquals(\"\u96f6\", NumberChineseFormatter.format(0, false)); assertEquals(\"\u96f6\", NumberChineseFormatter.format(0, false)); assertEquals(\"\u96f6\", NumberChineseFormatter.format(0, false)); assertEquals(\"\u96f6\", NumberChineseFormatter.format(0, false)); assertEquals(\"\u96f6\", NumberChineseFormatter.format(0, false)); assertEquals(\"\u96f6\", NumberChineseFormatter.format(0, false)); assertEquals(\"\u96f6\", NumberChineseFormatter.format(0, false)); assertEquals(\"\u96f6\", NumberChineseFormatter.format(0, false)); assertEquals(\"\u96f6\", NumberChineseFormatter.format(0, false)); assertEquals(\"\u96f6\", NumberChineseFormatter.format(0, false)); assertEquals(\"\u96f6\", NumberChineseFormatter.format(0, false)); assertEquals(\"\u96f6\", NumberChineseFormatter.format(0, false)); assertEquals(\"\u96f6\", NumberChineseFormatter.format(0, false)); assertEquals(\"\u96f6\", NumberChineseFormatter.format(0, false)); assertEquals(\"\u96f6\", NumberChineseFormatter.format(0, false)); assertEquals(\"\ufffd"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/EnumUtilTest###getFieldByTest",
        "generated_path": "EnumUtilTest###getFieldByTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test(expected = IllegalArgumentException.class) public void testGetFieldByNull() { EnumUtil.getFieldBy(null, (e, value) -> null, value); }\n"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/XmlUtilTest###xmlToBeanTest",
        "generated_path": "XmlUtilTest###xmlToBeanTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testXmlToBean() throws Exception { Map<String, Object> map = new HashMap<String, Object>(); map.put(\"a\", \"1\"); map.put(\"b\", \"2\"); map.put(\"c\", \"3\"); map.put(\"d\", \"4\"); map.put(\"e\", \"5\"); map.put(\"f\", \"6\"); map.put(\"g\", \"7\"); map.put(\"h\", \"8\"); map.put(\"i\", \"9\"); map.put(\"j\", \"10\"); map.put(\"k\", \"12\"); map.put(\"j\", \"13\"); map.put(\"k2\", \"12\"); map.put(\"k3\", \"13\"); map.put(\"k4\", \"14\"); map.put(\"k5\", \"14\"); map.put(\"k6\", \"14\"); map.put(\"k7\", \"14\"); map.put(\"k8\", \"14\"); map.put(\"k9\", \"14\"); map.put(\"k8\", \"14\"); map.put(\"k8\", \"14\"); map.put(\"k8\", \"14\"); map.put(\"k8\", \"14\"); map.put(\"k8\", \"14\"); map.put(\"k8\", \"14\"); map.put(\"k8\", \"14\"); map.put(\"k8\", \"14\"); map.put(\"k8\", \"14\"); map.put(\"k8\", \"14\"); map."
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-http/src/test/java/cn/hutool/http/HttpUtilTest###normalizeParamsTest",
        "generated_path": "HttpUtilTest###normalizeParamsTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testNormalizeParams() { assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/text/CharSequenceUtilTest###commonSuffixTest",
        "generated_path": "CharSequenceUtilTest###commonSuffixTest.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void testCommonSuffix() { }\n"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/ArrayUtilTest###insertTest",
        "generated_path": "ArrayUtilTest###insertTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testInsert() { Object[] array = new Object[] {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19,"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/NumberUtilTest###parseIntTest",
        "generated_path": "NumberUtilTest###parseIntTest.java",
        "Compile_result": 1,
        "Test_result": 0,
        "Gen_Test": "@Test(expected = NumberFormatException.class) public void testParseInt() throws Exception { NumberUtil.parseInt(\"1\"); }\n"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/text/TextSimilarityTest###similarTest",
        "generated_path": "TextSimilarityTest###similarTest.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void testTextSimilarity() { System.out.println(\"TextSimilarity\"); String strA = \"\"; String strB = \"\"; double res = TextSimilarity.similar(strA, strB); System.out.println(res); }\n"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/map/MapUtilTest###toObjectArrayTest",
        "generated_path": "MapUtilTest###toObjectArrayTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void toObjectArray() { Object[][] array = MapUtil.toObjectArray(null); assertNull(array); array = MapUtil.toObjectArray(new HashMap<String, String>()); assertNull(array); array = MapUtil.toObjectArray(new HashMap<String, String>()); assertNull(array); array = MapUtil.toObjectArray(new HashMap<String, String>()); assertNull(array); array = MapUtil.toObjectArray(new HashMap<String, String>()); assertNull(array); array = MapUtil.toObjectArray(new HashMap<String, String>()); assertNull(array); array = MapUtil.toObjectArray(new HashMap<String, String>()); assertNull(array); array = MapUtil.toObjectArray(new HashMap<String, String>()); assertNull(array); array = MapUtil.toObjectArray(new HashMap<String, String>()); assertNull(array); array = MapUtil.toObjectArray(new HashMap<String, String>()); assertNull(array); array = MapUtil.toObjectArray(new HashMap<String, String>()); assertNull(array); array = MapUtil.toObjectArray(new HashMap<String, String>()); assertNull(array); array = MapUtil.toObjectArray(new HashMap<String, String>()); assertNull(array); array = MapUtil.toObjectArray(new HashMap<String, String>()); assertNull(array); }\n"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-extra/src/test/java/cn/hutool/extra/spring/SpringUtilTest###registerBeanTest",
        "generated_path": "SpringUtilTest###registerBeanTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testRegisterBean() throws UtilException { SpringUtil.registerBean(\"testBean\", new TestBean()); SpringUtil.registerBean(\"testBean\", new TestBean()); SpringUtil.registerBean(\"testBean\", new TestBean()); SpringUtil.registerBean(\"testBean\", new TestBean()); SpringUtil.registerBean(\"testBean\", new TestBean()); SpringUtil.registerBean(\"testBean\", new TestBean()); SpringUtil.registerBean(\"testBean\", new TestBean()); SpringUtil.registerBean(\"testBean\", new TestBean()); SpringUtil.registerBean(\"testBean\", new TestBean()); SpringUtil.registerBean(\"testBean\", new TestBean()); SpringUtil.registerBean(\"testBean\", new TestBean()); SpringUtil.registerBean(\"testBean\", new TestBean()); SpringUtil.registerBean(\"testBean\", new TestBean()); SpringUtil.registerBean(\"testBean\", new TestBean()); SpringUtil.registerBean(\"testBean\", new TestBean()); SpringUtil.registerBean(\"testBean\", new TestBean()); SpringUtil.registerBean(\"testBean\", new TestBean()); SpringUtil.registerBean(\"testBean\", new TestBean()); SpringUtil.registerBean(\"testBean\", new TestBean()); SpringUtil.registerBean(\"testBean\", new TestBean()); SpringUtil.registerBean(\"testBean\", new TestBean()); SpringUtil.registerBean(\"testBean\", new TestBean()); SpringUtil.registerBean(\"testBean\", new TestBean()); SpringUtil.registerBean(\"test"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-json/src/test/java/cn/hutool/json/JSONStrFormatterTest###formatTest",
        "generated_path": "JSONStrFormatterTest###formatTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testFormat() throws Exception { assertEquals(\"\\\\\"\\\\\"\", JSONStrFormatter.format(\"\\\\\"\\\\\"\\\\\"\")); assertEquals(\"\\\\\"\\\\\"\", JSONStrFormatter.format(\"\\\\\"\\\\\"\\\\\"\")); assertEquals(\"\\\\\"\\\\\"\\\\\"\", JSONStrFormatter.format(\"\\\\\"\\\\\"\\\\\"\")); assertEquals(\"\\\\\"\\\\\"\\\\\"\", JSONStrFormatter.format(\"\\\\\"\\\\\"\\\\\"\")); assertEquals(\"\\\\\"\\\\\"\\\\\"\", JSONStrFormatter.format(\"\\\\\"\\\\\"\\\\\"\")); assertEquals(\"\\\\\"\\\\\"\\\\\"\\\\\"\", JSONStrFormatter.format(\"\\\\\"\\\\\"\\\\\"\")); assertEquals(\"\\\\\"\\\\\"\\\\\"\\\\\"\", JSONStrFormatter.format(\"\\\\\"\\\\\"\\\\\"\")); assertEquals
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/annotation/CacheableSynthesizedAnnotationAttributeProcessorTest###getAttributeValueTest",
        "generated_path": "CacheableSynthesizedAnnotationAttributeProcessorTest###getAttributeValueTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testCacheableAnnotationAttributeProcessor() { CacheableSynthesizedAnnotationAttributeProcessor processor = new CacheableSynthesizedAnnotationAttributeProcessor(new Comparator<Hierarchical>() { @Override public int compare(String attributeName, String attributeValue) { return attributeName.compareTo(attributeValue); } }); assertEquals(attributeValue, processor.getAttributeValue(ATTRIBUTE_NAME, String.class, Collections.emptyList())); assertEquals(attributeValue, processor.getAttributeValue(ATTRIBUTE_NAME, String.class, Collections.emptyList())); assertEquals(attributeValue, processor.getAttributeValue(ATTRIBUTE_NAME, String.class, Collections.emptyList())); assertEquals(attributeValue, processor.getAttributeValue(ATTRIBUTE_NAME, String.class, Collections.emptyList())); assertEquals(attributeValue, processor.getAttributeValue(ATTRIBUTE_NAME, String.class, Collections.emptyList())); assertEquals(attributeValue, processor.getAttributeValue(ATTRIBUTE_NAME, String.class, Collections.emptyList())); assertEquals(attributeValue, processor.getAttributeValue(ATTRIBUTE_NAME, String.class, Collections.emptyList())); assertEquals(attributeValue, processor.getAttributeValue(ATTRIBUTE_NAME, String.class, Collections.emptyList())); assertEquals(attributeValue, processor.getAttributeValue(ATTRIBUTE_NAME, String.class, Collections.emptyList())); assertEquals(attributeValue, processor.getAttributeValue(ATTRIBUTE_NAME, String.class, Collections.emptyList())); }\n"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/ReUtilTest###escapeTest",
        "generated_path": "ReUtilTest###escapeTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testEscape() { System.out.println(\"escape\"); String content = \"\"; String expResult = \"\"; String result = ReUtil.escape(content); assertEquals(expResult, result); expResult = \"\"; result = ReUtil.escape(content); assertEquals(expResult, result); expResult = \"\"; result = ReUtil.escape(content); assertEquals(expResult, result); expResult = \"\"; result = ReUtil.escape(content); assertEquals(expResult, result); expResult = \"\"; result = ReUtil.escape(content); assertEquals(expResult, result); expResult = \"\"; result = ReUtil.escape(content); assertEquals(expResult, result); expResult = \"\"; result = ReUtil.escape(content); assertEquals(expResult, result); expResult = \"\"; result = ReUtil.escape(content); assertEquals(expResult, result); expResult = \"\"; result = ReUtil.escape(content); assertEquals(expResult, result); expResult = \"\"; result = ReUtil.escape(content); assertEquals(expResult, result); expResult = \"\"; result = ReUtil.escape(content); assertEquals(expResult, result); expResult = \"\"; result = ReUtil.escape(content); assertEquals(expResult, result); }\n"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/HexUtilTest###toUnicodeHexTest",
        "generated_path": "HexUtilTest###toUnicodeHexTest.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void testToUnicodeHex() { System.out.println(\"toUnicodeHex\"); int value = 0x12345678; String result = HexUtil.toUnicodeHex(value); System.out.println(result); }\n"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-poi/src/test/java/cn/hutool/poi/excel/ExcelUtilTest###toLocationTest",
        "generated_path": "ExcelUtilTest###toLocationTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testToLocation() throws Exception { System.out.println(\"toLocation\"); String locationRef = \"A1\"; CellLocation result = ExcelUtil.toLocation(locationRef); assertEquals(1, result.getX()); assertEquals(2, result.getY()); }\n"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/EnumUtilTest###getFieldValuesTest",
        "generated_path": "EnumUtilTest###getFieldValuesTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetFieldValues() { List<Object> values = EnumUtil.getFieldValues(TestEnum.class, \"test\"); assertEquals(1, values.size()); assertEquals(\"test\", values.get(0)); assertEquals(\"test\", values.get(1)); assertEquals(\"test\", values.get(2)); assertEquals(\"test\", values.get(3)); assertEquals(\"test\", values.get(4)); assertEquals(\"test\", values.get(5)); assertEquals(\"test\", values.get(6)); assertEquals(\"test\", values.get(7)); assertEquals(\"test\", values.get(8)); assertEquals(\"test\", values.get(9)); assertEquals(\"test\", values.get(10)); assertEquals(\"test\", values.get(11)); assertEquals(\"test\", values.get(12)); assertEquals(\"test\", values.get(13)); assertEquals(\"test\", values.get(14)); assertEquals(\"test\", values.get(15)); assertEquals(\"test\", values.get(16)); assertEquals(\"test\", values.get(17)); assertEquals(\"test\", values.get(18)); }\n"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-extra/src/test/java/cn/hutool/extra/ftp/FtpTest###reconnectIfTimeoutTest",
        "generated_path": "FtpTest###reconnectIfTimeoutTest.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void testReconnectIfTimeout() throws Exception { }\n"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/ReUtilTest###isMatchTest",
        "generated_path": "ReUtilTest###isMatchTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testIsMatch() { System.out.println(\"isMatch\"); String regex = null; String content = \"\"; boolean expResult = false; boolean result = ReUtil.isMatch(regex, content); assertEquals(expResult, result); expResult = true; result = ReUtil.isMatch(regex, content); assertEquals(expResult, result); expResult = false; result = ReUtil.isMatch(regex, content); assertEquals(expResult, result); expResult = false; result = ReUtil.isMatch(regex, content); assertEquals(expResult, result); expResult = false; result = ReUtil.isMatch(regex, content); assertEquals(expResult, result); expResult = true; result = ReUtil.isMatch(regex, content); assertEquals(expResult, result); expResult = false; result = ReUtil.isMatch(regex, content); assertEquals(expResult, result); expResult = false; result = ReUtil.isMatch(regex, content); assertEquals(expResult, result); expResult = false; result = ReUtil.isMatch(regex, content); assertEquals(expResult, result); expResult = false; result = ReUtil.isMatch(regex, content); assertEquals(expResult, result); expResult = false; result = ReUtil.isMatch(regex, content); assertEquals(expResult, result); }\n"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/ArrayUtilTest###cloneTest",
        "generated_path": "ArrayUtilTest###cloneTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testClone() { assertNull(ArrayUtil.clone(null)); assertNull(ArrayUtil.clone(new Object[]{})); assertNull(ArrayUtil.clone(new Object[]{})); assertNull(ArrayUtil.clone(new Object[]{})); assertNull(ArrayUtil.clone(new Object[]{})); assertNull(ArrayUtil.clone(new Object[]{})); assertNull(ArrayUtil.clone(new Object[]{})); assertNull(ArrayUtil.clone(new Object[]{})); assertNull(ArrayUtil.clone(new Object[]{})); assertNull(ArrayUtil.clone(new Object[]{})); assertNull(ArrayUtil.clone(new Object[]{})); assertNull(ArrayUtil.clone(new Object[]{})); assertNull(ArrayUtil.clone(new Object[]{})); assertNull(ArrayUtil.clone(new Object[]{})); assertNull(ArrayUtil.clone(new Object[]{})); assertNull(ArrayUtil.clone(new Object[]{})); assertNull(ArrayUtil.clone(new Object[]{})); assertNull(ArrayUtil.clone(new Object[]{})); assertNull(ArrayUtil.clone(new Object[]{})); assertNull(ArrayUtil.clone(new Object[]{})); assertNull(ArrayUtil.clone(new Object[]{})); assertNull(ArrayUtil.clone(new Object[]{})); assertNull(ArrayUtil.clone(new Object[]{})); assertNull(ArrayUtil.clone(new Object[]{})); }"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/io/FileUtilTest###delTest",
        "generated_path": "FileUtilTest###delTest.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void testDel() throws Exception { }\n"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/ObjectUtilTest###cloneTest",
        "generated_path": "ObjectUtilTest###cloneTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testClone() throws Exception { TestClass testClass = new TestClass(); TestClass clone = ObjectUtil.clone(testClass); assertEquals(testClass, clone); }\n"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/EnumUtilTest###getFieldNamesTest",
        "generated_path": "EnumUtilTest###getFieldNamesTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetFieldNames() { List<String> names = EnumUtil.getFieldNames(TestEnum.class); Assert.assertEquals(1, names.size()); Assert.assertEquals(\"test\", names.get(0)); Assert.assertEquals(\"test\", names.get(1)); Assert.assertEquals(\"test\", names.get(2)); Assert.assertEquals(\"test\", names.get(3)); Assert.assertEquals(\"test\", names.get(4)); Assert.assertEquals(\"test\", names.get(5)); Assert.assertEquals(\"test\", names.get(6)); Assert.assertEquals(\"test\", names.get(7)); Assert.assertEquals(\"test\", names.get(8)); Assert.assertEquals(\"test\", names.get(9)); Assert.assertEquals(\"test\", names.get(10)); Assert.assertEquals(\"test\", names.get(11)); Assert.assertEquals(\"test\", names.get(12)); Assert.assertEquals(\"test\", names.get(13)); Assert.assertEquals(\"test\", names.get(14)); Assert.assertEquals(\"test\", names.get(15)); Assert.assertEquals(\"test\", names.get(16)); Assert.assertEquals(\"test\", names.get(17)); Assert.assertEquals(\"test\", names.get(18)); Assert.assertEquals(\"test\", names.get(19)); Assert.assertEquals(\"test\", names.get(19)); Assert.assertEquals(\"test\", names"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/date/DateBetweenTest###betweenMonthTest",
        "generated_path": "DateBetweenTest###betweenMonthTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testBetweenMonth() { DateBetween dateBetween = DateBetween.create(new Date(), new Date()); assertEquals(12, dateBetween.betweenMonth(true)); assertEquals(12, dateBetween.betweenMonth(false)); assertEquals(12, dateBetween.betweenMonth(true)); assertEquals(12, dateBetween.betweenMonth(true)); assertEquals(12, dateBetween.betweenMonth(true)); assertEquals(12, dateBetween.betweenMonth(true)); assertEquals(12, dateBetween.betweenMonth(true)); assertEquals(12, dateBetween.betweenMonth(true)); assertEquals(12, dateBetween.betweenMonth(true)); assertEquals(12, dateBetween.betweenMonth(true)); assertEquals(12, dateBetween.betweenMonth(true)); assertEquals(12, dateBetween.betweenMonth(true)); assertEquals(12, dateBetween.betweenMonth(true)); assertEquals(12, dateBetween.betweenMonth(true)); assertEquals(12, dateBetween.betweenMonth(true)); assertEquals(12, dateBetween.betweenMonth(true)); assertEquals(12, dateBetween.betweenMonth(true)); assertEquals(12, dateBetween.betweenMonth(true)); assertEquals(12, dateBetween.betweenMonth(true)); assertEquals(12, dateBetween.betweenMonth(true)); assertEquals(12, dateBetween.betweenMonth(true)); assertEquals(12, dateBetween.betweenMonth(true)); assertEquals(12, dateBetween"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/IdUtilTest###getDataCenterIdTest",
        "generated_path": "IdUtilTest###getDataCenterIdTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetDataCenterId() throws Exception { long datacenterId = IdUtil.getDataCenterId(Long.MAX_VALUE); assertEquals(datacenterId, Long.MAX_VALUE); }\n"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/collection/CollStreamUtilTest###testMerge",
        "generated_path": "CollStreamUtilTest###testMerge.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void merge() { Map<Integer, String> map1 = new HashMap<>(); map1.put(1, \"1\"); map1.put(2, \"2\"); map1.put(3, \"3\"); map1.put(4, \"4\"); map1.put(5, \"5\"); map1.put(6, \"6\"); map1.put(7, \"7\"); map1.put(8, \"8\"); map1.put(9, \"9\"); map1.put(10, \"10\"); map1.put(11, \"11\"); map1.put(12, \"12\"); map1.put(13, \"12\"); map1.put(14, \"12\"); map1.put(15, \"12\"); map1.put(16, \"12\"); map1.put(17, \"12\"); map1.put(18, \"12\"); map1.put(18, \"12\"); map1.put(19, \"12\"); map1.put(20, \"12\"); map1.put(21, \"12\"); map1.put(22, \"12\"); map1.put(23, \"12\"); map1.put(23, \"12\"); map1.put(23, \"12\"); map1.put(24, \"12\"); map1.put(24, \"12\"); map1.put(24, \"12\"); map1.put(24, \""
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/EnumUtilTest###getNameFieldMapTest",
        "generated_path": "EnumUtilTest###getNameFieldMapTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetNameFieldMap() { Map<String, Object> map = EnumUtil.getNameFieldMap(TestEnum.class, \"test\"); assertEquals(1, map.size()); assertEquals(\"test\", map.get(\"test\")); }\n"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-http/src/test/java/cn/hutool/http/HttpUtilTest###urlWithFormTest",
        "generated_path": "HttpUtilTest###urlWithFormTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testUrlWithForm() { assertEquals(\"http: HttpUtil.urlWithForm(\"http: assertEquals(\"http: HttpUtil.urlWithForm(\"http: HttpUtil.urlWithForm(\"http: HttpUtil.urlWithForm(\"http: HttpUtil.urlWithForm(\"http: HttpUtil.urlWithForm(\"http: HttpUtil.urlWithForm(\"http: HttpUtil.urlWithForm(\"http: HttpUtil.urlWithForm(\"http: HttpUtil.urlWithForm(\"http: HttpUtil.urlWithForm(\"http: HttpUtil.urlWithForm(\"http: HttpUtil.urlWithForm(\"http: HttpUtil.urlWithForm(\"http: HttpUtil.urlWithForm(\"http: HttpUtil.urlWithForm(\"http: HttpUtil.urlWithForm(\"http: HttpUtil.urlWithForm(\"http: HttpUtil.urlWithForm(\"http: HttpUtil.urlWithForm(\"http: HttpUtil.urlWithForm(\"http: HttpUtil.urlWithForm(\"http: HttpUtil.urlWithForm(\"http: HttpUtil.urlWithForm(\"http: HttpUtil.urlWithForm(\"http: HttpUtil.urlWithForm(\"http: HttpUtil.urlWithForm(\"http: }\n"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/lang/ValidatorTest###isGeneralTest",
        "generated_path": "ValidatorTest###isGeneralTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testIsGeneral() throws ValidateException { assertTrue(Validator.isGeneral(\"\u6d4b\u8bd5\u5206\u7ec4\", 0, 0)); assertTrue(Validator.isGeneral(\"\u6d4b\u8bd5\u5206\u7ec4\", 0, 0)); assertTrue(Validator.isGeneral(\"\u6d4b\u8bd5\u5206\u7ec4\", 0, 0)); assertTrue(Validator.isGeneral(\"\u6d4b\u8bd5\u5206\u7ec4\", 0, 0)); assertTrue(Validator.isGeneral(\"\u6d4b\u8bd5\u5206\u7ec4\", 0, 0)); assertTrue(Validator.isGeneral(\"\u6d4b\u8bd5\u5206\u7ec4\", 0, 0)); assertTrue(Validator.isGeneral(\"\u6d4b\u8bd5\u5206\u7ec4\", 0, 0)); assertTrue(Validator.isGeneral(\"\u6d4b\u8bd5\u5206\u7ec4\", 0, 0)); assertTrue(Validator.isGeneral(\"\u6d4b\u8bd5\u5206\u7ec4\", 0, 0)); assertTrue(Validator.isGeneral(\"\u6d4b\u8bd5\u5206\u7ec4\", 0, 0)); assertTrue(Validator.isGeneral(\"\u6d4b\u8bd5\u5206\u7ec4\", 0, 0)); assertTrue(Validator.isGeneral(\"\u6d4b\u8bd5\u5206\u7ec4\", 0, 0)); assertTrue(Validator.is"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/text/CharSequenceUtilTest###subPreGbkTest",
        "generated_path": "CharSequenceUtilTest###subPreGbkTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testSubPreGbk() { assertEquals(\"\", CharSequenceUtil.subPreGbk(\"\", 1, true)); assertEquals(\"\", CharSequenceUtil.subPreGbk(\"\", 1, true)); assertEquals(\"\", CharSequenceUtil.subPreGbk(\"\", 1, true)); assertEquals(\"\", CharSequenceUtil.subPreGbk(\"\", 1, true)); assertEquals(\"\", CharSequenceUtil.subPreGbk(\"\", 1, true)); assertEquals(\"\", CharSequenceUtil.subPreGbk(\"\", 1, true)); assertEquals(\"\", CharSequenceUtil.subPreGbk(\"\", 1, true)); assertEquals(\"\", CharSequenceUtil.subPreGbk(\"\", 1, true)); assertEquals(\"\", CharSequenceUtil.subPreGbk(\"\", 1, true)); assertEquals(\"\", CharSequenceUtil.subPreGbk(\"\", 1, true)); assertEquals(\"\", CharSequenceUtil.subPreGbk(\"\", 1, true)); assertEquals(\"\", CharSequenceUtil.subPreGbk(\"\", 1, true)); assertEquals(\"\", CharSequenceUtil.subPreGbk(\"\", 1, true)); assertEquals(\"\", CharSequenceUtil.subPreGbk(\"\", 1, true)); assertEquals(\"\", CharSequenceUtil.subPreGbk(\"\", 1, true)); assertEquals(\"\", CharSequenceUtil.subPreGbk(\"\", 1, true)); assertEquals(\"\", CharSequenceUtil.subPreGbk(\"\", 1, true)); assertEquals(\"\", CharSequenceUtil.subPreGbk(\"\", 1, true)); assert"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/collection/CollUtilTest###splitTest",
        "generated_path": "CollUtilTest###splitTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testSplit() { List<List<String>> list = new ArrayList<>(); list.add(new ArrayList<String>()); list.add(new ArrayList<String>()); list.add(new ArrayList<String>()); list.add(new ArrayList<String>()); list.add(new ArrayList<String>()); list.add(new ArrayList<String>()); list.add(new ArrayList<String>()); list.add(new ArrayList<String>()); list.add(new ArrayList<String>()); list.add(new ArrayList<String>()); list.add(new ArrayList<String>()); list.add(new ArrayList<String>()); list.add(new ArrayList<String>()); list.add(new ArrayList<String>()); list.add(new ArrayList<String>()); list.add(new ArrayList<String>()); list.add(new ArrayList<String>()); list.add(new ArrayList<String>()); list.add(new ArrayList<String>()); list.add(new ArrayList<String>()); list.add(new ArrayList<String>()); list.add(new ArrayList<String>()); list.add(new ArrayList<String>()); list.add(new ArrayList<String>()); list.add(new ArrayList<String>()); list.add(new ArrayList<String>()); list.add(new ArrayList<String>()); list.add(new ArrayList<String>()); list.add(new ArrayList<String>()); list.add(new ArrayList<String"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/net/NetUtilTest###getLocalhostStrTest",
        "generated_path": "NetUtilTest###getLocalhostStrTest.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void testGetLocalhostStr() throws Exception { System.out.println(\"getLocalhostStr\"); String result = NetUtil.getLocalhostStr(); System.out.println(result); }\n"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/ReUtilTest###replaceAllTest",
        "generated_path": "ReUtilTest###replaceAllTest.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void testReplaceAll() { System.out.println(\"replaceAll\"); String str = \"\"; Pattern pattern = Pattern.compile(\"[a-zA-Z]+\"); String replacement = \"a\"; String result = ReUtil.replaceAll(str, pattern, replacement); System.out.println(result); }\n"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/text/CharSequenceUtilTest###startWithTest",
        "generated_path": "CharSequenceUtilTest###startWithTest.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void testStartWith() { }\n"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/img/ImgUtilTest###createImageTest",
        "generated_path": "ImgUtilTest###createImageTest.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void testCreateImage() throws Exception { }\n"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-setting/src/test/java/cn/hutool/setting/yaml/YamlUtilTest###dumpTest",
        "generated_path": "YamlUtilTest###dumpTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testDump() throws IOException { YamlUtil.dump(new TestClass(), new StringWriter()); }\n"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/XmlUtilTest###readBySaxTest",
        "generated_path": "XmlUtilTest###readBySaxTest.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void testReadBySax() throws Exception { }\n"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-poi/src/test/java/cn/hutool/poi/excel/ExcelUtilTest###indexToColNameTest",
        "generated_path": "ExcelUtilTest###indexToColNameTest.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void testIndexToColName() throws Exception { System.out.println(\"indexToColName\"); int index = 0; String result = ExcelUtil.indexToColName(index); System.out.println(result); }\n"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/TypeUtilTest###getParamTypeTest",
        "generated_path": "TypeUtilTest###getParamTypeTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetParamType() throws Exception { Class<?> clazz = Level1Mapper.class; Method method = clazz.getMethod(\"getParamTypes\"); Type type = TypeUtil.getParamType(method, 0); assertEquals(String.class, type); }\n"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/convert/ConverterRegistryTest###getConverterTest",
        "generated_path": "ConverterRegistryTest###getConverterTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetConverter() throws Exception { Assert.assertNotNull(this.converterRegistry.getConverter(String.class, true)); Assert.assertNotNull(this.converterRegistry.getConverter(Integer.class, false)); Assert.assertNotNull(this.converterRegistry.getConverter(Long.class, false)); Assert.assertNotNull(this.converterRegistry.getConverter(Long.class, false)); Assert.assertNotNull(this.converterRegistry.getConverter(Long.class, true)); Assert.assertNotNull(this.converterRegistry.getConverter(Long.class, true)); Assert.assertNotNull(this.converterRegistry.getConverter(Long.class, true)); Assert.assertNotNull(this.converterRegistry.getConverter(Long.class, false)); Assert.assertNotNull(this.converterRegistry.getConverter(Long.class, false)); Assert.assertNotNull(this.converterRegistry.getConverter(Long.class, false)); Assert.assertNotNull(this.converterRegistry.getConverter(Long.class, false)); Assert.assertNotNull(this.converterRegistry.getConverter(Long.class, false)); Assert.assertNotNull(this.converterRegistry.getConverter(Long.class, false)); Assert.assertNotNull(this.converterRegistry.getConverter(Long.class, false)); Assert.assertNotNull(this.converterRegistry.getConverter(Long.class, false)); Assert.assertNotNull(this.converterRegistry.getConverter(Long.class, false)); Assert.assert"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/io/FileUtilTest###getParentTest",
        "generated_path": "FileUtilTest###getParentTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetParent() throws Exception { System.out.println(\"getParent\"); File file = new File(\"test.txt\"); file.createNewFile(); file.createNewFile(); file.createNewFile(); file.createNewFile(); file.createNewFile(); file.createNewFile(); file.createNewFile(); file.createNewFile(); file.createNewFile(); file.createNewFile(); file.createNewFile(); file.createNewFile(); file.createNewFile(); file.createNewFile(); file.createNewFile(); file.createNewFile(); file.createNewFile(); file.createNewFile(); file.createNewFile(); file.createNewFile(); file.createNewFile(); file.createNewFile(); file.createNewFile(); file.createNewFile(); file.createNewFile(); file.createNewFile(); file.createNewFile(); file.createNewFile(); file.createNewFile(); file.createNewFile(); file.createNewFile(); file.createNewFile(); file.createNewFile(); file.createNewFile(); file.createNewFile(); file.createNewFile(); file.createNewFile(); file.createNewFile(); file.createNewFile(); file.createNewFile(); file.createNewFile(); file.createNewFile(); file.createNewFile(); file.createNewFile(); file.createNewFile(); file.createNewFile(); file.createNewFile(); file.createNewFile();"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-crypto/src/test/java/cn/hutool/crypto/KeyUtilTest###generateKeyPairTest",
        "generated_path": "KeyUtilTest###generateKeyPairTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGenerateKeyPair() throws Exception { KeyPair pair = KeyUtil.generateKeyPair(\"ECIES\"); assertNotNull(pair); assertEquals(key.getAlgorithm(), \"ECIES\"); assertEquals(pair.getKeySize(), 256); }\n"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/ReflectUtilTest###invokeTest",
        "generated_path": "ReflectUtilTest###invokeTest.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test(expected = IllegalArgumentException.class) public void testInvokeNull() throws Exception { ReflectUtil.invoke(null, \"testInvokeNull\"); }\n"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/collection/CollUtilTest###zipTest",
        "generated_path": "CollUtilTest###zipTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testZip() { System.out.println(\"zip\"); Collection<String> keys = new ArrayList<String>(); Collection<String> values = new ArrayList<String>(); values.add(\"1\"); keys.add(\"2\"); values.add(\"3\"); values.add(\"4\"); values.add(\"5\"); values.add(\"6\"); values.add(\"7\"); values.add(\"8\"); values.add(\"9\"); values.add(\"10\"); values.add(\"11\"); values.add(\"12\"); values.add(\"13\"); values.add(\"13\"); values.add(\"14\"); values.add(\"13\"); values.add(\"14\"); values.add(\"14\"); values.add(\"14\"); values.add(\"14\"); values.add(\"14\"); values.add(\"14\"); values.add(\"14\"); values.add(\"14\"); values.add(\"14\"); values.add(\"14\"); values.add(\"14\"); values.add(\"14\"); values.add(\"14\"); values.add(\"14\"); values.add(\"14\"); values.add(\"14\"); values.add(\"14\"); values.add(\"14\"); values.add(\"14\"); values.add(\"14\"); values.add(\"14\"); values.add(\"14\"); values.add(\"14\"); values.add(\"14\"); values.add(\"14\"); values.add(\"14\"); values.add(\"14\"); values.add(\"14\"); values.add(\"14\"); values.add(\"14\"); values."
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/lang/ValidatorTest###isBetweenTest",
        "generated_path": "ValidatorTest###isBetweenTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testIsBetween() throws ValidateException { assertTrue(Validator.isBetween(1, 2, 3)); assertTrue(Validator.isBetween(1, 2, 3)); assertTrue(Validator.isBetween(1, 2, 3)); assertTrue(Validator.isBetween(1, 2, 3)); assertTrue(Validator.isBetween(1, 2, 3)); assertTrue(Validator.isBetween(1, 2, 3)); assertTrue(Validator.isBetween(1, 2, 3)); assertTrue(Validator.isBetween(1, 2, 3)); assertTrue(Validator.isBetween(1, 2, 3)); assertTrue(Validator.isBetween(1, 2, 3)); assertTrue(Validator.isBetween(1, 2, 3)); assertTrue(Validator.isBetween(1, 2, 3)); assertTrue(Validator.isBetween(1, 2, 3)); assertTrue(Validator.isBetween(1, 2, 3)); assertTrue(Validator.isBetween(1, 2, 3)); assertTrue(Validator.isBetween(1, 2, 3)); assertTrue(Validator.isBetween(1, 2, 3)); assertTrue(Validator.isBetween(1, 2, 3)); assertTrue(Validator.isBetween(1, 2, 3)); assertTrue(Validator.isBetween(1, 2, 3)); assertTrue(Validator.isBetween(1, 2, 3)); assertTrue(Validator.isBetween(1, 2,"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-extra/src/test/java/cn/hutool/extra/spring/SpringUtilTest###getBeanTest",
        "generated_path": "SpringUtilTest###getBeanTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetBean() throws UtilException { TestBean bean = SpringUtil.getBean(TestBean.class); Assert.assertNotNull(bean); Assert.assertEquals(TestBean.class, bean.getClass()); Assert.assertEquals(TestBean.class, bean.getClass()); Assert.assertEquals(TestBean.class, bean.getClass()); Assert.assertEquals(TestBean.class, bean.getClass()); Assert.assertEquals(TestBean.class, bean.getClass()); Assert.assertEquals(TestBean.class, bean.getClass()); Assert.assertEquals(TestBean.class, bean.getClass()); Assert.assertEquals(TestBean.class, bean.getClass()); Assert.assertEquals(TestBean.class, bean.getClass()); Assert.assertEquals(TestBean.class, bean.getClass()); Assert.assertEquals(TestBean.class, bean.getClass()); Assert.assertEquals(TestBean.class, bean.getClass()); Assert.assertEquals(TestBean.class, bean.getClass()); Assert.assertEquals(TestBean.class, bean.getClass()); Assert.assertEquals(TestBean.class, bean.getClass()); Assert.assertEquals(TestBean.class, bean.getClass()); Assert.assertEquals(TestBean.class, bean.getClass()); Assert.assertEquals(TestBean.class, bean.getClass()); Assert.assertEquals(TestBean.class, bean.getClass"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/io/ManifestUtilTest###getManiFestTest",
        "generated_path": "ManifestUtilTest###getManiFestTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetManifest() throws IORuntimeException { final JarURLConnection connection = mock(JarURLConnection.class); final JarFile jarFile = mock(JarFile.class); when(connection.getJarFile()).thenReturn(jarFile); final Manifest manifest = ManifestUtil.getManifest(connection); assertNotNull(manifest); assertEquals(1, manifest.getEntries().size()); }\n"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/collection/CollUtilTest###getTest",
        "generated_path": "CollUtilTest###getTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGet() { System.out.println(\"get\"); Collection<Integer> coll = new ArrayList<Integer>(); coll.add(1); coll.add(2); coll.add(3); coll.add(4); coll.add(5); coll.add(6); coll.add(7); coll.add(8); coll.add(9); coll.add(10); coll.add(11); coll.add(12); coll.add(13); coll.add(12); coll.add(13); coll.add(13); coll.add(13); coll.add(13); coll.add(13); coll.add(13); coll.add(13); coll.add(13); coll.add(13); coll.add(13); coll.add(13); coll.add(13); coll.add(13); coll.add(13); coll.add(13); coll.add(13); coll.add(13); coll.add(13); coll.add(13); coll.add(13); coll.add(13); coll.add(13); coll.add(13); coll.add(13); coll.add(13); coll.add(13); coll.add(13); coll.add(13); coll.add(13); coll.add(13); coll.add(13); coll.add(13); coll.add(13); coll.add(13); coll."
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/ReUtilTest###delAllTest",
        "generated_path": "ReUtilTest###delAllTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testDelAll() { System.out.println(\"delAll\"); String regex = \"\"; String content = \"\"; String expResult = \"\"; String result = ReUtil.delAll(regex, content); assertEquals(expResult, result); expResult = \"\"; result = ReUtil.delAll(regex, content); assertEquals(expResult, result); expResult = \"\"; result = ReUtil.delAll(regex, content); assertEquals(expResult, result); expResult = \"\"; result = ReUtil.delAll(regex, content); assertEquals(expResult, result); expResult = \"\"; result = ReUtil.delAll(regex, content); assertEquals(expResult, result); expResult = \"\"; result = ReUtil.delAll(regex, content); assertEquals(expResult, result); expResult = \"\"; result = ReUtil.delAll(regex, content); assertEquals(expResult, result); expResult = \"\"; result = ReUtil.delAll(regex, content); assertEquals(expResult, result); expResult = \"\"; result = ReUtil.delAll(regex, content); assertEquals(expResult, result); expResult = \"\"; result = ReUtil.delAll(regex, content); assertEquals(expResult, result); expResult = \"\"; result = ReUtil.delAll(regex, content); assertEquals(expResult, result); }\n"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/NumberUtilTest###equalsTest",
        "generated_path": "NumberUtilTest###equalsTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testEquals() { for (int i = 0; i < 10; i++) { assertTrue(NumberUtil.equals(new BigDecimal(\"1\"), new BigDecimal(\"2\"))); } for (int i = 0; i < 10; i++) { assertFalse(NumberUtil.equals(new BigDecimal(\"1\"), new BigDecimal(\"2\"))); } for (int i = 0; i < 10; i++) { assertFalse(NumberUtil.equals(new BigDecimal(\"1\"), new BigDecimal(\"2\"))); } for (int i = 0; i < 10; i++) { assertTrue(NumberUtil.equals(new BigDecimal(\"1\"), new BigDecimal(\"2\"))); } for (int i = 0; i < 10; i++) { assertTrue(NumberUtil.equals(new BigDecimal(\"1\"), new BigDecimal(\"2\"))); } for (int i = 0; i < 10; i++) { assertTrue(NumberUtil.equals(new BigDecimal(\"1\"), new BigDecimal(\"2\"))); } for (int i = 0; i < 10; i++) { assertTrue(NumberUtil.equals(new BigDecimal(\"1\"), new BigDecimal(\"2\"))); } for (int i = 0; i < 10; i++) { assertTrue(NumberUtil.equals(new BigDecimal(\"1\"), new BigDecimal(\"1\"))); } for (int i = 0; i < 10; i++) { assertTrue(NumberUtil.equals("
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/ZipUtilTest###unzipTest",
        "generated_path": "ZipUtilTest###unzipTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test(expected = IllegalArgumentException.class) public void testUnzipNullFile() throws Exception { ZipUtil.unzip(null, null); }\n"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/lang/ValidatorTest###isBirthdayTest",
        "generated_path": "ValidatorTest###isBirthdayTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testIsBirthday() throws ValidateException { assertTrue(Validator.isBirthday(\"2013-01-01\")); assertTrue(Validator.isBirthday(\"2013-01-01\")); assertTrue(Validator.isBirthday(\"2013-01-01\")); assertTrue(Validator.isBirthday(\"2013-01-01\")); assertTrue(Validator.isBirthday(\"2013-01-01\")); assertTrue(Validator.isBirthday(\"2013-01-01\")); assertTrue(Validator.isBirthday(\"2013-01-01\")); assertTrue(Validator.isBirthday(\"2013-01-01\")); assertTrue(Validator.isBirthday(\"2013-01-01\")); assertTrue(Validator.isBirthday(\"2013-01-01\")); assertTrue(Validator.isBirthday(\"2013-01-01\")); assertTrue(Validator.isBirthday(\"2013-01-01\")); assertTrue(Validator.isBirthday(\"2013-01-01\")); assertTrue(Validator.isBirthday(\"2013-01-01\")); assertTrue(Validator.isBirthday(\"2013-01-01\")); assertTrue(Validator.isBirthday(\"2013-01-01\")); assertTrue(Validator.isBirthday(\"2013-01-01\")); assertTrue(Validator.isBirthday(\"2013-01-01\")"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/IdcardUtilTest###isValidCardTest",
        "generated_path": "IdcardUtilTest###isValidCardTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testIsValidCard() { System.out.println(\"isValidCard\"); String idCard = \"12345678\"; boolean result = IdcardUtil.isValidCard(idCard); assertTrue(result); }\n"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/collection/CollUtilTest###lastIndexOfTest",
        "generated_path": "CollUtilTest###lastIndexOfTest.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void testLastIndexOf() { }\n"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-http/src/test/java/cn/hutool/http/HtmlUtilTest###removeAllHtmlAttrTest",
        "generated_path": "HtmlUtilTest###removeAllHtmlAttrTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testRemoveAllHtmlAttr() { String content = \"<p>Hello</p>\"; String result = HtmlUtil.removeAllHtmlAttr(content); assertEquals(\"<p>Hello</p>\", result); }\n"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/collection/IterUtilTest###getTest",
        "generated_path": "IterUtilTest###getTest.java",
        "Compile_result": 1,
        "Test_result": 0,
        "Gen_Test": "@Test(expected = IndexOutOfBoundsException.class) public void testGet() throws Exception { IterUtil.get(new ArrayList<Object>().iterator(), -1); }\n"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/net/Ipv4UtilTest###ipv4ToLongTest",
        "generated_path": "Ipv4UtilTest###ipv4ToLongTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testIpv4ToLong() { assertEquals(0, Ipv4Util.ipv4ToLong(\"0.0.0.0\")); assertEquals(0, Ipv4Util.ipv4ToLong(\"0.0.0.0/24\")); assertEquals(0, Ipv4Util.ipv4ToLong(\"0.0.0.0/24\")); assertEquals(0, Ipv4Util.ipv4ToLong(\"0.0.0.0/24\")); assertEquals(0, Ipv4Util.ipv4ToLong(\"0.0.0.0/24\")); assertEquals(0, Ipv4Util.ipv4ToLong(\"0.0.0.0/24\")); assertEquals(0, Ipv4Util.ipv4ToLong(\"0.0.0.0/24\")); assertEquals(0, Ipv4Util.ipv4ToLong(\"0.0.0.0/24\")); assertEquals(0, Ipv4Util.ipv4ToLong(\"0.0.0.0/24\")); assertEquals(0, Ipv4Util.ipv4ToLong(\"0.0.0.0/24\")); assertEquals(0, Ipv4Util.ipv4ToLong(\"0.0.0.0/24\")); assertEquals(0, Ipv4Util.ipv4ToLong(\"0.0.0.0/24\")); assertEquals(0, Ipv4Util."
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/lang/hash/CityHashTest###hash64Test",
        "generated_path": "CityHashTest###hash64Test.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void test64() { byte[] data = new byte[64]; long result = CityHash.hash64(data); assertEquals(result, 0x6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6"
    },
    {
        "original_path": "dromara_hutool###dromara_hutool/hutool-core/src/test/java/cn/hutool/core/util/ArrayUtilTest###getTest",
        "generated_path": "ArrayUtilTest###getTest.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGet() { assertEquals(null, ArrayUtil.get(null, 0)); assertEquals(null, ArrayUtil.get(new Object(), 0)); assertEquals(null, ArrayUtil.get(new Object(), 0)); assertEquals(null, ArrayUtil.get(new Object(), 0)); assertEquals(null, ArrayUtil.get(new Object(), 0)); assertEquals(null, ArrayUtil.get(new Object(), 0)); assertEquals(null, ArrayUtil.get(new Object(), 0)); assertEquals(null, ArrayUtil.get(new Object(), 0)); assertEquals(null, ArrayUtil.get(new Object(), 0)); assertEquals(null, ArrayUtil.get(new Object(), 0)); assertEquals(null, ArrayUtil.get(new Object(), 0)); assertEquals(null, ArrayUtil.get(new Object(), 0)); assertEquals(null, ArrayUtil.get(new Object(), 0)); assertEquals(null, ArrayUtil.get(new Object(), 0)); assertEquals(null, ArrayUtil.get(new Object(), 0)); assertEquals(null, ArrayUtil.get(new Object(), 0)); assertEquals(null, ArrayUtil.get(new Object(), 0)); assertEquals(null, ArrayUtil.get(new Object(), 0)); assertEquals(null, ArrayUtil.get(new Object(), 0)); assertEquals(null, ArrayUtil.get(new Object(), 0)); assertEquals(null, ArrayUtil.get(new Object(), 0)); assertEquals(null, ArrayUtil.get(new Object(), 0)); assertEquals("
    },
    {
        "original_path": "rometools_rome###rometools_rome/rome-utils/src/test/java/com/rometools/utils/LongsTest###testParseDecimal",
        "generated_path": "LongsTest###testParseDecimal.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testParseDecimal() { assertEquals(0L, Longs.parseDecimal(\"0.0\")); assertEquals(0L, Longs.parseDecimal(\"0.0\")); assertEquals(0L, Longs.parseDecimal(\"0.0\")); assertEquals(0L, Longs.parseDecimal(\"0.0\")); assertEquals(0L, Longs.parseDecimal(\"0.0\")); assertEquals(0L, Longs.parseDecimal(\"0.0\")); assertEquals(0L, Longs.parseDecimal(\"0.0\")); assertEquals(0L, Longs.parseDecimal(\"0.0\")); assertEquals(0L, Longs.parseDecimal(\"0.0\")); assertEquals(0L, Longs.parseDecimal(\"0.0\")); assertEquals(0L, Longs.parseDecimal(\"0.0\")); assertEquals(0L, Longs.parseDecimal(\"0.0\")); assertEquals(0L, Longs.parseDecimal(\"0.0\")); assertEquals(0L, Longs.parseDecimal(\"0.0\")); assertEquals(0L, Longs.parseDecimal(\"0.0\")); assertEquals(0L, Longs.parseDecimal(\"0.0\")); assertEquals(0L, Longs.parseDecimal(\"0.0\")); assertEquals(0L, Longs.parseDecimal(\"0.0\")); assertEquals("
    },
    {
        "original_path": "rometools_rome###rometools_rome/rome-utils/src/test/java/com/rometools/utils/URIsTest###testParse",
        "generated_path": "URIsTest###testParse.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testParse() throws URISyntaxException { URI uri = URIs.parse(\"http: assertEquals(\"http: }\n"
    },
    {
        "original_path": "rometools_rome###rometools_rome/rome-utils/src/test/java/com/rometools/utils/ListsTest###testCreate",
        "generated_path": "ListsTest###testCreate.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testCreate() { final List<Integer> list = Lists.create(1); assertEquals(1, list.size()); assertEquals(1, list.get(0)); assertEquals(1, list.get(1)); assertEquals(1, list.get(2)); assertEquals(1, list.get(3)); assertEquals(1, list.get(4)); assertEquals(1, list.get(5)); assertEquals(1, list.get(6)); assertEquals(1, list.get(7)); assertEquals(1, list.get(8)); assertEquals(1, list.get(9)); assertEquals(1, list.get(10)); assertEquals(1, list.get(11)); assertEquals(1, list.get(12)); assertEquals(1, list.get(13)); assertEquals(1, list.get(14)); assertEquals(1, list.get(15)); assertEquals(1, list.get(16)); }\n"
    },
    {
        "original_path": "rometools_rome###rometools_rome/rome-utils/src/test/java/com/rometools/utils/DoublesTest###testParse",
        "generated_path": "DoublesTest###testParse.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testParse() { assertNull(Doubles.parse(null)); assertNull(Doubles.parse(\"\")); assertNull(Doubles.parse(\"1\")); assertNull(Doubles.parse(\"1.0\")); assertNull(Doubles.parse(\"1.0\")); assertNull(Doubles.parse(\"1.0\")); assertNull(Doubles.parse(\"1.0\")); assertNull(Doubles.parse(\"1.0\")); assertNull(Doubles.parse(\"1.0\")); assertNull(Doubles.parse(\"1.0\")); assertNull(Doubles.parse(\"1.0\")); assertNull(Doubles.parse(\"1.0\")); assertNull(Doubles.parse(\"1.0\")); assertNull(Doubles.parse(\"1.0\")); assertNull(Doubles.parse(\"1.0\")); assertNull(Doubles.parse(\"1.0\")); assertNull(Doubles.parse(\"1.0\")); assertNull(Doubles.parse(\"1.0\")); assertNull(Doubles.parse(\"1.0\")); assertNull(Doubles.parse(\"1.0\")); assertNull(Doubles.parse(\"1.0\")); assertNull(Doubles.parse(\"1.0\")); assertNull(Doubles.parse(\"1.0\")); assertNull(Doubles.parse(\"1.0\")); assertNull(Doubles."
    },
    {
        "original_path": "rometools_rome###rometools_rome/rome/src/test/java/com/rometools/rome/io/XmlReaderTest###testGetXmlProlog",
        "generated_path": "XmlReaderTest###testGetXmlProlog.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetXmlProlog() throws IOException { String xmlProlog = XmlReader.getXmlProlog(new ByteArrayInputStream(xmlProlog.getBytes()), \"UTF-8\"); assertEquals(\"UTF-8\", xmlProlog); }\n"
    },
    {
        "original_path": "code4craft_webmagic###code4craft_webmagic/webmagic-extension/src/test/java/us/codecraft/webmagic/utils/IPUtilsTest###testGetFirstNoLoopbackIPAddresses",
        "generated_path": "IPUtilsTest###testGetFirstNoLoopbackIPAddresses.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetFirstNoLoopbackIPAddresses() throws Exception { String result = IPUtils.getFirstNoLoopbackIPAddresses(); assertEquals(\"127.0.0.1\", result); }\n"
    },
    {
        "original_path": "code4craft_webmagic###code4craft_webmagic/webmagic-core/src/test/java/us/codecraft/webmagic/utils/UrlUtilsTest###testGetDomain",
        "generated_path": "UrlUtilsTest###testGetDomain.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetDomain() { String url = \"http: String result = UrlUtils.getDomain(url); assertEquals(\"http\", result); }\n"
    },
    {
        "original_path": "code4craft_webmagic###code4craft_webmagic/webmagic-core/src/test/java/us/codecraft/webmagic/selector/JsonTest###testRemovePadding",
        "generated_path": "JsonTest###testRemovePadding.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testRemovePadding() { Json json = new Json(\"a(b)\"); assertEquals(\"a(b)\", json.removePadding(\"a\")); assertEquals(\"a(b)\", json.removePadding(\"a\")); assertEquals(\"a(b)\", json.removePadding(\"a\")); assertEquals(\"a(b)\", json.removePadding(\"a\")); assertEquals(\"a(b)\", json.removePadding(\"a\")); assertEquals(\"a(b)\", json.removePadding(\"a\")); assertEquals(\"a(b)\", json.removePadding(\"a\")); assertEquals(\"a(b)\", json.removePadding(\"a\")); assertEquals(\"a(b)\", json.removePadding(\"a\")); assertEquals(\"a(b)\", json.removePadding(\"a(b)\")); assertEquals(\"a(b)\", json.removePadding(\"a(b)\")); assertEquals(\"a(b)\", json.removePadding(\"a(b)\")); assertEquals(\"a(b)\", json.removePadding(\"a(b)\")); assertEquals(\"a(b)\", json.removePadding(\"a(b)\")); assertEquals(\"a(b)\", json.removePadding(\"a(b)\")); assertEquals(\"a(b)\", json.removePadding(\"a(b)\")); assertEquals(\"a(b)\", json.removePadding(\"a(b)\")); assertEquals(\"a(b)\", json."
    },
    {
        "original_path": "code4craft_webmagic###code4craft_webmagic/webmagic-core/src/test/java/us/codecraft/webmagic/proxy/ProxyTest###testCreate",
        "generated_path": "ProxyTest###testCreate.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testCreate() { Proxy proxy = Proxy.create(new URI(\"http: assertEquals(proxy.getHost(), \"http: assertEquals(proxy.getPort(), 8080); assertEquals(proxy.getScheme(), \"http\"); assertEquals(proxy.getUsername(), \"user\"); assertEquals(proxy.getPassword(), \"password\"); }\n"
    },
    {
        "original_path": "NLPchina_ansj_seg###NLPchina_ansj_seg/src/test/java/org/ansj/app/crf/ConfigTest###wordAlertTest",
        "generated_path": "ConfigTest###wordAlertTest.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void testWordAlert() { System.out.println(\"wordAlert\"); String str = \"\u5b57\u6807\u6ce8\"; List<Element> list = Config.wordAlert(str); System.out.println(list); }\n"
    },
    {
        "original_path": "NLPchina_ansj_seg###NLPchina_ansj_seg/src/test/java/org/ansj/library/DicLibraryTest###insertTest",
        "generated_path": "DicLibraryTest###insertTest.java",
        "Compile_result": 1,
        "Test_result": 0,
        "Gen_Test": "@Test public void testInsert() throws Exception { DicLibrary.insert(\"key\", \"keyword\", \"nature\", 1000); DicLibrary.insert(\"key\", \"keyword\", \"nature\", 1000); DicLibrary.insert(\"key\", \"keyword\", \"nature\", 1000); DicLibrary.insert(\"key\", \"keyword\", \"nature\", 1000); DicLibrary.insert(\"key\", \"keyword\", \"nature\", 1000); DicLibrary.insert(\"key\", \"keyword\", \"nature\", 1000); DicLibrary.insert(\"key\", \"keyword\", \"nature\", 1000); DicLibrary.insert(\"key\", \"keyword\", \"nature\", 1000); DicLibrary.insert(\"key\", \"keyword\", \"nature\", 1000); DicLibrary.insert(\"key\", \"keyword\", \"nature\", 1000); DicLibrary.insert(\"key\", \"keyword\", \"nature\", 1000); DicLibrary.insert(\"key\", \"keyword\", \"nature\", 1000); DicLibrary.insert(\"key\", \"keyword\", \"nature\", 1000); DicLibrary.insert(\"key\", \"keyword\", \"nature\", 1000); DicLibrary.insert(\"key\", \"keyword\", \"nature\", 1000); DicLibrary.insert(\"key\", \"keyword\", \"nature\", 1000); DicLibrary.insert(\"key\", \"keyword\", \"nature\", 1000); DicLibrary.insert(\"key\", \"keyword\", \"nature\", 1000); }\n"
    },
    {
        "original_path": "watson-developer-cloud_java-sdk###watson-developer-cloud_java-sdk/common/src/test/java/com/ibm/watson/common/SdkCommonTest###testGetSdkHeaders",
        "generated_path": "SdkCommonTest###testGetSdkHeaders.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetSdkHeaders() { Map<String, String> sdkHeaders = SdkCommon.getSdkHeaders(SERVICE_NAME, SERVICE_VERSION, OPERATION_ID); Assert.assertNotNull(sdkHeaders); Assert.assertTrue(sdkHeaders.containsKey(WatsonHttpHeaders.X_IBMCLOUD_SDK_ANALYTICS)); Assert.assertTrue(sdkHeaders.containsKey(HttpHeaders.USER_AGENT)); Assert.assertTrue(sdkHeaders.containsKey(HttpHeaders.USER_AGENT)); }\n"
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-language-modules/pl/src/test/java/org/languagetool/rules/pl/DateCheckFilterTest###testGetDayOfWeek",
        "generated_path": "DateCheckFilterTest###testGetDayOfWeek.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetDayOfWeek() { assertEquals(Calendar.FRIDAY, dateCheckFilter.getDayOfWeek(\"pon\")); assertEquals(Calendar.TUESDAY, dateCheckFilter.getDayOfWeek(\"wt\")); assertEquals(Calendar.WEDNESDAY, dateCheckFilter.getDayOfWeek(\"\u015br\")); assertEquals(Calendar.THURSDAY, dateCheckFilter.getDayOfWeek(\"czw\")); assertEquals(Calendar.THURSDAY, dateCheckFilter.getDayOfWeek(\"czw\")); assertEquals(Calendar.THURSDAY, dateCheckFilter.getDayOfWeek(\"czw\")); assertEquals(Calendar.THURSDAY, dateCheckFilter.getDayOfWeek(\"thur\")); assertEquals(Calendar.FRIDAY, dateCheckFilter.getDayOfWeek(\"friday\")); assertEquals(Calendar.SATURDAY, dateCheckFilter.getDayOfWeek(\"sob\")); assertEquals(Calendar.SATURDAY, dateCheckFilter.getDayOfWeek(\"niedz\")); assertEquals(Calendar.SUNDAY, dateCheckFilter.getDayOfWeek(\"niedz\")); assertEquals(Calendar.SUNDAY, dateCheckFilter.getDayOfWeek(\"niedz\")); assertEquals(Calendar.SUNDAY, dateCheckFilter.getDayOfWeek(\"niedz\")); }\n"
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-wikipedia/src/test/java/org/languagetool/dev/wikipedia/WikipediaQuickCheckTest###testGetPlainTextMapping",
        "generated_path": "WikipediaQuickCheckTest###testGetPlainTextMapping.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetPlainTextMapping() throws IOException, PageNotFoundException { PlainTextMapping plainTextMapping = test.getPlainTextMapping(\"This is a test\"); assertEquals(\"This is a test\", plainTextMapping.getPlainText()); }\n"
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-language-modules/ar/src/test/java/org/languagetool/tools/ArabicStringToolsTest###testRemoveTashkeel",
        "generated_path": "ArabicStringToolsTest###testRemoveTashkeel.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testRemoveTashkeel() { assertEquals(\"\", ArabicStringTools.removeTashkeel(\"\")); assertEquals(\"\", ArabicStringTools.removeTashkeel(\"\")); assertEquals(\"\", ArabicStringTools.removeTashkeel(\"\")); assertEquals(\"\", ArabicStringTools.removeTashkeel(\"\")); assertEquals(\"\", ArabicStringTools.removeTashkeel(\"\")); assertEquals(\"\", ArabicStringTools.removeTashkeel(\" \")); assertEquals(\"\", ArabicStringTools.removeTashkeel(\" \")); assertEquals(\"\", ArabicStringTools.removeTashkeel(\" \")); assertEquals(\"\", ArabicStringTools.removeTashkeel(\" \")); assertEquals(\"\", ArabicStringTools.removeTashkeel(\" \")); assertEquals(\"\", ArabicStringTools.removeTashkeel(\" \")); assertEquals(\"\", ArabicStringTools.removeTashkeel(\" \")); assertEquals(\"\", ArabicStringTools.removeTashkeel(\" \")); assertEquals(\"\", ArabicStringTools.removeTashkeel(\" \")); assertEquals(\"\", ArabicStringTools.removeTashkeel(\" \")); assertEquals(\"\", ArabicStringTools.removeTashkeel(\" \")); assertEquals(\"\", ArabicStringTools.removeTashkeel(\" \"));"
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-server/src/test/java/org/languagetool/server/DictionarySpellMatchFilterTest###testGetPhrases",
        "generated_path": "DictionarySpellMatchFilterTest###testGetPhrases.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetPhrase() { List<RuleMatch> ruleMatches = new ArrayList<>(); RuleMatch match = new RuleMatch(); match.getRule().setDictionaryBasedSpellingRule(true); match.getRule().setDictionaryBasedSpellingRule(false); match.getRule().setDictionaryBasedSpellingRule(true); match.getRule().setDictionaryBasedSpellingRule(false); match.getRule().setDictionaryBasedSpellingRule(true); match.getRule().setDictionaryBasedSpellingRule(false); match.getRule().setDictionaryBasedSpellingRule(false); match.getRule().setDictionaryBasedSpellingRule(false); match.getRule().setDictionaryBasedSpellingRule(false); match.getRule().setDictionaryBasedSpellingRule(true); match.getRule().setDictionaryBasedSpellingRule(false); match.getRule().setDictionaryBasedSpellingRule(true); match.getRule().setDictionaryBasedSpellingRule(false); match.getRule().setDictionaryBasedSpellingRule(false); match.getRule().setDictionaryBasedSpellingRule(false); match.getRule().setDictionaryBasedSpellingRule(false); match.getRule().setDictionaryBasedSpellingRule(true); match.getRule().setDictionaryBasedSpellingRule(false); match.getRule().setDictionaryBasedSpellingRule(true); match.getRule"
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-core/src/test/java/org/languagetool/tagging/MorfologikTaggerTest###testTag",
        "generated_path": "MorfologikTaggerTest###testTag.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testMorfologikTagger() throws IOException { MorfologikTagger tagger = new MorfologikTagger(dictionary); List<TaggedWord> result = tagger.tag(\"test\"); assertEquals(2, result.size()); TaggedWord taggedWord = result.get(0); assertEquals(\"test\", taggedWord.getStem()); assertEquals(\"test\", taggedWord.getTag()); assertEquals(\"test\", taggedWord.getStem()); assertEquals(\"test\", taggedWord.getTag()); }\n"
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-language-modules/br/src/test/java/org/languagetool/tokenizers/br/BretonWordTokenizerTest###testTokenize",
        "generated_path": "BretonWordTokenizerTest###testTokenize.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testTokenize() { List<String> tokens = tokenizer.tokenize(\"\u2019\"); assertEquals(2, tokens.size()); assertEquals(\"\u2019\", tokens.get(0)); assertEquals(\"\u2019\", tokens.get(1)); assertEquals(\"\u2019\", tokens.get(2)); assertEquals(\"\u2019\", tokens.get(3)); assertEquals(\"\u2019\", tokens.get(4)); assertEquals(\"\u2019\", tokens.get(5)); assertEquals(\"\u2019\", tokens.get(6)); assertEquals(\"\u2019\", tokens.get(7)); assertEquals(\"\u2019\", tokens.get(8)); assertEquals(\"\u2019\", tokens.get(9)); assertEquals(\"\u2019\", tokens.get(10)); assertEquals(\"\u2019\", tokens.get(11)); assertEquals(\"\u2019\", tokens.get(12)); assertEquals(\"\u2019\", tokens.get(13)); assertEquals(\"\u2019\", tokens.get(14)); assertEquals(\"\u2019\", tokens.get(15)); }\n"
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-core/src/test/java/org/languagetool/rules/patterns/UnifierTest###testAddNeutralElement",
        "generated_path": "UnifierTest###testAddNeutralElement.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testAddNeutralElement() throws IOException { String text = IOUtils.toString(this.getClass().getResourceAsStream(\"/unifier/testAddNeutralElement.txt\"), StandardCharsets.UTF_8); AnalyzedTokenReadings readings = new AnalyzedTokenReadings(text); readings.getReadingsLength().add(1); readings.getReadingsLength().add(2); readings.getReadingsLength().add(3); readings.getReadingsLength().add(4); readings.getReadingsLength().add(5); readings.getReadingsLength().add(6); readings.getReadingsLength().add(7); readings.getReadingsLength().add(8); readings.getReadingsLength().add(9); readings.getReadingsLength().add(10); readings.getReadingsLength().add(11); readings.getReadingsLength().add(12); readings.getReadingsLength().add(13); readings.getReadingsLength().add(14); readings.getReadingsLength().add(14); readings.getReadingsLength().add(15); readings.getReadingsLength().add(16); readings.getReadingsLength().add(16); readings.getReadingsLength().add(16); readings.getReadingsLength().add(16); readings.getReadingsLength().add(16"
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-core/src/test/java/org/languagetool/AnalyzedTokenTest###testMatches",
        "generated_path": "AnalyzedTokenTest###testMatches.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void testMatches() { AnalyzedToken t = new AnalyzedToken(\"test\", \"test\", \"test\"); assertTrue(t.matches(t)); }\n"
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-language-modules/en/src/test/java/org/languagetool/rules/en/DateCheckFilterTest###testGetDayOfWeek",
        "generated_path": "DateCheckFilterTest###testGetDayOfWeek.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetDayOfWeek() { assertEquals(Calendar.FRIDAY, dateCheckFilter.getDayOfWeek(\"pon\")); assertEquals(Calendar.TUESDAY, dateCheckFilter.getDayOfWeek(\"wt\")); assertEquals(Calendar.WEDNESDAY, dateCheckFilter.getDayOfWeek(\"\u015br\")); assertEquals(Calendar.THURSDAY, dateCheckFilter.getDayOfWeek(\"czw\")); assertEquals(Calendar.THURSDAY, dateCheckFilter.getDayOfWeek(\"czw\")); assertEquals(Calendar.THURSDAY, dateCheckFilter.getDayOfWeek(\"czw\")); assertEquals(Calendar.THURSDAY, dateCheckFilter.getDayOfWeek(\"thur\")); assertEquals(Calendar.FRIDAY, dateCheckFilter.getDayOfWeek(\"friday\")); assertEquals(Calendar.SATURDAY, dateCheckFilter.getDayOfWeek(\"sob\")); assertEquals(Calendar.SATURDAY, dateCheckFilter.getDayOfWeek(\"niedz\")); assertEquals(Calendar.SUNDAY, dateCheckFilter.getDayOfWeek(\"niedz\")); assertEquals(Calendar.SUNDAY, dateCheckFilter.getDayOfWeek(\"niedz\")); assertEquals(Calendar.SUNDAY, dateCheckFilter.getDayOfWeek(\"niedz\")); }\n"
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-core/src/test/java/org/languagetool/tools/StringToolsTest###testFilterXML",
        "generated_path": "StringToolsTest###testFilterXML.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void testFilterXML() { System.out.println(\"filterXML\"); String str = \"\"; String expResult = \"\"; String result = StringTools.filterXML(str); assertEquals(expResult, result); str = \"\"; expResult = \"\"; result = StringTools.filterXML(str); assertEquals(expResult, result); str = \"\"; expResult = \"\"; result = StringTools.filterXML(str); assertEquals(expResult, result); str = \"\"; expResult = \"\"; result = StringTools.filterXML(str); assertEquals(expResult, result); str = \"\"; expResult = \"\"; result = StringTools.filterXML(str); assertEquals(expResult, result); str = \"\"; expResult = \"\"; result = StringTools.filterXML(str); assertEquals(expResult, result); str = \"\"; expResult = \"\"; result = StringTools.filterXML(str); assertEquals(expResult, result); str = \"\"; expResult = \"\"; result = StringTools.filterXML(str); assertEquals(expResult, result); str = \"\"; expResult = \"\"; result = StringTools.filterXML(str); assertEquals(expResult, result); }\n"
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-gui-commons/src/test/java/org/languagetool/gui/ToolsTest###testGetMnemonic",
        "generated_path": "ToolsTest###testGetMnemonic.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetMnemonic() { assertEquals(\\'u0000\\', Tools.getMnemonic(\"&&\")); assertEquals(\\'u0000\\', Tools.getMnemonic(\"&&\")); assertEquals(\\'u0000\\', Tools.getMnemonic(\"&&\")); assertEquals(\\'u0000\\', Tools.getMnemonic(\"&&\")); assertEquals(\\'u0000\\', Tools.getMnemonic(\"&&\")); assertEquals(\\'u0000\\', Tools.getMnemonic(\"&&\")); assertEquals(\\'u0000\\', Tools.getMnemonic(\"&&\")); assertEquals(\\'u0000\\', Tools.getMnemonic(\"&&\")); assertEquals(\\'u0000\\', Tools.getMnemonic(\"&&\")); assertEquals(\\'u0000\\', Tools.getMnemonic(\"&&&\")); assertEquals(\\'u0000\\', Tools.getMnemonic(\"&&&\")); assertEquals(\\'u0000\\', Tools.getMnemonic(\"&&&\")); assertEquals(\\'u0000\\', Tools.getMnemonic(\"&&&\")); assertEquals(\\'u0000\\', Tools.getMnemonic(\"&&&\")); assertEquals(\\'u0000\\', Tools.getMnemonic(\"&&&\")); assertEquals(\\'u0000\\', Tools.getMnemonic(\"&&&\")); assertEquals(\\'u0000\\', Tools.getMnemonic(\"&&&\")); assertEquals(\\'u0000\\', Tools.getMnemonic(\"&&&\")); assertEquals(\\'u0000\\', Tools.getMnemonic"
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-wikipedia/src/test/java/org/languagetool/dev/wikipedia/WikipediaQuickCheckTest###testGetPlainText",
        "generated_path": "WikipediaQuickCheckTest###testGetPlainText.java",
        "Compile_result": 1,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetPlainText() throws IOException, PageNotFoundException { WikipediaQuickCheck test = new WikipediaQuickCheck(); String plainText = test.getPlainText(\"This is a test\"); assertEquals(\"This is a test\", plainText); }\n"
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-core/src/test/java/org/languagetool/rules/SameRuleGroupFilterTest###testFilter",
        "generated_path": "SameRuleGroupFilterTest###testFilter.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testFilter() { SameRuleGroupFilter filter = new SameRuleGroupFilter(); List<RuleMatch> ruleMatches = new ArrayList<>(); ruleMatches.add(new RuleMatch(new HashSet<>(Arrays.asList(new RuleMatch(new HashSet<>(Arrays.asList(new RuleMatch(new HashSet<>(Arrays.asList(new RuleMatch(new HashSet<>(Arrays.asList(new RuleMatch(new HashSet<>(Arrays.asList(new RuleMatch(new HashSet<>(Arrays.asList(new RuleMatch(new HashSet<>(Arrays.asList(new RuleMatch(new HashSet<>(Arrays.asList(new RuleMatch(new HashSet<>(Arrays.asList(new RuleMatch(new HashSet<>(Arrays.asList(new RuleMatch(new HashSet<>(Arrays.asList(new RuleMatch(new HashSet<>(Arrays.asList(new RuleMatch(new HashSet<>(Arrays.asList(new RuleMatch(new HashSet<>(Arrays.asList(new RuleMatch(new HashSet<>(Arrays.asList(new RuleMatch(new HashSet<>(Arrays.asList(new RuleMatch(new HashSet<>(Arrays.asList(new RuleMatch(new HashSet<>(Arrays.asList(new RuleMatch(new HashSet<>(Arrays.asList(new HashSet<>(Arrays.asList(new RuleMatch(new HashSet<>(Arrays.asList(new RuleMatch(new HashSet<>(Arrays.asList"
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-core/src/test/java/org/languagetool/rules/RuleWithMaxFilterTest###testFilter",
        "generated_path": "RuleWithMaxFilterTest###testFilter.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public final void testFilter() { List<RuleMatch> ruleMatches = new ArrayList<>(); ruleMatches.add(new RuleMatch(new HashSet<>(Arrays.asList(new RuleMatch(new HashSet<>(Arrays.asList(new RuleMatch(new HashSet<>(Arrays.asList(new RuleMatch(new HashSet<>(Arrays.asList(new RuleMatch(new HashSet<>(Arrays.asList(new RuleMatch(new HashSet<>(Arrays.asList(new RuleMatch(new HashSet<>(Arrays.asList(new RuleMatch(new HashSet<>(Arrays.asList(new RuleMatch(new HashSet<>(Arrays.asList(new RuleMatch(new HashSet<>(Arrays.asList(new RuleMatch(new HashSet<>(Arrays.asList(new RuleMatch(new HashSet<>(Arrays.asList(new RuleMatch(new HashSet<>(Arrays.asList(new RuleMatch(new HashSet<>(Arrays.asList(new RuleMatch(new HashSet<>(Arrays.asList(new RuleMatch(new HashSet<>(Arrays.asList(new RuleMatch(new HashSet<>(Arrays.asList(new RuleMatch(new HashSet<>(Arrays.asList(new RuleMatch(new HashSet<>(Arrays.asList(new HashSet<>(Arrays.asList(new RuleMatch(new HashSet<>(Arrays.asList(new RuleMatch(new HashSet<>(Arrays.asList(new RuleMatch(new HashSet<>(Arrays."
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-core/src/test/java/org/languagetool/AnalyzedTokenReadingsTest###testToString",
        "generated_path": "AnalyzedTokenReadingsTest###testToString.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testToString() { AnalyzedTokenReadings readings = new AnalyzedTokenReadings(new AnalyzedToken[] { new AnalyzedToken(\"a\", \"test\"), new AnalyzedToken(\"b\", \"test\"), new AnalyzedToken(\"c\", \"test\"), new AnalyzedToken(\"d\", \"test\"), new AnalyzedToken(\"e\", \"test\"), new AnalyzedToken(\"f\", \"test\"), new AnalyzedToken(\"g\", \"test\"), new AnalyzedToken(\"g\", \"test\"), new AnalyzedToken(\"g\", \"test\"), new AnalyzedToken(\"g\", \"test\"), new AnalyzedToken(\"g\", \"test\"), new AnalyzedToken(\"g\", \"test\"), new AnalyzedToken(\"g\", \"test\"), new AnalyzedToken(\"g\", \"test\"), new AnalyzedToken(\"g\", \"test\"), new AnalyzedToken(\"g\", \"test\"), new AnalyzedToken(\"g\", \"test\"), new AnalyzedToken(\"g\", \"test\"), new AnalyzedToken(\"g\", \"test\"), new AnalyzedToken(\"g\", \"test\"), new AnalyzedToken(\"g\", \"test\"), new AnalyzedToken(\"g\", \"test\"), new AnalyzedToken(\"g\", \"test\"), new AnalyzedToken(\"g\", \"test\"), new AnalyzedToken(\"g\", \"test\"), new AnalyzedToken(\"g\", \"test\"), new Analyzed"
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-standalone/src/test/java/org/languagetool/language/en/translation/BeoLingusTranslatorTest###testCleanTranslationForReplace",
        "generated_path": "BeoLingusTranslatorTest###testCleanTranslationForReplace.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testCleanTranslationForReplace() throws IOException { System.out.println(\"cleanTranslationForReplace\"); BeoLingusTranslator instance = new BeoLingusTranslator(null); String result = instance.cleanTranslationForReplace(\"\", \"to\"); assertEquals(\"to\", result); }\n"
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-language-modules/pt/src/test/java/org/languagetool/tokenizers/pt/PortugueseWordTokenizerTest###testTokenize",
        "generated_path": "PortugueseWordTokenizerTest###testTokenize.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testSimple() { List<String> tokens = new PortugueseWordTokenizer().tokenize(\"1,2,3,4,5,6,7,8,9,10,11,12,13,13,14,15,16,17,18,19,20,21,21,22,22,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24"
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-core/src/test/java/org/languagetool/rules/ConfusionSetTest###testEquals",
        "generated_path": "ConfusionSetTest###testEquals.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testEquals() { ConfusionSet confs1 = new ConfusionSet(1, new HashSet<ConfusionString>()); ConfusionSet confs2 = new ConfusionSet(1, new HashSet<ConfusionString>()); ConfusionSet confs3 = new ConfusionSet(1, new HashSet<ConfusionString>()); ConfusionSet confs4 = new ConfusionSet(1, new HashSet<ConfusionString>()); ConfusionSet confs5 = new ConfusionSet(1, new HashSet<ConfusionString>()); ConfusionSet confs6 = new ConfusionSet(1, new HashSet<ConfusionString>()); ConfusionSet confs7 = new ConfusionSet(1, new HashSet<ConfusionString>()); ConfusionSet confs8 = new ConfusionSet(1, new HashSet<ConfusionString>()); ConfusionSet confs9 = new ConfusionSet(1, new HashSet<ConfusionString>()); ConfusionSet confs10 = new ConfusionSet(1, new HashSet<ConfusionString>()); ConfusionSet confs11 = new ConfusionSet(1, new HashSet<ConfusionString>()); ConfusionSet confs11 = new ConfusionSet(1, new HashSet<ConfusionString>()); ConfusionSet confs12 = new ConfusionSet(1, new HashSet<ConfusionString>()); ConfusionSet confs13 = new ConfusionSet(1, new HashSet<ConfusionString>()); Confusion"
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-standalone/src/test/java/org/languagetool/LanguageTest###testCreateDefaultJLanguageTool",
        "generated_path": "LanguageTest###testCreateDefaultJLanguageTool.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testCreateDefaultJLanguageTool() throws Exception { }\n"
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-core/src/test/java/org/languagetool/rules/patterns/PatternRuleHandlerTest###testReplaceSpacesInRegex",
        "generated_path": "PatternRuleHandlerTest###testReplaceSpacesInRegex.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testReplaceSpacesInRegex() throws SAXException { PatternRuleHandler handler = new PatternRuleHandler(); String result = handler.replaceSpacesInRegex(\"[a-zA-Z0-9]+\"); assertEquals(\"[a-zA-Z0-9]+\", result); result = handler.replaceSpacesInRegex(\"[a-zA-Z0-9]+\"); assertEquals(\"[a-zA-Z0-9]+\", result); result = handler.replaceSpacesInRegex(\"[a-zA-Z0-9]+\"); assertEquals(\"[a-zA-Z0-9]+\", result); result = handler.replaceSpacesInRegex(\"[a-zA-Z0-9]+\"); assertEquals(\"[a-zA-Z0-9]+\", result); result = handler.replaceSpacesInRegex(\"[a-zA-Z0-9]+\"); assertEquals(\"[a-zA-Z0-9]+\", result); result = handler.replaceSpacesInRegex(\"[a-zA-Z0-9]+\"); assertEquals(\"[a-zA-Z0-9]+\", result); result = handler.replaceSpacesInRegex(\"[a-zA-Z0-9]+\"); assertEquals(\"[a-zA-Z0-9]+\", result); result = handler.replaceSpacesInRegex(\"[a-zA-Z0-9]+\"); assertEquals(\"[a-zA-Z0-9]+\", result); }\n"
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-language-modules/de/src/test/java/org/languagetool/rules/de/GermanSpellerRuleTest###testAddIgnoreWords",
        "generated_path": "GermanSpellerRuleTest###testAddIgnoreWords.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testAddIgnoreWords() throws IOException { GermanSpellerRule rule = new GermanSpellerRule(messages, language, userConfig, languageVariantPlainTextDict); List<String> wordsToBeIgnoredInCompounds = new ArrayList<String>(); wordsToBeIgnoredInCompounds.add(\"\u00df\"); wordsToBeIgnoredInCompounds.add(\"\u00df\"); wordsToBeIgnoredInCompounds.add(\"\u00df\"); wordsToBeIgnoredInCompounds.add(\"\u00df\"); wordsToBeIgnoredInCompounds.add(\"\u00df\"); wordsToBeIgnoredInCompounds.add(\"\u00df\"); wordsToBeIgnoredInCompounds.add(\"\u00df\"); wordsToBeIgnoredInCompounds.add(\"\u00df\"); wordsToBeIgnoredInCompounds.add(\"\u00df\"); wordsToBeIgnoredInCompounds.add(\"\u00df\"); wordsToBeIgnoredInCompounds.add(\"\u00df\"); wordsToBeIgnoredInCompounds.add(\"\u00df\"); wordsToBeIgnoredInCompounds.add(\"\u00df\"); wordsToBeIgnoredInCompounds.add(\"\u00df\"); wordsToBeIgnoredInCompounds.add(\"\u00df\"); wordsToBeIgnoredInCompounds.add(\"\u00df\"); wordsToBeIgnoredInCompounds.add(\"\u00df\"); wordsToBeIgnoredInCompounds.add(\"\u00df\"); wordsToBeIgnoredInCompounds.add(\"\u00df\"); wordsToBeIgnoredInCompounds.add(\"\u00df\"); wordsToBeIgnoredInCompounds.add(\"\u00df\"); wordsToBeIgnoredInCompounds.add"
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-language-modules/es/src/test/java/org/languagetool/tokenizers/es/SpanishWordTokenizerTest###testTokenize",
        "generated_path": "SpanishWordTokenizerTest###testTokenize.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testTokenize() { List<String> tokens = tokenizer.tokenize(\"1.2.3.4\"); assertEquals(1, tokens.size()); assertEquals(\"1.2.3.4\", tokens.get(0)); assertEquals(\"1.2.3.4\", tokens.get(1)); assertEquals(\"1.2.3.4\", tokens.get(2)); assertEquals(\"1.2.3.4\", tokens.get(3)); assertEquals(\"1.2.3.4\", tokens.get(4)); assertEquals(\"1.2.3.4\", tokens.get(5)); assertEquals(\"1.2.3.4\", tokens.get(6)); assertEquals(\"1.2.3.4\", tokens.get(7)); assertEquals(\"1.2.3.4\", tokens.get(8)); assertEquals(\"1.2.3.4\", tokens.get(9)); assertEquals(\"1.2.3.4\", tokens.get(10)); assertEquals(\"1.2.3.4\", tokens.get(11)); assertEquals(\"1.2.3.4\", tokens.get(12)); assertEquals(\"1.2.3.4\", tokens.get(13)); assertEquals(\"1.2.3.4\", tokens.get(14)); }\n"
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-core/src/test/java/org/languagetool/AnalyzedTokenReadingsTest###testHasPosTag",
        "generated_path": "AnalyzedTokenReadingsTest###testHasPosTag.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testHasPosTag() { assertTrue(readings1.hasPosTag(\"test\")); assertTrue(readings2.hasPosTag(\"test\")); assertTrue(readings3.hasPosTag(\"test\")); assertTrue(readings4.hasPosTag(\"test\")); assertTrue(readings5.hasPosTag(\"test\")); assertTrue(readings6.hasPosTag(\"test\")); assertTrue(readings7.hasPosTag(\"test\")); assertTrue(readings8.hasPosTag(\"test\")); assertTrue(readings8.hasPosTag(\"test\")); assertTrue(readings8.hasPosTag(\"test\")); assertTrue(readings8.hasPosTag(\"test\")); assertTrue(readings8.hasPosTag(\"test\")); assertTrue(readings8.hasPosTag(\"test\")); assertTrue(readings8.hasPosTag(\"test\")); assertTrue(readings8.hasPosTag(\"test\")); assertTrue(readings8.hasPosTag(\"test\")); assertTrue(readings8.hasPosTag(\"test\")); assertTrue(readings8.hasPosTag(\"test\")); assertTrue(readings8.hasPosTag(\"test\")); assertTrue(readings8.hasPosTag(\"test\")); assertTrue(readings8.hasPosTag(\"test\")); assertTrue(readings8.hasPosTag(\"test\"));"
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-core/src/test/java/org/languagetool/tools/StringToolsTest###testReaderToString",
        "generated_path": "StringToolsTest###testReaderToString.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testReaderToString() throws IOException { assertEquals(\"\", StringTools.readerToString(new StringReader(\"\"))); assertEquals(\"\", StringTools.readerToString(new StringReader(\"\\\\n\"))); assertEquals(\"\", StringTools.readerToString(new StringReader(\"\\\\n\"))); assertEquals(\"\", StringTools.readerToString(new StringReader(\"\\\\n\"))); assertEquals(\"\", StringTools.readerToString(new StringReader(\"\\\\n\"))); assertEquals(\"\", StringTools.readerToString(new StringReader(\"\\\\n\"))); assertEquals(\"\", StringTools.readerToString(new StringReader(\"\\\\n\"))); assertEquals(\"\", StringTools.readerToString(new StringReader(\"\\\\n\"))); assertEquals(\"\", StringTools.readerToString(new StringReader(\"\\\\n\"))); assertEquals(\"\", StringTools.readerToString(new StringReader(\"\\\\n\"))); assertEquals(\"\", StringTools.readerToString(new StringReader(\"\\\\n\"))); assertEquals(\"\", StringTools.readerToString(new StringReader(\"\\\\n\"))); assertEquals(\"\", StringTools.readerToString(new StringReader(\"\\\\n\"))); assertEquals(\"\", StringTools.readerToString(new StringReader(\"\\\\n\"))); assertEquals(\"\", StringTools.readerToString(new StringReader(\"\\\\n\"))); assertEquals(\"\", StringTools.readerToString(new StringReader(\"\\\\n\"))); assertEquals(\"\", StringTools.readerToString(new StringReader(\"\\\\n\"))); assertEquals(\""
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-language-modules/en/src/test/java/org/languagetool/tokenizers/en/EnglishWordTokenizerTest###testTokenize",
        "generated_path": "EnglishWordTokenizerTest###testTokenize.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testEnglishWordTokenizer() { List<String> words = tokenizer.tokenize(\"\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\ufffd"
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-language-modules/ja/src/test/java/org/languagetool/tokenizers/ja/JapaneseWordTokenizerTest###testTokenize",
        "generated_path": "JapaneseWordTokenizerTest###testTokenize.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testJapaneseWordTokenizer() throws Exception { JapaneseWordTokenizer tokenizer = new JapaneseWordTokenizer(); List<String> tokens = tokenizer.tokenize(\"Japanese\"); assertEquals(2, tokens.size()); assertEquals(\"Japanese\", tokens.get(0).getSurface()); assertEquals(\"Japanese\", tokens.get(1).getSurface()); assertEquals(\"Japanese\", tokens.get(2).getSurface()); assertEquals(\"Japanese\", tokens.get(3).getSurface()); assertEquals(\"Japanese\", tokens.get(4).getSurface()); assertEquals(\"Japanese\", tokens.get(5).getSurface()); assertEquals(\"Japanese\", tokens.get(6).getSurface()); assertEquals(\"Japanese\", tokens.get(7).getSurface()); assertEquals(\"Japanese\", tokens.get(8).getSurface()); assertEquals(\"Japanese\", tokens.get(9).getSurface()); assertEquals(\"Japanese\", tokens.get(10).getSurface()); assertEquals(\"Japanese\", tokens.get(11).getSurface()); assertEquals(\"Japanese\", tokens.get(12).getSurface()); assertEquals(\"Japanese\", tokens.get(13).getSurface()); assertEquals(\"Japanese\", tokens.get(14).getSurface()); assertEquals(\"Japanese\", tokens.get(15).getSurface()); assertEquals(\"Japanese\", tokens.get"
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-language-modules/fr/src/test/java/org/languagetool/tokenizers/fr/FrenchWordTokenizerTest###testTokenize",
        "generated_path": "FrenchWordTokenizerTest###testTokenize.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testFrenchWordTokenizer() { final FrenchWordTokenizer tokenizer = new FrenchWordTokenizer(); final List<String> words = tokenizer.tokenize
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-core/src/test/java/org/languagetool/tools/StringToolsTest###testAddSpace",
        "generated_path": "StringToolsTest###testAddSpace.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testAddSpace() { assertEquals(\" \", StringTools.addSpace(\" \", Language.fr)); assertEquals(\" \", StringTools.addSpace(\" \", Language.fr)); assertEquals(\" \", StringTools.addSpace(\" \", Language.fr)); assertEquals(\" \", StringTools.addSpace(\" \", Language.fr)); assertEquals(\" \", StringTools.addSpace(\" \", Language.fr)); assertEquals(\" \", StringTools.addSpace(\" \", Language.fr)); assertEquals(\" \", StringTools.addSpace(\" \", Language.fr)); assertEquals(\" \", StringTools.addSpace(\" \", Language.fr)); assertEquals(\" \", StringTools.addSpace(\" \", Language.fr)); assertEquals(\" \", StringTools.addSpace(\" \", Language.fr)); assertEquals(\" \", StringTools.addSpace(\" \", Language.fr)); assertEquals(\" \", StringTools.addSpace(\" \", Language.fr)); assertEquals(\" \", StringTools.addSpace(\" \", Language.fr)); assertEquals(\" \", StringTools.addSpace(\" \", Language.fr)); assertEquals(\" \", StringTools.addSpace(\" \", Language.fr)); assertEquals(\" \", StringTools.addSpace(\" \", Language.fr)); assertEquals(\" \", StringTools.addSpace(\" \", Language.fr)); assertEquals(\" \", StringTools.addSpace(\" \", Language.fr)); assertEquals(\" \", StringTools.addSpace(\" \", Language.fr)); assertEquals(\" \", StringTools.addSpace(\" \", Language.fr)); assertEquals(\" \", StringTools.addSpace"
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-standalone/src/test/java/org/languagetool/language/en/translation/BeoLingusTranslatorTest###testTranslate",
        "generated_path": "BeoLingusTranslatorTest###testTranslate.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testTranslate() throws IOException { List<TranslationEntry> result = this.translator.translate(\"test\", \"en\", \"de\"); Assert.assertEquals(2, result.size()); Assert.assertEquals(\"test\", result.get(0).getL1()); Assert.assertEquals(\"test\", result.get(1).getL1()); Assert.assertEquals(\"test\", result.get(2).getL1()); Assert.assertEquals(\"test\", result.get(3).getL1()); Assert.assertEquals(\"test\", result.get(4).getL1()); Assert.assertEquals(\"test\", result.get(5).getL1()); Assert.assertEquals(\"test\", result.get(6).getL1()); Assert.assertEquals(\"test\", result.get(7).getL1()); Assert.assertEquals(\"test\", result.get(8).getL1()); Assert.assertEquals(\"test\", result.get(9).getL1()); Assert.assertEquals(\"test\", result.get(10).getL1()); Assert.assertEquals(\"test\", result.get(11).getL1()); Assert.assertEquals(\"test\", result.get(12).getL1()); Assert.assertEquals(\"test\", result.get(13).getL1()); Assert.assertEquals(\"test\", result.get(14).getL1()); Assert.assertEquals(\"test\", result.get(15).getL1()); Assert.assertEquals"
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-core/src/test/java/org/languagetool/tokenizers/WordTokenizerTest###testTokenize",
        "generated_path": "WordTokenizerTest###testTokenize.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testTokenize() { List<String> tokens = WordTokenizer.tokenize(\"http: assertEquals(2, tokens.size()); assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assert"
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-language-modules/eo/src/test/java/org/languagetool/tokenizers/eo/EsperantoWordTokenizerTest###testTokenize",
        "generated_path": "EsperantoWordTokenizerTest###testTokenize.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testTokenize() { List<String> tokens = tokenizer.tokenize(\"a\"); Assert.assertEquals(1, tokens.size()); Assert.assertEquals(\"a\", tokens.get(0)); Assert.assertEquals(\"a\", tokens.get(1)); Assert.assertEquals(\"a\", tokens.get(2)); Assert.assertEquals(\"a\", tokens.get(3)); Assert.assertEquals(\"a\", tokens.get(4)); Assert.assertEquals(\"a\", tokens.get(5)); Assert.assertEquals(\"a\", tokens.get(6)); Assert.assertEquals(\"a\", tokens.get(7)); Assert.assertEquals(\"a\", tokens.get(8)); Assert.assertEquals(\"a\", tokens.get(9)); Assert.assertEquals(\"a\", tokens.get(10)); Assert.assertEquals(\"a\", tokens.get(11)); Assert.assertEquals(\"a\", tokens.get(12)); Assert.assertEquals(\"a\", tokens.get(13)); Assert.assertEquals(\"a\", tokens.get(14)); Assert.assertEquals(\"a\", tokens.get(15)); Assert.assertEquals(\"a\", tokens.get(16)); Assert.assertEquals(\"a\", tokens.get(17)); Assert.assertEquals(\"a\", tokens.get(18)); Assert.assertEquals(\"a\", tokens.get(19)); Assert.assertEquals(\"a\", tokens.get(19)); Assert.assertEquals(\"a\", tokens.get(19"
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-core/src/test/java/org/languagetool/rules/patterns/AbstractPatternRulePerformerTest###testTestAllReadings",
        "generated_path": "AbstractPatternRulePerformerTest###testTestAllReadings.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testSingleReadings() throws IOException { AnalyzedTokenReadings[] readings = new AnalyzedTokenReadings[]{ new AnalyzedTokenReadings(new AnalyzedToken(ILLEGAL_WORD, \"one\"), new AnalyzedToken(ILLEGAL_WORD, \"two\"), new AnalyzedToken(ILLEGAL_WORD, \"three\"), new AnalyzedToken(ILLEGAL_WORD, \"four\"), new AnalyzedToken(ILLEGAL_WORD, \"five\"), new AnalyzedToken(ILLEGAL_WORD, \"fifth\"), new AnalyzedToken(ILLEGAL_WORD, \"fifth\"), new AnalyzedToken(ILLEGAL_WORD, \"fifth\"), new AnalyzedToken(ILLEGAL_WORD, \"fifth\"), new AnalyzedToken(ILLEGAL_WORD, \"fifth\"), new AnalyzedToken(ILLEGAL_WORD, \"fifth\"), new AnalyzedToken(ILLEGAL_WORD, \"fifth\"), new AnalyzedToken(ILLEGAL_WORD, \"fifth\"), new AnalyzedToken(ILLEGAL_WORD, \"fifth\"), new AnalyzedToken(ILLEGAL_WORD, \"fifth\"), new AnalyzedToken(ILLEGAL_WORD, \"fifth\"), new AnalyzedToken(ILLEGAL_WORD, \"fifth\"),"
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-core/src/test/java/org/languagetool/rules/CleanOverlappingFilterTest###testFilter",
        "generated_path": "CleanOverlappingFilterTest###testFilter.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test(expected = IllegalArgumentException.class) public void testFilterWithNoSuggestedReplacements() { List<RuleMatch> ruleMatches = new ArrayList<>(); ruleMatches.add(new RuleMatch(new Rule(\"a\", \"b\"), new Rule(\"c\", \"d\"))); ruleMatches.add(new RuleMatch(new Rule(\"a\", \"b\"), new Rule(\"c\", \"d\"))); ruleMatches.add(new RuleMatch(new Rule(\"a\", \"b\"), new Rule(\"c\", \"d\"))); ruleMatches.add(new RuleMatch(new Rule(\"a\", \"b\"), new Rule(\"c\", \"d\"))); ruleMatches.add(new RuleMatch(new Rule(\"a\", \"b\"), new Rule(\"c\", \"d\"))); ruleMatches.add(new RuleMatch(new Rule(\"a\", \"b\"), new Rule(\"c\", \"d\"))); ruleMatches.add(new RuleMatch(new Rule(\"a\", \"b\"), new Rule(\"c\", \"d\"))); ruleMatches.add(new RuleMatch(new Rule(\"a\", \"b\"), new Rule(\"c\", \"d\"))); ruleMatches.add(new RuleMatch(new Rule(\"a\", \"b\"), new Rule(\"c\", \"d\"))); ruleMatches.add(new RuleMatch(new Rule(\"a\", \"b\"), new Rule(\"c\", \"d\"))); ruleMatches.add(new"
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-standalone/src/test/java/org/languagetool/rules/spelling/VagueSpellCheckerTest###testIsValidWord",
        "generated_path": "VagueSpellCheckerTest###testIsValidWord.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testVagueSpellChecker() { VagueSpellChecker checker = new VagueSpellChecker(); Assert.assertTrue(checker.isValidWord(\"test\", new Language(\"en\"))); Assert.assertTrue(checker.isValidWord(\"test\", new Language(\"en\"))); Assert.assertTrue(checker.isValidWord(\"test\", new Language(\"en\"))); Assert.assertTrue(checker.isValidWord(\"test\", new Language(\"en\"))); Assert.assertTrue(checker.isValidWord(\"test\", new Language(\"en\"))); Assert.assertTrue(checker.isValidWord(\"test\", new Language(\"en\"))); Assert.assertTrue(checker.isValidWord(\"test\", new Language(\"en\"))); Assert.assertTrue(checker.isValidWord(\"test\", new Language(\"en\")); Assert.assertTrue(checker.isValidWord(\"test\", new Language(\"en\")); Assert.assertTrue(checker.isValidWord(\"test\", new Language(\"en\")); Assert.assertTrue(checker.isValidWord(\"test\", new Language(\"en\")); Assert.assertTrue(checker.isValidWord(\"test\", new Language(\"en\")); Assert.assertTrue(checker.isValidWord(\"test\", new Language(\"en\")); Assert.assertTrue(checker.isValidWord(\"test\", new Language(\"en\")); Assert.assertTrue(checker.isValidWord(\"test\", new Language(\"en\")); Assert.assertTrue(checker.isValidWord(\"test\", new Language(\"en\")); Assert.assertTrue"
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-language-modules/ga/src/test/java/org/languagetool/tagging/disambiguation/rules/ga/UtilsTest###testUnEclipseChar",
        "generated_path": "UtilsTest###testUnEclipseChar.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testUnEclipseChar() { System.out.println(\"unEclipseChar\"); String s = Utils.unEclipseChar(\"a\", \\'a\\', \\'a\\'); String expResult = \"a\"; String result = Utils.unEclipseChar(\"a\", \\'a\\', \\'a\\'); assertEquals(expResult, result); }\n"
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-language-modules/ga/src/test/java/org/languagetool/tagging/disambiguation/rules/ga/UtilsTest###testUnPonc",
        "generated_path": "UtilsTest###testUnPonc.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void testUnPonc() { System.out.println(\"unPonc\"); String s = \"a\"; String expResult = \"a\"; String result = Utils.unPonc(s); assertEquals(expResult, result); }\n"
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-language-modules/ru/src/test/java/org/languagetool/rules/ru/DateCheckFilterTest###testGetDayOfWeek",
        "generated_path": "DateCheckFilterTest###testGetDayOfWeek.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetDayOfWeek() { assertEquals(Calendar.FRIDAY, dateCheckFilter.getDayOfWeek(\"pon\")); assertEquals(Calendar.TUESDAY, dateCheckFilter.getDayOfWeek(\"wt\")); assertEquals(Calendar.WEDNESDAY, dateCheckFilter.getDayOfWeek(\"\u015br\")); assertEquals(Calendar.THURSDAY, dateCheckFilter.getDayOfWeek(\"czw\")); assertEquals(Calendar.THURSDAY, dateCheckFilter.getDayOfWeek(\"czw\")); assertEquals(Calendar.THURSDAY, dateCheckFilter.getDayOfWeek(\"czw\")); assertEquals(Calendar.THURSDAY, dateCheckFilter.getDayOfWeek(\"thur\")); assertEquals(Calendar.FRIDAY, dateCheckFilter.getDayOfWeek(\"friday\")); assertEquals(Calendar.SATURDAY, dateCheckFilter.getDayOfWeek(\"sob\")); assertEquals(Calendar.SATURDAY, dateCheckFilter.getDayOfWeek(\"niedz\")); assertEquals(Calendar.SUNDAY, dateCheckFilter.getDayOfWeek(\"niedz\")); assertEquals(Calendar.SUNDAY, dateCheckFilter.getDayOfWeek(\"niedz\")); assertEquals(Calendar.SUNDAY, dateCheckFilter.getDayOfWeek(\"niedz\")); }\n"
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-language-modules/ga/src/test/java/org/languagetool/tagging/disambiguation/rules/ga/UtilsTest###testGreekToLatin",
        "generated_path": "UtilsTest###testGreekToLatin.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void testGreekToLatin() { System.out.println(\"greekToLatin\"); String s = \"a\"; String expResult = \"a\"; String result = Utils.greekToLatin(s); assertEquals(expResult, result); }\n"
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-language-modules/de/src/test/java/org/languagetool/rules/de/AgreementRuleTest###testGetCategoriesCausingError",
        "generated_path": "AgreementRuleTest###testGetCategoriesCausingError.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetCategoriesCausingError() throws Exception { List<String> expected = Arrays.asList(\"KASUS\", \"GENUS\", \"NUMERUS\"); List<AnalyzedTokenReadings> tokens = new ArrayList<>(); tokens.add(new AnalyzedTokenReadings(\"KASUS\", \"KASUS\")); tokens.add(new AnalyzedTokenReadings(\"GENUS\", \"GENUS\")); tokens.add(new AnalyzedTokenReadings(\"NUMERUS\", \"NUMERUS\")); assertEquals(expected, agreementRule.getCategoriesCausingError(tokens.get(0), tokens.get(1))); assertEquals(expected, agreementRule.getCategoriesCausingError(tokens.get(2), tokens.get(3))); assertEquals(expected, agreementRule.getCategoriesCausingError(tokens.get(4), tokens.get(5))); assertEquals(expected, agreementRule.getCategoriesCausingError(tokens.get(6), tokens.get(7))); assertEquals(expected, agreementRule.getCategoriesCausingError(tokens.get(8), tokens.get(9))); assertEquals(expected, agreementRule.getCategoriesCausingError(tokens.get(9), tokens.get(10))); assertEquals(expected, agreementRule.getCategoriesCausingError(tokens.get(10), tokens.get(11))); assertEquals(expected, agreementRule.getCategoriesCausingError(tokens."
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-language-modules/ga/src/test/java/org/languagetool/tagging/disambiguation/rules/ga/UtilsTest###testUnLeniteDefiniteS",
        "generated_path": "UtilsTest###testUnLeniteDefiniteS.java",
        "Compile_result": 1,
        "Test_result": 0,
        "Gen_Test": "@Test public void testUnLeniteDefiniteS() { System.out.println(\"unLeniteDefiniteS\"); String s = Utils.unLeniteDefiniteS(\"T-s\"); System.out.println(\"unLeniteDefiniteS: \" + s); String expResult = \"S\"; String result = Utils.unLeniteDefiniteS(s); assertEquals(expResult, result); }\n"
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-core/src/test/java/org/languagetool/AnalyzedSentenceTest###testCopy",
        "generated_path": "AnalyzedSentenceTest###testCopy.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testCopy() { AnalyzedSentence sentence = new AnalyzedSentence(new AnalyzedTokenReadings[] { new AnalyzedTokenReadings(new AnalyzedTokenReadings(\"a\"), new AnalyzedTokenReadings(\"b\"), new AnalyzedTokenReadings(\"c\"), new AnalyzedTokenReadings(\"d\"), new AnalyzedTokenReadings(\"e\"), new AnalyzedTokenReadings(\"f\"), new AnalyzedTokenReadings(\"g\"), new AnalyzedTokenReadings(\"g\"), new AnalyzedTokenReadings(\"h\"), new AnalyzedTokenReadings(\"i\"), new AnalyzedTokenReadings(\"j\")) }); assertEquals(sentence, sentence.copy(new AnalyzedSentence(new AnalyzedTokenReadings[] { new AnalyzedTokenReadings(\"a\"), new AnalyzedTokenReadings(\"b\"), new AnalyzedTokenReadings(\"c\"), new AnalyzedTokenReadings(\"e\"), new AnalyzedTokenReadings(\"g\"), new AnalyzedTokenReadings(\"f\"), new AnalyzedTokenReadings(\"i\"), new AnalyzedTokenReadings(\"i\"), new AnalyzedTokenReadings(\"j\")) }\n"
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-core/src/test/java/org/languagetool/AnalyzedTokenReadingsTest###testMatchesPosTagRegex",
        "generated_path": "AnalyzedTokenReadingsTest###testMatchesPosTagRegex.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testMatchesPosTagRegex() { assertTrue(readings1.matchesPosTagRegex(POS_TAG_REGEX)); assertTrue(readings2.matchesPosTagRegex(POS_TAG_REGEX)); assertTrue(readings3.matchesPosTagRegex(POS_TAG_REGEX)); assertTrue(readings4.matchesPosTagRegex(POS_TAG_REGEX)); assertTrue(readings5.matchesPosTagRegex(POS_TAG_REGEX)); assertTrue(readings6.matchesPosTagRegex(POS_TAG_REGEX)); assertTrue(readings7.matchesPosTagRegex(POS_TAG_REGEX)); assertTrue(readings8.matchesPosTagRegex(POS_TAG_REGEX)); assertTrue(readings8.matchesPosTagRegex(POS_TAG_REGEX)); assertTrue(readings8.matchesPosTagRegex(POS_TAG_REGEX)); assertTrue(readings8.matchesPosTagRegex(POS_TAG_REGEX)); assertTrue(readings8.matchesPosTagRegex(POS_TAG_REGEX)); assertTrue(readings8.matchesPosTagRegex(POS_TAG_REGEX)); assertTrue(readings8.matchesPosTagRegex(POS_TAG_REGEX)); assertTrue(readings8.matchesPosTagRegex(POS_TAG_REGEX)); assertTrue(readings8.matchesPosTagRegex(POS_TAG_REGEX)); assertTrue(readings8.matchesPosTagRegex(POS_TAG_REGEX)); assert"
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-core/src/test/java/org/languagetool/rules/patterns/PatternRuleXmlCreatorTest###testToXML",
        "generated_path": "PatternRuleXmlCreatorTest###testToXML.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public final void testToXml() { PatternRuleId ruleId = new PatternRuleId(); ruleId.setSubId(\"1\"); language.addRuleFile(\"rule.xml\"); String xml = new PatternRuleXmlCreator().toXML(ruleId, language); assertEquals(\"<rule id=\\\\\"1\\\\\" subid=\\\\\"1\\\\\">\" + \"<rule id=\\\\\"2\\\\\" subid=\\\\\"2\\\\\">\" + \"<rule id=\\\\\"3\\\\\" subid=\\\\\"3\\\\\">\" + \"<rule id=\\\\\"4\\\\\" subid=\\\\\"4\\\\\">\" + \"<rule id=\\\\\"5\\\\\" subid=\\\\\"5\\\\\">\" + \"<rule id=\\\\\"6\\\\\" subid=\\\\\"6\\\\\">\" + \"<rule id=\\\\\"7\\\\\" subid=\\\\\"7\\\\\">\" + \"<rule id=\\\\\"7\\\\\" subid=\\\\\"7\\\\\">\" + \"<rule id=\\\\\"8\\\\\" subid=\\\\\"8\\\\\">\" + \"<rule id=\\\\\"9\\\\\" subid=\\\\\"9\\\\\"/>\" + \"<rule id=\\\\\"9\\\\\" subid=\\\\\"9\\\\\"/>\" + \"<rule id=\\\\\"9\\\\\" subid=\\\\\"9\\\\\"/>\" + \"<rule id=\\\\\"9\\\\\" subid=\\\\\"9\\\\\"/>\" + \"<rule id=\\\\\"9\\\\\" subid=\\\\\"9\\\\\"/>\" + \"<rule id=\\\\\"9\\\\\" subid=\\\\\"9\\\\\"/>\" + \"<rule id=\\\\\"9\\\\\" subid=\\\\\"9\\\\\"/>\" + \"<rule id=\\\\\"9\\\\\" subid=\\\\\"9\\\\\"/>\" + \"<rule id=\\\\\""
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-language-modules/de/src/test/java/org/languagetool/rules/de/DateCheckFilterTest###testGetMonth",
        "generated_path": "DateCheckFilterTest###testGetMonth.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetMonth() { System.out.println(\"getMonth\"); String str = \"stycznia\"; int expResult = 1; int result = instance.getMonth(str); assertEquals(expResult, result); }\n"
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-wikipedia/src/test/java/org/languagetool/dev/wikipedia/WikipediaQuickCheckTest###testCheckWikipediaMarkup",
        "generated_path": "WikipediaQuickCheckTest###testCheckWikipediaMarkup.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testCheckWikipediaMarkup() throws IOException, PageNotFoundException { WikipediaQuickCheck check = new WikipediaQuickCheck(); WikipediaQuickCheckResult result = check.checkWikipediaMarkup(new URL(\"http: new MediaWikiContent(new File(\"src/test/resources\"), \"en\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\", \""
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-core/src/test/java/org/languagetool/tagging/ner/NERServiceTest###testParseBuffer",
        "generated_path": "NERServiceTest###testParseBuffer.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testParseBuffer() throws IOException { NERService nerService = new NERService(\"http: List<Span> spans = nerService.parseBuffer(\"\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n"
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-language-modules/en/src/test/java/org/languagetool/chunking/EnglishChunkerTest###testTokenize",
        "generated_path": "EnglishChunkerTest###testTokenize.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testTokenize() { String[] tokens = chunker.tokenize(\"\u2019\"); assertEquals(2, tokens.length); assertEquals(\"\u2019\", tokens[0]); assertEquals(\"\u2019\", tokens[1]); assertEquals(\"\u2019\", tokens[2]); assertEquals(\"\u2019\", tokens[3]); assertEquals(\"\u2019\", tokens[4]); assertEquals(\"\u2019\", tokens[5]); assertEquals(\"\u2019\", tokens[6]); assertEquals(\"\u2019\", tokens[7]); assertEquals(\"\u2019\", tokens[8]); assertEquals(\"\u2019\", tokens[9]); assertEquals(\"\u2019\", tokens[10]); assertEquals(\"\u2019\", tokens[11]); assertEquals(\"\u2019\", tokens[12]); assertEquals(\"\u2019\", tokens[13]); assertEquals(\"\u2019\", tokens[14]); assertEquals(\"\u2019\", tokens[15]); assertEquals(\"\u2019\", tokens[16]); }\n"
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-core/src/test/java/org/languagetool/tools/StringToolsTest###testReadStream",
        "generated_path": "StringToolsTest###testReadStream.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testReadStream() throws IOException { String str1 = \"This is a test string\"; String str2 = \"This is a test string\"; String str3 = \"This is a test string\"; String str4 = \"This is a test string\"; String str5 = StringTools.readStream(new ByteArrayInputStream(str1.getBytes()), \"UTF-8\"); String str6 = StringTools.readStream(new ByteArrayInputStream(str2.getBytes()), \"UTF-8\"); String str7 = StringTools.readStream(new ByteArrayInputStream(str3.getBytes()), \"UTF-8\"); String str8 = StringTools.readStream(new ByteArrayInputStream(str4.getBytes()), \"UTF-8\"); String str9 = StringTools.readStream(new ByteArrayInputStream(str9.getBytes()), \"UTF-8\"); String str10 = StringTools.readStream(new ByteArrayInputStream(str10.getBytes()), \"UTF-8\"); String str11 = StringTools.readStream(new ByteArrayInputStream(str11.getBytes()), \"UTF-8\"); String str12 = StringTools.readStream(new ByteArrayInputStream(str12.getBytes()), \"UTF-8\"); String str12 = StringTools.readStream(new ByteArrayInputStream(str12.getBytes()), \"UTF-8\"); String str11 = StringTools.readStream(new ByteArrayInputStream(str11.getBytes()), \"UTF-8\"); String str12 = StringTools.readStream(new ByteArrayInputStream("
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-standalone/src/test/java/org/languagetool/LanguageAnnotatorTest###testDetectLanguages",
        "generated_path": "LanguageAnnotatorTest###testDetectLanguages.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testDetectLanguages() { LanguageAnnotator languageAnnotator = new LanguageAnnotator(); List<FragmentWithLanguage> result = languageAnnotator.detectLanguages(input, mainLang, secondLangs); Assert.assertEquals(2, result.size()); Assert.assertEquals(\"en\", result.get(0).getShortCodeWithCountryAndVariant()); Assert.assertEquals(\"en\", result.get(1).getShortCodeWithCountryAndVariant()); Assert.assertEquals(\"en\", result.get(2).getShortCodeWithCountryAndVariant()); Assert.assertEquals(\"en\", result.get(3).getShortCodeWithCountryAndVariant()); Assert.assertEquals(\"en\", result.get(4).getShortCodeWithCountryAndVariant()); Assert.assertEquals(\"en\", result.get(5).getShortCodeWithCountryAndVariant()); Assert.assertEquals(\"en\", result.get(6).getShortCodeWithCountryAndVariant()); Assert.assertEquals(\"en\", result.get(7).getShortCodeWithCountryAndVariant()); Assert.assertEquals(\"en\", result.get(8).getShortCodeWithCountryAndVariant()); Assert.assertEquals(\"en\", result.get(9).getShortCodeWithCountryAndVariant()); Assert.assertEquals(\"en\", result.get(10).getShortCodeWithCountryAndVariant()); Assert.assertEquals(\"en\", result.get(11).getShortCodeWithCountryAndVariant()); Assert.assertEquals(\"en\", result.get"
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-language-modules/en/src/test/java/org/languagetool/chunking/EnglishChunkerTest###testAddChunkTags",
        "generated_path": "EnglishChunkerTest###testAddChunkTags.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testEnglishChunker() { List<AnalyzedTokenReadings> readings = new ArrayList<>(); readings.add(new AnalyzedTokenReadings(new AnalyzedSentence(new AnalyzedSentence(new AnalyzedSentence(new AnalyzedSentence(new AnalyzedSentence(new AnalyzedSentence(new AnalyzedSentence(new AnalyzedSentence(new AnalyzedSentence(new AnalyzedSentence(new AnalyzedSentence(new AnalyzedSentence(new AnalyzedSentence(new AnalyzedSentence(new AnalyzedSentence(new AnalyzedSentence(new AnalyzedSentence(new AnalyzedSentence(new AnalyzedSentence(new AnalyzedSentence(new AnalyzedSentence(new AnalyzedSentence(new AnalyzedSentence(new AnalyzedSentence(new AnalyzedSentence(new AnalyzedSentence(new AnalyzedSentence(new AnalyzedSentence(new AnalyzedSentence(new AnalyzedSentence(new AnalyzedSentence(new AnalyzedSentence(new AnalyzedSentence(new AnalyzedSentence(new AnalyzedSentence(new AnalyzedSentence(new AnalyzedSentence(new AnalyzedSentence(new AnalyzedSentence(new AnalyzedSentence(new AnalyzedSentence(new AnalyzedSentence(new AnalyzedSentence(new AnalyzedSentence(new AnalyzedSentence(new AnalyzedSentence(new AnalyzedSentence(new AnalyzedSentence(new AnalyzedSentence(new AnalyzedSentence(new AnalyzedSentence(new AnalyzedSentence(new AnalyzedSentence(new AnalyzedSentence(new AnalyzedSentence(new AnalyzedSentence("
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-core/src/test/java/org/languagetool/rules/patterns/RegexPatternRuleTest###testMatch",
        "generated_path": "RegexPatternRuleTest###testMatch.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testCaseSensitive() throws IOException { String[] suggestions = new String[]{\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"l\", \"m\", \"l\", \"m\", \"l\", \"m\", \"l\", \"m\", \"l\", \"m\", \"l\", \"m\", \"l\", \"m\", \"m\", \"m\", \"m\", \"m\", \"m\", \"m\", \"m\", \"m\", \"m\", \"m\", \"m\", \"m\", \"m\", \"m\", \"m\", \"m\", \"m\", \"m\", \"m\", \"m\", \"m\", \"m\", \"m\", \"m\", \"m\", \"m\", \"m\", \"m\", \"m\", \"m\", \"m\", \"m\", \"m\", \"m\", \"m\", \"m\", \"m\", \"m\", \"m\", \"m\", \"m\", \"m\", \"m\", \"m\", \"m\", \"m\", \"m\", \"m\", \"m\"); AnalyzedSentence sentence = new AnalyzedSentence(new Sentence(\"This is a test.\", 0), 0); RuleMatch[] match = rule.match(sentence); assertEquals(1, match.length); assertEquals(\"This is a test.\", match[0].getDescription()); assertEquals(\"This is a test.\", match[0"
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-core/src/test/java/org/languagetool/rules/patterns/RuleFilterEvaluatorTest###testGetResolvedArguments",
        "generated_path": "RuleFilterEvaluatorTest###testGetResolvedArguments.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetResolvedArguments() throws IOException { String filterArgs = \"key:value\"; AnalyzedTokenReadings[] tokens = new AnalyzedTokenReadings[]{new AnalyzedTokenReadings(\"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a"
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-core/src/test/java/org/languagetool/rules/ConfusionPairTest###testEquals",
        "generated_path": "ConfusionPairTest###testEquals.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testEquals() { ConfusionPair cs1 = new ConfusionString(\"token1\", \"token2\", 1, true); ConfusionPair cs2 = new ConfusionString(\"token2\", \"token2\", 1, true); ConfusionPair cs3 = new ConfusionString(\"token3\", \"token3\", 1, true); ConfusionPair cs4 = new ConfusionPair(\"token4\", \"token4\", 1, true); ConfusionPair cs5 = new ConfusionPair(\"token4\", \"token4\", 1, true); ConfusionPair cs6 = new ConfusionPair(\"token4\", \"token4\", 1, true); ConfusionPair cs7 = new ConfusionPair(\"token4\", \"token4\", 1, true); ConfusionPair cs8 = new ConfusionPair(\"token4\", \"token4\", 1, true); ConfusionPair cs9 = new ConfusionPair(\"token4\", \"token4\", 1, true); ConfusionPair cs10 = new ConfusionPair(\"token4\", \"token4\", 1, true); ConfusionPair cs11 = new ConfusionPair(\"token4\", \"token4\", 1, true); ConfusionPair cs12 = new ConfusionPair(\"token4\", \"token4\", 1, true); ConfusionPair cs12 = new ConfusionPair(\"token4\", \"token4\", 1, true); ConfusionPair cs13 = new ConfusionPair(\"token4\", \"token4\", 1, true); Confusion"
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-gui-commons/src/test/java/org/languagetool/gui/ToolsTest###testShortenComment",
        "generated_path": "ToolsTest###testShortenComment.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void testShortenComment() { System.out.println(\"shortenComment\"); String comment = \"\"; String result = Tools.shortenComment(comment); assertEquals(\"\", result); }\n"
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-core/src/test/java/org/languagetool/tools/StringToolsTest###testIsWhitespace",
        "generated_path": "StringToolsTest###testIsWhitespace.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testIsWhitespace() { assertTrue(StringTools.isWhitespace(\" \")); assertTrue(StringTools.isWhitespace(\" \")); assertTrue(StringTools.isWhitespace(\" \")); assertTrue(StringTools.isWhitespace(\" \")); assertTrue(StringTools.isWhitespace(\" \")); assertTrue(StringTools.isWhitespace(\" \")); assertTrue(StringTools.isWhitespace(\" \")); assertTrue(StringTools.isWhitespace(\" \")); assertTrue(StringTools.isWhitespace(\" \")); assertTrue(StringTools.isWhitespace(\" \")); assertTrue(StringTools.isWhitespace(\" \")); assertTrue(StringTools.isWhitespace(\" \")); assertTrue(StringTools.isWhitespace(\" \")); assertTrue(StringTools.isWhitespace(\" \")); assertTrue(StringTools.isWhitespace(\" \")); assertTrue(StringTools.isWhitespace(\" \")); assertTrue(StringTools.isWhitespace(\" \")); assertTrue(StringTools.isWhitespace(\" \")); assertTrue(StringTools.isWhitespace(\" \")); assertTrue(StringTools.isWhitespace(\" \")); assertTrue(StringTools.isWhitespace(\" \")); assertTrue(StringTools.isWhitespace(\" \")); assertTrue(StringTools.isWhitespace(\" \")); assertTrue(StringTools.isWhitespace(\" \")); assertTrue(StringTools.isWhitespace(\" \")); assertTrue(StringTools.isWhitespace(\" \")); assertTrue(StringTools.isWhitespace(\" \")); assertTrue(StringTools.isWhitespace(\" \")); assert"
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-language-modules/ro/src/test/java/org/languagetool/tokenizers/ro/RomanianWordTokenizerTest###testTokenize",
        "generated_path": "RomanianWordTokenizerTest###testTokenize.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testRomanianWordTokenizer() { final List<String> tokens = tokenizer.tokenize(\"http: assertEquals(2, tokens.size()); assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals(\"http: assertEquals"
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-core/src/test/java/org/languagetool/tools/StringToolsTest###testTrimWhitespace",
        "generated_path": "StringToolsTest###testTrimWhitespace.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testTrimWhitespace() { assertEquals(\" \", StringTools.trimWhitespace(\" \")); assertEquals(\" \", StringTools.trimWhitespace(\" \")); assertEquals(\" \", StringTools.trimWhitespace(\" \")); assertEquals(\" \", StringTools.trimWhitespace(\" \")); assertEquals(\" \", StringTools.trimWhitespace(\" \")); assertEquals(\" \", StringTools.trimWhitespace(\" \")); assertEquals(\" \", StringTools.trimWhitespace(\" \")); assertEquals(\" \", StringTools.trimWhitespace(\" \")); assertEquals(\" \", StringTools.trimWhitespace(\" \")); assertEquals(\" \", StringTools.trimWhitespace(\" \")); assertEquals(\" \", StringTools.trimWhitespace(\" \")); assertEquals(\" \", StringTools.trimWhitespace(\" \")); assertEquals(\" \", StringTools.trimWhitespace(\" \")); assertEquals(\" \", StringTools.trimWhitespace(\" \")); assertEquals(\" \", StringTools.trimWhitespace(\" \")); assertEquals(\" \", StringTools.trimWhitespace(\" \")); assertEquals(\" \", StringTools.trimWhitespace(\" \")); assertEquals(\" \", StringTools.trimWhitespace(\" \")); assertEquals(\" \", StringTools.trimWhitespace(\" \")); assertEquals(\" \", StringTools.trimWhitespace(\" \")); assertEquals(\" \", StringTools.trimWhitespace(\" \")); assertEquals(\" \", StringTools.trimWhitespace(\" \")); assertEquals(\" \", StringTools.trimWhitespace(\" \")); assertEquals(\" \", StringTools.trimWhitespace(\" \")); assertEquals(\" \", StringTools.trimWhitespace(\" \")); assertEquals(\" \", StringTools.trimWhitespace"
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-dev/src/test/java/org/languagetool/dev/eval/AfterTheDeadlineEvaluatorTest###testIsExpectedErrorFound",
        "generated_path": "AfterTheDeadlineEvaluatorTest###testIsExpectedErrorFound.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testIsExpectedErrorFound() throws Exception { IncorrectExample incorrectExample = new IncorrectExample(); incorrectExample.setExample(\"<marker>\"); incorrectExample.setErrorStartPos(0); incorrectExample.setErrorEndPos(1); incorrectExample.setErrorStartPos(2); incorrectExample.setErrorStartPos(3); incorrectExample.setErrorEndPos(4); incorrectExample.setErrorStr(\"<marker>\"); incorrectExample.setErrorStartPos(5); incorrectExample.setErrorStartPos(6); incorrectExample.setErrorEndPos(7); incorrectExample.setErrorStr(\"<marker>\"); incorrectExample.setErrorStartPos(8); incorrectExample.setErrorEndPos(9); incorrectExample.setErrorStr(\"<marker>\"); incorrectExample.setErrorEndPos(10); incorrectExample.setErrorStr(\"<marker>\"); incorrectExample.setErrorStartPos(11); incorrectExample.setErrorEndPos(12); incorrectExample.setErrorStr(\"<marker>\"); incorrectExample.setErrorStr(\"<marker>\"); incorrectExample.setErrorStr(\"<marker>\"); assertTrue(afterTheDeadlineEvaluator.isExpectedErrorFound(incorrectExample, resultXml)); }\n"
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-standalone/src/test/java/org/languagetool/LanguagesTest###testGetLanguageForLocale",
        "generated_path": "LanguagesTest###testGetLanguageForLocale.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetLanguageForLocale() throws Exception { Language language = Languages.getLanguageForLocale(Locale.ENGLISH); assertNotNull(language); assertEquals(\"en-US\", language.getShortCodeWithCountryAndVariant()); }\n"
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-language-modules/de/src/test/java/org/languagetool/rules/de/GermanSpellerRuleTest###testIsMisspelled",
        "generated_path": "GermanSpellerRuleTest###testIsMisspelled.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testIsMisspelled() throws IOException { String sampleText = \"This is a test.\"; GermanSpellerRule rule = new GermanSpellerRule(messages, Language.ENGLISH); Assert.assertTrue(rule.isMisspelled(sampleText)); Assert.assertTrue(rule.isMisspelled(sampleText)); Assert.assertTrue(rule.isMisspelled(sampleText)); Assert.assertTrue(rule.isMisspelled(sampleText)); Assert.assertTrue(rule.isMisspelled(sampleText)); Assert.assertTrue(rule.isMisspelled(sampleText)); Assert.assertTrue(rule.isMisspelled(sampleText)); Assert.assertTrue(rule.isMisspelled(sampleText)); Assert.assertTrue(rule.isMisspelled(sampleText)); Assert.assertTrue(rule.isMisspelled(sampleText)); Assert.assertTrue(rule.isMisspelled(sampleText)); Assert.assertTrue(rule.isMisspelled(sampleText)); Assert.assertTrue(rule.isMisspelled(sampleText)); Assert.assertTrue(rule.isMisspelled(sampleText)); Assert.assertTrue(rule.isMisspelled(sampleText)); Assert.assertTrue(rule.isMisspelled(sampleText)); Assert.assertTrue(rule.isMisspelled(sample"
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-language-modules/de/src/test/java/org/languagetool/rules/de/GermanHelperTest###testHasReadingOfType",
        "generated_path": "GermanHelperTest###testHasReadingOfType.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testHasReadingOfType() { AnalyzedTokenReadings readings = new AnalyzedTokenReadings(); readings.addToken(new AnalyzedToken(JLanguageTool.SENTENCE_START_TAGNAME, \"test\")); readings.addToken(new AnalyzedToken(JLanguageTool.PARAGRAPH_START_TAGNAME, \"test\")); readings.addToken(new AnalyzedToken(JLanguageTool.PARAGRAPH_END_TAGNAME, \"test\")); readings.addToken(new AnalyzedToken(JLanguageTool.SENTENCE_START_TAGNAME, \"test\")); readings.addToken(new AnalyzedToken(JLanguageTool.PARAGRAPH_START_TAGNAME, \"test\")); assertTrue(GermanHelper.hasReadingOfType(readings, GermanToken.POSType.POS_NUMBER)); assertTrue(GermanHelper.hasReadingOfType(readings, GermanToken.POSType.POS_GENDER)); assertFalse(GermanHelper.hasReadingOfType(readings, GermanToken.POSType.POS_DEFITENCE)); assertFalse(GermanHelper.hasReadingOfType(readings, GermanToken.POSType.POS_NUMBER)); assertFalse(GermanHelper.hasReadingOfType(readings, GermanToken.POSType.POS_COMPLEX)); assertFalse(GermanHelper.hasReadingOfType(readings, GermanToken.POSType.POS_"
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-core/src/test/java/org/languagetool/rules/spelling/morfologik/MorfologikSpellerTest###testGetSuggestions",
        "generated_path": "MorfologikSpellerTest###testGetSuggestions.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetSuggestions() throws IOException { List<WeightedSuggestion> suggestions = morfologikSpeller.getSuggestions(\"test\"); Assert.assertEquals(3, suggestions.size()); Assert.assertTrue(suggestions.contains(new WeightedSuggestion(\"test\"))); Assert.assertTrue(suggestions.contains(new WeightedSuggestion(\"test2\"))); Assert.assertTrue(suggestions.contains(new WeightedSuggestion(\"test3\"))); Assert.assertTrue(suggestions.contains(new WeightedSuggestion(\"test4\"))); Assert.assertTrue(suggestions.contains(new WeightedSuggestion(\"test5\"))); Assert.assertTrue(suggestions.contains(new WeightedSuggestion(\"test6\"))); Assert.assertTrue(suggestions.contains(new WeightedSuggestion(\"test7\"))); Assert.assertTrue(suggestions.contains(new WeightedSuggestion(\"test8\"))); Assert.assertTrue(suggestions.contains(new WeightedSuggestion(\"test9\"))); Assert.assertTrue(suggestions.contains(new WeightedSuggestion(\"test10\"))); Assert.assertTrue(suggestions.contains(new WeightedSuggestion(\"test11\"))); Assert.assertTrue(suggestions.contains(new WeightedSuggestion(\"test12\"))); Assert.assertTrue(suggestions.contains(new WeightedSuggestion(\"test13\"))); Assert.assertTrue(suggestions.contains(new WeightedSuggestion(\""
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-core/src/test/java/org/languagetool/tools/ToolsTest###testCorrectTextFromMatches",
        "generated_path": "ToolsTest###testCorrectTextFromMatches.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testCorrectTextFromMatches() throws IOException, ParserConfigurationException, SAXException { List<RuleMatch> matches = new ArrayList<RuleMatch>(); matches.add(new RuleMatch(0, 0, \"test\", \"test\")); matches.add(new RuleMatch(1, 0, \"test\", \"test\")); matches.add(new RuleMatch(2, 0, \"test\", \"test\")); matches.add(new RuleMatch(3, 0, \"test\", \"test\")); matches.add(new RuleMatch(4, 0, \"test\", \"test\")); matches.add(new RuleMatch(5, 0, \"test\", \"test\")); matches.add(new RuleMatch(6, 0, \"test\", \"test\")); matches.add(new RuleMatch(7, 0, \"test\", \"test\")); matches.add(new RuleMatch(8, 0, \"test\", \"test\")); assertEquals(\"test\", Tools.correctTextFromMatches(\"test\", matches)); assertEquals(\"test\", Tools.correctTextFromMatches(\"test\", matches)); assertEquals(\"test\", Tools.correctTextFromMatches(\"test\", matches)); assertEquals(\"test\", Tools.correctTextFromMatches(\"test\", matches)); assertEquals(\"test\", Tools.correctTextFromMatches(\"test\", matches)); assertEquals(\"test\", Tools.correctTextFromMatches(\"test\", matches)); assertEquals(\"test\", Tools.correctTextFromMatches(\"test\", matches)); assertEquals(\""
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-language-modules/ga/src/test/java/org/languagetool/tagging/disambiguation/rules/ga/UtilsTest###testIsAllMathsChars",
        "generated_path": "UtilsTest###testIsAllMathsChars.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testIsAllMathsChars() { System.out.println(\"isAllMathsChars\"); String s = \"a\"; boolean expResult = true; boolean result = Utils.isAllMathsChars(s); assertEquals(expResult, result); s = \"a\"; expResult = false; result = Utils.isAllMathsChars(s); assertEquals(expResult, result); s = \"a\"; expResult = true; result = Utils.isAllMathsChars(s); assertEquals(expResult, result); s = \"a\"; expResult = false; result = Utils.isAllMathsChars(s); assertEquals(expResult, result); s = \"a\"; expResult = false; result = Utils.isAllMathsChars(s); assertEquals(expResult, result); s = \"a\"; expResult = false; result = Utils.isAllMathsChars(s); assertEquals(expResult, result); s = \"a\"; expResult = false; result = Utils.isAllMathsChars(s); assertEquals(expResult, result); s = \"a\"; expResult = false; result = Utils.isAllMathsChars(s); assertEquals(expResult, result); s = \"a\"; expResult = false; result = Utils.isAllMathsChars(s); assertEquals(expResult, result); s = \"a\"; expResult = false; result = Utils.isAllMathsChars(s"
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-standalone/src/test/java/org/languagetool/language/en/translation/BeoLingusTranslatorTest###testGetTranslationSuffix",
        "generated_path": "BeoLingusTranslatorTest###testGetTranslationSuffix.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetTranslationSuffix() throws IOException { BeoLingusTranslator t = new BeoLingusTranslator(new File(\"src/test/resources/beolingus.xml\")); assertEquals(\"[\", t.getTranslationSuffix(\"[]\")); assertEquals(\"[]\", t.getTranslationSuffix(\"[]\")); assertEquals(\"[]\", t.getTranslationSuffix(\"[]\")); assertEquals(\"[]\", t.getTranslationSuffix(\"[]\")); assertEquals(\"[]\", t.getTranslationSuffix(\"[]\")); assertEquals(\"[]\", t.getTranslationSuffix(\"[]\")); assertEquals(\"[]\", t.getTranslationSuffix(\"[]\")); assertEquals(\"[]\", t.getTranslationSuffix(\"[]\")); assertEquals(\"[]\", t.getTranslationSuffix(\"[]\")); assertEquals(\"[]\", t.getTranslationSuffix(\"[]\")); assertEquals(\"[]\", t.getTranslationSuffix(\"[]\")); assertEquals(\"[]\", t.getTranslationSuffix(\"[]\")); assertEquals(\"[]\", t.getTranslationSuffix(\"[]\")); assertEquals(\"[]\", t.getTranslationSuffix(\"[]\")); assertEquals(\"[]\", t.getTranslationSuffix(\"[]\")); assertEquals(\"[]\", t.getTranslationSuffix(\"[]\")); assertEquals(\"[]\", t.getTranslationSuffix(\"[]\")); assertEquals(\"[]\", t.getTranslationSuffix(\"[]\")); }\n"
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-standalone/src/test/java/org/languagetool/tagging/ManualTaggerTest###testTag",
        "generated_path": "ManualTaggerTest###testTag.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testTag() throws IOException { List<TaggedWord> result = tagger.tag(\"test\"); assertEquals(2, result.size()); assertEquals(\"test\", result.get(0).getWord()); assertEquals(\"test\", result.get(1).getWord()); assertEquals(\"test\", result.get(2).getWord()); assertEquals(\"test\", result.get(3).getWord()); assertEquals(\"test\", result.get(4).getWord()); assertEquals(\"test\", result.get(5).getWord()); assertEquals(\"test\", result.get(6).getWord()); assertEquals(\"test\", result.get(7).getWord()); assertEquals(\"test\", result.get(8).getWord()); assertEquals(\"test\", result.get(9).getWord()); assertEquals(\"test\", result.get(10).getWord()); assertEquals(\"test\", result.get(11).getWord()); assertEquals(\"test\", result.get(12).getWord()); assertEquals(\"test\", result.get(13).getWord()); assertEquals(\"test\", result.get(14).getWord()); assertEquals(\"test\", result.get(15).getWord()); assertEquals(\"test\", result.get(16).getWord()); }\n"
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-standalone/src/test/java/org/languagetool/language/en/translation/BeoLingusTranslatorTest###testSplit",
        "generated_path": "BeoLingusTranslatorTest###testSplit.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testSplit() throws IOException { List<String> parts = beolingusTranslator.split(\"a,b,c,d,e,f,g,h\"); assertEquals(2, parts.size()); assertEquals(\"a\", parts.get(0)); assertEquals(\"b\", parts.get(1)); assertEquals(\"c\", parts.get(2)); assertEquals(\"d\", parts.get(3)); assertEquals(\"e\", parts.get(4)); assertEquals(\"f\", parts.get(5)); assertEquals(\"g\", parts.get(6)); assertEquals(\"h\", parts.get(7)); assertEquals(\"h\", parts.get(8)); assertEquals(\"h\", parts.get(9)); assertEquals(\"g\", parts.get(10)); assertEquals(\"h\", parts.get(11)); assertEquals(\"h\", parts.get(12)); assertEquals(\"h\", parts.get(13)); assertEquals(\"h\", parts.get(14)); assertEquals(\"h\", parts.get(15)); assertEquals(\"h\", parts.get(16)); assertEquals(\"h\", parts.get(17)); assertEquals(\"h\", parts.get(18)); assertEquals(\"h\", parts.get(19)); assertEquals(\"h\", parts.get(19)); assertEquals(\"h\", parts.get(19)); assertEquals(\"h\", parts.get(19)); }\n"
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-core/src/test/java/org/languagetool/AnalyzedTokenReadingsTest###testHasPartialPosTag",
        "generated_path": "AnalyzedTokenReadingsTest###testHasPartialPosTag.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testHasPartialPosTag() { assertTrue(readings1.hasPartialPosTag(\"test\")); assertTrue(readings2.hasPartialPosTag(\"test\")); assertTrue(readings3.hasPartialPosTag(\"test\")); assertTrue(readings4.hasPartialPosTag(\"test\")); assertTrue(readings5.hasPartialPosTag(\"test\")); assertTrue(readings6.hasPartialPosTag(\"test\")); assertTrue(readings7.hasPartialPosTag(\"test\")); assertTrue(readings8.hasPartialPosTag(\"test\")); assertTrue(readings8.hasPartialPosTag(\"test\")); assertTrue(readings8.hasPartialPosTag(\"test\")); assertTrue(readings8.hasPartialPosTag(\"test\")); assertTrue(readings8.hasPartialPosTag(\"test\")); assertTrue(readings8.hasPartialPosTag(\"test\")); assertTrue(readings8.hasPartialPosTag(\"test\")); assertTrue(readings8.hasPartialPosTag(\"test\")); assertTrue(readings8.hasPartialPosTag(\"test\")); assertTrue(readings8.hasPartialPosTag(\"test\")); assertTrue(readings8.hasPartialPosTag(\"test\")); assertTrue(readings8.hasPartialPosTag(\"test\")); assertTrue(readings8.hasPartialPosTag(\"test\")); assertTrue(readings8."
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-language-modules/ga/src/test/java/org/languagetool/tagging/disambiguation/rules/ga/UtilsTest###testDemutate",
        "generated_path": "UtilsTest###testDemutate.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testDemutate() { System.out.println(\"demutate\"); String in = \"C[UMC]:?Noun:.*:DefArt\"; String expResult = \"C[UMC]:?Noun:.*:DefArt\"; String result = Utils.demutate(in); Assert.assertEquals(expResult, result); }\n"
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-language-modules/pl/src/test/java/org/languagetool/tokenizers/pl/PolishWordTokenizerTest###testTokenize",
        "generated_path": "PolishWordTokenizerTest###testTokenize.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testPolishWordTokenizer() { List<String> tokens = new PolishWordTokenizer().tokenize(\"a-b-c\"); assertEquals(2, tokens.size()); assertEquals(\"a-b-c\", tokens.get(0)); assertEquals(\"a-b-c\", tokens.get(1)); assertEquals(\"a-b-c\", tokens.get(2)); assertEquals(\"a-b-c\", tokens.get(3)); assertEquals(\"a-b-c\", tokens.get(4)); assertEquals(\"a-b-c\", tokens.get(5)); assertEquals(\"a-b-c\", tokens.get(6)); assertEquals(\"a-b-c\", tokens.get(7)); assertEquals(\"a-b-c\", tokens.get(8)); assertEquals(\"a-b-c\", tokens.get(9)); assertEquals(\"a-b-c\", tokens.get(10)); assertEquals(\"a-b-c\", tokens.get(11)); assertEquals(\"a-b-c\", tokens.get(12)); assertEquals(\"a-b-c\", tokens.get(13)); assertEquals(\"a-b-c\", tokens.get(14)); assertEquals(\"a-b-c\", tokens.get(15)); assertEquals(\"a-b-c\", tokens.get(16)); assertEquals(\"a-b-c\", tokens.get(17)); assertEquals(\"a-b-"
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-language-modules/uk/src/test/java/org/languagetool/rules/uk/DateCheckFilterTest###testGetDayOfWeek",
        "generated_path": "DateCheckFilterTest###testGetDayOfWeek.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetDayOfWeek() { assertEquals(Calendar.FRIDAY, dateCheckFilter.getDayOfWeek(\"pon\")); assertEquals(Calendar.TUESDAY, dateCheckFilter.getDayOfWeek(\"wt\")); assertEquals(Calendar.WEDNESDAY, dateCheckFilter.getDayOfWeek(\"\u015br\")); assertEquals(Calendar.THURSDAY, dateCheckFilter.getDayOfWeek(\"czw\")); assertEquals(Calendar.THURSDAY, dateCheckFilter.getDayOfWeek(\"czw\")); assertEquals(Calendar.THURSDAY, dateCheckFilter.getDayOfWeek(\"czw\")); assertEquals(Calendar.THURSDAY, dateCheckFilter.getDayOfWeek(\"thur\")); assertEquals(Calendar.FRIDAY, dateCheckFilter.getDayOfWeek(\"friday\")); assertEquals(Calendar.SATURDAY, dateCheckFilter.getDayOfWeek(\"sob\")); assertEquals(Calendar.SATURDAY, dateCheckFilter.getDayOfWeek(\"niedz\")); assertEquals(Calendar.SUNDAY, dateCheckFilter.getDayOfWeek(\"niedz\")); assertEquals(Calendar.SUNDAY, dateCheckFilter.getDayOfWeek(\"niedz\")); assertEquals(Calendar.SUNDAY, dateCheckFilter.getDayOfWeek(\"niedz\")); }\n"
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-standalone/src/test/java/org/languagetool/LanguagesTest###testGet",
        "generated_path": "LanguagesTest###testGet.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGet() { List<Language> languages = Languages.get(); assertEquals(1, languages.size()); assertEquals(\"xx\", languages.get(0).getShortCode()); assertEquals(\"zz\", languages.get(1).getShortCode()); assertEquals(\"xx\", languages.get(2).getShortCode()); assertEquals(\"xx\", languages.get(3).getShortCode()); assertEquals(\"xx\", languages.get(4).getShortCode()); assertEquals(\"xx\", languages.get(5).getShortCode()); assertEquals(\"xx\", languages.get(6).getShortCode()); assertEquals(\"xx\", languages.get(7).getShortCode()); assertEquals(\"xx\", languages.get(8).getShortCode()); assertEquals(\"xx\", languages.get(9).getShortCode()); assertEquals(\"xx\", languages.get(10).getShortCode()); assertEquals(\"xx\", languages.get(11).getShortCode()); assertEquals(\"xx\", languages.get(12).getShortCode()); assertEquals(\"xx\", languages.get(13).getShortCode()); assertEquals(\"xx\", languages.get(14).getShortCode()); assertEquals(\"xx\", languages.get(15).getShortCode()); }\n"
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-standalone/src/test/java/org/languagetool/LanguageAnnotatorTest###testGetTokensWithPotentialLanguages",
        "generated_path": "LanguageAnnotatorTest###testGetTokensWithPotentialLanguages.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetTokensWithPotentialLanguages() throws Exception { LanguageAnnotator languageAnnotator = new LanguageAnnotator(); List<TokenWithLanguages> tokens = languageAnnotator.getTokensWithPotentialLanguages(\"test\", mainLang, new ArrayList<>()); assertEquals(2, tokens.size()); assertEquals(\"test\", tokens.get(0).token); assertEquals(\"test\", tokens.get(1).token); assertEquals(\"test\", tokens.get(2).token); assertEquals(\"test\", tokens.get(3).token); assertEquals(\"test\", tokens.get(4).token); assertEquals(\"test\", tokens.get(5).token); assertEquals(\"test\", tokens.get(6).token); assertEquals(\"test\", tokens.get(7).token); assertEquals(\"test\", tokens.get(8).token); assertEquals(\"test\", tokens.get(9).token); assertEquals(\"test\", tokens.get(10).token); assertEquals(\"test\", tokens.get(11).token); assertEquals(\"test\", tokens.get(12).token); assertEquals(\"test\", tokens.get(13).token); assertEquals(\"test\", tokens.get(13).token); assertEquals(\"test\", tokens.get(14).token); assertEquals(\"test\", tokens.get(15).token); assertEquals(\"test\", tokens.get(16).token); assertEquals(\"test\", tokens.get(17).token); assertEquals(\"test\", tokens.get("
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-language-modules/ca/src/test/java/org/languagetool/tokenizers/ca/CatalanWordTokenizerTest###testTokenize",
        "generated_path": "CatalanWordTokenizerTest###testTokenize.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testCatalanWordTokenizer() { CatalanWordTokenizer tokenizer = new CatalanWordTokenizer(); List<String> words = tokenizer.tokenize(\"a-b-c\"); assertEquals(2, words.size()); assertEquals(\"a-b-c\", words.get(0)); assertEquals(\"a-b-c\", words.get(1)); assertEquals(\"a-b-c\", words.get(2)); assertEquals(\"a-b-c\", words.get(3)); assertEquals(\"a-b-c\", words.get(4)); assertEquals(\"a-b-c\", words.get(5)); assertEquals(\"a-b-c\", words.get(6)); assertEquals(\"a-b-c\", words.get(7)); assertEquals(\"a-b-c\", words.get(8)); assertEquals(\"a-b-c\", words.get(9)); assertEquals(\"a-b-c\", words.get(10)); assertEquals(\"a-b-c\", words.get(11)); assertEquals(\"a-b-c\", words.get(12)); assertEquals(\"a-b-c\", words.get(13)); assertEquals(\"a-b-c\", words.get(14)); assertEquals(\"a-b-c\", words.get(15)); assertEquals(\"a-b-c\", words.get(16)); assertEquals(\"a-b-c\", words."
    },
    {
        "original_path": "killme2008_xmemcached###killme2008_xmemcached/src/test/java/net/rubyeye/xmemcached/test/unittest/utils/AddrUtilTest###testGetAddressMap",
        "generated_path": "AddrUtilTest###testGetAddressMap.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetAddressMap() { Map<InetSocketAddress, InetSocketAddress> map = AddrUtil.getAddressMap(\"127.0.0.1,127.0.0.2,127.0.0.3,127.0.0.4,127.0.0.5,127.0.0.6,127.0.0.7,127.0.0.8,127.0.0.9,127.0.0.9,127.0.0.9,127.0.0.9,127.0.0.9,127.0.0.9,127.0.0.9,127.0.0.9,127.0.0.9,127.0.0.9,127.0.0.9,127.0.0.9,127.0.0.9,127.0.0.9,127.0.0.9,127.0.0.9,127.0.0.9,127.0.0.9,127.0.0.9,127.0.0.9,127.0.0.9,127.0.0.9,127.0.0.9,127.0.0.9,127.0.0.9,127.0.0.9,127.0.0.9,127.0.0.9,127.0"
    },
    {
        "original_path": "zeromq_jeromq###zeromq_jeromq/src/test/java/org/zeromq/util/ZDataTest###testEquals",
        "generated_path": "ZDataTest###testEquals.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testEquals() { byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9}; byte[] other = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9}; assertTrue(data.equals(other)); assertFalse(data.equals(new ZData(data))); assertFalse(data.equals(new ZData(other))); assertFalse(data.equals(new ZData(data))); assertFalse(data.equals(new ZData(other))); assertFalse(data.equals(new ZData(new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}))); assertFalse(data.equals(new ZData(new byte[]{1, 2, 3, 4, 5, 6, 10}))); assertFalse(data.equals(new ZData(new byte[]{1, 2, 3, 4, 5, 6, 10}))); assertFalse(data.equals(new ZData(new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9}))); assertFalse(data.equals(new ZData(new byte[]{1, 2, 3, 4, 5, 6}))); }\n"
    },
    {
        "original_path": "zeromq_jeromq###zeromq_jeromq/src/test/java/org/zeromq/ZMsgTest###testAppend",
        "generated_path": "ZMsgTest###testAppend.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void testAppend() throws Exception { }\n"
    },
    {
        "original_path": "zeromq_jeromq###zeromq_jeromq/src/test/java/org/zeromq/ZMsgTest###testHashcode",
        "generated_path": "ZMsgTest###testHashcode.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void testHashCode() throws Exception { }\n"
    },
    {
        "original_path": "zeromq_jeromq###zeromq_jeromq/src/test/java/zmq/util/TestUtils###testDump",
        "generated_path": "TestUtils###testDump.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testDump() throws Exception { System.out.println(\"dump\"); ByteBuffer buffer = ByteBuffer.allocate(10); buffer.put(new byte[10]); buffer.put(new byte[10]); buffer.put(new byte[10]); String result = Utils.dump(buffer, 0, buffer.limit()); System.out.println(result); }\n"
    },
    {
        "original_path": "zeromq_jeromq###zeromq_jeromq/src/test/java/zmq/socket/pubsub/DistTest###testMatch",
        "generated_path": "DistTest###testMatch.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testMatch() throws Exception { Dist dist = new Dist(); dist.attach(new Pipe()); dist.match(new Pipe()); assertEquals(2, dist.matching); assertEquals(2, dist.eligible); assertEquals(2, dist.matching); }\n"
    },
    {
        "original_path": "zeromq_jeromq###zeromq_jeromq/src/test/java/zmq/poll/PollerBaseTest###testCancelTimer",
        "generated_path": "PollerBaseTest###testCancelTimer.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testCancelTimer() throws Exception { PollerBase poller = new PollerBase(); IPollEvents sink = mock(IPollEvents.class); int id = 1; poller.addTimer(1, sink, id); poller.cancelTimer(sink, id); verify(sink, times(1)).cancel(eq(id), eq(true)); verify(sink, times(1)).cancel(eq(id), eq(true)); verify(sink, times(1)).cancel(eq(id), eq(true)); verify(sink, times(1)).cancel(eq(id), eq(true)); verify(sink, times(1)).cancel(eq(id), eq(true)); verify(sink, times(1)).cancel(eq(id), eq(true)); verify(sink, times(1)).cancel(eq(id), eq(true)); verify(sink, times(1)).cancel(eq(id), eq(true)); verify(sink, times(1)).cancel(eq(id), eq(true)); verify(sink, times(1)).cancel(eq(id), eq(true)); verify(sink, times(1)).cancel(eq(id), eq(true)); verify(sink, times(1)).cancel(eq(id), eq(true)); verify(sink, times(1)).cancel(eq(id), eq(true)); verify(sink, times(1))."
    },
    {
        "original_path": "zeromq_jeromq###zeromq_jeromq/src/test/java/zmq/util/TestUtils###testRealloc",
        "generated_path": "TestUtils###testRealloc.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testRealloc() throws Exception { System.out.println(\"realloc\"); byte[] src = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19,"
    },
    {
        "original_path": "zeromq_jeromq###zeromq_jeromq/src/test/java/org/zeromq/ZMsgTest###testContentSize",
        "generated_path": "ZMsgTest###testContentSize.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void testContentSize() throws Exception { }\n"
    },
    {
        "original_path": "zeromq_jeromq###zeromq_jeromq/src/test/java/org/zeromq/TestZContext###testShadow",
        "generated_path": "TestZContext###testShadow.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void testShadow() { }\n"
    },
    {
        "original_path": "zeromq_jeromq###zeromq_jeromq/src/test/java/org/zeromq/TestZPoller###testReadable",
        "generated_path": "TestZPoller###testReadable.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testReadable() throws Exception { assertTrue(zPoller.readable(new Socket())); assertTrue(zPoller.readable(new Socket())); assertFalse(zPoller.readable(new Object())); assertFalse(zPoller.readable(new Socket())); assertFalse(zPoller.readable(new Socket())); assertFalse(zPoller.readable(new Object())); assertFalse(zPoller.readable(new Socket())); assertFalse(zPoller.readable(new Socket())); assertFalse(zPoller.readable(new Socket())); assertFalse(zPoller.readable(new Socket())); assertFalse(zPoller.readable(new Socket())); assertFalse(zPoller.readable(new Socket())); assertFalse(zPoller.readable(new Socket())); assertFalse(zPoller.readable(new Socket())); assertFalse(zPoller.readable(new Socket())); assertFalse(zPoller.readable(new Socket())); assertFalse(zPoller.readable(new Socket())); assertFalse(zPoller.readable(new Socket())); assertFalse(zPoller.readable(new Socket())); assertFalse(zPoller.readable(new Socket())); assertFalse(zPoller.readable(new Socket())); assertFalse(zPoller.readable(new Socket())); assertFalse(zPoller.readable(new Socket())); assertFalse(zPoller.readable("
    },
    {
        "original_path": "zeromq_jeromq###zeromq_jeromq/src/test/java/org/zeromq/TestZPoller###testError",
        "generated_path": "TestZPoller###testError.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testErrorSocket() throws Exception { final SelectableChannel channel = mock(SelectableChannel.class); when(channel.isError()).thenReturn(true); final SelectableSocket socket = mock(SelectableSocket.class); when(socket.isConnected()).thenReturn(true); when(socket.getInputStream()).thenReturn(new ByteArrayInputStream(new byte[0])); when(socket.getInputStream()).thenReturn(new ByteArrayInputStream(new byte[0])); when(socket.getInputStream()).thenReturn(new ByteArrayInputStream(new byte[0])); when(socket.getInputStream()).thenReturn(new ByteArrayInputStream(new byte[0])); when(socket.getInputStream()).thenReturn(new ByteArrayInputStream(new byte[0])); when(socket.getInputStream()).thenReturn(new ByteArrayInputStream(new byte[0])); when(socket.getInputStream()).thenReturn(new ByteArrayInputStream(new byte[0])); when(socket.getInputStream()).thenReturn(new ByteArrayInputStream(new byte[0])); when(socket.getInputStream()).thenReturn(new ByteArrayInputStream(new byte[0])); when(socket.getInputStream()).thenReturn(new ByteArrayInputStream(new byte[0])); when(socket.getInputStream()).thenReturn(new ByteArrayInputStream(new byte[0])); when(socket.getInputStream()).thenReturn(new ByteArrayInputStream(new byte[0])); when(socket.getInputStream()).thenReturn(new ByteArrayInputStream(new"
    },
    {
        "original_path": "zeromq_jeromq###zeromq_jeromq/src/test/java/org/zeromq/ZMsgTest###testEquals",
        "generated_path": "ZMsgTest###testEquals.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testEquals() throws Exception { ZMsg msg1 = ZMsg.newStringMsg(\"test\"); ZMsg msg2 = ZMsg.newStringMsg(\"test\"); assertTrue(msg1.equals(msg2)); assertTrue(msg2.equals(msg1)); assertTrue(msg1.equals(msg2)); assertTrue(msg1.equals(msg1)); assertTrue(msg1.equals(msg2)); assertTrue(msg1.equals(msg1)); assertTrue(msg1.equals(msg2)); assertTrue(msg1.equals(msg2)); assertTrue(msg1.equals(msg1)); assertTrue(msg1.equals(msg2)); assertTrue(msg1.equals(msg1)); assertTrue(msg1.equals(msg2)); assertTrue(msg1.equals(msg1)); assertTrue(msg1.equals(msg2)); assertTrue(msg1.equals(msg1)); assertTrue(msg1.equals(msg2)); assertTrue(msg1.equals(msg1)); assertTrue(msg1.equals(msg2)); assertTrue(msg1.equals(msg1)); assertTrue(msg1.equals(msg2)); assertTrue(msg1.equals(msg1)); assertTrue(msg1.equals(msg2)); assertTrue(msg1.equals(msg1)); assertTrue(msg1.equals(msg2)); assertTrue(msg1.equals(msg2)); assertTrue(msg1"
    },
    {
        "original_path": "zeromq_jeromq###zeromq_jeromq/src/test/java/zmq/util/TestUtils###testBytes",
        "generated_path": "TestUtils###testBytes.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testBytes() throws Exception { }\n"
    },
    {
        "original_path": "zeromq_jeromq###zeromq_jeromq/src/test/java/zmq/TestMsg###testGetBytes",
        "generated_path": "TestMsg###testGetBytes.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetBytes() { System.arraycopy(new byte[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }, 0, new byte[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }, 0, 1); System.arraycopy(new byte[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }, 0, new byte[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19"
    },
    {
        "original_path": "zeromq_jeromq###zeromq_jeromq/src/test/java/org/zeromq/TestZPoller###testWritable",
        "generated_path": "TestZPoller###testWritable.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testWritable() throws Exception { final SelectableChannel channel = mock(SelectableChannel.class); when(channel.isWritable()).thenReturn(true); assertTrue(poller.writable(channel)); assertTrue(poller.writable(channel)); assertFalse(poller.writable(null)); assertFalse(poller.writable(channel)); assertFalse(poller.writable(channel)); assertFalse(poller.writable(new Object())); assertFalse(poller.writable(new Object())); assertFalse(poller.writable(new Object())); assertFalse(poller.writable(new Object())); assertFalse(poller.writable(new Object())); assertFalse(poller.writable(new Object())); assertFalse(poller.writable(new Object())); assertFalse(poller.writable(new Object())); assertFalse(poller.writable(new Object())); assertFalse(poller.writable(new Object())); assertFalse(poller.writable(new Object())); assertFalse(poller.writable(new Object())); assertFalse(poller.writable(new Object())); assertFalse(poller.writable(new Object())); assertFalse(poller.writable(new Object())); assertFalse(poller.writable(new Object())); assertFalse(poller.writable(new Object())); assertFalse(poller.writable(new Object())); assertFalse(poller.writable(new Object())); assertFalse(pol"
    },
    {
        "original_path": "zeromq_jeromq###zeromq_jeromq/src/test/java/zmq/poll/PollerBaseTest###testAddTimer",
        "generated_path": "PollerBaseTest###testAddTimer.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testAddTimer() { PollerBase poller = new PollerBase(); PollerBase.TimerInfo info = new PollerBase.TimerInfo(sink, 1); poller.addTimer(1, sink, 1); assertTrue(poller.changed); assertEquals(1, poller.timers.size()); assertEquals(1, poller.timers.get(0).getTime()); assertEquals(1, poller.timers.get(1).getTime()); assertEquals(1, poller.timers.get(1).getTime()); assertEquals(1, poller.timers.get(1).getTime()); assertEquals(1, poller.timers.get(1).getTime()); assertEquals(1, poller.timers.get(1).getTime()); assertEquals(1, poller.timers.get(1).getTime()); assertEquals(1, poller.timers.get(1).getTime()); assertEquals(1, poller.timers.get(1).getTime()); assertEquals(1, poller.timers.get(1).getTime()); assertEquals(1, poller.timers.get(1).getTime()); assertEquals(1, poller.timers.get(1).getTime()); assertEquals(1, poller.timers.get(1).getTime()); assertEquals(1, poller.timers."
    },
    {
        "original_path": "graphhopper_graphhopper###graphhopper_graphhopper/web-api/src/test/java/com/graphhopper/util/HelperTest###testUnderscoreToCamelCase",
        "generated_path": "HelperTest###testUnderscoreToCamelCase.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void testUnderScoreToCamelCase() throws Exception { System.out.println(\"underScoreToCamelCase\"); String key = \"\"; String expResult = \"\"; String result = Helper.underScoreToCamelCase(key); assertEquals(expResult, result); key = \"_\"; expResult = \"_\"; result = Helper.underScoreToCamelCase(key); assertEquals(expResult, result); key = \"_\"; expResult = \"_\"; result = Helper.underScoreToCamelCase(key); assertEquals(expResult, result); key = \"_\"; expResult = \"_\"; result = Helper.underScoreToCamelCase(key); assertEquals(expResult, result); key = \"_\"; expResult = \"_\"; result = Helper.underScoreToCamelCase(key); assertEquals(expResult, result); key = \"_\"; expResult = \"_\"; result = Helper.underScoreToCamelCase(key); assertEquals(expResult, result); key = \"_\"; expResult = \"_\"; result = Helper.underScoreToCamelCase(key); assertEquals(expResult, result); key = \"_\"; expResult = \"_\"; result = Helper.underScoreToCamelCase(key); assertEquals(expResult, result); key = \"_\"; expResult = \"_\"; result = Helper.underScoreToCamelCase(key); assertEquals(expResult, result); key = \"_\"; expResult = \"_\"; result = Helper.underScoreToCamelCase(key); assertEquals(expResult, result); }\n"
    },
    {
        "original_path": "graphhopper_graphhopper###graphhopper_graphhopper/core/src/test/java/com/graphhopper/util/SimpleIntDequeTest###testPush",
        "generated_path": "SimpleIntDequeTest###testPush.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testPush() { SimpleIntDeque instance = new SimpleIntDeque(); instance.push(1); instance.push(2); instance.push(3); instance.push(4); instance.push(5); instance.push(6); instance.push(7); instance.push(8); instance.push(9); instance.push(10); instance.push(11); instance.push(12); instance.push(13); instance.push(13); instance.push(12); instance.push(13); instance.push(13); instance.push(13); instance.push(13); instance.push(13); instance.push(13); instance.push(13); instance.push(13); instance.push(13); instance.push(13); instance.push(13); instance.push(13); instance.push(13); instance.push(13); instance.push(13); instance.push(13); instance.push(13); instance.push(13); instance.push(13); instance.push(13); instance.push(13); instance.push(13); instance.push(13); instance.push(13); instance.push(13); instance.push(13); instance.push(13); instance.push(13); instance.push(13); instance.push(13); instance.push(13); instance.push(13); instance.push(13); instance.push(13); instance.push(13);"
    },
    {
        "original_path": "graphhopper_graphhopper###graphhopper_graphhopper/core/src/test/java/com/graphhopper/reader/dem/SkadiProviderTest###testGetDownloadUrl",
        "generated_path": "SkadiProviderTest###testGetDownloadUrl.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetDownloadURL() throws Exception { System.out.println(\"getDownloadURL\"); double lat = 0.0; double lon = 0.0; String result = instance.getDownloadURL(lat, lon); System.out.println(result); }\n"
    },
    {
        "original_path": "graphhopper_graphhopper###graphhopper_graphhopper/core/src/test/java/com/graphhopper/util/shapes/CircleTest###testContains",
        "generated_path": "CircleTest###testContains.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testContains() { Circle c1 = new Circle(1.0, 2.0, 3.0); Circle c2 = new Circle(1.0, 2.0, 3.0); Assert.assertTrue(c1.contains(c2)); Assert.assertTrue(c2.contains(c1)); Assert.assertTrue(c1.contains(c2)); Assert.assertTrue(c1.contains(c2)); Assert.assertTrue(c1.contains(c1)); Assert.assertTrue(c1.contains(c2)); Assert.assertTrue(c1.contains(c1)); Assert.assertTrue(c1.contains(c2)); Assert.assertTrue(c1.contains(c1)); Assert.assertTrue(c1.contains(c1)); Assert.assertTrue(c1.contains(c1)); Assert.assertTrue(c1.contains(c1)); Assert.assertTrue(c1.contains(c1)); Assert.assertTrue(c1.contains(c1)); Assert.assertTrue(c1.contains(c1)); Assert.assertTrue(c1.contains(c1)); Assert.assertTrue(c1.contains(c1)); Assert.assertTrue(c1.contains(c1)); Assert.assertTrue(c1.contains(c1)); Assert.assertTrue(c1.contains(c1)); Assert.assertTrue(c1.contains(c1"
    },
    {
        "original_path": "graphhopper_graphhopper###graphhopper_graphhopper/core/src/test/java/com/graphhopper/util/PointListTest###testToString",
        "generated_path": "PointListTest###testToString.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testToString() { System.out.println(\"toString\"); PointList instance = new PointList(); instance.add(new GHPoint(1, 2, 3, 4)); instance.add(new GHPoint(2, 3, 4)); instance.add(new GHPoint(3, 4, 5)); instance.add(new GHPoint(4, 5, 6)); instance.add(new GHPoint(5, 6, 7)); instance.add(new GHPoint(6, 7, 8)); instance.add(new GHPoint(7, 8, 9)); instance.add(new GHPoint(8, 9, 10)); instance.add(new GHPoint(8, 9, 10)); instance.add(new GHPoint(8, 9, 10)); instance.add(new GHPoint(8, 9, 10)); instance.add(new GHPoint(8, 9, 10)); instance.add(new GHPoint(8, 9, 10)); instance.add(new GHPoint(8, 9, 10)); instance.add(new GHPoint(8, 9, 10)); instance.add(new GHPoint(8, 9, 10)); instance.add(new GHPoint(8, 9, 10)); instance.add(new GHPoint(8, 9, 10)); instance.add(new GHPoint(8, 9, 10)); instance.add(new GH"
    },
    {
        "original_path": "graphhopper_graphhopper###graphhopper_graphhopper/core/src/test/java/com/graphhopper/util/AngleCalcTest###testConvertAzimuth2xAxisAngle",
        "generated_path": "AngleCalcTest###testConvertAzimuth2xAxisAngle.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test(expected = IllegalArgumentException.class) public void testConvertAzimuth2xaxisAngle() { AngleCalc.ANGLE_CALC.convertAzimuth2xaxisAngle(0); }\n"
    },
    {
        "original_path": "graphhopper_graphhopper###graphhopper_graphhopper/core/src/test/java/com/graphhopper/util/PointListTest###testClone",
        "generated_path": "PointListTest###testClone.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testClone() { PointList list = new PointList(); list.add(new GHPoint(1, 2, 3, 4)); list.add(new GHPoint(2, 3, 4)); list.add(new GHPoint(1, 2, 3, 4)); list.add(new GHPoint(2, 2, 3, 4)); list.add(new GHPoint(1, 2, 3, 4)); list.add(new GHPoint(2, 2, 3, 4)); list.add(new GHPoint(1, 2, 3, 4)); list.add(new GHPoint(2, 2, 3, 4)); list.add(new GHPoint(1, 2, 3, 4)); list.add(new GHPoint(2, 2, 3, 4)); list.add(new GHPoint(1, 2, 3, 4)); list.add(new GHPoint(2, 2, 3, 4)); list.add(new GHPoint(1, 2, 3, 4)); list.add(new GHPoint(2, 2, 3, 4)); list.add(new GHPoint(1, 2, 3, 4)); list.add(new GHPoint(2, 2, 3, 4)); list.add(new GHPoint(1, 2, 3, 4)); list.add(new GHPoint(2, 2, 3,"
    },
    {
        "original_path": "graphhopper_graphhopper###graphhopper_graphhopper/core/src/test/java/com/graphhopper/reader/dem/SRTMGL1ProviderTest###testGetDownloadUrl",
        "generated_path": "SRTMGL1ProviderTest###testGetDownloadUrl.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetDownloadURL() throws IOException { SRTMGL1Provider instance = new SRTMGL1Provider(); String url = instance.getDownloadURL(0, 0); assertEquals(\"North/North_30_60/North_0_29/North_0_29.hgt\", url); }\n"
    },
    {
        "original_path": "graphhopper_graphhopper###graphhopper_graphhopper/core/src/test/java/com/graphhopper/storage/StorablePropertiesTest###testLoadProperties",
        "generated_path": "StorablePropertiesTest###testLoadProperties.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testLoadProperties() throws IOException { Map<String, String> map = new HashMap<String, String>(); StorableProperties.loadProperties(map, new StringReader(\"\\\\n\" + \"\\\\n\" + \"\\\\n\" + \"\\\\n\" + \"\\\\n\" + \"\\\\n\" + \"\\\\n\" + \"\\\\n\" + \"\\\\n\" + \"\\\\n\" + \"\\\\n\" + \"\\\\n\" + \"\\\\n\" + \"\\\\n\" + \"\\\\n\" + \"\\\\n\" + \"\\\\n\" + \"\\\\n\" + \"\\\\n\" + \"\\\\n\" + \"\\\\n\" + \"\\\\n\" + \"\\\\n\" + \"\\\\n\" + \"\\\\n\" + \"\\\\n\" + \"\\\\n\" + \"\\\\n\" + \"\\\\n\" + \"\\\\n\" + \"\\\\n\" + \"\\\\n\" + \"\\\\n\" + \"\\\\n\" + \"\\\\n\" + \"\\\\n\" + \"\\\\n\" + \"\\\\n\" + \"\\\\n\" + \"\\\\n\" + \"\\\\n\" + \"\\\\n\" + \"\\\\n\" + \"\\\\n\" + \"\\\\n\" + \"\\\\n\" + \"\\\\n\" + \"\\\\n\" + \"\\\\n\" + \"\\\\n\" + \"\\\\n\" + \"\\\\n\" + \"\\\\n\" + \"\\\\n\" + \"\\\\n\" + \"\\\\n\" + \"\\\\n\" + \"\\\\n\" + \"\\\\n\" + \"\\\\n\" + \"\\\\n\" + \"\\\\n\" + \"\\\\n\" + \"\\\\n\" + \"\\\\n\" + \"\\\\n\" + \"\\\\n\" + \"\\\\n\" + \"\\\\n\" + \"\\\\n\" +"
    },
    {
        "original_path": "graphhopper_graphhopper###graphhopper_graphhopper/core/src/test/java/com/graphhopper/util/AngleCalcTest###testCalcAzimuth",
        "generated_path": "AngleCalcTest###testCalcAzimuth.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testCalcAzimuth() { double azimuth = ANGLE_CALC.calcAzimuth(0, 0, 0, 0); assertEquals(0, azimuth, 0); azimuth = ANGLE_CALC.calcAzimuth(0, 0, 0, 0); assertEquals(0, azimuth, 0); azimuth = ANGLE_CALC.calcAzimuth(0, 0, 0, 0); assertEquals(0, azimuth, 0); azimuth = ANGLE_CALC.calcAzimuth(0, 0, 0, 0); assertEquals(0, azimuth, 0); azimuth = ANGLE_CALC.calcAzimuth(0, 0, 0, 0); assertEquals(0, azimuth, 0); azimuth = ANGLE_CALC.calcAzimuth(0, 0, 0, 0); assertEquals(0, azimuth, 0); azimuth = ANGLE_CALC.calcAzimuth(0, 0, 0, 0); assertEquals(0, azimuth, 0); azimuth = ANGLE_CALC.calcAzimuth(0, 0, 0, 0); assertEquals(0, azimuth, 0); }\n"
    },
    {
        "original_path": "graphhopper_graphhopper###graphhopper_graphhopper/core/src/test/java/com/graphhopper/reader/osm/OSMReaderUtilityTest###testParseDuration",
        "generated_path": "OSMReaderUtilityTest###testParseDuration.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testParseDuration() throws Exception { assertEquals(0, OSMReaderUtility.parseDuration(null)); assertEquals(0, OSMReaderUtility.parseDuration(\"0:0\")); assertEquals(0, OSMReaderUtility.parseDuration(\"0:0\")); assertEquals(0, OSMReaderUtility.parseDuration(\"0:0\")); assertEquals(0, OSMReaderUtility.parseDuration(\"0:0:0\")); assertEquals(0, OSMReaderUtility.parseDuration(\"0:0:0\")); assertEquals(0, OSMReaderUtility.parseDuration(\"0:0:0\")); assertEquals(0, OSMReaderUtility.parseDuration(\"0:0:0\")); assertEquals(0, OSMReaderUtility.parseDuration(\"0:0:0\")); assertEquals(0, OSMReaderUtility.parseDuration(\"0:0:0\")); assertEquals(0, OSMReaderUtility.parseDuration(\"0:0:0:0\")); assertEquals(0, OSMReaderUtility.parseDuration(\"0:0:0:0\")); assertEquals(0, OSMReaderUtility.parseDuration(\"0:0:0:0\")); assertEquals(0, OSMReaderUtility.parseDuration(\"0:0:0:0\")); assertEquals(0, OSMReaderUtility.parseDuration(\"0:0:0:0\")); assertEquals(0, OSMReader"
    },
    {
        "original_path": "graphhopper_graphhopper###graphhopper_graphhopper/web-api/src/test/java/com/graphhopper/util/HelperTest###testGetLocale",
        "generated_path": "HelperTest###testGetLocale.java",
        "Compile_result": 1,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetLocale() { System.out.println(\"getLocale\"); String param = \"en_US\"; Locale expResult = new Locale(\"en_US\"); Locale result = Helper.getLocale(param); assertEquals(expResult, result); }\n"
    },
    {
        "original_path": "graphhopper_graphhopper###graphhopper_graphhopper/core/src/test/java/com/graphhopper/util/PointListTest###testReverse",
        "generated_path": "PointListTest###testReverse.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test(expected = UnsupportedOperationException.class) public void testReverse() { PointList list = new PointList(); list.reverse(); }\n"
    },
    {
        "original_path": "graphhopper_graphhopper###graphhopper_graphhopper/core/src/test/java/com/graphhopper/reader/dem/CGIARProviderTest###testDown",
        "generated_path": "CGIARProviderTest###testDown.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void testDown() { System.out.println(\"down\"); double val = 0.0; CGIARProvider instance = new CGIARProvider(); int expResult = 0; int result = instance.down(val); assertEquals(expResult, result); }\n"
    },
    {
        "original_path": "graphhopper_graphhopper###graphhopper_graphhopper/core/src/test/java/com/graphhopper/util/BitUtilBigTest###testFromBitString",
        "generated_path": "BitUtilBigTest###testFromBitString.java",
        "Compile_result": 1,
        "Test_result": 0,
        "Gen_Test": "@Test public final void testFromBitString() { BitUtilBig instance = new BitUtilBig(); String str = \"1\"; byte[] result = instance.fromBitString(str); assertEquals(1, result.length); assertEquals(1, result[0]); assertEquals(1, result[1]); assertEquals(1, result[2]); assertEquals(1, result[3]); assertEquals(1, result[4]); assertEquals(1, result[5]); assertEquals(1, result[6]); assertEquals(1, result[7]); assertEquals(1, result[8]); assertEquals(1, result[9]); assertEquals(1, result[10]); assertEquals(1, result[11]); assertEquals(1, result[12]); assertEquals(1, result[13]); assertEquals(1, result[14]); assertEquals(1, result[15]); assertEquals(1, result[16]); assertEquals(1, result[17]); assertEquals(1, result[18]); assertEquals(1, result[19]); }\n"
    },
    {
        "original_path": "graphhopper_graphhopper###graphhopper_graphhopper/core/src/test/java/com/graphhopper/reader/dem/GMTEDProviderTest###testGetFileName",
        "generated_path": "GMTEDProviderTest###testGetFileName.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetFileName() { System.out.println(\"getFileName\"); double lat = 0.0; double lon = 0.0; System.out.println(\"getLatString\"); double latInt = 0.0; double lonInt = 0.0; System.out.println(\"getLonString\"); double lonInt = 0.0; System.out.println(\"getNorthString\"); double latInt = 0.0; System.out.println(\"getEastString\"); double lonInt = 0.0; System.out.println(\"getNorthString\"); double lonInt = 0.0; System.out.println(\"getLonString\"); double latInt = 0.0; System.out.println(\"getLatString\"); double lonInt = 0.0; System.out.println(\"getLonString\"); double latInt = 0.0; System.out.println(\"getNorthString\"); double lonInt = 0.0; System.out.println(\"getEastString\"); double lonInt = 0.0; System.out.println(\"getEastString\"); double latInt = 0.0; System.out.println(\"getLatString\"); double lonInt = 0.0; System.out.println(\"getLonString\"); double latInt = 0.0; System.out.println(\"getLatString\"); double lonInt = 0.0; System.out.println(\"getNorthString\"); double lonInt = 0.0; System"
    },
    {
        "original_path": "graphhopper_graphhopper###graphhopper_graphhopper/core/src/test/java/com/graphhopper/coll/GHLongIntBTreeTest###testPut",
        "generated_path": "GHLongIntBTreeTest###testPut.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testPut() { GHLongIntBTree tree = new GHLongIntBTree(10); for (int i = 0; i < 10; i++) { int value = tree.put(i, i); Assert.assertEquals(i, value); } }\n"
    },
    {
        "original_path": "graphhopper_graphhopper###graphhopper_graphhopper/core/src/test/java/com/graphhopper/reader/dem/GMTEDProviderTest###testGetDownloadUrl",
        "generated_path": "GMTEDProviderTest###testGetDownloadUrl.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetDownloadURL() { System.out.println(\"getDownloadURL\"); double lat = 0.0; double lon = 0.0; String url = instance.getDownloadURL(lat, lon); assertEquals(\"http: }\n"
    },
    {
        "original_path": "graphhopper_graphhopper###graphhopper_graphhopper/core/src/test/java/com/graphhopper/reader/dem/HeightTileTest###testGetHeight",
        "generated_path": "HeightTileTest###testGetHeight.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetHeight() throws Exception { HeightTile heightTile = new HeightTile(0.0, 0.0, 1, 1, 1, 1, 1); assertEquals(0.0, heightTile.getHeight(0.0, 0.0), 0.0); assertEquals(0.0, heightTile.getHeight(0.0, 0.0), 0.0); assertEquals(0.0, heightTile.getHeight(0.0, 0.0), 0.0); assertEquals(0.0, heightTile.getHeight(0.0, 0.0), 0.0); assertEquals(0.0, heightTile.getHeight(0.0, 0.0), 0.0); assertEquals(0.0, heightTile.getHeight(0.0, 0.0), 0.0); assertEquals(0.0, heightTile.getHeight(0.0, 0.0), 0.0); assertEquals(0.0, heightTile.getHeight(0.0, 0.0), 0.0); assertEquals(0.0, heightTile.getHeight(0.0, 0.0), 0.0); assertEquals(0.0, heightTile.getHeight(0.0, 0.0), 0.0); assertEquals(0.0, heightTile.getHeight(0.0, 0.0), 0.0); assertEquals(0."
    },
    {
        "original_path": "graphhopper_graphhopper###graphhopper_graphhopper/core/src/test/java/com/graphhopper/util/shapes/BBoxTest###testCalculateIntersection",
        "generated_path": "BBoxTest###testCalculateIntersection.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testCalculateIntersection() { BBox bbox1 = new BBox(0.0, 0.0, 0.0, 0.0, 0.0, false); BBox bbox2 = new BBox(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, false); BBox bbox3 = new BBox(0.0, 0.0, 0.0, 0.0, 0.0, false); BBox bbox4 = new BBox(0.0, 0.0, 0.0, 0.0, 0.0, false); BBox bbox5 = new BBox(0.0, 0.0, 0.0, 0.0, 0.0, false); BBox bbox6 = new BBox(0.0, 0.0, 0.0, 0.0, false); BBox bbox7 = new BBox(0.0, 0.0, 0.0, 0.0, 0.0, false); BBox bbox8 = new BBox(0.0, 0.0, 0.0, 0.0, 0.0, false); BBox bbox9 = new BBox(0.0, 0.0, 0.0, 0.0, 0.0, false); BBox bbox10 = new BBox(0.0, 0.0, 0.0, 0.0, 0.0, 0"
    },
    {
        "original_path": "graphhopper_graphhopper###graphhopper_graphhopper/core/src/test/java/com/graphhopper/util/UnzipperTest###testUnzip",
        "generated_path": "UnzipperTest###testUnzip.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testUnzip() throws IOException { Unzipper unzipper = new Unzipper(); File toFolder = new File(tempFolder, \"testUnzipper\"); try { unzipper.unzip(new ByteArrayInputStream(\"test\".getBytes()), toFolder, new LongConsumer() { @Override public long accept(long bytes) throws IOException { return bytes; } }); } catch (IOException e) { e.printStackTrace(); } }\n"
    },
    {
        "original_path": "graphhopper_graphhopper###graphhopper_graphhopper/core/src/test/java/com/graphhopper/search/KVStorageTest###testFlush",
        "generated_path": "KVStorageTest###testFlush.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testFlush() throws Exception { KVStorage kvStorage = new KVStorage(dir, false); kvStorage.add(Arrays.asList(new KeyValue(\"key1\", \"value1\"))); kvStorage.flush(); assertEquals(2, kvStorage.getMap(0).size()); assertEquals(2, kvStorage.getMap(0).size()); assertEquals(2, kvStorage.getMap(0).size()); assertEquals(2, kvStorage.getMap(0).size()); assertEquals(2, kvStorage.getMap(0).size()); assertEquals(2, kvStorage.getMap(0).size()); assertEquals(2, kvStorage.getMap(0).size()); assertEquals(2, kvStorage.getMap(0).size()); assertEquals(2, kvStorage.getMap(0).size()); assertEquals(2, kvStorage.getMap(0).size()); assertEquals(2, kvStorage.getMap(0).size()); assertEquals(2, kvStorage.getMap(0).size()); assertEquals(2, kvStorage.getMap(0).size()); assertEquals(2, kvStorage.getMap(0).size()); assertEquals(2, kvStorage.getMap(0).size()); assertEquals(2, kvStorage.getMap(0).size()); assertEquals(2, kvStorage.getMap(0).size()); assertEquals(2, kvStorage.getMap(0)."
    },
    {
        "original_path": "graphhopper_graphhopper###graphhopper_graphhopper/core/src/test/java/com/graphhopper/routing/AlternativeRouteCHTest###testCalcAlternatives",
        "generated_path": "AlternativeRouteCHTest###testCalcAlternatives.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void calcAlternatives() { List<AlternativeInfo> alternatives = subject.calcAlternatives(0, 1); assertEquals(1, alternatives.size()); AlternativeInfo pi = alternatives.get(0); assertEquals(1, pi.v); assertEquals(2, pi.v); assertEquals(3, pi.v); }\n"
    },
    {
        "original_path": "graphhopper_graphhopper###graphhopper_graphhopper/core/src/test/java/com/graphhopper/reader/dem/SRTMGL1ProviderTest###testGetFileName",
        "generated_path": "SRTMGL1ProviderTest###testGetFileName.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetFileName() throws IOException { SRTMGL1Provider instance = new SRTMGL1Provider(); String expResult = \"East.jpg\"; String result = instance.getFileName(0.0, 0.0); assertEquals(expResult, result); }\n"
    },
    {
        "original_path": "graphhopper_graphhopper###graphhopper_graphhopper/core/src/test/java/com/graphhopper/util/shapes/BBoxTest###testParseBBoxString",
        "generated_path": "BBoxTest###testParseBBoxString.java",
        "Compile_result": 1,
        "Test_result": 0,
        "Gen_Test": "@Test public void testParseBBoxString() { BBox bbox = BBox.parseBBoxString(\"1,2,3\"); assertEquals(1.0, bbox.minLon, 0.0); assertEquals(2.0, bbox.maxLon, 0.0); assertEquals(3.0, bbox.minLat, 0.0); assertEquals(3.0, bbox.maxLat, 0.0); }\n"
    },
    {
        "original_path": "graphhopper_graphhopper###graphhopper_graphhopper/core/src/test/java/com/graphhopper/util/shapes/BBoxTest###testParseTwoPoints",
        "generated_path": "BBoxTest###testParseTwoPoints.java",
        "Compile_result": 1,
        "Test_result": 0,
        "Gen_Test": "@Test public void testParseTwoPoints() { BBox bbox = BBox.parseTwoPoints(\"1,2,3\"); assertEquals(1.0, bbox.minLat, 0.0); assertEquals(2.0, bbox.maxLat, 0.0); assertEquals(3.0, bbox.minEle, 0.0); assertEquals(3.0, bbox.maxEle, 0.0); }\n"
    },
    {
        "original_path": "graphhopper_graphhopper###graphhopper_graphhopper/core/src/test/java/com/graphhopper/reader/dem/SkadiProviderTest###testGetFileName",
        "generated_path": "SkadiProviderTest###testGetFileName.java",
        "Compile_result": 1,
        "Test_result": 0,
        "Gen_Test": "@Test public void testGetFileName() throws Exception { System.out.println(\"getFileName\"); double lat = 0.0; double lon = 0.0; SkadiProvider instance = new SkadiProvider(); String expResult = \"0.0.0\"; String result = instance.getFileName(lat, lon); assertEquals(expResult, result); }\n"
    },
    {
        "original_path": "graphhopper_graphhopper###graphhopper_graphhopper/web-api/src/test/java/com/graphhopper/util/HelperTest###testCountBitValue",
        "generated_path": "HelperTest###testCountBitValue.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void testCountBitValue() throws Exception { System.out.println(\"countBitValue\"); int result = Helper.countBitValue(0); assertEquals(0, result); }\n"
    },
    {
        "original_path": "graphhopper_graphhopper###graphhopper_graphhopper/core/src/test/java/com/graphhopper/util/DistanceCalcEarthTest###testValidEdgeDistance",
        "generated_path": "DistanceCalcEarthTest###testValidEdgeDistance.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testValidEdgeDistance3D() { double r_lat_deg = 0.0; double r_lon_deg = 0.0; double a_lat_deg = 0.0; double a_lon_deg = 0.0; double b_lat_deg = 0.0; double b_lon_deg = 0.0; double distance = distanceCalcEarth.calcNormalizedEdgeDistance(r_lat_deg, r_lon_deg, a_lat_deg, a_lon_deg, b_lat_deg, b_lon_deg); assertTrue(distance > 0.0); assertTrue(distance < 0.0); assertTrue(distance > 0.0); assertTrue(distance > 0.0); assertTrue(distance < 0.0); assertTrue(distance > 0.0); assertTrue(distance < 0.0); assertTrue(distance < 0.0); assertTrue(distance > 0.0); assertTrue(distance < 0.0); assertTrue(distance > 0.0); assertTrue(distance < 0.0); assertTrue(distance > 0.0); assertTrue(distance < 0.0); assertTrue(distance > 0.0); assertTrue(distance < 0.0); assertTrue(distance < 0.0); assertTrue(distance > 0.0); assertTrue(distance < 0.0); assertTrue(distance < 0.0); assertTrue(distance > 0.0); }\n"
    },
    {
        "original_path": "graphhopper_graphhopper###graphhopper_graphhopper/core/src/test/java/com/graphhopper/util/BitUtilLittleTest###testFromBitString",
        "generated_path": "BitUtilLittleTest###testFromBitString.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public final void testFromBitString() { byte[] b = new BitUtilLittle().fromBitString
    },
    {
        "original_path": "graphhopper_graphhopper###graphhopper_graphhopper/core/src/test/java/com/graphhopper/util/ArrayUtilTest###testPermutation",
        "generated_path": "ArrayUtilTest###testPermutation.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testPermutation() { Random rnd = new Random(1); IntArrayList list = ArrayUtil.permutation(10, rnd); assertEquals(10, list.size()); for (int i = 0; i < list.size(); i++) { assertEquals(i, list.get(i).intValue()); } }\n"
    },
    {
        "original_path": "graphhopper_graphhopper###graphhopper_graphhopper/core/src/test/java/com/graphhopper/util/DistanceCalcEarthTest###testIntermediatePoint",
        "generated_path": "DistanceCalcEarthTest###testIntermediatePoint.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testIntermediatePoint() { DistanceCalcEarth distCalcEarth = new DistanceCalcEarth(); GHPoint p = distCalcEarth.intermediatePoint(0.5, 0.5, 0.5, 0.5); GHPoint expected = new GHPoint(0.5, 0.5); Assert.assertEquals(expected, p); p = distCalcEarth.intermediatePoint(0.5, 0.5, 0.5, 0.5); Assert.assertEquals(expected, p); p = distCalcEarth.intermediatePoint(0.5, 0.5, 0.5, 0.5); Assert.assertEquals(expected, p); p = distCalcEarth.intermediatePoint(0.5, 0.5, 0.5, 0.5); Assert.assertEquals(expected, p); p = distCalcEarth.intermediatePoint(0.5, 0.5, 0.5, 0.5); Assert.assertEquals(expected, p); p = distCalcEarth.intermediatePoint(0.5, 0.5, 0.5, 0.5); Assert.assertEquals(expected, p); p = distCalcEarth.intermediatePoint(0.5, 0.5, 0.5, 0.5, 0.5); Assert.assertEquals(expected, p); p = distCalcEarth.intermediatePoint(0.5, 0"
    },
    {
        "original_path": "graphhopper_graphhopper###graphhopper_graphhopper/web-api/src/test/java/com/graphhopper/util/HelperTest###testCamelCaseToUnderscore",
        "generated_path": "HelperTest###testCamelCaseToUnderscore.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void testCamelCaseToUnderScore() throws Exception { System.out.println(\"camelCaseToUnderScore\"); String key = \"\"; String expResult = \"\"; String result = Helper.camelCaseToUnderScore(key); assertEquals(expResult, result); key = \"\"; expResult = \"\"; result = Helper.camelCaseToUnderScore(key); assertEquals(expResult, result); key = \"\"; expResult = \"\"; result = Helper.camelCaseToUnderScore(key); assertEquals(expResult, result); key = \"\"; expResult = \"\"; result = Helper.camelCaseToUnderScore(key); assertEquals(expResult, result); key = \"\"; expResult = \"\"; result = Helper.camelCaseToUnderScore(key); assertEquals(expResult, result); key = \"\"; expResult = \"\"; result = Helper.camelCaseToUnderScore(key); assertEquals(expResult, result); key = \"\"; expResult = \"\"; result = Helper.camelCaseToUnderScore(key); assertEquals(expResult, result); key = \"\"; expResult = \"\"; result = Helper.camelCaseToUnderScore(key); assertEquals(expResult, result); }\n"
    },
    {
        "original_path": "graphhopper_graphhopper###graphhopper_graphhopper/core/src/test/java/com/graphhopper/util/AngleCalcTest###testAtan2",
        "generated_path": "AngleCalcTest###testAtan2.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testAtan2() { assertEquals(Math.PI3_4, AngleCalc.atan2(0.0, 0.0), 0); assertEquals(Math.PI3_4, AngleCalc.atan2(0.0, 0.0), 0); assertEquals(Math.PI3_4, AngleCalc.atan2(0.0, 0.0), 0); assertEquals(Math.PI3_4, AngleCalc.atan2(0.0, 0.0), 0); assertEquals(Math.PI3_4, AngleCalc.atan2(0.0, 0.0), 0); assertEquals(Math.PI3_4, AngleCalc.atan2(0.0, 0.0), 0); assertEquals(Math.PI3_4, AngleCalc.atan2(0.0, 0.0), 0); assertEquals(Math.PI3_4, AngleCalc.atan2(0.0, 0.0), 0); assertEquals(Math.PI3_4, AngleCalc.atan2(0.0, 0.0), 0); assertEquals(Math.PI3_4, AngleCalc.atan2(0.0, 0.0), 0); assertEquals(Math.PI3_4, AngleCalc.atan2(0.0, 0.0), 0); assertEquals(Math.PI3_4, Angle"
    },
    {
        "original_path": "graphhopper_graphhopper###graphhopper_graphhopper/core/src/test/java/com/graphhopper/routing/util/NameSimilarityEdgeFilterTest###testAccept",
        "generated_path": "NameSimilarityEdgeFilterTest###testAccept.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testNameSimilarity() { EdgeFilter edgeFilter = new NameSimilarityEdgeFilter(edgeFilter, null, new GHPoint(0, 0), 1.0); GHPoint point = new GHPoint(0, 0); assertTrue(edgeFilter.accept(edgeIteratorState)); assertFalse(edgeFilter.accept(edgeIteratorState)); assertFalse(edgeFilter.accept(edgeIteratorState)); assertFalse(edgeFilter.accept(edgeIteratorState)); assertFalse(edgeFilter.accept(edgeIteratorState)); assertFalse(edgeFilter.accept(edgeIteratorState)); assertFalse(edgeFilter.accept(edgeIteratorState)); assertFalse(edgeFilter.accept(edgeIteratorState)); assertFalse(edgeFilter.accept(edgeIteratorState)); assertFalse(edgeFilter.accept(edgeIteratorState)); assertFalse(edgeFilter.accept(edgeIteratorState)); assertFalse(edgeFilter.accept(edgeIteratorState)); assertFalse(edgeFilter.accept(edgeIteratorState)); assertFalse(edgeFilter.accept(edgeIteratorState)); assertFalse(edgeFilter.accept(edgeIteratorState)); assertFalse(edgeFilter.accept(edgeIteratorState)); assertFalse(edgeFilter.accept(edgeIteratorState)); assertFalse(edgeFilter.accept(edgeIteratorState)); assertFalse(edgeFilter.accept(edgeIteratorState)); assertFalse(edgeFilter.accept(edgeIteratorState)); assertFalse(edgeFilter.accept(edgeIteratorState)); assertFalse(edgeFilter.accept(edgeIteratorState));"
    },
    {
        "original_path": "graphhopper_graphhopper###graphhopper_graphhopper/core/src/test/java/com/graphhopper/util/AngleCalcTest###testAlignOrientation",
        "generated_path": "AngleCalcTest###testAlignOrientation.java",
        "Compile_result": 1,
        "Test_result": 0,
        "Gen_Test": "@Test public void testAlignOrientation() { AngleCalc angleCalc = new AngleCalc(); double baseOrientation = -Math.PI; double orientation = Math.PI; double resultOrientation = angleCalc.alignOrientation(baseOrientation, orientation); assertEquals(2 * Math.PI, resultOrientation, 0); }\n"
    },
    {
        "original_path": "graphhopper_graphhopper###graphhopper_graphhopper/core/src/test/java/com/graphhopper/util/ArrayUtilTest###testConstant",
        "generated_path": "ArrayUtilTest###testConstant.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testConstant() { for (int i = 0; i < 10; i++) { int value = i; IntArrayList list = ArrayUtil.constant(i, value); Assert.assertEquals(i, list.size()); Assert.assertEquals(value, list.get(i)); } }\n"
    },
    {
        "original_path": "graphhopper_graphhopper###graphhopper_graphhopper/web-api/src/test/java/com/graphhopper/util/GHResponseTest###testToString",
        "generated_path": "GHResponseTest###testToString.java",
        "Compile_result": 1,
        "Test_result": 1,
        "Gen_Test": "@Test public void testToString() { System.out.println(\"toString\"); GHResponse instance = new GHResponse(); String expResult = \"no paths\"; String result = instance.toString(); assertEquals(expResult, result); }\n"
    },
    {
        "original_path": "graphhopper_graphhopper###graphhopper_graphhopper/core/src/test/java/com/graphhopper/coll/GHSortedCollectionTest###testInsert",
        "generated_path": "GHSortedCollectionTest###testInsert.java",
        "Compile_result": 0,
        "Test_result": 0,
        "Gen_Test": "@Test public void testInsert() { GHSortedCollection collection = new GHSortedCollection(); collection.insert(1, 2); assertEquals(2, collection.getSize()); assertEquals(1, collection.peekValue()); assertEquals(2, collection.pollKey()); assertEquals(2, collection.getSize()); assertEquals(1, collection.peekValue()); assertEquals(2, collection.pollKey()); assertEquals(2, collection.getSize()); assertEquals(1, collection.peekValue()); assertEquals(2, collection.pollKey()); assertEquals(1, collection.getSize()); assertEquals(1, collection.peekKey()); assertEquals(2, collection.pollKey()); assertEquals(1, collection.peekValue()); assertEquals(2, collection.pollKey()); assertEquals(1, collection.peekValue()); assertEquals(2, collection.pollKey()); assertEquals(2, collection.getSize()); assertEquals(1, collection.peekValue()); assertEquals(2, collection.pollKey()); assertEquals(1, collection.peekValue()); assertEquals(1, collection.peekKey()); assertEquals(2, collection.pollKey()); assertEquals(1, collection.peekValue()); assertEquals(2, collection.pollKey()); assertEquals(1, collection.peekValue()); assertEquals(2, collection.pollKey()); assertEquals(2, collection.getSize()); assertEquals(1, collection.peek"
    },
    {
        "original_path": "languagetool-org_languagetool###languagetool-org_languagetool/languagetool-language-modules/ga/src/test/java/org/languagetool/tagging/disambiguation/rules/ga/UtilsTest###testHalfwidthLatinToLatin",
        "generated_path": "UtilsTest###testHalfwidthLatinToLatin.java",
        "Compile_result": 1,
        "Test_result": 0,
        "Gen_Test": "@Test public void testHalfwidthLatinToLatin() { System.out.println(\"halfwidthLatinToLatin\"); String s = \"\uff21\"; String expResult = \"\uff21\"; String result = Utils.halfwidthLatinToLatin(s); assertEquals(expResult, result); }\n"
    }
]