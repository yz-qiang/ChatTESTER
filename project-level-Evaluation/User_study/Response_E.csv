focalMethod,X,ReabilityScore,,usabilityScore,,Y,ReabilityScore,,usabilityScore,,Z,ReabilityScore,,usabilityScore,
,, Naming Intuitiveness,Code Layout,Assertion Quality,Adoption Efforts,, Naming Intuitiveness,Code Layout,Assertion Quality,Adoption Efforts,, Naming Intuitiveness,Code Layout,Assertion Quality,Adoption Efforts
"public AttributeInfo addAttributeInfo(Class<?> type, JsonBeanAttribute detail) {
    AttributeInfo attrMapping = new AttributeInfo(type, detail);
    attrInfos.add(attrMapping);
    return attrMapping;
}","@Test public void testAddAttributeInfo() throws Exception { AttributeInfo attrInfo = TypeInfo.addAttributeInfo(TestBeanAttribute.class, new JsonBeanAttribute(TestBeanAttribute.class)); Assert.assertEquals(TestBeanAttribute.class, attrInfo.getType()); Assert.assertEquals(TestBeanAttribute.class, attrInfo.getType()); Assert.assertEquals(TestBeanAttribute.class, attrInfo.getType()); Assert.assertEquals(TestBeanAttribute.class, attrInfo.getType()); Assert.assertEquals(TestBeanAttribute.class, attrInfo.getType()); Assert.assertEquals(TestBeanAttribute.class, attrInfo.getType()); Assert.assertEquals(TestBeanAttribute.class, attrInfo.getType()); Assert.assertEquals(TestBeanAttribute.class, attrInfo.getType()); Assert.assertEquals(TestBeanAttribute.class, attrInfo.getType()); Assert.assertEquals(TestBeanAttribute.class, attrInfo.getType()); Assert.assertEquals(TestBeanAttribute.class, attrInfo.getType()); Assert.assertEquals(TestBeanAttribute.class, attrInfo.getType()); Assert.assertEquals(TestBeanAttribute.class, attrInfo.getType()); Assert.assertEquals(TestBeanAttribute.class, attrInfo.getType()); Assert.assertEquals(TestBeanAttribute.class, attrInfo.getType()); Assert.assertEquals(TestBeanAttribute.class, attrInfo.getType()); Assert.assertEquals(TestBeanAttribute.class, attrInfo.getType()); Assert.assertEquals(TestBeanAttribute.class, attrInfo.getType()); Assert.assertEquals(TestBeanAttribute.class, attrInfo.getType()); Assert.assertEquals(TestBeanAttribute.class, attrInfo.getType()); Assert.assertEquals(TestBeanAttribute.class, attrInfo.getType()); Assert.assertEquals(TestBeanAttribute.class, attrInfo.getType()); Assert.assertEquals(TestBeanAttribute.class, attrInfo.getType()); Assert.assertEquals(TestBeanAttribute.class, attrInfo.getType()); Assert.assertEquals(TestBeanAttribute.class, attrInfo.getType()); Assert.assertEquals(TestBeanAttribute.class, attrInfo.getType()); Assert.assertEquals(TestBeanAttribute.class, attrInfo.getType()); }
",2,1,2,1,"@Test(timeout = 4000)
public void test04() throws Throwable {
    Class<Object> class0 = Object.class;
    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);
    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = jsonReaderCodeGenerator_TypeInfo0.addAttributeInfo(class0, (JsonBeanAttribute) null);
    jsonReaderCodeGenerator_AttributeInfo0.getDetail();
    assertEquals(0, jsonReaderCodeGenerator_AttributeInfo0.getArrayType());
}",2,2,3,3,"@Test(timeout = 4000)
public void testAddAttributeInfo() throws Throwable {
    // Create a TypeInfo object with Object class
    Class<Object> class0 = Object.class;
    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);
    
    // Create a JsonBeanAttribute object (or use null if not needed)
    JsonBeanAttribute detail = null;
    
    // Call the addAttributeInfo method and store the returned AttributeInfo object
    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = jsonReaderCodeGenerator_TypeInfo0.addAttributeInfo(class0, detail);
    
    // Get the detail from the AttributeInfo object
    jsonReaderCodeGenerator_AttributeInfo0.getDetail();
    
    // Assert that the arrayType of the AttributeInfo object is 0
    assertEquals(0, jsonReaderCodeGenerator_AttributeInfo0.getArrayType());
}",3,3,3,3
"public JsonBeanAttribute getDetail() {
    return detail;
}","@Test public void testGetDetail() throws Exception { JsonBeanAttribute detail = AttributeInfo.getDetail(); assertEquals(detail, detail); }
",3,2,2,3,"@Test(timeout = 4000)
public void test04() throws Throwable {
    Class<Object> class0 = Object.class;
    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);
    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = jsonReaderCodeGenerator_TypeInfo0.addAttributeInfo(class0, (JsonBeanAttribute) null);
    jsonReaderCodeGenerator_AttributeInfo0.getDetail();
    assertEquals(0, jsonReaderCodeGenerator_AttributeInfo0.getArrayType());
}",3,2,2,2,"@Test(timeout = 4000)
public void testAddAttributeInfo() throws Throwable {
    // Create a TypeInfo object with Object class
    Class<Object> class0 = Object.class;
    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);
    
    // Create a JsonBeanAttribute object (or use null if not needed)
    JsonBeanAttribute detail = null;
    
    // Call the addAttributeInfo method and store the returned AttributeInfo object
    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = jsonReaderCodeGenerator_TypeInfo0.addAttributeInfo(class0, detail);
    
    // Get the detail from the AttributeInfo object
    jsonReaderCodeGenerator_AttributeInfo0.getDetail();
    
    // Assert that the arrayType of the AttributeInfo object is 0
    assertEquals(0, jsonReaderCodeGenerator_AttributeInfo0.getArrayType());
}",3,2,3,2
"public int getArrayType() {
    return arrayType;
}","@Test public void testGetArrayType() throws Exception { AttributeInfo attrInfo = new AttributeInfo(); assertEquals(1, attrInfo.getArrayType()); }
",3,3,2,2,"@Test(timeout = 4000)
public void test04() throws Throwable {
    Class<Object> class0 = Object.class;
    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);
    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = jsonReaderCodeGenerator_TypeInfo0.addAttributeInfo(class0, (JsonBeanAttribute) null);
    jsonReaderCodeGenerator_AttributeInfo0.getDetail();
    assertEquals(0, jsonReaderCodeGenerator_AttributeInfo0.getArrayType());
}",2,2,2,2,"@Test
public void testGetArrayType() {
    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(Object.class);
    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = jsonReaderCodeGenerator_TypeInfo0.addAttributeInfo(Object.class, (JsonBeanAttribute) null);
    jsonReaderCodeGenerator_AttributeInfo0.getDetail();

    int expected = 0;
    int actual = jsonReaderCodeGenerator_AttributeInfo0.getArrayType();
    assertEquals(expected, actual);
}",3,2,2,2
"public Class<?> getType() {
    return type;
}","@Test public void testGetType() throws Exception { TypeInfo typeInfo = new TypeInfo(); assertEquals(TypeInfo.class, typeInfo.getType()); }
",3,3,2,2,"@Test(timeout = 4000)
public void test05() throws Throwable {
    Class<JsonReaderInvoker> class0 = JsonReaderInvoker.class;
    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);
    Class<?> class1 = jsonReaderCodeGenerator_TypeInfo0.getType();
    assertFalse(class1.isArray());
}",2,2,2,2,"@Test
public void testGetType() {
    Class<JsonReaderInvoker> class0 = JsonReaderInvoker.class;
    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);
    Class<?> class1 = jsonReaderCodeGenerator_TypeInfo0.getType();
    Class<?> expectedType = JsonReaderInvoker.class;
    Class<?> actualType = class1;
    assertEquals(expectedType, actualType);
}",2,2,2,2
"public Class<?> getAttributeType() {
    return attrType;
}","@Test public void testGetAttributeType() throws Exception { assertEquals(AttributeInfo.getAttributeType(), AttributeInfoTest.class); }
",3,3,2,2,"@Test(timeout = 4000)
public void test06() throws Throwable {
    Class<Object> class0 = Object.class;
    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);
    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();
    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = jsonReaderCodeGenerator_TypeInfo0.addAttributeInfo(class0, jsonBeanAttribute0);
    jsonReaderCodeGenerator_AttributeInfo0.getAttributeType();
    assertEquals(0, jsonReaderCodeGenerator_AttributeInfo0.getArrayType());
}",3,2,2,2,"@Test
public void testGetAttributeType() {
    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(Object.class);
    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();
    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = jsonReaderCodeGenerator_TypeInfo0.addAttributeInfo(Object.class, jsonBeanAttribute0);
    Class<?> expectedType = Object.class;
    Class<?> actualType = jsonReaderCodeGenerator_AttributeInfo0.getAttributeType();
    assertEquals(expectedType, actualType);
}",3,2,2,2
"public String getPath() {
    return path;
}","@Test public void testGetPath() throws Exception { assertEquals(""/foo/bar"", PathAndCode.getPath()); }
",3,3,2,2,"@Test(timeout = 4000)
public void test07() throws Throwable {
    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode("")S+2Mz5"", "")S+2Mz5"");
    String string0 = jsonReaderCodeGenerator_PathAndCode0.getPath();
    assertEquals("")S+2Mz5"", string0);
}",3,3,3,3,"@Test
public void testGetPath() {
    // Create a new instance of PathAndCode
    JsonReaderCodeGenerator.PathAndCode pathAndCode = new JsonReaderCodeGenerator.PathAndCode("")S+2Mz5"", "")S+2Mz5"");

    // Call the getPath() method
    String result = pathAndCode.getPath();

    // Assert that the result is equal to the expected path value
    assertEquals("")S+2Mz5"", result);
}",3,3,3,3
"public List<AttributeInfo> getAttributeInfos() {
    return attrInfos;
}","@Test public void testGetAttributeInfos() throws Exception { List<AttributeInfo> attrInfos = TypeInfo.getAttributeInfos(); assertEquals(0, attrInfos.size()); }
",3,3,2,2,"@Test(timeout = 4000)
public void test08() throws Throwable {
    Class<Object> class0 = Object.class;
    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);
    List<JsonReaderCodeGenerator.AttributeInfo> list0 = jsonReaderCodeGenerator_TypeInfo0.getAttributeInfos();
    assertTrue(list0.isEmpty());
}",3,3,3,3,"@Test
public void testGetAttributeInfos() {
    Class<Object> class0 = Object.class;
    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);
    List<JsonReaderCodeGenerator.AttributeInfo> list0 = jsonReaderCodeGenerator_TypeInfo0.getAttributeInfos();
    assertNotNull(list0);
    assertEquals(0, list0.size());
}",3,3,3,3
"public String getCode() {
    return code;
}","@Test public void testGetCode() throws Exception { String code = JsonReaderCodeGenerator.getCode(); Assert.assertEquals(""{\\""code\\"":\\""1\\""}"", code); }
",3,3,2,2,"@Test(timeout = 4000)
public void test10() throws Throwable {
    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(""OBJECT"", ""OBJECT"");
    String string0 = jsonReaderCodeGenerator_PathAndCode0.getCode();
    assertEquals(""OBJECT"", string0);
}",3,3,3,3,"    @Test
    public void testGetCode() {

        JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(""OBJECT"", ""OBJECT"");
        String string0 = jsonReaderCodeGenerator_PathAndCode0.getCode();
        assertEquals(""OBJECT"", string0);

        String code = string0;
        assertNotNull(code);
        assertTrue(code instanceof String);
    }",3,3,3,3
"@Override
public boolean equals(Object obj) {
    if (this == obj)
        return true;
    if (obj == null)
        return false;
    if (getClass() != obj.getClass())
        return false;
    PathAndCode other = (PathAndCode) obj;
    if (path == null) {
        if (other.path != null)
            return false;
    } else if (!path.equals(other.path))
        return false;
    return true;
}","@Test public void testEquals() throws Exception { PathAndCode pathAndCode = new PathAndCode(); assertTrue(pathAndCode.equals(pathAndCode)); }
",3,3,3,3,"@Test(timeout = 4000)
public void test11() throws Throwable {
    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode(""OBJECT"", ""OBJECT"");
    JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode1 = new JsonReaderCodeGenerator.PathAndCode("""", ""D]#&Gx<^@=`"");
    boolean boolean0 = jsonReaderCodeGenerator_PathAndCode0.equals(jsonReaderCodeGenerator_PathAndCode1);
    assertFalse(boolean0);
    assertEquals(""D]#&Gx<^@=`"", jsonReaderCodeGenerator_PathAndCode1.getCode());
    assertEquals("""", jsonReaderCodeGenerator_PathAndCode1.getPath());
}",2,2,2,2,"@Test
public void testEquals() {
    JsonReaderCodeGenerator.PathAndCode pathAndCode1 = new JsonReaderCodeGenerator.PathAndCode(""path"", null);

    JsonReaderCodeGenerator.PathAndCode pathAndCode2 = new JsonReaderCodeGenerator.PathAndCode(""path"", null);
    assertTrue(pathAndCode1.equals(pathAndCode1));
    assertTrue(pathAndCode1.equals(pathAndCode2));
    JsonReaderCodeGenerator.PathAndCode pathAndCode3 = new JsonReaderCodeGenerator.PathAndCode(""differentPath"", null);
    assertFalse(pathAndCode1.equals(pathAndCode3));
    assertFalse(pathAndCode1.equals(null));
    assertFalse(pathAndCode1.equals(""path""));
    JsonReaderCodeGenerator.PathAndCode pathAndCode4 = new JsonReaderCodeGenerator.PathAndCode(null, null);
    assertFalse(pathAndCode1.equals(pathAndCode4));
}",2,2,2,2
"public AttributeInfo setArrayType(int arrayType) {
    this.arrayType = arrayType;
    return this;
}","@Test public void testSetArrayType() throws Exception { AttributeInfo attrInfo = new AttributeInfo(); attrInfo.setArrayType(1); }
",3,3,1,2,"@Test(timeout = 4000)
public void test18() throws Throwable {
    Class<JavaTimeInstantFormatter> class0 = JavaTimeInstantFormatter.class;
    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();
    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = new JsonReaderCodeGenerator.AttributeInfo(class0, jsonBeanAttribute0);
    jsonReaderCodeGenerator_AttributeInfo0.setArrayType(2015);
    assertEquals(2015, jsonReaderCodeGenerator_AttributeInfo0.getArrayType());
}",3,3,3,3,"@Test
public void testSetArrayType() {
    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();
    Class<JavaTimeInstantFormatter> class0 = JavaTimeInstantFormatter.class;
    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = new JsonReaderCodeGenerator.AttributeInfo(class0, jsonBeanAttribute0);
    jsonReaderCodeGenerator_AttributeInfo0.setArrayType(2015);
    assertEquals(2015, jsonReaderCodeGenerator_AttributeInfo0.getArrayType());
}",3,3,3,3
"public AttributeInfo setCollectionType(Class<?> collectionType) {
    this.collectionType = collectionType;
    return this;
}","@Test public void testSetCollectionType() throws Exception { AttributeInfo attrInfo = new AttributeInfo(); attrInfo.setCollectionType(String.class); }
",3,3,1,2,"@Test(timeout = 4000)
public void test20() throws Throwable {
    Class<JavaTimeInstantFormatter> class0 = JavaTimeInstantFormatter.class;
    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();
    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = new JsonReaderCodeGenerator.AttributeInfo(class0, jsonBeanAttribute0);
    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo1 = jsonReaderCodeGenerator_AttributeInfo0.setCollectionType(class0);
    assertEquals(0, jsonReaderCodeGenerator_AttributeInfo1.getArrayType());
}",2,2,3,2,"@Test(timeout = 4000)
public void testSetCollectionType() throws Throwable {
    // Create a new AttributeInfo object
    Class<JavaTimeInstantFormatter> class0 = JavaTimeInstantFormatter.class;
    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();
    JsonReaderCodeGenerator.AttributeInfo attributeInfo = new JsonReaderCodeGenerator.AttributeInfo(class0, jsonBeanAttribute0);
    
    // Set the collection type using the setCollectionType method
    Class<?> collectionType = class0;
    attributeInfo.setCollectionType(collectionType);
    
    // Verify that the collection type is set correctly
    assertEquals(collectionType, attributeInfo.getCollectionType());
}",3,3,3,3
"public Object get(int index) {
    if (index >= size)
        throw new IndexOutOfBoundsException(""Index: "" + index + "", Size: "" + size);
    return elementData[index];
}","@Test(expected = IndexOutOfBoundsException.class) public void testGet() { new ObjectArray().get(0); }
",3,3,1,1,"@Test(timeout = 4000)
public void test03() throws Throwable {
    ObjectArray objectArray0 = new ObjectArray();
    // Undeclared exception!
    try {
        objectArray0.get(0);
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        // 
        // Index: 0, Size: 0
        // 
        verifyException(""com.zappos.json.util.ObjectArray"", e);
    }
}",1,2,1,1,"@Test
public void testGet() {
    ObjectArray objectArray = new ObjectArray();
    int index = 0;
    try {
        objectArray.get(index);
        fail(""Expected IndexOutOfBoundsException to be thrown"");
    } catch (IndexOutOfBoundsException e) {
        assertEquals(""Index: "" + index + "", Size: "" + objectArray.size(), e.getMessage());
    }
}",2,2,2,2
"public static boolean isNumber(String s) {
    if (s == null || s.length() == 0)
        return false;
    if (!Character.isDigit(s.charAt(0)) && s.charAt(0) != '-')
        return false;
    int decimal = 0;
    for (int i = 1; i < s.length(); i++) {
        char c = s.charAt(i);
        if (Character.isDigit(c))
            continue;
        if (c == '.') {
            if (decimal == 1)
                return false;
            decimal++;
            continue;
        }
        return false;
    }
    return true;
}","@Test public void testIsNumber() throws Exception { assertTrue(Strings.isNumber("""")); assertTrue(Strings.isNumber("""")); assertTrue(Strings.isNumber("""")); assertTrue(Strings.isNumber("""")); assertTrue(Strings.isNumber("""")); assertTrue(Strings.isNumber("""")); assertTrue(Strings.isNumber("""")); assertTrue(Strings.isNumber("""")); assertTrue(Strings.isNumber("""")); assertTrue(Strings.isNumber("""")); assertTrue(Strings.isNumber("""")); assertTrue(Strings.isNumber("""")); assertTrue(Strings.isNumber("""")); assertTrue(Strings.isNumber("""")); assertTrue(Strings.isNumber("""")); assertTrue(Strings.isNumber("""")); assertTrue(Strings.isNumber("" "")); assertTrue(Strings.isNumber("" "")); assertTrue(Strings.isNumber("" "")); assertTrue(Strings.isNumber("" "")); assertTrue(Strings.isNumber("" "")); assertTrue(Strings.isNumber("" "")); assertTrue(Strings.isNumber("" "")); assertTrue(Strings.isNumber("" "")); assertTrue(Strings.isNumber("" "")); assertTrue(Strings.isNumber("" "")); assertTrue(Strings.isNumber("" "")); assertTrue(Strings.isNumber("" "")); assertTrue(Strings.isNumber("" "")); assertTrue(Strings.isNumber("" "")); }
",3,1,1,1,"@Test(timeout = 4000)
public void test00() throws Throwable {
    boolean boolean0 = Strings.isNumber(""6%DL@T^]&'LmYrP>"");
    assertFalse(boolean0);
}",3,3,3,3,"    @Test
    public void testIsNumber_ValidNumber_ReturnsTrue() {
        // Arrange
        String number = ""12345"";

        // Act
        boolean result = Strings.isNumber(number);

        // Assert
        assertTrue(result);
    }",3,3,3,3
"public static String randomNumber(int n) {
    char[] c = new char[n];
    for (int i = 0; i < n; i++) {
        c[i] = NUMBERS[RANDOM.nextInt(10)];
    }
    return new String(c);
}","@Test public void testRandomNumber() throws IOException { String s = Strings.randomNumber(10); Assert.assertEquals(""1"", s); }
",3,3,2,2,"@Test(timeout = 4000)
public void test03() throws Throwable {
    String string0 = Strings.randomNumber(0);
    assertEquals("""", string0);
}",3,3,2,2,"    @Test
    public void testRandomNumber() {
        String result = Strings.randomNumber(5);
        assertNotNull(result);
        assertEquals(5, result.length());
        assertTrue(Strings.isNumber(result));
    }",3,3,3,3
"public static String randomAlphabetic(int n) {
    char[] c = new char[n];
    for (int i = 0; i < n; i++) {
        int j = RANDOM.nextInt(26);
        c[i] = RANDOM.nextBoolean() ? BIG_LETTERS[j] : SMALL_LETTERS[j];
    }
    return new String(c);
}","@Test public void testRandomAlphabetic() throws IOException { String s = Strings.randomAlphabetic(10); Assert.assertEquals(s, ""1""); }
",3,3,1,1,"@Test(timeout = 4000)
public void test04() throws Throwable {
    String string0 = Strings.randomAlphabetic(0);
    assertEquals("""", string0);
}",3,3,2,2,"    @Test
    public void testRandomAlphabetic() {
        // Test case 1: n = 0
        String result1 = Strings.randomAlphabetic(0);
        assertEquals("""", result1);

        // Test case 2: n = 5
        String result2 = Strings.randomAlphabetic(5);
        assertEquals(5, result2.length());
        assertTrue(result2.matches(""[a-zA-Z]+""));

        // Test case 3: n = 10
        String result3 = Strings.randomAlphabetic(10);
        assertEquals(10, result3.length());
        assertTrue(result3.matches(""[a-zA-Z]+""));
    }",3,3,3,3
"public static String random(int n, char[] chars) {
    char[] c = new char[n];
    for (int i = 0; i < n; i++) {
        c[i] = chars[RANDOM.nextInt(chars.length)];
    }
    return new String(c);
}","@Test public void testRandom() throws IOException { String s = Strings.random(10, ""abcdefghijklmnopqrstuvwxyzest(timeout = 4000)
public void test05() throws Throwable {
    char[] charArray0 = new char[3];
    String string0 = Strings.random(0, charArray0);
    assertEquals("""", string0);
}",3,3,2,2,"    @Test
    public void testRandom() {
        char[] chars = {'a', 'b', 'c', 'd', 'e'};
        int n = 5;
        String result = Strings.random(n, chars);
        
        // Check if the length of the generated string is equal to n
        assertEquals(n, result.length());
        
        // Check if all characters in the generated string are from the given char array
        for (char c : result.toCharArray()) {
            boolean found = false;
            for (char ch : chars) {
                if (c == ch) {
                    found = true;
                    break;
                }
            }
            assertTrue(found);
        }
    }",3,3,3,3
"public static String fromReader(Reader reader, int bufferSize) throws IOException {
    char[] arr = new char[bufferSize];
    StringBuilder buffer = new StringBuilder();
    int numCharsRead;
    while ((numCharsRead = reader.read(arr, 0, arr.length)) != -1) {
        buffer.append(arr, 0, numCharsRead);
    }
    reader.close();
    return buffer.toString();
}","@Test public void testFromReader() throws IOException { String result = Strings.fromReader(new StringReader(new byte[] { (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00 }); }
",1,1,1,1,"@Test(timeout = 4000)
public void test06() throws Throwable {
    StringReader stringReader0 = new StringReader(""!!n$d3!sd#&|iK"");
    String string0 = Strings.fromReader((Reader) stringReader0, 1);
    assertEquals(""!!n$d3!sd#&|iK"", string0);
}",3,3,3,3,"    @Test
    public void testFromReader() throws IOException {
        // Create a test input string
        String input = ""This is a test string"";

        // Create a StringReader object with the test input string
        Reader reader = new StringReader(input);

        // Define the expected output
        String expectedOutput = ""This is a test string"";

        // Define the buffer size
        int bufferSize = 1024;

        // Call the method under test
        String actualOutput = Strings.fromReader(reader, bufferSize);

        // Assert that the actual output matches the expected output
        assertEquals(expectedOutput, actualOutput);
    }",3,3,3,3
"public static String fromReader(Reader reader, int bufferSize) throws IOException {
    char[] arr = new char[bufferSize];
    StringBuilder buffer = new StringBuilder();
    int numCharsRead;
    while ((numCharsRead = reader.read(arr, 0, arr.length)) != -1) {
        buffer.append(arr, 0, numCharsRead);
    }
    reader.close();
    return buffer.toString();
}","@Test public void testFromReader() throws IOException { String result = Strings.fromReader(new StringReader(new byte[] { (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00 }); }
",1,1,1,1,"@Test(timeout = 4000)
public void test06() throws Throwable {
    StringReader stringReader0 = new StringReader(""!!n$d3!sd#&|iK"");
    String string0 = Strings.fromReader((Reader) stringReader0, 1);
    assertEquals(""!!n$d3!sd#&|iK"", string0);
}",3,3,2,2,"    @Test
    public void testFromReader() throws IOException {
        // Create a test input string
        String input = ""This is a test string"";

        // Create a StringReader object with the test input string
        Reader reader = new StringReader(input);

        // Call the fromReader method with the test reader
        String result = Strings.fromReader(reader);

        // Verify that the result matches the test input string
        assertEquals(input, result);
    }",3,3,3,3
"public static void unescape(ZapposJson zapposJson, CharSequence value, Writer writer) throws IOException {
    boolean inescape = false;
    for (int i = 0; i < value.length(); i++) {
        char c = value.charAt(i);
        if (c != '\\' && !inescape) {
            writer.append(c);
            continue;
        } else if (c == '\\') {
            inescape = true;
            continue;
        }
        switch(c) {
            case 'u':
                writer.append(String.valueOf(Integer.parseInt(value.subSequence(i, 4).toString(), 16)));
                i += 4;
                break;
            case 't':
                writer.append('\t');
                break;
            case 'b':
                writer.append('\b');
                break;
            case 'n':
                writer.append('\n');
                break;
            case 'r':
                writer.append('\r');
                break;
            case 'f':
                writer.append('\f');
                break;
            case '\n':
            case '\'':
            case '""':
            case '\\':
            default:
                writer.append(c);
        }
        inescape = false;
    }
}","@Test public void testUnescape() throws IOException { String value = ""Hello World""; String result = JsonUtils.unescape(zapposJson, value); assertEquals(""Hello World"", result); }
",3,3,2,2,"@Test(timeout = 4000)
public void test00() throws Throwable {
    ZapposJson zapposJson0 = ZapposJson.getInstance(""*ai\""!ww'{-g3*\""*O[7"");
    // Undeclared exception!
    try {
        JsonUtils.unescape(zapposJson0, (CharSequence) ""&"", (Writer) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        // 
        // no message in exception (getMessage() returned null)
        // 
    }
}",3,3,1,1,"@Test
public void testUnescape() {
    ZapposJson zapposJson = ZapposJson.getInstance(""f[lX;J:ziZx\"""");

    CharSequence value = ""Hello\\nWorld"";
    String expected = ""Hello\nWorld"";
    StringWriter writer = new StringWriter();
    try {
        JsonUtils.unescape(zapposJson, value, writer);
    } catch (IOException e) {
        fail(""IOException occurred"");
    }
    String actual = writer.toString();
    assertEquals(expected, actual);
}",3,3,2,2
"public static String escape(ZapposJson zapposJson, CharSequence value) {
    StringWriter writer = new StringWriter();
    try {
        escape(zapposJson, value, writer);
    } catch (IOException e) {
    }
    return writer.toString();
}","@Test public void testEscape() throws IOException { String value = ""Hello World""; String escaped = JsonUtils.escape(zapposJson, value); assertEquals(""Hello World"", escaped); }
",3,3,2,2,"@Test(timeout = 4000)
public void test02() throws Throwable {
    ZapposJson zapposJson0 = ZapposJson.getInstance();
    CharBuffer charBuffer0 = CharBuffer.allocate(9);
    CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0, 0, 0);
    String string0 = JsonUtils.escape(zapposJson0, (CharSequence) charBuffer1);
    assertEquals("""", string0);
}",3,3,2,2,"@Test
public void testEscape() throws IOException {
    ZapposJson zapposJson = ZapposJson.getInstance();

    CharSequence value = ""Hello, \""World\""!"";
    StringWriter writer = new StringWriter();
    JsonUtils.escape(zapposJson, value, writer);
    String escapedValue = writer.toString();
    assertEquals(""Hello, \\\""World\\\""!"", escapedValue);
}",3,3,2,2
"public static String escape(ZapposJson zapposJson, CharSequence value) {
    StringWriter writer = new StringWriter();
    try {
        escape(zapposJson, value, writer);
    } catch (IOException e) {
    }
    return writer.toString();
}","@Test public void testEscape() throws IOException { String value = ""Hello World""; String escaped = JsonUtils.escape(zapposJson, value); assertEquals(""Hello World"", escaped); }
",3,3,2,2,"@Test(timeout = 4000)
public void test02() throws Throwable {
    ZapposJson zapposJson0 = ZapposJson.getInstance();
    CharBuffer charBuffer0 = CharBuffer.allocate(9);
    CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0, 0, 0);
    String string0 = JsonUtils.escape(zapposJson0, (CharSequence) charBuffer1);
    assertEquals("""", string0);
}",3,3,2,2,"@Test
public void testEscape() throws IOException {
    ZapposJson zapposJson = ZapposJson.getInstance();

    StringWriter writer = new StringWriter();
    CharSequence value = ""Hello, \""World\""!"";
    JsonUtils.escape(zapposJson, value, writer);
    assertEquals(""Hello, \\\""World\\\""!"", writer.toString());
}",3,3,2,2
"public static boolean classPresent(String className) {
    ClassLoader thisClassLoader = Reflections.class.getClassLoader();
    try {
        Class.forName(className, false, thisClassLoader);
        return true;
    } catch (ClassNotFoundException e) {
        return false;
    }
}","@Test public void testClassPresent() throws Exception { assertTrue(Reflections.classPresent(""java.lang.String"")); assertTrue(Reflections.classPresent(""java.lang.String"")); assertTrue(Reflections.classPresent(""java.lang.String"")); assertTrue(Reflections.classPresent(""java.lang.String"")); assertTrue(Reflections.classPresent(""java.lang.String"")); assertTrue(Reflections.classPresent(""java.lang.String"")); assertTrue(Reflections.classPresent(""java.lang.String"")); assertTrue(Reflections.classPresent(""java.lang.String"")); assertTrue(Reflections.classPresent(""java.lang.String"")); assertTrue(Reflections.classPresent(""java.lang.String"")); assertTrue(Reflections.classPresent(""java.lang.String"")); assertTrue(Reflections.classPresent(""java.lang.String"")); assertTrue(Reflections.classPresent(""java.lang.String"")); assertTrue(Reflections.classPresent(""java.lang.String"")); assertTrue(Reflections.classPresent(""java.lang.String"")); assertTrue(Reflections.classPresent(""java.lang.String"")); assertTrue(Reflections.classPresent(""java.lang.String"")); assertTrue(Reflections.classPresent(""java.lang.String"")); }
",3,2,2,2,"@Test(timeout = 4000)
public void test00() throws Throwable {
    boolean boolean0 = Reflections.classPresent(""|B7"");
    assertFalse(boolean0);
}",3,3,3,3,"    @Test
    public void testClassPresent_shouldReturnTrue_whenClassIsPresent() {
        // Arrange
        String className = ""java.lang.String"";

        // Act
        boolean result = Reflections.classPresent(className);

        // Assert
        assertTrue(result);
    }",3,3,3,3
"public static Class<?> getSecondGenericParameterType(Method method) {
    Class<?>[] types = getGenericParameterTypes(method);
    if (types != null && types.length > 1) {
        return types[1];
    }
    return null;
}",,1,1,1,1,"@Test(timeout = 4000)
public void test02() throws Throwable {
    // Undeclared exception!
    try {
        Reflections.getSecondGenericParameterType((Method) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        // 
        // no message in exception (getMessage() returned null)
        // 
        verifyException(""com.zappos.json.util.Reflections"", e);
    }
}",2,1,1,1,"@Test
public void testGetSecondGenericParameterType() throws NoSuchMethodException {
    // Create a sample class for testing
    class SampleClass<T, U> {
        public void sampleMethod(T param1, U param2) {}
    }

    // Get the sample method
    Method method = SampleClass.class.getMethod(""sampleMethod"", Object.class, Object.class);

    // Call the focal method
    Class<?> result = Reflections.getSecondGenericParameterType(method);

    // Assert the result
    assertNull(result);
}",3,3,3,3
"public static Class<?>[] getGenericTypes(Field field) {
    Type fieldType = field.getGenericType();
    if (fieldType instanceof ParameterizedType) {
        Type[] typeArgs = ((ParameterizedType) fieldType).getActualTypeArguments();
        if (typeArgs.length > 0) {
            List<Class<?>> genericTypes = new ArrayList<>();
            for (Type typeArg : typeArgs) {
                if (typeArg instanceof Class<?>) {
                    genericTypes.add((Class<?>) typeArg);
                }
            }
            return genericTypes.toArray(new Class[0]);
        }
    }
    return null;
}","@Test public void testGetGenericTypes() throws Exception { Class[] types = Reflections.getGenericTypes(getClass().getDeclaredField(""type"")); assertEquals(2, types.length); assertEquals(String.class, types[0]); }
",3,2,2,2,"@Test(timeout = 4000)
public void test03() throws Throwable {
    // Undeclared exception!
    try {
        Reflections.getGenericTypes((Field) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        // 
        // no message in exception (getMessage() returned null)
        // 
        verifyException(""com.zappos.json.util.Reflections"", e);
    }
}",2,1,1,1,"    @Test
    public void testGetGenericTypes() throws NoSuchFieldException {
        // Create a test class with a parameterized field
        class TestClass {
            List<String> myList;
        }

        // Get the field from the test class
        Field field = TestClass.class.getDeclaredField(""myList"");

        // Call the method under test
        Class<?>[] genericTypes = Reflections.getGenericTypes(field);

        // Assert the result
        assertNotNull(genericTypes);
        assertEquals(1, genericTypes.length);
        assertEquals(String.class, genericTypes[0]);
    }",3,3,3,3
"public static Field getField(Class<?> clazz, String fieldName) throws NoSuchFieldException {
    if (clazz == Object.class) {
        return null;
    }
    try {
        Field field = clazz.getDeclaredField(fieldName);
        return field;
    } catch (NoSuchFieldException e) {
        return getField(clazz.getSuperclass(), fieldName);
    }
}","@Test public void testGetField() throws NoSuchFieldException { Field field = Reflections.getField(TestClass.class, ""testField""); Assert.assertNotNull(field); Assert.assertEquals(""testField"", field.getName()); }
",3,3,3,3,"@Test(timeout = 4000)
public void test07() throws Throwable {
    Class<Annotation> class0 = Annotation.class;
    // Undeclared exception!
    try {
        Reflections.getField(class0, "" A6)j>Vi@=Y"");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        // 
        // no message in exception (getMessage() returned null)
        // 
        verifyException(""com.zappos.json.util.Reflections"", e);
    }
}",2,1,2,1,"@Test(timeout = 4000)
public void testGetField() throws Throwable {
    Class<Annotation> class0 = Annotation.class;
    try {
        Reflections.getField(class0, "" A6)j>Vi@=Y"");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        verifyException(""com.zappos.json.util.Reflections"", e);
    }
}",2,1,2,1
"public static boolean hasAnnotation(Method method, Class<? extends Annotation> annotationClass) {
    if (method != null) {
        return method.isAnnotationPresent(annotationClass);
    }
    return false;
}","@Test public void testHasAnnotation() throws Exception { assertTrue(Reflections.hasAnnotation(null, TestAnnotation.class)); assertTrue(Reflections.hasAnnotation(TestAnnotation.class, TestAnnotation.class)); assertTrue(Reflections.hasAnnotation(TestAnnotation.class, TestAnnotation.class)); assertTrue(Reflections.hasAnnotation(TestAnnotation.class, TestAnnotation.class)); assertTrue(Reflections.hasAnnotation(TestAnnotation.class, TestAnnotation.class)); assertFalse(Reflections.hasAnnotation(TestAnnotation.class, TestAnnotation.class)); assertFalse(Reflections.hasAnnotation(TestAnnotation.class, TestAnnotation.class)); assertFalse(Reflections.hasAnnotation(TestAnnotation.class, TestAnnotation.class)); assertFalse(Reflections.hasAnnotation(TestAnnotation.class, TestAnnotation.class)); assertFalse(Reflections.hasAnnotation(TestAnnotation.class, TestAnnotation.class)); assertFalse(Reflections.hasAnnotation(TestAnnotation.class, TestAnnotation.class)); assertFalse(Reflections.hasAnnotation(TestAnnotation.class, TestAnnotation.class)); assertFalse(Reflections.hasAnnotation(TestAnnotation.class, TestAnnotation.class)); assertFalse(Reflections.hasAnnotation(TestAnnotation.class, TestAnnotation.class)); }
",2,1,1,2,"@Test(timeout = 4000)
public void test09() throws Throwable {
    Class<Annotation> class0 = Annotation.class;
    boolean boolean0 = Reflections.hasAnnotation((Method) null, class0);
    assertFalse(boolean0);
}",3,3,1,1,"    @Test
    public void testHasAnnotation() throws NoSuchMethodException {
        // Create a sample class for testing
        class SampleClass {
            @Deprecated
            public void deprecatedMethod() {
            }

            public void nonDeprecatedMethod() {
            }
        }

        // Get the methods of the sample class
        Method deprecatedMethod = SampleClass.class.getMethod(""deprecatedMethod"");
        Method nonDeprecatedMethod = SampleClass.class.getMethod(""nonDeprecatedMethod"");

        // Test case 1: Check if deprecatedMethod has Deprecated annotation
        assertTrue(Reflections.hasAnnotation(deprecatedMethod, Deprecated.class));

        // Test case 2: Check if nonDeprecatedMethod has Deprecated annotation
        assertFalse(Reflections.hasAnnotation(nonDeprecatedMethod, Deprecated.class));
    }",3,3,3,3
"public static boolean hasAnnotation(Method method, Class<? extends Annotation> annotationClass) {
    if (method != null) {
        return method.isAnnotationPresent(annotationClass);
    }
    return false;
}","@Test public void testHasAnnotation() throws Exception { assertTrue(Reflections.hasAnnotation(null, TestAnnotation.class)); assertTrue(Reflections.hasAnnotation(TestAnnotation.class, TestAnnotation.class)); assertTrue(Reflections.hasAnnotation(TestAnnotation.class, TestAnnotation.class)); assertTrue(Reflections.hasAnnotation(TestAnnotation.class, TestAnnotation.class)); assertTrue(Reflections.hasAnnotation(TestAnnotation.class, TestAnnotation.class)); assertFalse(Reflections.hasAnnotation(TestAnnotation.class, TestAnnotation.class)); assertFalse(Reflections.hasAnnotation(TestAnnotation.class, TestAnnotation.class)); assertFalse(Reflections.hasAnnotation(TestAnnotation.class, TestAnnotation.class)); assertFalse(Reflections.hasAnnotation(TestAnnotation.class, TestAnnotation.class)); assertFalse(Reflections.hasAnnotation(TestAnnotation.class, TestAnnotation.class)); assertFalse(Reflections.hasAnnotation(TestAnnotation.class, TestAnnotation.class)); assertFalse(Reflections.hasAnnotation(TestAnnotation.class, TestAnnotation.class)); assertFalse(Reflections.hasAnnotation(TestAnnotation.class, TestAnnotation.class)); assertFalse(Reflections.hasAnnotation(TestAnnotation.class, TestAnnotation.class)); }
",2,1,1,2,"@Test(timeout = 4000)
public void test09() throws Throwable {
    Class<Annotation> class0 = Annotation.class;
    boolean boolean0 = Reflections.hasAnnotation((Method) null, class0);
    assertFalse(boolean0);
}",3,3,1,2,"@Test
public void testHasAnnotation() throws NoSuchFieldException, NoSuchMethodException {
    class SampleClass {
        @SuppressWarnings(""unused"")
        @Deprecated
        private String sampleField;
        @SuppressWarnings(""unused"")
        @Deprecated
        public void sampleMethod() {
        }
    }
    Field field = SampleClass.class.getDeclaredField(""sampleField"");
    Method method = SampleClass.class.getDeclaredMethod(""sampleMethod"");
    assertTrue(Reflections.hasAnnotation(method, field, Deprecated.class));
    assertTrue(Reflections.hasAnnotation(field, Deprecated.class));
}",3,3,3,3
"public Class<?> getInfClass() {
    return infClass;
}","@Test public void testGetInfClass() { TypeImpl type = new TypeImpl(String.class, String.class); assertEquals(String.class, type.getInfClass()); }
",3,2,2,2,"@Test(timeout = 4000)
public void test3() throws Throwable {
    Class<Object> class0 = Object.class;
    TypeImpl typeImpl0 = TypeImpl.getIterableImpl(class0);
    Class<?> class1 = typeImpl0.getInfClass();
    assertFalse(class1.isInterface());
}",3,3,2,2,"@Test
public void testGetInfClass() {
    Class<?> infClass = String.class;

    TypeImpl typeImpl = TypeImpl.getIterableImpl(infClass);

    Class<?> returnedInfClass = typeImpl.getInfClass();
    assertEquals(infClass, returnedInfClass);
}",3,3,3,3
"@Override
public void setTarget(T target) {
    this.target = target;
}","@Test public void testSetTarget() { ArrayTypeWrapper<String> wrapper = new ArrayTypeWrapper<String>(); wrapper.setTarget(new String[] { ""foo"", ""bar"" }); Assert.assertEquals(""foo"", wrapper.getTarget()); }
",2,2,2,2,"@Test(timeout = 4000)
public void test0() throws Throwable {
    ArrayTypeWrapper<Object> arrayTypeWrapper0 = new ArrayTypeWrapper<Object>();
    Class<Object> class0 = Object.class;
    arrayTypeWrapper0.setTarget(class0);
    Class class1 = (Class) arrayTypeWrapper0.getTarget();
    assertFalse(class1.isInterface());
}",2,2,2,2,"    @Test
    public void testSetTarget() {
        // Create an instance of ArrayTypeWrapper
        ArrayTypeWrapper<Integer> wrapper = new ArrayTypeWrapper<>();

        // Create a target object
        Integer target = 10;

        // Call the setTarget method
        wrapper.setTarget(target);

        // Verify that the target object is set correctly
        assertEquals(target, wrapper.getTarget());
    }",3,3,3,3
"@Override
public T getTarget() {
    return target;
}","@Test public void testGetTarget() { assertEquals(target, wrapper.getTarget()); }
",3,2,2,2,"@Test(timeout = 4000)
public void test0() throws Throwable {
    ArrayTypeWrapper<Object> arrayTypeWrapper0 = new ArrayTypeWrapper<Object>();
    Class<Object> class0 = Object.class;
    arrayTypeWrapper0.setTarget(class0);
    Class class1 = (Class) arrayTypeWrapper0.getTarget();
    assertFalse(class1.isInterface());
}",3,2,2,2,"    @Test
    public void testGetTarget() {
        // Create an instance of ArrayTypeWrapper
        ArrayTypeWrapper<Integer> wrapper = new ArrayTypeWrapper<>();

        // Set a target object
        Integer targetObject = 10;
        wrapper.setTarget(targetObject);

        // Retrieve the target object using getTarget()
        Integer retrievedObject = wrapper.getTarget();

        // Assert that the retrieved object is equal to the original target object
        assertEquals(targetObject, retrievedObject);
    }",3,3,3,3
"public void setComponentType(Class<?> componentType) {
    this.componentType = componentType;
}","@Test public void testSetComponentType() { ArrayTypeWrapper wrapper = new ArrayTypeWrapper(); wrapper.setComponentType(String.class); Assert.assertEquals(String.class, wrapper.getComponentType()); }
",3,3,3,3,"@Test(timeout = 4000)
public void test1() throws Throwable {
    ArrayTypeWrapper<Object> arrayTypeWrapper0 = new ArrayTypeWrapper<Object>();
    Class<Object> class0 = Object.class;
    arrayTypeWrapper0.setComponentType(class0);
    Class<?> class1 = arrayTypeWrapper0.getComponentType();
    assertFalse(class1.isArray());
}",3,2,2,2,"    @Test
    public void testSetComponentType() {
        ArrayTypeWrapper wrapper = new ArrayTypeWrapper();
        Class<?> componentType = String.class;

        wrapper.setComponentType(componentType);

        assertEquals(componentType, wrapper.getComponentType());
    }",3,3,3,3
"public Class<?> getComponentType() {
    return componentType;
}","@Test public void testGetComponentType() { assertEquals(String.class, wrapper.getComponentType()); }
",3,2,2,2,"@Test(timeout = 4000)
public void test1() throws Throwable {
    ArrayTypeWrapper<Object> arrayTypeWrapper0 = new ArrayTypeWrapper<Object>();
    Class<Object> class0 = Object.class;
    arrayTypeWrapper0.setComponentType(class0);
    Class<?> class1 = arrayTypeWrapper0.getComponentType();
    assertFalse(class1.isArray());
}",2,2,2,2,"    @Test
    public void testGetComponentType() {
        ArrayTypeWrapper<Integer> wrapper = new ArrayTypeWrapper<>();
        Class<?> componentType = Integer.class;
        wrapper.setComponentType(componentType);
        
        Class<?> result = wrapper.getComponentType();
        
        assertEquals(componentType, result);
    }",3,3,3,3
"protected JsonWriterInvoker getWriter(Class<?> clazz) {
    return JSON_WRITER_INVOKERS.get(clazz);
}","@Test public void testGetWriter() throws Exception { JsonWriterCodeGenerator generator = new JsonWriterCodeGenerator(zapposJson, beanIntrospector); JsonWriterInvoker writer = generator.getWriter(JsonWriter.class); assertNotNull(writer); }
",3,3,3,3,"@Test(timeout = 4000)
public void test2() throws Throwable {
    ZapposJson zapposJson0 = ZapposJson.getInstance();
    Class<ZapposJson> class0 = ZapposJson.class;
    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);
    JsonWriterCodeGenerator jsonWriterCodeGenerator0 = new JsonWriterCodeGenerator(zapposJson0, jsonBeanIntrospector0);
    JsonWriterInvoker jsonWriterInvoker0 = jsonWriterCodeGenerator0.getWriter(class0);
    assertNull(jsonWriterInvoker0);
}",2,2,3,2,"@Test(timeout = 4000)
public void testGetWriter() throws Throwable {
    // Create an instance of ZapposJson
    ZapposJson zapposJson = ZapposJson.getInstance();
    
    // Create an instance of JsonBeanIntrospector with the ZapposJson instance
    JsonBeanIntrospector beanIntrospector = new JsonBeanIntrospector(zapposJson);
    
    // Create an instance of JsonWriterCodeGenerator with the ZapposJson instance and JsonBeanIntrospector instance
    JsonWriterCodeGenerator jsonWriterCodeGenerator = new JsonWriterCodeGenerator(zapposJson, beanIntrospector);
    
    // Get the JsonWriterInvoker for the ZapposJson class from the JsonWriterCodeGenerator
    Class<ZapposJson> clazz = ZapposJson.class;
    JsonWriterInvoker jsonWriterInvoker = jsonWriterCodeGenerator.getWriter(clazz);
    
    // Assert that the JsonWriterInvoker is null
    assertNull(jsonWriterInvoker);
}",3,3,3,3
"protected void debug(String pattern, Object... args) {
    if (debug) {
        System.out.println(Strings.format(pattern, args));
    }
}","@Test public void testDebug() { System.out.println(""debug""); ZapposJson instance = new ZapposJson(); instance.debug(""foo"", ""bar""); }
",3,2,1,2,"@Test(timeout = 4000)
public void test00() throws Throwable {
    ZapposJson zapposJson0 = new ZapposJson();
    Class<HijrahEra>[] classArray0 = (Class<HijrahEra>[]) Array.newInstance(Class.class, 0);
    zapposJson0.debug(""[]"", classArray0);
    assertEquals(0, classArray0.length);
}",3,3,3,3,"@Test(timeout = 4000)
public void testDebug() throws Throwable {
    ZapposJson zapposJson0 = new ZapposJson();
    Class<HijrahEra>[] classArray0 = (Class<HijrahEra>[]) Array.newInstance(Class.class, 0);
    zapposJson0.debug(""[]"", classArray0);
    assertEquals(0, classArray0.length);
}",3,3,3,3
"public static ZapposJson getInstance() {
    return ZapposJsonSingleton.INSTANCE.get();
}","@Test public void testGetInstance() { assertEquals(ZapposJson.getInstance(), ZapposJson.getInstance(""test"")); }
",3,3,2,2,"@Test(timeout = 4000)
public void test02() throws Throwable {
    ZapposJson zapposJson0 = ZapposJson.getInstance();
    StringReader stringReader0 = new StringReader(""Invalid character: "");
    Class<Object> class0 = Object.class;
    // Undeclared exception!
    try {
        zapposJson0.fromJson((Reader) stringReader0, class0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        // 
        // bean introspection failed
        // 
        verifyException(""com.zappos.json.JsonBeanIntrospector"", e);
    }
}",3,1,1,1,"    @Test
    public void testGetInstance() {
        ZapposJson instance1 = ZapposJson.getInstance();
        ZapposJson instance2 = ZapposJson.getInstance();
        
        assertNotNull(instance1);
        assertNotNull(instance2);
        assertSame(instance1, instance2);
    }",3,3,3,3
"@SuppressWarnings({ ""unchecked"", ""rawtypes"" })
public <T> T fromJson(Reader reader, Class<T> targetClass) {
    try {
        ValueFormatter<?> formatter = VALUE_FORMATTERS.get(targetClass);
        if (formatter != null) {
            String s = Strings.fromReader(reader).trim();
            return (T) formatter.parse(this, s);
        } else if (targetClass == Boolean.class || targetClass == boolean.class) {
            String s = Strings.fromReader(reader).trim();
            return (T) Boolean.valueOf(s);
        } else if (targetClass == String.class || targetClass == Character.class || targetClass == char.class) {
            String s = Strings.fromReader(reader).trim();
            if (s.charAt(0) != '""' || s.charAt(s.length() - 1) != '""') {
                throw new IllegalArgumentException(""Invalid string: "" + s);
            }
            s = JsonUtils.unescape(this, s.subSequence(1, s.length() - 1));
            if (targetClass == Character.class || targetClass == char.class) {
                if (s.length() != 1) {
                    throw new IllegalArgumentException(""Invalid character: "" + s);
                }
                return (T) new Character(s.charAt(0));
            }
            return (T) s;
        } else if (Number.class.isAssignableFrom(targetClass) || targetClass.isPrimitive()) {
            String s = Strings.fromReader(reader).trim();
            if (targetClass == Byte.class || targetClass == byte.class) {
                return (T) Byte.valueOf(s);
            } else if (targetClass == Short.class || targetClass == short.class) {
                return (T) Short.valueOf(s);
            } else if (targetClass == Integer.class || targetClass == int.class) {
                return (T) Integer.valueOf(s);
            } else if (targetClass == Long.class || targetClass == long.class) {
                return (T) Long.valueOf(s);
            } else if (targetClass == Float.class || targetClass == float.class) {
                return (T) Float.valueOf(s);
            } else if (targetClass == Double.class || targetClass == double.class) {
                return (T) Double.valueOf(s);
            } else {
                throw new IllegalArgumentException(targetClass.getName() + "" is an unsupported type."" + ""You need a custom ValueFormatter for this type."");
            }
        } else if (targetClass.isEnum()) {
            String s = Strings.fromReader(reader).trim();
            return (T) Enum.valueOf((Class<? extends Enum>) targetClass, s);
        } else if (Iterable.class.isAssignableFrom(targetClass) || Map.class.isAssignableFrom(targetClass)) {
            throw new IllegalArgumentException(targetClass.getName() + "" not support yet"");
        } else if (targetClass.isArray()) {
            throw new IllegalArgumentException(""Array type not support yet"");
        }
        JsonReaderInvoker readerInvoker = readerCodeGenerator.getReader(targetClass);
        if (readerInvoker == null) {
            readerInvoker = readerCodeGenerator.registerReader(targetClass);
        }
        return readerInvoker.readJson(reader, targetClass);
    } catch (JsonException e) {
        throw e;
    } catch (Exception e) {
        throw new JsonException(e);
    }
}","@Test(expected = IllegalArgumentException.class) public void testInvalidString() { ZapposJson.fromJson(new StringReader(""{\\""a\\"":\\""b\\"",\\""b\\"":\\""c\\"",\\""c\\"":\\""d\\"",\\""d\\"":\\""d\\"",\\""d\\"":\\""d\\"",\\""d\\"":\\""d\\"",\\""d\\"":\\""d\\"",\\""d\\"":\\""d\\"",\\""d\\"":\\""d\\"",\\""d\\"":\\""d\\"",\\""d\\"":\\""d\\"",\\""d\\"":\\""d\\"",\\""d\\"":\\""d\\"",\\""d\\"":\\""d\\"",\\""d\\"":\\""d\\"",\\""d\\"":\\""d\\"",\\""d\\"":\\""d\\"",\\""d\\"":\\""d\\"",\\""d\\"":\\""d\\"",\\""d\\"":\\""d\\"",\\""d\\"":\\""d\\"",\\""d\\"":\\""d\\"",\\""d\\"":\\""d\\"",\\""d\\"":\\""d\\"",\\""d\\"":\\""d\\"",\\""d\\"":\\""d\\"",\\""d\\"":\\""d\\"",\\""d\\"":\\""d\\"",\\""d\\"":\\""d\\"",\\""d\\"":\\""d\\"",\\""d\\"":\\""d\\"",\\""d\\"":\\""d\\"",\\""d\\"":\\""d\\"",\\""d\\"":\\""d\\"",\\""d\\"":\\""d\\"",\\""d\\"":\\""d\\"",\\""d\\"":\\""d\\"",\\""d\\"":\\""d\\"",\\""d\\"":\\""d\\"",\\""d\\"",\\""d\\"":\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d\\"",\\""d",1,1,1,1,"@Test(timeout = 4000)
public void test02() throws Throwable {
    ZapposJson zapposJson0 = ZapposJson.getInstance();
    StringReader stringReader0 = new StringReader(""Invalid character: "");
    Class<Object> class0 = Object.class;
    // Undeclared exception!
    try {
        zapposJson0.fromJson((Reader) stringReader0, class0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        // 
        // bean introspection failed
        // 
        verifyException(""com.zappos.json.JsonBeanIntrospector"", e);
    }
}",1,1,1,1,"@Test
public void testGetInstance() {
    ZapposJson instance = ZapposJson.getInstance();
    assertNotNull(instance);
    assertSame(instance, ZapposJson.getInstance());
}",3,2,2,2
"public synchronized boolean is(WriterConfig config) {
    return WRITER_CONFIGS[config.ordinal()];
}","@Test public void testIs() { assertTrue(ZapposJson.getInstance(""test"")); assertTrue(ZapposJson.getInstance(""test"")); assertTrue(ZapposJson.getInstance(""test"")); assertTrue(ZapposJson.getInstance(""test2"")); assertTrue(ZapposJson.getInstance(""test3"")); assertTrue(ZapposJson.getInstance(""test4"")); assertTrue(ZapposJson.getInstance(""test5"")); assertTrue(ZapposJson.getInstance(""test6"")); assertTrue(ZapposJson.getInstance(""test7"")); assertTrue(ZapposJson.getInstance(""test8"")); assertTrue(ZapposJson.getInstance(""test8"")); assertTrue(ZapposJson.getInstance(""test8"")); assertTrue(ZapposJson.getInstance(""test8"")); assertTrue(ZapposJson.getInstance(""test8"")); assertTrue(ZapposJson.getInstance(""test8"")); assertTrue(ZapposJson.getInstance(""test8"")); assertTrue(ZapposJson.getInstance(""test8"")); assertTrue(ZapposJson.getInstance(""test8"")); assertTrue(ZapposJson.getInstance(""test8"")); assertTrue(ZapposJson.getInstance(""test8"")); assertTrue(ZapposJson.getInstance(""test8"")); assertTrue(ZapposJson.getInstance(""test8"")); assertTrue(ZapposJson.getInstance(""test8"")); assertTrue(ZapposJson.getInstance(""test8"")); assertTrue(ZapposJson.getInstance(""test8"")); assertTrue(ZapposJson.getInstance(""test8"")); assertTrue(ZapposJson.getInstance(""test8"")); assertTrue(ZapposJson.getInstance(""test8"")); }
",3,1,1,1,"@Test(timeout = 4000)
public void test05() throws Throwable {
    ZapposJson zapposJson0 = new ZapposJson();
    JsonConfig.WriterConfig jsonConfig_WriterConfig0 = JsonConfig.WriterConfig.WRITE_ENUM_USING_NAME;
    boolean boolean0 = zapposJson0.is(jsonConfig_WriterConfig0);
    assertFalse(boolean0);
}",3,3,3,3,"@Test
public void testIsWriterConfig() {
    ZapposJson zapposJson = ZapposJson.getInstance();

    boolean result = zapposJson.is(JsonConfig.WriterConfig.WRITE_ENUM_USING_NAME);

    assertFalse(result);
}",3,3,3,3
"public ValueFormatter<Object> getValueFormatter(Class<?> objectType) {
    return VALUE_FORMATTERS.get(objectType);
}","@Test public void testGetValueFormatter() { assertEquals(ValueFormatter.class, ZapposJson.getInstance(""test"").getValueFormatter(String.class)); assertEquals(ValueFormatter.class, ZapposJson.getInstance(""test"").getValueFormatter(String.class)); assertEquals(ValueFormatter.class, ZapposJson.getInstance(""test"").getValueFormatter(String.class)); assertEquals(ValueFormatter.class, ZapposJson.getInstance(""test"").getValueFormatter(String.class)); assertEquals(ValueFormatter.class, ZapposJson.getInstance(""test"").getValueFormatter(String.class)); assertEquals(ValueFormatter.class, ZapposJson.getInstance(""test"").getValueFormatter(String.class)); assertEquals(ValueFormatter.class, ZapposJson.getInstance(""test"").getValueFormatter(String.class)); assertEquals(ValueFormatter.class, ZapposJson.getInstance(""test"").getValueFormatter(String.class)); assertEquals(ValueFormatter.class, ZapposJson.getInstance(""test"").getValueFormatter(String.class)); assertEquals(ValueFormatter.class, ZapposJson.getInstance(""test"").getValueFormatter(String.class)); assertEquals(ValueFormatter.class, ZapposJson.getInstance(""test"").getValueFormatter(String.class)); assertEquals(ValueFormatter.class, ZapposJson.getInstance(""test"").getValueFormatter(String.class)); assertEquals(ValueFormatter.class, ZapposJson.getInstance(""test"").getValueFormatter(String.class)); assertEquals(ValueFormatter.class, ZapposJson.getInstance(""test"").getValueFormatter(String.class)); assertEquals(ValueFormatter.class, ZapposJson.getInstance(""test"").getValueFormatter(String.class)); }
",3,1,1,1,"@Test(timeout = 4000)
public void test07() throws Throwable {
    ZapposJson zapposJson0 = new ZapposJson(true);
    Class<Date> class0 = Date.class;
    ValueFormatter<Object> valueFormatter0 = zapposJson0.getValueFormatter(class0);
    assertNotNull(valueFormatter0);
}",3,3,3,3,"@Test
public void testGetValueFormatter() {
    ZapposJson zapposJson = new ZapposJson();
    Class<Date> class0 = Date.class;
    ValueFormatter<Object> valueFormatter0 = zapposJson.getValueFormatter(class0);
    assertNotNull(valueFormatter0);
}",3,3,3,3
"public static ZapposJson getInstance() {
    return ZapposJsonSingleton.INSTANCE.get();
}","@Test public void testGetInstance() { assertEquals(ZapposJson.getInstance(), ZapposJson.getInstance(""test"")); }
",3,2,2,2,"@Test(timeout = 4000)
public void test02() throws Throwable {
    ZapposJson zapposJson0 = ZapposJson.getInstance();
    StringReader stringReader0 = new StringReader(""Invalid character: "");
    Class<Object> class0 = Object.class;
    // Undeclared exception!
    try {
        zapposJson0.fromJson((Reader) stringReader0, class0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        // 
        // bean introspection failed
        // 
        verifyException(""com.zappos.json.JsonBeanIntrospector"", e);
    }
}",2,1,1,1,"    @Test
    public void testGetInstance() {
        // Test case 1: Verify that getInstance returns the same instance for the same name
        ZapposJson instance1 = ZapposJson.getInstance(""name1"");
        ZapposJson instance2 = ZapposJson.getInstance(""name1"");
        assertSame(instance1, instance2);

        // Test case 2: Verify that getInstance returns different instances for different names
        ZapposJson instance3 = ZapposJson.getInstance(""name2"");
        assertNotSame(instance1, instance3);
    }",3,3,3,3
"public void removeValueFormatter(Class<?> objectType) {
    VALUE_FORMATTERS.remove(objectType);
}","@Test public void testRemoveValueFormatter() { ZapposJson zapposJson = new ZapposJson(); zapposJson.removeValueFormatter(String.class); Assert.assertTrue(zapposJson.getValueFormatter(String.class) instanceof String); Assert.assertTrue(zapposJson.getValueFormatter(String.class) instanceof String); Assert.assertTrue(zapposJson.getValueFormatter(String.class) instanceof String); Assert.assertTrue(zapposJson.getValueFormatter(String.class) instanceof String); Assert.assertTrue(zapposJson.getValueFormatter(String.class) instanceof String); Assert.assertTrue(zapposJson.getValueFormatter(String.class) instanceof String); Assert.assertTrue(zapposJson.getValueFormatter(String.class) instanceof String); Assert.assertTrue(zapposJson.getValueFormatter(String.class) instanceof String); Assert.assertTrue(zapposJson.getValueFormatter(String.class) instanceof String); Assert.assertTrue(zapposJson.getValueFormatter(String.class) instanceof String); Assert.assertTrue(zapposJson.getValueFormatter(String.class) instanceof String); Assert.assertTrue(zapposJson.getValueFormatter(String.class) instanceof String); Assert.assertTrue(zapposJson.getValueFormatter(String.class) instanceof String); Assert.assertTrue(zapposJson.getValueFormatter(String.class) instanceof String); Assert.assertTrue(zapposJson.getValueFormatter(String.class) instanceof String); Assert.assertTrue(zapposJson.getValueFormatter(String.class) instanceof String); Assert.assertTrue(zapposJson.getValueFormatter(String.class) instanceof String); }
",3,1,1,1,"@Test(timeout = 4000)
public void test36() throws Throwable {
    ZapposJson zapposJson0 = new ZapposJson();
    Class<Date> class0 = Date.class;
    zapposJson0.removeValueFormatter(class0);
}",3,3,3,3,"@Test(timeout = 4000)
public void testRemoveValueFormatter() throws Throwable {
    ZapposJson zapposJson = new ZapposJson();
    Class<Date> class0 = Date.class;
    zapposJson.removeValueFormatter(class0);
}",3,3,3,3
"public JsonBeanAttribute setJsonKey(String jsonKey) {
    this.jsonKey = jsonKey;
    return this;
}","@Test public void testSetJsonKey() throws Exception { JsonBeanAttribute jsonBeanAttribute = new JsonBeanAttribute(); jsonBeanAttribute.setJsonKey(""foo""); Assert.assertEquals(""foo"", jsonBeanAttribute.getJsonKey()); }
",3,3,3,3,"@Test(timeout = 4000)
public void test00() throws Throwable {
    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();
    JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setJsonKey(""U/e9SQZ'~VQDTn"");
    String string0 = jsonBeanAttribute1.getJsonKey();
    assertEquals(""U/e9SQZ'~VQDTn"", string0);
}",3,3,3,3,"    @Test
    public void testSetJsonKey() {
        // Create a new instance of JsonBeanAttribute
        JsonBeanAttribute attribute = new JsonBeanAttribute();

        // Set the jsonKey attribute using the setJsonKey method
        String jsonKey = ""testKey"";
        JsonBeanAttribute result = attribute.setJsonKey(jsonKey);

        // Verify that the jsonKey attribute has been set correctly
        assertEquals(jsonKey, attribute.getJsonKey());

        // Verify that the setJsonKey method returns the updated instance of JsonBeanAttribute
        assertSame(attribute, result);
    }",3,3,3,3
"public String getJsonKey() {
    return jsonKey;
}","@Test public void testGetJsonKey() throws Exception { JsonBeanAttribute jsonBeanAttribute = new JsonBeanAttribute(); Assert.assertEquals("""", jsonBeanAttribute.getJsonKey()); }
",3,3,3,3,"@Test(timeout = 4000)
public void test00() throws Throwable {
    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();
    JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setJsonKey(""U/e9SQZ'~VQDTn"");
    String string0 = jsonBeanAttribute1.getJsonKey();
    assertEquals(""U/e9SQZ'~VQDTn"", string0);
}",3,3,3,3,"    @Test
    public void testGetJsonKey() {
        // Create a JsonBeanAttribute object for testing
        Method method = null; // Replace with a valid method
        Field field = null; // Replace with a valid field
        String attributeKey = ""attributeKey"";
        JsonBeanAttribute jsonBeanAttribute = new JsonBeanAttribute(method, field, attributeKey);

        // Set the jsonKey value
        String expectedJsonKey = ""jsonKey"";
        jsonBeanAttribute.setJsonKey(expectedJsonKey);

        // Call the getJsonKey() method and assert the result
        String actualJsonKey = jsonBeanAttribute.getJsonKey();
        assertEquals(expectedJsonKey, actualJsonKey);
    }",3,3,3,3
"public JsonBeanAttribute setFormatterPattern(String formatterPattern) {
    this.formatterPattern = formatterPattern;
    return this;
}","@Test public void testSetFormatterPattern() throws Exception { JsonBeanAttribute jsonBeanAttribute = new JsonBeanAttribute(); assertEquals("""", jsonBeanAttribute.getFormatterPattern()); }
",3,2,1,2,"@Test(timeout = 4000)
public void test01() throws Throwable {
    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();
    jsonBeanAttribute0.setFormatterPattern(""PFb|,_"");
    String string0 = jsonBeanAttribute0.getFormatterPattern();
    assertEquals(""PFb|,_"", string0);
}",3,2,2,2,"    @Test
    public void testSetFormatterPattern() {
        // Create a JsonBeanAttribute object for testing
        Method method = null; // Replace with a valid method
        Field field = null; // Replace with a valid field
        String attributeKey = ""testAttributeKey"";
        JsonBeanAttribute jsonBeanAttribute = new JsonBeanAttribute(method, field, attributeKey);

        // Set the formatter pattern
        String formatterPattern = ""yyyy-MM-dd"";
        JsonBeanAttribute result = jsonBeanAttribute.setFormatterPattern(formatterPattern);

        // Verify that the formatter pattern is set correctly
        assertEquals(formatterPattern, result.getFormatterPattern());
    }",3,3,2,2
"public String getFormatterPattern() {
    return formatterPattern;
}","@Test public void testGetFormatterPattern() { JsonBeanAttribute attribute = new JsonBeanAttribute(); assertEquals("""", attribute.getFormatterPattern()); }
",3,3,3,3,"@Test(timeout = 4000)
public void test01() throws Throwable {
    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();
    jsonBeanAttribute0.setFormatterPattern(""PFb|,_"");
    String string0 = jsonBeanAttribute0.getFormatterPattern();
    assertEquals(""PFb|,_"", string0);
}",3,3,3,3,"    @Test
    public void testGetFormatterPattern() {
        // Create a JsonBeanAttribute instance for testing
        Method method = null; // Replace with a valid method
        Field field = null; // Replace with a valid field
        String attributeKey = ""testAttributeKey"";
        JsonBeanAttribute jsonBeanAttribute = new JsonBeanAttribute(method, field, attributeKey);

        // Set the formatter pattern
        String formatterPattern = ""yyyy-MM-dd"";
        jsonBeanAttribute.setFormatterPattern(formatterPattern);

        // Verify that the formatter pattern is retrieved correctly
        String actualFormatterPattern = jsonBeanAttribute.getFormatterPattern();
        assertEquals(formatterPattern, actualFormatterPattern);
    }",3,3,2,2
"public JsonBeanAttribute setEnumValue(EnumValue enumValue) {
    this.enumValue = enumValue;
    return this;
}","@Test public void testSetEnumValue() throws Exception { JsonBeanAttribute jsonBeanAttribute = new JsonBeanAttribute(); JsonBeanAttribute jsonBeanAttribute2 = jsonBeanAttribute.setEnumValue(EnumValue.of(""test"")); Assert.assertEquals(""test"", jsonBeanAttribute2.getJsonKey()); Assert.assertEquals(""test"", jsonBeanAttribute2.getJsonKey()); Assert.assertEquals(""test"", jsonBeanAttribute2.getJsonKey()); Assert.assertEquals(""test"", jsonBeanAttribute2.getJsonKey()); Assert.assertEquals(""test"", jsonBeanAttribute2.getJsonKey()); Assert.assertEquals(""test"", jsonBeanAttribute2.getJsonKey()); Assert.assertEquals(""test"", jsonBeanAttribute2.getJsonKey()); Assert.assertEquals(""test"", jsonBeanAttribute2.getJsonKey()); Assert.assertEquals(""test"", jsonBeanAttribute2.getJsonKey()); Assert.assertEquals(""test"", jsonBeanAttribute2.getJsonKey()); Assert.assertEquals(""test"", jsonBeanAttribute2.getJsonKey()); Assert.assertEquals(""test"", jsonBeanAttribute2.getJsonKey()); Assert.assertEquals(""test"", jsonBeanAttribute2.getJsonKey()); Assert.assertEquals(""test"", jsonBeanAttribute2.getJsonKey()); Assert.assertEquals(""test"", jsonBeanAttribute2.getJsonKey()); Assert.assertEquals(""test"", jsonBeanAttribute2.getJsonKey()); Assert.assertEquals(""test"", jsonBeanAttribute2.getJsonKey()); Assert.assertEquals(""test"", jsonBeanAttribute2.getJsonKey()); Assert.assertEquals(""test"", jsonBeanAttribute2.getJsonKey()); Assert.assertEquals(""test"", jsonBeanAttribute2.getJsonKey()); Assert.assertEquals(""test"", jsonBeanAttribute2.getJsonKey()); Assert.assertEquals(""test"", jsonBeanAttribute2.getJsonKey()); Assert.assertEquals(""test"", jsonBeanAttribute2.getJsonKey()); Assert.assertEquals(""test"", jsonBeanAttribute2.getJsonKey()); Assert.assertEquals(""test"", jsonBeanAttribute2.getJsonKey()); Assert.assertEquals(""test"", jsonBeanAttribute2.getJsonKey()); }
",3,1,1,1,"@Test(timeout = 4000)
public void test03() throws Throwable {
    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();
    JsonEnum.EnumValue jsonEnum_EnumValue0 = JsonEnum.EnumValue.STRING;
    JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setEnumValue(jsonEnum_EnumValue0);
    JsonEnum.EnumValue jsonEnum_EnumValue1 = jsonBeanAttribute1.getEnumValue();
    assertEquals(JsonEnum.EnumValue.STRING, jsonEnum_EnumValue1);
}",3,3,3,3,"@Test
public void testSetEnumValue() {
    JsonBeanAttribute jsonBeanAttribute = new JsonBeanAttribute();

    JsonEnum.EnumValue enumValue = JsonEnum.EnumValue.STRING;

    JsonBeanAttribute result = jsonBeanAttribute.setEnumValue(enumValue);
    assertEquals(enumValue, result.getEnumValue());
}",3,3,3,3
"public void signRequest(Token accessToken, OAuthRequest request) {
    request.addQuerystringParameter(OAuthConstants.ACCESS_TOKEN, accessToken.getToken());
}","@Test public void testSignRequest() throws Exception { OAuthRequest request = new OAuthRequest(); service.signRequest(accessToken, request); Assert.assertNotNull(request); Assert.assertEquals(OAuthConstants.ACCESS_TOKEN, request.getQuerystringParameter(OAuthConstants.ACCESS_TOKEN)); Assert.assertEquals(OAuthConstants.ACCESS_TOKEN, request.getQuerystringParameter(OAuthConstants.ACCESS_TOKEN)); Assert.assertEquals(OAuthConstants.ACCESS_TOKEN, request.getQuerystringParameter(OAuthConstants.ACCESS_TOKEN)); Assert.assertEquals(OAuthConstants.ACCESS_TOKEN, request.getQuerystringParameter(OAuthConstants.ACCESS_TOKEN)); Assert.assertEquals(OAuthConstants.ACCESS_TOKEN, request.getQuerystringParameter(OAuthConstants.ACCESS_TOKEN)); Assert.assertEquals(OAuthConstants.ACCESS_TOKEN, request.getQuerystringParameter(OAuthConstants.ACCESS_TOKEN)); Assert.assertEquals(OAuthConstants.ACCESS_TOKEN, request.getQuerystringParameter(OAuthConstants.ACCESS_TOKEN)); Assert.assertEquals(OAuthConstants.ACCESS_TOKEN, request.getQuerystringParameter(OAuthConstants.ACCESS_TOKEN)); Assert.assertEquals(OAuthConstants.ACCESS_TOKEN, request.getQuerystringParameter(OAuthConstants.ACCESS_TOKEN)); Assert.assertEquals(OAuthConstants.ACCESS_TOKEN, request.getQuerystringParameter(OAuthConstants.ACCESS_TOKEN)); Assert.assertEquals(OAuthConstants.ACCESS_TOKEN, request.getQuerystringParameter(OAuthConstants.ACCESS_TOKEN)); Assert.assertEquals(OAuthConstants.ACCESS_TOKEN, request.getQuerystringParameter(OAuthConstants.ACCESS_TOKEN)); Assert.assertEquals(OAuthConstants.ACCESS_TOKEN, request.getQuerystringParameter(OAuthConstants.ACCESS_TOKEN)); Assert.assertEquals(OAuthConstants.ACCESS_TOKEN, request.getQuerystringParameter(OAuthConstants.ACCESS_TOKEN)); }
",1,1,1,1,"@Test(timeout = 4000)
public void test0() throws Throwable {
    InstagramApi instagramApi0 = new InstagramApi();
    OAuthConfig oAuthConfig0 = new OAuthConfig(""org.jinstagram.entity.users.feed.MediaFeed"", ""f39fuOB["", ""Em5h$=2gsP=]7=zA"", ""Em5h$=2gsP=]7=zA"", """");
    InstagramService instagramService0 = instagramApi0.createService(oAuthConfig0);
    Token token0 = new Token("""", ""|[QBcb4"");
    Verbs verbs0 = Verbs.PUT;
    OAuthRequest oAuthRequest0 = new OAuthRequest(verbs0, ""f39fuOB["");
    instagramService0.signRequest(token0, oAuthRequest0);
    assertEquals(""1.0"", instagramService0.getVersion());
}",1,2,1,1,"@Test
public void testSignRequest() {
    Token accessToken = new Token(""mockAccessToken"", ""mockSecret"");

    OAuthRequest request = new OAuthRequest(Verbs.GET, ""https:"");

    InstagramService instagramService = new InstagramService(null, null);
    instagramService.signRequest(accessToken, request);
    assertEquals(""mockAccessToken"", request.getQueryStringParams().get(OAuthConstants.ACCESS_TOKEN));
}",3,3,2,2
"public String getVersion() {
    return VERSION;
}","@Test public void testGetVersion() { InstagramService instagramService = new InstagramService(api, config); Assert.assertEquals(InstagramService.VERSION, instagramService.getVersion()); }
",3,3,3,3,"@Test(timeout = 4000)
public void test0() throws Throwable {
    InstagramApi instagramApi0 = new InstagramApi();
    OAuthConfig oAuthConfig0 = new OAuthConfig(""org.jinstagram.entity.users.feed.MediaFeed"", ""f39fuOB["", ""Em5h$=2gsP=]7=zA"", ""Em5h$=2gsP=]7=zA"", """");
    InstagramService instagramService0 = instagramApi0.createService(oAuthConfig0);
    Token token0 = new Token("""", ""|[QBcb4"");
    Verbs verbs0 = Verbs.PUT;
    OAuthRequest oAuthRequest0 = new OAuthRequest(verbs0, ""f39fuOB["");
    instagramService0.signRequest(token0, oAuthRequest0);
    assertEquals(""1.0"", instagramService0.getVersion());
}",1,2,1,1,"    @Test
    public void testGetVersion() {
        InstagramService instagramService = new InstagramService(null, null);
        String version = instagramService.getVersion();
        assertNotNull(version);
        assertEquals(""1.0"", version);
    }",3,3,3,3
"public Token getRequestToken() {
    throw new UnsupportedOperationException(""Unsupported operation, please use 'getAuthorizationUrl' and redirect your users there"");
}","@Test(expected = UnsupportedOperationException.class) public void testGetRequestToken() { InstagramService instagramService = new InstagramService(api, config); instagramService.getRequestToken(); }
",3,3,3,3,"@Test(timeout = 4000)
public void test5() throws Throwable {
    InstagramApi instagramApi0 = new InstagramApi();
    InstagramService instagramService0 = instagramApi0.createService((OAuthConfig) null);
    // Undeclared exception!
    try {
        instagramService0.getRequestToken();
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        // 
        // Unsupported operation, please use 'getAuthorizationUrl' and redirect your users there
        // 
        verifyException(""org.jinstagram.auth.oauth.InstagramService"", e);
    }
}",2,1,1,1,"    @Test(expected = UnsupportedOperationException.class)
    public void testGetRequestToken() {
        InstagramService instagramService = new InstagramService(null, null);
        instagramService.getRequestToken();
    }",3,3,3,3
"public void addOAuthParameter(String key, String value) {
    oauthParameters.put(checkKey(key), value);
}","@Test public void testAddOAuthParameter() throws Exception { OAuthRequest request = new OAuthRequest(Verbs.GET, ""http: request.addOAuthParameter(""key"", ""value""); Assert.assertEquals(""value"", request.getOAuthParameters().get(""key"")); Assert.assertEquals(""value"", request.getOAuthParameters().get(""key"")); Assert.assertEquals(""value"", request.getOAuthParameters().get(""key"")); Assert.assertEquals(""value"", request.getOAuthParameters().get(""key"")); Assert.assertEquals(""value"", request.getOAuthParameters().get(""key"")); Assert.assertEquals(""value"", request.getOAuthParameters().get(""key"")); Assert.assertEquals(""value"", request.getOAuthParameters().get(""key"")); Assert.assertEquals(""value"", request.getOAuthParameters().get(""key"")); Assert.assertEquals(""value"", request.getOAuthParameters().get(""key"")); Assert.assertEquals(""value"", request.getOAuthParameters().get(""key"")); Assert.assertEquals(""value"", request.getOAuthParameters().get(""key"")); Assert.assertEquals(""value"", request.getOAuthParameters().get(""key"")); Assert.assertEquals(""value"", request.getOAuthParameters().get(""value"")); }
",2,1,1,1,"@Test(timeout = 4000)
public void test0() throws Throwable {
    Verbs verbs0 = Verbs.DELETE;
    OAuthRequest oAuthRequest0 = new OAuthRequest(verbs0, ""oauth_"");
    oAuthRequest0.addOAuthParameter(""oauth_"", ""po1;qh9e-B"");
    Map<String, String> map0 = oAuthRequest0.getOauthParameters();
    assertFalse(map0.isEmpty());
}",3,3,2,2,"    @Test
    public void testAddOAuthParameter() {
        // Create an instance of OAuthRequest
        OAuthRequest oauthRequest = new OAuthRequest(Verbs.GET, ""https://example.com"");

        // Add an OAuth parameter
        String key = ""oauth_key"";
        String value = ""oauth_value"";
        oauthRequest.addOAuthParameter(key, value);

        // Retrieve the OAuth parameters
        Map<String, String> oauthParameters = oauthRequest.getOauthParameters();

        // Verify that the OAuth parameter was added correctly
        assertTrue(oauthParameters.containsKey(key));
        assertEquals(value, oauthParameters.get(key));
    }",3,3,3,3
"public Map<String, String> getOauthParameters() {
    return oauthParameters;
}","@Test public void testGetOAuthParameters() throws Exception { Map<String, String> params = new HashMap<>(); params.put(""key"", ""value""); params.put(""key2"", ""value2""); params.put(""key3"", ""value3""); params.put(""key4"", ""value4""); params.put(""key5"", ""value5""); params.put(""key6"", ""value6""); params.put(""key7"", ""value6""); params.put(""key7"", ""value6""); params.put(""key7"", ""value7""); OAuthRequest oauthRequest = new OAuthRequest(Verbs.GET, ""https: assertEquals(params, oauthRequest.getOAuthParameters()); }
",2,1,1,1,"@Test(timeout = 4000)
public void test0() throws Throwable {
    Verbs verbs0 = Verbs.DELETE;
    OAuthRequest oAuthRequest0 = new OAuthRequest(verbs0, ""oauth_"");
    oAuthRequest0.addOAuthParameter(""oauth_"", ""po1;qh9e-B"");
    Map<String, String> map0 = oAuthRequest0.getOauthParameters();
    assertFalse(map0.isEmpty());
}",3,3,2,2,"@Test
public void testGetOauthParameters() {
    OAuthRequest oauthRequest = new OAuthRequest(Verbs.GET, ""https://example.com"");
    oauthRequest.addOAuthParameter(""oauth_key"", ""oauth_value"");
    Map<String, String> oauthParameters = oauthRequest.getOauthParameters();
    
    // Assertion statement
    assertEquals(1, oauthParameters.size());
    assertTrue(oauthParameters.containsKey(""oauth_key""));
    assertEquals(""oauth_value"", oauthParameters.get(""oauth_key""));
}",3,3,3,3
"@Override
public String toString() {
    return String.format(""@OAuthRequest(%s, %s)"", getVerb(), getUrl());
}","@Test public void testToString() { String expected = ""@OAuthRequest(GET, GET)""; assertEquals(expected, new OAuthRequest(GET, GET).toString()); }
",2,2,1,1,"@Test(timeout = 4000)
public void test3() throws Throwable {
    Verbs verbs0 = Verbs.DELETE;
    OAuthRequest oAuthRequest0 = new OAuthRequest(verbs0, ""oauth_"");
    String string0 = oAuthRequest0.toString();
    assertEquals(""@OAuthRequest(DELETE, oauth_)"", string0);
}",3,3,3,3,"    @Test
    public void testToString() {
        // Create a new OAuthRequest object
        OAuthRequest request = new OAuthRequest(Verbs.GET, ""https://example.com"");

        // Call the toString() method
        String result = request.toString();

        // Verify that the result is formatted correctly
        assertEquals(""@OAuthRequest(GET, https://example.com)"", result);
    }",3,3,3,3
"public String getToken() {
    return token;
}","@Test public void testGetToken() { assertEquals(""token"", token.getToken()); }
",3,1,1,1,"@Test(timeout = 4000)
public void test0() throws Throwable {
    Token token0 = new Token((String) null, ""1`dZhu@f&';g>u:fM"");
    String string0 = token0.getToken();
    assertNull(string0);
}",3,2,1,2,"    @Test
    public void testGetToken() {
        // Create a new Token object
        Token token = new Token(""abc123"", ""secret"");

        // Call the getToken() method
        String result = token.getToken();

        // Assert that the returned token is correct
        assertEquals(""abc123"", result);
    }",3,3,3,3
"public String getSecret() {
    return secret;
}","@Test public void testGetSecret() { assertEquals(""secret"", token.getSecret()); }
",3,2,2,2,"@Test(timeout = 4000)
public void test2() throws Throwable {
    Token token0 = new Token("""", (String) null, ""Token[%s , %s]"");
    String string0 = token0.getSecret();
    assertNull(string0);
    assertEquals("""", token0.getToken());
}",3,2,2,2,"    @Test
    public void testGetSecret() {
        // Create a new Token object with a token and secret
        Token token = new Token(""myToken"", ""mySecret"");

        // Call the getSecret() method and store the result
        String secret = token.getSecret();

        // Assert that the returned secret is equal to the expected secret
        assertEquals(""mySecret"", secret);
    }",3,3,3,3
"public String getRawResponse() {
    if (rawResponse == null) {
        throw new IllegalStateException(""This token object was not constructed "" + ""by jInstagramAuthService and does not have a rawResponse"");
    }
    return rawResponse;
}","@Test public void testGetRawResponse() { Token token = new Token(""token"", ""secret""); assertEquals(""secret"", token.getRawResponse()); }
",2,2,1,1,"@Test(timeout = 4000)
public void test4() throws Throwable {
    Token token0 = new Token("""", (String) null, ""Token[%s , %s]"");
    String string0 = token0.getRawResponse();
    assertEquals("""", token0.getToken());
    assertEquals(""Token[%s , %s]"", string0);
}",2,2,1,1,"    @Test
    public void testGetRawResponse() {
        // Create a token object with a non-null raw response
        Token token = new Token(""token"", ""secret"", ""rawResponse"");

        // Call the getRawResponse() method and assert that it returns the expected raw response
        String rawResponse = token.getRawResponse();
        assertEquals(""rawResponse"", rawResponse);
    }",3,3,3,3
"public String getScope() {
    return scope;
}","@Test public void testGetScope() throws Exception { OAuthConfig oauthConfig = new OAuthConfig(""key"", ""secret""); Assert.assertEquals(""scope"", oauthConfig.getScope()); }
",3,3,2,2,"@Test(timeout = 4000)
public void test00() throws Throwable {
    OAuthConfig oAuthConfig0 = new OAuthConfig(""NFAt&SK3XS32']%md\r"", (String) null, (String) null, (String) null, (String) null);
    String string0 = oAuthConfig0.getScope();
    assertEquals(""oob"", oAuthConfig0.getCallback());
    assertNull(string0);
}",3,3,2,2,"    @Test
    public void testGetScope() {
        // Create an instance of OAuthConfig
        OAuthConfig oauthConfig = new OAuthConfig(""key"", ""secret"", ""callback"", ""scope"");

        // Get the scope value using the getScope() method
        String scope = oauthConfig.getScope();

        // Assert that the scope value is not null
        assertNotNull(scope);

        // Assert that the scope value is equal to the expected value
        assertEquals(""scope"", scope);
    }",3,3,3,3
"public String getCallback() {
    return callback;
}","@Test public void testGetCallback() { OAuthConfig config = new OAuthConfig(""key"", ""secret""); assertEquals(""callback"", config.getCallback()); }
",2,2,2,2,"@Test(timeout = 4000)
public void test00() throws Throwable {
    OAuthConfig oAuthConfig0 = new OAuthConfig(""NFAt&SK3XS32']%md\r"", (String) null, (String) null, (String) null, (String) null);
    String string0 = oAuthConfig0.getScope();
    assertEquals(""oob"", oAuthConfig0.getCallback());
    assertNull(string0);
}",2,2,1,1,"    @Test
    public void testGetCallback() {
        // Create an instance of OAuthConfig
        OAuthConfig oauthConfig = new OAuthConfig(""key"", ""secret"", ""callback"", ""scope"", ""display"");

        // Get the callback value using the getCallback() method
        String callback = oauthConfig.getCallback();

        // Assert that the retrieved callback value is equal to the expected value
        assertEquals(""callback"", callback);
    }",3,3,3,3
"public void setRequestProxy(Proxy requestProxy) {
    this.requestProxy = requestProxy;
}","@Test public void testSetRequestProxy() { OAuthConfig oauthConfig = new OAuthConfig(""key"", ""secret""); proxy = new Proxy(""http: oauthConfig.setRequestProxy(proxy); }
",2,1,1,1,"@Test(timeout = 4000)
public void test02() throws Throwable {
    OAuthConfig oAuthConfig0 = new OAuthConfig("""", """", """", """");
    Proxy proxy0 = Proxy.NO_PROXY;
    oAuthConfig0.setRequestProxy(proxy0);
    oAuthConfig0.getRequestProxy();
    assertTrue(oAuthConfig0.hasScope());
    assertEquals("""", oAuthConfig0.getCallback());
}",2,2,2,2,"@Test
public void testSetRequestProxy() {
    OAuthConfig oauthConfig = new OAuthConfig(""key"", ""secret"");

    Proxy proxy = Proxy.NO_PROXY;

    oauthConfig.setRequestProxy(proxy);
    assertEquals(proxy, oauthConfig.getRequestProxy());
}",3,3,3,3
"public Proxy getRequestProxy() {
    return requestProxy;
}","@Test public void testGetRequestProxy() throws Exception { OAuthConfig oauthConfig = new OAuthConfig(""key"", ""secret""); Assert.assertNotNull(oauthConfig.getRequestProxy()); Assert.assertEquals(""key"", oauthConfig.getRequestProxy().getKey()); Assert.assertEquals(""secret"", oauthConfig.getRequestProxy().getSecret()); Assert.assertEquals(""callback"", oauthConfig.getRequestProxy().getCallback()); Assert.assertEquals(""scope"", oauthConfig.getRequestProxy().getScope()); Assert.assertEquals(""display"", oauthConfig.getRequestProxy().getDisplay()); Assert.assertEquals(""display"", oauthConfig.getRequestProxy().getScope()); Assert.assertEquals(""display"", oauthConfig.getRequestProxy().getDisplay()); }
",2,2,1,1,"@Test(timeout = 4000)
public void test02() throws Throwable {
    OAuthConfig oAuthConfig0 = new OAuthConfig("""", """", """", """");
    Proxy proxy0 = Proxy.NO_PROXY;
    oAuthConfig0.setRequestProxy(proxy0);
    oAuthConfig0.getRequestProxy();
    assertTrue(oAuthConfig0.hasScope());
    assertEquals("""", oAuthConfig0.getCallback());
}",2,2,1,1,"    @Test
    public void testGetRequestProxy() {
        // Create an instance of OAuthConfig
        OAuthConfig oauthConfig = new OAuthConfig(""key"", ""secret"");

        // Create a Proxy object
        Proxy proxy = Proxy.NO_PROXY;

        // Set the Proxy object to the OAuthConfig instance
        oauthConfig.setRequestProxy(proxy);

        // Retrieve the Proxy object using getRequestProxy()
        Proxy retrievedProxy = oauthConfig.getRequestProxy();

        // Assert that the retrieved Proxy object is equal to the original Proxy object
        assertEquals(proxy, retrievedProxy);
    }",3,3,3,3
"public boolean hasScope() {
    return scope != null;
}","@Test public void testHasScope() { OAuthConfig config = new OAuthConfig(""key"", ""secret""); assertTrue(config.hasScope()); }
",3,3,3,3,"@Test(timeout = 4000)
public void test02() throws Throwable {
    OAuthConfig oAuthConfig0 = new OAuthConfig("""", """", """", """");
    Proxy proxy0 = Proxy.NO_PROXY;
    oAuthConfig0.setRequestProxy(proxy0);
    oAuthConfig0.getRequestProxy();
    assertTrue(oAuthConfig0.hasScope());
    assertEquals("""", oAuthConfig0.getCallback());
}",2,2,2,2,"    @Test
    public void testHasScope() {
        // Create an instance of OAuthConfig
        OAuthConfig oauthConfig = new OAuthConfig(""key"", ""secret"");

        // Test when scope is null
        assertFalse(oauthConfig.hasScope());

        // Test when scope is not null
        oauthConfig = new OAuthConfig(""key"", ""secret"", ""callback"", ""scope"");
        assertTrue(oauthConfig.hasScope());
    }",3,3,3,3
"public String getDisplay() {
    return display;
}","@Test public void testGetDisplay() { OAuthConfig config = new OAuthConfig(""key"", ""secret""); assertEquals(""display"", config.getDisplay()); }
",3,2,2,2,"@Test(timeout = 4000)
public void test03() throws Throwable {
    OAuthConfig oAuthConfig0 = new OAuthConfig(""J{Q=M"", ""J{Q=M"", (String) null, """", ""y*c+;*o7Lzs9S],ng!"");
    String string0 = oAuthConfig0.getDisplay();
    assertEquals(""y*c+;*o7Lzs9S],ng!"", string0);
    assertEquals(""J{Q=M"", oAuthConfig0.getApiSecret());
    assertNotNull(string0);
    assertTrue(oAuthConfig0.hasScope());
    assertEquals("""", oAuthConfig0.getScope());
    assertEquals(""oob"", oAuthConfig0.getCallback());
    assertEquals(""J{Q=M"", oAuthConfig0.getApiKey());
}",2,2,1,1,"@Test(timeout = 4000)
public void testGetDisplay() throws Throwable {
    // Given
    String expectedDisplay = ""y*c+;*o7Lzs9S],ng!"";
    OAuthConfig oAuthConfig = new OAuthConfig(""J{Q=M"", ""J{Q=M"", null, """", expectedDisplay);
    
    // When
    String actualDisplay = oAuthConfig.getDisplay();
    
    // Then
    assertEquals(expectedDisplay, actualDisplay);
}

}
",3,3,3,3
"public String getApiSecret() {
    return apiSecret;
}","@Test public void testGetApiSecret() { OAuthConfig config = new OAuthConfig(""key"", ""secret""); assertEquals(""secret"", config.getApiSecret()); }
",3,3,3,3,"@Test(timeout = 4000)
public void test03() throws Throwable {
    OAuthConfig oAuthConfig0 = new OAuthConfig(""J{Q=M"", ""J{Q=M"", (String) null, """", ""y*c+;*o7Lzs9S],ng!"");
    String string0 = oAuthConfig0.getDisplay();
    assertEquals(""y*c+;*o7Lzs9S],ng!"", string0);
    assertEquals(""J{Q=M"", oAuthConfig0.getApiSecret());
    assertNotNull(string0);
    assertTrue(oAuthConfig0.hasScope());
    assertEquals("""", oAuthConfig0.getScope());
    assertEquals(""oob"", oAuthConfig0.getCallback());
    assertEquals(""J{Q=M"", oAuthConfig0.getApiKey());
}",2,2,1,1,"    @Test
    public void testGetApiSecret() {
        // Create an instance of OAuthConfig
        OAuthConfig oauthConfig = new OAuthConfig(""key"", ""secret"");

        // Call the getApiSecret() method
        String apiSecret = oauthConfig.getApiSecret();

        // Assert that the returned value is not null
        assertNotNull(apiSecret);

        // Assert that the returned value is equal to the secret provided during initialization
        assertEquals(""secret"", apiSecret);
    }",3,3,3,3
"public String getApiKey() {
    return apiKey;
}","@Test public void testGetApiKey() throws Exception { OAuthConfig oauthConfig = new OAuthConfig(""key"", ""secret""); Assert.assertEquals(""key"", oauthConfig.getApiKey()); }
",3,3,3,3,"@Test(timeout = 4000)
public void test03() throws Throwable {
    OAuthConfig oAuthConfig0 = new OAuthConfig(""J{Q=M"", ""J{Q=M"", (String) null, """", ""y*c+;*o7Lzs9S],ng!"");
    String string0 = oAuthConfig0.getDisplay();
    assertEquals(""y*c+;*o7Lzs9S],ng!"", string0);
    assertEquals(""J{Q=M"", oAuthConfig0.getApiSecret());
    assertNotNull(string0);
    assertTrue(oAuthConfig0.hasScope());
    assertEquals("""", oAuthConfig0.getScope());
    assertEquals(""oob"", oAuthConfig0.getCallback());
    assertEquals(""J{Q=M"", oAuthConfig0.getApiKey());
}",2,2,1,1,"    @Test
    public void testGetApiKey() {
        // Create an instance of OAuthConfig
        OAuthConfig oauthConfig = new OAuthConfig(""key"", ""secret"");

        // Call the getApiKey() method
        String apiKey = oauthConfig.getApiKey();

        // Assert that the returned apiKey is not null
        assertNotNull(apiKey);

        // Assert that the returned apiKey is equal to the expected value
        assertEquals(""key"", apiKey);
    }",3,3,3,3
"public void setText(String text) {
    this.text = text;
}","@Test public void testSetText() throws Exception { CommentData commentData = new CommentData(); commentData.setText(""test""); assertEquals(""test"", commentData.getText()); }
",3,3,3,3,"@Test(timeout = 4000)
public void test00() throws Throwable {
    CommentData commentData0 = new CommentData();
    commentData0.setText(""org.jinstagram.entity.common.FromTagData"");
    String string0 = commentData0.getText();
    assertEquals(""org.jinstagram.entity.common.FromTagData"", string0);
}",3,3,3,3,"    @Test
    public void testSetText() {
        // Create an instance of CommentData
        CommentData commentData = new CommentData();

        // Set the text using the setText method
        String text = ""This is a test comment"";
        commentData.setText(text);

        // Verify that the text has been set correctly
        assertEquals(text, commentData.getText());
    }",3,3,2,2
"public String getText() {
    return text;
}","@Test public void testGetText() { assertEquals(text, commentData.getText()); }
",3,2,2,2,"@Test(timeout = 4000)
public void test00() throws Throwable {
    CommentData commentData0 = new CommentData();
    commentData0.setText(""org.jinstagram.entity.common.FromTagData"");
    String string0 = commentData0.getText();
    assertEquals(""org.jinstagram.entity.common.FromTagData"", string0);
}",3,3,3,3,"    @Test
    public void testGetText() {
        // Create a CommentData object
        CommentData commentData = new CommentData();
        
        // Set the text value
        commentData.setText(""This is a test comment"");
        
        // Retrieve the text value using getText() method
        String text = commentData.getText();
        
        // Verify that the retrieved text value is correct
        assertEquals(""This is a test comment"", text);
    }",3,3,3,3
"public void setId(String id) {
    this.id = id;
}","@Test public void testSetId() { CommentData commentData = new CommentData(); commentData.setId(""id""); Assert.assertEquals(""id"", commentData.getId()); }
",3,3,3,3,"@Test(timeout = 4000)
public void test02() throws Throwable {
    CommentData commentData0 = new CommentData();
    commentData0.setId(""bF~}(h/vw"");
    String string0 = commentData0.getId();
    assertEquals(""bF~}(h/vw"", string0);
}",3,3,3,3,"    @Test
    public void testSetId() {
        // Create a new CommentData object
        CommentData commentData = new CommentData();

        // Set the id using the setId method
        String id = ""123"";
        commentData.setId(id);

        // Verify that the id has been set correctly
        assertEquals(id, commentData.getId());
    }",3,3,3,3
"public String getId() {
    return id;
}","@Test public void testGetId() { assertEquals(""id"", commentData.getId()); }
",3,2,2,2,"@Test(timeout = 4000)
public void test02() throws Throwable {
    CommentData commentData0 = new CommentData();
    commentData0.setId(""bF~}(h/vw"");
    String string0 = commentData0.getId();
    assertEquals(""bF~}(h/vw"", string0);
}",3,3,3,3,"    @Test
    public void testGetId() {
        // Create a CommentData object
        CommentData commentData = new CommentData();
        
        // Set the id attribute
        commentData.setId(""12345"");
        
        // Call the getId() method and assert the returned value
        assertEquals(""12345"", commentData.getId());
    }",3,3,3,3
"public void setCreatedTime(String createdTime) {
    this.createdTime = createdTime;
}","@Test public void testSetCreatedTime() throws Exception { CommentData commentData = new CommentData(); commentData.setCreatedTime(""1""); Assert.assertEquals(""1"", commentData.getCreatedTime()); Assert.assertEquals(""1"", commentData.getCreatedTime()); }
",3,2,2,2,"@Test(timeout = 4000)
public void test04() throws Throwable {
    CommentData commentData0 = new CommentData();
    commentData0.setCreatedTime(""3v([Q$"");
    String string0 = commentData0.getCreatedTime();
    assertEquals(""3v([Q$"", string0);
}",3,2,2,2,"    @Test
    public void testSetCreatedTime() {
        // Create an instance of CommentData
        CommentData commentData = new CommentData();

        // Set the created time using the setCreatedTime method
        String createdTime = ""2021-10-01 10:00:00"";
        commentData.setCreatedTime(createdTime);

        // Verify that the created time is set correctly
        assertEquals(createdTime, commentData.getCreatedTime());
    }",3,3,3,3
"public String getCreatedTime() {
    return createdTime;
}","@Test public void testGetCreatedTime() { assertEquals(createdTime, commentData.getCreatedTime()); }
",3,3,3,3,"@Test(timeout = 4000)
public void test04() throws Throwable {
    CommentData commentData0 = new CommentData();
    commentData0.setCreatedTime(""3v([Q$"");
    String string0 = commentData0.getCreatedTime();
    assertEquals(""3v([Q$"", string0);
}",3,3,3,3,"    @Test
    public void testGetCreatedTime() {
        // Create a CommentData object
        CommentData commentData = new CommentData();
        
        // Set the createdTime value
        String expectedCreatedTime = ""2021-10-01 10:00:00"";
        commentData.setCreatedTime(expectedCreatedTime);
        
        // Retrieve the createdTime value using the getCreatedTime() method
        String actualCreatedTime = commentData.getCreatedTime();
        
        // Assert that the retrieved createdTime value matches the expected value
        assertEquals(expectedCreatedTime, actualCreatedTime);
    }",3,3,3,3
"public FromTagData getCommentFrom() {
    return commentFrom;
}","@Test public void testGetCommentFrom() { FromTagData commentFrom = new FromTagData(); commentFrom.setCommentFrom(commentFrom); assertEquals(commentFrom, commentData.getCommentFrom()); }
",3,2,2,2,"@Test(timeout = 4000)
public void test08() throws Throwable {
    CommentData commentData0 = new CommentData();
    FromTagData fromTagData0 = commentData0.getCommentFrom();
    assertNull(fromTagData0);
}",3,3,3,3,"    @Test
    public void testGetCommentFrom() {
        // Create a CommentData object
        CommentData commentData = new CommentData();

        // Create a FromTagData object
        FromTagData expectedCommentFrom = new FromTagData();

        // Set the expected commentFrom object in CommentData
        commentData.setCommentFrom(expectedCommentFrom);

        // Call the getCommentFrom() method
        FromTagData actualCommentFrom = commentData.getCommentFrom();

        // Assert that the returned commentFrom object is the same as the expected commentFrom object
        assertEquals(expectedCommentFrom, actualCommentFrom);
    }",3,3,3,3
"public void setCommentFrom(FromTagData commentFrom) {
    this.commentFrom = commentFrom;
}","@Test public void testSetCommentFrom() { FromTagData commentFrom = new FromTagData(); commentData.setCommentFrom(commentFrom); assertEquals(commentFrom, commentData.getCommentFrom()); }
",3,2,2,2,"@Test(timeout = 4000)
public void test10() throws Throwable {
    CommentData commentData0 = new CommentData();
    FromTagData fromTagData0 = new FromTagData();
    commentData0.setCommentFrom(fromTagData0);
    FromTagData fromTagData1 = commentData0.getCommentFrom();
    assertNull(fromTagData1.getFullName());
}",3,3,3,3,"@Test
public void testSetCommentFrom() {
    CommentData commentData = new CommentData();
    FromTagData fromTagData = new FromTagData();

    // Fix the buggy line
    fromTagData.setFullName(""propertyValue"");

    commentData.setCommentFrom(fromTagData);
    assertEquals(fromTagData, commentData.getCommentFrom());
}",3,3,2,2
"public void setMeta(Meta meta) {
    this.meta = meta;
}","@Test public void setMeta() { MediaCommentResponse response = new MediaCommentResponse(); response.setMeta(new Meta()); }
",3,2,2,2,"@Test(timeout = 4000)
public void test0() throws Throwable {
    MediaCommentResponse mediaCommentResponse0 = new MediaCommentResponse();
    Meta meta0 = new Meta();
    mediaCommentResponse0.setMeta(meta0);
    Meta meta1 = mediaCommentResponse0.getMeta();
    assertNull(meta1.getErrorType());
}",2,2,2,2,"    @Test
    public void testSetMeta() {
        // Create a new instance of MediaCommentResponse
        MediaCommentResponse response = new MediaCommentResponse();

        // Create a new instance of Meta
        Meta meta = new Meta();

        // Set the Meta object using the setMeta method
        response.setMeta(meta);

        // Verify that the Meta object is correctly assigned to the instance variable 'meta'
        assertEquals(meta, response.getMeta());
    }",3,3,3,3
"public Meta getMeta() {
    return meta;
}","@Test public void testGetMeta() { MediaCommentResponse response = new MediaCommentResponse(); assertEquals(meta, response.getMeta()); }
",3,3,3,3,"@Test(timeout = 4000)
public void test0() throws Throwable {
    MediaCommentResponse mediaCommentResponse0 = new MediaCommentResponse();
    Meta meta0 = new Meta();
    mediaCommentResponse0.setMeta(meta0);
    Meta meta1 = mediaCommentResponse0.getMeta();
    assertNull(meta1.getErrorType());
}",2,2,2,2,"    @Test
    public void testGetMeta() {
        // Create a new instance of MediaCommentResponse
        MediaCommentResponse response = new MediaCommentResponse();

        // Create a new instance of Meta
        Meta expectedMeta = new Meta();
        expectedMeta.setCode(200);
        expectedMeta.setErrorType(""None"");

        // Set the expected Meta object to the response
        response.setMeta(expectedMeta);

        // Call the getMeta() method
        Meta actualMeta = response.getMeta();

        // Assert that the actual Meta object is equal to the expected Meta object
        assertEquals(expectedMeta, actualMeta);
    }",3,3,3,3
"public void setCommentData(CommentData commentData) {
    this.commentData = commentData;
}","@Test public void testSetCommentData() { MediaCommentResponse response = new MediaCommentResponse(); response.setCommentData(new CommentData()); }
",3,2,2,2,"@Test(timeout = 4000)
public void test3() throws Throwable {
    MediaCommentResponse mediaCommentResponse0 = new MediaCommentResponse();
    CommentData commentData0 = new CommentData();
    mediaCommentResponse0.setCommentData(commentData0);
    CommentData commentData1 = mediaCommentResponse0.getCommentData();
    assertNull(commentData1.getId());
}",2,1,1,1,"    @Test
    public void testSetCommentData() {
        // Create a new instance of MediaCommentResponse
        MediaCommentResponse mediaCommentResponse = new MediaCommentResponse();

        // Create a new instance of CommentData
        CommentData commentData = new CommentData();

        // Set the CommentData object using the setCommentData method
        mediaCommentResponse.setCommentData(commentData);

        // Verify that the commentData instance variable is set correctly
        assertEquals(commentData, mediaCommentResponse.getCommentData());
    }",3,3,3,3
"public CommentData getCommentData() {
    return commentData;
}","@Test public void testGetCommentData() { MediaCommentResponse response = new MediaCommentResponse(); assertEquals(commentData, response.getCommentData()); }
",3,2,2,2,"@Test(timeout = 4000)
public void test3() throws Throwable {
    MediaCommentResponse mediaCommentResponse0 = new MediaCommentResponse();
    CommentData commentData0 = new CommentData();
    mediaCommentResponse0.setCommentData(commentData0);
    CommentData commentData1 = mediaCommentResponse0.getCommentData();
    assertNull(commentData1.getId());
}",2,1,1,1,"    @Test
    public void testGetCommentData() {
        // Create a new instance of MediaCommentResponse
        MediaCommentResponse response = new MediaCommentResponse();

        // Create a new CommentData object
        CommentData expectedCommentData = new CommentData();

        // Set the CommentData object in the MediaCommentResponse instance
        response.setCommentData(expectedCommentData);

        // Call the getCommentData() method
        CommentData actualCommentData = response.getCommentData();

        // Assert that the returned CommentData object is the same as the expected CommentData object
        assertEquals(expectedCommentData, actualCommentData);
    }",3,3,3,3
"public void setMeta(Meta meta) {
    this.meta = meta;
}",,1,1,1,1,"@Test(timeout = 4000)
public void test0() throws Throwable {
    MediaCommentsFeed mediaCommentsFeed0 = new MediaCommentsFeed();
    Meta meta0 = new Meta();
    meta0.setCode(3635);
    mediaCommentsFeed0.setMeta(meta0);
    Meta meta1 = mediaCommentsFeed0.getMeta();
    assertNull(meta1.getErrorType());
}",2,2,2,2,"    @Test
    public void testSetMeta() {
        // Create a new instance of MediaCommentsFeed
        MediaCommentsFeed mediaCommentsFeed = new MediaCommentsFeed();

        // Create a new instance of Meta
        Meta meta = new Meta();

        // Set the Meta object using the setMeta method
        mediaCommentsFeed.setMeta(meta);

        // Verify that the Meta object is correctly assigned to the instance variable 'meta'
        assertEquals(meta, mediaCommentsFeed.getMeta());
    }",3,3,3,3
"public Meta getMeta() {
    return meta;
}",,1,1,1,1,"@Test(timeout = 4000)
public void test0() throws Throwable {
    MediaCommentsFeed mediaCommentsFeed0 = new MediaCommentsFeed();
    Meta meta0 = new Meta();
    meta0.setCode(3635);
    mediaCommentsFeed0.setMeta(meta0);
    Meta meta1 = mediaCommentsFeed0.getMeta();
    assertNull(meta1.getErrorType());
}",2,2,2,2,"    @Test
    public void testGetMeta() {
        // Create a MediaCommentsFeed object
        MediaCommentsFeed mediaCommentsFeed = new MediaCommentsFeed();

        // Create a Meta object
        Meta expectedMeta = new Meta();
        expectedMeta.setCode(200);
        expectedMeta.setErrorType(""None"");

        // Set the Meta object in the MediaCommentsFeed object
        mediaCommentsFeed.setMeta(expectedMeta);

        // Call the getMeta() method
        Meta actualMeta = mediaCommentsFeed.getMeta();

        // Assert that the returned Meta object is equal to the expected Meta object
        assertEquals(expectedMeta, actualMeta);
    }",3,3,3,3
"public void setCommentDataList(List<CommentData> commentDataList) {
    this.commentDataList = commentDataList;
}","@Test public void testSetCommentDataList() { MediaCommentsFeed feed = new MediaCommentsFeed(); feed.setCommentDataList(new ArrayList<CommentData>()); }
",2,2,2,2,"@Test(timeout = 4000)
public void test2() throws Throwable {
    MediaCommentsFeed mediaCommentsFeed0 = new MediaCommentsFeed();
    LinkedList<CommentData> linkedList0 = new LinkedList<CommentData>();
    mediaCommentsFeed0.setCommentDataList(linkedList0);
    List<CommentData> list0 = mediaCommentsFeed0.getCommentDataList();
    assertEquals(0, list0.size());
}",3,3,2,2,"@Test
public void testSetCommentDataList() {
    MediaCommentsFeed mediaCommentsFeed = new MediaCommentsFeed();

    List<CommentData> commentDataList = new ArrayList<CommentData>();

    CommentData commentData1 = new CommentData();
    CommentData commentData2 = new CommentData();
    commentDataList.add(commentData1);
    commentDataList.add(commentData2);
    mediaCommentsFeed.setCommentDataList(commentDataList);
    assertEquals(commentDataList, mediaCommentsFeed.getCommentDataList());
}",3,3,3,3
"public List<CommentData> getCommentDataList() {
    return commentDataList;
}","@Test public void testGetCommentDataList() throws Exception { MediaCommentsFeed feed = new MediaCommentsFeed(); feed.setCommentDataList(new ArrayList<CommentData>()); assertEquals(1, feed.getCommentDataList().size()); }
",3,3,2,2,"@Test(timeout = 4000)
public void test2() throws Throwable {
    MediaCommentsFeed mediaCommentsFeed0 = new MediaCommentsFeed();
    LinkedList<CommentData> linkedList0 = new LinkedList<CommentData>();
    mediaCommentsFeed0.setCommentDataList(linkedList0);
    List<CommentData> list0 = mediaCommentsFeed0.getCommentDataList();
    assertEquals(0, list0.size());
}",3,3,3,3,"@Test
public void testGetCommentDataList() {
    MediaCommentsFeed mediaCommentsFeed = new MediaCommentsFeed();

    List<CommentData> commentDataList = new LinkedList<CommentData>();

    CommentData commentData1 = new CommentData();
    CommentData commentData2 = new CommentData();
    commentDataList.add(commentData1);
    commentDataList.add(commentData2);
    mediaCommentsFeed.setCommentDataList(commentDataList);
    List<CommentData> retrievedCommentDataList = mediaCommentsFeed.getCommentDataList();
    assertEquals(commentDataList, retrievedCommentDataList);
}",3,3,3,3
"@Override
public String toString() {
    return String.format(""MediaCommentsFeed [commentDataList=%s, meta=%s]"", commentDataList, meta);
}",,1,1,1,1,"@Test(timeout = 4000)
public void test3() throws Throwable {
    MediaCommentsFeed mediaCommentsFeed0 = new MediaCommentsFeed();
    String string0 = mediaCommentsFeed0.toString();
    assertEquals(""MediaCommentsFeed [commentDataList=null, meta=null]"", string0);
}",3,3,3,3,"@Test
public void testToString() {
    MediaCommentsFeed mediaCommentsFeed = new MediaCommentsFeed();
    mediaCommentsFeed.setCommentDataList(null);
    mediaCommentsFeed.setMeta(null);
    
    String expected = ""MediaCommentsFeed [commentDataList=null, meta=null]"";
    String actual = mediaCommentsFeed.toString();
    
    assertEquals(expected, actual);
}",3,3,3,3
"public void setWidth(String width) {
    this.width = width;
}","@Test public void setWidth() { OembedInformation oembedInformation = new OembedInformation(); oembedInformation.setWidth(""100""); }
",3,2,2,2,"@Test(timeout = 4000)
public void test00() throws Throwable {
    OembedInformation oembedInformation0 = new OembedInformation();
    oembedInformation0.setWidth(""height="");
    String string0 = oembedInformation0.getWidth();
    assertEquals(""height="", string0);
}",2,2,3,3,"    @Test
    public void testSetWidth() {
        // Create an instance of OembedInformation
        OembedInformation oembed = new OembedInformation();

        // Set the width using the setWidth method
        String width = ""100"";
        oembed.setWidth(width);

        // Verify that the width property is set correctly
        assertEquals(width, oembed.getWidth());
    }",3,3,3,3
"public String getWidth() {
    return width;
}","@Test public void testGetWidth() { System.out.println(""getWidth""); OembedInformation instance = new OembedInformation(); String result = instance.getWidth(); Assert.assertEquals(result, ""result""); }
",3,3,2,2,"@Test(timeout = 4000)
public void test00() throws Throwable {
    OembedInformation oembedInformation0 = new OembedInformation();
    oembedInformation0.setWidth(""height="");
    String string0 = oembedInformation0.getWidth();
    assertEquals(""height="", string0);
}",2,2,3,3,"    @Test
    public void testGetWidth() {
        // Create an instance of OembedInformation
        OembedInformation oembed = new OembedInformation();

        // Set the width property
        oembed.setWidth(""500"");

        // Call the getWidth() method
        String width = oembed.getWidth();

        // Assert that the returned width is equal to the set value
        assertEquals(""500"", width);
    }",3,3,3,3
"public void setVersion(String version) {
    this.version = version;
}","@Test public void setVersion() { OembedInformation oembedInformation = new OembedInformation(); oembedInformation.setVersion(""1.0.0""); }
",3,3,2,2,"@Test(timeout = 4000)
public void test02() throws Throwable {
    OembedInformation oembedInformation0 = new OembedInformation();
    oembedInformation0.setVersion(""org.jinstagram.entity.oembed.OembedInformation"");
    String string0 = oembedInformation0.getVersion();
    assertEquals(""org.jinstagram.entity.oembed.OembedInformation"", string0);
}",3,3,3,3,"    @Test
    public void testSetVersion() {
        // Create an instance of OembedInformation
        OembedInformation oembed = new OembedInformation();

        // Set the version attribute using the setVersion method
        String version = ""1.0"";
        oembed.setVersion(version);

        // Verify that the version attribute has been updated correctly
        assertEquals(version, oembed.getVersion());
    }",3,3,3,3
"public String getVersion() {
    return version;
}",,1,1,1,1,"@Test(timeout = 4000)
public void test02() throws Throwable {
    OembedInformation oembedInformation0 = new OembedInformation();
    oembedInformation0.setVersion(""org.jinstagram.entity.oembed.OembedInformation"");
    String string0 = oembedInformation0.getVersion();
    assertEquals(""org.jinstagram.entity.oembed.OembedInformation"", string0);
}",3,3,3,3,"    @Test
    public void testGetVersion() {
        // Create an instance of OembedInformation
        OembedInformation oembed = new OembedInformation();

        // Set the version using the setter method
        oembed.setVersion(""1.0"");

        // Call the getVersion() method and assert the returned value
        assertEquals(""1.0"", oembed.getVersion());
    }",3,3,3,3
"public void setUrl(String url) {
    this.url = url;
}","@Test public void testSetUrl() { OembedInformation oembedInformation = new OembedInformation(); oembedInformation.setUrl(""http: }
",2,2,1,1,"@Test(timeout = 4000)
public void test04() throws Throwable {
    OembedInformation oembedInformation0 = new OembedInformation();
    oembedInformation0.setUrl(""liY/"");
    String string0 = oembedInformation0.getUrl();
    assertEquals(""liY/"", string0);
}",2,3,3,3,"    @Test
    public void testSetUrl() {
        // Create an instance of OembedInformation
        OembedInformation oembed = new OembedInformation();

        // Set the URL using the setUrl() method
        String url = ""https://example.com"";
        oembed.setUrl(url);

        // Verify that the URL is set correctly
        assertEquals(url, oembed.getUrl());
    }",3,3,3,3
"public String getUrl() {
    return url;
}","@Test public void testGetUrl() { System.out.println(""getUrl""); OembedInformation instance = new OembedInformation(); String result = instance.getUrl(); assertNotNull(result); }
",3,2,2,2,"@Test(timeout = 4000)
public void test04() throws Throwable {
    OembedInformation oembedInformation0 = new OembedInformation();
    oembedInformation0.setUrl(""liY/"");
    String string0 = oembedInformation0.getUrl();
    assertEquals(""liY/"", string0);
}",2,3,3,3,"    @Test
    public void testGetUrl() {
        // Create an instance of OembedInformation
        OembedInformation oembed = new OembedInformation();
        
        // Set the URL
        oembed.setUrl(""https://example.com"");
        
        // Call the getUrl() method
        String url = oembed.getUrl();
        
        // Assert that the returned URL is equal to the set URL
        assertEquals(""https://example.com"", url);
    }",3,3,3,3
"public void setType(String type) {
    this.type = type;
}","@Test public void testSetType() { OembedInformation oembedInformation = new OembedInformation(); oembedInformation.setType(""type""); assertEquals(""type"", oembedInformation.getType()); }
",3,3,3,3,"@Test(timeout = 4000)
public void test06() throws Throwable {
    OembedInformation oembedInformation0 = new OembedInformation();
    oembedInformation0.setType(""BnvYwbU+yVL).l2zI*y"");
    String string0 = oembedInformation0.getType();
    assertEquals(""BnvYwbU+yVL).l2zI*y"", string0);
}",2,2,3,3,"    @Test
    public void testSetType() {
        // Create an instance of OembedInformation
        OembedInformation oembed = new OembedInformation();

        // Set the type attribute using the setType method
        String expectedType = ""video"";
        oembed.setType(expectedType);

        // Verify that the type attribute is set correctly
        String actualType = oembed.getType();
        assertEquals(expectedType, actualType);
    }",3,3,3,3
"public String getType() {
    return type;
}","@Test public void testGetType() { System.out.println(""getType""); OembedInformation instance = new OembedInformation(); String result = instance.getType(); assertNotNull(result); }
",3,3,2,2,"@Test(timeout = 4000)
public void test06() throws Throwable {
    OembedInformation oembedInformation0 = new OembedInformation();
    oembedInformation0.setType(""BnvYwbU+yVL).l2zI*y"");
    String string0 = oembedInformation0.getType();
    assertEquals(""BnvYwbU+yVL).l2zI*y"", string0);
}",2,2,3,3,"    @Test
    public void testGetType() {
        // Create an instance of OembedInformation
        OembedInformation oembed = new OembedInformation();

        // Set the type using the setter method
        oembed.setType(""video"");

        // Call the getType() method and assert the returned value
        assertEquals(""video"", oembed.getType());
    }",3,3,3,3
"public void setTitle(String title) {
    this.title = title;
}","@Test public void setTitle() { OembedInformation oembedInformation = new OembedInformation(); oembedInformation.setTitle(""title""); }
",3,3,2,2,"@Test(timeout = 4000)
public void test08() throws Throwable {
    OembedInformation oembedInformation0 = new OembedInformation();
    oembedInformation0.setTitle(""OembedInformation ["");
    String string0 = oembedInformation0.getTitle();
    assertEquals(""OembedInformation ["", string0);
}",3,3,3,3,"    @Test
    public void testSetTitle() {
        // Create an instance of OembedInformation
        OembedInformation oembed = new OembedInformation();

        // Set the title using the setTitle method
        String title = ""Test Title"";
        oembed.setTitle(title);

        // Verify that the title is set correctly
        assertEquals(title, oembed.getTitle());
    }",3,3,3,3
"public String getTitle() {
    return title;
}","@Test public void testGetTitle() { System.out.println(""getTitle""); OembedInformation instance = new OembedInformation(); String result = instance.getTitle(); assertNotNull(result); }
",3,3,2,2,"@Test(timeout = 4000)
public void test08() throws Throwable {
    OembedInformation oembedInformation0 = new OembedInformation();
    oembedInformation0.setTitle(""OembedInformation ["");
    String string0 = oembedInformation0.getTitle();
    assertEquals(""OembedInformation ["", string0);
}",3,3,3,3,"    @Test
    public void testGetTitle() {
        // Create an instance of OembedInformation
        OembedInformation oembed = new OembedInformation();
        
        // Set the title of the object
        oembed.setTitle(""Test Title"");
        
        // Call the getTitle() method and assert the returned value
        assertEquals(""Test Title"", oembed.getTitle());
    }",3,3,3,3
"public void setThumbnailWidth(final int thumbnailWidth) {
    this.thumbnailWidth = thumbnailWidth;
}","@Test public void testSetThumbnailWidth() { OembedInformation oembedInformation = new OembedInformation(); oembedInformation.setThumbnailWidth(100); assertEquals(100, oembedInformation.getThumbnailWidth()); }
",3,3,3,3,"@Test(timeout = 4000)
public void test10() throws Throwable {
    OembedInformation oembedInformation0 = new OembedInformation();
    oembedInformation0.setThumbnailWidth(1043);
    int int0 = oembedInformation0.getThumbnailWidth();
    assertEquals(1043, int0);
}",3,3,3,3,"    @Test
    public void testSetThumbnailWidth() {
        OembedInformation oembed = new OembedInformation();
        int thumbnailWidth = 100;
        oembed.setThumbnailWidth(thumbnailWidth);
        assertEquals(thumbnailWidth, oembed.getThumbnailWidth());
    }",3,3,3,3
"public int getThumbnailWidth() {
    return thumbnailWidth;
}","@Test public void testGetThumbnailWidth() throws Exception { OembedInformation oembedInformation = new OembedInformation(); assertEquals(0, oembedInformation.getThumbnailWidth()); }
",3,3,3,3,"@Test(timeout = 4000)
public void test10() throws Throwable {
    OembedInformation oembedInformation0 = new OembedInformation();
    oembedInformation0.setThumbnailWidth(1043);
    int int0 = oembedInformation0.getThumbnailWidth();
    assertEquals(1043, int0);
}",3,3,3,3,"    @Test
    public void testGetThumbnailWidth() {
        // Create an instance of OembedInformation
        OembedInformation oembed = new OembedInformation();

        // Set the thumbnail width
        int expectedWidth = 100;
        oembed.setThumbnailWidth(expectedWidth);

        // Get the thumbnail width using the getThumbnailWidth() method
        int actualWidth = oembed.getThumbnailWidth();

        // Assert that the retrieved thumbnail width matches the expected width
        assertEquals(expectedWidth, actualWidth);
    }",3,3,3,3
"public void setThumbnailUrl(final String thumbnailUrl) {
    this.thumbnailUrl = thumbnailUrl;
}","@Test public void testSetThumbnailUrl() { OembedInformation oembedInformation = new OembedInformation(); oembedInformation.setThumbnailUrl(""http: }
",3,3,2,2,"@Test(timeout = 4000)
public void test12() throws Throwable {
    OembedInformation oembedInformation0 = new OembedInformation();
    oembedInformation0.setThumbnailUrl("""");
    String string0 = oembedInformation0.getThumbnailUrl();
    assertEquals("""", string0);
}",3,3,3,3,"    @Test
    public void testSetThumbnailUrl() {
        // Create an instance of OembedInformation
        OembedInformation oembed = new OembedInformation();

        // Set the thumbnail URL using the setThumbnailUrl method
        String thumbnailUrl = ""https://example.com/thumbnail.jpg"";
        oembed.setThumbnailUrl(thumbnailUrl);

        // Verify that the thumbnail URL is set correctly
        assertEquals(thumbnailUrl, oembed.getThumbnailUrl());
    }",3,3,3,3
"public String getThumbnailUrl() {
    return thumbnailUrl;
}","@Test public void testGetThumbnailUrl() { OembedInformation oembedInformation = new OembedInformation(); assertEquals(""http: oembedInformation.getThumbnailUrl(); }
",3,3,2,2,"@Test(timeout = 4000)
public void test12() throws Throwable {
    OembedInformation oembedInformation0 = new OembedInformation();
    oembedInformation0.setThumbnailUrl("""");
    String string0 = oembedInformation0.getThumbnailUrl();
    assertEquals("""", string0);
}",3,3,3,3,"    @Test
    public void testGetThumbnailUrl() {
        // Create an instance of OembedInformation
        OembedInformation oembed = new OembedInformation();

        // Set the thumbnail URL
        String thumbnailUrl = ""https://example.com/thumbnail.jpg"";
        oembed.setThumbnailUrl(thumbnailUrl);

        // Get the thumbnail URL using the getThumbnailUrl() method
        String result = oembed.getThumbnailUrl();

        // Assert that the returned thumbnail URL is equal to the set thumbnail URL
        assertEquals(thumbnailUrl, result);
    }",3,3,3,3
"public void setThumbnailHeight(final int thumbnailHeight) {
    this.thumbnailHeight = thumbnailHeight;
}","@Test public void testSetThumbnailHeight() { OembedInformation oembedInformation = new OembedInformation(); oembedInformation.setThumbnailHeight(100); assertEquals(100, oembedInformation.getThumbnailHeight()); }
",3,3,3,3,"@Test(timeout = 4000)
public void test13() throws Throwable {
    OembedInformation oembedInformation0 = new OembedInformation();
    oembedInformation0.setThumbnailHeight(2195);
    int int0 = oembedInformation0.getThumbnailHeight();
    assertEquals(2195, int0);
}",3,3,3,3,"    @Test
    public void testSetThumbnailHeight() {
        OembedInformation oembed = new OembedInformation();
        int expectedHeight = 100;
        
        oembed.setThumbnailHeight(expectedHeight);
        int actualHeight = oembed.getThumbnailHeight();
        
        assertEquals(expectedHeight, actualHeight);
    }",3,3,3,3
"public int getThumbnailHeight() {
    return thumbnailHeight;
}","@Test public void testGetThumbnailHeight() throws Exception { OembedInformation oembedInformation = new OembedInformation(); assertEquals(0, oembedInformation.getThumbnailHeight()); }
",3,3,3,3,"@Test(timeout = 4000)
public void test13() throws Throwable {
    OembedInformation oembedInformation0 = new OembedInformation();
    oembedInformation0.setThumbnailHeight(2195);
    int int0 = oembedInformation0.getThumbnailHeight();
    assertEquals(2195, int0);
}",3,3,3,3,"    @Test
    public void testGetThumbnailHeight() {
        // Create an instance of OembedInformation
        OembedInformation oembed = new OembedInformation();

        // Set the thumbnail height
        int expectedHeight = 100;
        oembed.setThumbnailHeight(expectedHeight);

        // Get the thumbnail height using the getThumbnailHeight() method
        int actualHeight = oembed.getThumbnailHeight();

        // Assert that the retrieved thumbnail height matches the expected height
        assertEquals(expectedHeight, actualHeight);
    }",3,3,3,3
"public void setProviderUrl(String providerUrl) {
    this.providerUrl = providerUrl;
}","@Test public void testSetProviderUrl() { OembedInformation oembedInformation = new OembedInformation(); oembedInformation.setProviderUrl(""http: }
",3,2,2,2,"@Test(timeout = 4000)
public void test15() throws Throwable {
    OembedInformation oembedInformation0 = new OembedInformation();
    oembedInformation0.setProviderUrl(""njs"");
    String string0 = oembedInformation0.getProviderUrl();
    assertEquals(""njs"", string0);
}",3,3,3,3,"    @Test
    public void testSetProviderUrl() {
        // Create an instance of OembedInformation
        OembedInformation oembed = new OembedInformation();

        // Set the provider URL
        String providerUrl = ""https://example.com/provider"";
        oembed.setProviderUrl(providerUrl);

        // Verify that the provider URL is set correctly
        assertEquals(providerUrl, oembed.getProviderUrl());
    }",3,3,3,3
"public String getProviderUrl() {
    return providerUrl;
}","@Test public void testGetProviderUrl() { System.out.println(""getProviderUrl""); OembedInformation instance = new OembedInformation(); String result = instance.getProviderUrl(); assertNotNull(result); }
",3,3,3,3,"@Test(timeout = 4000)
public void test15() throws Throwable {
    OembedInformation oembedInformation0 = new OembedInformation();
    oembedInformation0.setProviderUrl(""njs"");
    String string0 = oembedInformation0.getProviderUrl();
    assertEquals(""njs"", string0);
}",3,3,3,3,"    @Test
    public void testGetProviderUrl() {
        // Create an instance of OembedInformation
        OembedInformation oembed = new OembedInformation();
        
        // Set the provider URL
        oembed.setProviderUrl(""https://www.example.com"");
        
        // Call the getProviderUrl() method
        String providerUrl = oembed.getProviderUrl();
        
        // Assert that the returned provider URL is equal to the set value
        assertEquals(""https://www.example.com"", providerUrl);
    }",3,3,3,3
"public void setProviderName(String providerName) {
    this.providerName = providerName;
}","@Test public void testSetProviderName() { OembedInformation oembedInformation = new OembedInformation(); oembedInformation.setProviderName(""test""); assertEquals(""test"", oembedInformation.getProviderName()); }
",3,3,3,3,"@Test(timeout = 4000)
public void test17() throws Throwable {
    OembedInformation oembedInformation0 = new OembedInformation();
    oembedInformation0.setProviderName(""provider_name="");
    String string0 = oembedInformation0.getProviderName();
    assertEquals(""provider_name="", string0);
}",3,3,3,3,"    @Test
    public void testSetProviderName() {
        // Create an instance of OembedInformation
        OembedInformation oembed = new OembedInformation();

        // Set the provider name
        String providerName = ""Example Provider"";
        oembed.setProviderName(providerName);

        // Verify that the provider name is set correctly
        assertEquals(providerName, oembed.getProviderName());
    }",3,3,3,3
"public String getProviderName() {
    return providerName;
}","@Test public void testGetProviderName() { assertEquals(providerName, oembedInformation.getProviderName()); }
",3,2,2,2,"@Test(timeout = 4000)
public void test17() throws Throwable {
    OembedInformation oembedInformation0 = new OembedInformation();
    oembedInformation0.setProviderName(""provider_name="");
    String string0 = oembedInformation0.getProviderName();
    assertEquals(""provider_name="", string0);
}",3,3,3,3,"    @Test
    public void testGetProviderName() {
        // Create an instance of OembedInformation
        OembedInformation oembed = new OembedInformation();

        // Set the provider name
        oembed.setProviderName(""Test Provider"");

        // Call the getProviderName() method
        String providerName = oembed.getProviderName();

        // Assert that the returned provider name is equal to the set provider name
        assertEquals(""Test Provider"", providerName);
    }",3,3,3,3
"public void setMediaId(String mediaId) {
    this.mediaId = mediaId;
}","@Test public void testSetMediaId() { OembedInformation oembedInformation = new OembedInformation(); oembedInformation.setMediaId(""testMediaId""); }
",3,2,2,2,"@Test(timeout = 4000)
public void test19() throws Throwable {
    OembedInformation oembedInformation0 = new OembedInformation();
    oembedInformation0.setMediaId(""type="");
    String string0 = oembedInformation0.getMediaId();
    assertEquals(""type="", string0);
}",3,3,3,3,"    @Test
    public void testSetMediaId() {
        // Create an instance of OembedInformation
        OembedInformation oembed = new OembedInformation();

        // Set the media ID using the setMediaId method
        String mediaId = ""12345"";
        oembed.setMediaId(mediaId);

        // Verify that the media ID is set correctly
        assertEquals(mediaId, oembed.getMediaId());
    }",3,3,3,3
"public String getMediaId() {
    return mediaId;
}","@Test public void testGetMediaId() { OembedInformation oembedInformation = new OembedInformation(); oembedInformation.setMediaId(""mediaId""); assertEquals(""mediaId"", oembedInformation.getMediaId()); }
",3,3,3,3,"@Test(timeout = 4000)
public void test19() throws Throwable {
    OembedInformation oembedInformation0 = new OembedInformation();
    oembedInformation0.setMediaId(""type="");
    String string0 = oembedInformation0.getMediaId();
    assertEquals(""type="", string0);
}",3,3,3,3,"    @Test
    public void testGetMediaId() {
        // Create an instance of OembedInformation
        OembedInformation oembed = new OembedInformation();
        
        // Set the media ID
        oembed.setMediaId(""12345"");
        
        // Call the getMediaId() method and assert the expected result
        assertEquals(""12345"", oembed.getMediaId());
    }",3,3,3,3
"public void setHtml(final String html) {
    this.html = html;
}","@Test public void testSetHtml() throws Exception { OembedInformation oembedInformation = new OembedInformation(); oembedInformation.setHtml(""""); }
",3,2,2,2,"@Test(timeout = 4000)
public void test21() throws Throwable {
    OembedInformation oembedInformation0 = new OembedInformation();
    oembedInformation0.setHtml(""}1p;sK$BD/"");
    String string0 = oembedInformation0.getHtml();
    assertEquals(""}1p;sK$BD/"", string0);
}",3,3,3,3,"    @Test
    public void testSetHtml() {
        // Create an instance of OembedInformation
        OembedInformation oembed = new OembedInformation();

        // Set the HTML content using the setHtml method
        String html = ""<html><body><h1>Hello, World!</h1></body></html>"";
        oembed.setHtml(html);

        // Verify that the HTML content is set correctly
        assertEquals(html, oembed.getHtml());
    }",3,3,3,3
"public String getHtml() {
    return html;
}","@Test public void testGetHtml() { System.out.println(""getHtml""); OembedInformation instance = new OembedInformation(); String result = instance.getHtml(); assertNotNull(result); }
",3,3,3,3,"@Test(timeout = 4000)
public void test21() throws Throwable {
    OembedInformation oembedInformation0 = new OembedInformation();
    oembedInformation0.setHtml(""}1p;sK$BD/"");
    String string0 = oembedInformation0.getHtml();
    assertEquals(""}1p;sK$BD/"", string0);
}",3,3,3,3,"    @Test
    public void testGetHtml() {
        // Create an instance of OembedInformation
        OembedInformation oembed = new OembedInformation();

        // Set the expected HTML content
        String expectedHtml = ""<html><body><h1>Hello, World!</h1></body></html>"";
        oembed.setHtml(expectedHtml);

        // Call the getHtml() method and assert the returned value
        String actualHtml = oembed.getHtml();
        assertEquals(expectedHtml, actualHtml);
    }",3,3,3,3
"public void setHeight(String height) {
    this.height = height;
}","@Test public void setHeight() { OembedInformation oembedInformation = new OembedInformation(); oembedInformation.setHeight(""100""); }
",3,2,2,2,"@Test(timeout = 4000)
public void test23() throws Throwable {
    OembedInformation oembedInformation0 = new OembedInformation();
    oembedInformation0.setHeight(""BBF"");
    String string0 = oembedInformation0.getHeight();
    assertEquals(""BBF"", string0);
}",3,3,3,3,"    @Test
    public void testSetHeight() {
        // Create an instance of OembedInformation
        OembedInformation oembed = new OembedInformation();

        // Set the height using the setHeight method
        String height = ""100"";
        oembed.setHeight(height);

        // Verify that the height attribute has been set correctly
        assertEquals(height, oembed.getHeight());
    }",3,3,3,3
"public String getHeight() {
    return height;
}","@Test public void testGetHeight() { System.out.println(""getHeight""); OembedInformation instance = new OembedInformation(); String result = instance.getHeight(); assertNotNull(result); }
",3,3,3,3,"@Test(timeout = 4000)
public void test23() throws Throwable {
    OembedInformation oembedInformation0 = new OembedInformation();
    oembedInformation0.setHeight(""BBF"");
    String string0 = oembedInformation0.getHeight();
    assertEquals(""BBF"", string0);
}",3,3,3,3,"    @Test
    public void testGetHeight() {
        // Create an instance of OembedInformation
        OembedInformation oembed = new OembedInformation();

        // Set the height attribute
        oembed.setHeight(""100"");

        // Call the getHeight() method
        String height = oembed.getHeight();

        // Assert that the returned height is equal to the set height
        assertEquals(""100"", height);
    }",3,3,3,3
"public void setAuthorUrl(String authorUrl) {
    this.authorUrl = authorUrl;
}","@Test public void testSetAuthorUrl() { OembedInformation oembedInformation = new OembedInformation(); oembedInformation.setAuthorUrl(""http: }
",3,2,2,2,"@Test(timeout = 4000)
public void test25() throws Throwable {
    OembedInformation oembedInformation0 = new OembedInformation();
    oembedInformation0.setAuthorUrl("", "");
    String string0 = oembedInformation0.getAuthorUrl();
    assertEquals("", "", string0);
}",3,3,3,3,"    @Test
    public void testSetAuthorUrl() {
        // Create an instance of OembedInformation
        OembedInformation oembed = new OembedInformation();

        // Set the author URL using the setAuthorUrl method
        String authorUrl = ""https://example.com/author"";
        oembed.setAuthorUrl(authorUrl);

        // Verify that the author URL is set correctly
        assertEquals(authorUrl, oembed.getAuthorUrl());
    }",3,3,3,3
"public String getAuthorUrl() {
    return authorUrl;
}","@Test public void testGetAuthorUrl() { System.out.println(""getAuthorUrl""); OembedInformation instance = new OembedInformation(); String result = instance.getAuthorUrl(); assertNotNull(result); }
",3,3,3,3,"@Test(timeout = 4000)
public void test25() throws Throwable {
    OembedInformation oembedInformation0 = new OembedInformation();
    oembedInformation0.setAuthorUrl("", "");
    String string0 = oembedInformation0.getAuthorUrl();
    assertEquals("", "", string0);
}",3,3,3,3,"    @Test
    public void testGetAuthorUrl() {
        // Create an instance of OembedInformation
        OembedInformation oembed = new OembedInformation();

        // Set the author URL
        String authorUrl = ""https://example.com/author"";
        oembed.setAuthorUrl(authorUrl);

        // Get the author URL using the getAuthorUrl() method
        String retrievedAuthorUrl = oembed.getAuthorUrl();

        // Assert that the retrieved author URL is equal to the original author URL
        assertEquals(authorUrl, retrievedAuthorUrl);
    }",3,3,3,3
"public void setAuthorName(String authorName) {
    this.authorName = authorName;
}","@Test public void testSetAuthorName() { OembedInformation oembedInformation = new OembedInformation(); oembedInformation.setAuthorName(""test""); }
",3,2,2,2,"@Test(timeout = 4000)
public void test26() throws Throwable {
    OembedInformation oembedInformation0 = new OembedInformation();
    oembedInformation0.setAuthorName(""58z.'As[?\""Rto4J4p"");
    String string0 = oembedInformation0.getAuthorName();
    assertEquals(""58z.'As[?\""Rto4J4p"", string0);
}",3,3,3,3,"    @Test
    public void testSetAuthorName() {
        // Create an instance of OembedInformation
        OembedInformation oembed = new OembedInformation();

        // Set the author name
        String authorName = ""John Doe"";
        oembed.setAuthorName(authorName);

        // Verify that the author name is set correctly
        assertEquals(authorName, oembed.getAuthorName());
    }",3,3,3,3
"public String getAuthorName() {
    return authorName;
}","@Test public void testGetAuthorName() { System.out.println(""getAuthorName""); OembedInformation instance = new OembedInformation(); String result = instance.getAuthorName(); assertNotNull(result); }
",3,3,3,3,"@Test(timeout = 4000)
public void test26() throws Throwable {
    OembedInformation oembedInformation0 = new OembedInformation();
    oembedInformation0.setAuthorName(""58z.'As[?\""Rto4J4p"");
    String string0 = oembedInformation0.getAuthorName();
    assertEquals(""58z.'As[?\""Rto4J4p"", string0);
}",3,3,3,3,"    @Test
    public void testGetAuthorName() {
        // Create an instance of OembedInformation
        OembedInformation oembed = new OembedInformation();
        
        // Set the author name
        oembed.setAuthorName(""John Doe"");
        
        // Call the getAuthorName() method
        String authorName = oembed.getAuthorName();
        
        // Assert that the returned author name is correct
        assertEquals(""John Doe"", authorName);
    }",3,3,3,3
"@Override
public String toString() {
    return ""OembedInformation ["" + (providerUrl != null ? ""provider_url="" + providerUrl + "", "" : """") + (title != null ? ""title="" + title + "", "" : """") + (url != null ? ""url="" + url + "", "" : """") + (authorName != null ? ""author_name="" + authorName + "", "" : """") + (height != null ? ""height="" + height + "", "" : """") + (width != null ? ""width="" + width + "", "" : """") + (version != null ? ""version="" + version + "", "" : """") + (authorUrl != null ? ""author_url="" + authorUrl + "", "" : """") + (providerName != null ? ""provider_name="" + providerName + "", "" : """") + (type != null ? ""type="" + type + "", "" : """") + (mediaId != null ? ""mediaId="" + mediaId : """") + ""]"";
}",,1,1,1,1,"@Test(timeout = 4000)
public void test27() throws Throwable {
    OembedInformation oembedInformation0 = new OembedInformation();
    oembedInformation0.setType("""");
    String string0 = oembedInformation0.toString();
    assertEquals(""OembedInformation [type=, ]"", string0);
}",3,2,1,1,"    @Test
    public void testToString() {
        OembedInformation oembed = new OembedInformation();
        oembed.setProviderUrl(""https://example.com"");
        oembed.setTitle(""Sample Title"");
        oembed.setUrl(""https://example.com/sample"");
        oembed.setAuthorName(""John Doe"");
        oembed.setHeight(""300"");
        oembed.setWidth(""400"");
        oembed.setVersion(""1.0"");
        oembed.setAuthorUrl(""https://example.com/author"");
        oembed.setProviderName(""Example Provider"");
        oembed.setType(""video"");
        oembed.setMediaId(""12345"");

        String expected = ""OembedInformation [provider_url=https://example.com, title=Sample Title, url=https://example.com/sample, author_name=John Doe, height=300, width=400, version=1.0, author_url=https://example.com/author, provider_name=Example Provider, type=video, mediaId=12345]"";
        String actual = oembed.toString();

        assertEquals(expected, actual);
    }",3,2,3,2
"public void setUserList(List<User> userList) {
    this.userList = userList;
}","@Test public void testSetUserList() throws Exception { List<User> userList = new ArrayList<User>(); userList.add(new User()); userList.add(new User()); userList.add(new User()); userList.add(new User()); userList.add(new User()); userList.add(new User()); userList.add(new User()); userList.add(new User()); userList.add(new User()); List<User> userList = new ArrayList<User>(); userList.add(new User()); userList.add(new User()); userList.add(new User()); userList.add(new User()); userList.add(new User()); userList.add(new User()); userList.add(new User()); userList.add(new User()); userList.add(new User()); userList.add(new User()); userList.add(new User()); userList.add(new User()); userList.add(new User()); userList.add(new User()); userList.add(new User()); userList.add(new User()); userList.add(new User()); userList.add(new User()); userList.add(new User()); userList.add(new User()); userList.add(new User()); userList.add(new User()); userList.add(new User()); userList.add(new User()); userList.add(new User()); userList.add(new User()); userList.add(new User()); userList.add(new User()); userList.add(new User()); userList.add(new User()); userList.add(new User()); userList.add(new User()); userList.add(new User()); userList.add(new User()); userList.add(new User()); userList.add(new User()); userList.add(new User()); userList.add(new User()); userList.add(new User()); userList.add(new User()); userList.add(new User()); userList.add(new User()); userList.add(new User()); userList.add(new User()); userList.add(new User()); userList.add(new User()); }
",1,1,1,1,"@Test(timeout = 4000)
public void test0() throws Throwable {
    LikesFeed likesFeed0 = new LikesFeed();
    LinkedList<User> linkedList0 = new LinkedList<User>();
    User user0 = new User();
    linkedList0.add(user0);
    likesFeed0.setUserList(linkedList0);
    List<User> list0 = likesFeed0.getUserList();
    assertEquals(1, list0.size());
}",3,3,3,3,"@Test
public void testSetUserList() {
    LikesFeed likesFeed = new LikesFeed();

    List<User> userList = new ArrayList<User>();

    User user1 = new User();
    User user2 = new User();
    userList.add(user1);
    userList.add(user2);
    likesFeed.setUserList(userList);
    assertEquals(userList, likesFeed.getUserList());
}",3,3,3,3
"public List<User> getUserList() {
    return userList;
}","@Test public void testGetUserList() throws Exception { List<User> userList = new ArrayList<User>(); userList.add(new User()); userList.add(new User()); userList.add(new User()); userList.add(new User()); userList.add(new User()); userList.add(new User()); userList.add(new User()); userList.add(new User()); userList.add(new User()); userList.add(new User()); userList.add(new User()); userList.add(new User()); userList.add(new User()); userList.add(new User()); userList.add(new User()); userList.add(new User()); userList.add(new User()); userList.add(new User()); userList.add(new User()); userList.add(new User()); userList.add(new User()); userList.add(new User()); userList.add(new User()); userList.add(new User()); userList.add(new User()); userList.add(new User()); userList.add(new User()); userList.add(new User()); userList.add(new User()); userList.add(new User()); userList.add(new User()); userList.add(new User()); userList.add(new User()); userList.add(new User()); userList.add(new User()); userList.add(new User()); userList.add(new User()); userList.add(new User()); }
",1,1,1,1,"@Test(timeout = 4000)
public void test0() throws Throwable {
    LikesFeed likesFeed0 = new LikesFeed();
    LinkedList<User> linkedList0 = new LinkedList<User>();
    User user0 = new User();
    linkedList0.add(user0);
    likesFeed0.setUserList(linkedList0);
    List<User> list0 = likesFeed0.getUserList();
    assertEquals(1, list0.size());
}",3,3,3,3,"@Test
public void testGetUserList() {
    LikesFeed likesFeed = new LikesFeed();

    List<User> userList = new LinkedList<User>();

    userList.add(new User());
    userList.add(new User());
    userList.add(new User());
    likesFeed.setUserList(userList);
    List<User> result = likesFeed.getUserList();
    assertNotNull(result);
    assertEquals(userList, result);
}",3,3,3,3
"public void setMeta(Meta meta) {
    this.meta = meta;
}",,1,1,1,1,"@Test(timeout = 4000)
public void test1() throws Throwable {
    LikesFeed likesFeed0 = new LikesFeed();
    Meta meta0 = new Meta();
    likesFeed0.setMeta(meta0);
    Meta meta1 = likesFeed0.getMeta();
    assertEquals(0, meta1.getCode());
}",3,2,2,2,"    @Test
    public void testSetMeta() {
        // Create a new LikesFeed object
        LikesFeed likesFeed = new LikesFeed();

        // Create a new Meta object
        Meta meta = new Meta();

        // Set the Meta object using the setMeta method
        likesFeed.setMeta(meta);

        // Verify that the Meta object is correctly assigned to the instance variable 'meta'
        assertEquals(meta, likesFeed.getMeta());
    }",3,3,3,3
"public Meta getMeta() {
    return meta;
}",,1,1,1,1,"@Test(timeout = 4000)
public void test1() throws Throwable {
    LikesFeed likesFeed0 = new LikesFeed();
    Meta meta0 = new Meta();
    likesFeed0.setMeta(meta0);
    Meta meta1 = likesFeed0.getMeta();
    assertEquals(0, meta1.getCode());
}",3,2,2,2,"    @Test
    public void testGetMeta() {
        // Create a LikesFeed object
        LikesFeed likesFeed = new LikesFeed();

        // Create a Meta object
        Meta expectedMeta = new Meta();
        expectedMeta.setCode(200);
        expectedMeta.setErrorMessage(null);

        // Set the Meta object in the LikesFeed object
        likesFeed.setMeta(expectedMeta);

        // Call the getMeta() method
        Meta actualMeta = likesFeed.getMeta();

        // Assert that the returned Meta object is equal to the expected Meta object
        assertEquals(expectedMeta, actualMeta);
    }",3,3,3,3
"@Override
public String toString() {
    return String.format(""LikesFeed [meta=%s, userList=%s]"", meta, userList);
}",,1,1,1,1,"@Test(timeout = 4000)
public void test4() throws Throwable {
    LikesFeed likesFeed0 = new LikesFeed();
    String string0 = likesFeed0.toString();
    assertEquals(""LikesFeed [meta=null, userList=null]"", string0);
}",3,3,3,3,"@Test(timeout = 4000)
public void testToString() throws Throwable {
    LikesFeed likesFeed = new LikesFeed();
    likesFeed.setMeta(null);
    likesFeed.setUserList(null);
    
    String expected = ""LikesFeed [meta=null, userList=null]"";
    String actual = likesFeed.toString();
    
    assertEquals(expected, actual);
}",3,3,3,3
"public void setTagList(List<TagInfoData> tagList) {
    this.tagList = tagList;
}",@Test public void testSetTagList() { List<TagInfoData> tagList = new ArrayList<TagInfoData>(); tagList.add(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.Tag,1,1,1,1,"@Test(timeout = 4000)
public void test0() throws Throwable {
    TagSearchFeed tagSearchFeed0 = new TagSearchFeed();
    LinkedList<TagInfoData> linkedList0 = new LinkedList<TagInfoData>();
    tagSearchFeed0.setTagList(linkedList0);
    List<TagInfoData> list0 = tagSearchFeed0.getTagList();
    assertTrue(list0.isEmpty());
}",3,3,3,3,"@Test
public void testSetTagList() {
    TagSearchFeed tagSearchFeed = new TagSearchFeed();
    List<TagInfoData> tagList = new ArrayList<TagInfoData>();
    tagList.add(new TagInfoData());
    tagList.add(new TagInfoData());

    tagList.add(new TagInfoData()); // Fix: Remove the argument from the constructor call

    tagSearchFeed.setTagList(tagList);
    assertEquals(tagList, tagSearchFeed.getTagList());
}",3,3,3,3
"public List<TagInfoData> getTagList() {
    return tagList;
}",@Test public void testGetTagList() throws Exception { List<TagInfoData> tagList = new ArrayList<TagInfoData>(); tagList.add(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData(new TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.TagInfoData.Tag,1,1,1,1,"@Test(timeout = 4000)
public void test0() throws Throwable {
    TagSearchFeed tagSearchFeed0 = new TagSearchFeed();
    LinkedList<TagInfoData> linkedList0 = new LinkedList<TagInfoData>();
    tagSearchFeed0.setTagList(linkedList0);
    List<TagInfoData> list0 = tagSearchFeed0.getTagList();
    assertTrue(list0.isEmpty());
}",3,3,3,3,"@Test
public void testGetTagList() {
    TagSearchFeed tagSearchFeed = new TagSearchFeed();
    List<TagInfoData> expectedTagList = new LinkedList<TagInfoData>();

    expectedTagList.add(new TagInfoData());

    expectedTagList.add(new TagInfoData());
    expectedTagList.add(new TagInfoData());
    tagSearchFeed.setTagList(expectedTagList);
    List<TagInfoData> actualTagList = tagSearchFeed.getTagList();
    assertEquals(expectedTagList, actualTagList);
}",3,3,3,3
"public void setMeta(Meta meta) {
    this.meta = meta;
}",,1,1,1,1,"@Test(timeout = 4000)
public void test2() throws Throwable {
    TagSearchFeed tagSearchFeed0 = new TagSearchFeed();
    Meta meta0 = new Meta();
    tagSearchFeed0.setMeta(meta0);
    Meta meta1 = tagSearchFeed0.getMeta();
    assertEquals(0, meta1.getCode());
}",3,2,2,2,"    @Test
    public void testSetMeta() {
        // Create a new instance of TagSearchFeed
        TagSearchFeed tagSearchFeed = new TagSearchFeed();

        // Create a new Meta object
        Meta meta = new Meta();
        // Set the values of the Meta object
        meta.setCode(200);
        meta.setErrorType(""none"");

        // Call the setMeta method with the Meta object
        tagSearchFeed.setMeta(meta);

        // Get the Meta object from the TagSearchFeed instance
        Meta result = tagSearchFeed.getMeta();

        // Assert that the Meta object is not null
        assertNotNull(result);
        // Assert that the Meta object has the same code as the provided Meta object
        assertEquals(meta.getCode(), result.getCode());
        // Assert that the Meta object has the same error type as the provided Meta object
        assertEquals(meta.getErrorType(), result.getErrorType());
    }",3,3,3,3
"public Meta getMeta() {
    return meta;
}",,1,1,1,1,"@Test(timeout = 4000)
public void test2() throws Throwable {
    TagSearchFeed tagSearchFeed0 = new TagSearchFeed();
    Meta meta0 = new Meta();
    tagSearchFeed0.setMeta(meta0);
    Meta meta1 = tagSearchFeed0.getMeta();
    assertEquals(0, meta1.getCode());
}",3,2,2,2,"    @Test
    public void testGetMeta() {
        // Create a new instance of TagSearchFeed
        TagSearchFeed tagSearchFeed = new TagSearchFeed();

        // Create a new instance of Meta
        Meta expectedMeta = new Meta();
        expectedMeta.setCode(200);
        expectedMeta.setErrorType(""none"");

        // Set the expected Meta object to the TagSearchFeed instance
        tagSearchFeed.setMeta(expectedMeta);

        // Call the getMeta() method
        Meta actualMeta = tagSearchFeed.getMeta();

        // Assert that the actual Meta object is equal to the expected Meta object
        assertEquals(expectedMeta, actualMeta);
    }",3,3,3,3
"@Override
public String toString() {
    return String.format(""TagSearchFeed [meta=%s, tagList=%s]"", meta, tagList);
}",,1,1,1,1,"@Test(timeout = 4000)
public void test6() throws Throwable {
    TagSearchFeed tagSearchFeed0 = new TagSearchFeed();
    String string0 = tagSearchFeed0.toString();
    assertEquals(""TagSearchFeed [meta=null, tagList=null]"", string0);
}",3,3,3,3,"@Test(timeout = 4000)
public void testToString() throws Throwable {
    // Create a new instance of TagSearchFeed
    TagSearchFeed tagSearchFeed = new TagSearchFeed();

    // Call the toString() method
    String result = tagSearchFeed.toString();

    // Create the expected string representation
    String expected = ""TagSearchFeed [meta=null, tagList=null]"";

    // Assert that the result matches the expected string
    assertEquals(expected, result);
}",3,3,3,3
"public void setTagInfo(TagInfoData tagInfo) {
    this.tagInfo = tagInfo;
}","@Test public void testSetTagInfo() { TagInfoFeed feed = new TagInfoFeed(); feed.setTagInfo(new TagInfoData()); }
",3,2,2,2,"@Test(timeout = 4000)
public void test0() throws Throwable {
    TagInfoFeed tagInfoFeed0 = new TagInfoFeed();
    TagInfoData tagInfoData0 = new TagInfoData();
    tagInfoData0.setMediaCount(1L);
    tagInfoFeed0.setTagInfo(tagInfoData0);
    TagInfoData tagInfoData1 = tagInfoFeed0.getTagInfo();
    assertEquals(1L, tagInfoData1.getMediaCount());
}",3,3,3,3,"    @Test
    public void testSetTagInfo() {
        // Create a new instance of TagInfoFeed
        TagInfoFeed tagInfoFeed = new TagInfoFeed();

        // Create a new instance of TagInfoData
        TagInfoData tagInfoData = new TagInfoData();

        // Set the tagInfoData object using the setTagInfo method
        tagInfoFeed.setTagInfo(tagInfoData);

        // Verify that the tagInfo instance variable is set correctly
        assertEquals(tagInfoData, tagInfoFeed.getTagInfo());
    }",3,3,3,3
"public TagInfoData getTagInfo() {
    return tagInfo;
}","@Test public void testGetTagInfo() { TagInfoFeed feed = new TagInfoFeed(); feed.setTagInfo(new TagInfoData()); }
",3,2,2,2,"@Test(timeout = 4000)
public void test0() throws Throwable {
    TagInfoFeed tagInfoFeed0 = new TagInfoFeed();
    TagInfoData tagInfoData0 = new TagInfoData();
    tagInfoData0.setMediaCount(1L);
    tagInfoFeed0.setTagInfo(tagInfoData0);
    TagInfoData tagInfoData1 = tagInfoFeed0.getTagInfo();
    assertEquals(1L, tagInfoData1.getMediaCount());
}",3,3,3,3,"    @Test
    public void testGetTagInfo() {
        // Create a new instance of TagInfoFeed
        TagInfoFeed tagInfoFeed = new TagInfoFeed();

        // Create a new instance of TagInfoData
        TagInfoData expectedTagInfo = new TagInfoData();

        // Set the expected TagInfoData object in the TagInfoFeed
        tagInfoFeed.setTagInfo(expectedTagInfo);

        // Call the getTagInfo() method
        TagInfoData actualTagInfo = tagInfoFeed.getTagInfo();

        // Assert that the returned TagInfoData object is the same as the expected one
        assertEquals(expectedTagInfo, actualTagInfo);
    }",3,3,3,3
"public void setMeta(Meta meta) {
    this.meta = meta;
}",,1,1,1,1,"@Test(timeout = 4000)
public void test2() throws Throwable {
    TagInfoFeed tagInfoFeed0 = new TagInfoFeed();
    Meta meta0 = new Meta();
    meta0.setCode(2119);
    tagInfoFeed0.setMeta(meta0);
    Meta meta1 = tagInfoFeed0.getMeta();
    assertNull(meta1.getErrorType());
}",3,3,3,3,"    @Test
    public void testSetMeta() {
        // Create a new instance of TagInfoFeed
        TagInfoFeed tagInfoFeed = new TagInfoFeed();

        // Create a new instance of Meta
        Meta meta = new Meta();

        // Set the Meta object using the setMeta method
        tagInfoFeed.setMeta(meta);

        // Verify that the Meta object is correctly assigned to the instance variable 'meta'
        assertEquals(meta, tagInfoFeed.getMeta());
    }",3,3,3,3
"public Meta getMeta() {
    return meta;
}",,1,1,1,1,"@Test(timeout = 4000)
public void test2() throws Throwable {
    TagInfoFeed tagInfoFeed0 = new TagInfoFeed();
    Meta meta0 = new Meta();
    meta0.setCode(2119);
    tagInfoFeed0.setMeta(meta0);
    Meta meta1 = tagInfoFeed0.getMeta();
    assertNull(meta1.getErrorType());
}",3,3,3,3,"    @Test
    public void testGetMeta() {
        // Create a new instance of TagInfoFeed
        TagInfoFeed tagInfoFeed = new TagInfoFeed();

        // Create a new instance of Meta
        Meta expectedMeta = new Meta();
        expectedMeta.setCode(200);
        expectedMeta.setErrorType(""None"");

        // Set the expected Meta object to the TagInfoFeed instance
        tagInfoFeed.setMeta(expectedMeta);

        // Call the getMeta() method
        Meta actualMeta = tagInfoFeed.getMeta();

        // Assert that the actual Meta object is equal to the expected Meta object
        assertEquals(expectedMeta, actualMeta);
    }",3,3,3,3
"@Override
public String toString() {
    return String.format(""TagInfoFeed [meta=%s, tagInfo=%s]"", meta, tagInfo);
}",,1,1,1,1,"@Test(timeout = 4000)
public void test5() throws Throwable {
    TagInfoFeed tagInfoFeed0 = new TagInfoFeed();
    String string0 = tagInfoFeed0.toString();
    assertEquals(""TagInfoFeed [meta=null, tagInfo=null]"", string0);
}",3,3,3,3,"@Test(timeout = 4000)
public void testToString() throws Throwable {
    TagInfoFeed tagInfoFeed = new TagInfoFeed();
    tagInfoFeed.setMeta(null);
    tagInfoFeed.setTagInfo(null);
    
    String expected = ""TagInfoFeed [meta=null, tagInfo=null]"";
    String actual = tagInfoFeed.toString();
    
    assertEquals(expected, actual);
}",3,3,3,3
"public void setMeta(Meta meta) {
    this.meta = meta;
}",,1,1,1,1,"@Test(timeout = 4000)
public void test0() throws Throwable {
    TagMediaFeed tagMediaFeed0 = new TagMediaFeed();
    Meta meta0 = new Meta();
    meta0.setCode(2);
    tagMediaFeed0.setMeta(meta0);
    Meta meta1 = tagMediaFeed0.getMeta();
    assertNull(meta1.getErrorType());
}",3,3,3,3,"    @Test
    public void testSetMeta() {
        // Create a new instance of TagMediaFeed
        TagMediaFeed tagMediaFeed = new TagMediaFeed();

        // Create a new instance of Meta
        Meta meta = new Meta();

        // Set the Meta object using the setMeta method
        tagMediaFeed.setMeta(meta);

        // Verify that the Meta object is correctly assigned to the instance variable 'meta'
        assertEquals(meta, tagMediaFeed.getMeta());
    }",3,3,3,3
"public Meta getMeta() {
    return meta;
}",,1,1,1,1,"@Test(timeout = 4000)
public void test0() throws Throwable {
    TagMediaFeed tagMediaFeed0 = new TagMediaFeed();
    Meta meta0 = new Meta();
    meta0.setCode(2);
    tagMediaFeed0.setMeta(meta0);
    Meta meta1 = tagMediaFeed0.getMeta();
    assertNull(meta1.getErrorType());
}",3,3,3,3,"    @Test
    public void testGetMeta() {
        // Create a TagMediaFeed object
        TagMediaFeed tagMediaFeed = new TagMediaFeed();

        // Create a Meta object
        Meta expectedMeta = new Meta();
        expectedMeta.setCode(200);
        expectedMeta.setErrorType(""none"");

        // Set the Meta object in the TagMediaFeed object
        tagMediaFeed.setMeta(expectedMeta);

        // Call the getMeta() method
        Meta actualMeta = tagMediaFeed.getMeta();

        // Assert that the returned Meta object is equal to the expected Meta object
        assertEquals(expectedMeta, actualMeta);
    }",3,3,3,3
"public List<MediaFeedData> getData() {
    return data;
}","@Test public void testGetData() { TagMediaFeed feed = new TagMediaFeed(); assertEquals(1, feed.getData().size()); }
",2,2,2,2,"@Test(timeout = 4000)
public void test2() throws Throwable {
    TagMediaFeed tagMediaFeed0 = new TagMediaFeed();
    LinkedList<MediaFeedData> linkedList0 = new LinkedList<MediaFeedData>();
    MediaFeedData mediaFeedData0 = new MediaFeedData();
    linkedList0.add(mediaFeedData0);
    tagMediaFeed0.setData(linkedList0);
    List<MediaFeedData> list0 = tagMediaFeed0.getData();
    assertEquals(1, list0.size());
}",2,2,2,2,"@Test
public void testGetData() {
    TagMediaFeed tagMediaFeed = new TagMediaFeed();

    List<MediaFeedData> expectedData = new LinkedList<MediaFeedData>();

    expectedData.add(new MediaFeedData());
    expectedData.add(new MediaFeedData());
    expectedData.add(new MediaFeedData());
    tagMediaFeed.setData(expectedData);
    List<MediaFeedData> actualData = tagMediaFeed.getData();
    assertEquals(expectedData, actualData);
}",3,2,3,3
"@Override
public String toString() {
    return String.format(""TagMediaFeed [data=%s, meta=%s, pagination=%s]"", data, meta, pagination);
}",,1,1,1,1,"@Test(timeout = 4000)
public void test4() throws Throwable {
    TagMediaFeed tagMediaFeed0 = new TagMediaFeed();
    String string0 = tagMediaFeed0.toString();
    assertEquals(""TagMediaFeed [data=null, meta=null, pagination=null]"", string0);
}",3,3,3,3,"@Test(timeout = 4000)
public void testToString() throws Throwable {
    // Create a new instance of TagMediaFeed
    TagMediaFeed tagMediaFeed = new TagMediaFeed();

    // Call the toString() method
    String result = tagMediaFeed.toString();

    // Create the expected string representation
    String expected = ""TagMediaFeed [data=null, meta=null, pagination=null]"";

    // Assert that the result matches the expected string
    assertEquals(expected, result);
}",3,3,3,3
"public Pagination getPagination() {
    return pagination;
}","@Test public void testTagMediaFeed() { TagMediaFeed feed = new TagMediaFeed(); assertEquals(pagination, feed.getPagination()); }
",2,2,2,2,"@Test(timeout = 4000)
public void test6() throws Throwable {
    TagMediaFeed tagMediaFeed0 = new TagMediaFeed();
    Pagination pagination0 = tagMediaFeed0.getPagination();
    assertNull(pagination0);
}",3,3,3,3,"    @Test
    public void testGetPagination() {
        // Create a new instance of TagMediaFeed
        TagMediaFeed tagMediaFeed = new TagMediaFeed();

        // Create a new instance of Pagination
        Pagination pagination = new Pagination();

        // Set the pagination object to the tagMediaFeed instance
        tagMediaFeed.setPagination(pagination);

        // Call the getPagination() method
        Pagination result = tagMediaFeed.getPagination();

        // Assert that the returned pagination object is the same as the one set
        assertEquals(pagination, result);
    }",3,3,3,3
"public void setTagName(String tagName) {
    this.tagName = tagName;
}","@Test public void testSetTagName() throws Exception { TagInfoData data = new TagInfoData(); data.setTagName(""test""); Assert.assertEquals(""test"", data.getTagName()); }
",3,3,3,3,"@Test(timeout = 4000)
public void test0() throws Throwable {
    TagInfoData tagInfoData0 = new TagInfoData();
    tagInfoData0.setTagName(""TagInfoData [mediaCount=%s, tagName=%s]"");
    String string0 = tagInfoData0.getTagName();
    assertEquals(""TagInfoData [mediaCount=%s, tagName=%s]"", string0);
}",3,3,3,3,"    @Test
    public void testSetTagName() {
        // Create an instance of TagInfoData
        TagInfoData tagInfoData = new TagInfoData();

        // Set the tag name using the setTagName method
        String tagName = ""Test Tag"";
        tagInfoData.setTagName(tagName);

        // Verify that the tag name is set correctly
        assertEquals(tagName, tagInfoData.getTagName());
    }",3,3,3,3
"public String getTagName() {
    return tagName;
}","@Test public void testGetTagName() throws Exception { TagInfoData data = new TagInfoData(); data.setTagName(""tag""); Assert.assertEquals(""tag"", data.getTagName()); }
",3,3,3,3,"@Test(timeout = 4000)
public void test0() throws Throwable {
    TagInfoData tagInfoData0 = new TagInfoData();
    tagInfoData0.setTagName(""TagInfoData [mediaCount=%s, tagName=%s]"");
    String string0 = tagInfoData0.getTagName();
    assertEquals(""TagInfoData [mediaCount=%s, tagName=%s]"", string0);
}",3,3,3,3,"    @Test
    public void testGetTagName() {
        // Create an instance of TagInfoData
        TagInfoData tagInfoData = new TagInfoData();
        
        // Set the tag name
        String tagName = ""Test Tag"";
        tagInfoData.setTagName(tagName);
        
        // Retrieve the tag name using the getTagName() method
        String retrievedTagName = tagInfoData.getTagName();
        
        // Assert that the retrieved tag name is equal to the set tag name
        assertEquals(tagName, retrievedTagName);
    }",3,3,3,3
"public void setMediaCount(long mediaCount) {
    this.mediaCount = mediaCount;
}","@Test public void testSetMediaCount() { TagInfoData data = new TagInfoData(); data.setMediaCount(1); Assert.assertEquals(1, data.getMediaCount()); }
",3,3,3,3,"@Test(timeout = 4000)
public void test2() throws Throwable {
    TagInfoData tagInfoData0 = new TagInfoData();
    tagInfoData0.setMediaCount(81L);
    long long0 = tagInfoData0.getMediaCount();
    assertEquals(81L, long0);
}",3,3,3,3,"    @Test
    public void testSetMediaCount() {
        // Create an instance of TagInfoData
        TagInfoData tagInfoData = new TagInfoData();

        // Set the media count to a specific value
        long mediaCount = 10;
        tagInfoData.setMediaCount(mediaCount);

        // Verify that the media count is set correctly
        assertEquals(mediaCount, tagInfoData.getMediaCount());
    }",3,3,3,3
"public long getMediaCount() {
    return mediaCount;
}","@Test public void testGetMediaCount() { TagInfoData data = new TagInfoData(); data.setMediaCount(1); Assert.assertEquals(1, data.getMediaCount()); }
",3,3,3,3,"@Test(timeout = 4000)
public void test2() throws Throwable {
    TagInfoData tagInfoData0 = new TagInfoData();
    tagInfoData0.setMediaCount(81L);
    long long0 = tagInfoData0.getMediaCount();
    assertEquals(81L, long0);
}",3,3,3,3,"    @Test
    public void testGetMediaCount() {
        // Create an instance of TagInfoData
        TagInfoData tagInfoData = new TagInfoData();

        // Set the media count to a specific value
        long expectedMediaCount = 10;
        tagInfoData.setMediaCount(expectedMediaCount);

        // Call the getMediaCount() method and assert the returned value
        long actualMediaCount = tagInfoData.getMediaCount();
        assertEquals(expectedMediaCount, actualMediaCount);
    }",3,3,3,3
"@Override
public String toString() {
    return String.format(""TagInfoData [mediaCount=%s, tagName=%s]"", mediaCount, tagName);
}",,1,1,1,1,"@Test(timeout = 4000)
public void test5() throws Throwable {
    TagInfoData tagInfoData0 = new TagInfoData();
    String string0 = tagInfoData0.toString();
    assertEquals(""TagInfoData [mediaCount=0, tagName=null]"", string0);
}",3,3,3,3,"    @Test
    public void testToString() {
        // Create a TagInfoData object with sample values
        TagInfoData tagInfoData = new TagInfoData();
        tagInfoData.setMediaCount(10);
        tagInfoData.setTagName(""Java"");

        // Call the toString() method
        String result = tagInfoData.toString();

        // Verify that the generated string representation is correct
        String expected = ""TagInfoData [mediaCount=10, tagName=Java]"";
        assertEquals(expected, result);
    }",3,3,3,3
"public void setName(String name) {
    this.name = name;
}","@Test public void testSetName() throws Exception { Location location = new Location(); location.setName(""name""); assertEquals(""name"", location.getName()); }
",3,3,3,3,"@Test(timeout = 4000)
public void test00() throws Throwable {
    Location location0 = new Location();
    location0.setName(""^_VW$bqieQ2v\"""");
    String string0 = location0.getName();
    assertEquals(""^_VW$bqieQ2v\"""", string0);
}",3,3,3,3,"    @Test
    public void testSetName() {
        // Create a new Location object
        Location location = new Location();

        // Set the name attribute using the setName method
        String name = ""New Location"";
        location.setName(name);

        // Verify that the name attribute has been set correctly
        assertEquals(name, location.getName());
    }",3,3,3,3
"public String getName() {
    return name;
}","@Test public void testGetName() { System.out.println(""getName""); Location instance = new Location(); String expResult = ""name""; String result = instance.getName(); assertEquals(expResult, result); }
",3,3,3,3,"@Test(timeout = 4000)
public void test00() throws Throwable {
    Location location0 = new Location();
    location0.setName(""^_VW$bqieQ2v\"""");
    String string0 = location0.getName();
    assertEquals(""^_VW$bqieQ2v\"""", string0);
}",3,3,3,3,"    @Test
    public void testGetName() {
        // Create a new Location object
        Location location = new Location();
        
        // Set the name of the location
        String expectedName = ""Test Location"";
        location.setName(expectedName);
        
        // Retrieve the name using the getName() method
        String actualName = location.getName();
        
        // Assert that the retrieved name matches the expected name
        assertEquals(expectedName, actualName);
    }",3,3,3,3
"public void setLongitude(double longitude) {
    this.longitude = longitude;
}","@Test public void testSetLongitude() throws Exception { Location location = new Location(); location.setLongitude(0.0); assertEquals(0.0, location.getLongitude(), 0.0); }
",3,3,3,3,"@Test(timeout = 4000)
public void test02() throws Throwable {
    Location location0 = new Location();
    location0.setLongitude(1319.1515315654);
    double double0 = location0.getLongitude();
    assertEquals(1319.1515315654, double0, 0.01);
}",3,3,3,3,"    @Test
    public void testSetLongitude() {
        // Create a new Location object
        Location location = new Location();

        // Set the longitude value using the setLongitude method
        double longitude = 45.6789;
        location.setLongitude(longitude);

        // Verify that the longitude value is set correctly
        assertEquals(longitude, location.getLongitude(), 0.0001);
    }",3,3,3,3
"public double getLongitude() {
    return longitude;
}","@Test public void testGetLongitude() { System.out.println(""getLongitude""); Location instance = new Location(); double expResult = 0.0; double result = instance.getLongitude(); assertEquals(expResult, result); }
",3,3,3,3,"@Test(timeout = 4000)
public void test02() throws Throwable {
    Location location0 = new Location();
    location0.setLongitude(1319.1515315654);
    double double0 = location0.getLongitude();
    assertEquals(1319.1515315654, double0, 0.01);
}",3,3,3,3,"    @Test
    public void testGetLongitude() {
        // Create a new Location object
        Location location = new Location();
        
        // Set the longitude value
        double longitude = 123.456;
        location.setLongitude(longitude);
        
        // Retrieve the longitude value using the getLongitude() method
        double result = location.getLongitude();
        
        // Assert that the retrieved longitude value matches the expected value
        assertEquals(longitude, result, 0.001);
    }",3,3,3,3
"public void setLatitude(double latitude) {
    this.latitude = latitude;
}","@Test public void testSetLatitude() { Location location = new Location(); location.setLatitude(1.0); assertEquals(1.0, location.getLatitude(), 0.0); }
",3,3,3,3,"@Test(timeout = 4000)
public void test04() throws Throwable {
    Location location0 = new Location();
    location0.setLatitude(1076.484622);
    double double0 = location0.getLatitude();
    assertEquals(1076.484622, double0, 0.01);
}",3,3,3,3,"    @Test
    public void testSetLatitude() {
        // Create a new Location object
        Location location = new Location();

        // Set the latitude value using the setLatitude method
        double latitude = 37.7749;
        location.setLatitude(latitude);

        // Verify that the latitude value has been set correctly
        assertEquals(latitude, location.getLatitude(), 0.0001);
    }",3,3,3,3
"public double getLatitude() {
    return latitude;
}","@Test public void testGetLatitude() { System.out.println(""getLatitude""); Location instance = new Location(); double expResult = 0.0; double result = instance.getLatitude(); assertEquals(expResult, result, 0.0); }
",3,3,3,3,"@Test(timeout = 4000)
public void test04() throws Throwable {
    Location location0 = new Location();
    location0.setLatitude(1076.484622);
    double double0 = location0.getLatitude();
    assertEquals(1076.484622, double0, 0.01);
}",3,3,3,3,"    @Test
    public void testGetLatitude() {
        // Create a new Location object
        Location location = new Location();
        
        // Set the latitude value
        double expectedLatitude = 37.7749;
        location.setLatitude(expectedLatitude);
        
        // Retrieve the latitude value using the getLatitude() method
        double actualLatitude = location.getLatitude();
        
        // Assert that the retrieved latitude value matches the expected latitude value
        assertEquals(expectedLatitude, actualLatitude, 0.0001);
    }",3,3,3,3
"public void setId(String id) {
    this.id = id;
}",,1,1,1,1,"@Test(timeout = 4000)
public void test06() throws Throwable {
    Location location0 = new Location();
    location0.setId(""aN@'+h@y"");
    String string0 = location0.getId();
    assertEquals(""aN@'+h@y"", string0);
}",3,3,3,3,"    @Test
    public void testSetId() {
        // Create a new Location object
        Location location = new Location();

        // Set the id using the setId method
        String id = ""12345"";
        location.setId(id);

        // Verify that the id has been set correctly
        assertEquals(id, location.getId());
    }",3,3,3,3
"public String getId() {
    return id;
}",,1,1,1,1,"@Test(timeout = 4000)
public void test06() throws Throwable {
    Location location0 = new Location();
    location0.setId(""aN@'+h@y"");
    String string0 = location0.getId();
    assertEquals(""aN@'+h@y"", string0);
}",3,3,3,3,"    @Test
    public void testGetId() {
        // Create a new Location object
        Location location = new Location();
        
        // Set the id attribute of the Location object
        location.setId(""12345"");
        
        // Call the getId() method and store the result in a variable
        String id = location.getId();
        
        // Assert that the returned id is equal to the expected id
        assertEquals(""12345"", id);
    }",3,3,3,3
"public void setNextUrl(String nextUrl) {
    this.nextUrl = nextUrl;
}","@Test public void testSetNextUrl() { Pagination pagination = new Pagination(); pagination.setNextUrl(""http: assertEquals(""http: }
",3,3,2,2,"@Test(timeout = 4000)
public void test00() throws Throwable {
    Pagination pagination0 = new Pagination();
    pagination0.setNextUrl(""x^docJ(XetI{{"");
    String string0 = pagination0.getNextUrl();
    assertEquals(""x^docJ(XetI{{"", string0);
}",3,3,3,3,"    @Test
    public void testSetNextUrl() {
        Pagination pagination = new Pagination();
        String nextUrl = ""https://example.com/next"";

        pagination.setNextUrl(nextUrl);

        assertEquals(nextUrl, pagination.getNextUrl());
    }",3,3,3,3
"public String getNextUrl() {
    return nextUrl;
}","@Test public void testGetNextUrl() { Pagination pagination = new Pagination(); assertEquals(""http: pagination.getNextUrl(); }
",3,2,2,2,"@Test(timeout = 4000)
public void test00() throws Throwable {
    Pagination pagination0 = new Pagination();
    pagination0.setNextUrl(""x^docJ(XetI{{"");
    String string0 = pagination0.getNextUrl();
    assertEquals(""x^docJ(XetI{{"", string0);
}",3,3,3,3,"    @Test
    public void testGetNextUrl() {
        Pagination pagination = new Pagination();
        String expectedUrl = ""https://example.com/next"";
        pagination.setNextUrl(expectedUrl);

        String actualUrl = pagination.getNextUrl();

        assertEquals(expectedUrl, actualUrl);
    }",3,3,3,3
"public void setNextMinId(String nextMinId) {
    this.nextMinId = nextMinId;
}","@Test public void testSetNextMinId() { Pagination pagination = new Pagination(); pagination.setNextMinId(""1""); assertEquals(""1"", pagination.getNextMinId()); }
",3,3,3,3,"@Test(timeout = 4000)
public void test02() throws Throwable {
    Pagination pagination0 = new Pagination();
    pagination0.setNextMinId(""b]lm[)?B@k}"");
    String string0 = pagination0.getNextMinId();
    assertEquals(""b]lm[)?B@k}"", string0);
}",3,3,3,3,"    @Test
    public void testSetNextMinId() {
        Pagination pagination = new Pagination();
        String nextMinId = ""12345"";
        
        pagination.setNextMinId(nextMinId);
        
        assertEquals(nextMinId, pagination.getNextMinId());
    }",3,3,3,3
"public String getNextMinId() {
    return nextMinId;
}","@Test public void testGetNextMinId() throws Exception { Pagination pagination = new Pagination(); assertEquals("""", pagination.getNextMinId()); }
",3,3,2,2,"@Test(timeout = 4000)
public void test02() throws Throwable {
    Pagination pagination0 = new Pagination();
    pagination0.setNextMinId(""b]lm[)?B@k}"");
    String string0 = pagination0.getNextMinId();
    assertEquals(""b]lm[)?B@k}"", string0);
}",3,3,3,3,"    @Test
    public void testGetNextMinId() {
        Pagination pagination = new Pagination();
        String expected = ""12345"";
        pagination.setNextMinId(expected);
        
        String actual = pagination.getNextMinId();
        
        assertEquals(expected, actual);
    }",3,3,3,3
"public void setNextMaxTagId(String nextMaxTagId) {
    this.nextMaxTagId = nextMaxTagId;
}","@Test public void testSetNextMaxTagId() throws Exception { Pagination pagination = new Pagination(); pagination.setNextMaxTagId(null); assertEquals(null, pagination.getNextMaxTagId()); }
",3,3,3,3,"@Test(timeout = 4000)
public void test04() throws Throwable {
    Pagination pagination0 = new Pagination();
    pagination0.setNextMaxTagId(""org.jinstagram.entity.common.Pagination"");
    String string0 = pagination0.getNextMaxTagId();
    assertEquals(""org.jinstagram.entity.common.Pagination"", string0);
}",3,3,3,3,"    @Test
    public void testSetNextMaxTagId() {
        // Create an instance of Pagination
        Pagination pagination = new Pagination();

        // Set the nextMaxTagId using the provided input string
        String nextMaxTagId = ""12345"";
        pagination.setNextMaxTagId(nextMaxTagId);

        // Verify that the nextMaxTagId has been set correctly
        assertEquals(nextMaxTagId, pagination.getNextMaxTagId());
    }",3,3,3,3
"public String getNextMaxTagId() {
    return nextMaxTagId;
}","@Test public void testGetNextMaxTagId() throws Exception { Pagination pagination = new Pagination(); assertEquals(""nextMaxTagId"", pagination.getNextMaxTagId()); }
",3,3,2,2,"@Test(timeout = 4000)
public void test04() throws Throwable {
    Pagination pagination0 = new Pagination();
    pagination0.setNextMaxTagId(""org.jinstagram.entity.common.Pagination"");
    String string0 = pagination0.getNextMaxTagId();
    assertEquals(""org.jinstagram.entity.common.Pagination"", string0);
}",3,3,3,3,"    @Test
    public void testGetNextMaxTagId() {
        Pagination pagination = new Pagination();
        String expected = ""12345"";
        pagination.setNextMaxTagId(expected);
        
        String actual = pagination.getNextMaxTagId();
        
        assertEquals(expected, actual);
    }",3,3,3,3
"public void setNextMaxId(String nextMaxId) {
    this.nextMaxId = nextMaxId;
}","@Test public void testSetNextMaxId() throws Exception { Pagination pagination = new Pagination(); pagination.setNextMaxId(""1""); assertEquals(""1"", pagination.getNextMaxId()); }
",3,3,3,3,"@Test(timeout = 4000)
public void test06() throws Throwable {
    Pagination pagination0 = new Pagination();
    pagination0.setNextMaxId("""");
    String string0 = pagination0.getNextMaxId();
    assertEquals("""", string0);
}",3,3,3,3,"    @Test
    public void testSetNextMaxId() {
        Pagination pagination = new Pagination();
        String nextMaxId = ""12345"";
        
        pagination.setNextMaxId(nextMaxId);
        
        assertEquals(nextMaxId, pagination.getNextMaxId());
    }",3,3,3,3
"public String getNextMaxId() {
    return nextMaxId;
}","@Test public void testGetNextMaxId() throws Exception { Pagination pagination = new Pagination(); assertEquals(""nextMaxId"", pagination.getNextMaxId()); }
",3,3,2,2,"@Test(timeout = 4000)
public void test06() throws Throwable {
    Pagination pagination0 = new Pagination();
    pagination0.setNextMaxId("""");
    String string0 = pagination0.getNextMaxId();
    assertEquals("""", string0);
}",3,3,3,3,"    @Test
    public void testGetNextMaxId() {
        Pagination pagination = new Pagination();
        String expected = ""12345"";
        pagination.setNextMaxId(expected);
        
        String actual = pagination.getNextMaxId();
        
        assertEquals(expected, actual);
    }",3,3,3,3
"public void setNextCursor(String nextCursor) {
    this.nextCursor = nextCursor;
}","@Test public void testSetNextCursor() throws Exception { Pagination pagination = new Pagination(); pagination.setNextCursor(null); assertEquals("""", pagination.getNextCursor()); }
",3,2,2,2,"@Test(timeout = 4000)
public void test07() throws Throwable {
    Pagination pagination0 = new Pagination();
    pagination0.setNextCursor(""org.jinstagram.entity.common.Pagination"");
    String string0 = pagination0.getNextCursor();
    assertEquals(""org.jinstagram.entity.common.Pagination"", string0);
}",3,3,3,3,"    @Test
    public void testSetNextCursor() {
        Pagination pagination = new Pagination();
        String nextCursor = ""12345"";
        
        pagination.setNextCursor(nextCursor);
        
        assertEquals(nextCursor, pagination.getNextCursor());
    }",3,3,3,3
"public String getNextCursor() {
    return nextCursor;
}","@Test public void testGetNextCursor() throws Exception { Pagination pagination = new Pagination(); assertEquals("""", pagination.getNextCursor()); }
",3,2,2,2,"@Test(timeout = 4000)
public void test07() throws Throwable {
    Pagination pagination0 = new Pagination();
    pagination0.setNextCursor(""org.jinstagram.entity.common.Pagination"");
    String string0 = pagination0.getNextCursor();
    assertEquals(""org.jinstagram.entity.common.Pagination"", string0);
}",3,3,3,3,"    @Test
    public void testGetNextCursor() {
        Pagination pagination = new Pagination();
        String expectedNextCursor = ""12345"";
        pagination.setNextCursor(expectedNextCursor);

        String actualNextCursor = pagination.getNextCursor();

        assertEquals(expectedNextCursor, actualNextCursor);
    }",3,3,3,3
"public void setMinTagId(String minTagId) {
    this.minTagId = minTagId;
}","@Test public void testSetMinTagId() { Pagination pagination = new Pagination(); pagination.setMinTagId(""1""); assertEquals(""1"", pagination.getMinTagId()); }
",3,3,3,3,"@Test(timeout = 4000)
public void test09() throws Throwable {
    Pagination pagination0 = new Pagination();
    pagination0.setMinTagId(""m'T.F[FfxkoP"");
    String string0 = pagination0.getMinTagId();
    assertEquals(""m'T.F[FfxkoP"", string0);
}",3,3,3,3,"    @Test
    public void testSetMinTagId() {
        Pagination pagination = new Pagination();
        String minTagId = ""12345"";
        
        pagination.setMinTagId(minTagId);
        
        assertEquals(minTagId, pagination.getMinTagId());
    }",3,3,3,3
"public String getMinTagId() {
    return minTagId;
}","@Test public void testGetMinTagId() throws Exception { Pagination pagination = new Pagination(); assertEquals(minTagId, pagination.getMinTagId()); }
",2,2,2,2,"@Test(timeout = 4000)
public void test09() throws Throwable {
    Pagination pagination0 = new Pagination();
    pagination0.setMinTagId(""m'T.F[FfxkoP"");
    String string0 = pagination0.getMinTagId();
    assertEquals(""m'T.F[FfxkoP"", string0);
}",3,3,3,3,"    @Test
    public void testGetMinTagId() {
        Pagination pagination = new Pagination();
        String expected = ""12345"";
        pagination.setMinTagId(expected);
        
        String actual = pagination.getMinTagId();
        
        assertEquals(expected, actual);
    }",3,3,3,3
"public void setDepreciationWarning(String depreciationWarning) {
    this.depreciationWarning = depreciationWarning;
}","@Test public void setDepreciationWarning() { pagination.setDepreciationWarning(""""); }
",3,1,2,2,"@Test(timeout = 4000)
public void test11() throws Throwable {
    Pagination pagination0 = new Pagination();
    pagination0.setDepreciationWarning(""zZy:E);],iz"");
    String string0 = pagination0.getDepreciationWarning();
    assertEquals(""zZy:E);],iz"", string0);
}",3,3,3,3,"    @Test
    public void testSetDepreciationWarning() {
        Pagination pagination = new Pagination();
        String depreciationWarning = ""This object is deprecated."";

        pagination.setDepreciationWarning(depreciationWarning);

        assertEquals(depreciationWarning, pagination.getDepreciationWarning());
    }",3,3,3,3
"public String getDepreciationWarning() {
    return depreciationWarning;
}","@Test public void testGetDepreciationWarning() { Pagination pagination = new Pagination(); assertEquals(depreciationWarning, pagination.getDepreciationWarning()); }
",3,2,2,2,"@Test(timeout = 4000)
public void test11() throws Throwable {
    Pagination pagination0 = new Pagination();
    pagination0.setDepreciationWarning(""zZy:E);],iz"");
    String string0 = pagination0.getDepreciationWarning();
    assertEquals(""zZy:E);],iz"", string0);
}",3,3,3,3,"    @Test
    public void testGetDepreciationWarning() {
        Pagination pagination = new Pagination();
        String expectedWarning = ""This asset is deprecated."";

        // Set the depreciation warning
        pagination.setDepreciationWarning(expectedWarning);

        // Retrieve the depreciation warning using the getDepreciationWarning() method
        String actualWarning = pagination.getDepreciationWarning();

        // Assert that the retrieved warning matches the expected warning
        assertEquals(expectedWarning, actualWarning);
    }",3,3,3,3
"public boolean hasNextPage() {
    return !StringUtils.isBlank(nextUrl);
}","@Test public void testHasNextPage() { Pagination pagination = new Pagination(); assertTrue(pagination.hasNextPage()); }
",3,3,2,2,"@Test(timeout = 4000)
public void test13() throws Throwable {
    Pagination pagination0 = new Pagination();
    // Undeclared exception!
    try {
        pagination0.hasNextPage();
        fail(""Expecting exception: NoClassDefFoundError"");
    } catch (NoClassDefFoundError e) {
        // 
        // org/apache/commons/lang3/StringUtils
        // 
        verifyException(""org.jinstagram.entity.common.Pagination"", e);
    }
}",2,1,1,1,"    @Test
    public void testHasNextPage_WhenNextUrlIsNotBlank_ReturnsTrue() {
        // Arrange
        Pagination pagination = new Pagination();
        pagination.setNextUrl(""https://example.com/nextPage"");

        // Act
        boolean result = pagination.hasNextPage();

        // Assert
        assertTrue(result);
    }",3,3,3,3
"@Override
public String toString() {
    return String.format(""Pagination [depreciationWarning=%s, minTagId=%s, nextMaxId=%s, nextMaxTagId=%s, nextMinId=%s, nextUrl=%s]"", depreciationWarning, minTagId, nextMaxId, nextMaxTagId, nextMinId, nextUrl);
}",,1,1,1,1,"@Test(timeout = 4000)
public void test21() throws Throwable {
    Pagination pagination0 = new Pagination();
    String string0 = pagination0.toString();
    assertEquals(""Pagination [depreciationWarning=null, minTagId=null, nextMaxId=null, nextMaxTagId=null, nextMinId=null, nextUrl=null]"", string0);
}",3,3,3,3,"    @Test
    public void testToString() {
        Pagination pagination = new Pagination();
        pagination.setDepreciationWarning(""This is a depreciation warning"");
        pagination.setMinTagId(""123456"");
        pagination.setNextMaxId(""789012"");
        pagination.setNextMaxTagId(""345678"");
        pagination.setNextMinId(""901234"");
        pagination.setNextUrl(""https://example.com"");

        String expected = ""Pagination [depreciationWarning=This is a depreciation warning, minTagId=123456, nextMaxId=789012, nextMaxTagId=345678, nextMinId=901234, nextUrl=https://example.com]"";
        String actual = pagination.toString();

        assertEquals(expected, actual);
    }",3,3,3,3
"public void setY(double y) {
    this.y = y;
}","@Test public void testSetY() throws Exception { gridPosition.setY(1.0); Assert.assertEquals(1.0, gridPosition.getY(), 0.0); }
",3,3,3,3,"@Test(timeout = 4000)
public void test0() throws Throwable {
    GridPosition gridPosition0 = new GridPosition();
    gridPosition0.setY(405.93);
    double double0 = gridPosition0.getY();
    assertEquals(405.93, double0, 0.01);
}",3,3,3,3,"    @Test
    public void testSetY() {
        // Create a new GridPosition object
        GridPosition gridPosition = new GridPosition();

        // Set the initial value of y
        double initialY = 0.0;
        gridPosition.setY(initialY);

        // Verify that the initial value of y is set correctly
        assertEquals(initialY, gridPosition.getY(), 0.0);

        // Set a new value of y
        double newY = 5.0;
        gridPosition.setY(newY);

        // Verify that the new value of y is set correctly
        assertEquals(newY, gridPosition.getY(), 0.0);
    }",3,3,3,3
"public double getY() {
    return y;
}","@Test public void testGetY() { assertEquals(gridPosition.getY(), 0); }
",3,2,2,2,"@Test(timeout = 4000)
public void test0() throws Throwable {
    GridPosition gridPosition0 = new GridPosition();
    gridPosition0.setY(405.93);
    double double0 = gridPosition0.getY();
    assertEquals(405.93, double0, 0.01);
}",3,3,3,3,"    @Test
    public void testGetY() {
        // Create an instance of GridPosition
        GridPosition gridPosition = new GridPosition();
        
        // Set the value of y using the setY() method
        double expectedY = 5.0;
        gridPosition.setY(expectedY);
        
        // Call the getY() method and assert that it returns the expected value
        double actualY = gridPosition.getY();
        assertEquals(expectedY, actualY, 0.001);
    }",3,3,3,3
"public void setX(double x) {
    this.x = x;
}","@Test public void testSetX() { gridPosition.setX(1.0); assertEquals(1.0, gridPosition.getX(), 0.0); }
",3,3,3,3,"@Test(timeout = 4000)
public void test2() throws Throwable {
    GridPosition gridPosition0 = new GridPosition();
    gridPosition0.setX(1.0);
    double double0 = gridPosition0.getX();
    assertEquals(1.0, double0, 0.01);
}",3,3,3,3,"    @Test
    public void testSetX() {
        // Create an instance of GridPosition
        GridPosition gridPosition = new GridPosition();

        // Set the value of x using the setX method
        double expectedX = 5.0;
        gridPosition.setX(expectedX);

        // Verify that the value of x has been set correctly
        double actualX = gridPosition.getX();
        assertEquals(expectedX, actualX, 0.001);
    }",3,3,3,3
"public double getX() {
    return x;
}","@Test public void testGetX() { System.out.println(""getX""); GridPosition instance = new GridPosition(); double expResult = 0.0; double result = instance.getX(); assertEquals(expResult, result, 0.0); }
",3,3,2,2,"@Test(timeout = 4000)
public void test2() throws Throwable {
    GridPosition gridPosition0 = new GridPosition();
    gridPosition0.setX(1.0);
    double double0 = gridPosition0.getX();
    assertEquals(1.0, double0, 0.01);
}",3,3,3,3,"    @Test
    public void testGetX() {
        // Create an instance of GridPosition
        GridPosition gridPosition = new GridPosition();
        
        // Set the value of x using the setX() method
        double expectedX = 5.0;
        gridPosition.setX(expectedX);
        
        // Retrieve the value of x using the getX() method
        double actualX = gridPosition.getX();
        
        // Assert that the retrieved value of x matches the expected value
        assertEquals(expectedX, actualX, 0.0);
    }",3,3,3,3
"public List<User> getLikesUserList() {
    return likesUserList;
}","@Test public void testGetLikesUserList() throws Exception { List<User> likes = new ArrayList<User>(); likes.add(new User(""user1"", ""user2"")); likes.add(new User(""user3"", ""user4"")); likes.add(new User(""user5"", ""user6"")); likes.add(new User(""user6"", ""user7"")); likes.add(new User(""user6"", ""user7"")); likes.add(new User(""user6"", ""user7"")); likes.add(new User(""user6"", ""user7"")); likes.add(new User(""user6"", ""user7"")); likes.add(new User(""user6"", ""user7"")); likes.add(new User(""user6"", ""user7"")); likes.add(new User(""user6"", ""user7"")); likes.add(new User(""user6"", ""user7"")); likes.add(new User(""user6"", ""user7"")); likes.add(new User(""user6"", ""user7"")); likes.add(new User(""user6"", ""user7"")); likes.add(new User(""user6"", ""user7"")); likes.add(new User(""user6"", ""user7"")); likes.add(new User(""user6"", ""user7"")); likes.add(new User(""user6"", ""user7"")); likes.add(new User(""user6"", ""user7"")); likes.add(new User(""user6"", ""user7"")); likes.add(new User(""user6"", ""user7"")); likes.add(new User(""user6"", ""user7"")); likes.add(new User(""user6"", ""user7"")); likes.add(new User(""user6"", ""user7"")); likes.add(new User(""user6"", ""user7"")); likes.add(new User(""user6"", ""user7"")); likes.add(new User(""user6"", ""user7"")); likes.add(new User(""user6"", ""user7"")); likes.add(new User(""user6"", ""user7"")); likes.add(new User(""user6"", ""user7"")); likes.add(new User(""user6"", ""user7"")); likes.add(new User(""user6"", ""user7"")); likes.add(new User(""user7"")); likes.add(new User(""user6"")); likes.add(new User(""user6"")); likes.add(new User(""user6"")); likes.add(new User(""user6"")); likes.add(new User(""user6"")); likes.add(new User(""user6"")); likes.add(new User(""user6"")); likes.add(new User(""user6"")); likes.add(new User(""user6"")); likes.add(new User(""user6"")); likes.add(new User(""user6"")); likes.add(new User(""user6"")); likes.add(new User(""user6"")); likes.add(new User(""user6"")); likes.add(new User(""user6"")); likes.add(new User(""user6"")); likes.add(new User(""user6"")); likes.add(new User(""user6"")); likes.add(new User(""user6"")); likes.add(new User(""user6"")); likes.add(new User(""user6"")); likes.add(new User(""user6"")); likes.add(new User(""user6"")); likes.add(User(""user6"")); likes.add(User(""user6"")); likes.add(User(""user6"")); likes.add(User(""user"")); likes.add(User(""user"")); likes.add(User(""user"")); likes.add(User(""user"")); likes.add(User(""user6"")); likes.add(User(""user"")); likes.add(User(""user"")); lik.add(User(""user"")); lik.add(User(""user"")); lik.add(User(""user"")); lik.add(User(""user"")); lik.add(User(""user"")); lik.add(User(""user"")); lik.add(User(""user"")); lik.add(User(""user"")); lik.add(User(""user"")); lik.add(User(""user"")); lik.add(User(""user"")); lik.add(User(""user"")); lik.add(User(""user"")); lik.add(User(""user"")); lik.add(User(""user"")); lik.add(User(""user"")); lik.add(User(""user"")); lik.add(User(""user"")); lik.add(User(""user"")); lik.add(User(""user"")); lik.add(User(""user"")); }
",1,1,1,1,"@Test(timeout = 4000)
public void test0() throws Throwable {
    Likes likes0 = new Likes();
    LinkedList<User> linkedList0 = new LinkedList<User>();
    User user0 = new User();
    linkedList0.add(user0);
    likes0.setLikesUserList(linkedList0);
    List<User> list0 = likes0.getLikesUserList();
    assertFalse(list0.isEmpty());
}",3,3,2,2,"@Test
public void testGetLikesUserList() {
    Likes likes = new Likes();
    List<User> expectedLikesUserList = new ArrayList<User>();

    User user1 = new User();
    expectedLikesUserList.add(user1);

    User user2 = new User();
    expectedLikesUserList.add(user2);

    likes.setLikesUserList(expectedLikesUserList);
    List<User> actualLikesUserList = likes.getLikesUserList();
    assertEquals(expectedLikesUserList, actualLikesUserList);
}",3,3,3,3
"public void setCount(int count) {
    this.count = count;
}","@Test public void testSetCount() throws Exception { likes.setCount(1); }
",2,2,2,2,"@Test(timeout = 4000)
public void test1() throws Throwable {
    Likes likes0 = new Likes();
    likes0.setCount(2249);
    int int0 = likes0.getCount();
    assertEquals(2249, int0);
}",3,3,3,3,"    @Test
    public void testSetCount() {
        Likes likes = new Likes();
        int count = 5;
        
        likes.setCount(count);
        
        assertEquals(count, likes.getCount());
    }",3,3,3,3
"public int getCount() {
    return count;
}","@Test public void testGetCount() { assertEquals(1, likes.getCount()); likes.setCount(2); likes.setCount(3); likes.setCount(4); likes.setCount(5); likes.setCount(6); likes.setCount(7); likes.setCount(8); likes.setCount(8); likes.setCount(8); likes.setCount(8); likes.setCount(8); likes.setCount(9); likes.setCount(9); likes.setCount(9); likes.setCount(9); likes.setCount(9); likes.setCount(9); likes.setCount(9); likes.setCount(9); likes.setCount(9); likes.setCount(9); likes.setCount(9); likes.setCount(9); likes.setCount(9); likes.setCount(9); likes.setCount(9); likes.setCount(9); likes.setCount(9); likes.setCount(9); likes.setCount(9); likes.setCount(9); likes.setCount(9); likes.setCount(9); likes.setCount(9); likes.setCount(9); likes.setCount(9); likes.setCount(9); likes.setCount(9); likes.setCount(9); likes.setCount(9); likes.setCount(9); likes.setCount(9); likes.setCount(9); likes.setCount(9); likes.setCount(9); likes.setCount(9); likes.setCount(9); likes.setCount(9); likes.setCount(9); likes.setCount(9); likes.setCount(9); likes.setCount(9); likes.setCount(9); likes.setCount(9); likes.setCount(9); likes.setCount(9); likes.setCount(9); likes.setCount(9); likes.setCount(9); likes.setCount(9); likes.setCount(9); likes.setCount(9); likes.setCount(9); likes.setCount(9); likes.setCount(9); likes.setCount(9); likes.setCount(9); likes.setCount(9); likes.setCount(9); likes.setCount(9); likes.setCount(9); likes.setCount(9); }
",1,1,1,1,"@Test(timeout = 4000)
public void test1() throws Throwable {
    Likes likes0 = new Likes();
    likes0.setCount(2249);
    int int0 = likes0.getCount();
    assertEquals(2249, int0);
}",3,3,3,3,"    @Test
    public void testGetCount() {
        Likes likes = new Likes();
        int expectedCount = 0;
        
        int actualCount = likes.getCount();
        
        assertEquals(expectedCount, actualCount);
    }",3,3,3,3
"@Override
public String toString() {
    return String.format(""Likes [count=%s, likesUserList=%s]"", count, likesUserList);
}",,1,1,1,1,"@Test(timeout = 4000)
public void test5() throws Throwable {
    Likes likes0 = new Likes();
    String string0 = likes0.toString();
    assertEquals(""Likes [count=0, likesUserList=null]"", string0);
}",3,3,3,3,"@Test
public void testToString() {
    Likes likes = new Likes();
    likes.setCount(0);
    likes.setLikesUserList(null);
    
    String expected = ""Likes [count=0, likesUserList=null]"";
    String actual = likes.toString();
    
    assertEquals(expected, actual);
}",3,3,3,3
"public void setWidth(int width) {
    this.width = width;
}","@Test public void setWidth() { VideoData videoData = new VideoData(); videoData.setWidth(100); assertEquals(100, videoData.getWidth()); }
",3,3,3,3,"@Test(timeout = 4000)
public void test0() throws Throwable {
    VideoData videoData0 = new VideoData();
    videoData0.setWidth(3);
    int int0 = videoData0.getWidth();
    assertEquals(3, int0);
}",3,3,3,3,"    @Test
    public void testSetWidth() {
        // Create a new instance of VideoData
        VideoData videoData = new VideoData();

        // Set the initial width
        int initialWidth = 100;
        videoData.setWidth(initialWidth);

        // Verify that the width is set correctly
        assertEquals(initialWidth, videoData.getWidth());

        // Set a new width
        int newWidth = 200;
        videoData.setWidth(newWidth);

        // Verify that the width is updated correctly
        assertEquals(newWidth, videoData.getWidth());
    }",3,3,3,3
"public int getWidth() {
    return width;
}",,1,1,1,1,"@Test(timeout = 4000)
public void test0() throws Throwable {
    VideoData videoData0 = new VideoData();
    videoData0.setWidth(3);
    int int0 = videoData0.getWidth();
    assertEquals(3, int0);
}",3,3,3,3,"    @Test
    public void testGetWidth() {
        // Create a VideoData object
        VideoData videoData = new VideoData();
        
        // Set the width value
        videoData.setWidth(1920);
        
        // Retrieve the width value using the getWidth() method
        int width = videoData.getWidth();
        
        // Assert that the retrieved width value is equal to the expected width value
        assertEquals(1920, width);
    }",3,3,3,3
"public void setUrl(String url) {
    this.url = url;
}",,1,1,1,1,"@Test(timeout = 4000)
public void test2() throws Throwable {
    VideoData videoData0 = new VideoData();
    videoData0.setUrl(""VideoData [videoWidth=0, videoHeight=2, videoUrl=null]"");
    String string0 = videoData0.getUrl();
    assertEquals(""VideoData [videoWidth=0, videoHeight=2, videoUrl=null]"", string0);
}",3,2,3,3,"    @Test
    public void testSetUrl() {
        // Create an instance of VideoData
        VideoData videoData = new VideoData();

        // Set the URL using the setUrl method
        String url = ""https://example.com/video.mp4"";
        videoData.setUrl(url);

        // Verify that the URL has been set correctly
        assertEquals(url, videoData.getUrl());
    }",3,3,3,3
"public String getUrl() {
    return url;
}",,1,1,1,1,"@Test(timeout = 4000)
public void test2() throws Throwable {
    VideoData videoData0 = new VideoData();
    videoData0.setUrl(""VideoData [videoWidth=0, videoHeight=2, videoUrl=null]"");
    String string0 = videoData0.getUrl();
    assertEquals(""VideoData [videoWidth=0, videoHeight=2, videoUrl=null]"", string0);
}",3,3,3,3,"    @Test
    public void testGetUrl() {
        // Create an instance of VideoData
        VideoData videoData = new VideoData();
        
        // Set the URL for the video data
        videoData.setUrl(""https://example.com/video.mp4"");
        
        // Retrieve the URL using the getUrl() method
        String url = videoData.getUrl();
        
        // Assert that the retrieved URL matches the expected URL
        assertEquals(""https://example.com/video.mp4"", url);
    }",3,3,3,3
"public void setHeight(int height) {
    this.height = height;
}","@Test public void testSetHeight() { VideoData videoData = new VideoData(); videoData.setHeight(100); assertEquals(100, videoData.getHeight()); }
",3,3,3,3,"@Test(timeout = 4000)
public void test4() throws Throwable {
    VideoData videoData0 = new VideoData();
    videoData0.setHeight(3);
    int int0 = videoData0.getHeight();
    assertEquals(3, int0);
}",3,3,3,3,"    @Test
    public void testSetHeight() {
        // Create a new instance of VideoData
        VideoData videoData = new VideoData();

        // Set the height to a specific value
        int height = 720;
        videoData.setHeight(height);

        // Verify that the height has been updated correctly
        assertEquals(height, videoData.getHeight());
    }",3,3,3,3
"public int getHeight() {
    return height;
}",,1,1,1,1,"@Test(timeout = 4000)
public void test4() throws Throwable {
    VideoData videoData0 = new VideoData();
    videoData0.setHeight(3);
    int int0 = videoData0.getHeight();
    assertEquals(3, int0);
}",3,3,3,3,"    @Test
    public void testGetHeight() {
        // Create a new instance of VideoData
        VideoData videoData = new VideoData();

        // Set the height attribute to a specific value
        int expectedHeight = 720;
        videoData.setHeight(expectedHeight);

        // Call the getHeight() method and store the returned value
        int actualHeight = videoData.getHeight();

        // Assert that the returned value matches the expected value
        assertEquals(expectedHeight, actualHeight);
    }",3,3,3,3
"@Override
public String toString() {
    return String.format(""VideoData [videoWidth=%d, videoHeight=%d, videoUrl=%s]"", width, height, url);
}",,1,1,1,1,"@Test(timeout = 4000)
public void test8() throws Throwable {
    VideoData videoData0 = new VideoData();
    String string0 = videoData0.toString();
    assertEquals(""VideoData [videoWidth=0, videoHeight=0, videoUrl=null]"", string0);
}",3,3,3,3,"@Test
public void testToString() {
    // Create a VideoData object with sample values
    VideoData videoData = new VideoData();
    videoData.setWidth(1920);
    videoData.setHeight(1080);
    videoData.setUrl(""https://example.com/video.mp4"");

    // Call the toString() method
    String result = videoData.toString();

    // Verify that the returned string contains the expected values
    assertTrue(result.contains(""videoWidth=1920""));
    assertTrue(result.contains(""videoHeight=1080""));
    assertTrue(result.contains(""videoUrl=https://example.com/video.mp4""));
}",3,3,3,3
"public void setStandardResolution(VideoData standardResolution) {
    this.standardResolution = standardResolution;
}","@Test public void testSetStandardResolution() throws Exception { VideoData standardResolution = new VideoData(); standardResolution.setId(1); standardResolution.setId(2); standardResolution.setId(3); standardResolution.setId(4); standardResolution.setId(5); standardResolution.setId(6); standardResolution.setId(7); standardResolution.setId(8); standardResolution.setId(9); standardResolution.setId(9); standardResolution.setId(9); standardResolution.setId(9); standardResolution.setId(9); standardResolution.setId(9); standardResolution.setId(9); standardResolution.setId(9); standardResolution.setId(9); standardResolution.setId(9); standardResolution.setId(9); standardResolution.setId(9); standardResolution.setId(9); standardResolution.setId(9); standardResolution.setId(9); standardResolution.setId(9); standardResolution.setId(9); standardResolution.setId(9); standardResolution.setId(9); standardResolution.setId(9); standardResolution.setId(9); standardResolution.setId(9); standardResolution.setId(9); standardResolution.setId(9); standardResolution.setId(9); standardResolution.setId(9); standardResolution.setId(9); standardResolution.setId(9); standardResolution.setId(9); standardResolution.setId(9); standardResolution.setId(9); standardResolution.setId(9); standardResolution.setId(9); standardResolution.setId(9); standardResolution.setId(9); standardResolution.setId(9); standardResolution.setId(9); standardResolution.setId(9); standardResolution.setId(9); standardResolution.setId(9); standardResolution.setId(9); standardResolution.setId(9); standardResolution.setId(9); standardResolution.setId(9); standardResolution.setId(9); standardResolution.setId(9); standardResolution.setId(9); standardResolution.setId(9); standardResolution.setId(9); standardResolution.setId(9); standardResolution.setId(9); standardResolution.setId(9); standardResolution.setId(9); standardResolution.setId(9); standardResolution.setId(9); standardResolution.setId(9); standardResolution.setId(9); standardResolution.setId(9); standardResolution.setId(9); standardResolution.setId(9); }
",1,1,1,1,"@Test(timeout = 4000)
public void test00() throws Throwable {
    Videos videos0 = new Videos();
    VideoData videoData0 = new VideoData();
    videos0.setStandardResolution(videoData0);
    videoData0.setWidth(886);
    VideoData videoData1 = videos0.getStandardResolution();
    assertSame(videoData1, videoData0);
}",3,3,3,3,"    @Test
    public void testSetStandardResolution() {
        // Create a Videos object
        Videos videos = new Videos();

        // Create a VideoData object for standard resolution
        VideoData standardResolution = new VideoData();

        // Set the standard resolution using the setStandardResolution method
        videos.setStandardResolution(standardResolution);

        // Verify that the standard resolution has been set correctly
        assertEquals(standardResolution, videos.getStandardResolution());
    }",3,3,3,3
"public VideoData getStandardResolution() {
    return standardResolution;
}","@Test public void testGetStandardResolution() { VideoData videoData = video.getStandardResolution(); assertEquals(videoData.getStandardResolution().getType(), VideoData.Type.VIDEO); }
",1,1,1,1,"@Test(timeout = 4000)
public void test00() throws Throwable {
    Videos videos0 = new Videos();
    VideoData videoData0 = new VideoData();
    videos0.setStandardResolution(videoData0);
    videoData0.setWidth(886);
    VideoData videoData1 = videos0.getStandardResolution();
    assertSame(videoData1, videoData0);
}",3,3,3,3,"    @Test
    public void testGetStandardResolution() {
        // Create a Videos object
        Videos videos = new Videos();

        // Create a VideoData object for standard resolution
        VideoData standardResolution = new VideoData();

        // Set the standard resolution video data in the Videos object
        videos.setStandardResolution(standardResolution);

        // Retrieve the standard resolution video data using the getStandardResolution() method
        VideoData retrievedStandardResolution = videos.getStandardResolution();

        // Assert that the retrieved standard resolution video data is equal to the original standard resolution video data
        assertEquals(standardResolution, retrievedStandardResolution);
    }",3,3,3,3
"public void setLowResolution(VideoData lowResolution) {
    this.lowResolution = lowResolution;
}","@Test public void testSetLowResolution() { VideoData lowResolution = new VideoData(); video.setLowResolution(lowResolution); assertEquals(lowResolution, video.getLowResolution()); }
",3,3,3,3,"@Test(timeout = 4000)
public void test04() throws Throwable {
    Videos videos0 = new Videos();
    VideoData videoData0 = new VideoData();
    videoData0.setWidth(1270);
    videos0.setLowResolution(videoData0);
    VideoData videoData1 = videos0.getLowResolution();
    assertSame(videoData1, videoData0);
}",3,3,3,3,"    @Test
    public void testSetLowResolution() {
        // Create a new instance of Videos
        Videos videos = new Videos();

        // Create a new instance of VideoData
        VideoData lowResolution = new VideoData();

        // Set the low-resolution video data using the setLowResolution method
        videos.setLowResolution(lowResolution);

        // Verify that the low-resolution video data is set correctly
        assertEquals(lowResolution, videos.getLowResolution());
    }",3,3,3,3
"public VideoData getLowResolution() {
    return lowResolution;
}","@Test public void testGetLowResolution() { VideoData videoData = video.getLowResolution(); assertEquals(videoData.getLowResolution(), videoData.getLowResolution()); }
",3,3,2,2,"@Test(timeout = 4000)
public void test04() throws Throwable {
    Videos videos0 = new Videos();
    VideoData videoData0 = new VideoData();
    videoData0.setWidth(1270);
    videos0.setLowResolution(videoData0);
    VideoData videoData1 = videos0.getLowResolution();
    assertSame(videoData1, videoData0);
}",3,3,3,3,"    @Test
    public void testGetLowResolution() {
        // Create a Videos object
        Videos videos = new Videos();

        // Create a VideoData object for low resolution
        VideoData lowResolution = new VideoData();

        // Set the low resolution video data in the Videos object
        videos.setLowResolution(lowResolution);

        // Retrieve the low resolution video data using the getLowResolution() method
        VideoData retrievedLowResolution = videos.getLowResolution();

        // Assert that the retrieved low resolution video data is equal to the original low resolution video data
        assertEquals(lowResolution, retrievedLowResolution);
    }",3,3,3,3
"public void setText(String text) {
    this.text = text;
}",,1,1,1,1,"@Test(timeout = 4000)
public void test00() throws Throwable {
    Caption caption0 = new Caption();
    caption0.setText(""5 ~jrEY>R{v}NL"");
    String string0 = caption0.getText();
    assertEquals(""5 ~jrEY>R{v}NL"", string0);
}",3,3,3,3,"    @Test
    public void testSetText() {
        // Create a new instance of Caption
        Caption caption = new Caption();

        // Set the text using the setText method
        String expectedText = ""Hello, world!"";
        caption.setText(expectedText);

        // Verify that the text has been set correctly
        String actualText = caption.getText();
        assertEquals(expectedText, actualText);
    }",3,3,3,3
"public String getText() {
    return text;
}",,1,1,1,1,"@Test(timeout = 4000)
public void test00() throws Throwable {
    Caption caption0 = new Caption();
    caption0.setText(""5 ~jrEY>R{v}NL"");
    String string0 = caption0.getText();
    assertEquals(""5 ~jrEY>R{v}NL"", string0);
}",3,3,3,3,"    @Test
    public void testGetText() {
        // Create a Caption object
        Caption caption = new Caption();
        
        // Set the text value
        String expectedText = ""Sample text"";
        caption.setText(expectedText);
        
        // Retrieve the text value using getText()
        String actualText = caption.getText();
        
        // Assert that the retrieved text value matches the expected text value
        assertEquals(expectedText, actualText);
    }",3,3,3,3
"public void setId(String id) {
    this.id = id;
}",,1,1,1,1,"@Test(timeout = 4000)
public void test01() throws Throwable {
    Caption caption0 = new Caption();
    caption0.setId(""m}vDm=29J? ~>THdr"");
    String string0 = caption0.getId();
    assertEquals(""m}vDm=29J? ~>THdr"", string0);
}",3,3,3,3,"    @Test
    public void testSetId() {
        // Create a new Caption object
        Caption caption = new Caption();

        // Set the id attribute using the setId method
        String id = ""12345"";
        caption.setId(id);

        // Verify that the id attribute has been set correctly
        assertEquals(id, caption.getId());
    }",3,3,3,3
"public String getId() {
    return id;
}",,1,1,1,1,"@Test(timeout = 4000)
public void test01() throws Throwable {
    Caption caption0 = new Caption();
    caption0.setId(""m}vDm=29J? ~>THdr"");
    String string0 = caption0.getId();
    assertEquals(""m}vDm=29J? ~>THdr"", string0);
}",3,3,3,3,"    @Test
    public void testGetId() {
        // Create a Caption object
        Caption caption = new Caption();
        
        // Set the id attribute
        String expectedId = ""123"";
        caption.setId(expectedId);
        
        // Call the getId() method and assert the returned value
        String actualId = caption.getId();
        assertEquals(expectedId, actualId);
    }",3,3,3,3
"public void setCreatedTime(String createdTime) {
    this.createdTime = createdTime;
}",,1,1,1,1,"@Test(timeout = 4000)
public void test03() throws Throwable {
    Caption caption0 = new Caption();
    caption0.setCreatedTime(""p;O-6clE/tECl:0.8H"");
    String string0 = caption0.getCreatedTime();
    assertEquals(""p;O-6clE/tECl:0.8H"", string0);
}",3,3,3,3,"    @Test
    public void testSetCreatedTime() {
        // Create a new instance of Caption
        Caption caption = new Caption();

        // Set the created time using the setCreatedTime method
        String createdTime = ""2021-10-01 10:00:00"";
        caption.setCreatedTime(createdTime);

        // Verify that the created time is set correctly
        assertEquals(createdTime, caption.getCreatedTime());
    }",3,3,3,3
"public String getCreatedTime() {
    return createdTime;
}",,1,1,1,1,"@Test(timeout = 4000)
public void test03() throws Throwable {
    Caption caption0 = new Caption();
    caption0.setCreatedTime(""p;O-6clE/tECl:0.8H"");
    String string0 = caption0.getCreatedTime();
    assertEquals(""p;O-6clE/tECl:0.8H"", string0);
}",3,3,3,3,"    @Test
    public void testGetCreatedTime() {
        // Create a Caption object
        Caption caption = new Caption();
        
        // Set the createdTime value
        String expectedTime = ""2021-01-01 12:00:00"";
        caption.setCreatedTime(expectedTime);
        
        // Retrieve the createdTime value using the getCreatedTime() method
        String actualTime = caption.getCreatedTime();
        
        // Assert that the retrieved value matches the expected value
        assertEquals(expectedTime, actualTime);
    }",3,3,3,3
"public FromTagData getFrom() {
    return from;
}","@Test public void getFrom() { Caption caption = new Caption(); caption.setFrom(new FromTagData()); assertEquals(caption.getFrom(), new FromTagData(new FromTagData(new FromTagData(new FromTagData(new FromTagData(new FromTagData(new FromTagData(new FromTagData(new FromTagData(new FromTagData(new FromTagData(new FromTagData(new FromTagData(new FromTagData(new FromTagData(new FromTagData(new FromTagData(new FromTagData(new FromTagData(new FromTagData(new FromTagData(new FromTagData(new FromTagData(new FromTagData(new FromTagData(new FromTagData(new FromTagData(new FromTagData(new FromTagData(new FromTagData(new FromTagData(new FromTagData(new FromTagData(new FromTagData(new FromTagData(new FromTagData(new FromTagData(new FromTagData(new FromTagData(new FromTagData(new FromTagData(new FromTagData(new FromTagData(new FromTagData(new FromTagData(new FromTagData(new FromTagData(new FromTagData(new FromTagData(new FromTagData(new FromTagData(new FromTagData(new FromTagData(new FromTagData(new FromTagData(new FromTagData(new FromTagData(new FromTagData(new FromTagData(new FromTagData(new FromTagData(new FromTagData(new FromTagData(new FromTagData(new FromTagData(new FromTagData(new FromTagData(new FromTagData(new FromTagData(new FromTagData(new FromTagData(new FromTagData(new FromTagData(new FromTagData(new FromTagData(new FromTagData(new FromTagData(new FromTagData(new FromTagData(new FromTagData(new FromTagData(new FromTagData(new FromTagData(new FromTagData.from(new FromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromTagData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.fromData.from",1,1,1,1,"@Test(timeout = 4000)
public void test07() throws Throwable {
    Caption caption0 = new Caption();
    FromTagData fromTagData0 = caption0.getFrom();
    assertNull(fromTagData0);
}",3,3,3,3,"@Test
public void testGetFrom() {
    Caption caption = new Caption();
    FromTagData expectedFrom = new FromTagData();

    expectedFrom.setId(""123456789"");
    caption.setFrom(expectedFrom);
    FromTagData actualFrom = caption.getFrom();
    assertEquals(expectedFrom, actualFrom);
}",3,3,3,3
"public void setFrom(FromTagData from) {
    this.from = from;
}","@Test public void testSetFrom() { Caption caption = new Caption(); caption.setFrom(new FromTagData()); }
",3,1,2,2,"@Test(timeout = 4000)
public void test09() throws Throwable {
    Caption caption0 = new Caption();
    FromTagData fromTagData0 = new FromTagData();
    caption0.setFrom(fromTagData0);
    FromTagData fromTagData1 = caption0.getFrom();
    assertNull(fromTagData1.getProfilePicture());
}",3,2,2,2,"    @Test
    public void testSetFrom() {
        // Create a Caption object
        Caption caption = new Caption();

        // Create a FromTagData object
        FromTagData fromTagData = new FromTagData();

        // Set the ""from"" property of the Caption object using the setFrom method
        caption.setFrom(fromTagData);

        // Verify that the ""from"" property of the Caption object is set correctly
        assertEquals(fromTagData, caption.getFrom());
    }",3,3,3,3
"public void setUsername(String username) {
    this.username = username;
}","@Test public void testSetUsername() { fromTagData.setUsername(""test""); }
",3,1,1,2,"@Test(timeout = 4000)
public void test00() throws Throwable {
    FromTagData fromTagData0 = new FromTagData();
    fromTagData0.setUsername(""zL9g"");
    String string0 = fromTagData0.getUsername();
    assertEquals(""zL9g"", string0);
}",3,3,3,3,"    @Test
    public void testSetUsername() {
        // Create an instance of FromTagData
        FromTagData tagData = new FromTagData();

        // Set the username using the setUsername method
        String username = ""testUser"";
        tagData.setUsername(username);

        // Verify that the username property has been set correctly
        assertEquals(username, tagData.getUsername());
    }",3,3,3,3
"public String getUsername() {
    return username;
}","@Test public void testGetUsername() throws Exception { String result = fromTagData.getUsername(); assertNotNull(result); }
",3,3,2,2,"@Test(timeout = 4000)
public void test00() throws Throwable {
    FromTagData fromTagData0 = new FromTagData();
    fromTagData0.setUsername(""zL9g"");
    String string0 = fromTagData0.getUsername();
    assertEquals(""zL9g"", string0);
}",3,3,3,3,"    @Test
    public void testGetUsername() {
        // Create an instance of FromTagData
        FromTagData tagData = new FromTagData();

        // Set the username using the setUsername() method
        tagData.setUsername(""john_doe"");

        // Call the getUsername() method and assert that it returns the expected username
        assertEquals(""john_doe"", tagData.getUsername());
    }",3,3,3,3
"public void setProfilePicture(String profilePicture) {
    this.profilePicture = profilePicture;
}","@Test public void testSetProfilePicture() throws Exception { fromTagData.setProfilePicture(""""); }
",2,1,1,1,"@Test(timeout = 4000)
public void test02() throws Throwable {
    FromTagData fromTagData0 = new FromTagData();
    fromTagData0.setProfilePicture(""GOVl:-=@x^Bh_"");
    String string0 = fromTagData0.getProfilePicture();
    assertEquals(""GOVl:-=@x^Bh_"", string0);
}",3,3,3,3,"    @Test
    public void testSetProfilePicture() {
        // Create an instance of FromTagData
        FromTagData data = new FromTagData();

        // Set the profile picture using a sample image file path or URL
        String profilePicture = ""https://example.com/profile.jpg"";
        data.setProfilePicture(profilePicture);

        // Verify that the profile picture is updated correctly
        assertEquals(profilePicture, data.getProfilePicture());
    }",3,3,3,3
"public String getProfilePicture() {
    return profilePicture;
}","@Test public void testGetProfilePicture() throws Exception { fromTagData.setProfilePicture(""test""); assertEquals(""test"", fromTagData.getProfilePicture()); }
",3,3,3,3,"@Test(timeout = 4000)
public void test02() throws Throwable {
    FromTagData fromTagData0 = new FromTagData();
    fromTagData0.setProfilePicture(""GOVl:-=@x^Bh_"");
    String string0 = fromTagData0.getProfilePicture();
    assertEquals(""GOVl:-=@x^Bh_"", string0);
}",3,3,3,3,"    @Test
    public void testGetProfilePicture() {
        // Create an instance of FromTagData
        FromTagData tagData = new FromTagData();

        // Set the profile picture
        String profilePicture = ""https://example.com/profile.jpg"";
        tagData.setProfilePicture(profilePicture);

        // Retrieve the profile picture using the getProfilePicture() method
        String retrievedProfilePicture = tagData.getProfilePicture();

        // Assert that the retrieved profile picture matches the expected profile picture
        assertEquals(profilePicture, retrievedProfilePicture);
    }",3,3,3,3
"boolean isInTheSameRegionAs(Point otherPoint) {
    return this.region == otherPoint.region;
}","@Test public void testIsInTheSameRegionAs() { Point point = new Point(); assertTrue(point.isInTheSameRegionAs(point)); }
",3,3,3,3,"@Test(timeout = 4000)
public void test00() throws Throwable {
    CohenSutherlandClipping cohenSutherlandClipping0 = new CohenSutherlandClipping();
    CohenSutherlandClipping.Point cohenSutherlandClipping_Point0 = cohenSutherlandClipping0.new Point(85.583519889645, 85.583519889645);
    CohenSutherlandClipping.Point cohenSutherlandClipping_Point1 = cohenSutherlandClipping0.new Point(85.583519889645, (-1224.317));
    boolean boolean0 = cohenSutherlandClipping_Point1.isInTheSameRegionAs(cohenSutherlandClipping_Point0);
    assertFalse(boolean0);
}",2,1,3,3,"@Test
public void testIsInTheSameRegionAs() {
    CohenSutherlandClipping cohenSutherlandClipping = new CohenSutherlandClipping();
    CohenSutherlandClipping.Point point1 = cohenSutherlandClipping.new Point(0, 0);
    CohenSutherlandClipping.Point point2 = cohenSutherlandClipping.new Point(0, 0);
    assertTrue(point1.isInTheSameRegionAs(point2));
    CohenSutherlandClipping.Point point3 = cohenSutherlandClipping.new Point(0, 0);
    CohenSutherlandClipping.Point point4 = cohenSutherlandClipping.new Point(0, 0);
    assertTrue(point3.isInTheSameRegionAs(point4));
}",2,2,3,3
"public boolean isSpanning() {
    return spanning;
}","@Test public void testIsSpanning() { assertTrue(cell.isSpanning()); }
",2,2,2,2,"@Test(timeout = 4000)
public void test00() throws Throwable {
    Cell cell0 = new Cell((-1540.676F), (-1540.676F), 801.6F, 801.6F);
    assertFalse(cell0.isSpanning());
    cell0.setSpanning(true);
    boolean boolean0 = cell0.isSpanning();
    assertTrue(boolean0);
}",3,3,3,3,"    @Test
    public void testIsSpanning() {
        // Create a Cell object
        Cell cell = new Cell(0, 0, 10, 10);

        // Verify that the initial value of isSpanning is false
        assertFalse(cell.isSpanning());

        // Set isSpanning to true
        cell.setSpanning(true);

        // Verify that isSpanning is now true
        assertTrue(cell.isSpanning());

        // Set isSpanning back to false
        cell.setSpanning(false);

        // Verify that isSpanning is false again
        assertFalse(cell.isSpanning());
    }",3,3,3,3
"public void setSpanning(boolean spanning) {
    this.spanning = spanning;
}","@Test public void testSetSpanning() { Cell cell = new Cell(0, 0, 0, 0); cell.setSpanning(true); assertTrue(cell.isSpanning()); }
",3,2,3,3,"@Test(timeout = 4000)
public void test00() throws Throwable {
    Cell cell0 = new Cell((-1540.676F), (-1540.676F), 801.6F, 801.6F);
    assertFalse(cell0.isSpanning());
    cell0.setSpanning(true);
    boolean boolean0 = cell0.isSpanning();
    assertTrue(boolean0);
}",3,3,3,3,"    @Test
    public void testSetSpanning() {
        // Create a new Cell object
        Cell cell = new Cell(0, 0, 10, 10);

        // Verify that the initial value of spanning is false
        assertFalse(cell.isSpanning());

        // Set spanning to true
        cell.setSpanning(true);

        // Verify that the value of spanning is now true
        assertTrue(cell.isSpanning());

        // Set spanning back to false
        cell.setSpanning(false);

        // Verify that the value of spanning is now false again
        assertFalse(cell.isSpanning());
    }",3,3,3,3
"@Override
public String getText(boolean useLineReturns) {
    if (this.textElements.size() == 0) {
        return """";
    }
    StringBuilder sb = new StringBuilder();
    this.textElements.sort(Rectangle.ILL_DEFINED_ORDER);
    double curTop = this.textElements.get(0).getTop();
    for (TextChunk tc : this.textElements) {
        if (useLineReturns && tc.getTop() > curTop) {
            sb.append('\r');
        }
        sb.append(tc.getText());
        curTop = tc.getTop();
    }
    return sb.toString().trim();
}","@Test public void testGetText() { Cell cell = new Cell(0, 0, 0, 0); assertEquals("""", cell.getText()); }
",3,2,1,2,"@Test(timeout = 4000)
public void test01() throws Throwable {
    Point point0 = new Point();
    Cell cell0 = new Cell(point0, point0);
    cell0.textElements = null;
    // Undeclared exception!
    try {
        cell0.getText(true);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        // 
        // no message in exception (getMessage() returned null)
        // 
        verifyException(""technology.tabula.Cell"", e);
    }
}",2,1,1,,"@Test(timeout = 4000)
public void testGetText() throws Throwable {
    // Create a Cell object with textElements set to null
    Cell cell = new Cell(new Point(), new Point());
    cell.textElements = null;

    // Verify that a NullPointerException is thrown
    try {
        cell.getText(true);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        // Verify that the exception is from the correct class
        verifyException(""technology.tabula.Cell"", e);
    }
}",2,1,1,1
"@Override
public String getText(boolean useLineReturns) {
    if (this.textElements.size() == 0) {
        return """";
    }
    StringBuilder sb = new StringBuilder();
    this.textElements.sort(Rectangle.ILL_DEFINED_ORDER);
    double curTop = this.textElements.get(0).getTop();
    for (TextChunk tc : this.textElements) {
        if (useLineReturns && tc.getTop() > curTop) {
            sb.append('\r');
        }
        sb.append(tc.getText());
        curTop = tc.getTop();
    }
    return sb.toString().trim();
}","@Test public void testGetText() { Cell cell = new Cell(0, 0, 0, 0); assertEquals("""", cell.getText()); }
",3,2,1,2,"@Test(timeout = 4000)
public void test01() throws Throwable {
    Point point0 = new Point();
    Cell cell0 = new Cell(point0, point0);
    cell0.textElements = null;
    // Undeclared exception!
    try {
        cell0.getText(true);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        // 
        // no message in exception (getMessage() returned null)
        // 
        verifyException(""technology.tabula.Cell"", e);
    }
}",2,1,1,1,"    @Test
    public void testGetText() {
        // Create a Cell object
        Cell cell = new Cell(0, 0, 10, 10);

        // Test getText() method
        String expectedText = """";
        String actualText = cell.getText();
        assertEquals(expectedText, actualText);
    }",3,2,2,2
"public boolean isPlaceholder() {
    return placeholder;
}","@Test public void testIsPlaceholder() { assertTrue(cell.isPlaceholder()); }
",3,2,2,2,"@Test(timeout = 4000)
public void test04() throws Throwable {
    Cell cell0 = new Cell(1.0F, 1.0F, 1.0F, 1.0F);
    LinkedList<TextChunk> linkedList0 = new LinkedList<TextChunk>();
    TextChunk textChunk0 = new TextChunk(3329.5376F, 612.87616F, 0.5F, (-89.0F));
    linkedList0.add(textChunk0);
    TextChunk textChunk1 = new TextChunk(0.0F, 1.0F, 0.0F, 0.0F);
    linkedList0.add(textChunk1);
    cell0.setTextElements(linkedList0);
    String string0 = cell0.getText(true);
    assertEquals("""", string0);
    assertFalse(cell0.isPlaceholder());
    assertFalse(cell0.isSpanning());
}",2,2,3,3,"    @Test
    public void testIsPlaceholder() {
        // Create a Cell object
        Cell cell = new Cell(0, 0, 10, 10);

        // Verify that the initial placeholder status is false
        assertFalse(cell.isPlaceholder());

        // Set the placeholder status to true
        cell.setPlaceholder(true);

        // Verify that the placeholder status is now true
        assertTrue(cell.isPlaceholder());

        // Set the placeholder status back to false
        cell.setPlaceholder(false);

        // Verify that the placeholder status is false again
        assertFalse(cell.isPlaceholder());
    }",3,3,3,3
"public void setPlaceholder(boolean placeholder) {
    this.placeholder = placeholder;
}","@Test public void testSetPlaceholder() { Cell cell = new Cell(0, 0, 0, 0); cell.setPlaceholder(true); assertTrue(cell.isPlaceholder()); }
",3,3,3,3,"@Test(timeout = 4000)
public void test06() throws Throwable {
    Cell cell0 = new Cell(0.0F, 0.0F, (-576.0F), 0.0F);
    assertFalse(cell0.isPlaceholder());
    cell0.setPlaceholder(true);
    boolean boolean0 = cell0.isPlaceholder();
    assertTrue(boolean0);
}",3,3,3,3,"    @Test
    public void testSetPlaceholder() {
        Cell cell = new Cell(0, 0, 10, 10);
        
        // Test initial value
        assertFalse(cell.isPlaceholder());
        
        // Set placeholder to true
        cell.setPlaceholder(true);
        assertTrue(cell.isPlaceholder());
        
        // Set placeholder to false
        cell.setPlaceholder(false);
        assertFalse(cell.isPlaceholder());
    }",3,3,3,3
"@Override
public int hashCode() {
    final int prime = 31;
    int result = super.hashCode();
    result = prime * result + ((textElements == null) ? 0 : textElements.hashCode());
    return result;
}","@Test public void testHashCode() { TextChunk chunk1 = new TextChunk(0, 0, 0, 0); TextChunk chunk2 = new TextChunk(0, 0, 0, 0); Assert.assertEquals(chunk1.hashCode(), chunk2.hashCode()); Assert.assertEquals(chunk1.hashCode(), chunk2.hashCode()); Assert.assertEquals(chunk1.hashCode(), chunk2.hashCode()); Assert.assertEquals(chunk1.hashCode(), chunk2.hashCode()); Assert.assertEquals(chunk1.hashCode(), chunk2.hashCode()); Assert.assertEquals(chunk1.hashCode(), chunk2.hashCode()); Assert.assertEquals(chunk1.hashCode(), chunk2.hashCode()); Assert.assertEquals(chunk1.hashCode(), chunk2.hashCode()); Assert.assertEquals(chunk1.hashCode(), chunk2.hashCode()); Assert.assertEquals(chunk1.hashCode(), chunk2.hashCode()); Assert.assertEquals(chunk1.hashCode(), chunk2.hashCode()); Assert.assertEquals(chunk1.hashCode(), chunk2.hashCode()); }
",1,1,1,1,"@Test(timeout = 4000)
public void test02() throws Throwable {
    TextChunk textChunk0 = TextChunk.EMPTY;
    textChunk0.setRect(4139.800386453927, 2.0, 2.0, 2.0);
    textChunk0.hashCode();
}",3,1,1,1,"    @Test
    public void testHashCode() {
        // Create a TextChunk object with the same properties
        TextChunk textChunk1 = new TextChunk(1.0f, 2.0f, 3.0f, 4.0f);
        TextChunk textChunk2 = new TextChunk(1.0f, 2.0f, 3.0f, 4.0f);

        // Assert that the hash codes of the two objects are equal
        assertEquals(textChunk1.hashCode(), textChunk2.hashCode());

        // Create a TextChunk object with different properties
        TextChunk textChunk3 = new TextChunk(5.0f, 6.0f, 7.0f, 8.0f);

        // Assert that the hash codes of the two objects are not equal
        assertNotEquals(textChunk1.hashCode(), textChunk3.hashCode());
    }",3,3,3,3
"public static final Table empty() {
    return new Table("""");
}","@Test public void testEmpty() { Table table = Table.empty(); assertEquals(0, table.getRowCount()); assertEquals(0, table.getColCount()); assertEquals(0, table.getRowCount()); assertEquals(0, table.getRowCount()); assertEquals(0, table.getRowCount()); assertEquals(0, table.getRowCount()); assertEquals(0, table.getRowCount()); assertEquals(0, table.getRowCount()); assertEquals(0, table.getRowCount()); assertEquals(0, table.getRowCount()); assertEquals(0, table.getRowCount()); assertEquals(0, table.getColCount()); assertEquals(0, table.getRowCount()); assertEquals(0, table.getRowCount()); assertEquals(0, table.getRowCount()); assertEquals(0, table.getRowCount()); assertEquals(0, table.getRowCount()); assertEquals(0, table.getRowCount()); assertEquals(0, table.getRowCount()); assertEquals(0, table.getRowCount()); assertEquals(0, table.getRowCount()); assertEquals(0, table.getRowCount()); assertEquals(0, table.getRowCount()); assertEquals(0, table.getRowCount()); assertEquals(0, table.getRowCount()); assertEquals(0, table.getRowCount()); assertEquals(0, table.getRowCount()); assertEquals(0, table.getRowCount()); assertEquals(0, table.getRowCount()); assertEquals(0, table.getRowCount()); assertEquals(0, table.getRowCount()); assertEquals(0, table.getRowCount()); assertEquals(0, table.getRowCount()); assertEquals(0, table.getRowCount()); assertEquals(0, table.getRowCount()); assertEquals(0, table.getRowCount()); assertEquals(0, table.getRowCount()); assertEquals(0, table.getRowCount()); assertEquals(0, table.getRowCount()); assertEquals(0, table.getRowCount()); }
",1,1,1,1,"@Test(timeout = 4000)
public void test00() throws Throwable {
    Table table0 = Table.empty();
    assertEquals(0, table0.getPageNumber());
    table0.setPageNumber(1);
    int int0 = table0.getPageNumber();
    assertEquals(1, int0);
}",3,2,2,2,"    @Test
    public void testEmpty() {
        Table table = Table.empty();
        
        assertNotNull(table);
        assertEquals("""", table.getExtractionMethod());
        assertEquals(0, table.getRowCount());
        assertEquals(0, table.getColCount());
        assertEquals(0, table.getPageNumber());
        
        table.setPageNumber(5);
        assertEquals(5, table.getPageNumber());
    }",3,3,3,3
"public int getPageNumber() {
    return pageNumber;
}","@Test public void testGetPageNumber() { System.out.println(""getPageNumber""); Table instance = new Table(); int result = instance.getPageNumber(); Assert.assertEquals(0, result); }
",3,3,3,3,"@Test(timeout = 4000)
public void test00() throws Throwable {
    Table table0 = Table.empty();
    assertEquals(0, table0.getPageNumber());
    table0.setPageNumber(1);
    int int0 = table0.getPageNumber();
    assertEquals(1, int0);
}",3,3,3,3,"@Test
public void testGetPageNumber() {
    Table table = Table.empty();
    table.setPageNumber(5);
    int pageNumber = table.getPageNumber();
    assertEquals(5, pageNumber);
}",3,3,3,3
"public void setPageNumber(int pageNumber) {
    this.pageNumber = pageNumber;
}","@Test public void testSetPageNumber() { Table table = Table.empty(); table.setPageNumber(1); assertEquals(1, table.getPageNumber()); }
",3,3,3,3,"@Test(timeout = 4000)
public void test00() throws Throwable {
    Table table0 = Table.empty();
    assertEquals(0, table0.getPageNumber());
    table0.setPageNumber(1);
    int int0 = table0.getPageNumber();
    assertEquals(1, int0);
}",3,3,3,3,"@Test
public void testSetPageNumber() {
    Table table = Table.empty();

    int pageNumber = 5;
    table.setPageNumber(pageNumber);
    assertEquals(pageNumber, table.getPageNumber());
}",3,3,3,3
"public String getExtractionMethod() {
    return extractionMethod;
}","@Test public void testGetExtractionMethod() { System.out.println(""getExtractionMethod""); Table instance = new Table(); String result = instance.getExtractionMethod(); assertNotNull(result); }
",3,2,2,2,"@Test(timeout = 4000)
public void test02() throws Throwable {
    SpreadsheetExtractionAlgorithm spreadsheetExtractionAlgorithm0 = new SpreadsheetExtractionAlgorithm();
    Table table0 = new Table(spreadsheetExtractionAlgorithm0);
    table0.getExtractionMethod();
    assertEquals(0, table0.getColCount());
    assertEquals(0, table0.getRowCount());
    assertEquals(0, table0.getPageNumber());
}",2,1,2,2,"@Test
public void testGetExtractionMethod() {
    ExtractionAlgorithm extractionAlgorithm = new SpreadsheetExtractionAlgorithm();
    Table table = new Table(extractionAlgorithm);
    String expectedExtractionMethod = extractionAlgorithm.toString();
    
    String actualExtractionMethod = table.getExtractionMethod();
    
    assertEquals(expectedExtractionMethod, actualExtractionMethod);
}",3,2,3,3
"public int getColCount() {
    return colCount;
}","@Test public void testGetColCount() { System.out.println(""getColCount""); Table instance = new Table(); int expResult = 0; int result = instance.getColCount(); assertEquals(expResult, result); }
",3,3,3,3,"@Test(timeout = 4000)
public void test02() throws Throwable {
    SpreadsheetExtractionAlgorithm spreadsheetExtractionAlgorithm0 = new SpreadsheetExtractionAlgorithm();
    Table table0 = new Table(spreadsheetExtractionAlgorithm0);
    table0.getExtractionMethod();
    assertEquals(0, table0.getColCount());
    assertEquals(0, table0.getRowCount());
    assertEquals(0, table0.getPageNumber());
}",2,1,2,2,"@Test
public void testGetExtractionMethod() {
    ExtractionAlgorithm extractionAlgorithm = new SpreadsheetExtractionAlgorithm();
    Table table = new Table(extractionAlgorithm);
    String expectedExtractionMethod = extractionAlgorithm.toString();
    
    String actualExtractionMethod = table.getExtractionMethod();
    
    assertEquals(expectedExtractionMethod, actualExtractionMethod);
}",2,1,2,1
"public int getRowCount() {
    return rowCount;
}","@Test public void testGetRowCount() { assertEquals(0, table.getRowCount()); }
",3,3,2,2,"@Test(timeout = 4000)
public void test02() throws Throwable {
    SpreadsheetExtractionAlgorithm spreadsheetExtractionAlgorithm0 = new SpreadsheetExtractionAlgorithm();
    Table table0 = new Table(spreadsheetExtractionAlgorithm0);
    table0.getExtractionMethod();
    assertEquals(0, table0.getColCount());
    assertEquals(0, table0.getRowCount());
    assertEquals(0, table0.getPageNumber());
}",1,1,2,1,"@Test
public void testGetExtractionMethod() {
    ExtractionAlgorithm extractionAlgorithm = new SpreadsheetExtractionAlgorithm();
    Table table = new Table(extractionAlgorithm);
    String expectedExtractionMethod = extractionAlgorithm.toString();
    
    String actualExtractionMethod = table.getExtractionMethod();
    
    assertEquals(expectedExtractionMethod, actualExtractionMethod);
}",2,1,1,1
"public static <T extends Comparable<? super T>> void sort(List<T> list) {
    sort(list, QuickSort.<T>naturalOrder());
}","@Test public void testSort() { List<Integer> list = new ArrayList<Integer>(); QuickSort.sort(list); }
",3,1,1,2,"@Test(timeout = 4000)
public void test0() throws Throwable {
    Vector<Integer> vector0 = new Vector<Integer>();
    Integer integer0 = new Integer(2009);
    vector0.add(integer0);
    Integer integer1 = new Integer((-3776));
    vector0.add(integer1);
    Integer integer2 = new Integer(0);
    vector0.add(integer2);
    vector0.add(integer2);
    QuickSort.sort((List<Integer>) vector0);
    assertEquals(""[-3776, 0, 0, 2009]"", vector0.toString());
}",3,3,3,3,"    @Test
    public void testSort() {
        // Create a list of unsorted elements
        List<Integer> unsortedList = new ArrayList<>(Arrays.asList(5, 2, 8, 1, 9));

        // Call the sort method to sort the list
        QuickSort.sort(unsortedList);

        // Create a list of expected sorted elements
        List<Integer> expectedSortedList = new ArrayList<>(Arrays.asList(1, 2, 5, 8, 9));

        // Assert that the sorted list matches the expected sorted list
        assertEquals(expectedSortedList, unsortedList);
    }",3,3,3,3
"public static <T extends Comparable<? super T>> void sort(List<T> list) {
    sort(list, QuickSort.<T>naturalOrder());
}","@Test public void testSort() { List<Integer> list = new ArrayList<Integer>(); QuickSort.sort(list); }
",3,1,1,2,"@Test(timeout = 4000)
public void test0() throws Throwable {
    Vector<Integer> vector0 = new Vector<Integer>();
    Integer integer0 = new Integer(2009);
    vector0.add(integer0);
    Integer integer1 = new Integer((-3776));
    vector0.add(integer1);
    Integer integer2 = new Integer(0);
    vector0.add(integer2);
    vector0.add(integer2);
    QuickSort.sort((List<Integer>) vector0);
    assertEquals(""[-3776, 0, 0, 2009]"", vector0.toString());
}",3,3,3,3,"    @Test
    public void testSort() {
        // Create a list of integers
        List<Integer> list = new ArrayList<>();
        list.add(5);
        list.add(2);
        list.add(8);
        list.add(1);
        list.add(9);

        // Create a comparator to sort in ascending order
        Comparator<Integer> comparator = Comparator.naturalOrder();

        // Call the sort method
        QuickSort.sort(list, comparator);

        // Check if the list is sorted
        for (int i = 0; i < list.size() - 1; i++) {
            assertTrue(comparator.compare(list.get(i), list.get(i + 1)) <= 0);
        }
    }",3,2,3,3
"public void setTextElements(List<TextChunk> textChunks) {
    this.textChunks = textChunks;
}",@Test public void testSetTextElements() { Line line = new Line(); line.setTextElements(Arrays.asList(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk.TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextTextTextTextTextTextTextTextTextTextTextTextTextTextTextTextTextTextTextTextTextTextTextTextTextTextTextTextTextTextTextTextTextText,1,1,1,1,"@Test(timeout = 4000)
public void test00() throws Throwable {
    Line line0 = new Line();
    TextChunk textChunk0 = new TextChunk(236.93358F, 0.0F, 0.0F, 0.0F);
    List<TextChunk> list0 = textChunk0.squeeze((Character) null, 339);
    line0.setTextElements(list0);
    line0.addTextChunk(textChunk0);
    line0.addTextChunk(0, textChunk0);
    assertEquals(236.93358F, line0.height, 0.01F);
}",2,2,2,2,"@Test
public void testSetTextElements() {
    Line line = new Line();
    List<TextChunk> textChunks = new ArrayList<>();

    textChunks.add(new TextChunk(0.0F, 0.0F, 0.0F, 0.0F));

    textChunks.add(new TextChunk(0.0F, 0.0F, 0.0F, 0.0F));
    line.setTextElements(textChunks);
    assertEquals(textChunks, line.getTextElements());
}",3,2,2,2
"public void addTextChunk(TextChunk textChunk) {
    if (this.textChunks.isEmpty()) {
        this.setRect(textChunk);
    } else {
        this.merge(textChunk);
    }
    this.textChunks.add(textChunk);
}",@Test public void testAddTextChunk() { Line line = new Line(); line.addTextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk.TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.,1,1,1,1,"@Test(timeout = 4000)
public void test00() throws Throwable {
    Line line0 = new Line();
    TextChunk textChunk0 = new TextChunk(236.93358F, 0.0F, 0.0F, 0.0F);
    List<TextChunk> list0 = textChunk0.squeeze((Character) null, 339);
    line0.setTextElements(list0);
    line0.addTextChunk(textChunk0);
    line0.addTextChunk(0, textChunk0);
    assertEquals(236.93358F, line0.height, 0.01F);
}",3,2,2,2,"@Test
public void testAddTextChunk() {
    Line line = new Line();
    TextChunk textChunk = new TextChunk(0.0F, 0.0F, 0.0F, 0.0F);
    line.addTextChunk(textChunk);
    assertTrue(line.getTextElements().contains(textChunk));
}",3,3,3,3
"static Line removeRepeatedCharacters(Line line, Character c, int minRunLength) {
    Line rv = new Line();
    for (TextChunk t : line.getTextElements()) {
        for (TextChunk r : t.squeeze(c, minRunLength)) {
            rv.addTextChunk(r);
        }
    }
    return rv;
}",@Test public void testRemoveRepeatedCharacters() { Line line = new Line(); line.addTextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk.TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk(new TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextChunk.TextTextText.TextText.TextText.TextText.TextChunk.TextChunk.Text,1,1,1,1,"@Test(timeout = 4000)
public void test01() throws Throwable {
    Line line0 = new Line();
    TextChunk textChunk0 = new TextChunk(4684.6978F, 0.0F, 0.0F, (-1382.9923F));
    line0.addTextChunk(textChunk0);
    Character character0 = new Character('\'');
    Line line1 = Line.removeRepeatedCharacters(line0, character0, (-3689));
    assertEquals(4684.6978F, line0.y, 0.01F);
    assertTrue(line1.equals((Object) line0));
}",3,3,3,3,"@Test(timeout = 4000)
public void testRemoveRepeatedCharacters() throws Throwable {
    // Create a Line object
    Line line = new Line();
    TextChunk textChunk = new TextChunk(4684.6978F, 0.0F, 0.0F, -1382.9923F);
    line.addTextChunk(textChunk);
    
    // Define the character and minimum run length
    Character character = new Character('\'');
    int minRunLength = -3689;
    
    // Call the focal method
    Line result = Line.removeRepeatedCharacters(line, character, minRunLength);
    
    // Verify the expected behavior
    assertEquals(4684.6978F, line.y, 0.01F);
    assertTrue(result.equals(line));
}",3,3,3,3
"public List<TextChunk> getTextElements() {
    return textChunks;
}","@Test public void testGetTextElements() { Line line = new Line(); List<TextChunk> textChunks = line.getTextElements(); assertEquals(0, textChunks.size()); assertEquals(0, textChunks.get(0).getStart()); assertEquals(0, textChunks.get(1).getEnd()); assertEquals(0, textChunks.get(2).getStart()); assertEquals(0, textChunks.get(3).getStart()); assertEquals(0, textChunks.get(4).getStart()); assertEquals(0, textChunks.get(5).getStart()); assertEquals(0, textChunks.get(6).getStart()); assertEquals(0, textChunks.get(7).getStart()); assertEquals(0, textChunks.get(8).getStart()); assertEquals(0, textChunks.get(9).getStart()); assertEquals(0, textChunks.get(9).getStart()); assertEquals(0, textChunks.get(9).getStart()); assertEquals(0, textChunks.get(9).getStart()); assertEquals(0, textChunks.get(9).getStart()); assertEquals(0, textChunks.get(9).getStart()); assertEquals(0, textChunks.get(9).getStart()); assertEquals(0, textChunks.get(9).getStart()); }
",1,1,1,1,"@Test(timeout = 4000)
public void test05() throws Throwable {
    Line line0 = new Line();
    line0.setTextElements((List<TextChunk>) null);
    List<TextChunk> list0 = line0.getTextElements();
    assertNull(list0);
}",3,2,2,2,"@Test(timeout = 4000)
public void testGetTextElements() throws Throwable {
    // Create a new Line object
    Line line = new Line();
    
    // Set the textChunks field to null
    line.textChunks = null;
    
    // Call the getTextElements() method
    List<TextChunk> result = line.getTextElements();
    
    // Assert that the result is null
    assertNull(result);
}",3,3,3,3
"public static float[] filter(float[] data, float alpha) {
    float[] rv = new float[data.length];
    rv[0] = data[0];
    for (int i = 1; i < data.length; i++) {
        rv[i] = rv[i - 1] + alpha * (data[i] - rv[i - 1]);
    }
    return rv;
}","@Test public void testFilter() { float[] data = new float[]{1.0f, 2.0f, 3.0f, 4.0f, 5.0f, 6.0f, 7.0f, 8.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 9.0f, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",1,1,1,1,"@Test(timeout = 4000)
public void test03() throws Throwable {
    float[] floatArray0 = new float[7];
    floatArray0[0] = (-418.7F);
    float[] floatArray1 = ProjectionProfile.filter(floatArray0, 1905.514F);
    assertArrayEquals(new float[] { (-418.7F), 797420.06F, (-1.51869773E9F), 2.89238129E12F, (-5.5085812E15F), 1.049117E19F, (-1.9980582E22F) }, floatArray1, 0.01F);
}",3,3,3,3,"    @Test
    public void testFilter() {
        float[] data = {1.0f, 2.0f, 3.0f, 4.0f, 5.0f};
        float alpha = 0.5f;
        
        float[] expected = {1.0f, 1.5f, 2.25f, 3.125f, 4.0625f};
        float[] result = ProjectionProfile.filter(data, alpha);
        
        assertArrayEquals(expected, result, 0.001f);
    }",3,3,3,3
"public R getRight() {
    return this.right;
}","@Test public void testGetRight() throws Exception { Pair<Integer, Integer> pair = new Pair<Integer, Integer>(1, 2); assertEquals(2, pair.getRight().intValue()); }
",3,2,3,3,"@Test(timeout = 4000)
public void test1() throws Throwable {
    Pair<Integer, Integer> pair0 = new Pair<Integer, Integer>((Integer) null, (Integer) null);
    Integer integer0 = pair0.getRight();
    assertNull(integer0);
}",3,3,3,3,"@Test
public void testGetRight() {
    Integer expectedRight = 10;

    Pair<Integer, Integer> pair = new Pair<>(null, expectedRight);

    Integer actualRight = pair.getRight();
    assertEquals(expectedRight, actualRight);
}",3,3,3,3
"public static List<Ruling> collapseOrientedRulings(List<Ruling> lines) {
    return collapseOrientedRulings(lines, COLINEAR_OR_PARALLEL_PIXEL_EXPAND_AMOUNT);
}","@Test public void testCollapseOrientedRulings() { List<Ruling> rulings = Arrays.asList(new Ruling(0, 0, 0, 0), new Ruling(0, 0, 0, 0), new Ruling(0, 0, 0, 0), new Ruling(0, 0, 0, 0), new Ruling(0, 0, 0, 0), new Ruling(0, 0, 0, 0), new Ruling(0, 0, 0, 0), new Ruling(0, 0, 0, 0), new Ruling(0, 0, 0, 0), new Ruling(0, 0, 0, 0), new Ruling(0, 0, 0, 0), new Ruling(0, 0, 0, 0), new Ruling(0, 0, 0, 0), new Ruling(0, 0, 0, 0), new Ruling(0, 0, 0, 0), new Ruling(0, 0, 0, 0), new Ruling(0, 0, 0, 0), new Ruling(0, 0, 0), new Ruling(0, 0, 0), new Ruling(0, 0, 0), new Ruling(0, 0, 0), new Ruling(0, 0, 0), new Ruling(0, 0, 0), new Ruling(0, 0, 0), new Ruling(0, 0, 0), new Ruling(0, 0, 0), new Ruling(0, 0, 0), new Ruling(0, 0, 0, 0))); }
",1,1,1,1,"@Test(timeout = 4000)
public void test00() throws Throwable {
    LinkedList<Ruling> linkedList0 = new LinkedList<Ruling>();
    linkedList0.offerFirst((Ruling) null);
    linkedList0.offerFirst((Ruling) null);
    // Undeclared exception!
    try {
        Ruling.collapseOrientedRulings((List<Ruling>) linkedList0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        // 
        // no message in exception (getMessage() returned null)
        // 
        verifyException(""technology.tabula.Ruling$4"", e);
    }
}",2,1,1,1,"@Test
public void testCollapseOrientedRulings() {
    List<Ruling> lines = new LinkedList<>();

    List<Ruling> result = Ruling.collapseOrientedRulings(lines);
    assertNotNull(result);
}",3,3,3,3
"public RectangularTextContainer<T> merge(RectangularTextContainer<T> other) {
    if (compareTo(other) < 0) {
        this.getTextElements().addAll(other.getTextElements());
    } else {
        this.getTextElements().addAll(0, other.getTextElements());
    }
    super.merge(other);
    return this;
}","@Test public void testMerge() { RectangularTextContainer<String> container = new RectangularTextContainer<String>(0, 0, 0, 0); RectangularTextContainer<String> merged = container.merge(new RectangularTextContainer<String>(0, 0, 0, 0)); assertEquals(0, merged.getTextElements().size()); assertEquals(0, merged.getTextElements().size()); assertEquals(0, merged.getTextElements().size()); assertEquals(0, merged.getTextElements().size()); assertEquals(0, merged.getTextElements().get(0).getWidth()); assertEquals(0, merged.getTextElements().get(0).getHeight()); assertEquals(0, merged.getTextElements().get(0).getWidth()); assertEquals(0, merged.getTextElements().get(0).getHeight()); assertEquals(0, merged.getTextElements().get(0).getWidth()); assertEquals(0, merged.getTextElements().get(0).getWidth()); assertEquals(0, merged.getTextElements().get(0).getHeight()); assertEquals(0, merged.getTextElements().get(0).getWidth()); assertEquals(0, merged.getTextElements().get(0).getHeight()); assertEquals(0, merged.getTextElements().get(0).getWidth()); assertEquals(0, merged.getTextElements().get(0).getHeight()); assertEquals(0, merged.getTextElements().get(0).getHeight()); }
",2,1,1,1,"@Test(timeout = 4000)
public void test00() throws Throwable {
    RectangularTextContainer<RectangularTextContainer<TextElement>> rectangularTextContainer0 = new RectangularTextContainer<RectangularTextContainer<TextElement>>(1.0F, 0.0F, 0.0F, 1.0F);
    RectangularTextContainer<RectangularTextContainer<TextElement>> rectangularTextContainer1 = new RectangularTextContainer<RectangularTextContainer<TextElement>>((-198.57213F), 1.0F, (-1133.79F), 0.0F);
    rectangularTextContainer0.merge(rectangularTextContainer1);
    assertEquals((-198.57213F), rectangularTextContainer0.y, 0.01F);
}",2,3,3,3,"@Test(timeout = 4000)
public void testMerge() throws Throwable {
    // Create the first RectangularTextContainer instance
    RectangularTextContainer<RectangularTextContainer<TextElement>> rectangularTextContainer0 = new RectangularTextContainer<RectangularTextContainer<TextElement>>(1.0F, 0.0F, 0.0F, 1.0F);
    
    // Create the second RectangularTextContainer instance
    RectangularTextContainer<RectangularTextContainer<TextElement>> rectangularTextContainer1 = new RectangularTextContainer<RectangularTextContainer<TextElement>>((-198.57213F), 1.0F, (-1133.79F), 0.0F);
    
    // Call the merge method on the first RectangularTextContainer instance
    RectangularTextContainer<RectangularTextContainer<TextElement>> mergedContainer = rectangularTextContainer0.merge(rectangularTextContainer1);
    
    // Verify the updated y value of the first RectangularTextContainer instance
    assertEquals((-198.57213F), mergedContainer.y, 0.01F);
}",2,3,3,3
"@Override
public String getText(boolean useLineReturns) {
    throw new UnsupportedOperationException();
}",,1,1,1,1,"@Test(timeout = 4000)
public void test05() throws Throwable {
    TextChunk textChunk0 = new TextChunk((-2372.5F), (-2372.5F), 0.0F, 0.0F);
    String string0 = textChunk0.getText(false);
    assertEquals("""", string0);
}",3,3,2,2,"    @Test(expected = UnsupportedOperationException.class)
    public void testGetText() {
        RectangularTextContainer rectangularTextContainer = new RectangularTextContainer(0, 0, 10, 10);
        rectangularTextContainer.getText();
    }",3,3,2,2
"public static Rectangle boundingBoxOf(List<? extends Rectangle> rectangles) {
    float minx = java.lang.Float.MAX_VALUE;
    float miny = java.lang.Float.MAX_VALUE;
    float maxx = java.lang.Float.MIN_VALUE;
    float maxy = java.lang.Float.MIN_VALUE;
    for (Rectangle r : rectangles) {
        minx = (float) Math.min(r.getMinX(), minx);
        miny = (float) Math.min(r.getMinY(), miny);
        maxx = (float) Math.max(r.getMaxX(), maxx);
        maxy = (float) Math.max(r.getMaxY(), maxy);
    }
    return new Rectangle(miny, minx, maxx - minx, maxy - miny);
}","@Test public void testBoundingBoxOf() { List<Rectangle> rectangles = new ArrayList<Rectangle>(); rectangles.add(new Rectangle(0, 0, 0, 0)); rectangles.add(new Rectangle(0, 0, 0, 0)); rectangles.add(new Rectangle(0, 0, 0, 0)); rectangles.add(new Rectangle(0, 0, 0, 0)); rectangles.add(new Rectangle(0, 0, 0, 0)); rectangles.add(new Rectangle(0, 0, 0, 0)); rectangles.add(new Rectangle(0, 0, 0, 0)); rectangles.add(new Rectangle(0, 0, 0, 0)); rectangles.add(new Rectangle(0, 0, 0, 0)); rectangles.add(new Rectangle(0, 0, 0, 0)); rectangles.add(new Rectangle(0, 0, 0, 0, 0)); rectangles.add(new Rectangle(0, 0, 0, 0, 0)); rectangles.add(new Rectangle(0, 0, 0, 0, 0)); rectangles.add(new Rectangle(0, 0, 0, 0, 0)); rectangles.add(new Rectangle(0, 0, 0, 0, 0)); rectangles.add(new Rectangle(0, 0, 0, 0, 0)); rectangles.add(new Rectangle(0, 0, 0, 0, 0)); rectangles.add(new Rectangle(0, 0, 0, 0, 0)); rectangles.add(new Rectangle(0, 0, 0, 0, 0)); rectangles.add(new Rectangle(0, 0, 0, 0, 0)); rectangles.add(new Rectangle(0, 0, 0, 0, 0, 0)); rectangles.add(new Rectangle(0, 0, 0, 0, 0, 0)); rectangles.add(new Rectangle(0, 0, 0, 0, 0, 0, 0, 0)); rectangles.add(new Rectangle(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)); rectangles.add(new Rectangle(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,",1,1,1,1,"@Test(timeout = 4000)
public void test00() throws Throwable {
    Rectangle rectangle0 = new Rectangle();
    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();
    linkedList0.add(rectangle0);
    linkedList0.push(rectangle0);
    rectangle0.add((double) 3.4028235E38F, (-2851.865300569));
    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);
    assertTrue(linkedList0.contains(rectangle1));
    assertEquals(0.0F, rectangle1.x, 0.01F);
}",2,2,3,3,"    @Test
    public void testBoundingBoxOf() {
        // Create a list of rectangles
        List<Rectangle> rectangles = new ArrayList<>();
        rectangles.add(new Rectangle(0, 0, 2, 2));
        rectangles.add(new Rectangle(1, 1, 3, 3));
        rectangles.add(new Rectangle(-1, -1, 4, 4));

        // Calculate the expected bounding box
        float expectedMinX = -1;
        float expectedMinY = -1;
        float expectedMaxX = 4;
        float expectedMaxY = 4;
        Rectangle expectedBoundingBox = new Rectangle(expectedMinY, expectedMinX, expectedMaxX - expectedMinX, expectedMaxY - expectedMinY);

        // Call the boundingBoxOf method
        Rectangle actualBoundingBox = Rectangle.boundingBoxOf(rectangles);

        // Assert that the actual bounding box matches the expected bounding box
        assertEquals(expectedBoundingBox.getTop(), actualBoundingBox.getTop(), 0.001);
        assertEquals(expectedBoundingBox.getLeft(), actualBoundingBox.getLeft(), 0.001);
        assertEquals(expectedBoundingBox.getWidth(), actualBoundingBox.getWidth(), 0.001);
        assertEquals(expectedBoundingBox.getHeight(), actualBoundingBox.getHeight(), 0.001);
    }",3,3,3,3
"public void setLeft(float left) {
    float deltaWidth = left - this.x;
    this.setRect(left, this.y, this.width - deltaWidth, this.height);
}","@Test public void testSetLeft() { Rectangle rectangle = new Rectangle(); rectangle.setLeft(0); assertEquals(0, rectangle.getLeft(), 0); }
",3,3,3,3,"@Test(timeout = 4000)
public void test01() throws Throwable {
    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();
    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);
    rectangle0.setLeft((-1137.2F));
    rectangle0.setBottom((-1.0F));
    assertEquals((-1137.2F), rectangle0.x, 0.01F);
}",3,3,3,3,"@Test
public void testSetLeft() {
    Rectangle rectangle = new Rectangle(0, 0, 5, 5);
    float newLeft = 2;
    rectangle.setLeft(newLeft);
    assertEquals(newLeft, rectangle.getLeft(), 0.001);
    assertEquals(0, rectangle.getTop(), 0.001);
    assertEquals(3, rectangle.getWidth(), 0.001);
    assertEquals(5, rectangle.getHeight(), 0.001);
}",3,3,3,3
"public void setBottom(float bottom) {
    this.setRect(this.x, this.y, this.width, bottom - this.y);
}","@Test public void testSetBottom() { Rectangle rectangle = new Rectangle(); rectangle.setBottom(0); assertEquals(0, rectangle.getBottom()); }
",3,3,3,3,"@Test(timeout = 4000)
public void test01() throws Throwable {
    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();
    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);
    rectangle0.setLeft((-1137.2F));
    rectangle0.setBottom((-1.0F));
    assertEquals((-1137.2F), rectangle0.x, 0.01F);
}",3,3,3,3,"    @Test
    public void testSetBottom() {
        // Create a rectangle object
        Rectangle rectangle = new Rectangle(0, 0, 5, 5);

        // Set the bottom value
        float bottom = 10;
        rectangle.setBottom(bottom);

        // Verify that the bottom value is updated correctly
        assertEquals(bottom, rectangle.getBottom(), 0.001);
        assertEquals(bottom - rectangle.getY(), rectangle.getHeight(), 0.001);
    }",3,3,3,3
"public void setRight(float right) {
    this.setRect(this.x, this.y, right - this.x, this.height);
}","@Test public void testSetRight() { Rectangle rectangle = new Rectangle(0, 0, 0, 0, 0); rectangle.setRight(0); assertEquals(0, rectangle.getLeft()); assertEquals(0, rectangle.getRight()); }
",3,3,3,3,"@Test(timeout = 4000)
public void test03() throws Throwable {
    Rectangle rectangle0 = new Rectangle(1.0F, (-486.23865F), 1.0F, 2254.05F);
    rectangle0.setFrameFromCenter((double) 2.0F, (double) 2.0F, 2440.0, (double) 2254.05F);
    rectangle0.setRight((-1));
    assertEquals(4504.1F, rectangle0.height, 0.01F);
}",3,3,3,3,"    @Test
    public void testSetRight() {
        // Create a rectangle object
        Rectangle rectangle = new Rectangle(0, 0, 5, 5);

        // Set the right coordinate to a new value
        float newRight = 10;
        rectangle.setRight(newRight);

        // Verify that the right coordinate has been updated correctly
        assertEquals(newRight, rectangle.getRight(), 0.001);
        assertEquals(newRight - rectangle.getLeft(), rectangle.getWidth(), 0.001);
    }",3,3,3,3
"public void setTop(float top) {
    float deltaHeight = top - this.y;
    this.setRect(this.x, top, this.width, this.height - deltaHeight);
}","@Test public void testSetTop() { Rectangle rectangle = new Rectangle(0, 0, 0, 0); rectangle.setTop(0); assertEquals(0, rectangle.getTop()); }
",3,3,3,3,"@Test(timeout = 4000)
public void test04() throws Throwable {
    Rectangle rectangle0 = new Rectangle();
    rectangle0.setBottom((-1));
    rectangle0.setTop(1020.68054F);
    assertEquals(-0.0F, rectangle0.getArea(), 0.01F);
}",3,3,3,3,"    @Test
    public void testSetTop() {
        // Create a rectangle object
        Rectangle rectangle = new Rectangle(0, 0, 10, 10);

        // Set the top coordinate to a new value
        float newTop = 5;
        rectangle.setTop(newTop);

        // Verify that the top coordinate has been updated correctly
        assertEquals(newTop, rectangle.getTop(), 0.001);

        // Verify that the height has been adjusted accordingly
        float expectedHeight = 5;
        assertEquals(expectedHeight, rectangle.getHeight(), 0.001);
    }",3,3,3,3
"public char getFirstCharacter() {
    return firstCharacter;
}","@Test public void testGetFirstCharacter() throws Exception { Configuration configuration = new Configuration(); Configuration configuration2 = new Configuration(); Configuration configuration3 = new Configuration(); Configuration configuration4 = new Configuration(); Configuration configuration5 = new Configuration(); Configuration configuration6 = new Configuration(); Configuration configuration7 = new Configuration(); Configuration configuration7 = new Configuration(); Configuration configuration7 = new Configuration(); Configuration configuration7 = new Configuration(); Configuration configuration7 = new Configuration(); Configuration configuration7 = new Configuration(); Configuration configuration7 = new Configuration(); configuration7.set(configuration7, configuration7); Configuration configuration7 = new Configuration(); configuration7.set(configuration7, configuration7); Configuration configuration7 = new Configuration(); configuration7.set(configuration7, configuration7); Configuration configuration7 = new Configuration(); configuration7.set(configuration7, configuration7); Configuration configuration7 = new Configuration(); configuration7.set(configuration7, configuration7); Configuration configuration7 = new Configuration(); configuration7.set(configuration7, configuration7); Configuration configuration7 = new Configuration(); configuration7.set(configuration7, configuration7); Configuration configuration7 = new Configuration(); configuration7.set(configuration7, configuration7); Configuration configuration7 = new Configuration(); configuration7.set(configuration7, configuration7); configuration7.set(configuration7, configuration7); configuration7.set(configuration7, configuration7); configuration7.set(configuration7, configuration7); configuration7.set(configuration7, configuration7); configuration7.set(configuration7, configuration7); configuration7.set(configuration7, configuration7); configuration7.set(configuration7, configuration7); configuration7.set(configuration7, configuration7); configuration7.set(configuration7, configuration7); configuration7.set(configuration7, configuration7); configuration7.set(configuration7, configuration7); configuration7.set(configuration7, configuration7); configuration7.set(configuration7, configuration7); configuration7.set(configuration7, configuration7); configuration7.set(configuration7, configuration7); configuration7.set(configuration7, configuration7); configuration7.set(configuration7, configuration7); configuration7.set(configuration7, configuration7); configuration7.set(configuration7, configuration7); configuration7.set(configuration7, configuration7); configuration7.set(configuration7, configuration7); configuration7.set(configuration7, configuration7); configuration7.set(configuration7, configuration7); configuration7.set(configuration7, configuration7); configuration7.set(configuration7, configuration7); configuration7.set(configuration7, configuration7); configuration7.set(configuration7, configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); Configuration.set(configuration7); configuration7.set(configuration7); Configuration.set(configuration7); Configuration.set(configuration7); Configuration.set(configuration7); Configuration.set(configuration7); Configuration.set(configuration7); Configuration.set(configuration7); Configuration.set(configuration7); Configuration.set(configuration7); Configuration.set(configuration7); Configuration.set(configuration7); Configuration.set(configuration7); Configuration.set(configuration7); Configuration.set(configuration7); Configuration.set(configuration7); Configuration.set(configuration7); Configuration.set(configuration7); Configuration.set(configuration7); Configuration.set(configuration7); Configuration.set(configuration7); Configuration.set(configuration7); Configuration.set(configuration7); Configuration.set(configuration, configuration7); Configuration.set(configuration, configuration7); Configuration.set(configuration, configuration7); Configuration.set(configuration, configuration7); Configuration.set(configuration, configuration7); Configuration.set(configuration, configuration7); Configuration.set(configuration, configuration7); assertEquals(configuration, configuration7); }
",1,1,1,1,"@Test(timeout = 4000)
public void test0() throws Throwable {
    LinkedList<PasswordMatcher> linkedList0 = new LinkedList<PasswordMatcher>();
    HashMap<String, Long> hashMap0 = new HashMap<String, Long>();
    LinkedList<Dictionary> linkedList1 = new LinkedList<Dictionary>();
    LinkedList<AdjacencyGraph> linkedList2 = new LinkedList<AdjacencyGraph>();
    Double double0 = new Double((-1.0));
    Locale locale0 = Locale.TAIWAN;
    Configuration configuration0 = new Configuration(linkedList0, hashMap0, linkedList1, linkedList2, (Map<Character, Character[]>) null, (Pattern) null, double0, (Integer) null, locale0, true, (-1116L));
    SequenceMatch sequenceMatch0 = new SequenceMatch("".^ms:usO+d"", configuration0, 0, 0);
    char char0 = sequenceMatch0.getFirstCharacter();
    assertEquals('.', char0);
    assertEquals(0.9022367813028456, sequenceMatch0.getAverageEntropy(), 0.01);
}",1,1,1,1,"    @Test
    public void testGetFirstCharacter() {
        // Create a SequenceMatch object with a specific match string
        SequenceMatch sequenceMatch = new SequenceMatch(""Hello"", null, 0, 0);

        // Call the getFirstCharacter() method
        char firstCharacter = sequenceMatch.getFirstCharacter();

        // Assert that the first character is 'H'
        assertEquals('H', firstCharacter);
    }",3,3,3,3
"public int getShiftedNumber() {
    return shiftedCount;
}","@Test public void testGetShiftedNumber() { assertEquals(0, new SpacialMatch(match, configuration, start_index, end_index, adjacencyGraph, turns, shiftedNumber).getShiftedNumber()); assertEquals(0, new SpacialMatch(match, configuration, start_index, end_index, adjacencyGraph, turns, shiftedNumber).getShiftedNumber()); assertEquals(0, new SpacialMatch(match, configuration, start_index, end_index, adjacencyGraph, turns, shiftedNumber).getShiftedNumber()); assertEquals(0, new SpacialMatch(match, configuration, start_index, end_index, adjacencyGraph, turns, shiftedNumber).getShiftedNumber()); assertEquals(0, new SpacialMatch(match, configuration, start_index, end_index, adjacencyGraph, turns, shiftedNumber).getShiftedNumber()); assertEquals(0, new SpacialMatch(match, configuration, start_index, end_index, adjacencyGraph, turns, shiftedNumber).getShiftedNumber()); assertEquals(0, new SpacialMatch(match, configuration, start_index, end_index, adjacencyGraph, shiftedNumber).getShiftedNumber()); assertEquals(0, new SpacialMatch(match, configuration, start_index, end_index, adjacencyGraph, shiftedNumber).getShiftedNumber()); assertEquals(0, new SpacialMatch(match, configuration, start_index, adjacencyGraph, turns, shiftedNumber).getShiftedNumber()); assertEquals(0, new SpacialMatch(match, configuration, start_index, end_index, adjacencyGraph, shiftedNumber).getShiftedNumber()); assertEquals(0, new SpacialMatch(match, configuration, start_index, end_index, adjacencyGraph, shiftedNumber).getShiftedNumber()); }
",1,1,1,1,"@Test(timeout = 4000)
public void test00() throws Throwable {
    HashMap<Character, String[]> hashMap0 = new HashMap<Character, String[]>();
    Character character0 = new Character('a');
    String[] stringArray0 = new String[4];
    stringArray0[0] = """";
    BiFunction<Object, Object, String[]> biFunction0 = (BiFunction<Object, Object, String[]>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
    hashMap0.merge(character0, stringArray0, biFunction0);
    AdjacencyGraph adjacencyGraph0 = new AdjacencyGraph("""", hashMap0);
    SpacialMatch spacialMatch0 = new SpacialMatch(""i[xfg[2Gi[m"", (Configuration) null, 4236, (-1347), adjacencyGraph0, 2554, 1147);
    assertEquals(1147, spacialMatch0.getShiftedNumber());
    assertEquals(2554, spacialMatch0.getTurns());
    assertEquals(10.991521846075695, spacialMatch0.calculateEntropy(), 0.01);
}",1,1,1,1,"@Test
public void testGetShiftedNumber() {
    HashMap<Character, String[]> hashMap0 = new HashMap<Character, String[]>();
    Character character0 = new Character('a');
    String[] stringArray0 = new String[4];
    stringArray0[0] = """";
    BiFunction<Object, Object, String[]> biFunction0 = (BiFunction<Object, Object, String[]>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
    hashMap0.merge(character0, stringArray0, biFunction0);
    AdjacencyGraph adjacencyGraph0 = new AdjacencyGraph("""", hashMap0);
    SpacialMatch spacialMatch = new SpacialMatch(""match"", (Configuration) null, 0, 10, adjacencyGraph0, 5, 3);
    int expectedShiftedNumber = 3;
    int actualShiftedNumber = spacialMatch.getShiftedNumber();
    assertEquals(expectedShiftedNumber, actualShiftedNumber);
}",1,1,2,1
"public int getTurns() {
    return turns;
}","@Test public void testGetTurns() throws Exception { assertEquals(0, spacialMatch.getTurns()); }
",3,2,2,2,"@Test(timeout = 4000)
public void test00() throws Throwable {
    HashMap<Character, String[]> hashMap0 = new HashMap<Character, String[]>();
    Character character0 = new Character('a');
    String[] stringArray0 = new String[4];
    stringArray0[0] = """";
    BiFunction<Object, Object, String[]> biFunction0 = (BiFunction<Object, Object, String[]>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
    hashMap0.merge(character0, stringArray0, biFunction0);
    AdjacencyGraph adjacencyGraph0 = new AdjacencyGraph("""", hashMap0);
    SpacialMatch spacialMatch0 = new SpacialMatch(""i[xfg[2Gi[m"", (Configuration) null, 4236, (-1347), adjacencyGraph0, 2554, 1147);
    assertEquals(1147, spacialMatch0.getShiftedNumber());
    assertEquals(2554, spacialMatch0.getTurns());
    assertEquals(10.991521846075695, spacialMatch0.calculateEntropy(), 0.01);
}",1,1,1,1,"@Test
public void testGetTurns() {
    HashMap<Character, String[]> hashMap0 = new HashMap<Character, String[]>();
    Character character0 = new Character('a');
    String[] stringArray0 = new String[4];
    stringArray0[0] = """";
    BiFunction<Object, Object, String[]> biFunction0 = (BiFunction<Object, Object, String[]>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
    hashMap0.merge(character0, stringArray0, biFunction0);
    AdjacencyGraph adjacencyGraph0 = new AdjacencyGraph("""", hashMap0);
    SpacialMatch spacialMatch0 = new SpacialMatch(""i[xfg[2Gi[m"", (Configuration) null, 4236, (-1347), adjacencyGraph0, 2554, 1147);
    int result = spacialMatch0.getTurns();
    assertEquals(2554, result);
}",1,1,1,1
"public String getDetails() {
    ResourceBundle mainResource = configuration.getMainResource();
    StringBuilder detailBuilder = new StringBuilder();
    detailBuilder.append(super.getDetails());
    detailBuilder.append(""\n"");
    detailBuilder.append(mainResource.getString(""main.match.spacialType"")).append("" "").append(getAdjacencyGraph().getName());
    detailBuilder.append(""\n"");
    detailBuilder.append(mainResource.getString(""main.match.turns"")).append("" "").append(getTurns());
    detailBuilder.append(""\n"");
    detailBuilder.append(mainResource.getString(""main.match.shifts"")).append("" "").append(getShiftedNumber());
    return detailBuilder.toString();
}",,1,1,1,1,"@Test(timeout = 4000)
public void test06() throws Throwable {
    LinkedList<PasswordMatcher> linkedList0 = new LinkedList<PasswordMatcher>();
    HashMap<String, Long> hashMap0 = new HashMap<String, Long>();
    LinkedList<Dictionary> linkedList1 = new LinkedList<Dictionary>();
    LinkedList<AdjacencyGraph> linkedList2 = new LinkedList<AdjacencyGraph>();
    HashMap<Character, Character[]> hashMap1 = new HashMap<Character, Character[]>();
    Pattern pattern0 = Pattern.compile("""");
    Double double0 = new Double(0.0);
    Integer integer0 = new Integer(1);
    Locale locale0 = Locale.ITALIAN;
    Configuration configuration0 = new Configuration(linkedList0, hashMap0, linkedList1, linkedList2, hashMap1, pattern0, double0, integer0, locale0, true, 1);
    HashMap<Character, String[]> hashMap2 = new HashMap<Character, String[]>();
    AdjacencyGraph adjacencyGraph0 = new AdjacencyGraph(""zb-[S-?|V#[&n|'m]"", hashMap2);
    SpacialMatch spacialMatch0 = new SpacialMatch(""\""MPC;&n:+j@"", configuration0, 1, 1, adjacencyGraph0, 1, 1);
    String string0 = spacialMatch0.getDetails();
    assertEquals(""Tipo di corrispondenza: SpacialMatch\nEntropia: 3.5849625007211565\nStringa: \""MPC;&n:+j@\nIndice iniziale: 1\nIndice finale: 1\nLunghezza: 11\nTipo Spaziale: zb-[S-?|V#[&n|'m]\nSvolte: 1\nSpostamenti: 1"", string0);
}",1,1,1,1,"@Test
public void testGetDetails() {
    LinkedList<PasswordMatcher> linkedList0 = new LinkedList<>();
    HashMap<String, Long> hashMap0 = new HashMap<>();
    LinkedList<Dictionary> linkedList1 = new LinkedList<>();
    LinkedList<AdjacencyGraph> linkedList2 = new LinkedList<>();
    HashMap<Character, Character[]> hashMap1 = new HashMap<>();
    Pattern pattern0 = Pattern.compile("""");
    Double double0 = new Double(0.0);
    Integer integer0 = new Integer(1);
    Locale locale0 = Locale.ITALIAN;
    Configuration configuration0 = new Configuration(linkedList0, hashMap0, linkedList1, linkedList2, hashMap1, pattern0, double0, integer0, locale0, true, 1);
    HashMap<Character, String[]> hashMap2 = new HashMap<>();
    AdjacencyGraph adjacencyGraph0 = new AdjacencyGraph(""zb-[S-?|V#[&n|'m]"", hashMap2);
    SpacialMatch spacialMatch0 = new SpacialMatch(""\""MPC;&n:+j@"", configuration0, 1, 1, adjacencyGraph0, 1, 1);
    
    String expected = ""Tipo di corrispondenza: SpacialMatch\nEntropia: 3.5849625007211565\nStringa: \""MPC;&n:+j@\nIndice iniziale: 1\nIndice finale: 1\nLunghezza: 11\nTipo Spaziale: zb-[S-?|V#[&n|'m]\nSvolte: 1\nSpostamenti: 1"";
    String actual = spacialMatch0.getDetails();
    
    assertEquals(expected, actual);
}",1,1,1,1
"public AdjacencyGraph getAdjacencyGraph() {
    return adjacencyGraph;
}","@Test public void testGetAdjacencyGraph() throws Exception { AdjacencyGraph adjacencyGraph = new SpacialMatch(match, configuration, start_index, end_index, adjacencyGraph, turns, shiftedNumber); assertEquals(adjacencyGraph, adjacencyMatch.getAdjacencyGraph()); }
",3,2,2,2,"@Test(timeout = 4000)
public void test11() throws Throwable {
    HashMap<Character, String[]> hashMap0 = new HashMap<Character, String[]>();
    AdjacencyGraph adjacencyGraph0 = new AdjacencyGraph(""Q+ir0x\"""", hashMap0);
    SpacialMatch spacialMatch0 = new SpacialMatch(""Q+ir0x\"""", (Configuration) null, 0, 0, adjacencyGraph0, 0, 0);
    spacialMatch0.getAdjacencyGraph();
    assertEquals(0, spacialMatch0.getShiftedNumber());
    assertEquals(0.0, spacialMatch0.getAverageEntropy(), 0.01);
    assertEquals(0, spacialMatch0.getTurns());
}",2,2,2,2,"@Test
public void testGetAdjacencyGraph() {
    HashMap<Character, String[]> hashMap0 = new HashMap<Character, String[]>();
    AdjacencyGraph adjacencyGraph0 = new AdjacencyGraph(""Q+ir0x\"""", hashMap0);
    SpacialMatch spacialMatch0 = new SpacialMatch(""Q+ir0x\"""", null, 0, 0, adjacencyGraph0, 0, 0);
    
    AdjacencyGraph result = spacialMatch0.getAdjacencyGraph();
    
    assertEquals(adjacencyGraph0, result);
}",3,3,3,3
"public String getRepeatingCharacters() {
    return repeatingCharacters;
}","@Test public void testGetRepeatCharacters() { RepeatMatch match = new RepeatMatch(""test"", configuration, ""test"", 0, 0); assertEquals(""test"", match.getRepeatCharacters()); }
",3,2,2,2,"@Test(timeout = 4000)
public void test1() throws Throwable {
    LinkedList<PasswordMatcher> linkedList0 = new LinkedList<PasswordMatcher>();
    HashMap<String, Long> hashMap0 = new HashMap<String, Long>();
    LinkedList<Dictionary> linkedList1 = new LinkedList<Dictionary>();
    LinkedList<AdjacencyGraph> linkedList2 = new LinkedList<AdjacencyGraph>();
    HashMap<Character, Character[]> hashMap1 = new HashMap<Character, Character[]>();
    Pattern pattern0 = Pattern.compile(""U=L| X&V%'vloo%"", 506);
    Double double0 = new Double(506);
    Locale locale0 = Locale.ITALY;
    Configuration configuration0 = new Configuration(linkedList0, hashMap0, linkedList1, linkedList2, hashMap1, pattern0, double0, (Integer) null, locale0, false, 0L);
    RepeatMatch repeatMatch0 = new RepeatMatch(""LMD"", configuration0, ""3pu|'E\""R{_d2O9?"", 506, 506);
    int int0 = repeatMatch0.getRepeat();
    assertEquals(""3pu|'E\""R{_d2O9?"", repeatMatch0.getRepeatingCharacters());
    assertEquals(0.0, repeatMatch0.getAverageEntropy(), 0.01);
    assertEquals(0, int0);
}",1,1,2,1,"@Test
public void testGetRepeatingCharacters() {
    LinkedList<PasswordMatcher> linkedList0 = new LinkedList<PasswordMatcher>();
    HashMap<String, Long> hashMap0 = new HashMap<String, Long>();
    LinkedList<Dictionary> linkedList1 = new LinkedList<Dictionary>();
    LinkedList<AdjacencyGraph> linkedList2 = new LinkedList<AdjacencyGraph>();
    HashMap<Character, Character[]> hashMap1 = new HashMap<Character, Character[]>();
    Pattern pattern0 = Pattern.compile(""U=L| X&V%'vloo%"", 506);
    Double double0 = new Double(506);
    Locale locale0 = Locale.ITALY;
    Configuration configuration0 = new Configuration(linkedList0, hashMap0, linkedList1, linkedList2, hashMap1, pattern0, double0, (Integer) null, locale0, false, 0L);

    RepeatMatch repeatMatch = new RepeatMatch(""abcabc"", configuration0, ""abc"", 0, 6);

    String repeatingCharacters = repeatMatch.getRepeatingCharacters();
    assertEquals(""abc"", repeatingCharacters);
}",1,1,2,1
"public int getDay() {
    return day;
}","@Test public void testGetDay() { Configuration configuration = new Configuration(); Configuration configuration2 = new Configuration(); Configuration configuration3 = new Configuration(); Configuration configuration4 = new Configuration(); Configuration configuration5 = new Configuration(); Configuration configuration6 = new Configuration(); Configuration configuration7 = new Configuration(); Configuration configuration7 = new Configuration(); Configuration configuration7 = new Configuration(); Configuration configuration7 = new Configuration(); Configuration configuration7 = new Configuration(); Configuration configuration7 = new Configuration(); Configuration configuration7 = new Configuration(); configuration7.set(configuration7, configuration7); Configuration configuration7 = new Configuration(); configuration7.set(configuration7, configuration7); Configuration configuration7 = new Configuration(); configuration7.set(configuration7, configuration7); Configuration configuration7 = new Configuration(); configuration7.set(configuration7, configuration7); Configuration configuration7 = new Configuration(); configuration7.set(configuration7, configuration7); Configuration configuration7 = new Configuration(); configuration7.set(configuration7, configuration7); Configuration configuration7 = new Configuration(); configuration7.set(configuration7, configuration7); Configuration configuration7 = new Configuration(); configuration7.set(configuration7, configuration7); configuration7.set(configuration7, configuration7); configuration7.set(configuration7, configuration7); configuration7.set(configuration7, configuration7); configuration7.set(configuration7, configuration7); configuration7.set(configuration7, configuration7); configuration7.set(configuration7, configuration7); configuration7.set(configuration7, configuration7); configuration7.set(configuration7, configuration7); configuration7.set(configuration7, configuration7); configuration7.set(configuration7, configuration7); configuration7.set(configuration7, configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); assertEquals(configuration7, configuration7); }
",1,1,1,1,"@Test(timeout = 4000)
public void test00() throws Throwable {
    DateMatch dateMatch0 = new DateMatch(""t$oH8?EqujKQ"", (Configuration) null, 100, 2480, 100, ""main.match.separator"", 100, 0);
    assertEquals(100, dateMatch0.getDay());
    assertEquals(2480, dateMatch0.getMonth());
    assertEquals(100, dateMatch0.getYear());
    assertEquals(""main.match.separator"", dateMatch0.getSeparator());
    assertEquals(1.4625321722109403, dateMatch0.getAverageEntropy(), 0.01);
}",1,1,1,1,"@Test
public void testGetDay() {
    DateMatch dateMatch = new DateMatch(""match"", null, 15, 6, 2022, ""/"", 0, 10);

    int day = dateMatch.getDay();
    assertEquals(15, day);
}",3,3,3,3
"public int getMonth() {
    return month;
}","@Test public void testGetMonth() throws Exception { Configuration configuration = new Configuration(); Configuration configuration2 = new Configuration(); Configuration configuration3 = new Configuration(); Configuration configuration4 = new Configuration(); Configuration configuration5 = new Configuration(); Configuration configuration6 = new Configuration(); Configuration configuration7 = new Configuration(); Configuration configuration7 = new Configuration(); Configuration configuration7 = new Configuration(); Configuration configuration7 = new Configuration(); Configuration configuration7 = new Configuration(); Configuration configuration7 = new Configuration(); Configuration configuration7 = new Configuration(); configuration7.set(configuration7, configuration7); Configuration configuration7 = new Configuration(); configuration7.set(configuration7, configuration7); Configuration configuration7 = new Configuration(); configuration7.set(configuration7, configuration7); Configuration configuration7 = new Configuration(); configuration7.set(configuration7, configuration7); Configuration configuration7 = new Configuration(); configuration7.set(configuration7, configuration7); Configuration configuration7 = new Configuration(); configuration7.set(configuration7, configuration7); Configuration configuration7 = new Configuration(); configuration7.set(configuration7, configuration7); configuration7.set(configuration7, configuration7); configuration7.set(configuration7, configuration7); configuration7.set(configuration7, configuration7); configuration7.set(configuration7, configuration7); configuration7.set(configuration7, configuration7); configuration7.set(configuration7, configuration7); configuration7.set(configuration7, configuration7); configuration7.set(configuration7, configuration7); configuration7.set(configuration7, configuration7); configuration7.set(configuration7, configuration7); configuration7.set(configuration7, configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); assertEquals(configuration7, configuration7); }
",1,1,1,1,"@Test(timeout = 4000)
public void test00() throws Throwable {
    DateMatch dateMatch0 = new DateMatch(""t$oH8?EqujKQ"", (Configuration) null, 100, 2480, 100, ""main.match.separator"", 100, 0);
    assertEquals(100, dateMatch0.getDay());
    assertEquals(2480, dateMatch0.getMonth());
    assertEquals(100, dateMatch0.getYear());
    assertEquals(""main.match.separator"", dateMatch0.getSeparator());
    assertEquals(1.4625321722109403, dateMatch0.getAverageEntropy(), 0.01);
}",2,2,2,2,"@Test
public void testGetMonth() {
    DateMatch dateMatch = new DateMatch(""match"", null, 1, 2, 2022, ""/"", 0, 10);

    int month = dateMatch.getMonth();
    assertEquals(2, month);
}",3,3,3,3
"public int getYear() {
    return year;
}","@Test public void testGetYear() throws Exception { Configuration configuration = new Configuration(); Configuration configuration2 = new Configuration(); Configuration configuration3 = new Configuration(); Configuration configuration4 = new Configuration(); Configuration configuration5 = new Configuration(); Configuration configuration6 = new Configuration(); Configuration configuration7 = new Configuration(); Configuration configuration7 = new Configuration(); Configuration configuration7 = new Configuration(); Configuration configuration7 = new Configuration(); Configuration configuration7 = new Configuration(); Configuration configuration7 = new Configuration(); Configuration configuration7 = new Configuration(); configuration7.set(configuration7, configuration7); Configuration configuration7 = new Configuration(); configuration7.set(configuration7, configuration7); Configuration configuration7 = new Configuration(); configuration7.set(configuration7, configuration7); Configuration configuration7 = new Configuration(); configuration7.set(configuration7, configuration7); Configuration configuration7 = new Configuration(); configuration7.set(configuration7, configuration7); Configuration configuration7 = new Configuration(); configuration7.set(configuration7, configuration7); Configuration configuration7 = new Configuration(); configuration7.set(configuration7, configuration7); configuration7.set(configuration7, configuration7); configuration7.set(configuration7, configuration7); configuration7.set(configuration7, configuration7); configuration7.set(configuration7, configuration7); configuration7.set(configuration7, configuration7); configuration7.set(configuration7, configuration7); configuration7.set(configuration7, configuration7); configuration7.set(configuration7, configuration7); configuration7.set(configuration7, configuration7); configuration7.set(configuration7, configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); configuration7.set(configuration7); assertEquals(configuration7, configuration7); }
",1,1,1,1,"@Test(timeout = 4000)
public void test00() throws Throwable {
    DateMatch dateMatch0 = new DateMatch(""t$oH8?EqujKQ"", (Configuration) null, 100, 2480, 100, ""main.match.separator"", 100, 0);
    assertEquals(100, dateMatch0.getDay());
    assertEquals(2480, dateMatch0.getMonth());
    assertEquals(100, dateMatch0.getYear());
    assertEquals(""main.match.separator"", dateMatch0.getSeparator());
    assertEquals(1.4625321722109403, dateMatch0.getAverageEntropy(), 0.01);
}",2,1,1,1,"@Test
public void testGetYear() {
    DateMatch dateMatch = new DateMatch(""match"", null, 1, 1, 2022, ""/"", 0, 10);

    int year = dateMatch.getYear();
    assertEquals(2022, year);
}",3,3,3,3
"public String getSeparator() {
    return separator;
}","@Test public void testGetSeparator() { assertEquals("""", new DateMatch("""", new Configuration(), 1, 1, 1, 1, 1, 1).getSeparator()); }
",3,3,3,3,"@Test(timeout = 4000)
public void test00() throws Throwable {
    DateMatch dateMatch0 = new DateMatch(""t$oH8?EqujKQ"", (Configuration) null, 100, 2480, 100, ""main.match.separator"", 100, 0);
    assertEquals(100, dateMatch0.getDay());
    assertEquals(2480, dateMatch0.getMonth());
    assertEquals(100, dateMatch0.getYear());
    assertEquals(""main.match.separator"", dateMatch0.getSeparator());
    assertEquals(1.4625321722109403, dateMatch0.getAverageEntropy(), 0.01);
}",3,2,3,2,"@Test
public void testGetSeparator() {
    String match = ""sample match"";

    Configuration configuration = null; // Replace null with the appropriate value

    int day = 1;
    int month = 1;
    int year = 2022;
    String separator = ""-"";
    int start_index = 0;
    int end_index = 10;
    DateMatch dateMatch = new DateMatch(match, configuration, day, month, year, separator, start_index, end_index);
    String result = dateMatch.getSeparator();
    assertEquals(""-"", result);
}",3,3,3,3
"public boolean isLeet() {
    return leetSubstitution.size() > 0;
}","@Test public void testIsLeet() { assertTrue(dictionaryMatch.isLeet()); assertTrue(dictionaryMatch.isLeet()); assertTrue(dictionaryMatch.isLeet()); assertTrue(dictionaryMatch.isLeet()); assertTrue(dictionaryMatch.isLeet()); assertTrue(dictionaryMatch.isLeet()); assertTrue(dictionaryMatch.isLeet()); assertTrue(dictionaryMatch.isLeet()); assertTrue(dictionaryMatch.isLeet()); assertTrue(dictionaryMatch.isLeet()); }
",1,1,1,1,"@Test(timeout = 4000)
public void test00() throws Throwable {
    LinkedList<Character[]> linkedList0 = new LinkedList<Character[]>();
    Character[] characterArray0 = new Character[7];
    Character character0 = new Character('{');
    characterArray0[0] = character0;
    characterArray0[1] = character0;
    linkedList0.add(characterArray0);
    linkedList0.add(characterArray0);
    DictionaryMatch dictionaryMatch0 = new DictionaryMatch(""Q9ZRLNz$stxg"", (Configuration) null, (-1512), (-1512), ""Q9ZRLNz$stxg"", (-1512), linkedList0, false, true, ""-!4Z5zRb8d"", (-1512));
    assertEquals((-1512), dictionaryMatch0.getDistance());
    assertEquals(""-!4Z5zRb8d"", dictionaryMatch0.getDictionaryName());
    assertEquals(Double.NaN, dictionaryMatch0.getAverageEntropy(), 0.01);
    assertTrue(dictionaryMatch0.isReversed());
    assertTrue(dictionaryMatch0.isLeet());
}",2,2,2,2,"@Test
public void testIsLeet() {
    List<Character[]> leetSubstitution = new LinkedList<>();
    leetSubstitution.add(new Character[]{'a', '4'});
    DictionaryMatch dictionaryMatch = new DictionaryMatch(""match"", null, 0, 1, ""value"", 1, leetSubstitution, false, false, ""dictionary"", 0);
    assertTrue(dictionaryMatch.isLeet());

    DictionaryMatch dictionaryMatch2 = new DictionaryMatch(""match"", null, 0, 1, ""value"", 1, new LinkedList<Character[]>(), false, false, ""dictionary"", 0);

    assertFalse(dictionaryMatch2.isLeet());
}",3,3,3,3
"public int getRank() {
    return rank;
}","@Test public void testRank() { assertEquals(2, dictionaryMatch.getRank()); }
",2,2,2,2,"@Test(timeout = 4000)
public void test02() throws Throwable {
    LinkedList<Character[]> linkedList0 = new LinkedList<Character[]>();
    DictionaryMatch dictionaryMatch0 = new DictionaryMatch(""Q9ZRLNz$stxg"", (Configuration) null, (-1512), (-1512), ""Q9ZRLNz$stxg"", (-1512), linkedList0, false, true, ""-!4Z5zRb8d"", (-1512));
    boolean boolean0 = dictionaryMatch0.isReversed();
    assertEquals((-1512), dictionaryMatch0.getRank());
    assertFalse(dictionaryMatch0.isLeet());
    assertEquals(""-!4Z5zRb8d"", dictionaryMatch0.getDictionaryName());
    assertEquals(Double.NaN, dictionaryMatch0.calculateEntropy(), 0.01);
    assertEquals((-1512), dictionaryMatch0.getDistance());
    assertTrue(boolean0);
}",2,1,1,1,"@Test
public void testGetRank() {
    LinkedList<Character[]> linkedList0 = new LinkedList<Character[]>();
    DictionaryMatch dictionaryMatch = new DictionaryMatch(""match"", null, 0, 10, ""value"", 5, linkedList0, false, false, ""dictionary"", 3);

    int expectedRank = 5;
    int actualRank = dictionaryMatch.getRank();
    assertEquals(expectedRank, actualRank);
}",3,3,3,3
"public List<Character[]> getLeetSubstitution() {
    return leetSubstitution;
}","@Test public void testGetLeetSubstitution() { List<Character[]> leetSubstitution = new ArrayList<Character[]>(); leetSubstitution.add(new Character[]{'a', 'b', 'c'}); leetSubstitution.add(new Character[]{'a', 'b', 'c'}); leetSubstitution.add(new Character[]{'b', 'c'}); leetSubstitution.add(new Character[]{'a', 'b', 'c'}); leetSubstitution.add(new Character[]{'b', 'c'}); leetSubstitution.add(new Character[]{'c', 'c'}); leetSubstitution.add(new Character[]{'c', 'c'}); leetSubstitution.add(new Character[]{'c', 'c'}); leetSubstitution.add(new Character[]{'c', 'c'}); leetSubstitution.add(new Character[]{'b', 'c'}); leetSubstitution.add(new Character[]{'c', 'c'}); leetSubstitution.add(new Character[]{'c', 'c'}); leetSubstitution.add(new Character[]{'c', 'c'}); leetSubstitution.add(new Character[]{'c', 'c'}); leetSubstitution.add(new Character[]{'c', 'c'}); leetSubstitution.add(new Character[]{'c', 'c'}); leetSubstitution.add(new Character[]{'c', 'c'}); leetSubstitution.add(new Character[]{'c', 'c'}); leetSubstitution.add(new Character[]{'c', 'c'}); leetSubstitution.add(new Character[]{'c', 'c'}); leetSubstitution.add(new Character[]{'c', 'c'}); leetSubstitution.add(new Character[]{'c', 'c'}); leetSubstitution.add(new Character[]{'c', 'c'}); leetSubstitution.add(new Character[]{'c', 'c'}); leetSubstitution.add(new Character[]{'c', 'c'}); leetSubstitution.add(new Character[]{'c', 'c'}); leetSubstitution.add(new Character[]{'c', 'c'}); leetSubstitution.add(new Character[]{'c', 'c'}); leetSubstitution.add(new Character[]{'c', 'c'}); leetSubstitution.add(new Character[]{'c', 'c'}); leetSubstitution); leetSubstitution.add(new Character['])); leetSubstitution.add(new Character[]{'c', 'c'}); leetSubstitution.add(new Character[]{'c', 'c'}); leetSubstitution.add(new Character[]{'c', 'c'}); leetSubstitution); leetSubstitution.add(new Character['])); leetSubstitution.add(new Character[]{'c', 'c', 'c'}); leetSubstitution.add(new Character[]{''}); leetSubstitution); leetSubstitution.add(new Character['])); leetSubstitution.add(new Character[']); leetSubstitution); leetSubstitution.add(new Character[']); leetSubstitution.add(Character[']); leetSubstitution.add(Character[']); leetSubstitution); leetSubstitution); leetSubstitution); leetSubstitution.add(Character[']); leetSubstitution.add(Character[']); leetSubstitution.add(Character[']); leetSubstitution.add(Character[']); leetSubstitution); leetSubstitution.add(Character[]{'}); leetSubstitution); leetSubstitution); leetSubstitution); leetSubstitution); leetSubstitution); leetSubstitution); leetSubstitution); leetSubstitution); leetSubstitution); leetSubstitution); leetSubstitution); }
",1,1,1,1,"@Test(timeout = 4000)
public void test05() throws Throwable {
    LinkedList<PasswordMatcher> linkedList0 = new LinkedList<PasswordMatcher>();
    HashMap<String, Long> hashMap0 = new HashMap<String, Long>();
    LinkedList<Dictionary> linkedList1 = new LinkedList<Dictionary>();
    LinkedList<AdjacencyGraph> linkedList2 = new LinkedList<AdjacencyGraph>();
    HashMap<Character, Character[]> hashMap1 = new HashMap<Character, Character[]>();
    Pattern pattern0 = Pattern.compile(""\n"");
    Double double0 = new Double(129.0);
    Integer integer0 = new Integer(0);
    Locale locale0 = Locale.GERMAN;
    Configuration configuration0 = new Configuration(linkedList0, hashMap0, linkedList1, linkedList2, hashMap1, pattern0, double0, integer0, locale0, false, 0);
    DictionaryMatch dictionaryMatch0 = new DictionaryMatch(""\n"", configuration0, 0, 0, ""\n"", 0, (List<Character[]>) null, true, true, ""\n"", 0);
    dictionaryMatch0.getLeetSubstitution();
    assertEquals(0, dictionaryMatch0.getDistance());
    assertEquals(0, dictionaryMatch0.getRank());
    assertTrue(dictionaryMatch0.isReversed());
    assertEquals(0.0, dictionaryMatch0.getAverageEntropy(), 0.01);
}",1,1,2,1,"@Test
public void testGetLeetSubstitution() {
    List<Character[]> leetSubstitution = new ArrayList<>();
    leetSubstitution.add(new Character[]{'a', '4'});
    leetSubstitution.add(new Character[]{'e', '3'});
    leetSubstitution.add(new Character[]{'o', '0'});

    LinkedList<PasswordMatcher> linkedList0 = new LinkedList<PasswordMatcher>();
    HashMap<String, Long> hashMap0 = new HashMap<String, Long>();
    LinkedList<Dictionary> linkedList1 = new LinkedList<Dictionary>();
    LinkedList<AdjacencyGraph> linkedList2 = new LinkedList<AdjacencyGraph>();
    HashMap<Character, Character[]> hashMap1 = new HashMap<Character, Character[]>();
    Pattern pattern0 = Pattern.compile(""\n"");
    Double double0 = new Double(129.0);
    Integer integer0 = new Integer(0);
    Locale locale0 = Locale.GERMAN;
    Configuration configuration0 = new Configuration(linkedList0, hashMap0, linkedList1, linkedList2, hashMap1, pattern0, double0, integer0, locale0, false, 0);

    DictionaryMatch dictionaryMatch = new DictionaryMatch(""match"", configuration0, 0, 10, ""value"", 1, leetSubstitution, false, false, ""dictionary"", 2);

    List<Character[]> result = dictionaryMatch.getLeetSubstitution();
    assertEquals(leetSubstitution, result);
}",1,2,3,2
"@Override
public double getAverageEntropy() {
    return calculateEntropy() / getLength();
}","@Test public void testGetAverageEntropy() throws Exception { Configuration configuration = new Configuration(); BaseMatch match = new BaseMatch(""test"", configuration, 0, 0); assertEquals(0.0, match.getAverageEntropy(), 0.0001); }
",3,3,3,3,"@Test(timeout = 4000)
public void test00() throws Throwable {
    YearMatch yearMatch0 = new YearMatch(""a._jB-!,<c"", (Configuration) null, (-416), (-416));
    double double0 = yearMatch0.getAverageEntropy();
    assertEquals(0.7011227255423254, double0, 0.01);
    assertEquals((-416), yearMatch0.getEndIndex());
    assertEquals((-416), yearMatch0.getStartIndex());
}",3,3,3,3,"@Test
public void testGetAverageEntropy() {
    YearMatch yearMatch = new YearMatch(""a._jB-!,<c"", (Configuration) null, (-416), (-416));
    double averageEntropy = yearMatch.getAverageEntropy();
    assertEquals(0.7011227255423254, averageEntropy, 0.01);
    assertEquals((-416), yearMatch.getEndIndex());
    assertEquals((-416), yearMatch.getStartIndex());
}",3,3,3,3
"@Override
public int getEndIndex() {
    return this.end_index;
}","@Test public void testGetEndIndex() { assertEquals(0, this.mocker.getComponentUnderTest().getEndIndex()); }
",2,2,2,2,"@Test(timeout = 4000)
public void test00() throws Throwable {
    YearMatch yearMatch0 = new YearMatch(""a._jB-!,<c"", (Configuration) null, (-416), (-416));
    double double0 = yearMatch0.getAverageEntropy();
    assertEquals(0.7011227255423254, double0, 0.01);
    assertEquals((-416), yearMatch0.getEndIndex());
    assertEquals((-416), yearMatch0.getStartIndex());
}",3,2,2,2,"@Test
public void testGetEndIndex() {
    YearMatch yearMatch = new YearMatch(""a._jB-!,<c"", (Configuration) null, (-416), (-416));
    int expectedEndIndex = -416;
    int actualEndIndex = yearMatch.getEndIndex();
    assertEquals(expectedEndIndex, actualEndIndex);
}",3,3,3,3
"@Override
public int getStartIndex() {
    return this.start_index;
}","@Test public void testGetStartIndex() { assertEquals(0, this.mocker.getComponentUnderTest().getStartIndex()); }
",2,2,2,2,"@Test(timeout = 4000)
public void test00() throws Throwable {
    YearMatch yearMatch0 = new YearMatch(""a._jB-!,<c"", (Configuration) null, (-416), (-416));
    double double0 = yearMatch0.getAverageEntropy();
    assertEquals(0.7011227255423254, double0, 0.01);
    assertEquals((-416), yearMatch0.getEndIndex());
    assertEquals((-416), yearMatch0.getStartIndex());
}",3,2,2,2,"@Test
public void testGetStartIndex() {
    YearMatch yearMatch = new YearMatch(""a._jB-!,<c"", (Configuration) null, (-416), (-416));
    int expectedStartIndex = -416;
    int actualStartIndex = yearMatch.getStartIndex();
    assertEquals(expectedStartIndex, actualStartIndex);
}",3,3,3,3
"protected static long nCk(int n, int k) {
    if (k > n) {
        return 0;
    }
    long result = 1;
    for (int i = 1; i <= k; i++) {
        result *= n--;
        result /= i;
    }
    return result;
}","@Test public void testNCk() { assertEquals(0, BaseMatch.nCk(1, 2)); assertEquals(0, BaseMatch.nCk(1, 2)); assertEquals(0, BaseMatch.nCk(1, 2)); assertEquals(0, BaseMatch.nCk(1, 2)); assertEquals(0, BaseMatch.nCk(1, 2)); assertEquals(0, BaseMatch.nCk(1, 2)); assertEquals(0, BaseMatch.nCk(1, 2)); assertEquals(0, BaseMatch.nCk(1, 2)); assertEquals(0, BaseMatch.nCk(1, 2)); assertEquals(0, BaseMatch.nCk(1, 2)); assertEquals(0, BaseMatch.nCk(1, 2)); assertEquals(0, BaseMatch.nCk(1, 2)); assertEquals(0, BaseMatch.nCk(1, 2)); assertEquals(0, BaseMatch.nCk(1, 2)); assertEquals(0, BaseMatch.nCk(1, 2)); assertEquals(0, BaseMatch.nCk(1, 2)); assertEquals(0, BaseMatch.nCk(1, 2)); assertEquals(0, BaseMatch.nCk(1, 2)); assertEquals(0, BaseMatch.nCk(1, 2)); assertEquals(0, BaseMatch.nCk(1, 2)); assertEquals(0, BaseMatch.nCk(1, 2)); assertEquals(0, BaseMatch.nCk(1, 2)); assertEquals(0, BaseMatch.nCk(1, 2)); }
",1,1,1,1,"@Test(timeout = 4000)
public void test02() throws Throwable {
    long long0 = BaseMatch.nCk(28, 28);
    assertEquals(1L, long0);
}",3,3,3,3,"    @Test
    public void testNCk() {
        // Test case 1: n = 5, k = 2
        long expected1 = 10;
        long result1 = BaseMatch.nCk(5, 2);
        assertEquals(expected1, result1);

        // Test case 2: n = 10, k = 3
        long expected2 = 120;
        long result2 = BaseMatch.nCk(10, 3);
        assertEquals(expected2, result2);

        // Test case 3: n = 0, k = 0
        long expected3 = 1;
        long result3 = BaseMatch.nCk(0, 0);
        assertEquals(expected3, result3);

        // Test case 4: n = 7, k = 7
        long expected4 = 1;
        long result4 = BaseMatch.nCk(7, 7);
        assertEquals(expected4, result4);

        // Test case 5: n = 4, k = 5
        long expected5 = 0;
        long result5 = BaseMatch.nCk(4, 5);
        assertEquals(expected5, result5);
    }",3,3,3,3
"protected static double log2(double value) {
    return Math.log(value) / LOG_2;
}","@Test public void testLog2() { assertEquals(0.0, BaseMatch.log2(0.0), 0.0); assertEquals(0.0, BaseMatch.log2(0.0), 0.0); assertEquals(0.0, BaseMatch.log2(0.0), 0.0); assertEquals(0.0, BaseMatch.log2(0.0), 0.0); assertEquals(0.0, BaseMatch.log2(0.0), 0.0); assertEquals(0.0, BaseMatch.log2(0.0), 0.0); assertEquals(0.0, BaseMatch.log2(0.0), 0.0); assertEquals(0.0, BaseMatch.log2(0.0), 0.0); assertEquals(0.0, BaseMatch.log2(0.0), 0.0); assertEquals(0.0, BaseMatch.log2(0.0), 0.0); assertEquals(0.0, BaseMatch.log2(0.0), 0.0); assertEquals(0.0, BaseMatch.log2(0.0), 0.0); assertEquals(0.0, BaseMatch.log2(0.0), 0.0); assertEquals(0.0, BaseMatch.log2(0.0), 0.0); assertEquals(0.0, BaseMatch.log2(0.0), 0.0); }
",1,1,1,1,"@Test(timeout = 4000)
public void test03() throws Throwable {
    double double0 = BaseMatch.log2(1.0);
    assertEquals(0.0, double0, 0.01);
}",3,3,3,3,"    @Test
    public void testLog2() {
        double value = 8.0;
        double expected = 3.0;
        double delta = 0.0001;

        double result = BaseMatch.log2(value);

        assertEquals(expected, result, delta);
    }",3,3,3,3
"@Override
public String getToken() {
    return this.token;
}","@Test public void testGetToken() throws Exception { Configuration configuration = new Configuration(); BaseMatch match = new BaseMatch(""test"", configuration, 0, 0); assertEquals(""test"", match.getToken()); }
",3,3,3,3,"@Test(timeout = 4000)
public void test06() throws Throwable {
    SequenceMatch sequenceMatch0 = new SequenceMatch(""d"", (Configuration) null, 1067, 0);
    sequenceMatch0.getToken();
    assertEquals(0, sequenceMatch0.getEndIndex());
    assertEquals(4.700439718141093, sequenceMatch0.getAverageEntropy(), 0.01);
    assertEquals(1067, sequenceMatch0.getStartIndex());
}",2,2,1,1,"@Test
public void testGetToken() {
    SequenceMatch sequenceMatch0 = new SequenceMatch(""d"", (Configuration) null, 1067, 0);
    sequenceMatch0.getToken();
    assertEquals(0, sequenceMatch0.getEndIndex());
    assertEquals(4.700439718141093, sequenceMatch0.getAverageEntropy(), 0.01);
    assertEquals(1067, sequenceMatch0.getStartIndex());

    String token = sequenceMatch0.getToken();
    assertNotNull(token);
    assertEquals(""d"", token);
}",3,3,3,3
"public List<Match> match(final Configuration configuration, final String password) {
    List<Match> dateMatches = new ArrayList<>();
    dateMatches.addAll(matchDatesWithoutSeparator(configuration, password));
    dateMatches.addAll(matchDatesWithSeparator(configuration, password));
    return dateMatches;
}",,1,1,1,1,"@Test(timeout = 4000)
public void test0() throws Throwable {
    DateMatcher dateMatcher0 = new DateMatcher();
    Configuration configuration0 = null;
    dateMatcher0.match((Configuration) null, ""H9U6>-YTDMwJ8,-kYl"");
    dateMatcher0.match((Configuration) null, ""H9U6>-YTDMwJ8,-kYl"");
    dateMatcher0.match((Configuration) null, """");
    dateMatcher0.match((Configuration) null, """");
    dateMatcher0.match((Configuration) null, ""M?>gmQg^g2c7:OU0"");
    dateMatcher0.match((Configuration) null, ""qcZybJxND=]]Ut{Z"");
    dateMatcher0.match((Configuration) null, ""M?>gmQg^g2c7:OU0"");
    dateMatcher0.match((Configuration) null, ""M?>gmQg^g2c7:OU0"");
    dateMatcher0.match((Configuration) null, ""+ex."");
    dateMatcher0.match((Configuration) null, ""M?>gmQg^g2c7:OU0"");
    dateMatcher0.match((Configuration) null, ""MOo;e9=|f9Y?ETnA"");
    dateMatcher0.match((Configuration) null, ""+ex."");
    dateMatcher0.match((Configuration) null, ""qcZybJxND=]]Ut{Z"");
    dateMatcher0.match((Configuration) null, ""M?>gmQg^g2c7:OU0"");
    dateMatcher0.match((Configuration) null, ""M?>gmQg^g2c7:OU0"");
    dateMatcher0.match((Configuration) null, ""H9U6>-YTDMwJ8,-kYl"");
    dateMatcher0.match((Configuration) null, """");
    dateMatcher0.match((Configuration) null, ""M?>gmQg^g2c7:OU0"");
    dateMatcher0.match((Configuration) null, ""H9U6>-YTDMwJ8,-kYl"");
    dateMatcher0.match((Configuration) null, ""H9U6>-YTDMwJ8,-kYl"");
    dateMatcher0.match((Configuration) null, ""FbZ56T8hJ"");
    // Undeclared exception!
    try {
        dateMatcher0.match((Configuration) null, ""0 0200"");
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        // 
        // No match found
        // 
        verifyException(""java.util.regex.Matcher"", e);
    }
}",1,1,1,1,"@Test
public void testMatch() {
    DateMatcher dateMatcher = new DateMatcher();

    // Fix the buggy line
    Configuration configuration = null;

    String password = ""password123"";
    List<Match> dateMatches = dateMatcher.match(configuration, password);
    assertNotNull(dateMatches);
    assertTrue(dateMatches.isEmpty());
}",3,3,3,3
"public void setMatchLength(int best_match_length) {
    this.best_match_length = best_match_length;
}","@Test public void testSetMatchLength() { BestMatches bestMatches = new BestMatches(); bestMatches.setMatchLength(10); assertEquals(10, bestMatches.getMatchLength()); }
",3,3,3,3,"@Test(timeout = 4000)
public void test0() throws Throwable {
    BestMatches bestMatches0 = new BestMatches();
    bestMatches0.setMatchLength(49);
    int int0 = bestMatches0.getMatchLength();
    assertEquals(49, int0);
}",3,3,3,3,"    @Test
    public void testSetMatchLength() {
        BestMatches bestMatches = new BestMatches();
        int expectedMatchLength = 10;
        
        bestMatches.setMatchLength(expectedMatchLength);
        int actualMatchLength = bestMatches.getMatchLength();
        
        assertEquals(expectedMatchLength, actualMatchLength);
    }",3,3,3,3
"public int getMatchLength() {
    return this.best_match_length;
}","@Test public void testGetMatchLength() { Assert.assertEquals(0, this.best_matches.getMatchLength()); }
",3,2,2,2,"@Test(timeout = 4000)
public void test0() throws Throwable {
    BestMatches bestMatches0 = new BestMatches();
    bestMatches0.setMatchLength(49);
    int int0 = bestMatches0.getMatchLength();
    assertEquals(49, int0);
}",3,3,3,3,"    @Test
    public void testGetMatchLength() {
        // Create an instance of BestMatches
        BestMatches bestMatches = new BestMatches();

        // Set the best match length
        bestMatches.setMatchLength(10);

        // Call the getMatchLength() method
        int matchLength = bestMatches.getMatchLength();

        // Assert that the returned match length is equal to the set match length
        assertEquals(10, matchLength);
    }",3,3,3,3
"public void setBestMatches(List<Match> best_matches) {
    this.best_matches = best_matches;
}","@Test public void testSetBestMatches() { List<Match> matches = new ArrayList<Match>(); matches.add(new Match(1, 2)); matches.add(new Match(2, 3)); matches.add(new Match(3, 4)); matches.add(new Match(4, 5)); matches.add(new Match(5, 6)); matches.add(new Match(6, 7)); matches.add(new Match(6, 7)); matches.add(new Match(6, 7)); matches.add(new Match(6, 7)); matches.add(new Match(6, 7)); matches.add(new Match(6, 7)); matches.add(new Match(6, 7)); matches.add(new Match(6, 7)); matches.add(new Match(6, 7)); matches.add(new Match(6, 7)); matches.add(new Match(6, 7)); matches.add(new Match(6, 7)); matches.add(new Match(6, 7)); matches.add(new Match(6, 7)); matches.add(new Match(6, 7)); matches.add(new Match(6, 7)); matches.add(new Match(6, 7)); matches.add(new Match(6, 7)); matches.add(new Match(6, 7)); matches.add(new Match(6, 7)); matches.add(new Match(6, 7)); matches.add(new Match(6, 7)); matches.add(new Match(6, 7)); matches.add(new Match(6, 7)); matches.add(new Match(6, 7)); matches.add(new Match(6, 7)); matches.add(new Match(6, 7)); matches.add(new Match(6, 7)); matches.add(new Match(6, 7)); matches.add(new Match(6, 7)); matches.add(new Match(6, 7)); matches.add(new Match(6, 7)); matches.add(new Match(6, 7)); matches.add(new Match(6, 7)); matches.add(new Match(6, 7)); matches.add(new Match(6, 7)); matches.add(new Match(6, 7)); matches.add(new Match(6, 7)); matches.add(6, 7)); matches.add(new Match(6, 7)); matches.add(6, 7)); matches.add(6, 7)); matches.add(6, 7); matches.add(6, 7); matches.add(6, 7); matches.add(6, 7); matches.add(6, 7); matches.set(6); assertEquals(6, 7); }
",1,1,1,1,"@Test(timeout = 4000)
public void test2() throws Throwable {
    BestMatches bestMatches0 = new BestMatches();
    bestMatches0.setBestMatches((List<Match>) null);
    bestMatches0.getBestMatches();
    assertEquals(0, bestMatches0.getMatchLength());
}",3,3,3,3,"@Test
public void testSetBestMatches() {
    // Create an instance of BestMatches
    BestMatches bestMatches = new BestMatches();
    
    // Create a new list of matches
    List<Match> newMatches = new ArrayList<>();
    
    // Set the new list of matches using the focal method
    bestMatches.setBestMatches(newMatches);
    
    // Verify that the list of best matches has been updated
    assertEquals(newMatches, bestMatches.getBestMatches());
}",3,3,3,3
"public DictionaryBuilder setExclusion(final boolean exclusion) {
    this.exclusion = exclusion;
    return this;
}","@Test public void testSetExclusion() { final DictionaryBuilder builder = new DictionaryBuilder(); builder.setExclusion(true); }
",2,2,1,1,"@Test(timeout = 4000)
public void test0() throws Throwable {
    DictionaryBuilder dictionaryBuilder0 = new DictionaryBuilder();
    dictionaryBuilder0.setExclusion(true);
    Dictionary dictionary0 = dictionaryBuilder0.createDictionary();
    assertTrue(dictionary0.isExclusion());
}",2,2,2,2,"@Test
public void testSetExclusion() {
    DictionaryBuilder builder = new DictionaryBuilder();
    DictionaryBuilder result = builder.setExclusion(true);

    Dictionary dictionary = result.createDictionary();
    assertTrue(dictionary.isExclusion());

    result = builder.setExclusion(false);
    dictionary = result.createDictionary();
    assertFalse(dictionary.isExclusion());
}",3,3,3,3
"public Dictionary createDictionary() {
    return new Dictionary(dictionary_name, dictonary, exclusion);
}","@Test public void testCreateDictionary() { DictionaryBuilder builder = new DictionaryBuilder(); builder.addWord(""test"", 1); builder.addWord(""test"", 2); builder.addWord(""test"", 3); builder.addWord(""test"", 4); builder.addWord(""test"", 5); builder.addWord(""test"", 5); builder.addWord(""test"", 5); builder.addWord(""test"", 5); builder.addWord(""test"", 5); builder.addWord(""test"", 5); builder.addWord(""test"", 5); builder.addWord(""test"", 5); builder.addWord(""test"", 5); builder.addWord(""test"", 5); builder.addWord(""test"", 5); builder.addWord(""test"", 5); builder.addWord(""test"", 5); builder.addWord(""test"", 5); builder.addWord(""test"", 5); builder.addWord(""test"", 5); builder.addWord(""test"", 5); builder.addWord(""test"", 5); builder.addWord(""test"", 5); builder.addWord(""test"", 5); builder.addWord(""test"", 5); builder.addWord(""test"", 5); builder.addWord(""test"", 5); builder.addWord(""test"", 5); builder.addWord(""test"", 5); builder.addWord(""test"", 5); builder.addWord(""test"", 5); builder.addWord(""test"", 5); builder.addWord(""test"", 5); builder.addWord(""test"", 5); builder.addWord(""test"", 5); builder.addWord(""test"", 5); builder.addWord(""test"", 5); builder.addWord(""test"", 5); builder.addWord(""test"", 5); builder.addWord(""test"", 5); builder.addWord(""test"", 5); builder.addWord(""test"", 5); builder.addWord(""test"", 5); builder.addWord(""test"", 5); builder.addWord(""test"", 5); builder.addWord(""test"", 5); builder.addWord(""test"", 5); builder.addWord(""test"", 5); builder.addWord(""test"", 5); builder.addWord(""test"", 5); builder.addWord(""test"", 5); builder.addWord(""test"", 5); builder.addWord(""test"", 5); builder.addWord(""test"", 5); builder.addWord(""test"", 5); builder.addWord(""test"", 5); builder.addWord(""test"", 5); builder.addWord(""test"", 5); builder.addWord(""test"", 5); builder.addWord(""test"", 5); builder.addWord(""test"", 5); builder.addWord(""test"", 5); builder.addWord(""test"", 5); builder.addWord(""test"", 5); builder.addWord(""test"", 5); builder.addWord(""test"", 5); builder.addWord(""test"", 5); builder.addWord(""test"", 5); builder.addWord(""test"", 5); builder.addWord(""test"", 5); builder.addWord(""test"", 5); builder.addWord(""test"", 5); builder.addWord(""test"", 5); builder.addWord(""test"", 5); builder.addWord(""test"", 5); builder.addWord(""test"", 5); builder.addWord(""test"", 5); builder.addWord(""test"", 5); builder.addWord(""test"", 5); builder.addWord(""test"", 5); builder.addWord(""test"", 5); builder.addWord(""test"", 5); builder.addWord(""test"", 5); builder.addWord(""test"", 5); builder.addWord(""test"", 5); builder.addWord(""test"", 5); builder.addWord(""test"", 5); builder.addWord(""test"", 5); builder.addWord(""test"", 5); builder.addWord(""test"", 5); builder.addWord(""test"", 5); builder.addWord(""test"", 5); builder.addWord(""test"", 5); builder.addWord(""test"", 5); builder.addWord(""test"", 5); builder.addWord(""test"", 5); builder.addWord(""test"", 5); builder.addWord(""test"", 5); builder.addWord(""test"", 5); }
",1,1,1,1,"@Test(timeout = 4000)
public void test0() throws Throwable {
    DictionaryBuilder dictionaryBuilder0 = new DictionaryBuilder();
    dictionaryBuilder0.setExclusion(true);
    Dictionary dictionary0 = dictionaryBuilder0.createDictionary();
    assertTrue(dictionary0.isExclusion());
}",2,2,2,2,"    @Test
    public void testCreateDictionary() {
        // Given
        String dictionaryName = ""English"";
        boolean exclusion = true;
        DictionaryBuilder dictionaryBuilder = new DictionaryBuilder();
        dictionaryBuilder.setDictionaryName(dictionaryName);
        dictionaryBuilder.setExclusion(exclusion);
        
        // When
        Dictionary dictionary = dictionaryBuilder.createDictionary();
        
        // Then
        assertNotNull(dictionary);
        assertEquals(dictionaryName, dictionary.getDictionaryName());
        assertEquals(exclusion, dictionary.isExclusion());
    }",3,3,3,3
"public DictionaryBuilder addWords(final Collection<String> words, final int rank) {
    for (final String word : words) {
        addWord(word, rank);
    }
    return this;
}","@Test public void testAddWords() { final DictionaryBuilder builder = new DictionaryBuilder(); builder.addWords(Arrays.asList(""a"", ""b"", ""c"")); assertEquals(""a"", builder.getDictionaryName()); assertEquals(""a"", builder.getDictionaryName()); assertEquals(""b"", builder.getDictionaryName()); assertEquals(""c"", builder.getDictionaryName()); assertEquals(""c"", builder.getDictionaryName()); assertEquals(""c"", builder.getDictionaryName()); assertEquals(""c"", builder.getDictionaryName()); assertEquals(""c"", builder.getDictionaryName()); assertEquals(""c"", builder.getDictionaryName()); assertEquals(""c"", builder.getDictionaryName()); assertEquals(""c"", builder.getDictionaryName()); assertEquals(""c"", builder.getDictionaryName()); assertEquals(""c"", builder.getDictionaryName()); assertEquals(""c"", builder.getDictionaryName()); assertEquals(""c"", builder.getDictionaryName()); assertEquals(""c"", builder.getDictionaryName()); assertEquals(""c"", builder.getDictionaryName()); assertEquals(""c"", builder.getDictionaryName()); assertEquals(""c"", builder.getDictionaryName()); assertEquals(""c"", builder.getDictionaryName()); assertEquals(""c"", builder.getDictionaryName()); assertEquals(""c"", builder.getDictionaryName()); assertEquals(""c"", builder.getDictionaryName()); assertEquals(""c"", builder.getDictionaryName()); assertEquals(""c"", builder.getDictionaryName()); assertEquals(""c"", builder.getDictionaryName()); assertEquals(""c"", builder.getDictionaryName()); assertEquals(""c"", builder.getDictionaryName()); assertEquals(""c"", builder.getDictionaryName()); assertEquals(""c"", builder.getDictionaryName()); assertEquals(""c"", builder.getDictionaryName()); assertEquals(""c"", builder.getDictionaryName()); assertEquals(""c"", builder.getDictionaryName()); assertEquals(""c"", builder.getDictionaryName()); }
",1,1,1,1,"@Test(timeout = 4000)
public void test1() throws Throwable {
    DictionaryBuilder dictionaryBuilder0 = new DictionaryBuilder();
    // Undeclared exception!
    try {
        dictionaryBuilder0.addWords((Collection<String>) null, 0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        // 
        // no message in exception (getMessage() returned null)
        // 
        verifyException(""me.gosimple.nbvcxz.resources.DictionaryBuilder"", e);
    }
}",1,1,1,1,"@Test
public void testAddWords() {
    // Create a new instance of DictionaryBuilder
    DictionaryBuilder dictionaryBuilder = new DictionaryBuilder();
    
    // Create a collection of words
    Collection<String> words = Arrays.asList(""word1"", ""word2"", ""word3"");
    
    // Call the addWords method with the collection of words and a rank
    dictionaryBuilder.addWords(words, 1);
    
    // Assert that the words have been added to the dictionary
    // You can add your own assertion here based on the expected behavior of the addWords method
    
    // Assert that the addWords method returns the DictionaryBuilder object
    // You can add your own assertion here based on the expected behavior of the addWords method
}",2,2,1,2
"public String getWarningKey() {
    return warning;
}","@Test public void testGetWarningKey() { Configuration configuration = new Configuration(); Feedback feedback = new Feedback(configuration, ""result""); assertEquals(""result"", feedback.getWarningKey()); }
",3,3,3,3,"@Test(timeout = 4000)
public void test00() throws Throwable {
    Feedback feedback0 = new Feedback((Configuration) null, "",Yc/F/M"");
    String string0 = feedback0.getWarningKey();
    assertNull(string0);
}",3,3,3,3,"@Test(timeout = 4000)
public void testGetWarningKey() throws Throwable {
    // Create a Feedback object with a null warning
    Feedback feedback = new Feedback(null, "",Yc/F/M"");

    // Call the getWarningKey() method
    String warningKey = feedback.getWarningKey();

    // Assert that the warning key is null
    assertNull(warningKey);
}",3,3,3,3
"public String getResult() {
    return result;
}","@Test public void testGetResult() { Configuration configuration = new Configuration(); Feedback feedback = new Feedback(configuration, ""result""); assertEquals(""result"", feedback.getResult()); }
",3,3,3,3,"@Test(timeout = 4000)
public void test01() throws Throwable {
    LinkedList<PasswordMatcher> linkedList0 = new LinkedList<PasswordMatcher>();
    HashMap<String, Long> hashMap0 = new HashMap<String, Long>();
    LinkedList<Dictionary> linkedList1 = new LinkedList<Dictionary>();
    HashMap<Character, Character[]> hashMap1 = new HashMap<Character, Character[]>();
    Pattern pattern0 = Pattern.compile(""6D@nHz?M5VNtNSS>rno"");
    Integer integer0 = new Integer((-1478));
    Locale locale0 = new Locale(""6D@nHz?M5VNtNSS>rno"", """");
    Configuration configuration0 = new Configuration(linkedList0, hashMap0, linkedList1, (List<AdjacencyGraph>) null, hashMap1, pattern0, (Double) null, integer0, locale0, true, (-1478));
    String[] stringArray0 = new String[4];
    Feedback feedback0 = new Feedback(configuration0, """", ""qLChsId"", stringArray0);
    String string0 = feedback0.getWarningKey();
    assertEquals(""qLChsId"", string0);
    assertEquals("""", feedback0.getResult());
}",1,1,1,1,"@Test
public void testGetResult() {
    LinkedList<PasswordMatcher> linkedList0 = new LinkedList<PasswordMatcher>();
    HashMap<String, Long> hashMap0 = new HashMap<String, Long>();
    LinkedList<Dictionary> linkedList1 = new LinkedList<Dictionary>();
    HashMap<Character, Character[]> hashMap1 = new HashMap<Character, Character[]>();
    Pattern pattern0 = Pattern.compile(""6D@nHz?M5VNtNSS>rno"");
    Integer integer0 = new Integer((-1478));
    Locale locale0 = new Locale(""6D@nHz?M5VNtNSS>rno"", """");
    Configuration configuration = new Configuration(linkedList0, hashMap0, linkedList1, (List<AdjacencyGraph>) null, hashMap1, pattern0, (Double) null, integer0, locale0, true, (-1478));

    String result = ""Success"";
    Feedback feedback = new Feedback(configuration, result);
    assertEquals(result, feedback.getResult());
}",1,2,2,2
"public List<String> getSuggestionKeys() {
    return suggestions;
}","@Test public void testGetSuggestionKeys() { final Feedback feedback = new Feedback(configuration, ""result""); assertEquals(1, feedback.getSuggestionKeys().size()); assertEquals(""result"", feedback.getSuggestionKeys().get(0)); assertEquals(""result"", feedback.getSuggestionKeys().get(1)); assertEquals(""warning"", feedback.getSuggestionKeys().get(2)); assertEquals(""warning"", feedback.getSuggestionKeys().get(3)); assertEquals(""warning"", feedback.getSuggestionKeys().get(4)); assertEquals(""warning"", feedback.getSuggestionKeys().get(5)); assertEquals(""warning"", feedback.getSuggestionKeys().get(6)); assertEquals(""warning"", feedback.getSuggestionKeys().get(7)); assertEquals(""warning"", feedback.getSuggestionKeys().get(8)); assertEquals(""warning"", feedback.getSuggestionKeys().get(8)); assertEquals(""warning"", feedback.getSuggestionKeys().get(8)); assertEquals(""warning"", feedback.getSuggestionKeys().get(8)); assertEquals(""warning"", feedback.getSuggestionKeys().get(8)); assertEquals(""warning"", feedback.getSuggestionKeys().get(8)); assertEquals(""warning"", feedback.getSuggestionKeys().get(8)); assertEquals(""warning"", feedback.getSuggestionKeys().get(8)); }
",1,1,1,1,"@Test(timeout = 4000)
public void test02() throws Throwable {
    Feedback feedback0 = new Feedback((Configuration) null, """");
    List<String> list0 = feedback0.getSuggestionKeys();
    assertEquals(0, list0.size());
}",3,3,3,3,"@Test
public void testGetSuggestionKeys() {
    Configuration configuration = null; // Initialize configuration variable

    String result = ""Success"";
    String warning = ""Warning"";
    String[] suggestions = {""suggestion1"", ""suggestion2"", ""suggestion3""};
    Feedback feedback = new Feedback(configuration, result, warning, suggestions);
    List<String> suggestionKeys = feedback.getSuggestionKeys();
    assertNotNull(suggestionKeys);
    assertEquals(3, suggestionKeys.size());
    assertTrue(suggestionKeys.contains(""suggestion1""));
    assertTrue(suggestionKeys.contains(""suggestion2""));
    assertTrue(suggestionKeys.contains(""suggestion3""));
}",3,2,3,3
"public boolean isDistanceCalc() {
    return distanceCalc;
}","@Test public void testIsDistanceCalc() throws Exception { Configuration config = new Configuration(Arrays.asList(new PasswordMatcher(""test""), new HashMap<String, Long>(), new HashMap<String, Long>(), new HashMap<String, Long>(), new HashMap<String, Long>(), new HashMap<String, Long>(), new HashMap<Character, Character[]>(), new HashMap<Character, Character[]>(), new HashMap<Character, Character[]>(), new HashMap<Character, Character[]>(), new HashMap<Character, Character[]>(), new Pattern(), Double.NaN, Integer.NaN, Locale.US, true, 0); assertTrue(config.isDistanceCalc()); }
",1,1,1,1,"@Test(timeout = 4000)
public void test00() throws Throwable {
    LinkedList<PasswordMatcher> linkedList0 = new LinkedList<PasswordMatcher>();
    LinkedList<Dictionary> linkedList1 = new LinkedList<Dictionary>();
    LinkedList<AdjacencyGraph> linkedList2 = new LinkedList<AdjacencyGraph>();
    HashMap<Character, Character[]> hashMap0 = new HashMap<Character, Character[]>();
    Pattern pattern0 = Pattern.compile("""");
    Double double0 = new Double(278.1067);
    Integer integer0 = new Integer(0);
    Locale locale0 = Locale.SIMPLIFIED_CHINESE;
    Configuration configuration0 = new Configuration(linkedList0, (Map<String, Long>) null, linkedList1, linkedList2, hashMap0, pattern0, double0, integer0, locale0, true, 0);
    boolean boolean0 = configuration0.isDistanceCalc();
    assertTrue(boolean0);
}",2,2,2,2,"@Test
public void testIsDistanceCalc() {
    List<PasswordMatcher> passwordMatchers = new LinkedList<>();
    Map<String, Long> guessTypes = new HashMap<>();
    List<Dictionary> dictionaries = new LinkedList<>();
    List<AdjacencyGraph> adjacencyGraphs = new LinkedList<>();
    Map<Character, Character[]> leetTable = new HashMap<>();
    Pattern yearPattern = Pattern.compile("""");
    Double minimumEntropy = new Double(278.1067);
    Integer maxLength = new Integer(0);
    Locale locale = Locale.SIMPLIFIED_CHINESE;
    Configuration configuration = new Configuration(passwordMatchers, guessTypes, dictionaries, adjacencyGraphs, leetTable, yearPattern, minimumEntropy, maxLength, locale, true, 0);

    boolean result = configuration.isDistanceCalc();

    assertTrue(result);
}",2,2,2,2
"public Double getMinimumEntropy() {
    return minimumEntropy;
}","@Test public void testGetMinimumEntropy() { assertEquals(0.0, configuration.getMinimumEntropy(), 0.0); }
",2,2,2,2,"@Test(timeout = 4000)
public void test06() throws Throwable {
    LinkedList<PasswordMatcher> linkedList0 = new LinkedList<PasswordMatcher>();
    LinkedList<Dictionary> linkedList1 = new LinkedList<Dictionary>();
    LinkedList<AdjacencyGraph> linkedList2 = new LinkedList<AdjacencyGraph>();
    HashMap<Character, Character[]> hashMap0 = new HashMap<Character, Character[]>();
    Pattern pattern0 = Pattern.compile("""");
    Double double0 = new Double(278.1067);
    Integer integer0 = new Integer(0);
    Locale locale0 = Locale.SIMPLIFIED_CHINESE;
    Configuration configuration0 = new Configuration(linkedList0, (Map<String, Long>) null, linkedList1, linkedList2, hashMap0, pattern0, double0, integer0, locale0, true, 0);
    configuration0.getMinimumEntropy();
    assertTrue(configuration0.isDistanceCalc());
}",1,2,2,1,"@Test
public void testGetMinimumEntropy() {
    LinkedList<PasswordMatcher> linkedList0 = new LinkedList<PasswordMatcher>();
    LinkedList<Dictionary> linkedList1 = new LinkedList<Dictionary>();
    LinkedList<AdjacencyGraph> linkedList2 = new LinkedList<AdjacencyGraph>();
    HashMap<Character, Character[]> hashMap0 = new HashMap<Character, Character[]>();
    Pattern pattern0 = Pattern.compile("""");
    Double double0 = new Double(278.1067);
    Integer integer0 = new Integer(0);
    Locale locale0 = Locale.SIMPLIFIED_CHINESE;
    Configuration configuration = new Configuration(linkedList0, null, linkedList1, linkedList2, hashMap0, pattern0, double0, integer0, locale0, true, 0);

    Double minimumEntropy = configuration.getMinimumEntropy();

    assertNotNull(minimumEntropy);
    assertEquals(278.1067, minimumEntropy, 0.001);
}",1,2,3,2
"public Map<Character, Character[]> getLeetTable() {
    return leetTable;
}","@Test public void testGetLeetTable() { Map<Character, Character[]> leetTable = configuration.getLeetTable(); assertEquals(0, leetTable.size()); }
",3,3,3,3,"@Test(timeout = 4000)
public void test12() throws Throwable {
    LinkedList<PasswordMatcher> linkedList0 = new LinkedList<PasswordMatcher>();
    HashMap<String, Long> hashMap0 = new HashMap<String, Long>();
    LinkedList<Dictionary> linkedList1 = new LinkedList<Dictionary>();
    LinkedList<AdjacencyGraph> linkedList2 = new LinkedList<AdjacencyGraph>();
    Pattern pattern0 = Pattern.compile("""");
    Integer integer0 = new Integer((-439));
    Locale locale0 = Locale.TAIWAN;
    Configuration configuration0 = new Configuration(linkedList0, hashMap0, linkedList1, linkedList2, (Map<Character, Character[]>) null, pattern0, (Double) null, integer0, locale0, true, 0L);
    Map<Character, Character[]> map0 = configuration0.getLeetTable();
    assertNull(map0);
    assertTrue(configuration0.isDistanceCalc());
}",1,2,2,2,"@Test
public void testGetLeetTable() {
    List<PasswordMatcher> passwordMatchers = new LinkedList<>();
    Map<String, Long> guessTypes = new HashMap<>();
    List<Dictionary> dictionaries = new LinkedList<>();
    List<AdjacencyGraph> adjacencyGraphs = new LinkedList<>();
    Map<Character, Character[]> leetTable = new HashMap<>();
    Pattern yearPattern = Pattern.compile("""");
    Double minimumEntropy = null;
    Integer maxLength = new Integer(0);
    Locale locale = Locale.getDefault();
    boolean distanceCalc = false;
    long combinationAlgorithmTimeout = 0L;
    Configuration configuration = new Configuration(passwordMatchers, guessTypes, dictionaries, adjacencyGraphs, leetTable, yearPattern, minimumEntropy, maxLength, locale, distanceCalc, combinationAlgorithmTimeout);
    Map<Character, Character[]> result = configuration.getLeetTable();
    
    // Assertion
    assertNotNull(result);
    assertEquals(leetTable, result);
}",2,2,3,2
"public Map<String, Long> getGuessTypes() {
    return guessTypes;
}","@Test public void testGetGuessTypes() throws Exception { Map<String, Long> guessTypes = configuration.getGuessTypes(); Assert.assertEquals(2, guessTypes.size()); Assert.assertEquals(1, guessTypes.get(""1"")); Assert.assertEquals(2, guessTypes.get(""2"")); Assert.assertEquals(2, guessTypes.get(""3"")); Assert.assertEquals(2, guessTypes.get(""4"")); Assert.assertEquals(2, guessTypes.get(""5"")); Assert.assertEquals(2, guessTypes.get(""6"")); Assert.assertEquals(2, guessTypes.get(""7"")); Assert.assertEquals(2, guessTypes.get(""8"")); Assert.assertEquals(2, guessTypes.get(""8"")); Assert.assertEquals(2, guessTypes.get(""8"")); Assert.assertEquals(2, guessTypes.get(""8"")); Assert.assertEquals(2, guessTypes.get(""8"")); Assert.assertEquals(2, guessTypes.get(""8"")); Assert.assertEquals(2, guessTypes.get(""8"")); Assert.assertEquals(2, guessTypes.get(""8"")); Assert.assertEquals(2, guessTypes.get(""8"")); Assert.assertEquals(2, guessTypes.get(""8"")); Assert.assertEquals(2, guessTypes.get(""8"")); Assert.assertEquals(2, guessTypes.get(""8"")); Assert.assertEquals(2, guessTypes.get(""8"")); Assert.assertEquals(2, guessTypes.get(""8"")); Assert.assertEquals(2, guessTypes.get(""8"")); Assert.assertEquals(2, guessTypes.get(""8"")); Assert.assertEquals(2, guessTypes.get(""8"")); Assert.assertEquals(2, guessTypes.get(""8"")); Assert.assertEquals(2, guessTypes.get(""8"")); Assert.assertEquals(2, guessTypes.get(""8"")); Assert.assertEquals(2, guessTypes.get(""8"")); Assert.assertEquals(2, guessTypes.get(""8"")); Assert.assertEquals(2, guessTypes.get(""8"")); }
",1,1,1,1,"@Test(timeout = 4000)
public void test14() throws Throwable {
    LinkedList<PasswordMatcher> linkedList0 = new LinkedList<PasswordMatcher>();
    LinkedList<Dictionary> linkedList1 = new LinkedList<Dictionary>();
    LinkedList<AdjacencyGraph> linkedList2 = new LinkedList<AdjacencyGraph>();
    HashMap<Character, Character[]> hashMap0 = new HashMap<Character, Character[]>();
    Pattern pattern0 = Pattern.compile("""");
    Double double0 = new Double(278.1067);
    Integer integer0 = new Integer(0);
    Locale locale0 = Locale.SIMPLIFIED_CHINESE;
    Configuration configuration0 = new Configuration(linkedList0, (Map<String, Long>) null, linkedList1, linkedList2, hashMap0, pattern0, double0, integer0, locale0, true, 0);
    Map<String, Long> map0 = configuration0.getGuessTypes();
    assertTrue(configuration0.isDistanceCalc());
    assertNull(map0);
}",1,1,2,1,"@Test
public void testGetGuessTypes() {
    // Create test data
    List<PasswordMatcher> passwordMatchers = new LinkedList<>();
    List<Dictionary> dictionaries = new LinkedList<>();
    List<AdjacencyGraph> adjacencyGraphs = new LinkedList<>();
    Map<Character, Character[]> leetTable = new HashMap<>();
    Pattern yearPattern = Pattern.compile("""");
    Double minimumEntropy = new Double(278.1067);
    Integer maxLength = new Integer(0);
    Locale locale = Locale.SIMPLIFIED_CHINESE;
    boolean distanceCalc = true;
    long combinationAlgorithmTimeout = 0;

    // Create Configuration object
    Configuration configuration = new Configuration(passwordMatchers, null, dictionaries, adjacencyGraphs, leetTable, yearPattern, minimumEntropy, maxLength, locale, distanceCalc, combinationAlgorithmTimeout);

    // Call the focal method
    Map<String, Long> guessTypes = configuration.getGuessTypes();

    // Assert the result
    assertNull(guessTypes);
}",2,2,2,2
"public List<Dictionary> getDictionaries() {
    return dictionaries;
}","@Test public void testGetDictionary() throws Exception { List<Dictionary> dictionaries = new ArrayList<Dictionary>(); dictionaries.add(new Dictionary()); dictionaries.add(new Dictionary()); dictionaries.add(new Dictionary()); dictionaries.add(new Dictionary()); dictionaries.add(new Dictionary()); dictionaries.add(new Dictionary()); dictionaries.add(new Dictionary()); dictionaries.add(new Dictionary()); dictionaries.add(new Dictionary()); dictionaries.add(new Dictionary()); dictionaries.add(new Dictionary()); dictionaries.add(new Dictionary()); dictionaries.add(new Dictionary()); dictionaries.add(new Dictionary()); dictionaries.add(new Dictionary()); dictionaries.add(new Dictionary()); dictionaries.add(new Dictionary()); dictionaries.add(new Dictionary()); dictionaries.add(new Dictionary()); dictionaries.add(new Dictionary()); dictionaries.add(new Dictionary()); dictionaries.add(new Dictionary()); dictionaries.add(new Dictionary()); dictionaries.add(new Dictionary()); dictionaries.add(new Dictionary()); dictionaries.add(new Dictionary()); dictionaries.add(new Dictionary()); dictionaries.add(new Dictionary()); dictionaries.add(new Dictionary()); dictionaries.add(new Dictionary()); dictionaries.add(new Dictionary()); dictionaries.add(new Dictionary()); dictionaries.add(new Dictionary()); dictionaries.add(new Dictionary()); dictionaries.add(new Dictionary()); dictionaries.add(new Dictionary()); dictionaries.add(new Dictionary()); dictionaries.add(new Dictionary()); dictionaries.add(new Dictionary()); dictionaries.add(new Dictionary()); dictionaries.add(new Dictionary()); dictionaries.add(new Dictionary()); dictionaries.add(new Dictionary()); dictionaries.add(new Dictionary()); dictionaries.add(new Dictionary()); dictionaries.add(new Dictionary()); dictionaries.add(new Dictionary()); dictionaries.add(new Dictionary()); dictionaries.add(new Dictionary()); dictionaries.add(new Dictionary()); dictionaries.add(new Dictionary()); dictionaries.add(new Dictionary()); dictionaries.add(new Dictionary()); dictionaries.add(new Dictionary()); dictionaries.add(new Dictionary()); assertEquals(dictionaries, configuration.getDictionary()); }
",1,1,1,1,"@Test(timeout = 4000)
public void test16() throws Throwable {
    LinkedList<PasswordMatcher> linkedList0 = new LinkedList<PasswordMatcher>();
    HashMap<String, Long> hashMap0 = new HashMap<String, Long>();
    LinkedList<AdjacencyGraph> linkedList1 = new LinkedList<AdjacencyGraph>();
    HashMap<Character, Character[]> hashMap1 = new HashMap<Character, Character[]>();
    Pattern pattern0 = Pattern.compile(""me.gosimple.nbvcxz.resources.Configuration"");
    Double double0 = new Double((-1172.9158265564326));
    Integer integer0 = new Integer(1);
    Locale locale0 = Locale.FRANCE;
    Configuration configuration0 = new Configuration(linkedList0, hashMap0, (List<Dictionary>) null, linkedList1, hashMap1, pattern0, double0, integer0, locale0, true, 0L);
    List<Dictionary> list0 = configuration0.getDictionaries();
    assertNull(list0);
    assertTrue(configuration0.isDistanceCalc());
}",1,2,2,1,"@Test
public void testGetDictionaries() {
    List<PasswordMatcher> passwordMatchers = new LinkedList<>();
    Map<String, Long> guessTypes = new HashMap<>();
    List<Dictionary> dictionaries = new LinkedList<>();
    List<AdjacencyGraph> adjacencyGraphs = new LinkedList<>();
    Map<Character, Character[]> leetTable = new HashMap<>();
    Pattern yearPattern = Pattern.compile(""me.gosimple.nbvcxz.resources.Configuration"");
    Double minimumEntropy = new Double((-1172.9158265564326));
    Integer maxLength = new Integer(1);
    Locale locale = Locale.FRANCE;
    boolean distanceCalc = true;
    long combinationAlgorithmTimeout = 0L;
    Configuration configuration = new Configuration(passwordMatchers, guessTypes, dictionaries, adjacencyGraphs, leetTable, yearPattern, minimumEntropy, maxLength, locale, distanceCalc, combinationAlgorithmTimeout);
    List<Dictionary> result = configuration.getDictionaries();
    
    // Assertion
    assertNotNull(result);
    assertEquals(dictionaries, result);
}",2,3,3,2
"public List<AdjacencyGraph> getAdjacencyGraphs() {
    return adjacencyGraphs;
}","@Test public void testGetAdjacencyGraphs() { List<AdjacencyGraph> adjacencyGraphs = new ArrayList<AdjacencyGraph>(); adjacencyGraphs.add(new AdjacencyGraph(null, null, null)); adjacencyGraphs.add(new AdjacencyGraph(null, null, null)); adjacencyGraphs.add(new AdjacencyGraph(null, null, null)); adjacencyGraphs.add(new AdjacencyGraph(null, null, null)); adjacencyGraphs.add(new AdjacencyGraph(null, null, null)); adjacencyGraphs.add(new AdjacencyGraph(null, null, null)); adjacencyGraphs.add(new AdjacencyGraph(null, null, null)); adjacencyGraphs.add(new AdjacencyGraph(null, null, null)); adjacencyGraphs.add(new AdjacencyGraph(null, null, null)); adjacencyGraphs.add(new AdjacencyGraph(null, null, null)); adjacencyGraphs.add(new AdjacencyGraph(null, null, null)); adjacencyGraphs.add(new AdjacencyGraph(null, null, null, null)); adjacencyGraphs.add(new AdjacencyGraph(null, null, null)); adjacencyGraphs.add(new AdjacencyGraph(null, null, null)); adjacencyGraphs.add(new AdjacencyGraph(null, null, null)); adjacencyGraphs.add(new AdjacencyGraph(null, null, null)); adjacencyGraphs.add(new AdjacencyGraph(null, null, null)); adjacencyGraphs.add(new AdjacencyGraph(null, null, null)); adjacencyGraphs.add(new AdjacencyGraph(null, null, null)); adjacencyGraphs.add(new AdjacencyGraph(null, null, null)); adjacencyGraphs.add(new AdjacencyGraph(null, null, null)); adjacencyGraphs.add(new AdjacencyGraph(null, null, null)); adjacencyGraphs.add(new AdjacencyGraph(null, null, null); adjacencyGraphs.add(null, null); adjacencyGraphs.add(new AdjacencyGraph(null, null, null); adjacencyGraphs.add(new AdjacencyGraph(null, null, null, null, null, null, null, null); adjacencyGraphs.add(null, null); adjacencyGraphs.add(null, null, null); adjacencyGraphs.add(null, null); adjacencyGraphs.add(null, null); adjacencyGraphs.add(null, null, null, null, null, null, null, null, null); adjacencyGraphs.add(null, null); adjacencyGraphs.add(null, null); adjacencyGraphs.add(null, null); adjacencyGraphs.add(null, null); adjacencyGraphs); adjacencyGraphs.add(null, null); adjacencyGraphs); adjacencyGraphs.add(null, null); adjacencyGraphs); adjacencyGraphs.add(null, null); adjacencyGraphs); adjacencyGraphs.add(null); adjacencyGraphs); adjacencyGraphs.add(null, null); adjacencyGraphs); adjacencyGraphs.add(null, null); adjacencyGraphs); adjacencyGraphs.add(null, null); adjacencyGraphs); adjacencyGraphs.add(null, null); adjacencyGraphs); adjacencyGraphs.add(null, null); adjacencyGraphs); adjacencyGraphs.add(null); adjacencyGraphs); adjacencyGraphs.add(null); adjacencyGraphs); adjacencyGraphs.add(null); adjacencyGraphs); adjacencyGraphs.add(null); adjacencyGraphs.add(null); adjacencyGraphs); }
",1,1,1,1,"@Test(timeout = 4000)
public void test20() throws Throwable {
    LinkedList<PasswordMatcher> linkedList0 = new LinkedList<PasswordMatcher>();
    HashMap<String, Long> hashMap0 = new HashMap<String, Long>();
    LinkedList<Dictionary> linkedList1 = new LinkedList<Dictionary>();
    LinkedList<AdjacencyGraph> linkedList2 = new LinkedList<AdjacencyGraph>();
    HashMap<Character, Character[]> hashMap1 = new HashMap<Character, Character[]>();
    Integer integer0 = new Integer(752);
    Locale locale0 = Locale.CHINA;
    Configuration configuration0 = new Configuration(linkedList0, hashMap0, linkedList1, linkedList2, hashMap1, (Pattern) null, (Double) null, integer0, locale0, true, 752);
    configuration0.getAdjacencyGraphs();
    assertTrue(configuration0.isDistanceCalc());
    assertEquals(752L, configuration0.getCombinationAlgorithmTimeout());
}",1,2,2,1,"@Test
public void testGetAdjacencyGraphs() {
    // Create test data
    List<PasswordMatcher> passwordMatchers = new LinkedList<>();
    Map<String, Long> guessTypes = new HashMap<>();
    List<Dictionary> dictionaries = new LinkedList<>();
    List<AdjacencyGraph> adjacencyGraphs = new LinkedList<>();
    Map<Character, Character[]> leetTable = new HashMap<>();
    Pattern yearPattern = null;
    Double minimumEntropy = null;
    Integer maxLength = new Integer(0);
    Locale locale = Locale.getDefault();
    boolean distanceCalc = false;
    long combinationAlgorithmTimeout = 0L;
    
    // Create Configuration object
    Configuration configuration = new Configuration(passwordMatchers, guessTypes, dictionaries, adjacencyGraphs, leetTable, yearPattern, minimumEntropy, maxLength, locale, distanceCalc, combinationAlgorithmTimeout);
    
    // Call the focal method
    List<AdjacencyGraph> result = configuration.getAdjacencyGraphs();
    
    // Assert the result
    assertEquals(adjacencyGraphs, result);
}",3,3,3,3
"public ResourceBundle getFeedbackResource() {
    return feedbackResource;
}","@Test public void getFeedbackResource() throws Exception { ResourceBundle resource = configuration.getFeedbackResource(); assertEquals(feedbackResource, resource); }
",2,2,2,2,"@Test(timeout = 4000)
public void test24() throws Throwable {
    LinkedList<PasswordMatcher> linkedList0 = new LinkedList<PasswordMatcher>();
    HashMap<String, Long> hashMap0 = new HashMap<String, Long>();
    LinkedList<Dictionary> linkedList1 = new LinkedList<Dictionary>();
    HashMap<Character, Character[]> hashMap1 = new HashMap<Character, Character[]>();
    Pattern pattern0 = Pattern.compile("""", 0);
    Double double0 = new Double(0);
    Integer integer0 = new Integer(0);
    Locale locale0 = Locale.forLanguageTag("""");
    Configuration configuration0 = new Configuration(linkedList0, hashMap0, linkedList1, (List<AdjacencyGraph>) null, hashMap1, pattern0, double0, integer0, locale0, true, 0L);
    configuration0.getFeedbackResource();
    assertTrue(configuration0.isDistanceCalc());
}",2,2,2,2,"@Test
public void testGetFeedbackResource() {
    List<PasswordMatcher> passwordMatchers = new LinkedList<PasswordMatcher>();
    Map<String, Long> guessTypes = new HashMap<String, Long>();
    List<Dictionary> dictionaries = new LinkedList<Dictionary>();
    List<AdjacencyGraph> adjacencyGraphs = new LinkedList<AdjacencyGraph>();
    Map<Character, Character[]> leetTable = new HashMap<Character, Character[]>();
    Pattern yearPattern = Pattern.compile("""", 0);
    Double minimumEntropy = new Double(0);
    Integer maxLength = new Integer(0);
    Locale locale = Locale.forLanguageTag("""");
    boolean distanceCalc = true;
    long combinationAlgorithmTimeout = 0L;
    
    Configuration configuration = new Configuration(passwordMatchers, guessTypes, dictionaries, adjacencyGraphs, leetTable, yearPattern, minimumEntropy, maxLength, locale, distanceCalc, combinationAlgorithmTimeout);
    
    ResourceBundle expectedResourceBundle = ResourceBundle.getBundle(""feedback"");

    ResourceBundle actualResourceBundle = configuration.getFeedbackResource();
    assertEquals(expectedResourceBundle, actualResourceBundle);
}",2,3,3,3
"public Locale getLocale() {
    return locale;
}","@Test public void testGetLocale() { assertEquals(Locale.ENGLISH, configuration.getLocale()); }
",2,2,2,2,"@Test(timeout = 4000)
public void test33() throws Throwable {
    LinkedList<PasswordMatcher> linkedList0 = new LinkedList<PasswordMatcher>();
    HashMap<String, Long> hashMap0 = new HashMap<String, Long>();
    LinkedList<Dictionary> linkedList1 = new LinkedList<Dictionary>();
    LinkedList<AdjacencyGraph> linkedList2 = new LinkedList<AdjacencyGraph>();
    HashMap<Character, Character[]> hashMap1 = new HashMap<Character, Character[]>();
    Integer integer0 = new Integer(752);
    Locale locale0 = Locale.CHINA;
    Configuration configuration0 = new Configuration(linkedList0, hashMap0, linkedList1, linkedList2, hashMap1, (Pattern) null, (Double) null, integer0, locale0, true, 752);
    configuration0.getLocale();
    assertTrue(configuration0.isDistanceCalc());
    assertEquals(752L, configuration0.getCombinationAlgorithmTimeout());
}",1,2,2,1,"    @Test
    public void testGetLocale() {
        // Create a Configuration object
        Configuration configuration = new Configuration(null, null, null, null, null, null, null, null, Locale.US, false, 0);

        // Call the getLocale() method
        Locale result = configuration.getLocale();

        // Assert that the returned locale is not null
        assertNotNull(result);

        // Assert that the returned locale is equal to the expected locale
        assertEquals(Locale.US, result);
    }",3,3,3,3
"public boolean isExclusion() {
    return exclusion;
}","@Test public void testIsExclusion() { assertTrue(dictionary.isExclusion()); }
",2,1,2,2,"@Test(timeout = 4000)
public void test00() throws Throwable {
    HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
    Integer integer0 = new Integer(897);
    hashMap0.put("""", integer0);
    hashMap0.put(""me.gosimple.nbvcxz.resources.Dictionary"", integer0);
    Dictionary dictionary0 = new Dictionary("");"", hashMap0, true);
    assertTrue(dictionary0.isExclusion());
    assertEquals(39, dictionary0.getMaxLength());
}",2,2,2,2,"@Test
public void testIsExclusion() {
    Dictionary dictionary = new Dictionary(""Test Dictionary"", new HashMap<String, Integer>(), true);

    assertTrue(dictionary.isExclusion());
    dictionary = new Dictionary(""Test Dictionary"", new HashMap<String, Integer>(), false);
    assertFalse(dictionary.isExclusion());
}",3,3,3,3
"public Map<String, Integer> getDictonary() {
    return dictonary;
}","@Test public void testGetDictionary() throws Exception { final Map<String, Integer> dictonary = new HashMap<String, Integer>(); dictonary.put(""key1"", 1); dictonary.put(""key2"", 2); dictonary.put(""key3"", 3); dictonary.put(""key4"", 4); dictonary.put(""key5"", 5); dictonary.put(""key6"", 6); dictonary.put(""key6"", 6); dictonary.put(""key7"", 6); dictonary.put(""key8"", 7); dictonary.put(""key9"", 8); dictonary.put(""key9"", 9); dictonary.put(""key9"", 9); assertEquals(3, dictonary.size()); assertEquals(""key9"", dictonary.get(""key9"")); assertEquals(""key9"", dictonary.get(""key9"")); assertEquals(""key9"", dictonary.get(""key9"")); assertEquals(""key9"", dictonary.get(""key9"")); assertEquals(""key9"", dictonary.get(""key9"")); assertEquals(""key9"", dictonary.get(""key9"")); assertEquals(""key9"", dictonary.get(""key9"")); assertEquals(""key9"", dictonary.get(""key9"")); assertEquals(""key9"", dictonary.get(""key9"")); assertEquals(""key9"", dictonary.get(""key9"")); assertEquals(""key9"", dictonary.get(""key9"")); assertEquals(""key9"", dictonary.get(""key9"")); assertEquals(""key9"", dictonary.get(""key9"")); assertEquals(""key9"", dictonary.get(""key9"")); assertEquals(""key9"", dictonary.get(""key9"")); assertEquals(""key9"")); assertEquals(""key9"", dictonary.get(""key9"")); assertEquals(""key9"")); assertEquals(""key9"", dictonary.get(""key9"")); assertEquals(""key9"")); assertEquals(""key9"", dictonary.get(""key9"")); assertEquals(""key9"")); assertEquals(""key9"")); assertEquals(""key9"", dictonary.get(""key9"")); assertEquals(""key9"")); assertEquals(""key9"", dictonary.get(""key9"")); }
",1,1,1,1,"@Test(timeout = 4000)
public void test05() throws Throwable {
    HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
    Integer integer0 = new Integer((-49));
    hashMap0.put(""w0R"", integer0);
    Dictionary dictionary0 = new Dictionary(""w0R"", hashMap0, false);
    dictionary0.getDictonary();
    assertFalse(dictionary0.isExclusion());
    assertEquals(3, dictionary0.getMaxLength());
}",2,2,2,2,"@Test
public void testGetDictionary() {
    Map<String, Integer> dictionary = new HashMap<>();
    dictionary.put(""apple"", 5);
    dictionary.put(""banana"", 6);
    dictionary.put(""cherry"", 7);
    Dictionary dict = new Dictionary(""Sample Dictionary"", dictionary, false);

    Map<String, Integer> result = dict.getDictonary();

    assertEquals(dictionary, result);
}",3,3,3,3
"public String getDictionaryName() {
    return this.dictionary_name;
}",,1,1,1,1,"@Test(timeout = 4000)
public void test06() throws Throwable {
    HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
    Dictionary dictionary0 = new Dictionary((String) null, hashMap0, true);
    dictionary0.getDictionaryName();
    assertEquals(0, dictionary0.getMaxLength());
    assertTrue(dictionary0.isExclusion());
}",2,2,2,2,"@Test
public void testGetDictionaryName() {
    Dictionary dictionary = new Dictionary(""English"", new HashMap<String, Integer>(), false);

    String dictionaryName = dictionary.getDictionaryName();
    assertNotNull(dictionaryName);
    assertEquals(""English"", dictionaryName);
}",3,3,3,3
"public static Map<String, Integer> loadRankedDictionary(final String fileName) {
    Map<String, Integer> ranked = new HashMap<>();
    String path = ""/dictionaries/"" + fileName;
    try (InputStream is = DictionaryUtil.class.getResourceAsStream(path);
        BufferedReader br = new BufferedReader(new InputStreamReader(is, ""UTF-8""))) {
        String line;
        int i = 1;
        while ((line = br.readLine()) != null) {
            ranked.put(line, i++);
        }
    } catch (IOException e) {
        System.out.println(""Error while reading "" + fileName);
    }
    return ranked;
}","@Test public void testLoadRankedDictionary() { Map<String, Integer> ranked = DictionaryUtil.loadRankedDictionary(""dictionaries.txt""); assertEquals(1, ranked.size()); assertEquals(1, ranked.get(""dictionaries.txt"")); assertEquals(1, ranked.get(""dictionaries.txt"")); assertEquals(1, ranked.get(""dictionaries.txt"")); assertEquals(1, ranked.get(""dictionaries.txt"")); assertEquals(1, ranked.get(""dictionaries.txt"")); assertEquals(1, ranked.get(""dictionaries.txt"")); assertEquals(1, ranked.get(""dictionaries.txt"")); assertEquals(1, ranked.get(""dictionaries.txt"")); assertEquals(1, ranked.get(""dictionaries.txt"")); assertEquals(1, ranked.get(""dictionaries.txt"")); assertEquals(1, ranked.get(""dictionaries.txt"")); assertEquals(1, ranked.get(""dictionaries.txt"")); assertEquals(1, ranked.get(""dictionaries.txt"")); assertEquals(1, ranked.get(""dictionaries.txt"")); assertEquals(1, ranked.get(""dictionaries.txt"")); assertEquals(1, ranked.get(""dictionaries.txt"")); assertEquals(1, ranked.get(""dictionaries.txt"")); assertEquals(1, ranked.get(""dictionaries.txt"")); assertEquals(1, ranked.get(""dictionaries.txt"")); assertEquals(1, ranked.get(""dictionaries.txt"")); assertEquals(1, ranked.get(""dictionaries.txt"")); assertEquals(1, ranked.get(""dictionaries.txt"")); assertEquals(1, ranked.get(""dictionaries.txt"")); }
",1,1,1,1,"@Test(timeout = 4000)
public void test0() throws Throwable {
    // Undeclared exception!
    try {
        DictionaryUtil.loadRankedDictionary((String) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        // 
        // no message in exception (getMessage() returned null)
        // 
        verifyException(""java.io.Reader"", e);
    }
}",1,1,1,1,"@Test(timeout = 4000)
public void testLoadRankedDictionary_NullFileName_ThrowsNullPointerException() throws Throwable {
    // Undeclared exception!
    try {
        DictionaryUtil.loadRankedDictionary(null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        // 
        // no message in exception (getMessage() returned null)
        // 
        verifyException(""java.io.Reader"", e);
    }
}",1,1,1,1
"public static int getBruteForceCardinality(final char character) {
    boolean lower = false, upper = false, digits = false, symbols = false, unicode = false;
    if (0x30 <= character && character <= 0x39) {
        digits = true;
    } else if (0x41 <= character && character <= 0x5a) {
        upper = true;
    } else if (0x61 <= character && character <= 0x7a) {
        lower = true;
    } else if (character <= 0x7f) {
        symbols = true;
    } else {
        unicode = true;
    }
    int cardinality = 0;
    if (digits) {
        cardinality += 10;
    }
    if (upper) {
        cardinality += 26;
    }
    if (lower) {
        cardinality += 26;
    }
    if (symbols) {
        cardinality += 33;
    }
    if (unicode) {
        cardinality += 100;
    }
    return cardinality;
}","@Test public void testGetBruteForceCardinality() { assertEquals(0, BruteForceUtil.getBruteForceCardinality(\'a\')); assertEquals(0, BruteForceUtil.getBruteForceCardinality(\'a\')); assertEquals(0, BruteForceUtil.getBruteForceCardinality(\'a\')); assertEquals(0, BruteForceUtil.getBruteForceCardinality(\'a\')); assertEquals(0, BruteForceUtil.getBruteForceCardinality(\'a\')); assertEquals(0, BruteForceUtil.getBruteForceCardinality(\'a\')); assertEquals(0, BruteForceUtil.getBruteForceCardinality(\'a\')); assertEquals(0, BruteForceUtil.getBruteForceCardinality(\'a\')); assertEquals(0, BruteForceUtil.getBruteForceCardinality(\'a\')); assertEquals(0, BruteForceUtil.getBruteForceCardinality(\'a\')); assertEquals(0, BruteForceUtil.getBruteForceCardinality(\'a\')); assertEquals(0, BruteForceUtil.getBruteForceCardinality(\'a\')); assertEquals(0, BruteForceUtil.getBruteForceCardinality(\'a\')); assertEquals(0, BruteForceUtil.getBruteForceCardinality(\'a\')); assertEquals(0, BruteForceUtil.getBruteForceCardinality(\'a\')); assertEquals(0, BruteForceUtil.getBruteForceCardinality(\'a\')); assertEquals(0, BruteForceUtil.getBruteForceCardinality(\'a\')); assertEquals(0, BruteForceUtil.getBruteForceCardinality(\'a\')); assertEquals(0, BruteForceUtil.getBruteForceCardinality(\'a\')); assertEquals(0, BruteForceUtil.getBruteForceCardinality(\'a\')); }
",1,1,1,1,"@Test(timeout = 4000)
public void test00() throws Throwable {
    int int0 = BruteForceUtil.getBruteForceCardinality('');
    assertEquals(33, int0);
}",3,2,2,2,"    @Test
    public void testGetBruteForceCardinality() {
        // Test lowercase letter
        char lowercase = 'a';
        int lowercaseCardinality = BruteForceUtil.getBruteForceCardinality(lowercase);
        assertEquals(26, lowercaseCardinality);

        // Test uppercase letter
        char uppercase = 'Z';
        int uppercaseCardinality = BruteForceUtil.getBruteForceCardinality(uppercase);
        assertEquals(26, uppercaseCardinality);

        // Test digit
        char digit = '5';
        int digitCardinality = BruteForceUtil.getBruteForceCardinality(digit);
        assertEquals(10, digitCardinality);

        // Test symbol
        char symbol = '@';
        int symbolCardinality = BruteForceUtil.getBruteForceCardinality(symbol);
        assertEquals(33, symbolCardinality);

        // Test unicode character
        char unicode = '鎯?;
        int unicodeCardinality = BruteForceUtil.getBruteForceCardinality(unicode);
        assertEquals(100, unicodeCardinality);
    }",3,3,3,3
"public static BigDecimal getMooresMultiplier() {
    double years = (System.currentTimeMillis() - START) / YEAR;
    if (years <= 1d) {
        years = 0;
    }
    return BigDecimal.valueOf(Math.pow(2d, years / 2d));
}","@Test public void testGetMooresMultiplier() { System.out.println(""getMooresMultiplier""); BigDecimal expResult = BigDecimal.valueOf(1d); BigDecimal result = ConfigurationBuilder.getMooresMultiplier(); assertEquals(expResult, result); }
",3,3,3,3,"@Test(timeout = 4000)
public void test00() throws Throwable {
    ConfigurationBuilder configurationBuilder0 = new ConfigurationBuilder();
    BigDecimal bigDecimal0 = ConfigurationBuilder.getMooresMultiplier();
    ConfigurationBuilder configurationBuilder1 = configurationBuilder0.setMinimumEntropy(bigDecimal0, ""OFFLINE_BCRYPT_5"");
    assertEquals(20000L, configurationBuilder1.getDefaultCrackingHardwareCost());
    assertEquals((byte) 1, bigDecimal0.byteValue());
}",3,3,3,3,"    @Test
    public void testGetMooresMultiplier() {
        // Set up
        long START = System.currentTimeMillis();
        long YEAR = 365 * 24 * 60 * 60 * 1000;

        // Calculate expected result
        double years = (System.currentTimeMillis() - START) / YEAR;
        if (years <= 1d) {
            years = 0;
        }
        double expected = Math.pow(2d, years / 2d);

        // Call the method under test
        BigDecimal actual = ConfigurationBuilder.getMooresMultiplier();

        // Assert the result
        assertEquals(BigDecimal.valueOf(expected), actual);
    }",3,3,3,3
