// original test path: /Users/zhi/Documents/PH.D/Project/Testing/ChatTESTER/CodePackage/Prompt2Testing/repo_get/Four_project/tabulapdf_tabula-java/src/test/java/technology/tabula/Rectangle_ESTest.java
/*
 * This file was automatically generated by EvoSuite
 * Sat Feb 10 10:03:59 GMT 2024
 */
package technology.tabula;

import org.junit.Test;
import static org.junit.Assert.*;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import technology.tabula.Rectangle;

import java.util.ArrayList;
import java.util.List;
import org.junit.Test;
import static org.junit.Assert.*;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import technology.tabula.Rectangle;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false)
public class Rectangle_ESTest extends Rectangle_ESTest_scaffolding {

    @Test
    public void testVerticalOverlapRatio() {
        Rectangle rectangle1 = new Rectangle(0, 0, 10, 10);
        Rectangle rectangle2 = new Rectangle(5, 5, 10, 10);
        float expectedRatio = 0.5f;
        float actualRatio = rectangle1.verticalOverlapRatio(rectangle2);
        assertEquals(expectedRatio, actualRatio, 0.001);
    }

    @Test
    public void testGetPoints() {
        Rectangle rectangle = new Rectangle(0, 0, 5, 5);
        Point2D[] expectedPoints = {
            new Point2D.Float(0, 0),
            new Point2D.Float(5, 0),
            new Point2D.Float(5, 5),
            new Point2D.Float(0, 5)
        };
        assertArrayEquals(expectedPoints, rectangle.getPoints());
    }

    @Test
    public void testVerticalOverlap() {
        // Create two rectangles for testing
        Rectangle rectangle1 = new Rectangle(0, 0, 5, 5);
        Rectangle rectangle2 = new Rectangle(2, 2, 6, 6);

        // Calculate the expected vertical overlap
        float expectedOverlap = 3;

        // Calculate the actual vertical overlap using the method under test
        float actualOverlap = rectangle1.verticalOverlap(rectangle2);

        // Assert that the actual overlap matches the expected overlap
        assertEquals(expectedOverlap, actualOverlap, 0.001);
    }

    @Test
    public void testSetTop() {
        // Create a rectangle object
        Rectangle rectangle = new Rectangle(0, 0, 10, 10);

        // Set the top coordinate to a new value
        float newTop = 5;
        rectangle.setTop(newTop);

        // Verify that the top coordinate has been updated correctly
        assertEquals(newTop, rectangle.getTop(), 0.001);

        // Verify that the height has been adjusted accordingly
        float expectedHeight = 5;
        assertEquals(expectedHeight, rectangle.getHeight(), 0.001);
    }

    @Test
    public void testGetRight() {
        Rectangle rectangle = new Rectangle(0, 0, 5, 10);
        float expected = 5.0f;
        float actual = rectangle.getRight();
        assertEquals(expected, actual, 0.001);
    }

    @Test
    public void testIsLtrDominant() {
        Rectangle rectangle = new Rectangle();
        int result = rectangle.isLtrDominant();
        assertEquals(0, result);
    }

    @Test
    public void testGetBottom() {
        Rectangle rectangle = new Rectangle(0, 0, 5, 10);
        float expectedBottom = 10.0f;
        float actualBottom = rectangle.getBottom();
        assertEquals(expectedBottom, actualBottom, 0.001);
    }

    @Test
    public void testGetLeft() {
        Rectangle rectangle = new Rectangle(0, 0, 5, 10);
        float expected = 0.0f;
        float actual = rectangle.getLeft();
        assertEquals(expected, actual, 0.001);
    }

    @Test
    public void testVerticallyOverlaps() {
        // Create the first rectangle
        Rectangle rectangle1 = new Rectangle(0, 0, 5, 5);
        
        // Create the second rectangle that vertically overlaps with the first rectangle
        Rectangle rectangle2 = new Rectangle(2, 0, 5, 5);
        
        // Create the third rectangle that does not vertically overlap with the first rectangle
        Rectangle rectangle3 = new Rectangle(6, 0, 5, 5);
        
        // Test if the first rectangle vertically overlaps with the second rectangle
        assertTrue(rectangle1.verticallyOverlaps(rectangle2));
        
        // Test if the first rectangle vertically overlaps with the third rectangle
        assertFalse(rectangle1.verticallyOverlaps(rectangle3));
    }

    @Test
    public void testSetBottom() {
        // Create a rectangle object
        Rectangle rectangle = new Rectangle(0, 0, 5, 5);

        // Set the bottom value
        float bottom = 10;
        rectangle.setBottom(bottom);

        // Verify that the bottom value is updated correctly
        assertEquals(bottom, rectangle.getBottom(), 0.001);
        assertEquals(bottom - rectangle.getY(), rectangle.getHeight(), 0.001);
    }

    @Test
    public void testGetTop() {
        Rectangle rectangle = new Rectangle(0, 0, 5, 10);
        float expectedTop = 0;
        float actualTop = rectangle.getTop();
        assertEquals(expectedTop, actualTop, 0.001);
    }

@Test
public void testSetLeft() {
    Rectangle rectangle = new Rectangle(0, 0, 5, 5);
    float newLeft = 2;
    rectangle.setLeft(newLeft);
    assertEquals(newLeft, rectangle.getLeft(), 0.001);
    assertEquals(0, rectangle.getTop(), 0.001);
    assertEquals(3, rectangle.getWidth(), 0.001);
    assertEquals(5, rectangle.getHeight(), 0.001);
}

    @Test
    public void testGetArea() {
        // Create a rectangle with width 5 and height 10
        Rectangle rectangle = new Rectangle(0, 0, 5, 10);
        
        // Calculate the expected area
        float expectedArea = 5 * 10;
        
        // Call the getArea() method
        float actualArea = rectangle.getArea();
        
        // Assert that the actual area matches the expected area
        assertEquals(expectedArea, actualArea, 0.001);
    }

    @Test
    public void testSetRight() {
        // Create a rectangle object
        Rectangle rectangle = new Rectangle(0, 0, 5, 5);

        // Set the right coordinate to a new value
        float newRight = 10;
        rectangle.setRight(newRight);

        // Verify that the right coordinate has been updated correctly
        assertEquals(newRight, rectangle.getRight(), 0.001);
        assertEquals(newRight - rectangle.getLeft(), rectangle.getWidth(), 0.001);
    }

    @Test
    public void testMerge() {
        // Create two rectangles for testing
        Rectangle rectangle1 = new Rectangle(0, 0, 5, 5);
        Rectangle rectangle2 = new Rectangle(3, 3, 5, 5);

        // Merge rectangle2 into rectangle1
        Rectangle mergedRectangle = rectangle1.merge(rectangle2);

        // Verify that the merged rectangle has the correct dimensions
        assertEquals(0, mergedRectangle.getTop(), 0);
        assertEquals(0, mergedRectangle.getLeft(), 0);
        assertEquals(8, mergedRectangle.getRight(), 0);
        assertEquals(8, mergedRectangle.getBottom(), 0);
    }

    @Test
    public void testBoundingBoxOf() {
        // Create a list of rectangles
        List<Rectangle> rectangles = new ArrayList<>();
        rectangles.add(new Rectangle(0, 0, 2, 2));
        rectangles.add(new Rectangle(1, 1, 3, 3));
        rectangles.add(new Rectangle(-1, -1, 4, 4));

        // Calculate the expected bounding box
        float expectedMinX = -1;
        float expectedMinY = -1;
        float expectedMaxX = 4;
        float expectedMaxY = 4;
        Rectangle expectedBoundingBox = new Rectangle(expectedMinY, expectedMinX, expectedMaxX - expectedMinX, expectedMaxY - expectedMinY);

        // Call the boundingBoxOf method
        Rectangle actualBoundingBox = Rectangle.boundingBoxOf(rectangles);

        // Assert that the actual bounding box matches the expected bounding box
        assertEquals(expectedBoundingBox.getTop(), actualBoundingBox.getTop(), 0.001);
        assertEquals(expectedBoundingBox.getLeft(), actualBoundingBox.getLeft(), 0.001);
        assertEquals(expectedBoundingBox.getWidth(), actualBoundingBox.getWidth(), 0.001);
        assertEquals(expectedBoundingBox.getHeight(), actualBoundingBox.getHeight(), 0.001);
    }

    @Test
    public void testHorizontallyOverlaps() {
        // Create the first rectangle
        Rectangle rectangle1 = new Rectangle(0, 0, 5, 5);
        
        // Create the second rectangle
        Rectangle rectangle2 = new Rectangle(3, 0, 5, 5);
        
        // Check if the first rectangle horizontally overlaps with the second rectangle
        boolean result = rectangle1.horizontallyOverlaps(rectangle2);
        
        // Assert that the result is true
        assertTrue(result);
    }

}
