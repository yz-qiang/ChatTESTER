// original test path: /Users/zhi/Documents/PH.D/Project/Testing/ChatTESTER/CodePackage/Prompt2Testing/repo_get/Four_project/Zappos_zappos-json/src/test/java/com/zappos/json/util/Strings_ESTest.java
/*
 * This file was automatically generated by EvoSuite
 * Thu Jan 25 14:13:31 GMT 2024
 */
package com.zappos.json.util;

import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import org.junit.Test;
import static org.junit.Assert.*;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.zappos.json.util.Strings;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

import org.junit.Test;
import static org.junit.Assert.*;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.zappos.json.util.Strings;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false)
public class Strings_ESTest extends Strings_ESTest_scaffolding {

    @Test
    public void testRandomNumber() {
        String result = Strings.randomNumber(5);
        assertNotNull(result);
        assertEquals(5, result.length());
        assertTrue(Strings.isNumber(result));
    }

    @Test
    public void testFromReader() throws IOException {
        // Create a test input string
        String input = "This is a test string";

        // Create a StringReader object with the test input string
        Reader reader = new StringReader(input);

        // Define the expected output
        String expectedOutput = "This is a test string";

        // Define the buffer size
        int bufferSize = 1024;

        // Call the method under test
        String actualOutput = Strings.fromReader(reader, bufferSize);

        // Assert that the actual output matches the expected output
        assertEquals(expectedOutput, actualOutput);
    }

    @Test
    public void testIsNumber_ValidNumber_ReturnsTrue() {
        // Arrange
        String number = "12345";

        // Act
        boolean result = Strings.isNumber(number);

        // Assert
        assertTrue(result);
    }

    @Test
    public void testRandom() {
        char[] chars = {'a', 'b', 'c', 'd', 'e'};
        int n = 5;
        String result = Strings.random(n, chars);
        
        // Check if the length of the generated string is equal to n
        assertEquals(n, result.length());
        
        // Check if all characters in the generated string are from the given char array
        for (char c : result.toCharArray()) {
            boolean found = false;
            for (char ch : chars) {
                if (c == ch) {
                    found = true;
                    break;
                }
            }
            assertTrue(found);
        }
    }

    @Test
    public void testRandomAlphabetic() {
        // Test case 1: n = 0
        String result1 = Strings.randomAlphabetic(0);
        assertEquals("", result1);

        // Test case 2: n = 5
        String result2 = Strings.randomAlphabetic(5);
        assertEquals(5, result2.length());
        assertTrue(result2.matches("[a-zA-Z]+"));

        // Test case 3: n = 10
        String result3 = Strings.randomAlphabetic(10);
        assertEquals(10, result3.length());
        assertTrue(result3.matches("[a-zA-Z]+"));
    }

    @Test
    public void testFromReader_2() throws IOException {
        // Create a test input string
        String input = "This is a test string";

        // Create a StringReader object with the test input string
        Reader reader = new StringReader(input);

        // Call the fromReader method with the test reader
        String result = Strings.fromReader(reader);

        // Verify that the result matches the test input string
        assertEquals(input, result);
    }

}
