// original test path: /Users/zhi/Documents/PH.D/Project/Testing/ChatTESTER/CodePackage/Prompt2Testing/repo_get/Four_project/Zappos_zappos-json/src/test/java/com/zappos/json/util/Reflections_ESTest.java
/*
 * This file was automatically generated by EvoSuite
 * Thu Jan 25 14:11:21 GMT 2024
 */
package com.zappos.json.util;

import org.junit.Test;
import java.lang.reflect.Field;
import static org.junit.Assert.*;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.zappos.json.util.Reflections;
import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

import org.junit.Test;
import static org.junit.Assert.*;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.zappos.json.util.Reflections;
import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

import org.junit.Test;
import java.lang.reflect.Field;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.List;
import static org.junit.Assert.*;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.zappos.json.util.Reflections;
import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

import org.junit.Test;
import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import static org.junit.Assert.*;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.zappos.json.util.Reflections;
import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

import org.junit.Test;
import java.lang.annotation.Annotation;
import java.lang.reflect.Method;
import static org.junit.Assert.*;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.zappos.json.util.Reflections;
import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.zappos.json.util.Reflections;
import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false)
public class Reflections_ESTest extends Reflections_ESTest_scaffolding {

    @Test
    public void testGetGenericTypes() throws NoSuchFieldException {
        // Create a test class with a parameterized field
        class TestClass {
            List<String> myList;
        }

        // Get the field from the test class
        Field field = TestClass.class.getDeclaredField("myList");

        // Call the method under test
        Class<?>[] genericTypes = Reflections.getGenericTypes(field);

        // Assert the result
        assertNotNull(genericTypes);
        assertEquals(1, genericTypes.length);
        assertEquals(String.class, genericTypes[0]);
    }

    @Test
    public void testHasAnnotation_2() throws NoSuchMethodException {
        // Create a sample class for testing
        class SampleClass {
            @Deprecated
            public void deprecatedMethod() {
            }

            public void nonDeprecatedMethod() {
            }
        }

        // Get the methods of the sample class
        Method deprecatedMethod = SampleClass.class.getMethod("deprecatedMethod");
        Method nonDeprecatedMethod = SampleClass.class.getMethod("nonDeprecatedMethod");

        // Test case 1: Check if deprecatedMethod has Deprecated annotation
        assertTrue(Reflections.hasAnnotation(deprecatedMethod, Deprecated.class));

        // Test case 2: Check if nonDeprecatedMethod has Deprecated annotation
        assertFalse(Reflections.hasAnnotation(nonDeprecatedMethod, Deprecated.class));
    }

@Test
public void testHasAnnotation() throws NoSuchFieldException, NoSuchMethodException {
    class SampleClass {
        @SuppressWarnings("unused")
        @Deprecated
        private String sampleField;
        @SuppressWarnings("unused")
        @Deprecated
        public void sampleMethod() {
        }
    }
    Field field = SampleClass.class.getDeclaredField("sampleField");
    Method method = SampleClass.class.getDeclaredMethod("sampleMethod");
    assertTrue(Reflections.hasAnnotation(method, field, Deprecated.class));
    assertTrue(Reflections.hasAnnotation(field, Deprecated.class));
}

@Test(timeout = 4000)
public void testGetField() throws Throwable {
    Class<Annotation> class0 = Annotation.class;
    try {
        Reflections.getField(class0, " A6)j>Vi@=Y");
        fail("Expecting exception: NullPointerException");
    } catch (NullPointerException e) {
        verifyException("com.zappos.json.util.Reflections", e);
    }
}

@Test
public void testGetSecondGenericParameterType() throws NoSuchMethodException {
    // Create a sample class for testing
    class SampleClass<T, U> {
        public void sampleMethod(T param1, U param2) {}
    }

    // Get the sample method
    Method method = SampleClass.class.getMethod("sampleMethod", Object.class, Object.class);

    // Call the focal method
    Class<?> result = Reflections.getSecondGenericParameterType(method);

    // Assert the result
    assertNull(result);
}

    @Test
    public void testClassPresent_shouldReturnTrue_whenClassIsPresent() {
        // Arrange
        String className = "java.lang.String";

        // Act
        boolean result = Reflections.classPresent(className);

        // Assert
        assertTrue(result);
    }

}
