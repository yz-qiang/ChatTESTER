// original test path: /Users/zhi/Documents/PH.D/Project/Testing/ChatTESTER/CodePackage/Prompt2Testing/repo_get/Four_project/Zappos_zappos-json/src/test/java/com/zappos/json/JsonReaderCodeGenerator_ESTest.java
/*
 * This file was automatically generated by EvoSuite
 * Thu Jan 25 13:55:24 GMT 2024
 */
package com.zappos.json;

import org.junit.Test;
import static org.junit.Assert.*;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.zappos.json.JsonBeanAttribute;
import com.zappos.json.JsonBeanIntrospector;
import com.zappos.json.JsonReaderCodeGenerator;
import com.zappos.json.JsonReaderInvoker;
import com.zappos.json.ZapposJson;
import com.zappos.json.format.JavaTimeInstantFormatter;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false)
public class JsonReaderCodeGenerator_ESTest extends JsonReaderCodeGenerator_ESTest_scaffolding {

@Test(timeout = 4000)
public void test00() throws Throwable {
    ZapposJson zapposJson0 = ZapposJson.getInstance();
    JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);
    JsonReaderCodeGenerator jsonReaderCodeGenerator0 = new JsonReaderCodeGenerator(zapposJson0, jsonBeanIntrospector0);
    Class<Object> class0 = Object.class;
    try {
        jsonReaderCodeGenerator0.registerReader(class0);
        fail("Expecting exception: RuntimeException");
    } catch (RuntimeException e) {
        // 
        // bean introspection failed
        // 
        verifyException("com.zappos.json.JsonBeanIntrospector", e);
    }
}

@Test(timeout = 4000)
public void testAddAttributeInfo_2() throws Throwable {
    // Create a TypeInfo object with Object class
    Class<Object> class0 = Object.class;
    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);
    
    // Create a JsonBeanAttribute object (or use null if not needed)
    JsonBeanAttribute detail = null;
    
    // Call the addAttributeInfo method and store the returned AttributeInfo object
    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = jsonReaderCodeGenerator_TypeInfo0.addAttributeInfo(class0, detail);
    
    // Get the detail from the AttributeInfo object
    jsonReaderCodeGenerator_AttributeInfo0.getDetail();
    
    // Assert that the arrayType of the AttributeInfo object is 0
    assertEquals(0, jsonReaderCodeGenerator_AttributeInfo0.getArrayType());
}

@Test
public void testGetAttributeType() {
    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(Object.class);
    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();
    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = jsonReaderCodeGenerator_TypeInfo0.addAttributeInfo(Object.class, jsonBeanAttribute0);
    Class<?> expectedType = Object.class;
    Class<?> actualType = jsonReaderCodeGenerator_AttributeInfo0.getAttributeType();
    assertEquals(expectedType, actualType);
}

@Test
public void testGetPath() {
    // Create a new instance of PathAndCode
    JsonReaderCodeGenerator.PathAndCode pathAndCode = new JsonReaderCodeGenerator.PathAndCode(")S+2Mz5", ")S+2Mz5");

    // Call the getPath() method
    String result = pathAndCode.getPath();

    // Assert that the result is equal to the expected path value
    assertEquals(")S+2Mz5", result);
}

@Test
public void testGetArrayType() {
    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(Object.class);
    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = jsonReaderCodeGenerator_TypeInfo0.addAttributeInfo(Object.class, (JsonBeanAttribute) null);
    jsonReaderCodeGenerator_AttributeInfo0.getDetail();

    int expected = 0;
    int actual = jsonReaderCodeGenerator_AttributeInfo0.getArrayType();
    assertEquals(expected, actual);
}

@Test
public void testEquals() {
    JsonReaderCodeGenerator.PathAndCode pathAndCode1 = new JsonReaderCodeGenerator.PathAndCode("path", null);

    JsonReaderCodeGenerator.PathAndCode pathAndCode2 = new JsonReaderCodeGenerator.PathAndCode("path", null);
    assertTrue(pathAndCode1.equals(pathAndCode1));
    assertTrue(pathAndCode1.equals(pathAndCode2));
    JsonReaderCodeGenerator.PathAndCode pathAndCode3 = new JsonReaderCodeGenerator.PathAndCode("differentPath", null);
    assertFalse(pathAndCode1.equals(pathAndCode3));
    assertFalse(pathAndCode1.equals(null));
    assertFalse(pathAndCode1.equals("path"));
    JsonReaderCodeGenerator.PathAndCode pathAndCode4 = new JsonReaderCodeGenerator.PathAndCode(null, null);
    assertFalse(pathAndCode1.equals(pathAndCode4));
}

@Test
public void testGetAttributeInfos() {
    Class<Object> class0 = Object.class;
    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);
    List<JsonReaderCodeGenerator.AttributeInfo> list0 = jsonReaderCodeGenerator_TypeInfo0.getAttributeInfos();
    assertNotNull(list0);
    assertEquals(0, list0.size());
}

    @Test
    public void testGetCode() {

        JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode("OBJECT", "OBJECT");
        String string0 = jsonReaderCodeGenerator_PathAndCode0.getCode();
        assertEquals("OBJECT", string0);

        String code = string0;
        assertNotNull(code);
        assertTrue(code instanceof String);
    }

@Test(timeout = 4000)
public void testAddAttributeInfo() throws Throwable {
    // Create a TypeInfo object with Object class
    Class<Object> class0 = Object.class;
    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);
    
    // Create a JsonBeanAttribute object (or use null if not needed)
    JsonBeanAttribute detail = null;
    
    // Call the addAttributeInfo method and store the returned AttributeInfo object
    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = jsonReaderCodeGenerator_TypeInfo0.addAttributeInfo(class0, detail);
    
    // Get the detail from the AttributeInfo object
    jsonReaderCodeGenerator_AttributeInfo0.getDetail();
    
    // Assert that the arrayType of the AttributeInfo object is 0
    assertEquals(0, jsonReaderCodeGenerator_AttributeInfo0.getArrayType());
}

@Test
public void testSetArrayType() {
    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();
    Class<JavaTimeInstantFormatter> class0 = JavaTimeInstantFormatter.class;
    JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = new JsonReaderCodeGenerator.AttributeInfo(class0, jsonBeanAttribute0);
    jsonReaderCodeGenerator_AttributeInfo0.setArrayType(2015);
    assertEquals(2015, jsonReaderCodeGenerator_AttributeInfo0.getArrayType());
}

@Test
public void testGetType() {
    Class<JsonReaderInvoker> class0 = JsonReaderInvoker.class;
    JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);
    Class<?> class1 = jsonReaderCodeGenerator_TypeInfo0.getType();
    Class<?> expectedType = JsonReaderInvoker.class;
    Class<?> actualType = class1;
    assertEquals(expectedType, actualType);
}

@Test(timeout = 4000)
public void testSetCollectionType() throws Throwable {
    // Create a new AttributeInfo object
    Class<JavaTimeInstantFormatter> class0 = JavaTimeInstantFormatter.class;
    JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();
    JsonReaderCodeGenerator.AttributeInfo attributeInfo = new JsonReaderCodeGenerator.AttributeInfo(class0, jsonBeanAttribute0);
    
    // Set the collection type using the setCollectionType method
    Class<?> collectionType = class0;
    attributeInfo.setCollectionType(collectionType);
    
    // Verify that the collection type is set correctly
    assertEquals(collectionType, attributeInfo.getCollectionType());
}

}
