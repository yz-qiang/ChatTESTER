// original test path: /Users/zhi/Documents/PH.D/Project/Testing/ChatTESTER/CodePackage/Prompt2Testing/repo_get/Four_project/Zappos_zappos-json/src/test/java/com/zappos/json/ZapposJson_ESTest.java
/*
 * This file was automatically generated by EvoSuite
 * Thu Jan 25 14:19:12 GMT 2024
 */
package com.zappos.json;

import org.junit.Test;
import static org.junit.Assert.*;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.zappos.json.JsonConfig;
import com.zappos.json.ZapposJson;
import com.zappos.json.format.JavaDateFormatter;
import com.zappos.json.format.ValueFormatter;
import java.io.File;
import java.io.PipedReader;
import java.io.Reader;
import java.io.StringReader;
import java.io.Writer;
import java.lang.reflect.Array;
import java.sql.Timestamp;
import java.time.Instant;
import java.time.chrono.HijrahEra;
import java.util.Date;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.junit.runner.RunWith;

import com.zappos.json.format.ValueFormatter;
import org.junit.Test;
import static org.junit.Assert.*;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.zappos.json.JsonConfig;
import com.zappos.json.ZapposJson;
import com.zappos.json.format.JavaDateFormatter;
import com.zappos.json.format.ValueFormatter;
import java.io.File;
import java.io.PipedReader;
import java.io.Reader;
import java.io.StringReader;
import java.io.Writer;
import java.lang.reflect.Array;
import java.sql.Timestamp;
import java.time.Instant;
import java.time.chrono.HijrahEra;
import java.util.Date;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.junit.runner.RunWith;

import org.junit.Test;
import java.io.StringReader;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.zappos.json.JsonConfig;
import com.zappos.json.ZapposJson;
import com.zappos.json.format.JavaDateFormatter;
import com.zappos.json.format.ValueFormatter;
import java.io.File;
import java.io.PipedReader;
import java.io.Reader;
import java.io.StringReader;
import java.io.Writer;
import java.lang.reflect.Array;
import java.sql.Timestamp;
import java.time.Instant;
import java.time.chrono.HijrahEra;
import java.util.Date;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false)
public class ZapposJson_ESTest extends ZapposJson_ESTest_scaffolding {

@Test
public void testIsWriterConfig() {
    ZapposJson zapposJson = ZapposJson.getInstance();

    boolean result = zapposJson.is(JsonConfig.WriterConfig.WRITE_ENUM_USING_NAME);

    assertFalse(result);
}

@Test(timeout = 4000)
public void testRemoveValueFormatter() throws Throwable {
    ZapposJson zapposJson = new ZapposJson();
    Class<Date> class0 = Date.class;
    zapposJson.removeValueFormatter(class0);
}

    @Test
    public void testGetInstance_2() {
        // Test case 1: Verify that getInstance returns the same instance for the same name
        ZapposJson instance1 = ZapposJson.getInstance("name1");
        ZapposJson instance2 = ZapposJson.getInstance("name1");
        assertSame(instance1, instance2);

        // Test case 2: Verify that getInstance returns different instances for different names
        ZapposJson instance3 = ZapposJson.getInstance("name2");
        assertNotSame(instance1, instance3);
    }

@Test(timeout = 4000)
public void testDebug() throws Throwable {
    ZapposJson zapposJson0 = new ZapposJson();
    Class<HijrahEra>[] classArray0 = (Class<HijrahEra>[]) Array.newInstance(Class.class, 0);
    zapposJson0.debug("[]", classArray0);
    assertEquals(0, classArray0.length);
}

@Test
public void testGetValueFormatter() {
    ZapposJson zapposJson = new ZapposJson();
    Class<Date> class0 = Date.class;
    ValueFormatter<Object> valueFormatter0 = zapposJson.getValueFormatter(class0);
    assertNotNull(valueFormatter0);
}

@Test
public void testGetInstance() {
    ZapposJson instance = ZapposJson.getInstance();
    assertNotNull(instance);
    assertSame(instance, ZapposJson.getInstance());
}

}
