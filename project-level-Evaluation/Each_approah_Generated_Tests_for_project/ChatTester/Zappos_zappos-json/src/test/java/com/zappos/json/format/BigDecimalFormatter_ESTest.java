// original test path: /Users/zhi/Documents/PH.D/Project/Testing/ChatTESTER/CodePackage/Prompt2Testing/repo_get/Four_project/Zappos_zappos-json/src/test/java/com/zappos/json/format/BigDecimalFormatter_ESTest.java
/*
 * This file was automatically generated by EvoSuite
 * Thu Jan 25 13:31:38 GMT 2024
 */
package com.zappos.json.format;

import org.junit.Test;
import static org.junit.Assert.*;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.zappos.json.ZapposJson;
import com.zappos.json.format.BigDecimalFormatter;
import com.zappos.json.format.ValueFormatter;
import java.math.BigDecimal;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false)
public class BigDecimalFormatter_ESTest extends BigDecimalFormatter_ESTest_scaffolding {

@Test
public void testParse() throws Exception {
    BigDecimalFormatter formatter = new BigDecimalFormatter();

    // Fix the buggy line
    ZapposJson zapposJson = null;

    String string = "123.45";
    BigDecimal result = formatter.parse(zapposJson, string);
    assertEquals(new BigDecimal("123.45"), result);
}

    @Test
    public void testNewInstance() {
        BigDecimalFormatter formatter = new BigDecimalFormatter();
        ValueFormatter<BigDecimal> newInstance = formatter.newInstance();
        
        assertNotNull(newInstance);
        assertTrue(newInstance instanceof BigDecimalFormatter);
    }

    @Test
    public void testCast() {
        BigDecimalFormatter formatter = new BigDecimalFormatter();
        
        // Test case 1: Valid input
        Object obj1 = new BigDecimal("10.5");
        BigDecimal result1 = formatter.cast(obj1);
        assertEquals(new BigDecimal("10.5"), result1);
        
        // Test case 2: Valid input
        Object obj2 = new BigDecimal("0");
        BigDecimal result2 = formatter.cast(obj2);
        assertEquals(new BigDecimal("0"), result2);
        
        // Test case 3: Invalid input
        Object obj3 = "invalid";
        try {
            BigDecimal result3 = formatter.cast(obj3);
            fail("Expected ClassCastException to be thrown");
        } catch (ClassCastException e) {
            // Exception expected
        }
    }

}
