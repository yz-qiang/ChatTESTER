// original test path: /Users/zhi/Documents/PH.D/Project/Testing/ChatTESTER/CodePackage/Prompt2Testing/repo_get/Four_project/GoSimpleLLC_nbvcxz/src/test/java/me/gosimple/nbvcxz/resources/ConfigurationBuilder_ESTest.java
/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 27 03:58:16 GMT 2024
 */
package me.gosimple.nbvcxz.resources;

import org.junit.Test;
import java.util.Locale;
import static org.junit.Assert.*;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.regex.Pattern;
import me.gosimple.nbvcxz.matching.PasswordMatcher;
import me.gosimple.nbvcxz.resources.AdjacencyGraph;
import me.gosimple.nbvcxz.resources.Configuration;
import me.gosimple.nbvcxz.resources.ConfigurationBuilder;
import me.gosimple.nbvcxz.resources.Dictionary;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

import org.junit.Test;
import static org.junit.Assert.*;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.regex.Pattern;
import me.gosimple.nbvcxz.matching.PasswordMatcher;
import me.gosimple.nbvcxz.resources.AdjacencyGraph;
import me.gosimple.nbvcxz.resources.Configuration;
import me.gosimple.nbvcxz.resources.ConfigurationBuilder;
import me.gosimple.nbvcxz.resources.Dictionary;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

import org.junit.Test;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.Map;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.regex.Pattern;
import me.gosimple.nbvcxz.matching.PasswordMatcher;
import me.gosimple.nbvcxz.resources.AdjacencyGraph;
import me.gosimple.nbvcxz.resources.Configuration;
import me.gosimple.nbvcxz.resources.ConfigurationBuilder;
import me.gosimple.nbvcxz.resources.Dictionary;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

import org.junit.Test;
import java.util.regex.Pattern;
import static org.junit.Assert.*;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.regex.Pattern;
import me.gosimple.nbvcxz.matching.PasswordMatcher;
import me.gosimple.nbvcxz.resources.AdjacencyGraph;
import me.gosimple.nbvcxz.resources.Configuration;
import me.gosimple.nbvcxz.resources.ConfigurationBuilder;
import me.gosimple.nbvcxz.resources.Dictionary;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false)
public class ConfigurationBuilder_ESTest extends ConfigurationBuilder_ESTest_scaffolding {

@Test
public void testGetDefaultGuessTypes() {
    Long crackingHardwareCost1 = 1000000000L;

    Map<String, Long> expectedGuessTypes1 = ConfigurationBuilder.getDefaultGuessTypes(crackingHardwareCost1);

    Map<String, Long> actualGuessTypes1 = ConfigurationBuilder.getDefaultGuessTypes(crackingHardwareCost1);
    assertEquals(expectedGuessTypes1, actualGuessTypes1);
    Long crackingHardwareCost2 = 5000000000L;
    Map<String, Long> expectedGuessTypes2 = ConfigurationBuilder.getDefaultGuessTypes(crackingHardwareCost2);
    Map<String, Long> actualGuessTypes2 = ConfigurationBuilder.getDefaultGuessTypes(crackingHardwareCost2);
    assertEquals(expectedGuessTypes2, actualGuessTypes2);
    Long crackingHardwareCost3 = 10000000000L;
    Map<String, Long> expectedGuessTypes3 = ConfigurationBuilder.getDefaultGuessTypes(crackingHardwareCost3);
    Map<String, Long> actualGuessTypes3 = ConfigurationBuilder.getDefaultGuessTypes(crackingHardwareCost3);
    assertEquals(expectedGuessTypes3, actualGuessTypes3);
}

    @Test
    public void testGetDefaultYearPattern() {
        Pattern expectedPattern = Pattern.compile("19\\d\\d|200\\d|201\\d|202\\d");
        Pattern actualPattern = ConfigurationBuilder.getDefaultYearPattern();
        assertEquals(expectedPattern.pattern(), actualPattern.pattern());
    }

    @Test
    public void testGetDefaultMaxLength() {
        int expectedMaxLength = 256;
        int actualMaxLength = ConfigurationBuilder.getDefaultMaxLength();
        assertEquals(expectedMaxLength, actualMaxLength);
    }

@Test
public void testGetDefaultPasswordMatchers() {
    List<PasswordMatcher> defaultMatchers = ConfigurationBuilder.getDefaultPasswordMatchers();
    assertNotNull(defaultMatchers);
    // Add assertion statement here
    assertEquals(ConfigurationBuilder.getDefaultPasswordMatchers(), defaultMatchers);
}

    @Test
    public void testGetDefaultMinimumEntropy() {
        double expected = 35D;
        double actual = ConfigurationBuilder.getDefaultMinimumEntropy();
        assertEquals(expected, actual, 0.001);
    }

@Test
public void testSetMinimumEntropy() {
    ConfigurationBuilder configurationBuilder = new ConfigurationBuilder();
    Double minimumEntropy = 2.5;
    ConfigurationBuilder result = configurationBuilder.setMinimumEntropy(minimumEntropy);

    assertEquals(minimumEntropy, result.createConfiguration().getMinimumEntropy());
}

@Test
public void testSetMaxLength() {
    ConfigurationBuilder builder = new ConfigurationBuilder();
    Integer maxLength = 10;
    ConfigurationBuilder result = builder.setMaxLength(maxLength);

    assertEquals(maxLength, result.createConfiguration().getMaxLength());
}

@Test
public void testSetLocale() {
    ConfigurationBuilder builder = new ConfigurationBuilder();
    Locale expectedLocale = Locale.US;
    ConfigurationBuilder result = builder.setLocale(expectedLocale);

    Configuration configuration = result.createConfiguration();
    assertEquals(expectedLocale, configuration.getLocale());
}

@Test
public void testGetDefaultLeetTable() {
    Map<Character, Character[]> expectedLeetTable = ConfigurationBuilder.getDefaultLeetTable();
    Map<Character, Character[]> actualLeetTable = ConfigurationBuilder.getDefaultLeetTable();
    assertEquals(expectedLeetTable, actualLeetTable);
}

    @Test
    public void testGetMooresMultiplier() {
        // Set up
        long START = System.currentTimeMillis();
        long YEAR = 365 * 24 * 60 * 60 * 1000;

        // Calculate expected result
        double years = (System.currentTimeMillis() - START) / YEAR;
        if (years <= 1d) {
            years = 0;
        }
        double expected = Math.pow(2d, years / 2d);

        // Call the method under test
        BigDecimal actual = ConfigurationBuilder.getMooresMultiplier();

        // Assert the result
        assertEquals(BigDecimal.valueOf(expected), actual);
    }

    @Test
    public void testGetDefaultAdjacencyGraphs() {
        List<AdjacencyGraph> defaultAdjacencyGraphs = ConfigurationBuilder.getDefaultAdjacencyGraphs();
        assertNotNull(defaultAdjacencyGraphs);
        // Add additional assertions to validate the returned list of adjacency graphs
        // For example:
        assertEquals(3, defaultAdjacencyGraphs.size());
        // Add more assertions as needed
    }

    @Test
    public void testGetDefaultCrackingHardwareCost() {
        long expectedCost = 20000;
        long actualCost = ConfigurationBuilder.getDefaultCrackingHardwareCost();
        assertEquals(expectedCost, actualCost);
    }

    @Test
    public void testGetDefaultDictionaries() {
        // Arrange
        ConfigurationBuilder configurationBuilder = new ConfigurationBuilder();

        // Act
        List<Dictionary> dictionaries = configurationBuilder.getDefaultDictionaries();

        // Assert
        assertNotNull(dictionaries);
        // Add additional assertions based on the expected behavior of the method
    }

    @Test
    public void testGetDefaultDistanceCalc() {
        Boolean expected = true;
        Boolean actual = ConfigurationBuilder.getDefaultDistanceCalc();
        assertEquals(expected, actual);
    }

@Test
public void testCreateConfiguration() {
    ConfigurationBuilder configurationBuilder = new ConfigurationBuilder();
    Configuration configuration = configurationBuilder.createConfiguration();
    assertNotNull(configuration);
    assertNotNull(configuration.getPasswordMatchers());
    assertNotNull(configuration.getGuessTypes());
    assertNotNull(configuration.getDictionaries());
    assertNotNull(configuration.getAdjacencyGraphs());
    assertNotNull(configuration.getLeetTable());
    assertNotNull(configuration.getYearPattern());
    assertNotNull(configuration.getMinimumEntropy());
    assertNotNull(configuration.getMaxLength());
    assertNotNull(configuration.getLocale());

    // Fixing the buggy line
    assertNotNull(configurationBuilder.getDefaultDistanceCalc());

    assertNotNull(configuration.getCombinationAlgorithmTimeout());
}

    @Test
    public void testGetDefaultCombinationAlgorithmTimeout() {
        long expectedTimeout = 500L;
        long actualTimeout = ConfigurationBuilder.getDefaultCombinationAlgorithmTimeout();
        assertEquals(expectedTimeout, actualTimeout);
    }

}
