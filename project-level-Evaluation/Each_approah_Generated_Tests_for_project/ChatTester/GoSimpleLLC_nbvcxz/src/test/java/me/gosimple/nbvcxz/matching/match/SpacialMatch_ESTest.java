// original test path: /Users/zhi/Documents/PH.D/Project/Testing/ChatTESTER/CodePackage/Prompt2Testing/repo_get/Four_project/GoSimpleLLC_nbvcxz/src/test/java/me/gosimple/nbvcxz/matching/match/SpacialMatch_ESTest.java
/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 27 03:32:17 GMT 2024
 */
package me.gosimple.nbvcxz.matching.match;

import me.gosimple.nbvcxz.resources.AdjacencyGraph;
import java.util.ResourceBundle;
import org.junit.Test;
import static org.junit.Assert.*;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.function.BiFunction;
import java.util.regex.Pattern;
import me.gosimple.nbvcxz.matching.PasswordMatcher;
import me.gosimple.nbvcxz.matching.match.SpacialMatch;
import me.gosimple.nbvcxz.resources.AdjacencyGraph;
import me.gosimple.nbvcxz.resources.Configuration;
import me.gosimple.nbvcxz.resources.Dictionary;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

import me.gosimple.nbvcxz.resources.AdjacencyGraph;
import org.junit.Test;
import static org.junit.Assert.*;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.function.BiFunction;
import java.util.regex.Pattern;
import me.gosimple.nbvcxz.matching.PasswordMatcher;
import me.gosimple.nbvcxz.matching.match.SpacialMatch;
import me.gosimple.nbvcxz.resources.AdjacencyGraph;
import me.gosimple.nbvcxz.resources.Configuration;
import me.gosimple.nbvcxz.resources.Dictionary;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

import org.junit.Test;
import static org.junit.Assert.*;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.function.BiFunction;
import java.util.regex.Pattern;
import me.gosimple.nbvcxz.matching.PasswordMatcher;
import me.gosimple.nbvcxz.matching.match.SpacialMatch;
import me.gosimple.nbvcxz.resources.AdjacencyGraph;
import me.gosimple.nbvcxz.resources.Configuration;
import me.gosimple.nbvcxz.resources.Dictionary;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false)
public class SpacialMatch_ESTest extends SpacialMatch_ESTest_scaffolding {

@Test
public void testGetAdjacencyGraph() {
    HashMap<Character, String[]> hashMap0 = new HashMap<Character, String[]>();
    AdjacencyGraph adjacencyGraph0 = new AdjacencyGraph("Q+ir0x\"", hashMap0);
    SpacialMatch spacialMatch0 = new SpacialMatch("Q+ir0x\"", null, 0, 0, adjacencyGraph0, 0, 0);
    
    AdjacencyGraph result = spacialMatch0.getAdjacencyGraph();
    
    assertEquals(adjacencyGraph0, result);
}

@Test
public void testGetDetails() {
    LinkedList<PasswordMatcher> linkedList0 = new LinkedList<>();
    HashMap<String, Long> hashMap0 = new HashMap<>();
    LinkedList<Dictionary> linkedList1 = new LinkedList<>();
    LinkedList<AdjacencyGraph> linkedList2 = new LinkedList<>();
    HashMap<Character, Character[]> hashMap1 = new HashMap<>();
    Pattern pattern0 = Pattern.compile("");
    Double double0 = new Double(0.0);
    Integer integer0 = new Integer(1);
    Locale locale0 = Locale.ITALIAN;
    Configuration configuration0 = new Configuration(linkedList0, hashMap0, linkedList1, linkedList2, hashMap1, pattern0, double0, integer0, locale0, true, 1);
    HashMap<Character, String[]> hashMap2 = new HashMap<>();
    AdjacencyGraph adjacencyGraph0 = new AdjacencyGraph("zb-[S-?|V#[&n|'m]", hashMap2);
    SpacialMatch spacialMatch0 = new SpacialMatch("\"MPC;&n:+j@", configuration0, 1, 1, adjacencyGraph0, 1, 1);
    
    String expected = "Tipo di corrispondenza: SpacialMatch\nEntropia: 3.5849625007211565\nStringa: \"MPC;&n:+j@\nIndice iniziale: 1\nIndice finale: 1\nLunghezza: 11\nTipo Spaziale: zb-[S-?|V#[&n|'m]\nSvolte: 1\nSpostamenti: 1";
    String actual = spacialMatch0.getDetails();
    
    assertEquals(expected, actual);
}

@Test
public void testGetShiftedNumber() {
    HashMap<Character, String[]> hashMap0 = new HashMap<Character, String[]>();
    Character character0 = new Character('a');
    String[] stringArray0 = new String[4];
    stringArray0[0] = "";
    BiFunction<Object, Object, String[]> biFunction0 = (BiFunction<Object, Object, String[]>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
    hashMap0.merge(character0, stringArray0, biFunction0);
    AdjacencyGraph adjacencyGraph0 = new AdjacencyGraph("", hashMap0);
    SpacialMatch spacialMatch = new SpacialMatch("match", (Configuration) null, 0, 10, adjacencyGraph0, 5, 3);
    int expectedShiftedNumber = 3;
    int actualShiftedNumber = spacialMatch.getShiftedNumber();
    assertEquals(expectedShiftedNumber, actualShiftedNumber);
}

@Test
public void testGetTurns() {
    HashMap<Character, String[]> hashMap0 = new HashMap<Character, String[]>();
    Character character0 = new Character('a');
    String[] stringArray0 = new String[4];
    stringArray0[0] = "";
    BiFunction<Object, Object, String[]> biFunction0 = (BiFunction<Object, Object, String[]>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
    hashMap0.merge(character0, stringArray0, biFunction0);
    AdjacencyGraph adjacencyGraph0 = new AdjacencyGraph("", hashMap0);
    SpacialMatch spacialMatch0 = new SpacialMatch("i[xfg[2Gi[m", (Configuration) null, 4236, (-1347), adjacencyGraph0, 2554, 1147);
    int result = spacialMatch0.getTurns();
    assertEquals(2554, result);
}

}
