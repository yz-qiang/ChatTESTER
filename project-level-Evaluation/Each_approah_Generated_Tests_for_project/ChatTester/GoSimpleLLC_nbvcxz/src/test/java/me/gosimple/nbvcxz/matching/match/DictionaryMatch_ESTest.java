// original test path: /Users/zhi/Documents/PH.D/Project/Testing/ChatTESTER/CodePackage/Prompt2Testing/repo_get/Four_project/GoSimpleLLC_nbvcxz/src/test/java/me/gosimple/nbvcxz/matching/match/DictionaryMatch_ESTest.java
/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 27 03:25:40 GMT 2024
 */
package me.gosimple.nbvcxz.matching.match;

import org.junit.Test;
import static org.junit.Assert.*;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.regex.Pattern;
import me.gosimple.nbvcxz.matching.PasswordMatcher;
import me.gosimple.nbvcxz.matching.match.DictionaryMatch;
import me.gosimple.nbvcxz.resources.AdjacencyGraph;
import me.gosimple.nbvcxz.resources.Configuration;
import me.gosimple.nbvcxz.resources.Dictionary;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

import java.util.ArrayList;
import java.util.List;
import org.junit.Test;
import static org.junit.Assert.*;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.regex.Pattern;
import me.gosimple.nbvcxz.matching.PasswordMatcher;
import me.gosimple.nbvcxz.matching.match.DictionaryMatch;
import me.gosimple.nbvcxz.resources.AdjacencyGraph;
import me.gosimple.nbvcxz.resources.Configuration;
import me.gosimple.nbvcxz.resources.Dictionary;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false)
public class DictionaryMatch_ESTest extends DictionaryMatch_ESTest_scaffolding {

@Test
public void testIsLeet() {
    List<Character[]> leetSubstitution = new LinkedList<>();
    leetSubstitution.add(new Character[]{'a', '4'});
    DictionaryMatch dictionaryMatch = new DictionaryMatch("match", null, 0, 1, "value", 1, leetSubstitution, false, false, "dictionary", 0);
    assertTrue(dictionaryMatch.isLeet());

    DictionaryMatch dictionaryMatch2 = new DictionaryMatch("match", null, 0, 1, "value", 1, new LinkedList<Character[]>(), false, false, "dictionary", 0);

    assertFalse(dictionaryMatch2.isLeet());
}

@Test
public void testGetLeetSubstitution() {
    List<Character[]> leetSubstitution = new ArrayList<>();
    leetSubstitution.add(new Character[]{'a', '4'});
    leetSubstitution.add(new Character[]{'e', '3'});
    leetSubstitution.add(new Character[]{'o', '0'});

    LinkedList<PasswordMatcher> linkedList0 = new LinkedList<PasswordMatcher>();
    HashMap<String, Long> hashMap0 = new HashMap<String, Long>();
    LinkedList<Dictionary> linkedList1 = new LinkedList<Dictionary>();
    LinkedList<AdjacencyGraph> linkedList2 = new LinkedList<AdjacencyGraph>();
    HashMap<Character, Character[]> hashMap1 = new HashMap<Character, Character[]>();
    Pattern pattern0 = Pattern.compile("\n");
    Double double0 = new Double(129.0);
    Integer integer0 = new Integer(0);
    Locale locale0 = Locale.GERMAN;
    Configuration configuration0 = new Configuration(linkedList0, hashMap0, linkedList1, linkedList2, hashMap1, pattern0, double0, integer0, locale0, false, 0);

    DictionaryMatch dictionaryMatch = new DictionaryMatch("match", configuration0, 0, 10, "value", 1, leetSubstitution, false, false, "dictionary", 2);

    List<Character[]> result = dictionaryMatch.getLeetSubstitution();
    assertEquals(leetSubstitution, result);
}

@Test
public void testGetRank() {
    LinkedList<Character[]> linkedList0 = new LinkedList<Character[]>();
    DictionaryMatch dictionaryMatch = new DictionaryMatch("match", null, 0, 10, "value", 5, linkedList0, false, false, "dictionary", 3);

    int expectedRank = 5;
    int actualRank = dictionaryMatch.getRank();
    assertEquals(expectedRank, actualRank);
}

}
