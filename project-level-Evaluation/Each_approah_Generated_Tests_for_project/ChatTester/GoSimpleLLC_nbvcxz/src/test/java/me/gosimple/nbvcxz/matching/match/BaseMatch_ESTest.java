// original test path: /Users/zhi/Documents/PH.D/Project/Testing/ChatTESTER/CodePackage/Prompt2Testing/repo_get/Four_project/GoSimpleLLC_nbvcxz/src/test/java/me/gosimple/nbvcxz/matching/match/BaseMatch_ESTest.java
/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 27 03:19:58 GMT 2024
 */
package me.gosimple.nbvcxz.matching.match;

import org.junit.Test;
import static org.junit.Assert.*;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Map;
import java.util.regex.Pattern;
import me.gosimple.nbvcxz.matching.PasswordMatcher;
import me.gosimple.nbvcxz.matching.match.BaseMatch;
import me.gosimple.nbvcxz.matching.match.BruteForceMatch;
import me.gosimple.nbvcxz.matching.match.DictionaryMatch;
import me.gosimple.nbvcxz.matching.match.RepeatMatch;
import me.gosimple.nbvcxz.matching.match.SequenceMatch;
import me.gosimple.nbvcxz.matching.match.SpacialMatch;
import me.gosimple.nbvcxz.matching.match.YearMatch;
import me.gosimple.nbvcxz.resources.AdjacencyGraph;
import me.gosimple.nbvcxz.resources.Configuration;
import me.gosimple.nbvcxz.resources.Dictionary;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false)
public class BaseMatch_ESTest extends BaseMatch_ESTest_scaffolding {

@Test
public void testGetToken() {
    SequenceMatch sequenceMatch0 = new SequenceMatch("d", (Configuration) null, 1067, 0);
    sequenceMatch0.getToken();
    assertEquals(0, sequenceMatch0.getEndIndex());
    assertEquals(4.700439718141093, sequenceMatch0.getAverageEntropy(), 0.01);
    assertEquals(1067, sequenceMatch0.getStartIndex());

    String token = sequenceMatch0.getToken();
    assertNotNull(token);
    assertEquals("d", token);
}

    @Test
    public void testLog2() {
        double value = 8.0;
        double expected = 3.0;
        double delta = 0.0001;

        double result = BaseMatch.log2(value);

        assertEquals(expected, result, delta);
    }

    @Test
    public void testNCk() {
        // Test case 1: n = 5, k = 2
        long expected1 = 10;
        long result1 = BaseMatch.nCk(5, 2);
        assertEquals(expected1, result1);

        // Test case 2: n = 10, k = 3
        long expected2 = 120;
        long result2 = BaseMatch.nCk(10, 3);
        assertEquals(expected2, result2);

        // Test case 3: n = 0, k = 0
        long expected3 = 1;
        long result3 = BaseMatch.nCk(0, 0);
        assertEquals(expected3, result3);

        // Test case 4: n = 7, k = 7
        long expected4 = 1;
        long result4 = BaseMatch.nCk(7, 7);
        assertEquals(expected4, result4);

        // Test case 5: n = 4, k = 5
        long expected5 = 0;
        long result5 = BaseMatch.nCk(4, 5);
        assertEquals(expected5, result5);
    }

@Test
public void testGetStartIndex() {
    YearMatch yearMatch = new YearMatch("a._jB-!,<c", (Configuration) null, (-416), (-416));
    int expectedStartIndex = -416;
    int actualStartIndex = yearMatch.getStartIndex();
    assertEquals(expectedStartIndex, actualStartIndex);
}

@Test
public void testGetAverageEntropy() {
    YearMatch yearMatch = new YearMatch("a._jB-!,<c", (Configuration) null, (-416), (-416));
    double averageEntropy = yearMatch.getAverageEntropy();
    assertEquals(0.7011227255423254, averageEntropy, 0.01);
    assertEquals((-416), yearMatch.getEndIndex());
    assertEquals((-416), yearMatch.getStartIndex());
}

@Test
public void testGetEndIndex() {
    YearMatch yearMatch = new YearMatch("a._jB-!,<c", (Configuration) null, (-416), (-416));
    int expectedEndIndex = -416;
    int actualEndIndex = yearMatch.getEndIndex();
    assertEquals(expectedEndIndex, actualEndIndex);
}

}
