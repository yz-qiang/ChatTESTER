// original test path: /Users/zhi/Documents/PH.D/Project/Testing/ChatTESTER/CodePackage/Prompt2Testing/repo_get/Four_project/sachin-handiekar_jInstagram/src/test/java/org/jinstagram/entity/users/feed/MediaFeedData_ESTest.java
/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 27 04:30:23 GMT 2024
 */
package org.jinstagram.entity.users.feed;

import org.jinstagram.entity.common.Images;
import org.junit.Test;
import static org.junit.Assert.*;
import org.junit.Test;
import static org.junit.Assert.*;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jinstagram.entity.common.Caption;
import org.jinstagram.entity.common.Comments;
import org.jinstagram.entity.common.Images;
import org.jinstagram.entity.common.Likes;
import org.jinstagram.entity.common.Location;
import org.jinstagram.entity.common.User;
import org.jinstagram.entity.common.UsersInPhoto;
import org.jinstagram.entity.common.Videos;
import org.jinstagram.entity.users.feed.CarouselMedia;
import org.jinstagram.entity.users.feed.MediaFeedData;
import org.junit.runner.RunWith;

import org.jinstagram.entity.common.Location;
import org.junit.Test;
import static org.junit.Assert.*;
import org.junit.Test;
import static org.junit.Assert.*;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jinstagram.entity.common.Caption;
import org.jinstagram.entity.common.Comments;
import org.jinstagram.entity.common.Images;
import org.jinstagram.entity.common.Likes;
import org.jinstagram.entity.common.Location;
import org.jinstagram.entity.common.User;
import org.jinstagram.entity.common.UsersInPhoto;
import org.jinstagram.entity.common.Videos;
import org.jinstagram.entity.users.feed.CarouselMedia;
import org.jinstagram.entity.users.feed.MediaFeedData;
import org.junit.runner.RunWith;

import org.jinstagram.entity.common.Comments;
import org.junit.Test;
import static org.junit.Assert.*;
import org.junit.Test;
import static org.junit.Assert.*;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jinstagram.entity.common.Caption;
import org.jinstagram.entity.common.Comments;
import org.jinstagram.entity.common.Images;
import org.jinstagram.entity.common.Likes;
import org.jinstagram.entity.common.Location;
import org.jinstagram.entity.common.User;
import org.jinstagram.entity.common.UsersInPhoto;
import org.jinstagram.entity.common.Videos;
import org.jinstagram.entity.users.feed.CarouselMedia;
import org.jinstagram.entity.users.feed.MediaFeedData;
import org.junit.runner.RunWith;

import org.junit.Test;
import static org.junit.Assert.*;
import org.junit.Test;
import static org.junit.Assert.*;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jinstagram.entity.common.Caption;
import org.jinstagram.entity.common.Comments;
import org.jinstagram.entity.common.Images;
import org.jinstagram.entity.common.Likes;
import org.jinstagram.entity.common.Location;
import org.jinstagram.entity.common.User;
import org.jinstagram.entity.common.UsersInPhoto;
import org.jinstagram.entity.common.Videos;
import org.jinstagram.entity.users.feed.CarouselMedia;
import org.jinstagram.entity.users.feed.MediaFeedData;
import org.junit.runner.RunWith;

import org.jinstagram.entity.common.User;
import org.junit.Test;
import static org.junit.Assert.*;
import org.junit.Test;
import static org.junit.Assert.*;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jinstagram.entity.common.Caption;
import org.jinstagram.entity.common.Comments;
import org.jinstagram.entity.common.Images;
import org.jinstagram.entity.common.Likes;
import org.jinstagram.entity.common.Location;
import org.jinstagram.entity.common.User;
import org.jinstagram.entity.common.UsersInPhoto;
import org.jinstagram.entity.common.Videos;
import org.jinstagram.entity.users.feed.CarouselMedia;
import org.jinstagram.entity.users.feed.MediaFeedData;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false)
public class MediaFeedData_ESTest extends MediaFeedData_ESTest_scaffolding {

@Test
public void testGetCarouselMedia() {
    MediaFeedData mediaFeedData = new MediaFeedData();

    List<CarouselMedia> carouselMediaList = new LinkedList<CarouselMedia>();

    CarouselMedia carouselMedia1 = new CarouselMedia();
    CarouselMedia carouselMedia2 = new CarouselMedia();
    carouselMediaList.add(carouselMedia1);
    carouselMediaList.add(carouselMedia2);
    mediaFeedData.setCarouselMedia(carouselMediaList);
    List<CarouselMedia> result = mediaFeedData.getCarouselMedia();
    assertEquals(carouselMediaList, result);
}

    @Test
    public void testSetImages() {
        // Create a new MediaFeedData object
        MediaFeedData mediaFeedData = new MediaFeedData();

        // Create a new Images object
        Images images = new Images();

        // Set the Images object using the setImages method
        mediaFeedData.setImages(images);

        // Verify that the images variable of the MediaFeedData object is set correctly
        assertEquals(images, mediaFeedData.getImages());
    }

    @Test
    public void testGetComments() {
        // Create a new instance of MediaFeedData
        MediaFeedData mediaFeedData = new MediaFeedData();

        // Create a new instance of Comments
        Comments comments = new Comments();

        // Set the comments for the mediaFeedData object
        mediaFeedData.setComments(comments);

        // Call the getComments() method
        Comments result = mediaFeedData.getComments();

        // Assert that the returned comments is equal to the comments set
        assertEquals(comments, result);
    }

    @Test
    public void testSetComments() {
        // Create a MediaFeedData object
        MediaFeedData mediaFeedData = new MediaFeedData();

        // Create a Comments object
        Comments comments = new Comments();

        // Set the Comments object using the setComments method
        mediaFeedData.setComments(comments);

        // Verify that the comments instance variable is set correctly
        assertEquals(comments, mediaFeedData.getComments());
    }

    @Test
    public void testSetLink() {
        // Create a new instance of MediaFeedData
        MediaFeedData mediaFeedData = new MediaFeedData();

        // Set the link using the setLink method
        String link = "https://example.com";
        mediaFeedData.setLink(link);

        // Verify that the link has been set correctly
        assertEquals(link, mediaFeedData.getLink());
    }

    @Test
    public void testGetUser() {
        // Create a MediaFeedData object
        MediaFeedData mediaFeedData = new MediaFeedData();

        // Create a User object
        User user = new User();
        // Set the User object to the MediaFeedData object
        mediaFeedData.setUser(user);

        // Call the getUser() method
        User result = mediaFeedData.getUser();

        // Assert that the returned User object is the same as the one set
        assertEquals(user, result);
    }

    @Test
    public void testGetCaption() {
        // Create a MediaFeedData object
        MediaFeedData mediaFeedData = new MediaFeedData();

        // Create a Caption object
        Caption caption = new Caption();
        caption.setText("Test caption");

        // Set the caption for the MediaFeedData object
        mediaFeedData.setCaption(caption);

        // Call the getCaption() method
        Caption result = mediaFeedData.getCaption();

        // Assert that the returned caption is equal to the original caption
        assertEquals(caption, result);
    }

    @Test
    public void testGetLikes() {
        // Create a MediaFeedData instance
        MediaFeedData mediaFeedData = new MediaFeedData();

        // Create a Likes object
        Likes likes = new Likes();
        // Set any required properties of the Likes object

        // Set the Likes object to the MediaFeedData instance
        mediaFeedData.setLikes(likes);

        // Call the getLikes() method and assert that it returns the expected Likes object
        assertEquals(likes, mediaFeedData.getLikes());
    }

    @Test
    public void testGetLink() {
        // Create a MediaFeedData object
        MediaFeedData mediaFeedData = new MediaFeedData();
        
        // Set the link value
        String link = "https://example.com";
        mediaFeedData.setLink(link);
        
        // Call the getLink() method and assert the returned value
        assertEquals(link, mediaFeedData.getLink());
    }

    @Test
    public void testIsUserHasLiked() {
        // Create a MediaFeedData object
        MediaFeedData mediaFeedData = new MediaFeedData();

        // Set the userHasLiked property to true
        mediaFeedData.setUserHasLiked(true);

        // Call the isUserHasLiked method and assert that it returns true
        assertTrue(mediaFeedData.isUserHasLiked());

        // Set the userHasLiked property to false
        mediaFeedData.setUserHasLiked(false);

        // Call the isUserHasLiked method and assert that it returns false
        assertFalse(mediaFeedData.isUserHasLiked());
    }

    @Test
    public void testGetCreatedTime() {
        // Create a MediaFeedData object
        MediaFeedData mediaFeedData = new MediaFeedData();

        // Set the createdTime value
        String expectedCreatedTime = "2021-01-01T12:00:00";
        mediaFeedData.setCreatedTime(expectedCreatedTime);

        // Retrieve the createdTime value using the getCreatedTime() method
        String actualCreatedTime = mediaFeedData.getCreatedTime();

        // Assert that the retrieved createdTime value matches the expected value
        assertEquals(expectedCreatedTime, actualCreatedTime);
    }

    @Test
    public void testSetCaption() {
        // Create a new instance of MediaFeedData
        MediaFeedData mediaFeedData = new MediaFeedData();

        // Create a new instance of Caption
        Caption caption = new Caption();
        // Set the properties of the caption object
        caption.setText("Test caption");

        // Call the setCaption method of MediaFeedData and pass the caption object
        mediaFeedData.setCaption(caption);

        // Assert that the caption object is set correctly
        assertEquals(caption, mediaFeedData.getCaption());
    }

    @Test
    public void testSetUser() {
        // Create a MediaFeedData object
        MediaFeedData mediaFeedData = new MediaFeedData();

        // Create a User object
        User user = new User();

        // Set the User object using the setUser method
        mediaFeedData.setUser(user);

        // Verify that the user instance variable is set correctly
        assertEquals(user, mediaFeedData.getUser());
    }

    @Test
    public void testSetCreatedTime() {
        // Create an instance of MediaFeedData
        MediaFeedData mediaFeedData = new MediaFeedData();

        // Set the createdTime using the setCreatedTime method
        String createdTime = "2021-10-01T12:00:00";
        mediaFeedData.setCreatedTime(createdTime);

        // Verify that the createdTime has been set correctly
        assertEquals(createdTime, mediaFeedData.getCreatedTime());
    }

    @Test
    public void testGetLocation() {
        // Create a new instance of MediaFeedData
        MediaFeedData mediaFeedData = new MediaFeedData();

        // Create a new instance of Location
        Location location = new Location();
        // Set the desired location values
        location.setLatitude(37.7749);
        location.setLongitude(-122.4194);

        // Set the location of the mediaFeedData object
        mediaFeedData.setLocation(location);

        // Call the getLocation() method
        Location result = mediaFeedData.getLocation();

        // Assert that the returned location is equal to the expected location
        assertEquals(location, result);
    }

    @Test
    public void testSetLocation() {
        // Create a new MediaFeedData object
        MediaFeedData mediaFeedData = new MediaFeedData();

        // Create a new Location object
        Location location = new Location();
        // Set the properties of the Location object
        location.setLatitude(37.7749);
        location.setLongitude(-122.4194);
        location.setName("San Francisco");

        // Call the setLocation() method with the Location object
        mediaFeedData.setLocation(location);

        // Verify that the location attribute of the MediaFeedData object is set correctly
        assertEquals(location, mediaFeedData.getLocation());
    }

    @Test
    public void testGetVideos() {
        // Create a MediaFeedData object
        MediaFeedData mediaFeedData = new MediaFeedData();

        // Create a Videos object
        Videos videos = new Videos();

        // Set the Videos object in the MediaFeedData object
        mediaFeedData.setVideos(videos);

        // Call the getVideos() method
        Videos result = mediaFeedData.getVideos();

        // Assert that the returned Videos object is the same as the one set
        assertEquals(videos, result);
    }

    @Test
    public void testSetImageFilter() {
        // Create a MediaFeedData object
        MediaFeedData mediaFeedData = new MediaFeedData();

        // Set the image filter
        String imageFilter = "sepia";
        mediaFeedData.setImageFilter(imageFilter);

        // Verify that the image filter is set correctly
        assertEquals(imageFilter, mediaFeedData.getImageFilter());
    }

    @Test
    public void testSetVideos() {
        // Create a new instance of MediaFeedData
        MediaFeedData mediaFeedData = new MediaFeedData();

        // Create a new instance of Videos
        Videos videos = new Videos();

        // Set the videos object using the setVideos method
        mediaFeedData.setVideos(videos);

        // Verify that the videos object is set correctly
        assertEquals(videos, mediaFeedData.getVideos());
    }

    @Test
    public void testSetId() {
        // Create a new instance of MediaFeedData
        MediaFeedData mediaFeedData = new MediaFeedData();

        // Set the id using the setId method
        String id = "12345";
        mediaFeedData.setId(id);

        // Verify that the id has been set correctly
        assertEquals(id, mediaFeedData.getId());
    }

    @Test
    public void testGetImageFilter() {
        // Create a MediaFeedData object
        MediaFeedData mediaFeedData = new MediaFeedData();

        // Set the image filter
        mediaFeedData.setImageFilter("Filter1");

        // Retrieve the image filter using the getImageFilter() method
        String imageFilter = mediaFeedData.getImageFilter();

        // Assert that the retrieved image filter is equal to the set image filter
        assertEquals("Filter1", imageFilter);
    }

@Test
public void testSetTags() {
    MediaFeedData mediaFeedData = new MediaFeedData();

    List<String> tags = new LinkedList<String>();
    tags.add("tag1");
    tags.add("tag2");
    tags.add("tag3");

    mediaFeedData.setTags(tags);
    assertEquals(tags, mediaFeedData.getTags());
}

    @Test
    public void testSetType() {
        // Create an instance of MediaFeedData
        MediaFeedData mediaFeedData = new MediaFeedData();

        // Set the type attribute using the setType method
        String type = "photo";
        mediaFeedData.setType(type);

        // Verify that the type attribute has been set correctly
        assertEquals(type, mediaFeedData.getType());
    }

    @Test
    public void testSetLikes() {
        // Create a MediaFeedData object
        MediaFeedData mediaFeedData = new MediaFeedData();

        // Create a Likes object
        Likes likes = new Likes();

        // Set the Likes object using the setLikes method
        mediaFeedData.setLikes(likes);

        // Verify that the likes instance variable is set correctly
        assertEquals(likes, mediaFeedData.getLikes());
    }

    @Test
    public void testGetId() {
        // Create a MediaFeedData object
        MediaFeedData mediaFeedData = new MediaFeedData();
        
        // Set the id attribute
        mediaFeedData.setId("12345");
        
        // Call the getId() method and assert the returned value
        assertEquals("12345", mediaFeedData.getId());
    }

@Test
public void testGetUsersInPhotoList() {
    MediaFeedData mediaFeedData = new MediaFeedData();

    List<UsersInPhoto> usersInPhotoList = new LinkedList<UsersInPhoto>();

    UsersInPhoto user1 = new UsersInPhoto();
    UsersInPhoto user2 = new UsersInPhoto();
    usersInPhotoList.add(user1);
    usersInPhotoList.add(user2);
    mediaFeedData.setUsersInPhotoList(usersInPhotoList);
    List<UsersInPhoto> result = mediaFeedData.getUsersInPhotoList();
    assertEquals(usersInPhotoList, result);
}

    @Test
    public void testSetUserHasLiked() {
        MediaFeedData mediaFeedData = new MediaFeedData();
        boolean userHasLiked = true;
        
        mediaFeedData.setUserHasLiked(userHasLiked);
        
        assertTrue(mediaFeedData.isUserHasLiked());
    }

    @Test
    public void testGetType() {
        // Create a MediaFeedData object
        MediaFeedData mediaFeedData = new MediaFeedData();

        // Set the type of the object
        mediaFeedData.setType("photo");

        // Call the getType() method and assert the returned value
        assertEquals("photo", mediaFeedData.getType());
    }

@Test
public void testGetTags() {
    MediaFeedData mediaFeedData = new MediaFeedData();

    List<String> tags = new LinkedList<String>();

    tags.add("tag1");
    tags.add("tag2");
    tags.add("tag3");
    mediaFeedData.setTags(tags);
    List<String> retrievedTags = mediaFeedData.getTags();
    assertEquals(tags, retrievedTags);
}

    @Test
    public void testGetImages() {
        // Create a MediaFeedData object
        MediaFeedData mediaFeedData = new MediaFeedData();

        // Create an Images object
        Images images = new Images();

        // Set the Images object to the MediaFeedData object
        mediaFeedData.setImages(images);

        // Call the getImages() method
        Images result = mediaFeedData.getImages();

        // Assert that the returned Images object is the same as the one set
        assertEquals(images, result);
    }

@Test
public void testSetUsersInPhotoList() {
    MediaFeedData mediaFeedData = new MediaFeedData();

    List<UsersInPhoto> usersInPhotoList = new LinkedList<UsersInPhoto>();

    UsersInPhoto user1 = new UsersInPhoto();
    UsersInPhoto user2 = new UsersInPhoto();
    usersInPhotoList.add(user1);
    usersInPhotoList.add(user2);
    mediaFeedData.setUsersInPhotoList(usersInPhotoList);
    assertEquals(usersInPhotoList, mediaFeedData.getUsersInPhotoList());
}

}
