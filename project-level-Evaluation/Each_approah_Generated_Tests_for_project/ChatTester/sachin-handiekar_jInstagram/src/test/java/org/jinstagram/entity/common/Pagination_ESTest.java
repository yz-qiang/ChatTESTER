// original test path: /Users/zhi/Documents/PH.D/Project/Testing/ChatTESTER/CodePackage/Prompt2Testing/repo_get/Four_project/sachin-handiekar_jInstagram/src/test/java/org/jinstagram/entity/common/Pagination_ESTest.java
/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 27 03:50:55 GMT 2024
 */
package org.jinstagram.entity.common;

import org.junit.Test;
import static org.junit.Assert.*;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jinstagram.entity.common.Pagination;
import org.junit.runner.RunWith;

import org.apache.commons.lang3.StringUtils;
import org.junit.Test;
import static org.junit.Assert.*;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jinstagram.entity.common.Pagination;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false)
public class Pagination_ESTest extends Pagination_ESTest_scaffolding {

    @Test
    public void testSetNextCursor() {
        Pagination pagination = new Pagination();
        String nextCursor = "12345";
        
        pagination.setNextCursor(nextCursor);
        
        assertEquals(nextCursor, pagination.getNextCursor());
    }

    @Test
    public void testGetNextMinId() {
        Pagination pagination = new Pagination();
        String expected = "12345";
        pagination.setNextMinId(expected);
        
        String actual = pagination.getNextMinId();
        
        assertEquals(expected, actual);
    }

    @Test
    public void testGetNextUrl() {
        Pagination pagination = new Pagination();
        String expectedUrl = "https://example.com/next";
        pagination.setNextUrl(expectedUrl);

        String actualUrl = pagination.getNextUrl();

        assertEquals(expectedUrl, actualUrl);
    }

    @Test
    public void testSetDepreciationWarning() {
        Pagination pagination = new Pagination();
        String depreciationWarning = "This object is deprecated.";

        pagination.setDepreciationWarning(depreciationWarning);

        assertEquals(depreciationWarning, pagination.getDepreciationWarning());
    }

    @Test
    public void testGetNextCursor() {
        Pagination pagination = new Pagination();
        String expectedNextCursor = "12345";
        pagination.setNextCursor(expectedNextCursor);

        String actualNextCursor = pagination.getNextCursor();

        assertEquals(expectedNextCursor, actualNextCursor);
    }

    @Test
    public void testGetMinTagId() {
        Pagination pagination = new Pagination();
        String expected = "12345";
        pagination.setMinTagId(expected);
        
        String actual = pagination.getMinTagId();
        
        assertEquals(expected, actual);
    }

    @Test
    public void testSetMinTagId() {
        Pagination pagination = new Pagination();
        String minTagId = "12345";
        
        pagination.setMinTagId(minTagId);
        
        assertEquals(minTagId, pagination.getMinTagId());
    }

    @Test
    public void testHasNextPage_WhenNextUrlIsNotBlank_ReturnsTrue() {
        // Arrange
        Pagination pagination = new Pagination();
        pagination.setNextUrl("https://example.com/nextPage");

        // Act
        boolean result = pagination.hasNextPage();

        // Assert
        assertTrue(result);
    }

    @Test
    public void testGetNextMaxId() {
        Pagination pagination = new Pagination();
        String expected = "12345";
        pagination.setNextMaxId(expected);
        
        String actual = pagination.getNextMaxId();
        
        assertEquals(expected, actual);
    }

    @Test
    public void testSetNextUrl() {
        Pagination pagination = new Pagination();
        String nextUrl = "https://example.com/next";

        pagination.setNextUrl(nextUrl);

        assertEquals(nextUrl, pagination.getNextUrl());
    }

    @Test
    public void testSetNextMaxTagId() {
        // Create an instance of Pagination
        Pagination pagination = new Pagination();

        // Set the nextMaxTagId using the provided input string
        String nextMaxTagId = "12345";
        pagination.setNextMaxTagId(nextMaxTagId);

        // Verify that the nextMaxTagId has been set correctly
        assertEquals(nextMaxTagId, pagination.getNextMaxTagId());
    }

    @Test
    public void testSetNextMinId() {
        Pagination pagination = new Pagination();
        String nextMinId = "12345";
        
        pagination.setNextMinId(nextMinId);
        
        assertEquals(nextMinId, pagination.getNextMinId());
    }

    @Test
    public void testGetNextMaxTagId() {
        Pagination pagination = new Pagination();
        String expected = "12345";
        pagination.setNextMaxTagId(expected);
        
        String actual = pagination.getNextMaxTagId();
        
        assertEquals(expected, actual);
    }

    @Test
    public void testGetDepreciationWarning() {
        Pagination pagination = new Pagination();
        String expectedWarning = "This asset is deprecated.";

        // Set the depreciation warning
        pagination.setDepreciationWarning(expectedWarning);

        // Retrieve the depreciation warning using the getDepreciationWarning() method
        String actualWarning = pagination.getDepreciationWarning();

        // Assert that the retrieved warning matches the expected warning
        assertEquals(expectedWarning, actualWarning);
    }

    @Test
    public void testToString() {
        Pagination pagination = new Pagination();
        pagination.setDepreciationWarning("This is a depreciation warning");
        pagination.setMinTagId("123456");
        pagination.setNextMaxId("789012");
        pagination.setNextMaxTagId("345678");
        pagination.setNextMinId("901234");
        pagination.setNextUrl("https://example.com");

        String expected = "Pagination [depreciationWarning=This is a depreciation warning, minTagId=123456, nextMaxId=789012, nextMaxTagId=345678, nextMinId=901234, nextUrl=https://example.com]";
        String actual = pagination.toString();

        assertEquals(expected, actual);
    }

    @Test
    public void testSetNextMaxId() {
        Pagination pagination = new Pagination();
        String nextMaxId = "12345";
        
        pagination.setNextMaxId(nextMaxId);
        
        assertEquals(nextMaxId, pagination.getNextMaxId());
    }

}
