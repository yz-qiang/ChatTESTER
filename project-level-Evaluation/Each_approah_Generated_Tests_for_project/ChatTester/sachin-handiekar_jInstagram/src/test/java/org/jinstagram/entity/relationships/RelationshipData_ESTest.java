// original test path: /Users/zhi/Documents/PH.D/Project/Testing/ChatTESTER/CodePackage/Prompt2Testing/repo_get/Four_project/sachin-handiekar_jInstagram/src/test/java/org/jinstagram/entity/relationships/RelationshipData_ESTest.java
/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 27 04:09:00 GMT 2024
 */
package org.jinstagram.entity.relationships;

import org.junit.Test;
import static org.junit.Assert.*;
import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jinstagram.entity.relationships.RelationshipData;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false)
public class RelationshipData_ESTest extends RelationshipData_ESTest_scaffolding {

    @Test
    public void testSetTargetUserPrivate() {
        // Create an instance of RelationshipData
        RelationshipData relationshipData = new RelationshipData();

        // Set the target user privacy status to true
        relationshipData.setTargetUserPrivate(true);

        // Verify that the target user privacy status is updated correctly
        assertTrue(relationshipData.isTargetUserPrivate());

        // Set the target user privacy status to false
        relationshipData.setTargetUserPrivate(false);

        // Verify that the target user privacy status is updated correctly
        assertFalse(relationshipData.isTargetUserPrivate());
    }

    @Test
    public void testGetOutgoingStatus() {
        // Create an instance of RelationshipData
        RelationshipData relationshipData = new RelationshipData();

        // Set the outgoing status
        relationshipData.setOutgoingStatus("Pending");

        // Retrieve the outgoing status using the getOutgoingStatus() method
        String outgoingStatus = relationshipData.getOutgoingStatus();

        // Assert that the retrieved outgoing status is equal to the set outgoing status
        assertEquals("Pending", outgoingStatus);
    }

    @Test
    public void testGetIncomingStatus() {
        // Create an instance of RelationshipData
        RelationshipData relationshipData = new RelationshipData();

        // Set the incoming status
        relationshipData.setIncomingStatus("Pending");

        // Call the getIncomingStatus() method
        String incomingStatus = relationshipData.getIncomingStatus();

        // Assert that the returned incoming status is equal to the set incoming status
        assertEquals("Pending", incomingStatus);
    }

    @Test
    public void testIsTargetUserPrivate() {
        // Create an instance of RelationshipData
        RelationshipData relationshipData = new RelationshipData();

        // Set the target user's privacy setting to private
        relationshipData.setTargetUserPrivate(true);

        // Verify that the isTargetUserPrivate() method returns true
        assertTrue(relationshipData.isTargetUserPrivate());

        // Set the target user's privacy setting to public
        relationshipData.setTargetUserPrivate(false);

        // Verify that the isTargetUserPrivate() method returns false
        assertFalse(relationshipData.isTargetUserPrivate());
    }

    @Test
    public void testSetIncomingStatus() {
        // Create an instance of RelationshipData
        RelationshipData relationshipData = new RelationshipData();

        // Set the incoming status using the method under test
        String incomingStatus = "pending";
        relationshipData.setIncomingStatus(incomingStatus);

        // Verify that the incoming status is set correctly
        assertEquals(incomingStatus, relationshipData.getIncomingStatus());
    }

    @Test
    public void testSetOutgoingStatus() {
        // Create an instance of RelationshipData
        RelationshipData relationshipData = new RelationshipData();

        // Set the outgoingStatus using the setOutgoingStatus method
        String expectedOutgoingStatus = "New Status";
        relationshipData.setOutgoingStatus(expectedOutgoingStatus);

        // Verify that the outgoingStatus has been updated correctly
        String actualOutgoingStatus = relationshipData.getOutgoingStatus();
        assertEquals(expectedOutgoingStatus, actualOutgoingStatus);
    }

}
