// original test path: /Users/zhi/Documents/PH.D/Project/Testing/ChatTESTER/CodePackage/Prompt2Testing/repo_get/Four_project/sachin-handiekar_jInstagram/src/test/java/org/jinstagram/InstagramConfig_ESTest.java
/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 27 04:50:40 GMT 2024
 */
package org.jinstagram;

import org.junit.Test;
import static org.junit.Assert.*;
import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jinstagram.InstagramConfig;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false)
public class InstagramConfig_ESTest extends InstagramConfig_ESTest_scaffolding {

    @Test
    public void testSetConnectionKeepAlive() {
        InstagramConfig config = new InstagramConfig();
        
        // Test case 1: Set connectionKeepAlive to true
        config.setConnectionKeepAlive(true);
        assertTrue(config.isConnectionKeepAlive());
        
        // Test case 2: Set connectionKeepAlive to false
        config.setConnectionKeepAlive(false);
        assertFalse(config.isConnectionKeepAlive());
    }

    @Test
    public void testSetConnectionTimeoutMills() {
        InstagramConfig config = new InstagramConfig();
        int connectionTimeoutMills = 5000;
        
        config.setConnectionTimeoutMills(connectionTimeoutMills);
        
        assertEquals(connectionTimeoutMills, config.getConnectionTimeoutMills());
    }

    @Test
    public void testGetVersion() {
        // Create an instance of InstagramConfig
        InstagramConfig config = new InstagramConfig();

        // Set the version
        String version = "1.0";
        config.setVersion(version);

        // Get the version using the getVersion() method
        String retrievedVersion = config.getVersion();

        // Assert that the retrieved version is equal to the set version
        assertEquals(version, retrievedVersion);
    }

    @Test
    public void testSetVersion() {
        // Create an instance of InstagramConfig
        InstagramConfig config = new InstagramConfig();

        // Set the base URI
        config.setBaseURI("https://api.instagram.com");

        // Set the version
        String version = "v1";
        config.setVersion(version);

        // Verify that the version is set correctly
        assertEquals(version, config.getVersion());

        // Verify that the API URL is updated accordingly
        String expectedApiURL = "https://api.instagram.com/v1";
        assertEquals(expectedApiURL, config.getApiURL());
    }

@Test
public void testGetApiURL() {
    InstagramConfig config = new InstagramConfig();
    String expectedApiURL = "https://api.instagram.com/null";
    config.setVersion(null);

    String actualApiURL = config.getApiURL();
    assertEquals(expectedApiURL, actualApiURL);
}

    @Test
    public void testSetRetryOnServerError() {
        InstagramConfig config = new InstagramConfig();
        
        // Test initial value
        assertFalse(config.isRetryOnServerError());
        
        // Test setting retryOnServerError to true
        config.setRetryOnServerError(true);
        assertTrue(config.isRetryOnServerError());
        
        // Test setting retryOnServerError to false
        config.setRetryOnServerError(false);
        assertFalse(config.isRetryOnServerError());
    }

    @Test
    public void testSetBaseURI() {
        // Create an instance of InstagramConfig
        InstagramConfig config = new InstagramConfig();

        // Set the base URI
        String baseURI = "https://api.instagram.com";
        config.setBaseURI(baseURI);

        // Verify that the base URI is set correctly
        assertEquals(baseURI, config.getBaseURI());

        // Verify that the API URL is constructed correctly
        String expectedApiURL = baseURI + "/" + config.getVersion();
        assertEquals(expectedApiURL, config.getApiURL());
    }

    @Test
    public void testGetConnectionTimeoutMills() {
        // Create an instance of InstagramConfig
        InstagramConfig config = new InstagramConfig();

        // Set the connection timeout to a specific value
        int expectedTimeout = 5000;
        config.setConnectionTimeoutMills(expectedTimeout);

        // Retrieve the connection timeout using the getConnectionTimeoutMills() method
        int actualTimeout = config.getConnectionTimeoutMills();

        // Assert that the retrieved connection timeout matches the expected value
        assertEquals(expectedTimeout, actualTimeout);
    }

    @Test
    public void testIsConnectionKeepAlive() {
        // Create an instance of InstagramConfig
        InstagramConfig config = new InstagramConfig();

        // Set the connectionKeepAlive field to true
        config.setConnectionKeepAlive(true);

        // Call the isConnectionKeepAlive method and assert that it returns true
        assertTrue(config.isConnectionKeepAlive());

        // Set the connectionKeepAlive field to false
        config.setConnectionKeepAlive(false);

        // Call the isConnectionKeepAlive method and assert that it returns false
        assertFalse(config.isConnectionKeepAlive());
    }

    @Test
    public void testGetReadTimeoutMills() {
        // Create an instance of InstagramConfig
        InstagramConfig config = new InstagramConfig();

        // Set a value for readTimeoutMills
        int expectedTimeout = 5000;
        config.setReadTimeoutMills(expectedTimeout);

        // Call the getReadTimeoutMills() method
        int actualTimeout = config.getReadTimeoutMills();

        // Assert that the returned value matches the expected value
        assertEquals(expectedTimeout, actualTimeout);
    }

    @Test
    public void testSetEnforceSignedRequest() {
        InstagramConfig config = new InstagramConfig();
        
        // Test when enforceSignedRequest is set to true
        config.setEnforceSignedRequest(true);
        assertTrue(config.isEnforceSignedRequest());
        
        // Test when enforceSignedRequest is set to false
        config.setEnforceSignedRequest(false);
        assertFalse(config.isEnforceSignedRequest());
    }

    @Test
    public void testIsEnforceSignedRequest() {
        // Create an instance of InstagramConfig
        InstagramConfig config = new InstagramConfig();

        // Set the value of enforceSignedRequest to true
        config.setEnforceSignedRequest(true);

        // Call the isEnforceSignedRequest method and assert that it returns true
        assertTrue(config.isEnforceSignedRequest());

        // Set the value of enforceSignedRequest to false
        config.setEnforceSignedRequest(false);

        // Call the isEnforceSignedRequest method and assert that it returns false
        assertFalse(config.isEnforceSignedRequest());
    }

    @Test
    public void testGetBaseURI() {
        // Create an instance of InstagramConfig
        InstagramConfig config = new InstagramConfig();

        // Set the base URI
        String expectedBaseURI = "https://www.example.com";
        config.setBaseURI(expectedBaseURI);

        // Retrieve the base URI using getBaseURI()
        String actualBaseURI = config.getBaseURI();

        // Assert that the retrieved base URI matches the expected base URI
        assertEquals(expectedBaseURI, actualBaseURI);
    }

    @Test
    public void testSetReadTimeoutMills() {
        InstagramConfig config = new InstagramConfig();
        int readTimeoutMills = 5000;
        
        config.setReadTimeoutMills(readTimeoutMills);
        
        assertEquals(readTimeoutMills, config.getReadTimeoutMills());
    }

    @Test
    public void testIsRetryOnServerError() {
        InstagramConfig config = new InstagramConfig();
        boolean retryOnServerError = config.isRetryOnServerError();
        assertFalse(retryOnServerError);
    }

}
