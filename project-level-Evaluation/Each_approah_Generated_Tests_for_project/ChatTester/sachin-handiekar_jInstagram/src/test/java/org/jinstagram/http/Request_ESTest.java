// original test path: /Users/zhi/Documents/PH.D/Project/Testing/ChatTESTER/CodePackage/Prompt2Testing/repo_get/Four_project/sachin-handiekar_jInstagram/src/test/java/org/jinstagram/http/Request_ESTest.java
/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 27 04:43:07 GMT 2024
 */
package org.jinstagram.http;

import java.net.Proxy;
import org.junit.Test;
import static org.junit.Assert.*;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.Proxy;
import java.net.URL;
import java.net.URLStreamHandler;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.jinstagram.http.Request;
import org.jinstagram.http.Verbs;
import org.junit.runner.RunWith;

import java.io.IOException;
import java.net.HttpURLConnection;
import org.junit.Test;
import static org.junit.Assert.*;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.Proxy;
import java.net.URL;
import java.net.URLStreamHandler;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.jinstagram.http.Request;
import org.jinstagram.http.Verbs;
import org.junit.runner.RunWith;

import org.junit.Test;
import java.util.concurrent.TimeUnit;
import static org.junit.Assert.*;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.Proxy;
import java.net.URL;
import java.net.URLStreamHandler;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.jinstagram.http.Request;
import org.jinstagram.http.Verbs;
import org.junit.runner.RunWith;

import java.net.HttpURLConnection;
import java.util.HashMap;
import java.util.Map;
import org.junit.Test;
import static org.junit.Assert.*;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.Proxy;
import java.net.URL;
import java.net.URLStreamHandler;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.jinstagram.http.Request;
import org.jinstagram.http.Verbs;
import org.junit.runner.RunWith;

import org.junit.Test;
import static org.junit.Assert.*;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.Proxy;
import java.net.URL;
import java.net.URLStreamHandler;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.jinstagram.http.Request;
import org.jinstagram.http.Verbs;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false)
public class Request_ESTest extends Request_ESTest_scaffolding {

    @Test
    public void testGetConnectTimeoutInMillis() {
        // Create a Request object
        Request request = new Request(Verbs.GET, "https://example.com");

        // Set the connect timeout
        request.setConnectTimeout(5000, TimeUnit.MILLISECONDS);

        // Get the connect timeout in milliseconds
        int connectTimeoutInMillis = request.getConnectTimeoutInMillis();

        // Assert that the retrieved connect timeout matches the set value
        assertEquals(5000, connectTimeoutInMillis);
    }

    @Test
    public void testSetReadTimeout() {
        Request request = new Request(Verbs.GET, "https://example.com");
        int duration = 10;
        TimeUnit unit = TimeUnit.SECONDS;

        request.setReadTimeout(duration, unit);

        int expectedTimeoutInMillis = (int) unit.toMillis(duration);
        int actualTimeoutInMillis = request.getReadTimeoutInMillis();

        assertEquals(expectedTimeoutInMillis, actualTimeoutInMillis);
    }

    @Test
    public void testAddBodyParameter() {
        // Create a new Request object
        Request request = new Request(Verbs.GET, "https://example.com");

        // Add body parameter
        String key = "param1";
        String value = "value1";
        request.addBodyParameter(key, value);

        // Get the bodyParams map from the Request object
        Map<String, String> bodyParams = request.getBodyParams();

        // Verify that the key-value pair is added to the bodyParams map
        assertTrue(bodyParams.containsKey(key));
        assertEquals(value, bodyParams.get(key));
    }

@Test(timeout = 4000)
public void testAddBody() throws Throwable {
    Verbs verbs0 = Verbs.DELETE;
    String url = "}B:Q{&$6Q^6\u0002Hym>N";
    Request request0 = new Request(verbs0, url);
    HttpURLConnection httpURLConnection0 = mock(HttpURLConnection.class, new ViolatedAssumptionAnswer());
    OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
    byte[] byteArray0 = new byte[1];
    doReturn(outputStream0).when(httpURLConnection0).getOutputStream();
    
    request0.addBody(httpURLConnection0, byteArray0);
    
    verify(httpURLConnection0).setRequestProperty(eq("Content-Length"), eq(String.valueOf(byteArray0.length)));
    verify(httpURLConnection0).setDoOutput(true);
    verify(outputStream0).write(byteArray0);
}

@Test
public void testSetProxy_2() {
    Verbs verbs0 = Verbs.POST;
    Request request0 = new Request(verbs0, "");
    Proxy proxy0 = Proxy.NO_PROXY;
    request0.setProxy(proxy0);
    Proxy actualProxy = request0.getProxy();
    assertEquals(proxy0, actualProxy);
}

    @Test
    public void testGetByteBodyContents() {
        // Create a Request object
        Request request = new Request(Verbs.GET, "https://example.com");

        // Set the payload or body parameters
        request.addPayload("test payload");
        request.addBodyParameter("key1", "value1");
        request.addBodyParameter("key2", "value2");

        // Set the character encoding
        request.setCharset("UTF-8");

        // Call the getByteBodyContents() method
        byte[] byteBodyContents = request.getByteBodyContents();

        // Verify the byte array is not null
        assertNotNull(byteBodyContents);

        // Verify the byte array length is greater than 0
        assertTrue(byteBodyContents.length > 0);
    }

    @Test
    public void testGetQueryStringParams() {
        // Create a Request object
        Request request = new Request(Verbs.GET, "https://example.com/api");

        // Set query string parameters
        request.addQuerystringParameter("param1", "value1");
        request.addQuerystringParameter("param2", "value2");

        // Get the query string parameters
        Map<String, String> queryParams = request.getQueryStringParams();

        // Assert that the query string parameters are correct
        assertEquals(2, queryParams.size());
        assertEquals("value1", queryParams.get("param1"));
        assertEquals("value2", queryParams.get("param2"));
    }

    @Test
    public void testGetVerb() {
        // Create a Request object with a specific verb
        Verbs expectedVerb = Verbs.GET;
        Request request = new Request(expectedVerb, "https://example.com");

        // Call the getVerb() method
        Verbs actualVerb = request.getVerb();

        // Assert that the returned verb matches the expected verb
        assertEquals(expectedVerb, actualVerb);
    }

    @Test
    public void testGetConnectionKeepAlive() {
        // Create a Request object
        Request request = new Request(Verbs.GET, "https://example.com");

        // Set the connectionKeepAlive variable to true
        request.setConnectionKeepAlive(true);

        // Call the getConnectionKeepAlive() method
        boolean connectionKeepAlive = request.getConnectionKeepAlive();

        // Assert that the returned value is true
        assertTrue(connectionKeepAlive);
    }

@Test
public void testAddHeaders() throws Exception {
    // Create a mock HttpURLConnection object
    HttpURLConnection conn = mock(HttpURLConnection.class);
    
    // Create a Request object
    Verbs verbs = Verbs.DELETE;
    Request request = new Request(verbs, "gg,DN/nH");
    
    // Add headers to the Request object
    request.addHeader("gg,DN/nH", "/c),&&-");
    
    // Call the addHeaders method
    request.addHeaders(conn);
    
    // Verify that the setRequestProperty method is called for each header
    for (Map.Entry<String, String> entry : request.getHeaders().entrySet()) {
        verify(conn).setRequestProperty(entry.getKey(), entry.getValue());
    }
}

    @Test
    public void testAddHeader() {
        // Create a new Request object
        Request request = new Request(Verbs.GET, "https://example.com");

        // Add a header
        String key = "Content-Type";
        String value = "application/json";
        request.addHeader(key, value);

        // Get the headers from the Request object
        Map<String, String> headers = request.getHeaders();

        // Verify that the header was added correctly
        assertTrue(headers.containsKey(key));
        assertEquals(value, headers.get(key));
    }

    @Test
    public void testGetUrl() {
        // Create a Request object
        Request request = new Request(Verbs.GET, "https://example.com/api");

        // Get the URL using getUrl() method
        String url = request.getUrl();

        // Assert that the returned URL is correct
        assertEquals("https://example.com/api", url);
    }

    @Test
    public void testGetReadTimeoutInMillis() {
        // Create a Request object
        Request request = new Request(Verbs.GET, "https://example.com");

        // Set the read timeout to 5000 milliseconds
        request.setReadTimeout(5000, TimeUnit.MILLISECONDS);

        // Get the read timeout in milliseconds
        int readTimeoutInMillis = request.getReadTimeoutInMillis();

        // Assert that the read timeout is equal to 5000 milliseconds
        assertEquals(5000, readTimeoutInMillis);
    }

    @Test
    public void testAddQuerystringParameter() {
        // Create a Request object
        Request request = new Request(Verbs.GET, "https://example.com");

        // Add query string parameter
        String key = "param1";
        String value = "value1";
        request.addQuerystringParameter(key, value);

        // Get the query string parameters
        Map<String, String> queryStringParams = request.getQueryStringParams();

        // Verify that the query string parameter is added correctly
        assertTrue(queryStringParams.containsKey(key));
        assertEquals(value, queryStringParams.get(key));
    }

@Test
public void testGetCharset() {
    Request request = new Request(Verbs.GET, "https:");

    // Fix the buggy line
    String defaultCharset = request.getCharset();

    assertEquals(defaultCharset, request.getCharset());
    String customCharset = "UTF-8";
    request.setCharset(customCharset);
    assertEquals(customCharset, request.getCharset());
}

    @Test
    public void testSetConnectTimeout() {
        Request request = new Request(Verbs.GET, "https://example.com");
        int duration = 10;
        TimeUnit unit = TimeUnit.SECONDS;

        request.setConnectTimeout(duration, unit);

        int expectedTimeoutInMillis = (int) unit.toMillis(duration);
        int actualTimeoutInMillis = request.getConnectTimeoutInMillis();

        assertEquals(expectedTimeoutInMillis, actualTimeoutInMillis);
    }

@Test
public void testAddPayload() {
    Request request = new Request(Verbs.GET, "https:");
    String payload = "This is a payload";
    request.addPayload(payload);

    // Fix the buggy line
    assertEquals(payload, request.getBodyContents());
}

@Test
public void testGetBodyContents() {
    Request request = new Request(Verbs.GET, "https:");
    byte[] byteBodyContents = "Test Body Contents".getBytes();

    // Fix the buggy line
    request.addPayload(new String(byteBodyContents));

    request.setCharset("UTF-8");
    String bodyContents = request.getBodyContents();
    assertEquals("Test Body Contents", bodyContents);
}

    @Test
    public void testGetSanitizedUrl() {
        // Create a Request object with a sample URL
        Request request = new Request(Verbs.GET, "http://example.com/path?param1=value1&param2=value2");

        // Call the getSanitizedUrl() method
        String sanitizedUrl = request.getSanitizedUrl();

        // Assert that the sanitized URL does not contain any query parameters or port numbers
        assertEquals("http://example.com/path", sanitizedUrl);
    }

    @Test
    public void testToString() {
        // Create a Request object with a specific verb and URL
        Request request = new Request(Verbs.GET, "https://example.com/api");

        // Verify that the toString() method returns the expected string representation
        String expected = "@Request(GET https://example.com/api)";
        String actual = request.toString();
        assertEquals(expected, actual);
    }

    @Test
    public void testGetHeaders() {
        // Create a Request object
        Request request = new Request(Verbs.GET, "https://example.com");

        // Add headers to the Request object
        request.addHeader("Content-Type", "application/json");
        request.addHeader("Authorization", "Bearer token");

        // Get the headers from the Request object
        Map<String, String> headers = request.getHeaders();

        // Assert that the headers map is not null
        assertNotNull(headers);

        // Assert that the headers map contains the expected headers
        assertTrue(headers.containsKey("Content-Type"));
        assertTrue(headers.containsKey("Authorization"));
        assertEquals("application/json", headers.get("Content-Type"));
        assertEquals("Bearer token", headers.get("Authorization"));
    }

    @Test
    public void testGetBodyParams() {
        // Create a new Request object
        Request request = new Request(Verbs.GET, "https://example.com");

        // Add body parameters to the request
        request.addBodyParameter("param1", "value1");
        request.addBodyParameter("param2", "value2");

        // Get the body parameters using the getBodyParams() method
        Map<String, String> bodyParams = request.getBodyParams();

        // Assert that the bodyParams map is not null
        assertNotNull(bodyParams);

        // Assert that the bodyParams map contains the expected key-value pairs
        assertEquals("value1", bodyParams.get("param1"));
        assertEquals("value2", bodyParams.get("param2"));
    }

@Test
public void testSetProxy() {
    Request request = new Request(Verbs.GET, "https:");

    Proxy proxy = Proxy.NO_PROXY;

    request.setProxy(proxy);
    assertEquals(proxy, request.getProxy());
}

    @Test
    public void testSetCharset() {
        // Create a new Request object
        Request request = new Request(Verbs.GET, "https://example.com");

        // Set the character encoding to UTF-8
        request.setCharset("UTF-8");

        // Verify that the character encoding is set correctly
        assertEquals("UTF-8", request.getCharset());
    }

}
