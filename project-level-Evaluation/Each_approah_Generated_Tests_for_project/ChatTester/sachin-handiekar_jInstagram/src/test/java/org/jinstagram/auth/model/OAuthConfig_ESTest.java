// original test path: /Users/zhi/Documents/PH.D/Project/Testing/ChatTESTER/CodePackage/Prompt2Testing/repo_get/Four_project/sachin-handiekar_jInstagram/src/test/java/org/jinstagram/auth/model/OAuthConfig_ESTest.java
/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 27 03:18:36 GMT 2024
 */
package org.jinstagram.auth.model;

import org.junit.Test;
import static org.junit.Assert.*;
import org.junit.Test;
import static org.junit.Assert.*;
import java.net.Proxy;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jinstagram.auth.model.OAuthConfig;
import org.junit.runner.RunWith;

import java.net.Proxy;
import org.junit.Test;
import static org.junit.Assert.*;
import org.junit.Test;
import static org.junit.Assert.*;
import java.net.Proxy;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jinstagram.auth.model.OAuthConfig;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false)
public class OAuthConfig_ESTest extends OAuthConfig_ESTest_scaffolding {

    @Test
    public void testHasScope() {
        // Create an instance of OAuthConfig
        OAuthConfig oauthConfig = new OAuthConfig("key", "secret");

        // Test when scope is null
        assertFalse(oauthConfig.hasScope());

        // Test when scope is not null
        oauthConfig = new OAuthConfig("key", "secret", "callback", "scope");
        assertTrue(oauthConfig.hasScope());
    }

    @Test
    public void testGetApiKey() {
        // Create an instance of OAuthConfig
        OAuthConfig oauthConfig = new OAuthConfig("key", "secret");

        // Call the getApiKey() method
        String apiKey = oauthConfig.getApiKey();

        // Assert that the returned apiKey is not null
        assertNotNull(apiKey);

        // Assert that the returned apiKey is equal to the expected value
        assertEquals("key", apiKey);
    }

@Test(timeout = 4000)
public void testGetDisplay() throws Throwable {
    // Given
    String expectedDisplay = "y*c+;*o7Lzs9S],ng!";
    OAuthConfig oAuthConfig = new OAuthConfig("J{Q=M", "J{Q=M", null, "", expectedDisplay);
    
    // When
    String actualDisplay = oAuthConfig.getDisplay();
    
    // Then
    assertEquals(expectedDisplay, actualDisplay);
}


    @Test
    public void testGetCallback() {
        // Create an instance of OAuthConfig
        OAuthConfig oauthConfig = new OAuthConfig("key", "secret", "callback", "scope", "display");

        // Get the callback value using the getCallback() method
        String callback = oauthConfig.getCallback();

        // Assert that the retrieved callback value is equal to the expected value
        assertEquals("callback", callback);
    }

    @Test
    public void testGetScope() {
        // Create an instance of OAuthConfig
        OAuthConfig oauthConfig = new OAuthConfig("key", "secret", "callback", "scope");

        // Get the scope value using the getScope() method
        String scope = oauthConfig.getScope();

        // Assert that the scope value is not null
        assertNotNull(scope);

        // Assert that the scope value is equal to the expected value
        assertEquals("scope", scope);
    }

    @Test
    public void testGetApiSecret() {
        // Create an instance of OAuthConfig
        OAuthConfig oauthConfig = new OAuthConfig("key", "secret");

        // Call the getApiSecret() method
        String apiSecret = oauthConfig.getApiSecret();

        // Assert that the returned value is not null
        assertNotNull(apiSecret);

        // Assert that the returned value is equal to the secret provided during initialization
        assertEquals("secret", apiSecret);
    }

    @Test
    public void testGetRequestProxy() {
        // Create an instance of OAuthConfig
        OAuthConfig oauthConfig = new OAuthConfig("key", "secret");

        // Create a Proxy object
        Proxy proxy = Proxy.NO_PROXY;

        // Set the Proxy object to the OAuthConfig instance
        oauthConfig.setRequestProxy(proxy);

        // Retrieve the Proxy object using getRequestProxy()
        Proxy retrievedProxy = oauthConfig.getRequestProxy();

        // Assert that the retrieved Proxy object is equal to the original Proxy object
        assertEquals(proxy, retrievedProxy);
    }

@Test
public void testSetRequestProxy() {
    OAuthConfig oauthConfig = new OAuthConfig("key", "secret");

    Proxy proxy = Proxy.NO_PROXY;

    oauthConfig.setRequestProxy(proxy);
    assertEquals(proxy, oauthConfig.getRequestProxy());
}

}
