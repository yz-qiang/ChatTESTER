/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 27 03:58:16 GMT 2024
 */
package me.gosimple.nbvcxz.resources;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.regex.Pattern;
import me.gosimple.nbvcxz.matching.PasswordMatcher;
import me.gosimple.nbvcxz.resources.AdjacencyGraph;
import me.gosimple.nbvcxz.resources.Configuration;
import me.gosimple.nbvcxz.resources.ConfigurationBuilder;
import me.gosimple.nbvcxz.resources.Dictionary;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false)
public class ConfigurationBuilder_ESTest extends ConfigurationBuilder_ESTest_scaffolding {
    @Test 
    public void testGetMooresMultiplier() { 
    System.out.println("getMooresMultiplier");
    BigDecimal expResult = BigDecimal.valueOf(1d);
    BigDecimal result = ConfigurationBuilder.getMooresMultiplier();
    assertEquals(expResult, result);
    }
    
    
    @Test 
    public void testGetDefaultCrackingHardwareCost() { 
    assertEquals(20000, ConfigurationBuilder.getDefaultCrackingHardwareCost());
    }
    
    
    @Test 
    public void testGetMinimumEntropy() { 
    assertEquals(35D, ConfigurationBuilder.getDefaultMinimumEntropy(), 0);
    }
    
    
    @Test 
    public void testGetDefaultMaxLength() { 
    assertEquals(256, ConfigurationBuilder.getDefaultMaxLength());
    }
    
    
    @Test 
    public void testGetDefaultCombinationAlgorithmTimeout() { 
    assertEquals(500L, ConfigurationBuilder.getDefaultCombinationAlgorithmTimeout());
    }
    
    
    @Test 
    public void testGetDefaultDistanceCalc() { 
    assertTrue(ConfigurationBuilder.getDefaultDistanceCalc());
    }
    
    
    @Test 
    public void testGetDefaultAdjacencyGraphs() { 
    List<AdjacencyGraph> adjacencyGraphs = ConfigurationBuilder.getDefaultAdjacencyGraphs();
    assertNotNull(adjacencyGraphs);
    }
    
    
    @Test 
    public void testGetDefaultPasswordMatchers() throws Exception { 
    List<PasswordMatcher> passwordMatchers = ConfigurationBuilder.getDefaultPasswordMatchers();
    assertNotNull(passwordMatchers);
    }
    
}
