// original test path: /Users/zhi/Documents/PH.D/Project/Testing/ChatTESTER/CodePackage/Prompt2Testing/repo_get/Four_project/GoSimpleLLC_nbvcxz/src/test/java/me/gosimple/nbvcxz/resources/ConfigurationBuilder_ESTest.java
/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 27 03:58:16 GMT 2024
 */
package me.gosimple.nbvcxz.resources;

import org.junit.Test;
import java.math.BigDecimal;
import static org.junit.Assert.*;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.regex.Pattern;
import me.gosimple.nbvcxz.matching.PasswordMatcher;
import me.gosimple.nbvcxz.resources.AdjacencyGraph;
import me.gosimple.nbvcxz.resources.Configuration;
import me.gosimple.nbvcxz.resources.ConfigurationBuilder;
import me.gosimple.nbvcxz.resources.Dictionary;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

import org.junit.Test;
import java.util.regex.Pattern;
import static org.junit.Assert.*;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.regex.Pattern;
import me.gosimple.nbvcxz.matching.PasswordMatcher;
import me.gosimple.nbvcxz.resources.AdjacencyGraph;
import me.gosimple.nbvcxz.resources.Configuration;
import me.gosimple.nbvcxz.resources.ConfigurationBuilder;
import me.gosimple.nbvcxz.resources.Dictionary;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

import org.junit.Test;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.HashMap;
import java.util.Map;
import static org.junit.Assert.*;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.regex.Pattern;
import me.gosimple.nbvcxz.matching.PasswordMatcher;
import me.gosimple.nbvcxz.resources.AdjacencyGraph;
import me.gosimple.nbvcxz.resources.Configuration;
import me.gosimple.nbvcxz.resources.ConfigurationBuilder;
import me.gosimple.nbvcxz.resources.Dictionary;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

import java.util.Map;
import org.junit.Test;
import static org.junit.Assert.*;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.regex.Pattern;
import me.gosimple.nbvcxz.matching.PasswordMatcher;
import me.gosimple.nbvcxz.resources.AdjacencyGraph;
import me.gosimple.nbvcxz.resources.Configuration;
import me.gosimple.nbvcxz.resources.ConfigurationBuilder;
import me.gosimple.nbvcxz.resources.Dictionary;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

import org.junit.Test;
import static org.junit.Assert.*;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.regex.Pattern;
import me.gosimple.nbvcxz.matching.PasswordMatcher;
import me.gosimple.nbvcxz.resources.AdjacencyGraph;
import me.gosimple.nbvcxz.resources.Configuration;
import me.gosimple.nbvcxz.resources.ConfigurationBuilder;
import me.gosimple.nbvcxz.resources.Dictionary;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false)
public class ConfigurationBuilder_ESTest extends ConfigurationBuilder_ESTest_scaffolding {

    @Test
    public void testGetDefaultGuessTypes() {
        // Set up test data
        Long crackingHardwareCost = 100000L;
        BigDecimal defaultCrackingHardwareCost = BigDecimal.valueOf(ConfigurationBuilder.getDefaultCrackingHardwareCost());
        BigDecimal mooresMultiplier = ConfigurationBuilder.getMooresMultiplier();
        BigDecimal costMultiplier = BigDecimal.valueOf(crackingHardwareCost).divide(defaultCrackingHardwareCost, 5, RoundingMode.HALF_UP);

        // Expected result
        Map<String, Long> expectedGuessTypes = new HashMap<>();
        expectedGuessTypes.put("OFFLINE_MD5", costMultiplier.multiply(mooresMultiplier.multiply(BigDecimal.valueOf(1200000000000L))).longValue());
        expectedGuessTypes.put("OFFLINE_SHA1", costMultiplier.multiply(mooresMultiplier.multiply(BigDecimal.valueOf(390000000000L))).longValue());
        expectedGuessTypes.put("OFFLINE_SHA512", costMultiplier.multiply(mooresMultiplier.multiply(BigDecimal.valueOf(5300000000L))).longValue());
        expectedGuessTypes.put("OFFLINE_BCRYPT_5", costMultiplier.multiply(mooresMultiplier.multiply(BigDecimal.valueOf(4200000L))).longValue());
        expectedGuessTypes.put("OFFLINE_BCRYPT_8", costMultiplier.multiply(mooresMultiplier.multiply(BigDecimal.valueOf(530303L))).longValue());
        expectedGuessTypes.put("OFFLINE_BCRYPT_10", costMultiplier.multiply(mooresMultiplier.multiply(BigDecimal.valueOf(132575L))).longValue());
        expectedGuessTypes.put("OFFLINE_BCRYPT_12", costMultiplier.multiply(mooresMultiplier.multiply(BigDecimal.valueOf(33143L))).longValue());
        expectedGuessTypes.put("OFFLINE_BCRYPT_14", costMultiplier.multiply(mooresMultiplier.multiply(BigDecimal.valueOf(8285L))).longValue());
        expectedGuessTypes.put("OFFLINE_ARGON2_ID", costMultiplier.multiply(mooresMultiplier.multiply(BigDecimal.valueOf(6540L))).longValue());
        expectedGuessTypes.put("ONLINE_UNTHROTTLED", 600L);
        expectedGuessTypes.put("ONLINE_THROTTLED", 2L);

        // Call the method under test
        Map<String, Long> actualGuessTypes = ConfigurationBuilder.getDefaultGuessTypes(crackingHardwareCost);

        // Assert the result
        assertEquals(expectedGuessTypes, actualGuessTypes);
    }

    @Test
    public void testGetDefaultYearPattern() {
        Pattern expectedPattern = Pattern.compile("19\\d\\d|200\\d|201\\d|202\\d");
        Pattern actualPattern = ConfigurationBuilder.getDefaultYearPattern();
        assertEquals(expectedPattern.pattern(), actualPattern.pattern());
    }

    @Test
    public void testGetDefaultMaxLength() {
        int expected = 256;
        int actual = ConfigurationBuilder.getDefaultMaxLength();
        assertEquals(expected, actual);
    }

    @Test
    public void testGetDefaultPasswordMatchers() {
        // Arrange
        ConfigurationBuilder configurationBuilder = new ConfigurationBuilder();

        // Act
        List<PasswordMatcher> passwordMatchers = configurationBuilder.getDefaultPasswordMatchers();

        // Assert
        assertNotNull(passwordMatchers);
        // Add additional assertions based on the expected behavior of getDefaultPasswordMatchers()
    }

    @Test
    public void testGetDefaultMinimumEntropy() {
        double expected = 35D;
        double actual = ConfigurationBuilder.getDefaultMinimumEntropy();
        assertEquals(expected, actual, 0.001);
    }

    @Test
    public void testGetDefaultLeetTable() {
        // Given
        ConfigurationBuilder configurationBuilder = new ConfigurationBuilder();

        // When
        Map<Character, Character[]> leetTable = configurationBuilder.getDefaultLeetTable();

        // Then
        assertNotNull(leetTable);
        // Add additional assertions here if needed
    }

    @Test
    public void testGetMooresMultiplier() {
        long START = System.currentTimeMillis();
        long YEAR = 365 * 24 * 60 * 60 * 1000L;

        double years = (System.currentTimeMillis() - START) / YEAR;
        if (years <= 1d) {
            years = 0;
        }
        BigDecimal expected = BigDecimal.valueOf(Math.pow(2d, years / 2d));
        BigDecimal actual = ConfigurationBuilder.getMooresMultiplier();

        assertEquals(expected, actual);
    }

    @Test
    public void testGetDefaultCrackingHardwareCost() {
        long expected = 20000;
        long actual = ConfigurationBuilder.getDefaultCrackingHardwareCost();
        assertEquals(expected, actual);
    }

    @Test
    public void testGetDefaultDictionaries() {
        // Arrange
        ConfigurationBuilder configurationBuilder = new ConfigurationBuilder();

        // Act
        List<Dictionary> dictionaries = configurationBuilder.getDefaultDictionaries();

        // Assert
        assertNotNull(dictionaries);
        // Add additional assertions if needed
    }

    @Test
    public void testGetDefaultDistanceCalc() {
        Boolean expected = true;
        Boolean actual = ConfigurationBuilder.getDefaultDistanceCalc();
        assertEquals(expected, actual);
    }

    @Test
    public void testGetDefaultCombinationAlgorithmTimeout() {
        long expectedTimeout = 500L;
        long actualTimeout = ConfigurationBuilder.getDefaultCombinationAlgorithmTimeout();
        assertEquals(expectedTimeout, actualTimeout);
    }

}
