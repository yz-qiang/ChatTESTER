/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 27 03:25:40 GMT 2024
 */
package me.gosimple.nbvcxz.matching.match;


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.regex.Pattern;
import me.gosimple.nbvcxz.matching.PasswordMatcher;
import me.gosimple.nbvcxz.matching.match.DictionaryMatch;
import me.gosimple.nbvcxz.resources.AdjacencyGraph;
import me.gosimple.nbvcxz.resources.Configuration;
import me.gosimple.nbvcxz.resources.Dictionary;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false)
public class DictionaryMatch_ESTest extends DictionaryMatch_ESTest_scaffolding {

@Test(timeout = 4000)
public void test00() throws Throwable {
    LinkedList<Character[]> linkedList0 = new LinkedList<Character[]>();
    Character[] characterArray0 = new Character[7];
    Character character0 = new Character('{');
    characterArray0[0] = character0;
    characterArray0[1] = character0;
    linkedList0.add(characterArray0);
    linkedList0.add(characterArray0);
    DictionaryMatch dictionaryMatch0 = new DictionaryMatch("Q9ZRLNz$stxg", (Configuration) null, (-1512), (-1512), "Q9ZRLNz$stxg", (-1512), linkedList0, false, true, "-!4Z5zRb8d", (-1512));
    assertEquals((-1512), dictionaryMatch0.getDistance());
    assertEquals("-!4Z5zRb8d", dictionaryMatch0.getDictionaryName());
    assertEquals(Double.NaN, dictionaryMatch0.getAverageEntropy(), 0.01);
    assertTrue(dictionaryMatch0.isReversed());
    assertTrue(dictionaryMatch0.isLeet());
}

@Test(timeout = 4000)
public void test01() throws Throwable {
    LinkedList<Character[]> linkedList0 = new LinkedList<Character[]>();
    DictionaryMatch dictionaryMatch0 = new DictionaryMatch("Q9ZRLNz$stxg", (Configuration) null, (-1512), (-1512), "Q9ZRLNz$stxg", (-1512), linkedList0, false, true, "-!4Z5zRb8d", (-1512));
    boolean boolean0 = dictionaryMatch0.isReversed();
    assertEquals((-1512), dictionaryMatch0.getRank());
    assertFalse(dictionaryMatch0.isLeet());
    assertEquals("-!4Z5zRb8d", dictionaryMatch0.getDictionaryName());
    assertEquals(Double.NaN, dictionaryMatch0.calculateEntropy(), 0.01);
    assertEquals((-1512), dictionaryMatch0.getDistance());
    assertTrue(boolean0);
}

@Test(timeout = 4000)
public void test02() throws Throwable {
    LinkedList<Character[]> linkedList0 = new LinkedList<Character[]>();
    Character[] characterArray0 = new Character[7];
    Character character0 = new Character('{');
    characterArray0[0] = character0;
    characterArray0[1] = character0;
    linkedList0.add(characterArray0);
    linkedList0.add(characterArray0);
    DictionaryMatch dictionaryMatch0 = new DictionaryMatch("Q9ZRLNz$stxg", (Configuration) null, (-1512), (-1512), "Q9ZRLNz$stxg", (-1512), linkedList0, false, true, "-!4Z5zRb8d", (-1512));
    assertEquals((-1512), dictionaryMatch0.getDistance());
    assertEquals("-!4Z5zRb8d", dictionaryMatch0.getDictionaryName());
    assertEquals(Double.NaN, dictionaryMatch0.getAverageEntropy(), 0.01);
    assertTrue(dictionaryMatch0.isReversed());
    assertTrue(dictionaryMatch0.isLeet());
}

@Test(timeout = 4000)
public void test03() throws Throwable {
    LinkedList<Character[]> linkedList0 = new LinkedList<Character[]>();
    Character[] characterArray0 = new Character[7];
    Character character0 = new Character('{');
    characterArray0[0] = character0;
    characterArray0[1] = character0;
    linkedList0.add(characterArray0);
    linkedList0.add(characterArray0);
    DictionaryMatch dictionaryMatch0 = new DictionaryMatch("Q9ZRLNz$stxg", (Configuration) null, (-1512), (-1512), "Q9ZRLNz$stxg", (-1512), linkedList0, false, true, "-!4Z5zRb8d", (-1512));
    assertEquals((-1512), dictionaryMatch0.getDistance());
    assertEquals("-!4Z5zRb8d", dictionaryMatch0.getDictionaryName());
    assertEquals(Double.NaN, dictionaryMatch0.getAverageEntropy(), 0.01);
    assertTrue(dictionaryMatch0.isReversed());
    assertTrue(dictionaryMatch0.isLeet());
}


@Test(timeout = 4000)
public void test04() throws Throwable {
    LinkedList<Character[]> linkedList0 = new LinkedList<Character[]>();
    Character[] characterArray0 = new Character[7];
    Character character0 = new Character('{');
    characterArray0[0] = character0;
    characterArray0[1] = character0;
    linkedList0.add(characterArray0);
    linkedList0.add(characterArray0);
    DictionaryMatch dictionaryMatch0 = new DictionaryMatch("Q9ZRLNz$stxg", (Configuration) null, (-1512), (-1512), "Q9ZRLNz$stxg", (-1512), linkedList0, false, true, "-!4Z5zRb8d", (-1512));
    assertEquals((-1512), dictionaryMatch0.getDistance());
    assertEquals("-!4Z5zRb8d", dictionaryMatch0.getDictionaryName());
    assertEquals(Double.NaN, dictionaryMatch0.getAverageEntropy(), 0.01);
    assertTrue(dictionaryMatch0.isReversed());
    assertTrue(dictionaryMatch0.isLeet());
}

@Test(timeout = 4000)
public void test05() throws Throwable {
    LinkedList<PasswordMatcher> linkedList0 = new LinkedList<PasswordMatcher>();
    HashMap<String, Long> hashMap0 = new HashMap<String, Long>();
    LinkedList<Dictionary> linkedList1 = new LinkedList<Dictionary>();
    LinkedList<AdjacencyGraph> linkedList2 = new LinkedList<AdjacencyGraph>();
    HashMap<Character, Character[]> hashMap1 = new HashMap<Character, Character[]>();
    Pattern pattern0 = Pattern.compile("\n");
    Double double0 = new Double(129.0);
    Integer integer0 = new Integer(0);
    Locale locale0 = Locale.GERMAN;
    Configuration configuration0 = new Configuration(linkedList0, hashMap0, linkedList1, linkedList2, hashMap1, pattern0, double0, integer0, locale0, false, 0);
    DictionaryMatch dictionaryMatch0 = new DictionaryMatch("\n", configuration0, 0, 0, "\n", 0, (List<Character[]>) null, true, true, "\n", 0);
    dictionaryMatch0.getLeetSubstitution();
    assertEquals(0, dictionaryMatch0.getDistance());
    assertEquals(0, dictionaryMatch0.getRank());
    assertTrue(dictionaryMatch0.isReversed());
    assertEquals(0.0, dictionaryMatch0.getAverageEntropy(), 0.01);
}

}
