/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 27 04:13:27 GMT 2024
 */
package me.gosimple.nbvcxz.scoring;


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.regex.Pattern;
import me.gosimple.nbvcxz.matching.PasswordMatcher;
import me.gosimple.nbvcxz.matching.match.BruteForceMatch;
import me.gosimple.nbvcxz.matching.match.DateMatch;
import me.gosimple.nbvcxz.matching.match.DictionaryMatch;
import me.gosimple.nbvcxz.matching.match.Match;
import me.gosimple.nbvcxz.matching.match.SequenceMatch;
import me.gosimple.nbvcxz.resources.AdjacencyGraph;
import me.gosimple.nbvcxz.resources.Configuration;
import me.gosimple.nbvcxz.resources.Dictionary;
import me.gosimple.nbvcxz.resources.Feedback;
import me.gosimple.nbvcxz.scoring.Result;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false)
public class Result_ESTest extends Result_ESTest_scaffolding {

@Test(timeout = 4000)
public void test00() throws Throwable {
    LinkedList<Match> linkedList0 = new LinkedList<Match>();
    SequenceMatch sequenceMatch0 = new SequenceMatch("There was an unexpected error and all of the matches put together do not equal the original password.", (Configuration) null, 2584, 2584);
    linkedList0.add((Match) sequenceMatch0);
    Result result0 = new Result((Configuration) null, "There was an unexpected error and all of the matches put together do not equal the original password.", "There was an unexpected error and all of the matches put together do not equal the original password.", linkedList0);
    boolean boolean0 = result0.isRandom();
    assertFalse(boolean0);
    assertFalse(result0.isTruncated());
}

@Test(timeout = 4000)
public void test01() throws Throwable {
    LinkedList<Match> linkedList0 = new LinkedList<Match>();
    Result result0 = new Result((Configuration) null, "", "", linkedList0);
    DateMatch dateMatch0 = new DateMatch("ynV.", (Configuration) null, (-1), 1547, (-872), "", 1547, 3);
    linkedList0.add((Match) dateMatch0);
    Double double0 = result0.getEntropy();
    assertEquals(15.183015000882756, (double) double0, 0.01);
    assertFalse(result0.isTruncated());
}

@Test(timeout = 4000)
public void test02() throws Throwable {
    LinkedList<Match> linkedList0 = new LinkedList<Match>();
    Pattern pattern0 = Pattern.compile("feedback.spatial.warning.straightRowsOfKeys");
    Double double0 = new Double((-691));
    Integer integer0 = new Integer((-3680));
    Locale locale0 = Locale.SIMPLIFIED_CHINESE;
    LinkedList<PasswordMatcher> linkedList1 = new LinkedList<PasswordMatcher>();
    HashMap<String, Long> hashMap0 = new HashMap<String, Long>();
    LinkedList<Dictionary> linkedList2 = new LinkedList<Dictionary>();
    HashMap<Character, Character[]> hashMap1 = new HashMap<Character, Character[]>();
    Configuration configuration0 = new Configuration(linkedList1, hashMap0, linkedList2, (List<AdjacencyGraph>) null, hashMap1, pattern0, double0, integer0, locale0, true, (-915L));
    Result result0 = new Result(configuration0, "", "G", linkedList0);
    boolean boolean0 = result0.isMinimumEntropyMet();
    assertTrue(boolean0);
    assertTrue(result0.isTruncated());
}

@Test(timeout = 4000)
public void test03() throws Throwable {
    LinkedList<Match> linkedList0 = new LinkedList<Match>();
    Result result0 = new Result((Configuration) null, "", "&\".9!`w:6,#", linkedList0);
    DateMatch dateMatch0 = new DateMatch("pIN", (Configuration) null, (-491), (-1), 2101, "pIN", (-491), 1547);
    linkedList0.add((Match) dateMatch0);
    linkedList0.add((Match) dateMatch0);
    BigDecimal bigDecimal0 = result0.getGuesses();
    assertEquals((short) (-14080), bigDecimal0.shortValue());
    assertEquals("&\".9!`w:6,#", result0.getFullPassword());
}

@Test(timeout = 4000)
public void test04() throws Throwable {
    LinkedList<Match> linkedList0 = new LinkedList<Match>();
    Result result0 = new Result((Configuration) null, "", "&\".9!`w:6,#", linkedList0);
    DateMatch dateMatch0 = new DateMatch("pIN", (Configuration) null, (-491), (-1), 2101, "pIN", (-491), 1547);
    linkedList0.add((Match) dateMatch0);
    linkedList0.add((Match) dateMatch0);
    BigDecimal bigDecimal0 = result0.getGuesses();
    assertEquals((short) (-14080), bigDecimal0.shortValue());
    assertEquals("&\".9!`w:6,#", result0.getFullPassword());
}

@Test(timeout = 4000)
public void test05() throws Throwable {
    LinkedList<Match> linkedList0 = new LinkedList<Match>();
    Pattern pattern0 = Pattern.compile("feedback.spatial.warning.straightRowsOfKeys");
    Double double0 = new Double((-691));
    Integer integer0 = new Integer((-3680));
    Locale locale0 = Locale.SIMPLIFIED_CHINESE;
    LinkedList<PasswordMatcher> linkedList1 = new LinkedList<PasswordMatcher>();
    HashMap<String, Long> hashMap0 = new HashMap<String, Long>();
    LinkedList<Dictionary> linkedList2 = new LinkedList<Dictionary>();
    HashMap<Character, Character[]> hashMap1 = new HashMap<Character, Character[]>();
    Configuration configuration0 = new Configuration(linkedList1, hashMap0, linkedList2, (List<AdjacencyGraph>) null, hashMap1, pattern0, double0, integer0, locale0, true, (-915L));
    Result result0 = new Result(configuration0, "", "G", linkedList0);
    boolean boolean0 = result0.isMinimumEntropyMet();
    assertTrue(boolean0);
    assertTrue(result0.isTruncated());
}

}
