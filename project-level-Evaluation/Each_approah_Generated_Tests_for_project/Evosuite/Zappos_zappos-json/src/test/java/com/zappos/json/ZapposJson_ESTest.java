/*
 * This file was automatically generated by EvoSuite
 * Thu Jan 25 14:19:12 GMT 2024
 */
package com.zappos.json;


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.zappos.json.JsonConfig;
import com.zappos.json.ZapposJson;
import com.zappos.json.format.JavaDateFormatter;
import com.zappos.json.format.ValueFormatter;
import java.io.File;
import java.io.PipedReader;
import java.io.Reader;
import java.io.StringReader;
import java.io.Writer;
import java.lang.reflect.Array;
import java.sql.Timestamp;
import java.time.Instant;
import java.time.chrono.HijrahEra;
import java.util.Date;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false)
public class ZapposJson_ESTest extends ZapposJson_ESTest_scaffolding {

@Test(timeout = 4000)
public void test00() throws Throwable {
    ZapposJson zapposJson0 = new ZapposJson();
    JsonConfig.WriterConfig jsonConfig_WriterConfig0 = JsonConfig.WriterConfig.WRITE_ENUM_USING_NAME;
    boolean boolean0 = zapposJson0.is(jsonConfig_WriterConfig0);
    assertFalse(boolean0);
}

@Test(timeout = 4000)
public void test01() throws Throwable {
    ZapposJson zapposJson0 = new ZapposJson();
    Class<Date> class0 = Date.class;
    zapposJson0.removeValueFormatter(class0);
}

@Test(timeout = 4000)
public void test02() throws Throwable {
    ZapposJson zapposJson0 = ZapposJson.getInstance();
    StringReader stringReader0 = new StringReader("Invalid character: ");
    Class<Object> class0 = Object.class;
    // Undeclared exception!
    try {
        zapposJson0.fromJson((Reader) stringReader0, class0);
        fail("Expecting exception: RuntimeException");
    } catch (RuntimeException e) {
        // 
        // bean introspection failed
        // 
        verifyException("com.zappos.json.JsonBeanIntrospector", e);
    }
}

@Test(timeout = 4000)
public void test03() throws Throwable {
    ZapposJson zapposJson0 = ZapposJson.getInstance("}e1F");
}

@Test(timeout = 4000)
public void test04() throws Throwable {
    ZapposJson zapposJson0 = new ZapposJson();
    Class<HijrahEra>[] classArray0 = (Class<HijrahEra>[]) Array.newInstance(Class.class, 0);
    zapposJson0.debug("[]", classArray0);
    assertEquals(0, classArray0.length);
}

@Test(timeout = 4000)
public void test05() throws Throwable {
    ZapposJson zapposJson0 = new ZapposJson(true);
    Class<Date> class0 = Date.class;
    ValueFormatter<Object> valueFormatter0 = zapposJson0.getValueFormatter(class0);
    assertNotNull(valueFormatter0);
}

@Test(timeout = 4000)
public void test06() throws Throwable {
    ZapposJson zapposJson0 = ZapposJson.getInstance();
    StringReader stringReader0 = new StringReader("Invalid character: ");
    Class<Object> class0 = Object.class;
    // Undeclared exception!
    try {
        zapposJson0.fromJson((Reader) stringReader0, class0);
        fail("Expecting exception: RuntimeException");
    } catch (RuntimeException e) {
        // 
        // bean introspection failed
        // 
        verifyException("com.zappos.json.JsonBeanIntrospector", e);
    }
}

}
