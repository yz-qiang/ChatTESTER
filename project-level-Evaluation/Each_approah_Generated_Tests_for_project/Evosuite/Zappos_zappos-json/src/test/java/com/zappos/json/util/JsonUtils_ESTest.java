/*
 * This file was automatically generated by EvoSuite
 * Thu Jan 25 14:07:05 GMT 2024
 */
package com.zappos.json.util;


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.zappos.json.ZapposJson;
import com.zappos.json.util.JsonUtils;
import java.io.CharArrayWriter;
import java.io.IOException;
import java.io.PipedWriter;
import java.io.StringWriter;
import java.io.Writer;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false)
public class JsonUtils_ESTest extends JsonUtils_ESTest_scaffolding {

@Test(timeout = 4000)
public void test00() throws Throwable {
    ZapposJson zapposJson0 = ZapposJson.getInstance();
    CharBuffer charBuffer0 = CharBuffer.allocate(9);
    CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0, 0, 0);
    String string0 = JsonUtils.escape(zapposJson0, (CharSequence) charBuffer1);
    assertEquals("", string0);
}

@Test(timeout = 4000)
public void test01() throws Throwable {
    ZapposJson zapposJson0 = ZapposJson.getInstance();
    StringWriter stringWriter0 = new StringWriter();
    CharBuffer charBuffer0 = CharBuffer.allocate(9983);
    JsonUtils.escape(zapposJson0, (CharSequence) charBuffer0, (Writer) stringWriter0);
    // Undeclared exception!
    JsonUtils.escape(zapposJson0, (CharSequence) charBuffer0, (Writer) stringWriter0);
}

@Test(timeout = 4000)
public void test02() throws Throwable {
    ZapposJson zapposJson0 = ZapposJson.getInstance("f[lX;J:ziZx\"");
    String string0 = JsonUtils.unescape(zapposJson0, (CharSequence) "f[lX;J:ziZx\"");
    assertEquals("f[lX;J:ziZx\"", string0);
}

}
