0-->1-->0-->testRepair
// Test Method (Need to be repaired)
package org.apache.commons.lang3;
import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;
import java.util.UUID;
import org.junit.Test;
public class TTT_testHexToInt {
@Test
public void testHexToInt() {
    assertEquals(Integer.parseInt("ff", 16), Conversion.hexToInt("ff", 0, 0, 0, 2));
    try {
        Conversion.hexToInt("gg", 0, 0, 0, 2);
        fail();
    } catch (IllegalArgumentException e) {
    }
    assertEquals(0, Conversion.hexToInt("", 0, 0, 0, 0));
    try {
        Conversion.hexToInt(null, 0, 0, 0, 0);

<Error Line>
        fail();

    } catch (NullPointerException e) {
    }
    assertEquals(Integer.parseInt("0x000f", 16), Conversion.hexToInt("000f", 0, 0, 0, 4));
    assertEquals(Integer.parseInt("0xf000", 16), Conversion.hexToInt("f000", 0, 0, 0, 4));
    assertEquals(Integer.parseInt("0XaBcDeFgHiJkLmNoPqRsTuVwXyZ", 16), Conversion.hexToInt("abcdefghijklmnopqrstuvwxyz", 0, 0, 0, 8));
    try {
        Conversion.hexToInt("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ", 0, 0, 0, 8);
        fail();
    } catch (NumberFormatException e) {
    }
}
}


// Focal method (Cannot be modified)
public static int hexToInt(final String src, final int srcPos, final int dstInit, final int dstPos, final int nHex) {
    if (0 == nHex) {
        return dstInit;
    }
    if ((nHex - 1) * 4 + dstPos >= 32) {
        throw new IllegalArgumentException("(nHexs-1)*4+dstPos is greater or equal to than 32");
    }
    int out = dstInit;
    for (int i = 0; i < nHex; i++) {
        final int shift = i * 4 + dstPos;
        final int bits = (0xf & hexDigitToInt(src.charAt(i + srcPos))) << shift;
        final int mask = 0xf << shift;
        out = (out & ~mask) | bits;
    }
    return out;
}

The test method throw an error " java.lang.AssertionError " in " fail(); ". 
Please refer to the code logic of the Focal method to repair the error in the test method, and then return the complete test method after repair. Note that adding a try-catch structure to repair the test method and modify the Focal method both are denied.

########

1-->1-->0-->testRepair
// Test Method
package org.apache.commons.lang3;
import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;
import java.util.UUID;
import org.junit.Test;
public class TTT_testHexToInt {
@Test
public void testHexToInt() {
    assertEquals(Integer.parseInt("ff", 16), Conversion.hexToInt("ff", 0, 0, 0, 2));
    try {
        Conversion.hexToInt("gg", 0, 0, 0, 2);
        fail();
    } catch (IllegalArgumentException e) {
    }
    assertEquals(0, Conversion.hexToInt("", 0, 0, 0, 0));
    try {
        Conversion.hexToInt(null, 0, 0, 0, 0);
        fail();
    } catch (NullPointerException e) {

  <Buggy Line>: cannot find symbol method "hexDigitToInt(char)" in ConversionTest
    }

    assertEquals(Integer.parseInt("0x000f", 16), Conversion.hexToInt("000f", 0, 0, 0, 4));
    assertEquals(Integer.parseInt("0xf000", 16), Conversion.hexToInt("f000", 0, 0, 0, 4));
    assertEquals(Integer.parseInt("0XaBcDeFgHiJkLmNoPqRsTuVwXyZ", 16), Conversion.hexToInt("abcdefghijklmnopqrstuvwxyz", 0, 0, 0, 8));
    try {
        Conversion.hexToInt("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ", 0, 0, 0, 8);
        fail();
    } catch (NumberFormatException e) {
    }
}
}


The test method has a bug error (marked <Buggy Line>). 
 Please repair the buggy line and return the complete test method after repair.

########

2-->3-->0-->testRepair
// Test Method (Need to be repaired)
package org.apache.commons.lang3;
import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;
import java.util.UUID;
import org.junit.Test;
public class TTT_testHexToInt {
@Test
public void testHexToInt() {
    assertEquals(Integer.parseInt("ff", 16), Conversion.hexToInt("ff", 0, 0, 0, 2));
    try {
        Conversion.hexToInt("gg", 0, 0, 0, 2);
        fail();
    } catch (IllegalArgumentException e) {
    }
    assertEquals(0, Conversion.hexToInt("", 0, 0, 0, 0));
    try {
        Conversion.hexToInt(null, 0, 0, 0, 0);

<Error Line>
        fail();

    } catch (NullPointerException e) {
    }
    assertEquals(Integer.parseInt("0x000f", 16), Conversion.hexToInt("000f", 0, 0, 0, 4));
    assertEquals(Integer.parseInt("0xf000", 16), Conversion.hexToInt("f000", 0, 0, 0, 4));
    assertEquals(Integer.parseInt("0XaBcDeFgHiJkLmNoPqRsTuVwXyZ", 16), Conversion.hexToInt("abcdefghijklmnopqrstuvwxyz", 0, 0, 0, 8));
    try {
        Conversion.hexToInt("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ", 0, 0, 0, 8);
        fail();
    } catch (NumberFormatException e) {
    }
}
}


// Focal method (Cannot be modified)
public static int hexToInt(final String src, final int srcPos, final int dstInit, final int dstPos, final int nHex) {
    if (0 == nHex) {
        return dstInit;
    }
    if ((nHex - 1) * 4 + dstPos >= 32) {
        throw new IllegalArgumentException("(nHexs-1)*4+dstPos is greater or equal to than 32");
    }
    int out = dstInit;
    for (int i = 0; i < nHex; i++) {
        final int shift = i * 4 + dstPos;
        final int bits = (0xf & hexDigitToInt(src.charAt(i + srcPos))) << shift;
        final int mask = 0xf << shift;
        out = (out & ~mask) | bits;
    }
    return out;
}

The test method throw an error " java.lang.AssertionError " in " fail(); ". 
Please refer to the code logic of the Focal method to repair the error in the test method, and then return the complete test method after repair. Note that adding a try-catch structure to repair the test method and modify the Focal method both are denied.

########

3-->3-->0-->testRepair
// Test Method
package org.apache.commons.lang3;
import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;
import java.util.UUID;
import org.junit.Test;
public class TTT_testHexToInt {
@Test
public void testHexToInt() {
    assertEquals(Integer.parseInt("ff", 16), Conversion.hexToInt("ff", 0, 0, 0, 2));
    try {
        Conversion.hexToInt("gg", 0, 0, 0, 2);
        fail();
    } catch (IllegalArgumentException e) {
    }
    assertEquals(0, Conversion.hexToInt("", 0, 0, 0, 0));
    try {
        Conversion.hexToInt(null, 0, 0, 0, 0);
        fail();
    } catch (NullPointerException e) {

  <Buggy Line>: cannot find symbol method "hexDigitToInt(char)" in ConversionTest
    }

    assertEquals(Integer.parseInt("0x000f", 16), Conversion.hexToInt("000f", 0, 0, 0, 4));
    assertEquals(Integer.parseInt("0xf000", 16), Conversion.hexToInt("f000", 0, 0, 0, 4));
    assertEquals(Integer.parseInt("0XaBcDeFgHiJkLmNoPqRsTuVwXyZ", 16), Conversion.hexToInt("abcdefghijklmnopqrstuvwxyz", 0, 0, 0, 8));
    try {
        Conversion.hexToInt("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ", 0, 0, 0, 8);
        fail();
    } catch (NumberFormatException e) {
    }
}
}


The test method has a bug error (marked <Buggy Line>). 
 Please repair the buggy line and return the complete test method after repair.

########

4-->5-->0-->testRepair
// Test Method (Need to be repaired)
package org.apache.commons.lang3;
import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;
import java.util.UUID;
import org.junit.Test;
public class TTT_testHexToInt {
@Test
public void testHexToInt() {
    assertEquals(Integer.parseInt("ff", 16), Conversion.hexToInt("ff", 0, 0, 0, 2));
    try {
        Conversion.hexToInt("gg", 0, 0, 0, 2);
        fail();
    } catch (IllegalArgumentException e) {
    }
    assertEquals(0, Conversion.hexToInt("", 0, 0, 0, 0));
    try {
        Conversion.hexToInt(null, 0, 0, 0, 0);

<Error Line>
        fail();

    } catch (NullPointerException e) {
    }
    assertEquals(Integer.parseInt("0x000f", 16), Conversion.hexToInt("000f", 0, 0, 0, 4));
    assertEquals(Integer.parseInt("0xf000", 16), Conversion.hexToInt("f000", 0, 0, 0, 4));
    assertEquals(Integer.parseInt("0XaBcDeFgHiJkLmNoPqRsTuVwXyZ", 16), Conversion.hexToInt("abcdefghijklmnopqrstuvwxyz", 0, 0, 0, 8));
    try {
        Conversion.hexToInt("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ", 0, 0, 0, 8);
        fail();
    } catch (NumberFormatException e) {
    }
}
}


// Focal method (Cannot be modified)
public static int hexToInt(final String src, final int srcPos, final int dstInit, final int dstPos, final int nHex) {
    if (0 == nHex) {
        return dstInit;
    }
    if ((nHex - 1) * 4 + dstPos >= 32) {
        throw new IllegalArgumentException("(nHexs-1)*4+dstPos is greater or equal to than 32");
    }
    int out = dstInit;
    for (int i = 0; i < nHex; i++) {
        final int shift = i * 4 + dstPos;
        final int bits = (0xf & hexDigitToInt(src.charAt(i + srcPos))) << shift;
        final int mask = 0xf << shift;
        out = (out & ~mask) | bits;
    }
    return out;
}

The test method throw an error " java.lang.AssertionError " in " fail(); ". 
Please refer to the code logic of the Focal method to repair the error in the test method, and then return the complete test method after repair. Note that adding a try-catch structure to repair the test method and modify the Focal method both are denied.

########

5-->5-->0-->testRepair
// Test Method
package org.apache.commons.lang3;
import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;
import java.util.UUID;
import org.junit.Test;
public class TTT_testHexToInt {
@Test
public void testHexToInt() {
    assertEquals(Integer.parseInt("ff", 16), Conversion.hexToInt("ff", 0, 0, 0, 2));
    try {
        Conversion.hexToInt("gg", 0, 0, 0, 2);
        fail();
    } catch (IllegalArgumentException e) {
    }
    assertEquals(0, Conversion.hexToInt("", 0, 0, 0, 0));
    try {
        Conversion.hexToInt(null, 0, 0, 0, 0);
        fail();
    } catch (NullPointerException e) {

  <Buggy Line>: cannot find symbol method "hexDigitToInt(char)" in ConversionTest
    }

    assertEquals(Integer.parseInt("0x000f", 16), Conversion.hexToInt("000f", 0, 0, 0, 4));
    assertEquals(Integer.parseInt("0xf000", 16), Conversion.hexToInt("f000", 0, 0, 0, 4));
    assertEquals(Integer.parseInt("0XaBcDeFgHiJkLmNoPqRsTuVwXyZ", 16), Conversion.hexToInt("abcdefghijklmnopqrstuvwxyz", 0, 0, 0, 8));
    try {
        Conversion.hexToInt("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ", 0, 0, 0, 8);
        fail();
    } catch (NumberFormatException e) {
    }
}
}


The test method has a bug error (marked <Buggy Line>). 
 Please repair the buggy line and return the complete test method after repair.

########

