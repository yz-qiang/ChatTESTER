0-->1-->0-->testRepair
// Test Method (Need to be repaired)
package org.apache.commons.lang3;
import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;
import java.util.UUID;
import org.junit.Test;
public class TTT_testBinaryToInt {
@Test
public void testBinaryToInt() {
    assertEquals(0, Conversion.binaryToInt(new boolean[0], 0, 0, 0, 0));
    assertEquals(1, Conversion.binaryToInt(new boolean[]{true}, 0, 0, 0, 1));

<Error Line>
    assertEquals(5, Conversion.binaryToInt(new boolean[]{false, true, false, true, false}, 0, 0, 0, 4));

    assertEquals(-1, Conversion.binaryToInt(new boolean[]{true, false, true, false, true}, 0, 0, 0, 4));
    assertEquals(Integer.MAX_VALUE, Conversion.binaryToInt(new boolean[]{true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true}, 0, 0, 0, 16));
    try {
        Conversion.binaryToInt(new boolean[]{true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true}, 0, 0, 0, 33);
        fail();
    } catch (IllegalArgumentException e) {}
}
}


// Focal method (Cannot be modified)
public static int binaryToInt(final boolean[] src, final int srcPos, final int dstInit, final int dstPos, final int nBools) {
    if (src.length == 0 && srcPos == 0 || 0 == nBools) {
        return dstInit;
    }
    if (nBools - 1 + dstPos >= 32) {
        throw new IllegalArgumentException("nBools-1+dstPos is greater or equal to than 32");
    }
    int out = dstInit;
    for (int i = 0; i < nBools; i++) {
        final int shift = i + dstPos;
        final int bits = (src[i + srcPos] ? 1 : 0) << shift;
        final int mask = 0x1 << shift;
        out = (out & ~mask) | bits;
    }
    return out;
}

The test method throw an error " java.lang.AssertionError " in " assertEquals(5, Conversion.binaryToInt(new boolean[]{false, true, false, true, false}, 0, 0, 0, 4)); ". 
Please refer to the code logic of the Focal method to repair the error in the test method, and then return the complete test method after repair. Note that adding a try-catch structure to repair the test method and modify the Focal method both are denied.

########

