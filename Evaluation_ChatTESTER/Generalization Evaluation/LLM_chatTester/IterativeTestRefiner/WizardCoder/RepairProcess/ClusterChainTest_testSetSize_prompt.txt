0-->1-->0-->compileRepair
// Test Method
package de.waldheinz.fs.fat;
import de.waldheinz.fs.util.RamDisk;
import java.io.IOException;
import java.nio.ByteBuffer;
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;
public class TTT_testSetSize {
@Test 
public void testGetSet() throws Exception{

       <Buggy Line>: try-with-resources is not supported in -source 1.6
    try (RamDisk ramdisk = RamDisk.create()) {

        byte[] buffer = TestUtils.randomBytes(5*16384+279);
        ByteBuffer bbRead = ByteBuffer.allocateDirect(buffer.length);
        FatFileSystem fs = FileSystemBuilder
               .newLinux()   
               .setDriveName("/dev/ram")    
               .addPartitionTable()        
               .withType(PartitionTableEntry.TYPE_FAT32)     
               .withStartSect(0x0000)      
               .withTotalSects(MathUtils.roundUpToPowerOfTwo(bbRead.capacity(), SectorSize.SECTOR_SIZE))      
               .build(ramdisk);            
        DirectoryEntry dirRoot = fs.getRootDirectory();        
            String fileNameA = "/filea";            
            FileTime creationTime = null;
            LastAccessTime lastAccessTime = null;
            ModificationTime modificationTime = null;
            ExtendedAttributes extendedAttrs = null;
            Entry createdFileA = dirRoot
                   .createFile(fileNameA,
                            false,           
                            true,            
                            0o644,           
                            creationTime,
                            lastAccessTime,
                            modificationTime,
                            extendedAttrs).getEntry(); 
            assertEquals(createdFileA instanceof RegularFileEntry,true,"Created regular file.");
            RegularFileEntry openedFileA = (RegularFileEntry)dirRoot.openExistingFile(fileNameA);
            assertTrue(!openedFileA.isDirectory());                
            Random r = new Random();                        
            while (!bbRead.hasRemaining()){                    
               int len=r.nextInt(bbRead.remaining()/16)+1;                   
               FileUtils.readFully(openedFileA.getInputStream(), bbRead.array(), bbRead.position(),len );               
           };                       
          assertArrayEquals(Arrays.copyOfRange(buffer,(int)(bbRead.limit()-bbRead.position()),
                  Math.min(((int)((bbRead.limit()+bbRead.position()))),buffer.length)),
                          Arrays.copyOfRange(bbRead.array(),0,
                                  Math.min((((int)(((bbRead.limit()+bbRead.position())))%16==0)?
                                         (((int)(((bbRead.limit()+bbRead.position())))/16)*16):
                                        (((int)(((bbRead.limit()+bbRead.position())))/16+1))*16
                                    ),bbRead.limit())),"Contents match after reading back written data."
              ) ;
      ClusterChain cc = new ClusterChain(null,false);
      Long fileSizeInclusivelyWrittenOnDisk =cc.setSize(5L*(1<<16));
      System.out.println("\n\tFileSize Inclusive Written On Disk : "+fileSizeInclusivelyWrittenOnDisk+"\n");
  } catch (Exception e){System.err.print(e);}  
}
}


The test method has a bug error (marked <Buggy Line>). 
 Please repair the buggy line and return the complete test method after repair.

########

1-->2-->0-->compileRepair
// Test Method
package de.waldheinz.fs.fat;
import de.waldheinz.fs.util.RamDisk;
import java.io.IOException;
import java.nio.ByteBuffer;
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;
public class TTT_testSetSize {
    @Test
    public void testGetSet() throws Exception {

           <Buggy Line>: try-with-resources is not supported in -source 1.6
        try (RamDisk ramdisk = RamDisk.create()) {

            byte[] buffer = TestUtils.randomBytes(5 * 16384 + 279);
            ByteBuffer bbRead = ByteBuffer.allocateDirect(buffer.length);
            FatFileSystem fs = FileSystemBuilder
                   .newLinux()
                   .setDriveName("/dev/ram")
                   .addPartitionTable()
                   .withType(PartitionTableEntry.TYPE_FAT32)
                   .withStartSect(0x0000)
                   .withTotalSects(MathUtils.roundUpToPowerOfTwo(bbRead.capacity(), SectorSize.SECTOR_SIZE))
                   .build(ramdisk);
            DirectoryEntry dirRoot = fs.getRootDirectory();
            String fileNameA = "/filea";
            FileTime creationTime = null;
            LastAccessTime lastAccessTime = null;
            ModificationTime modificationTime = null;
            ExtendedAttributes extendedAttrs = null;
            Entry createdFileA = dirRoot
                   .createFile(fileNameA,
                            false,
                            true,
                            0o644,
                            creationTime,
                            lastAccessTime,
                            modificationTime,
                            extendedAttrs).getEntry();
            assertEquals(createdFileA instanceof RegularFileEntry, true, "Created regular file.");
            RegularFileEntry openedFileA = (RegularFileEntry) dirRoot.openExistingFile(fileNameA);
            assertTrue(!openedFileA.isDirectory());
            Random r = new Random();
            while (!bbRead.hasRemaining()) {
                int len = r.nextInt(bbRead.remaining() / 16) + 1;
                FileUtils.readFully(openedFileA.getInputStream(), bbRead.array(), bbRead.position(), len);
            };
            assertArrayEquals(Arrays.copyOfRange(buffer, (int) (bbRead.limit() - bbRead.position()),
                    Math.min(((int) ((bbRead.limit() + bbRead.position()))), buffer.length)),
                    Arrays.copyOfRange(bbRead.array(), 0,
                            Math.min((((int) (((bbRead.limit() + bbRead.position()))) % 16 == 0)?
                                    (((int) (((bbRead.limit() + bbRead.position()))) / 16) * 16) :
                                    (((int) (((bbRead.limit() + bbRead.position()))) / 16 + 1)) * 16
                            ), bbRead.limit())), "Contents match after reading back written data.");
            ClusterChain cc = new ClusterChain(null, false);
            Long fileSizeInclusivelyWrittenOnDisk = cc.setSize(5L * (1 << 16));
            System.out.println("\n\tFileSize Inclusive Written On Disk : " + fileSizeInclusivelyWrittenOnDisk + "\n");
        } catch (Exception e) {
            System.err.print(e);
        }
    }
}


The test method has a bug error (marked <Buggy Line>). 
 Please repair the buggy line and return the complete test method after repair.

########

2-->3-->1-->compileRepair
// Test Method
package de.waldheinz.fs.fat;
import de.waldheinz.fs.util.RamDisk;
import java.io.IOException;
import java.nio.ByteBuffer;
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;
public class TTT_testSetSize {
    @Test
    public void testGetSet() throws Exception {

           <Buggy Line>: try-with-resources is not supported in -source 1.6
        try (RamDisk ramdisk = RamDisk.create()) {

            byte[] buffer = TestUtils.randomBytes(5 * 16384 + 279);
            ByteBuffer bbRead = ByteBuffer.allocateDirect(buffer.length);
            FatFileSystem fs = FileSystemBuilder
                  .newLinux()
                  .setDriveName("/dev/ram")
                  .addPartitionTable()
                  .withType(PartitionTableEntry.TYPE_FAT32)
                  .withStartSect(0x0000)
                  .withTotalSects(MathUtils.roundUpToPowerOfTwo(bbRead.capacity(), SectorSize.SECTOR_SIZE))
                  .build(ramdisk);
            DirectoryEntry dirRoot = fs.getRootDirectory();
            String fileNameA = "/filea";
            FileTime creationTime = null;
            LastAccessTime lastAccessTime = null;
            ModificationTime modificationTime = null;
            ExtendedAttributes extendedAttrs = null;
            Entry createdFileA = dirRoot
                  .createFile(fileNameA,
                            false,
                            true,
                            0o644,
                            creationTime,
                            lastAccessTime,
                            modificationTime,
                            extendedAttrs).getEntry();
            assertEquals(createdFileA instanceof RegularFileEntry, true, "Created regular file.");
            RegularFileEntry openedFileA = (RegularFileEntry) dirRoot.openExistingFile(fileNameA);
            assertTrue(!openedFileA.isDirectory());
            Random r = new Random();
            while (!bbRead.hasRemaining()) {
                int len = r.nextInt(bbRead.remaining() / 16) + 1;
                FileUtils.readFully(openedFileA.getInputStream(), bbRead.array(), bbRead.position(), len);
            };
            assertArrayEquals(Arrays.copyOfRange(buffer, (int) (bbRead.limit() - bbRead.position()),
                    Math.min(((int) ((bbRead.limit() + bbRead.position()))), buffer.length)),
                    Arrays.copyOfRange(bbRead.array(), 0,
                            Math.min((((int) (((bbRead.limit() + bbRead.position()))) % 16 == 0)?
                                    (((int) (((bbRead.limit() + bbRead.position()))) / 16) * 16) :
                                    (((int) (((bbRead.limit() + bbRead.position()))) / 16 + 1)) * 16
                            ), bbRead.limit())), "Contents match after reading back written data.");
            ClusterChain cc = new ClusterChain(null, false);
            Long fileSizeInclusivelyWrittenOnDisk = cc.setSize(5L * (1 << 16));
            System.out.println("\n\tFileSize Inclusive Written On Disk : " + fileSizeInclusivelyWrittenOnDisk + "\n");
        } catch (Exception e) {
            System.err.print(e);
        }
    }
}


The test method has a bug error (marked <Buggy Line>). 
 Please repair the buggy line and return the complete test method after repair.

########

3-->4-->2-->compileRepair
// Test Method
package de.waldheinz.fs.fat;
import de.waldheinz.fs.util.RamDisk;
import java.io.IOException;
import java.nio.ByteBuffer;
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;
public class TTT_testSetSize {
    @Test
    public void testGetSet() throws Exception {

           <Buggy Line>: try-with-resources is not supported in -source 1.6
        try (RamDisk ramdisk = RamDisk.create()) {

            byte[] buffer = TestUtils.randomBytes(5 * 16384 + 279);
            ByteBuffer bbRead = ByteBuffer.allocateDirect(buffer.length);
            FatFileSystem fs = FileSystemBuilder
                 .newLinux()
                 .setDriveName("/dev/ram")
                 .addPartitionTable()
                 .withType(PartitionTableEntry.TYPE_FAT32)
                 .withStartSect(0x0000)
                 .withTotalSects(MathUtils.roundUpToPowerOfTwo(bbRead.capacity(), SectorSize.SECTOR_SIZE))
                 .build(ramdisk);
            DirectoryEntry dirRoot = fs.getRootDirectory();
            String fileNameA = "/filea";
            FileTime creationTime = null;
            LastAccessTime lastAccessTime = null;
            ModificationTime modificationTime = null;
            ExtendedAttributes extendedAttrs = null;
            Entry createdFileA = dirRoot
                 .createFile(fileNameA,
                            false,
                            true,
                            0o644,
                            creationTime,
                            lastAccessTime,
                            modificationTime,
                            extendedAttrs).getEntry();
            assertEquals(createdFileA instanceof RegularFileEntry, true, "Created regular file.");
            RegularFileEntry openedFileA = (RegularFileEntry) dirRoot.openExistingFile(fileNameA);
            assertTrue(!openedFileA.isDirectory());
            Random r = new Random();
            while (!bbRead.hasRemaining()) {
                int len = r.nextInt(bbRead.remaining() / 16) + 1;
                FileUtils.readFully(openedFileA.getInputStream(), bbRead.array(), bbRead.position(), len);
            };
            assertArrayEquals(Arrays.copyOfRange(buffer, (int) (bbRead.limit() - bbRead.position()),
                    Math.min(((int) ((bbRead.limit() + bbRead.position()))), buffer.length)),
                    Arrays.copyOfRange(bbRead.array(), 0,
                            Math.min((((int) (((bbRead.limit() + bbRead.position()))) % 16 == 0)?
                                    (((int) (((bbRead.limit() + bbRead.position()))) / 16) * 16) :
                                    (((int) (((bbRead.limit() + bbRead.position()))) / 16 + 1)) * 16
                            ), bbRead.limit())), "Contents match after reading back written data.");
            ClusterChain cc = new ClusterChain(null, false);
            Long fileSizeInclusivelyWrittenOnDisk = cc.setSize(5L * (1 << 16));
            System.out.println("\n\tFileSize Inclusive Written On Disk : " + fileSizeInclusivelyWrittenOnDisk + "\n");
        } catch (Exception e) {
            System.err.print(e);
        }
    }
}


The test method has a bug error (marked <Buggy Line>). 
 Please repair the buggy line and return the complete test method after repair.

########

4-->5-->3-->compileRepair
// Test Method
package de.waldheinz.fs.fat;
import de.waldheinz.fs.util.RamDisk;
import java.io.IOException;
import java.nio.ByteBuffer;
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;
public class TTT_testSetSize {
    @Test
    public void testGetSet() throws Exception {

           <Buggy Line>: try-with-resources is not supported in -source 1.6
        try (RamDisk ramdisk = RamDisk.create()) {

            byte[] buffer = TestUtils.randomBytes(5 * 16384 + 279);
            ByteBuffer bbRead = ByteBuffer.allocateDirect(buffer.length);
            FatFileSystem fs = FileSystemBuilder
                .newLinux()
                .setDriveName("/dev/ram")
                .addPartitionTable()
                .withType(PartitionTableEntry.TYPE_FAT32)
                .withStartSect(0x0000)
                .withTotalSects(MathUtils.roundUpToPowerOfTwo(bbRead.capacity(), SectorSize.SECTOR_SIZE))
                .build(ramdisk);
            DirectoryEntry dirRoot = fs.getRootDirectory();
            String fileNameA = "/filea";
            FileTime creationTime = null;
            LastAccessTime lastAccessTime = null;
            ModificationTime modificationTime = null;
            ExtendedAttributes extendedAttrs = null;
            Entry createdFileA = dirRoot
                .createFile(fileNameA,
                            false,
                            true,
                            0o644,
                            creationTime,
                            lastAccessTime,
                            modificationTime,
                            extendedAttrs).getEntry();
            assertEquals(createdFileA instanceof RegularFileEntry, true, "Created regular file.");
            RegularFileEntry openedFileA = (RegularFileEntry) dirRoot.openExistingFile(fileNameA);
            assertTrue(!openedFileA.isDirectory());
            Random r = new Random();
            while (!bbRead.hasRemaining()) {
                int len = r.nextInt(bbRead.remaining() / 16) + 1;
                FileUtils.readFully(openedFileA.getInputStream(), bbRead.array(), bbRead.position(), len);
            };
            assertArrayEquals(Arrays.copyOfRange(buffer, (int) (bbRead.limit() - bbRead.position()),
                    Math.min(((int) ((bbRead.limit() + bbRead.position()))), buffer.length)),
                    Arrays.copyOfRange(bbRead.array(), 0,
                            Math.min((((int) (((bbRead.limit() + bbRead.position()))) % 16 == 0)?
                                    (((int) (((bbRead.limit() + bbRead.position()))) / 16) * 16) :
                                    (((int) (((bbRead.limit() + bbRead.position()))) / 16 + 1)) * 16
                            ), bbRead.limit())), "Contents match after reading back written data.");
            ClusterChain cc = new ClusterChain(null, false);
            Long fileSizeInclusivelyWrittenOnDisk = cc.setSize(5L * (1 << 16));
            System.out.println("\n\tFileSize Inclusive Written On Disk : " + fileSizeInclusivelyWrittenOnDisk + "\n");
        } catch (Exception e) {
            System.err.print(e);
        }
    }
}


The test method has a bug error (marked <Buggy Line>). 
 Please repair the buggy line and return the complete test method after repair.

########

