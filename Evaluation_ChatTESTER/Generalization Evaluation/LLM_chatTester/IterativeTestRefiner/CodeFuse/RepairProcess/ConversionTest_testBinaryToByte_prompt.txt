0-->1-->0-->compileRepair
// Test Method
package org.apache.commons.lang3;
import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;
import java.util.UUID;
import org.junit.Test;
public class TestBinaryToByte_testBinaryToByte {
    @Test

         <Buggy Line>: cannot find symbol class "InvocationTargetException"
    public void testBinaryToByteWithEmptyInputAndZeroNBooleansReturnsDstInit() throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {

        boolean[] inputArr = {};
        byte result = Conversion.binaryToByte(inputArr, 0, Byte.MAX_VALUE, 3, 0);
        Assert.assertEquals(Byte.MAX_VALUE, result);
    }
    @Test
    public void testBinaryToByteThrowsIllegalArgExWhenNBoolsGreaterOrEqualEight() throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {
        try{
            Random random = new Random();
            boolean[] inputArr = new boolean[]{true};
            Conversion.binaryToByte(inputArr, 0, Byte.MIN_VALUE, 7, 2);
            fail("Should have thrown exception");
        } catch (IllegalArgumentException e){
            assertTrue(e instanceof IllegalArgumentException);
        }
    }
    @Test
    public void testBinaryToByteWithOneBooleanAtStartOfArray() throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {
        boolean[] inputArr = {false};
        byte result = Conversion.binaryToByte(inputArr, 0, Byte.MAX_VALUE, 0, 1);
        Assert.assertEquals((byte)(~0b1), result);
    }
    @Test
    public void testBinaryToByteWithMultipleBooleansInArray() throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {
        boolean[] inputArr = {true, false, true, false, true};
        byte result = Conversion.binaryToByte(inputArr, 0, Byte.MAX_VALUE, 4, 3);
        Assert.assertEquals((byte)(~0b1101000000000), result);
    }
    @Test
    public void testBinaryToByteWithMultipleBooleansNotAtStartOfArray() throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {
        boolean[] inputArr = {false, true, false, true, true};
        byte result = Conversion.binaryToByte(inputArr, 1, Byte.MAX_VALUE, 5, 2);
        Assert.assertEquals((byte)(~0b111000000000), result);
    }
    private static void assertTrue(boolean condition) {
        if (!condition) {
            throw new AssertionError("Condition not met!");
        }
    }
}


The test method has a bug error (marked <Buggy Line>). 
 Please repair the buggy line and return the complete test method after repair.

########

1-->1-->0-->testRepair
// Test Method (Need to be repaired)
package org.apache.commons.lang3;
import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;
import java.util.UUID;
import org.junit.Test;
import org.junit.Assert;
import java.util.Random;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
public class TestBinaryToByte_testBinaryToByte {
    @Test
    public void testBinaryToByteWithEmptyInputAndZeroNBooleansReturnsDstInit() throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {
        boolean[] inputArr = {};
        byte result = Conversion.binaryToByte(inputArr, 0, Byte.MAX_VALUE, 3, 0);
        Assert.assertEquals(Byte.MAX_VALUE, result);
    }
    @Test
    public void testBinaryToByteThrowsIllegalArgExWhenNBoolsGreaterOrEqualEight() throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {
        try{
            Random random = new Random();
            boolean[] inputArr = new boolean[]{true};
            Conversion.binaryToByte(inputArr, 0, Byte.MIN_VALUE, 7, 2);
            fail("Should have thrown exception");
        } catch (IllegalArgumentException e){
            assertTrue(e instanceof IllegalArgumentException);
        }
    }
    @Test
    public void testBinaryToByteWithOneBooleanAtStartOfArray() throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {
        boolean[] inputArr = {false};
        byte result = Conversion.binaryToByte(inputArr, 0, Byte.MAX_VALUE, 0, 1);
        Assert.assertEquals((byte)(~0b1), result);
    }
    @Test
    public void testBinaryToByteWithMultipleBooleansInArray() throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {
        boolean[] inputArr = {true, false, true, false, true};
        byte result = Conversion.binaryToByte(inputArr, 0, Byte.MAX_VALUE, 4, 3);
        Assert.assertEquals((byte)(~0b10100000000), result);
    }
    @Test
    public void testBinaryToByteWithMultipleBooleansNotAtStartOfArray() throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {
        boolean[] inputArr = {false, true, false, true, true};
        byte result = Conversion.binaryToByte(inputArr, 1, Byte.MAX_VALUE, 5, 2);

<Error Line>
        Assert.assertEquals((byte)(~0b11100000000), result);

    }
    private static void assertTrue(boolean condition) {
        if (!condition) {
            throw new AssertionError("Condition not met!");
        }
    }
}


// Focal method (Cannot be modified)
public static byte binaryToByte(final boolean[] src, final int srcPos, final byte dstInit, final int dstPos, final int nBools) {
    if (src.length == 0 && srcPos == 0 || 0 == nBools) {
        return dstInit;
    }
    if (nBools - 1 + dstPos >= 8) {
        throw new IllegalArgumentException("nBools-1+dstPos is greater or equal to than 8");
    }
    byte out = dstInit;
    for (int i = 0; i < nBools; i++) {
        final int shift = i + dstPos;
        final int bits = (src[i + srcPos] ? 1 : 0) << shift;
        final int mask = 0x1 << shift;
        out = (byte) ((out & ~mask) | bits);
    }
    return out;
}

The test method throw an error " java.lang.AssertionError " in " Assert.assertEquals((byte)(~0b11100000000), result); ". 
Please refer to the code logic of the Focal method to repair the error in the test method, and then return the complete test method after repair. Note that adding a try-catch structure to repair the test method and modify the Focal method both are denied.

########

