[
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/AnnotationUtilsTest###testIsValidAnnotationMemberType",
    "generated_path": "AnnotationUtilsTest_testIsValidAnnotationMemberType.java",
    "Compile_result": 1,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3;\nimport static java.lang.annotation.ElementType.FIELD;\nimport static java.lang.annotation.RetentionPolicy.RUNTIME;\nimport static org.apache.commons.lang3.AnnotationUtilsTest.Stooge.CURLY;\nimport static org.apache.commons.lang3.AnnotationUtilsTest.Stooge.LARRY;\nimport static org.apache.commons.lang3.AnnotationUtilsTest.Stooge.MOE;\nimport static org.apache.commons.lang3.AnnotationUtilsTest.Stooge.SHEMP;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertTrue;\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.Target;\nimport java.lang.reflect.Array;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.InvocationHandler;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Proxy;\nimport java.util.Collection;\nimport java.util.Map;\nimport org.junit.Before;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/AnnotationUtilsTest###testIsValidAnnotationMemberType\npublic class AnnotationUtilsTest_testIsValidAnnotationMemberType {\n    @Retention(RUNTIME)\n    @Target(FIELD)\n    public @interface TestAnnotation {\n        Stooge value();\n    }\n    public enum Stooge {\n        MOE, LARRY, CURLY, SHEMP\n    }\n    private Class<?>[] validTypes;\n    @Before\n    public void setUp() {\n        validTypes = new Class<?>[] { boolean.class, byte.class, char.class, double.class, float.class, int.class,\n                long.class, short.class, Boolean.class, Byte.class, Character.class, Double.class, Float.class,\n                Integer.class, Long.class, Short.class, String.class, Class.class, Stooge.class, TestAnnotation.class };\n    }\n    @Test\n    public void testIsValidAnnotationMemberType() {\n        for (Class<?> type : validTypes) {\n            assertTrue(AnnotationUtils.isValidAnnotationMemberType(type));\n        }\n        assertFalse(AnnotationUtils.isValidAnnotationMemberType(Array.class));\n        assertFalse(AnnotationUtils.isValidAnnotationMemberType(Collection.class));\n        assertFalse(AnnotationUtils.isValidAnnotationMemberType(Map.class));\n        assertFalse(AnnotationUtils.isValidAnnotationMemberType(Proxy.class));\n        assertFalse(AnnotationUtils.isValidAnnotationMemberType(InvocationHandler.class));\n        assertFalse(AnnotationUtils.isValidAnnotationMemberType(Method.class));\n        assertFalse(AnnotationUtils.isValidAnnotationMemberType(Field.class));\n        assertFalse(AnnotationUtils.isValidAnnotationMemberType(ElementType.class));\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ArrayUtilsTest###testClone",
    "generated_path": "ArrayUtilsTest_testClone.java",
    "Compile_result": 1,
    "Test_result": 1,
    "Gen_Test": "package org.apache.commons.lang3;\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert.assertNotSame;\nimport static org.junit.Assert.assertNull;\nimport static org.junit.Assert.assertSame;\nimport static org.junit.Assert.assertTrue;\nimport static org.junit.Assert.fail;\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.Modifier;\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.Date;\nimport java.util.Map;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ArrayUtilsTest###testClone\npublic class ArrayUtilsTest_testClone {\n    @Test\n    public void testClone() {\n        boolean[] originalArray = {true, false, true};\n        boolean[] clonedArray = ArrayUtils.clone(originalArray);\n        // Check if cloned array is not null\n        assertNotNull(clonedArray);\n        // Check if cloned array is not the same object as original array\n        assertNotSame(originalArray, clonedArray);\n        // Check if cloned array has the same length as original array\n        assertEquals(originalArray.length, clonedArray.length);\n        // Check if cloned array has the same elements as original array\n        assertArrayEquals(originalArray, clonedArray);\n    }\n}"
  },
  {
    "original_path": "XDean_Java-EX###XDean_Java-EX/src/test/java/cn/xdean/jex/lang/ArrayUtilTest###testCompare",
    "generated_path": "ArrayUtilTest_testCompare.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package cn.xdean.jex.lang;\nimport org.junit.Test;\nimport static cn.xdean.jex.lang.collection.ArrayUtil.*;\nimport static org.junit.Assert.*;\n// original test path: XDean_Java-EX###XDean_Java-EX/src/test/java/cn/xdean/jex/lang/ArrayUtilTest###testCompare\nimport org.junit.Test;\nimport static org.junit.Assert.*;\npublic class ArrayUtilTest_testCompare {\n    @Test\n    public void testCompare() {\n        Integer[] a = {1, 2, 3};\n        Integer[] b = {1, 2, 3};\n        assertEquals(0, ArrayUtil.compare(a, b));\n        Integer[] c = {1, 2, 3};\n        Integer[] d = {1, 2, 4};\n        assertTrue(ArrayUtil.compare(c, d) < 0);\n        Integer[] e = {1, 2, 3};\n        Integer[] f = {1, 2, 2};\n        assertTrue(ArrayUtil.compare(e, f) > 0);\n        String[] g = {\"a\", \"b\", \"c\"};\n        String[] h = {\"a\", \"b\", \"c\"};\n        assertEquals(0, ArrayUtil.compare(g, h));\n        String[] i = {\"a\", \"b\", \"c\"};\n        String[] j = {\"a\", \"b\", \"d\"};\n        assertTrue(ArrayUtil.compare(i, j) < 0);\n        String[] k = {\"a\", \"b\", \"c\"};\n        String[] l = {\"a\", \"b\", \"b\"};\n        assertTrue(ArrayUtil.compare(k, l) > 0);\n    }\n}"
  },
  {
    "original_path": "XDean_Java-EX###XDean_Java-EX/src/test/java/cn/xdean/jex/lang/ArrayUtilTest###testDeepClone",
    "generated_path": "ArrayUtilTest_testDeepClone.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package cn.xdean.jex.lang;\nimport org.junit.Test;\nimport static cn.xdean.jex.lang.collection.ArrayUtil.*;\nimport static org.junit.Assert.*;\n// original test path: XDean_Java-EX###XDean_Java-EX/src/test/java/cn/xdean/jex/lang/ArrayUtilTest###testDeepClone\nimport org.junit.Test;\nimport static org.junit.Assert.*;\npublic class ArrayUtilTest_testDeepClone {\n    @Test\n    public void testDeepClone() {\n        Integer[] originalArray = {1, 2, 3};\n        Integer[] clonedArray = (Integer[]) ArrayUtil.deepClone(originalArray);\n        assertNotSame(originalArray, clonedArray);\n        assertArrayEquals(originalArray, clonedArray);\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testBinaryToByte",
    "generated_path": "ConversionTest_testBinaryToByte.java",
    "Compile_result": 1,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3;\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.fail;\nimport java.util.UUID;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testBinaryToByte\npublic class ConversionTest_testBinaryToByte {\n    @Test\n    public void testBinaryToByte() {\n        boolean[] src = {true, false, true, false, true, false, true, false};\n        int srcPos = 2;\n        byte dstInit = 0;\n        int dstPos = 3;\n        int nBools = 4;\n        byte expectedOutput = 0b00011000;\n        byte actualOutput = Conversion.binaryToByte(src, srcPos, dstInit, dstPos, nBools);\n        assertEquals(expectedOutput, actualOutput);\n        // Test for IllegalArgumentException\n        try {\n            Conversion.binaryToByte(src, srcPos, dstInit, dstPos, 6);\n            fail(\"Expected an IllegalArgumentException to be thrown\");\n        } catch (IllegalArgumentException e) {\n            assertEquals(\"nBools-1+dstPos is greater or equal to than 8\", e.getMessage());\n        }\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testBinaryToInt",
    "generated_path": "ConversionTest_testBinaryToInt.java",
    "Compile_result": 1,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3;\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.fail;\nimport java.util.UUID;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testBinaryToInt\npublic class ConversionTest_testBinaryToInt {\n    @Test\n    public void testBinaryToInt() {\n        boolean[] src = {true, false, true, false};\n        int srcPos = 0;\n        int dstInit = 0;\n        int dstPos = 0;\n        int nBools = 4;\n        int expectedOutput = 10;\n        int actualOutput = Conversion.binaryToInt(src, srcPos, dstInit, dstPos, nBools);\n        assertEquals(expectedOutput, actualOutput);\n        boolean[] src2 = {false, true, false, true, false, true};\n        int srcPos2 = 1;\n        int dstInit2 = 0;\n        int dstPos2 = 3;\n        int nBools2 = 4;\n        int expectedOutput2 = 40;\n        int actualOutput2 = Conversion.binaryToInt(src2, srcPos2, dstInit2, dstPos2, nBools2);\n        assertEquals(expectedOutput2, actualOutput2);\n        boolean[] src3 = {false, true, false, true, false, true};\n        int srcPos3 = 0;\n        int dstInit3 = 0;\n        int dstPos3 = 0;\n        int nBools3 = 6;\n        int expectedOutput3 = 42;\n        int actualOutput3 = Conversion.binaryToInt(src3, srcPos3, dstInit3, dstPos3, nBools3);\n        assertEquals(expectedOutput3, actualOutput3);\n        boolean[] src4 = {};\n        int srcPos4 = 0;\n        int dstInit4 = 0;\n        int dstPos4 = 0;\n        int nBools4 = 0;\n        int expectedOutput4 = 0;\n        int actualOutput4 = Conversion.binaryToInt(src4, srcPos4, dstInit4, dstPos4, nBools4);\n        assertEquals(expectedOutput4, actualOutput4);\n        boolean[] src5 = {true, false, true, false};\n        int srcPos5 = 0;\n        int dstInit5 = 0;\n        int dstPos5 = 30;\n        int nBools5 = 4;\n        try {\n            Conversion.binaryToInt(src5, srcPos5, dstInit5, dstPos5, nBools5);\n            fail(\"Expected IllegalArgumentException to be thrown\");\n        } catch (IllegalArgumentException e) {\n            assertEquals(\"nBools-1+dstPos is greater or equal to than 32\", e.getMessage());\n        }\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testBinaryToLong",
    "generated_path": "ConversionTest_testBinaryToLong.java",
    "Compile_result": 1,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3;\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.fail;\nimport java.util.UUID;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testBinaryToLong\npublic class ConversionTest_testBinaryToLong {\n    @Test\n    public void testBinaryToLong() {\n        boolean[] src = {true, false, true, false};\n        int srcPos = 0;\n        long dstInit = 0;\n        int dstPos = 0;\n        int nBools = 4;\n        long expectedOutput = 10;\n        long actualOutput = Conversion.binaryToLong(src, srcPos, dstInit, dstPos, nBools);\n        assertEquals(expectedOutput, actualOutput);\n        // Test for IllegalArgumentException\n        boolean[] src2 = {true, false, true, false};\n        int srcPos2 = 0;\n        long dstInit2 = 0;\n        int dstPos2 = 62;\n        int nBools2 = 3;\n        try {\n            Conversion.binaryToLong(src2, srcPos2, dstInit2, dstPos2, nBools2);\n            fail(\"Expected IllegalArgumentException was not thrown\");\n        } catch (IllegalArgumentException e) {\n            assertEquals(\"nBools-1+dstPos is greater or equal to than 64\", e.getMessage());\n        }\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testBinaryToShort",
    "generated_path": "ConversionTest_testBinaryToShort.java",
    "Compile_result": 1,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3;\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.fail;\nimport java.util.UUID;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testBinaryToShort\npublic class ConversionTest_testBinaryToShort {\n    @Test\n    public void testBinaryToShort() {\n        boolean[] src = {true, false, true, false, true, false, true, false};\n        int srcPos = 2;\n        short dstInit = 0;\n        int dstPos = 4;\n        int nBools = 4;\n        short expectedOutput = 20;\n        short actualOutput = Conversion.binaryToShort(src, srcPos, dstInit, dstPos, nBools);\n        assertEquals(expectedOutput, actualOutput);\n        // Test for IllegalArgumentException\n        try {\n            Conversion.binaryToShort(src, srcPos, dstInit, dstPos, 13);\n            fail(\"Expected an IllegalArgumentException to be thrown\");\n        } catch (IllegalArgumentException e) {\n            assertEquals(\"nBools-1+dstPos is greater or equal to than 16\", e.getMessage());\n        }\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testByteArrayToInt",
    "generated_path": "ConversionTest_testByteArrayToInt.java",
    "Compile_result": 1,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3;\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.fail;\nimport java.util.UUID;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testByteArrayToInt\nimport org.junit.Assert;\nimport org.junit.Test;\npublic class ConversionTest_testByteArrayToInt {\n    @Test\n    public void testByteArrayToInt() {\n        byte[] src = {0x12, 0x34, 0x56, 0x78};\n        int srcPos = 0;\n        int dstInit = 0;\n        int dstPos = 0;\n        int nBytes = 4;\n        int expectedOutput = 0x12345678;\n        int actualOutput = Conversion.byteArrayToInt(src, srcPos, dstInit, dstPos, nBytes);\n        Assert.assertEquals(expectedOutput, actualOutput);\n    }\n    @Test\n    public void testByteArrayToIntWithInvalidInput() {\n        byte[] src = {};\n        int srcPos = 0;\n        int dstInit = 0;\n        int dstPos = 0;\n        int nBytes = 0;\n        try {\n            Conversion.byteArrayToInt(src, srcPos, dstInit, dstPos, nBytes);\n            fail(\"Expected IllegalArgumentException was not thrown\");\n        } catch (IllegalArgumentException e) {\n            // expected exception\n        }\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testByteArrayToLong",
    "generated_path": "ConversionTest_testByteArrayToLong.java",
    "Compile_result": 1,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3;\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.fail;\nimport java.util.UUID;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testByteArrayToLong\npublic class ConversionTest_testByteArrayToLong {\n    @Test\n    public void testByteArrayToLong() {\n        byte[] src = {0x12, 0x34, 0x56, 0x78};\n        int srcPos = 0;\n        long dstInit = 0;\n        int dstPos = 0;\n        int nBytes = 4;\n        long expectedOutput = 0x12345678;\n        long actualOutput = Conversion.byteArrayToLong(src, srcPos, dstInit, dstPos, nBytes);\n        assertEquals(expectedOutput, actualOutput);\n        // Test for IllegalArgumentException\n        try {\n            nBytes = 8;\n            Conversion.byteArrayToLong(src, srcPos, dstInit, dstPos, nBytes);\n            fail(\"Expected IllegalArgumentException was not thrown\");\n        } catch (IllegalArgumentException e) {\n            // Test passed\n        }\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testHexToByte",
    "generated_path": "ConversionTest_testHexToByte.java",
    "Compile_result": 1,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3;\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.fail;\nimport java.util.UUID;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testHexToByte\nimport org.junit.Test;\npublic class ConversionTest_testHexToByte {\n    @Test\n    public void testHexToByte() {\n        byte expected = (byte) 0x0F;\n        byte actual = Conversion.hexToByte(\"0F\", 0, (byte) 0x00, 0, 1);\n        assertEquals(expected, actual);\n        expected = (byte) 0x3C;\n        actual = Conversion.hexToByte(\"1E3C\", 1, (byte) 0x00, 2, 1);\n        assertEquals(expected, actual);\n        expected = (byte) 0x5A;\n        actual = Conversion.hexToByte(\"5A\", 0, (byte) 0x00, 0, 1);\n        assertEquals(expected, actual);\n        try {\n            Conversion.hexToByte(\"FF\", 0, (byte) 0x00, 7, 1);\n            fail(\"IllegalArgumentException expected but not thrown\");\n        } catch (IllegalArgumentException e) {\n            assertEquals(\"(nHexs-1)*4+dstPos is greater or equal to than 8\", e.getMessage());\n        }\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testHexToInt",
    "generated_path": "ConversionTest_testHexToInt.java",
    "Compile_result": 1,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3;\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.fail;\nimport java.util.UUID;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testHexToInt\nimport org.junit.Test;\npublic class ConversionTest_testHexToInt {\n    @Test\n    public void testHexToInt() {\n        // Test case 1\n        String src1 = \"ABCD\";\n        int srcPos1 = 0;\n        int dstInit1 = 0;\n        int dstPos1 = 0;\n        int nHex1 = 4;\n        int expectedOutput1 = 0xABCD;\n        int actualOutput1 = Conversion.hexToInt(src1, srcPos1, dstInit1, dstPos1, nHex1);\n        assertEquals(expectedOutput1, actualOutput1);\n        // Test case 2\n        String src2 = \"1234\";\n        int srcPos2 = 0;\n        int dstInit2 = 0;\n        int dstPos2 = 8;\n        int nHex2 = 2;\n        int expectedOutput2 = 0x1200;\n        int actualOutput2 = Conversion.hexToInt(src2, srcPos2, dstInit2, dstPos2, nHex2);\n        assertEquals(expectedOutput2, actualOutput2);\n        // Test case 3\n        String src3 = \"F\";\n        int srcPos3 = 0;\n        int dstInit3 = 0;\n        int dstPos3 = 28;\n        int nHex3 = 1;\n        int expectedOutput3 = 0xF0000000;\n        int actualOutput3 = Conversion.hexToInt(src3, srcPos3, dstInit3, dstPos3, nHex3);\n        assertEquals(expectedOutput3, actualOutput3);\n        // Test case 4 - Exception test\n        String src4 = \"1234\";\n        int srcPos4 = 0;\n        int dstInit4 = 0;\n        int dstPos4 = 24;\n        int nHex4 = 2;\n        try {\n            Conversion.hexToInt(src4, srcPos4, dstInit4, dstPos4, nHex4);\n            fail(\"Expected IllegalArgumentException was not thrown\");\n        } catch (IllegalArgumentException e) {\n            assertEquals(\"(nHexs-1)*4+dstPos is greater or equal to than 32\", e.getMessage());\n        }\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testHexToLong",
    "generated_path": "ConversionTest_testHexToLong.java",
    "Compile_result": 1,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3;\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.fail;\nimport java.util.UUID;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testHexToLong\nimport org.junit.Assert;\nimport org.junit.Test;\npublic class ConversionTest_testHexToLong {\n    @Test\n    public void testHexToLong() {\n        String src = \"ABCDEF\";\n        int srcPos = 0;\n        long dstInit = 0;\n        int dstPos = 0;\n        int nHex = 6;\n        long expectedOutput = 0xABCDEF;\n        long actualOutput = Conversion.hexToLong(src, srcPos, dstInit, dstPos, nHex);\n        Assert.assertEquals(expectedOutput, actualOutput);\n    }\n    @Test(expected = IllegalArgumentException.class)\n    public void testHexToLongWithInvalidInput() {\n        String src = \"ABCDEF\";\n        int srcPos = 0;\n        long dstInit = 0;\n        int dstPos = 60;\n        int nHex = 2;\n        Conversion.hexToLong(src, srcPos, dstInit, dstPos, nHex);\n        fail(\"Expected an IllegalArgumentException to be thrown\");\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testHexToShort",
    "generated_path": "ConversionTest_testHexToShort.java",
    "Compile_result": 1,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3;\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.fail;\nimport java.util.UUID;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testHexToShort\npublic class ConversionTest_testHexToShort {\n    @Test\n    public void testHexToShort() {\n        // Test case 1\n        String src1 = \"F\";\n        int srcPos1 = 0;\n        short dstInit1 = 0;\n        int dstPos1 = 0;\n        int nHex1 = 1;\n        short expectedOutput1 = 15;\n        short actualOutput1 = Conversion.hexToShort(src1, srcPos1, dstInit1, dstPos1, nHex1);\n        assertEquals(expectedOutput1, actualOutput1);\n        // Test case 2\n        String src2 = \"ABCD\";\n        int srcPos2 = 0;\n        short dstInit2 = 0;\n        int dstPos2 = 4;\n        int nHex2 = 2;\n        short expectedOutput2 = 27396;\n        short actualOutput2 = Conversion.hexToShort(src2, srcPos2, dstInit2, dstPos2, nHex2);\n        assertEquals(expectedOutput2, actualOutput2);\n        // Test case 3\n        String src3 = \"123456\";\n        int srcPos3 = 2;\n        short dstInit3 = 32767;\n        int dstPos3 = 8;\n        int nHex3 = 3;\n        short expectedOutput3 = -32513;\n        short actualOutput3 = Conversion.hexToShort(src3, srcPos3, dstInit3, dstPos3, nHex3);\n        assertEquals(expectedOutput3, actualOutput3);\n        // Test case 4 - Exception test\n        String src4 = \"123456\";\n        int srcPos4 = 2;\n        short dstInit4 = 32767;\n        int dstPos4 = 12;\n        int nHex4 = 1;\n        try {\n            Conversion.hexToShort(src4, srcPos4, dstInit4, dstPos4, nHex4);\n            fail(\"Expected IllegalArgumentException was not thrown\");\n        } catch (IllegalArgumentException e) {\n            assertEquals(\"(nHexs-1)*4+dstPos is greater or equal to than 16\", e.getMessage());\n        }\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testLongToHex",
    "generated_path": "ConversionTest_testLongToHex.java",
    "Compile_result": 1,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3;\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.fail;\nimport java.util.UUID;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testLongToHex\nimport org.junit.Assert;\nimport org.junit.Test;\npublic class ConversionTest_testLongToHex {\n    @Test\n    public void testLongToHex() {\n        long src = 1234567890L;\n        int srcPos = 0;\n        String dstInit = \"00000000\";\n        int dstPos = 0;\n        int nHexs = 8;\n        String expected = \"499602D2\";\n        String result = Conversion.longToHex(src, srcPos, dstInit, dstPos, nHexs);\n        Assert.assertEquals(expected, result);\n        src = 9876543210L;\n        srcPos = 4;\n        dstInit = \"FFFFFFFF\";\n        dstPos = 4;\n        nHexs = 4;\n        expected = \"FFFFFEDC\";\n        result = Conversion.longToHex(src, srcPos, dstInit, dstPos, nHexs);\n        Assert.assertEquals(expected, result);\n        src = 1234567890123456789L;\n        srcPos = 16;\n        dstInit = \"0000000000000000\";\n        dstPos = 8;\n        nHexs = 8;\n        expected = \"00000000BC614E15\";\n        result = Conversion.longToHex(src, srcPos, dstInit, dstPos, nHexs);\n        Assert.assertEquals(expected, result);\n        src = 9223372036854775807L;\n        srcPos = 0;\n        dstInit = \"0000000000000000\";\n        dstPos = 0;\n        nHexs = 16;\n        expected = \"7FFFFFFFFFFFFFFF\";\n        result = Conversion.longToHex(src, srcPos, dstInit, dstPos, nHexs);\n        Assert.assertEquals(expected, result);\n        src = -9223372036854775808L;\n        srcPos = 0;\n        dstInit = \"FFFFFFFFFFFFFFFF\";\n        dstPos = 0;\n        nHexs = 16;\n        expected = \"8000000000000000\";\n        result = Conversion.longToHex(src, srcPos, dstInit, dstPos, nHexs);\n        Assert.assertEquals(expected, result);\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testLongToIntArray",
    "generated_path": "ConversionTest_testLongToIntArray.java",
    "Compile_result": 1,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3;\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.fail;\nimport java.util.UUID;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testLongToIntArray\npublic class ConversionTest_testLongToIntArray {\n    @Test\n    public void testLongToIntArray() {\n        long src = 0x123456789abcdefL;\n        int srcPos = 0;\n        int[] dst = new int[2];\n        int dstPos = 0;\n        int nInts = 2;\n        int[] expected = {0x9abcdef, 0x12345678};\n        Conversion.longToIntArray(src, srcPos, dst, dstPos, nInts);\n        assertArrayEquals(expected, dst);\n        // Test for IllegalArgumentException\n        srcPos = 32;\n        try {\n            Conversion.longToIntArray(src, srcPos, dst, dstPos, nInts);\n            fail(\"Expected IllegalArgumentException was not thrown\");\n        } catch (IllegalArgumentException e) {\n            assertEquals(\"(nInts-1)*32+srcPos is greater or equal to than 64\", e.getMessage());\n        }\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testShortArrayToInt",
    "generated_path": "ConversionTest_testShortArrayToInt.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3;\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.fail;\nimport java.util.UUID;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testShortArrayToInt\npublic class ConversionTest_testShortArrayToInt {\n    @Test\n    public void testShortArrayToInt() {\n        short[] src = {0x1234, 0x5678, 0x9abc};\n        int srcPos = 0;\n        int dstInit = 0;\n        int dstPos = 0;\n        int nShorts = 3;\n        int expectedOutput = 0x9abc56781234;\n        int actualOutput = Conversion.shortArrayToInt(src, srcPos, dstInit, dstPos, nShorts);\n        assertEquals(expectedOutput, actualOutput);\n        // Test with empty source array and zero nShorts\n        short[] emptySrc = {};\n        int emptySrcPos = 0;\n        int emptyDstInit = 0;\n        int emptyDstPos = 0;\n        int emptyNShorts = 0;\n        int expectedEmptyOutput = 0;\n        int actualEmptyOutput = Conversion.shortArrayToInt(emptySrc, emptySrcPos, emptyDstInit, emptyDstPos, emptyNShorts);\n        assertEquals(expectedEmptyOutput, actualEmptyOutput);\n        // Test with invalid dstPos value\n        int invalidDstPos = 17;\n        try {\n            Conversion.shortArrayToInt(src, srcPos, dstInit, invalidDstPos, nShorts);\n            fail(\"Expected IllegalArgumentException was not thrown\");\n        } catch (IllegalArgumentException e) {\n            assertEquals(\"(nShorts-1)*16+dstPos is greater or equal to than 32\", e.getMessage());\n        }\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testShortArrayToLong",
    "generated_path": "ConversionTest_testShortArrayToLong.java",
    "Compile_result": 1,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3;\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.fail;\nimport java.util.UUID;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testShortArrayToLong\npublic class ConversionTest_testShortArrayToLong {\n    @Test\n    public void testShortArrayToLong() {\n        short[] src = {1, 2, 3, 4};\n        int srcPos = 0;\n        long dstInit = 0;\n        int dstPos = 0;\n        int nShorts = 4;\n        long expectedOutput = 0x0000000100020003L;\n        long actualOutput = Conversion.shortArrayToLong(src, srcPos, dstInit, dstPos, nShorts);\n        assertEquals(expectedOutput, actualOutput);\n        // Test for IllegalArgumentException\n        try {\n            nShorts = 4;\n            dstPos = 48;\n            Conversion.shortArrayToLong(src, srcPos, dstInit, dstPos, nShorts);\n            fail(\"Expected an IllegalArgumentException to be thrown\");\n        } catch (IllegalArgumentException e) {\n            assertEquals(\"(nShorts-1)*16+dstPos is greater or equal to than 64\", e.getMessage());\n        }\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/time/DateUtilsTest###testRound",
    "generated_path": "DateUtilsTest_testRound.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3.time;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert.assertNotSame;\nimport static org.junit.Assert.assertTrue;\nimport static org.junit.Assert.fail;\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.Modifier;\nimport java.text.DateFormat;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.GregorianCalendar;\nimport java.util.Iterator;\nimport java.util.Locale;\nimport java.util.NoSuchElementException;\nimport java.util.TimeZone;\nimport org.apache.commons.lang3.test.SystemDefaults;\nimport org.apache.commons.lang3.test.SystemDefaultsSwitch;\nimport org.junit.Before;\nimport org.junit.BeforeClass;\nimport org.junit.Rule;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/time/DateUtilsTest###testRound\nimport java.util.Calendar;\nimport org.junit.Assert;\nimport org.junit.Test;\npublic class DateUtilsTest_testRound {\n    @Test(expected = IllegalArgumentException.class)\n    public void testRound_NullDate() {\n        DateUtils.round(null, Calendar.DAY_OF_MONTH);\n    }\n    @Test\n    public void testRound_RoundUp() {\n        Calendar date = Calendar.getInstance();\n        date.set(2021, Calendar.JANUARY, 15, 12, 30, 45);\n        date.set(Calendar.MILLISECOND, 0);\n        Calendar expected = Calendar.getInstance();\n        expected.set(2021, Calendar.JANUARY, 16, 0, 0, 0);\n        expected.set(Calendar.MILLISECOND, 0);\n        Calendar actual = DateUtils.round(date, Calendar.DAY_OF_MONTH);\n        Assert.assertEquals(expected.getTime(), actual.getTime());\n    }\n    @Test\n    public void testRound_RoundDown() {\n        Calendar date = Calendar.getInstance();\n        date.set(2021, Calendar.JANUARY, 15, 12, 30, 45);\n        date.set(Calendar.MILLISECOND, 0);\n        Calendar expected = Calendar.getInstance();\n        expected.set(2021, Calendar.JANUARY, 15, 0, 0, 0);\n        expected.set(Calendar.MILLISECOND, 0);\n        Calendar actual = DateUtils.round(date, Calendar.HOUR_OF_DAY);\n        Assert.assertEquals(expected.getTime(), actual.getTime());\n    }\n}"
  },
  {
    "original_path": "mgormley_prim###mgormley_prim/src/test/java/edu/jhu/prim/arrays/DoubleArraysTest###testLogSum",
    "generated_path": "DoubleArraysTest_testLogSum.java",
    "Compile_result": 1,
    "Test_result": 1,
    "Gen_Test": "package edu.jhu.prim.arrays;\nimport static org.junit.Assert.*;\nimport java.util.Arrays;\nimport org.junit.Test;\nimport edu.jhu.prim.util.Timer;\nimport edu.jhu.prim.util.math.FastMath;\n// original test path: mgormley_prim###mgormley_prim/src/test/java/edu/jhu/prim/arrays/DoubleArraysTest###testLogSum\nimport org.junit.Assert;\nimport org.junit.Test;\npublic class DoubleArraysTest_testLogSum {\n    @Test\n    public void testLogSum() {\n        double[] logProps = {0.1, 0.2, 0.3, 0.4};\n        double expected = FastMath.logAdd(FastMath.logAdd(FastMath.logAdd(Math.log(0.1), Math.log(0.2)), Math.log(0.3)), Math.log(0.4));\n        double actual = DoubleArrays.logSum(logProps);\n        Assert.assertEquals(expected, actual, 0.0001);\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest###testFormatDurationWords",
    "generated_path": "DurationFormatUtilsTest_testFormatDurationWords.java",
    "Compile_result": 1,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3.time;\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert.assertTrue;\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.Modifier;\nimport java.util.Calendar;\nimport java.util.TimeZone;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest###testFormatDurationWords\nimport org.junit.Test;\nimport static org.junit.Assert.*;\npublic class DurationFormatUtilsTest_testFormatDurationWords {\n    @Test\n    public void testFormatDurationWords() {\n        long durationMillis = 123456789;\n        boolean suppressLeadingZeroElements = false;\n        boolean suppressTrailingZeroElements = false;\n        String expected = \"1 day 10 hours 17 minutes 36 seconds\";\n        String result = DurationFormatUtils.formatDurationWords(durationMillis, suppressLeadingZeroElements, suppressTrailingZeroElements);\n        assertEquals(expected, result);\n        suppressLeadingZeroElements = true;\n        expected = \"1 day 10 hours 17 minutes 36 seconds\";\n        result = DurationFormatUtils.formatDurationWords(durationMillis, suppressLeadingZeroElements, suppressTrailingZeroElements);\n        assertEquals(expected, result);\n        suppressTrailingZeroElements = true;\n        expected = \"1 day 10 hours 17 minutes 36 seconds\";\n        result = DurationFormatUtils.formatDurationWords(durationMillis, suppressLeadingZeroElements, suppressTrailingZeroElements);\n        assertEquals(expected, result);\n        suppressLeadingZeroElements = false;\n        expected = \"1 day 10 hours 17 minutes 36 seconds\";\n        result = DurationFormatUtils.formatDurationWords(durationMillis, suppressLeadingZeroElements, suppressTrailingZeroElements);\n        assertEquals(expected, result);\n        durationMillis = 60000;\n        suppressLeadingZeroElements = false;\n        suppressTrailingZeroElements = false;\n        expected = \"1 minute 0 seconds\";\n        result = DurationFormatUtils.formatDurationWords(durationMillis, suppressLeadingZeroElements, suppressTrailingZeroElements);\n        assertEquals(expected, result);\n        suppressLeadingZeroElements = true;\n        expected = \"1 minute\";\n        result = DurationFormatUtils.formatDurationWords(durationMillis, suppressLeadingZeroElements, suppressTrailingZeroElements);\n        assertEquals(expected, result);\n        suppressTrailingZeroElements = true;\n        expected = \"1 minute\";\n        result = DurationFormatUtils.formatDurationWords(durationMillis, suppressLeadingZeroElements, suppressTrailingZeroElements);\n        assertEquals(expected, result);\n        suppressLeadingZeroElements = false;\n        expected = \"0 days 0 hours 1 minute\";\n        result = DurationFormatUtils.formatDurationWords(durationMillis, suppressLeadingZeroElements, suppressTrailingZeroElements);\n        assertEquals(expected, result);\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest###testReflectionAppend",
    "generated_path": "EqualsBuilderTest_testReflectionAppend.java",
    "Compile_result": 1,
    "Test_result": 1,
    "Gen_Test": "package org.apache.commons.lang3.builder;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertNull;\nimport static org.junit.Assert.assertTrue;\nimport java.lang.reflect.Method;\nimport java.util.Arrays;\nimport org.apache.commons.lang3.reflect.MethodUtils;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest###testReflectionAppend\nimport org.junit.Before;\nimport org.junit.Test;\npublic class EqualsBuilderTest_testReflectionAppend {\n    private EqualsBuilder equalsBuilder;\n    @Before\n    public void setUp() {\n        equalsBuilder = new EqualsBuilder();\n    }\n    @Test\n    public void testReflectionAppendWithEqualObjects() {\n        Object lhs = new Object();\n        Object rhs = lhs;\n        EqualsBuilder result = equalsBuilder.reflectionAppend(lhs, rhs);\n        assertTrue(result.isEquals());\n    }\n    @Test\n    public void testReflectionAppendWithNullObjects() {\n        Object lhs = null;\n        Object rhs = null;\n        EqualsBuilder result = equalsBuilder.reflectionAppend(lhs, rhs);\n        assertTrue(result.isEquals());\n    }\n    @Test\n    public void testReflectionAppendWithDifferentObjects() {\n        Object lhs = new Object();\n        Object rhs = new String(\"test\");\n        EqualsBuilder result = equalsBuilder.reflectionAppend(lhs, rhs);\n        assertFalse(result.isEquals());\n    }\n    @Test\n    public void testReflectionAppendWithArrayObjects() {\n        Object lhs = new int[] { 1, 2, 3 };\n        Object rhs = new int[] { 1, 2, 3 };\n        EqualsBuilder result = equalsBuilder.reflectionAppend(lhs, rhs);\n        assertTrue(result.isEquals());\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/time/FastDateParserTest###testEquals",
    "generated_path": "FastDateParserTest_testEquals.java",
    "Compile_result": 1,
    "Test_result": 1,
    "Gen_Test": "package org.apache.commons.lang3.time;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertTrue;\nimport static org.junit.Assert.fail;\nimport java.io.Serializable;\nimport java.text.ParseException;\nimport java.text.ParsePosition;\nimport java.text.SimpleDateFormat;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.GregorianCalendar;\nimport java.util.HashMap;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.TimeZone;\nimport org.apache.commons.lang3.LocaleUtils;\nimport org.apache.commons.lang3.SerializationUtils;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/time/FastDateParserTest###testEquals\npublic class FastDateParserTest_testEquals {\n    @Test\n    public void testEquals() {\n        // Create a FastDateParser object\n        FastDateParser parser1 = new FastDateParser(\"yyyy-MM-dd\", TimeZone.getTimeZone(\"GMT\"), Locale.US);\n        // Create another FastDateParser object with the same properties as parser1\n        FastDateParser parser2 = new FastDateParser(\"yyyy-MM-dd\", TimeZone.getTimeZone(\"GMT\"), Locale.US);\n        // Create a FastDateParser object with different properties from parser1\n        FastDateParser parser3 = new FastDateParser(\"dd/MM/yyyy\", TimeZone.getTimeZone(\"GMT+1\"), Locale.FRANCE);\n        // Test that parser1 equals parser2\n        assertTrue(parser1.equals(parser2));\n        // Test that parser1 does not equal parser3\n        assertFalse(parser1.equals(parser3));\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/time/FastDatePrinterTest###testFormat",
    "generated_path": "FastDatePrinterTest_testFormat.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3.time;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertTrue;\nimport java.io.Serializable;\nimport java.text.FieldPosition;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.GregorianCalendar;\nimport java.util.Locale;\nimport java.util.TimeZone;\nimport org.apache.commons.lang3.SerializationUtils;\nimport org.apache.commons.lang3.test.SystemDefaults;\nimport org.apache.commons.lang3.test.SystemDefaultsSwitch;\nimport org.junit.Rule;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/time/FastDatePrinterTest###testFormat\npublic class FastDatePrinterTest_testFormat {\n    @Test\n    public void testFormat() throws ParseException {\n        final String pattern = \"yyyy-MM-dd HH:mm:ss\";\n        final TimeZone timeZone = TimeZone.getTimeZone(\"UTC\");\n        final Locale locale = Locale.US;\n        final FastDatePrinter fastDatePrinter = new FastDatePrinter(pattern, timeZone, locale);\n        final SimpleDateFormat sdf = new SimpleDateFormat(pattern, locale);\n        sdf.setTimeZone(timeZone);\n        final Date date = sdf.parse(\"2022-01-01 12:00:00\");\n        final String expected = \"2022-01-01 12:00:00\";\n        final String actual = fastDatePrinter.format(date);\n        assertEquals(expected, actual);\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest###testGetFieldsListWithAnnotation",
    "generated_path": "FieldUtilsTest_testGetFieldsListWithAnnotation.java",
    "Compile_result": 1,
    "Test_result": 1,
    "Gen_Test": "package org.apache.commons.lang3.reflect;\nimport org.apache.commons.lang3.ArrayUtils;\nimport org.apache.commons.lang3.reflect.testbed.Ambig;\nimport org.apache.commons.lang3.reflect.testbed.Annotated;\nimport org.apache.commons.lang3.reflect.testbed.Foo;\nimport org.apache.commons.lang3.reflect.testbed.PrivatelyShadowedChild;\nimport org.apache.commons.lang3.reflect.testbed.PublicChild;\nimport org.apache.commons.lang3.reflect.testbed.PubliclyShadowedChild;\nimport org.apache.commons.lang3.reflect.testbed.StaticContainer;\nimport org.apache.commons.lang3.reflect.testbed.StaticContainerChild;\nimport org.junit.Before;\nimport org.junit.Test;\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.Modifier;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert.assertNull;\nimport static org.junit.Assert.assertTrue;\nimport static org.junit.Assert.fail;\nimport static org.junit.Assume.assumeNotNull;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest###testGetFieldsListWithAnnotation\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.util.List;\nimport org.junit.Test;\npublic class FieldUtilsTest_testGetFieldsListWithAnnotation {\n    @Retention(RetentionPolicy.RUNTIME)\n    public @interface TestAnnotation {}\n    public static class TestClass {\n        @TestAnnotation\n        private String annotatedField;\n        private int nonAnnotatedField;\n    }\n    @Test\n    public void testGetFieldsListWithAnnotation() {\n        List<Field> annotatedFields = FieldUtils.getFieldsListWithAnnotation(TestClass.class, TestAnnotation.class);\n        assertEquals(1, annotatedFields.size());\n        assertEquals(\"annotatedField\", annotatedFields.get(0).getName());\n    }\n}"
  },
  {
    "original_path": "XDean_Java-EX###XDean_Java-EX/src/test/java/cn/xdean/jex/io/FileUtilTest###testGetNameWithoutSuffix",
    "generated_path": "FileUtilTest_testGetNameWithoutSuffix.java",
    "Compile_result": 1,
    "Test_result": 1,
    "Gen_Test": "package cn.xdean.jex.io;\nimport cn.xdean.jex.lang.ExceptionUtil;\nimport org.junit.Assert;\nimport org.junit.Ignore;\nimport org.junit.Test;\nimport java.io.IOException;\nimport java.net.URI;\nimport java.nio.file.Paths;\nimport static org.junit.Assert.assertEquals;\n// original test path: XDean_Java-EX###XDean_Java-EX/src/test/java/cn/xdean/jex/io/FileUtilTest###testGetNameWithoutSuffix\nimport org.junit.Test;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport static org.junit.Assert.assertEquals;\npublic class FileUtilTest_testGetNameWithoutSuffix {\n    @Test\n    public void testGetNameWithoutSuffix() {\n        Path path = Paths.get(\"example.txt\");\n        String nameWithoutSuffix = FileUtil.getNameWithoutSuffix(path);\n        assertEquals(\"example\", nameWithoutSuffix);\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/math/FractionTest###testEquals",
    "generated_path": "FractionTest_testEquals.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3.math;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertSame;\nimport static org.junit.Assert.assertTrue;\nimport static org.junit.Assert.fail;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/math/FractionTest###testEquals\npublic class FractionTest_testEquals {\n    @Test\n    public void testEquals() {\n        Fraction f1 = new Fraction(1, 2);\n        Fraction f2 = new Fraction(1, 2);\n        Fraction f3 = new Fraction(2, 3);\n        // Test reflexivity\n        assertTrue(f1.equals(f1));\n        // Test symmetry\n        assertTrue(f1.equals(f2));\n        assertTrue(f2.equals(f1));\n        // Test transitivity\n        assertTrue(f1.equals(f2));\n        assertTrue(f2.equals(f3));\n        assertTrue(f1.equals(f3));\n        // Test non-equality\n        assertFalse(f1.equals(null));\n        assertFalse(f1.equals(\"not a fraction\"));\n        assertFalse(f1.equals(f3));\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/math/FractionTest###testReduce",
    "generated_path": "FractionTest_testReduce.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3.math;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertSame;\nimport static org.junit.Assert.assertTrue;\nimport static org.junit.Assert.fail;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/math/FractionTest###testReduce\npublic class FractionTest_testReduce {\n    @Test\n    public void testReduce() {\n        Fraction f1 = new Fraction(4, 8);\n        Fraction f2 = new Fraction(3, 5);\n        Fraction f3 = new Fraction(0, 3);\n        Fraction f4 = new Fraction(5, 1);\n        assertEquals(new Fraction(1, 2), f1.reduce());\n        assertEquals(f2, f2.reduce());\n        assertSame(Fraction.ZERO, f3.reduce());\n        assertEquals(f4, f4.reduce());\n    }\n}"
  },
  {
    "original_path": "mgormley_prim###mgormley_prim/src/test/java_generated/edu/jhu/prim/map/IntDoubleHashMapTest###testEquals",
    "generated_path": "IntDoubleHashMapTest_testEquals.java",
    "Compile_result": 1,
    "Test_result": 1,
    "Gen_Test": "package edu.jhu.prim.map;\nimport static edu.jhu.prim.Primitives.toDouble;\nimport static edu.jhu.prim.Primitives.toInt;\nimport static edu.jhu.prim.Primitives.toInt;\nimport static org.junit.Assert.*;\nimport java.util.Iterator;\nimport org.junit.Test;\nimport edu.jhu.prim.Primitives;\n// original test path: mgormley_prim###mgormley_prim/src/test/java_generated/edu/jhu/prim/map/IntDoubleHashMapTest###testEquals\nimport org.junit.Before;\nimport org.junit.Test;\npublic class IntDoubleHashMapTest_testEquals {\n    private IntDoubleHashMap map1;\n    private IntDoubleHashMap map2;\n    @Before\n    public void setUp() {\n        map1 = new IntDoubleHashMap();\n        map2 = new IntDoubleHashMap();\n    }\n    @Test\n    public void testEquals() {\n        map1.put(1, 1.0);\n        map1.put(2, 2.0);\n        map1.put(3, 3.0);\n        map2.put(1, 1.0);\n        map2.put(2, 2.0);\n        map2.put(3, 3.0);\n        assertTrue(map1.equals(map2));\n        assertTrue(map2.equals(map1));\n        map2.put(4, 4.0);\n        assertFalse(map1.equals(map2));\n        assertFalse(map2.equals(map1));\n        map1.put(4, 4.0);\n        assertTrue(map1.equals(map2));\n        assertTrue(map2.equals(map1));\n        map2.put(1, 2.0);\n        assertFalse(map1.equals(map2));\n        assertFalse(map2.equals(map1));\n    }\n}"
  },
  {
    "original_path": "mgormley_prim###mgormley_prim/src/test/java_generated/edu/jhu/prim/map/IntDoubleHashMapTest###testHashCode",
    "generated_path": "IntDoubleHashMapTest_testHashCode.java",
    "Compile_result": 1,
    "Test_result": 1,
    "Gen_Test": "package edu.jhu.prim.map;\nimport static edu.jhu.prim.Primitives.toDouble;\nimport static edu.jhu.prim.Primitives.toInt;\nimport static edu.jhu.prim.Primitives.toInt;\nimport static org.junit.Assert.*;\nimport java.util.Iterator;\nimport org.junit.Test;\nimport edu.jhu.prim.Primitives;\n// original test path: mgormley_prim###mgormley_prim/src/test/java_generated/edu/jhu/prim/map/IntDoubleHashMapTest###testHashCode\nimport org.junit.Assert;\nimport org.junit.Test;\npublic class IntDoubleHashMapTest_testHashCode {\n    @Test\n    public void testHashCode() {\n        IntDoubleHashMap map1 = new IntDoubleHashMap();\n        map1.put(1, 1.0);\n        map1.put(2, 2.0);\n        map1.put(3, 3.0);\n        IntDoubleHashMap map2 = new IntDoubleHashMap();\n        map2.put(3, 3.0);\n        map2.put(2, 2.0);\n        map2.put(1, 1.0);\n        Assert.assertEquals(map1.hashCode(), map2.hashCode());\n    }\n}"
  },
  {
    "original_path": "mgormley_prim###mgormley_prim/src/test/java_generated/edu/jhu/prim/map/IntDoubleSortedMapTest###testRemove",
    "generated_path": "IntDoubleSortedMapTest_testRemove.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package edu.jhu.prim.map;\nimport static edu.jhu.prim.Primitives.toDouble;\nimport static edu.jhu.prim.Primitives.toInt;\nimport static org.junit.Assert.assertEquals;\nimport java.util.Iterator;\nimport org.junit.Test;\n// original test path: mgormley_prim###mgormley_prim/src/test/java_generated/edu/jhu/prim/map/IntDoubleSortedMapTest###testRemove\npublic class IntDoubleSortedMapTest_testRemove {\n    @Test\n    public void testRemove() {\n        IntDoubleSortedMap map = new IntDoubleSortedMap(new int[]{1, 2, 3}, new double[]{1.0, 2.0, 3.0});\n        map.remove(2);\n        assertEquals(2, map.size());\n        Iterator<Integer> iter = map.keySet().iterator();\n        assertEquals(1, iter.next().intValue());\n        assertEquals(3, iter.next().intValue());\n        iter = map.values().iterator();\n        assertEquals(1.0, toDouble(iter.next()), 0.0);\n        assertEquals(3.0, toDouble(iter.next()), 0.0);\n    }\n}"
  },
  {
    "original_path": "mgormley_prim###mgormley_prim/src/test/java_generated/edu/jhu/prim/vector/IntDoubleSortedVectorTest###testGetWithNoZeroValues",
    "generated_path": "IntDoubleSortedVectorTest_testGetWithNoZeroValues.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package edu.jhu.prim.vector;\nimport static edu.jhu.prim.Primitives.toDouble;\nimport static edu.jhu.prim.Primitives.toInt;\nimport static org.junit.Assert.*;\nimport java.util.Iterator;\nimport org.junit.Test;\nimport edu.jhu.prim.Primitives;\nimport edu.jhu.prim.map.IntDoubleEntry;\n// original test path: mgormley_prim###mgormley_prim/src/test/java_generated/edu/jhu/prim/vector/IntDoubleSortedVectorTest###testGetWithNoZeroValues\nimport org.junit.Before;\nimport org.junit.Test;\npublic class IntDoubleSortedVectorTest_testGetWithNoZeroValues {\n    private IntDoubleSortedVector row;\n    @Before\n    public void setUp() {\n        int[] index = {0, 1, 2, 3};\n        double[] data = {1.0, 0.0, 2.0, 0.5};\n        row = new IntDoubleSortedVector(index, data);\n    }\n    @Test\n    public void testGetWithNoZeroValues() {\n        double zeroThreshold = 0.1;\n        IntDoubleSortedVector result = IntDoubleSortedVector.getWithNoZeroValues(row, zeroThreshold);\n        assertEquals(2, result.getUsed());\n        assertEquals(0, result.get(1), 0.0);\n        Iterator<IntDoubleEntry> iter = result.getEntryIterator();\n        assertTrue(iter.hasNext());\n        IntDoubleEntry entry = iter.next();\n        assertEquals(0, entry.getIndex());\n        assertEquals(1.0, entry.getValue(), 0.0);\n        assertTrue(iter.hasNext());\n        entry = iter.next();\n        assertEquals(2, entry.getIndex());\n        assertEquals(2.0, entry.getValue(), 0.0);\n        assertFalse(iter.hasNext());\n    }\n}"
  },
  {
    "original_path": "mgormley_prim###mgormley_prim/src/test/java_generated/edu/jhu/prim/map/IntFloatHashMapTest###testEquals",
    "generated_path": "IntFloatHashMapTest_testEquals.java",
    "Compile_result": 1,
    "Test_result": 1,
    "Gen_Test": "package edu.jhu.prim.map;\nimport static edu.jhu.prim.Primitives.toFloat;\nimport static edu.jhu.prim.Primitives.toInt;\nimport static edu.jhu.prim.Primitives.toInt;\nimport static org.junit.Assert.*;\nimport java.util.Iterator;\nimport org.junit.Test;\nimport edu.jhu.prim.Primitives;\n// original test path: mgormley_prim###mgormley_prim/src/test/java_generated/edu/jhu/prim/map/IntFloatHashMapTest###testEquals\npublic class IntFloatHashMapTest_testEquals {\n    @Test\n    public void testEquals() {\n        IntFloatHashMap map1 = new IntFloatHashMap();\n        map1.put(1, 1.0f);\n        map1.put(2, 2.0f);\n        map1.put(3, 3.0f);\n        IntFloatHashMap map2 = new IntFloatHashMap();\n        map2.put(1, 1.0f);\n        map2.put(2, 2.0f);\n        map2.put(3, 3.0f);\n        IntFloatHashMap map3 = new IntFloatHashMap();\n        map3.put(1, 1.0f);\n        map3.put(2, 2.0f);\n        IntFloatHashMap map4 = new IntFloatHashMap();\n        map4.put(1, 1.0f);\n        map4.put(2, 2.0f);\n        map4.put(3, 4.0f);\n        assertTrue(map1.equals(map2));\n        assertFalse(map1.equals(map3));\n        assertFalse(map1.equals(map4));\n    }\n}"
  },
  {
    "original_path": "mgormley_prim###mgormley_prim/src/test/java_generated/edu/jhu/prim/map/IntFloatHashMapTest###testHashCode",
    "generated_path": "IntFloatHashMapTest_testHashCode.java",
    "Compile_result": 1,
    "Test_result": 1,
    "Gen_Test": "package edu.jhu.prim.map;\nimport static edu.jhu.prim.Primitives.toFloat;\nimport static edu.jhu.prim.Primitives.toInt;\nimport static edu.jhu.prim.Primitives.toInt;\nimport static org.junit.Assert.*;\nimport java.util.Iterator;\nimport org.junit.Test;\nimport edu.jhu.prim.Primitives;\n// original test path: mgormley_prim###mgormley_prim/src/test/java_generated/edu/jhu/prim/map/IntFloatHashMapTest###testHashCode\nimport org.junit.Assert;\nimport org.junit.Test;\npublic class IntFloatHashMapTest_testHashCode {\n    @Test\n    public void testHashCode() {\n        IntFloatHashMap map1 = new IntFloatHashMap();\n        map1.put(1, 1.0f);\n        map1.put(2, 2.0f);\n        map1.put(3, 3.0f);\n        IntFloatHashMap map2 = new IntFloatHashMap();\n        map2.put(3, 3.0f);\n        map2.put(2, 2.0f);\n        map2.put(1, 1.0f);\n        Assert.assertEquals(map1.hashCode(), map2.hashCode());\n    }\n}"
  },
  {
    "original_path": "mgormley_prim###mgormley_prim/src/test/java_generated/edu/jhu/prim/map/IntFloatSortedMapTest###testRemove",
    "generated_path": "IntFloatSortedMapTest_testRemove.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package edu.jhu.prim.map;\nimport static edu.jhu.prim.Primitives.toFloat;\nimport static edu.jhu.prim.Primitives.toInt;\nimport static org.junit.Assert.assertEquals;\nimport java.util.Iterator;\nimport org.junit.Test;\n// original test path: mgormley_prim###mgormley_prim/src/test/java_generated/edu/jhu/prim/map/IntFloatSortedMapTest###testRemove\npublic class IntFloatSortedMapTest_testRemove {\n    @Test(expected = IllegalArgumentException.class)\n    public void testRemoveNonExistingKey() {\n        IntFloatSortedMap map = new IntFloatSortedMap(new int[]{1, 3, 5}, new float[]{1.0f, 3.0f, 5.0f});\n        map.remove(2);\n    }\n    @Test\n    public void testRemoveExistingKey() {\n        IntFloatSortedMap map = new IntFloatSortedMap(new int[]{1, 3, 5}, new float[]{1.0f, 3.0f, 5.0f});\n        map.remove(3);\n        assertEquals(2, map.size());\n        Iterator<Integer> iter = map.keySet().iterator();\n        assertEquals(1, (int) iter.next());\n        assertEquals(5, (int) iter.next());\n    }\n}"
  },
  {
    "original_path": "mgormley_prim###mgormley_prim/src/test/java_generated/edu/jhu/prim/vector/IntFloatSortedVectorTest###testGetWithNoZeroValues",
    "generated_path": "IntFloatSortedVectorTest_testGetWithNoZeroValues.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package edu.jhu.prim.vector;\nimport static edu.jhu.prim.Primitives.toFloat;\nimport static edu.jhu.prim.Primitives.toInt;\nimport static org.junit.Assert.*;\nimport java.util.Iterator;\nimport org.junit.Test;\nimport edu.jhu.prim.Primitives;\nimport edu.jhu.prim.map.IntFloatEntry;\n// original test path: mgormley_prim###mgormley_prim/src/test/java_generated/edu/jhu/prim/vector/IntFloatSortedVectorTest###testGetWithNoZeroValues\nimport org.junit.Before;\nimport org.junit.Test;\npublic class IntFloatSortedVectorTest_testGetWithNoZeroValues {\n    private IntFloatSortedVector vector;\n    @Before\n    public void setUp() {\n        vector = new IntFloatSortedVector();\n        vector.set(0, 0.0f);\n        vector.set(1, 1.0f);\n        vector.set(2, 0.5f);\n        vector.set(3, 0.0f);\n        vector.set(4, 2.0f);\n    }\n    @Test\n    public void testGetWithNoZeroValues() {\n        float zeroThreshold = 0.1f;\n        IntFloatSortedVector result = IntFloatSortedVector.getWithNoZeroValues(vector, zeroThreshold);\n        assertEquals(3, result.getUsed());\n        Iterator<IntFloatEntry> iter = result.iterator();\n        while (iter.hasNext()) {\n            IntFloatEntry entry = iter.next();\n            assertFalse(Primitives.isZero(entry.getValue(), zeroThreshold));\n        }\n    }\n}"
  },
  {
    "original_path": "mgormley_prim###mgormley_prim/src/test/java_generated/edu/jhu/prim/map/IntIntHashMapTest###testEquals",
    "generated_path": "IntIntHashMapTest_testEquals.java",
    "Compile_result": 1,
    "Test_result": 1,
    "Gen_Test": "package edu.jhu.prim.map;\nimport static edu.jhu.prim.Primitives.toInt;\nimport static edu.jhu.prim.Primitives.toInt;\nimport static edu.jhu.prim.Primitives.toInt;\nimport static org.junit.Assert.*;\nimport java.util.Iterator;\nimport org.junit.Test;\nimport edu.jhu.prim.Primitives;\n// original test path: mgormley_prim###mgormley_prim/src/test/java_generated/edu/jhu/prim/map/IntIntHashMapTest###testEquals\npublic class IntIntHashMapTest_testEquals {\n    @Test\n    public void testEquals() {\n        IntIntHashMap map1 = new IntIntHashMap();\n        IntIntHashMap map2 = new IntIntHashMap();\n        // Test when both maps are empty\n        assertTrue(map1.equals(map2));\n        // Test when one map is empty and the other is not\n        map1.put(1, 2);\n        assertFalse(map1.equals(map2));\n        // Test when both maps have the same key-value pairs\n        map2.put(1, 2);\n        assertTrue(map1.equals(map2));\n        // Test when both maps have different key-value pairs\n        map1.put(3, 4);\n        assertFalse(map1.equals(map2));\n    }\n}"
  },
  {
    "original_path": "mgormley_prim###mgormley_prim/src/test/java_generated/edu/jhu/prim/map/IntIntHashMapTest###testHashCode",
    "generated_path": "IntIntHashMapTest_testHashCode.java",
    "Compile_result": 1,
    "Test_result": 1,
    "Gen_Test": "package edu.jhu.prim.map;\nimport static edu.jhu.prim.Primitives.toInt;\nimport static edu.jhu.prim.Primitives.toInt;\nimport static edu.jhu.prim.Primitives.toInt;\nimport static org.junit.Assert.*;\nimport java.util.Iterator;\nimport org.junit.Test;\nimport edu.jhu.prim.Primitives;\n// original test path: mgormley_prim###mgormley_prim/src/test/java_generated/edu/jhu/prim/map/IntIntHashMapTest###testHashCode\nimport org.junit.Assert;\nimport org.junit.Test;\npublic class IntIntHashMapTest_testHashCode {\n    @Test\n    public void testHashCode() {\n        IntIntHashMap map1 = new IntIntHashMap();\n        map1.put(1, 2);\n        map1.put(3, 4);\n        map1.put(5, 6);\n        IntIntHashMap map2 = new IntIntHashMap();\n        map2.put(5, 6);\n        map2.put(1, 2);\n        map2.put(3, 4);\n        Assert.assertEquals(map1.hashCode(), map2.hashCode());\n    }\n}"
  },
  {
    "original_path": "mgormley_prim###mgormley_prim/src/test/java_generated/edu/jhu/prim/map/IntIntSortedMapTest###testRemove",
    "generated_path": "IntIntSortedMapTest_testRemove.java",
    "Compile_result": 1,
    "Test_result": 1,
    "Gen_Test": "package edu.jhu.prim.map;\nimport static edu.jhu.prim.Primitives.toInt;\nimport static edu.jhu.prim.Primitives.toInt;\nimport static org.junit.Assert.assertEquals;\nimport java.util.Iterator;\nimport org.junit.Test;\n// original test path: mgormley_prim###mgormley_prim/src/test/java_generated/edu/jhu/prim/map/IntIntSortedMapTest###testRemove\npublic class IntIntSortedMapTest_testRemove {\n    @Test(expected = IllegalArgumentException.class)\n    public void testRemoveNonExistingKey() {\n        IntIntSortedMap map = new IntIntSortedMap(new int[]{1, 3, 5}, new int[]{2, 4, 6});\n        map.remove(2);\n    }\n    @Test\n    public void testRemoveExistingKey() {\n        IntIntSortedMap map = new IntIntSortedMap(new int[]{1, 3, 5}, new int[]{2, 4, 6});\n        map.remove(3);\n        assertEquals(2, map.size());\n        assertEquals(1, map.getIndices()[0]);\n        assertEquals(5, map.getIndices()[1]);\n        assertEquals(2, map.getValues()[0]);\n        assertEquals(6, map.getValues()[1]);\n    }\n}"
  },
  {
    "original_path": "mgormley_prim###mgormley_prim/src/test/java_generated/edu/jhu/prim/vector/IntIntSortedVectorTest###testGetWithNoZeroValues",
    "generated_path": "IntIntSortedVectorTest_testGetWithNoZeroValues.java",
    "Compile_result": 1,
    "Test_result": 1,
    "Gen_Test": "package edu.jhu.prim.vector;\nimport static edu.jhu.prim.Primitives.toInt;\nimport static edu.jhu.prim.Primitives.toInt;\nimport static org.junit.Assert.*;\nimport java.util.Iterator;\nimport org.junit.Test;\nimport edu.jhu.prim.Primitives;\nimport edu.jhu.prim.map.IntIntEntry;\n// original test path: mgormley_prim###mgormley_prim/src/test/java_generated/edu/jhu/prim/vector/IntIntSortedVectorTest###testGetWithNoZeroValues\nimport org.junit.Assert;\nimport org.junit.Test;\npublic class IntIntSortedVectorTest_testGetWithNoZeroValues {\n    @Test\n    public void testGetWithNoZeroValues() {\n        IntIntSortedVector row = new IntIntSortedVector();\n        row.set(0, 0);\n        row.set(1, 1);\n        row.set(2, 0);\n        row.set(3, 2);\n        row.set(4, 0);\n        row.set(5, 3);\n        row.set(6, 0);\n        row.set(7, 0);\n        row.set(8, 4);\n        row.set(9, 0);\n        IntIntSortedVector result = IntIntSortedVector.getWithNoZeroValues(row);\n        Assert.assertEquals(4, result.getUsed());\n        Assert.assertEquals(1, result.get(0));\n        Assert.assertEquals(2, result.get(1));\n        Assert.assertEquals(3, result.get(2));\n        Assert.assertEquals(4, result.get(3));\n    }\n}"
  },
  {
    "original_path": "mgormley_prim###mgormley_prim/src/test/java_generated/edu/jhu/prim/map/IntLongHashMapTest###testEquals",
    "generated_path": "IntLongHashMapTest_testEquals.java",
    "Compile_result": 1,
    "Test_result": 1,
    "Gen_Test": "package edu.jhu.prim.map;\nimport static edu.jhu.prim.Primitives.toLong;\nimport static edu.jhu.prim.Primitives.toInt;\nimport static edu.jhu.prim.Primitives.toInt;\nimport static org.junit.Assert.*;\nimport java.util.Iterator;\nimport org.junit.Test;\nimport edu.jhu.prim.Primitives;\n// original test path: mgormley_prim###mgormley_prim/src/test/java_generated/edu/jhu/prim/map/IntLongHashMapTest###testEquals\npublic class IntLongHashMapTest_testEquals {\n    @Test\n    public void testEquals() {\n        IntLongHashMap map1 = new IntLongHashMap();\n        map1.put(1, 10);\n        map1.put(2, 20);\n        map1.put(3, 30);\n        IntLongHashMap map2 = new IntLongHashMap();\n        map2.put(1, 10);\n        map2.put(2, 20);\n        map2.put(3, 30);\n        IntLongHashMap map3 = new IntLongHashMap();\n        map3.put(1, 10);\n        map3.put(2, 20);\n        map3.put(4, 40);\n        IntLongHashMap map4 = new IntLongHashMap();\n        map4.put(1, 10);\n        map4.put(2, 20);\n        assertTrue(map1.equals(map2));\n        assertFalse(map1.equals(map3));\n        assertFalse(map1.equals(map4));\n    }\n}"
  },
  {
    "original_path": "mgormley_prim###mgormley_prim/src/test/java_generated/edu/jhu/prim/map/IntLongHashMapTest###testHashCode",
    "generated_path": "IntLongHashMapTest_testHashCode.java",
    "Compile_result": 1,
    "Test_result": 1,
    "Gen_Test": "package edu.jhu.prim.map;\nimport static edu.jhu.prim.Primitives.toLong;\nimport static edu.jhu.prim.Primitives.toInt;\nimport static edu.jhu.prim.Primitives.toInt;\nimport static org.junit.Assert.*;\nimport java.util.Iterator;\nimport org.junit.Test;\nimport edu.jhu.prim.Primitives;\n// original test path: mgormley_prim###mgormley_prim/src/test/java_generated/edu/jhu/prim/map/IntLongHashMapTest###testHashCode\nimport org.junit.Assert;\nimport org.junit.Test;\npublic class IntLongHashMapTest_testHashCode {\n    @Test\n    public void testHashCode() {\n        IntLongHashMap map1 = new IntLongHashMap();\n        map1.put(1, 10);\n        map1.put(2, 20);\n        map1.put(3, 30);\n        IntLongHashMap map2 = new IntLongHashMap();\n        map2.put(3, 30);\n        map2.put(2, 20);\n        map2.put(1, 10);\n        Assert.assertEquals(map1.hashCode(), map2.hashCode());\n    }\n}"
  },
  {
    "original_path": "mgormley_prim###mgormley_prim/src/test/java_generated/edu/jhu/prim/map/IntLongSortedMapTest###testRemove",
    "generated_path": "IntLongSortedMapTest_testRemove.java",
    "Compile_result": 1,
    "Test_result": 1,
    "Gen_Test": "package edu.jhu.prim.map;\nimport static edu.jhu.prim.Primitives.toLong;\nimport static edu.jhu.prim.Primitives.toInt;\nimport static org.junit.Assert.assertEquals;\nimport java.util.Iterator;\nimport org.junit.Test;\n// original test path: mgormley_prim###mgormley_prim/src/test/java_generated/edu/jhu/prim/map/IntLongSortedMapTest###testRemove\npublic class IntLongSortedMapTest_testRemove {\n    @Test\n    public void testRemove() {\n        IntLongSortedMap map = new IntLongSortedMap(new int[]{1, 2, 3, 4}, new long[]{10, 20, 30, 40});\n        map.remove(2);\n        assertEquals(3, map.size());\n        assertEquals(10, map.get(1));\n        assertEquals(30, map.get(3));\n        assertEquals(40, map.get(4));\n        try {\n            map.remove(2);\n        } catch (IllegalArgumentException e) {\n            assertEquals(\"This map does not contain the key: 2\", e.getMessage());\n        }\n    }\n}"
  },
  {
    "original_path": "mgormley_prim###mgormley_prim/src/test/java_generated/edu/jhu/prim/vector/IntLongSortedVectorTest###testGetWithNoZeroValues",
    "generated_path": "IntLongSortedVectorTest_testGetWithNoZeroValues.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package edu.jhu.prim.vector;\nimport static edu.jhu.prim.Primitives.toLong;\nimport static edu.jhu.prim.Primitives.toInt;\nimport static org.junit.Assert.*;\nimport java.util.Iterator;\nimport org.junit.Test;\nimport edu.jhu.prim.Primitives;\nimport edu.jhu.prim.map.IntLongEntry;\n// original test path: mgormley_prim###mgormley_prim/src/test/java_generated/edu/jhu/prim/vector/IntLongSortedVectorTest###testGetWithNoZeroValues\nimport org.junit.Before;\nimport org.junit.Test;\npublic class IntLongSortedVectorTest_testGetWithNoZeroValues {\n    private IntLongSortedVector vector;\n    @Before\n    public void setUp() {\n        vector = new IntLongSortedVector();\n        vector.set(0, 0);\n        vector.set(1, 1);\n        vector.set(2, 0);\n        vector.set(3, 2);\n        vector.set(4, 0);\n        vector.set(5, 3);\n    }\n    @Test\n    public void testGetWithNoZeroValues() {\n        IntLongSortedVector result = IntLongSortedVector.getWithNoZeroValues(vector);\n        assertEquals(3, result.getUsed());\n        Iterator<IntLongEntry> iter = result.getEntryIterator();\n        while (iter.hasNext()) {\n            IntLongEntry entry = iter.next();\n            assertFalse(Primitives.isZero(toLong(entry.getValue())));\n        }\n    }\n}"
  },
  {
    "original_path": "mgormley_prim###mgormley_prim/src/test/java/edu/jhu/prim/map/IntObjectHashMapTest###testKeys",
    "generated_path": "IntObjectHashMapTest_testKeys.java",
    "Compile_result": 1,
    "Test_result": 1,
    "Gen_Test": "package edu.jhu.prim.map;\nimport static org.junit.Assert.assertEquals;\nimport org.junit.Test;\nimport edu.jhu.prim.util.IntJUnitUtils;\n// original test path: mgormley_prim###mgormley_prim/src/test/java/edu/jhu/prim/map/IntObjectHashMapTest###testKeys\npublic class IntObjectHashMapTest_testKeys {\n    @Test\n    public void testKeys() {\n        IntObjectHashMap map = new IntObjectHashMap();\n        map.put(1, \"one\");\n        map.put(2, \"two\");\n        map.put(3, \"three\");\n        int[] expectedKeys = {1, 2, 3};\n        int[] actualKeys = map.keys();\n        assertEquals(expectedKeys.length, actualKeys.length);\n        IntJUnitUtils.assertArrayEquals(expectedKeys, actualKeys);\n    }\n}"
  },
  {
    "original_path": "XDean_Java-EX###XDean_Java-EX/src/test/java/cn/xdean/jex/lang/collection/sequence/IntSequenceTest###testRelease",
    "generated_path": "IntSequenceTest_testRelease.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package cn.xdean.jex.lang.collection.sequence;\nimport io.reactivex.Flowable;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\n// original test path: XDean_Java-EX###XDean_Java-EX/src/test/java/cn/xdean/jex/lang/collection/sequence/IntSequenceTest###testRelease\npublic class IntSequenceTest_testRelease {\n    @Test\n    public void testRelease() {\n        IntSequence sequence = new IntSequence(0, 2);\n        assertTrue(sequence.release(0));\n        assertFalse(sequence.release(1));\n        assertTrue(sequence.release(2));\n        assertFalse(sequence.release(3));\n        assertTrue(sequence.release(4));\n        assertFalse(sequence.release(5));\n        assertTrue(sequence.release(6));\n        assertFalse(sequence.release(7));\n        assertTrue(sequence.release(8));\n    }\n}"
  },
  {
    "original_path": "l0s_fernet-java8###l0s_fernet-java8/fernet-java8/src/test/java/com/macasaet/fernet/KeyTest###testGenerateKey",
    "generated_path": "KeyTest_testGenerateKey.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package com.macasaet.fernet;\nimport static com.macasaet.fernet.Constants.encoder;\nimport static com.macasaet.fernet.Constants.encryptionKeyBytes;\nimport static com.macasaet.fernet.Constants.signingKeyBytes;\nimport static nl.jqno.equalsverifier.Warning.ALL_FIELDS_SHOULD_BE_USED;\nimport static nl.jqno.equalsverifier.Warning.STRICT_INHERITANCE;\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.fail;\nimport static org.mutabilitydetector.unittesting.AllowedReason.allowingForSubclassing;\nimport static org.mutabilitydetector.unittesting.AllowedReason.assumingFields;\nimport static org.mutabilitydetector.unittesting.MutabilityAssert.assertInstancesOf;\nimport static org.mutabilitydetector.unittesting.MutabilityMatchers.areImmutable;\nimport java.security.SecureRandom;\nimport java.time.Instant;\nimport javax.crypto.spec.IvParameterSpec;\nimport javax.crypto.spec.SecretKeySpec;\nimport org.junit.Test;\nimport nl.jqno.equalsverifier.EqualsVerifier;\nimport nl.jqno.equalsverifier.api.SingleTypeEqualsVerifierApi;\n// original test path: l0s_fernet-java8###l0s_fernet-java8/fernet-java8/src/test/java/com/macasaet/fernet/KeyTest###testGenerateKey\nimport org.junit.Test;\nimport java.security.SecureRandom;\nimport static org.junit.Assert.*;\npublic class KeyTest_testGenerateKey {\n    @Test\n    public void testGenerateKey() {\n        SecureRandom random = new SecureRandom();\n        Key key = Key.generateKey(random);\n        assertNotNull(key);\n        assertNotNull(key.signingKey);\n        assertNotNull(key.encryptionKey);\n        assertEquals(16, key.signingKey.length);\n        assertEquals(16, key.encryptionKey.length);\n    }\n}"
  },
  {
    "original_path": "lazee_meteo###lazee_meteo/meteo-core/src/test/java/no/api/meteo/entity/core/LocationTest###testFromCoordinates",
    "generated_path": "LocationTest_testFromCoordinates.java",
    "Compile_result": 1,
    "Test_result": 1,
    "Gen_Test": "package no.api.meteo.entity.core;\nimport org.junit.Assert;\nimport org.junit.Test;\n// original test path: lazee_meteo###lazee_meteo/meteo-core/src/test/java/no/api/meteo/entity/core/LocationTest###testFromCoordinates\npublic class LocationTest_testFromCoordinates {\n    @Test(expected = IllegalArgumentException.class)\n    public void testFromCoordinatesWithNullInput() {\n        Location.fromCoordinates(null);\n    }\n    @Test(expected = IllegalArgumentException.class)\n    public void testFromCoordinatesWithInvalidInput() {\n        Location.fromCoordinates(\"invalid input\");\n    }\n    @Test\n    public void testFromCoordinatesWithValidInput() {\n        Location location = Location.fromCoordinates(\"12.345,67.890,1000\");\n        Assert.assertEquals(12.345, location.getLongitude(), 0.001);\n        Assert.assertEquals(67.890, location.getLatitude(), 0.001);\n        Assert.assertEquals(1000, location.getAltitude().intValue());\n    }\n}"
  },
  {
    "original_path": "mgormley_prim###mgormley_prim/src/test/java/edu/jhu/prim/list/LongArrayListTest###testUniq",
    "generated_path": "LongArrayListTest_testUniq.java",
    "Compile_result": 1,
    "Test_result": 1,
    "Gen_Test": "package edu.jhu.prim.list;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.fail;\nimport org.junit.Test;\n// original test path: mgormley_prim###mgormley_prim/src/test/java/edu/jhu/prim/list/LongArrayListTest###testUniq\npublic class LongArrayListTest_testUniq {\n    @Test\n    public void testUniq() {\n        LongArrayList list = new LongArrayList(new long[]{1, 2, 2, 3, 3, 3, 4, 4, 4, 4});\n        list.uniq();\n        assertEquals(4, list.size);\n        assertEquals(1, list.elements[0]);\n        assertEquals(2, list.elements[1]);\n        assertEquals(3, list.elements[2]);\n        assertEquals(4, list.elements[3]);\n        LongArrayList emptyList = new LongArrayList();\n        emptyList.uniq();\n        assertEquals(0, emptyList.size);\n        LongArrayList singleItemList = new LongArrayList(new long[]{1});\n        singleItemList.uniq();\n        assertEquals(1, singleItemList.size);\n        assertEquals(1, singleItemList.elements[0]);\n    }\n}"
  },
  {
    "original_path": "mgormley_prim###mgormley_prim/src/test/java/edu/jhu/prim/map/LongDoubleHashMapTest###testEquals",
    "generated_path": "LongDoubleHashMapTest_testEquals.java",
    "Compile_result": 1,
    "Test_result": 1,
    "Gen_Test": "package edu.jhu.prim.map;\nimport static edu.jhu.prim.Primitives.toDouble;\nimport static edu.jhu.prim.Primitives.toInt;\nimport static edu.jhu.prim.Primitives.toLong;\nimport static org.junit.Assert.*;\nimport java.util.Iterator;\nimport org.junit.Test;\nimport edu.jhu.prim.Primitives;\n// original test path: mgormley_prim###mgormley_prim/src/test/java/edu/jhu/prim/map/LongDoubleHashMapTest###testEquals\npublic class LongDoubleHashMapTest_testEquals {\n    @Test\n    public void testEquals() {\n        LongDoubleHashMap map1 = new LongDoubleHashMap();\n        LongDoubleHashMap map2 = new LongDoubleHashMap();\n        // Test when both maps are empty\n        assertTrue(map1.equals(map2));\n        // Test when one map is empty and the other is not\n        map1.put(1L, 2.0);\n        assertFalse(map1.equals(map2));\n        // Test when both maps have the same key-value pairs\n        map2.put(1L, 2.0);\n        assertTrue(map1.equals(map2));\n        // Test when both maps have different key-value pairs\n        map1.put(2L, 3.0);\n        assertFalse(map1.equals(map2));\n    }\n}"
  },
  {
    "original_path": "mgormley_prim###mgormley_prim/src/test/java/edu/jhu/prim/map/LongDoubleHashMapTest###testHashCode",
    "generated_path": "LongDoubleHashMapTest_testHashCode.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package edu.jhu.prim.map;\nimport static edu.jhu.prim.Primitives.toDouble;\nimport static edu.jhu.prim.Primitives.toInt;\nimport static edu.jhu.prim.Primitives.toLong;\nimport static org.junit.Assert.*;\nimport java.util.Iterator;\nimport org.junit.Test;\nimport edu.jhu.prim.Primitives;\n// original test path: mgormley_prim###mgormley_prim/src/test/java/edu/jhu/prim/map/LongDoubleHashMapTest###testHashCode\nimport org.junit.Before;\nimport org.junit.Test;\npublic class LongDoubleHashMapTest_testHashCode {\n    private LongDoubleHashMap map;\n    @Before\n    public void setUp() {\n        map = new LongDoubleHashMap();\n        map.put(1L, 1.0);\n        map.put(2L, 2.0);\n        map.put(3L, 3.0);\n    }\n    @Test\n    public void testHashCode() {\n        int expectedHashCode = 0;\n        long[] indices = map.getIndices();\n        double[] values = map.getValues();\n        LongDoubleSort.sortIndexAsc(indices, values);\n        for (int i = 0; i < indices.length; i++) {\n            int result = 17;\n            result = 37 * result + Primitives.hashOfLong(indices[i]);\n            result = 37 * result + Primitives.hashOfDouble(values[i]);\n            expectedHashCode += result;\n        }\n        assertEquals(expectedHashCode, map.hashCode());\n    }\n}"
  },
  {
    "original_path": "mgormley_prim###mgormley_prim/src/test/java/edu/jhu/prim/map/LongDoubleSortedMapTest###testRemove",
    "generated_path": "LongDoubleSortedMapTest_testRemove.java",
    "Compile_result": 1,
    "Test_result": 1,
    "Gen_Test": "package edu.jhu.prim.map;\nimport static edu.jhu.prim.Primitives.toDouble;\nimport static edu.jhu.prim.Primitives.toInt;\nimport static org.junit.Assert.assertEquals;\nimport java.util.Iterator;\nimport org.junit.Test;\n// original test path: mgormley_prim###mgormley_prim/src/test/java/edu/jhu/prim/map/LongDoubleSortedMapTest###testRemove\npublic class LongDoubleSortedMapTest_testRemove {\n    @Test\n    public void testRemove() {\n        LongDoubleSortedMap map = new LongDoubleSortedMap();\n        map.put(1L, 1.0);\n        map.put(2L, 2.0);\n        map.put(3L, 3.0);\n        map.put(4L, 4.0);\n        map.put(5L, 5.0);\n        map.remove(3L);\n        assertEquals(4, map.size());\n        assertEquals(1.0, map.get(1L), 0.0);\n        assertEquals(2.0, map.get(2L), 0.0);\n        assertEquals(4.0, map.get(4L), 0.0);\n        assertEquals(5.0, map.get(5L), 0.0);\n        map.remove(1L);\n        assertEquals(3, map.size());\n        assertEquals(2.0, map.get(2L), 0.0);\n        assertEquals(4.0, map.get(4L), 0.0);\n        assertEquals(5.0, map.get(5L), 0.0);\n        map.remove(5L);\n        assertEquals(2, map.size());\n        assertEquals(2.0, map.get(2L), 0.0);\n        assertEquals(4.0, map.get(4L), 0.0);\n        map.remove(2L);\n        assertEquals(1, map.size());\n        assertEquals(4.0, map.get(4L), 0.0);\n        map.remove(4L);\n        assertEquals(0, map.size());\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/mutable/MutableByteTest###testGetAndDecrement",
    "generated_path": "MutableByteTest_testGetAndDecrement.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3.mutable;\nimport org.junit.Test;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertTrue;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/mutable/MutableByteTest###testGetAndDecrement\npublic class MutableByteTest_testGetAndDecrement {\n    @Test\n    public void testGetAndDecrement() {\n        MutableByte mutableByte = new MutableByte((byte) 5);\n        byte result = mutableByte.getAndDecrement();\n        assertEquals(5, result);\n        assertEquals(4, mutableByte.value);\n    }\n    @Test\n    public void testGetAndDecrementNegativeValue() {\n        MutableByte mutableByte = new MutableByte((byte) -1);\n        byte result = mutableByte.getAndDecrement();\n        assertEquals(-1, result);\n        assertEquals(-2, mutableByte.value);\n    }\n    @Test\n    public void testGetAndDecrementZeroValue() {\n        MutableByte mutableByte = new MutableByte((byte) 0);\n        byte result = mutableByte.getAndDecrement();\n        assertEquals(0, result);\n        assertEquals(-1, mutableByte.value);\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/mutable/MutableIntTest###testGetAndDecrement",
    "generated_path": "MutableIntTest_testGetAndDecrement.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3.mutable;\nimport org.junit.Test;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertTrue;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/mutable/MutableIntTest###testGetAndDecrement\npublic class MutableIntTest_testGetAndDecrement {\n    @Test\n    public void testGetAndDecrement() {\n        MutableInt mutableInt = new MutableInt(5);\n        int result = mutableInt.getAndDecrement();\n        assertEquals(5, result);\n        assertEquals(4, mutableInt.value);\n    }\n    @Test\n    public void testGetAndDecrementWithZero() {\n        MutableInt mutableInt = new MutableInt(0);\n        int result = mutableInt.getAndDecrement();\n        assertEquals(0, result);\n        assertEquals(-1, mutableInt.value);\n    }\n    @Test\n    public void testGetAndDecrementWithNegativeValue() {\n        MutableInt mutableInt = new MutableInt(-5);\n        int result = mutableInt.getAndDecrement();\n        assertEquals(-5, result);\n        assertEquals(-6, mutableInt.value);\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest###testCreateBigInteger",
    "generated_path": "NumberUtilsTest_testCreateBigInteger.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3.math;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert.assertTrue;\nimport static org.junit.Assert.fail;\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.Modifier;\nimport java.math.BigDecimal;\nimport java.math.BigInteger;\nimport org.apache.commons.lang3.SystemUtils;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest###testCreateBigInteger\nimport org.junit.Test;\nimport java.math.BigInteger;\npublic class NumberUtilsTest_testCreateBigInteger {\n    @Test\n    public void testCreateBigInteger() {\n        // Test null input\n        BigInteger result = NumberUtils.createBigInteger(null);\n        assertNull(result);\n        // Test decimal input\n        result = NumberUtils.createBigInteger(\"123456789\");\n        assertEquals(new BigInteger(\"123456789\"), result);\n        // Test hexadecimal input\n        result = NumberUtils.createBigInteger(\"0x1A\");\n        assertEquals(new BigInteger(\"26\"), result);\n        // Test negative input\n        result = NumberUtils.createBigInteger(\"-123456789\");\n        assertEquals(new BigInteger(\"-123456789\"), result);\n        // Test invalid input\n        try {\n            result = NumberUtils.createBigInteger(\"abc\");\n            fail(\"Expected NumberFormatException to be thrown\");\n        } catch (NumberFormatException e) {\n            assertNotNull(e.getMessage());\n        }\n    }\n}"
  },
  {
    "original_path": "mgormley_prim###mgormley_prim/src/test/java/edu/jhu/prim/sample/PairSamplerTest###testSampleUnorderedPairs",
    "generated_path": "PairSamplerTest_testSampleUnorderedPairs.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package edu.jhu.prim.sample;\nimport java.util.Collection;\nimport org.junit.Assert;\nimport org.junit.Test;\nimport edu.jhu.prim.tuple.OrderedPair;\nimport edu.jhu.prim.tuple.UnorderedPair;\n// original test path: mgormley_prim###mgormley_prim/src/test/java/edu/jhu/prim/sample/PairSamplerTest###testSampleUnorderedPairs\nimport java.util.Collection;\nimport java.util.HashSet;\nimport org.junit.Assert;\nimport org.junit.Test;\nimport edu.jhu.prim.tuple.UnorderedPair;\npublic class PairSamplerTest_testSampleUnorderedPairs {\n    @Test\n    public void testSampleUnorderedPairs() {\n        int minI = 1;\n        int maxI = 5;\n        int minJ = 2;\n        int maxJ = 6;\n        double prop = 0.5;\n        Collection<UnorderedPair> samples = PairSampler.sampleUnorderedPairs(minI, maxI, minJ, maxJ, prop);\n        // Check that all pairs are within the given range\n        for (UnorderedPair pair : samples) {\n            int i = pair.getFirst();\n            int j = pair.getSecond();\n            Assert.assertTrue(i >= minI && i < maxI);\n            Assert.assertTrue(j >= minJ && j < maxJ);\n        }\n        // Check that the number of samples is approximately correct\n        long expectedNumSamples = Math.round(PairSampler.countUnorderedPairs(minI, maxI, minJ, maxJ) * prop);\n        Assert.assertEquals(expectedNumSamples, samples.size());\n        // Check that all pairs are unique\n        HashSet<UnorderedPair> uniquePairs = new HashSet<UnorderedPair>(samples);\n        Assert.assertEquals(samples.size(), uniquePairs.size());\n    }\n}"
  },
  {
    "original_path": "pvanassen_ns-api###pvanassen_ns-api/src/test/java/nl/pvanassen/ns/model/prijzen/PrijsHandleTest###testGetModel",
    "generated_path": "PrijsHandleTest_testGetModel.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package nl.pvanassen.ns.model.prijzen;\nimport org.junit.Test;\nimport java.math.BigDecimal;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertNotNull;\n// original test path: pvanassen_ns-api###pvanassen_ns-api/src/test/java/nl/pvanassen/ns/model/prijzen/PrijsHandleTest###testGetModel\npublic class PrijsHandleTest_testGetModel {\n    @Test\n    public void testGetModel() {\n        // Create an input stream with test data\n        InputStream stream = new ByteArrayInputStream(\"<VervoerderKeuzes><VervoerderKeuze naam=\\\"NS\\\"><Tariefeenheden>2</Tariefeenheden><ReisType name=\\\"Enkele reis\\\"><ReisKlasse klasse=\\\"1\\\"><Prijsdeel vervoerder=\\\"NS\\\" prijs=\\\"4.20\\\" van=\\\"Amsterdam\\\" naar=\\\"Utrecht\\\"/><Totaal>4.20</Totaal><Korting><Kortingsprijs name=\\\"Korting 20%\\\" prijs=\\\"3.36\\\"/></Korting></ReisKlasse></ReisType></VervoerderKeuze></VervoerderKeuzes>\".getBytes());\n        // Call the method under test\n        Prijzen prijzen = new PrijsHandle().getModel(stream);\n        // Assert that the returned object is not null\n        assertNotNull(prijzen);\n        // Assert that the expected values are returned\n        assertEquals(1, prijzen.getVervoerderKeuzes().size());\n        VervoerderKeuze vervoerderKeuze = prijzen.getVervoerderKeuzes().get(\"NS\");\n        assertNotNull(vervoerderKeuze);\n        assertEquals(\"NS\", vervoerderKeuze.getNaam());\n        assertEquals(2, vervoerderKeuze.getTariefEenheden());\n        assertEquals(1, vervoerderKeuze.getReisTypes().size());\n        ReisType reisType = vervoerderKeuze.getReisTypes().get(\"Enkele reis\");\n        assertNotNull(reisType);\n        assertEquals(\"Enkele reis\", reisType.getNaam());\n        assertEquals(1, reisType.getReisKlassen().size());\n        ReisKlasse reisKlasse = reisType.getReisKlassen().get(1);\n        assertNotNull(reisKlasse);\n        assertEquals(1, reisKlasse.getKlasse());\n        assertEquals(1, reisKlasse.getPrijsdelen().size());\n        Prijsdeel prijsdeel = reisKlasse.getPrijsdelen().get(0);\n        assertNotNull(prijsdeel);\n        assertEquals(\"NS\", prijsdeel.getVervoerder());\n        assertEquals(new BigDecimal(\"4.20\"), prijsdeel.getPrijs());\n        assertEquals(\"Amsterdam\", prijsdeel.getVan());\n        assertEquals(\"Utrecht\", prijsdeel.getNaar());\n        assertEquals(new BigDecimal(\"4.20\"), reisKlasse.getTotaal());\n        assertEquals(1, reisKlasse.getKortingprijzen().size());\n        assertEquals(new BigDecimal(\"3.36\"), reisKlasse.getKortingprijzen().get(\"Korting 20%\"));\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/RangeTest###testHashCode",
    "generated_path": "RangeTest_testHashCode.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert.assertSame;\nimport static org.junit.Assert.assertTrue;\nimport static org.junit.Assert.fail;\nimport java.util.Comparator;\nimport org.junit.Before;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/RangeTest###testHashCode\npublic class RangeTest_testHashCode {\n    private Range<Integer> range1;\n    private Range<Integer> range2;\n    @Before\n    public void setUp() {\n        range1 = new Range<>(1, 5, null);\n        range2 = new Range<>(1, 5, null);\n    }\n    @Test\n    public void testHashCode() {\n        int expectedHashCode = 17;\n        expectedHashCode = 37 * expectedHashCode + range1.getClass().hashCode();\n        expectedHashCode = 37 * expectedHashCode + range1.getMinimum().hashCode();\n        expectedHashCode = 37 * expectedHashCode + range1.getMaximum().hashCode();\n        assertEquals(expectedHashCode, range1.hashCode());\n        assertEquals(expectedHashCode, range2.hashCode());\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/SerializationUtilsTest###testClone",
    "generated_path": "SerializationUtilsTest_testClone.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert.assertNull;\nimport static org.junit.Assert.assertSame;\nimport static org.junit.Assert.assertTrue;\nimport static org.junit.Assert.fail;\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutputStream;\nimport java.io.OutputStream;\nimport java.io.Serializable;\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.Modifier;\nimport java.util.HashMap;\nimport org.junit.Before;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/SerializationUtilsTest###testClone\npublic class SerializationUtilsTest_testClone {\n    private static final String TEST_STRING = \"test string\";\n    private static final int TEST_INT = 123;\n    private static final HashMap<String, Integer> TEST_MAP = new HashMap<>();\n    @Before\n    public void setUp() {\n        TEST_MAP.put(\"key1\", 1);\n        TEST_MAP.put(\"key2\", 2);\n        TEST_MAP.put(\"key3\", 3);\n    }\n    @Test\n    public void testClone() {\n        // Test cloning of a string\n        String originalString = TEST_STRING;\n        String clonedString = SerializationUtils.clone(originalString);\n        assertNotNull(clonedString);\n        assertSame(originalString, clonedString);\n        // Test cloning of an integer\n        Integer originalInt = TEST_INT;\n        Integer clonedInt = SerializationUtils.clone(originalInt);\n        assertNotNull(clonedInt);\n        assertSame(originalInt, clonedInt);\n        // Test cloning of a hashmap\n        HashMap<String, Integer> originalMap = TEST_MAP;\n        HashMap<String, Integer> clonedMap = SerializationUtils.clone(originalMap);\n        assertNotNull(clonedMap);\n        assertNotSame(originalMap, clonedMap);\n        assertEquals(originalMap, clonedMap);\n    }\n}"
  },
  {
    "original_path": "pvanassen_ns-api###pvanassen_ns-api/src/test/java/nl/pvanassen/ns/model/stations/StationsHandleTest###testGetModel",
    "generated_path": "StationsHandleTest_testGetModel.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package nl.pvanassen.ns.model.stations;\nimport org.junit.Test;\nimport java.util.List;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertNotEquals;\nimport static org.junit.Assert.assertNotNull;\n// original test path: pvanassen_ns-api###pvanassen_ns-api/src/test/java/nl/pvanassen/ns/model/stations/StationsHandleTest###testGetModel\nimport java.io.ByteArrayInputStream;\nimport java.io.InputStream;\nimport java.util.ArrayList;\nimport java.util.LinkedList;\npublic class StationsHandleTest_testGetModel {\n    @Test\n    public void testGetModel() {\n        String xmlString = \"<Stations>\\n\" +\n                \"    <Station>\\n\" +\n                \"        <Code>AMF</Code>\\n\" +\n                \"        <Type>knooppuntIntercitystation</Type>\\n\" +\n                \"        <Namen>\\n\" +\n                \"            <Kort>Amf</Kort>\\n\" +\n                \"            <Middel>Amersfoort</Middel>\\n\" +\n                \"            <Lang>Amersfoort</Lang>\\n\" +\n                \"        </Namen>\\n\" +\n                \"        <Land>NL</Land>\\n\" +\n                \"        <UICCode>8400058</UICCode>\\n\" +\n                \"        <Lat>52.156111</Lat>\\n\" +\n                \"        <Lon>5.387778</Lon>\\n\" +\n                \"        <Synoniemen>\\n\" +\n                \"            <Synoniem>Amersfoort Centraal</Synoniem>\\n\" +\n                \"        </Synoniemen>\\n\" +\n                \"    </Station>\\n\" +\n                \"</Stations>\";\n        InputStream stream = new ByteArrayInputStream(xmlString.getBytes());\n        StationsHandle stationsHandle = new StationsHandle();\n        Stations stations = stationsHandle.getModel(stream);\n        assertNotNull(stations);\n        List<Station> stationList = stations.getStations();\n        assertNotNull(stationList);\n        assertEquals(1, stationList.size());\n        Station station = stationList.get(0);\n        assertNotNull(station);\n        assertEquals(\"AMF\", station.getCode());\n        assertEquals(\"knooppuntIntercitystation\", station.getType());\n        assertNotNull(station.getNamen());\n        assertEquals(\"Amf\", station.getNamen().getKort());\n        assertEquals(\"Amersfoort\", station.getNamen().getMiddel());\n        assertEquals(\"Amersfoort\", station.getNamen().getLang());\n        assertEquals(\"NL\", station.getLand());\n        assertEquals(8400058, station.getUicCode());\n        assertEquals(52.156111, station.getLat(), 0.0);\n        assertEquals(5.387778, station.getLon(), 0.0);\n        assertNotNull(station.getSynoniemen());\n        List<String> synoniemen = new ArrayList<>();\n        synoniemen.add(\"Amersfoort Centraal\");\n        assertEquals(synoniemen, station.getSynoniemen());\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/text/StrBuilderTest###testSetCharAt",
    "generated_path": "StrBuilderTest_testSetCharAt.java",
    "Compile_result": 1,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3.text;\nimport org.junit.Test;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert.assertNotSame;\nimport static org.junit.Assert.assertNull;\nimport static org.junit.Assert.assertSame;\nimport static org.junit.Assert.assertTrue;\nimport static org.junit.Assert.fail;\nimport java.io.IOException;\nimport java.io.Reader;\nimport java.io.StringReader;\nimport java.io.StringWriter;\nimport java.io.Writer;\nimport java.nio.CharBuffer;\nimport java.util.Arrays;\nimport org.apache.commons.lang3.ArrayUtils;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/text/StrBuilderTest###testSetCharAt\nimport org.junit.Test;\nimport static org.junit.Assert.*;\npublic class StrBuilderTest_testSetCharAt {\n    @Test\n    public void testSetCharAt() {\n        StrBuilder strBuilder = new StrBuilder(\"Hello World\");\n        strBuilder.setCharAt(6, '-');\n        assertEquals(\"Hello-World\", strBuilder.toString());\n        strBuilder.setCharAt(0, 'h');\n        assertEquals(\"hello-World\", strBuilder.toString());\n        try {\n            strBuilder.setCharAt(-1, 'a');\n            fail(\"Expected StringIndexOutOfBoundsException to be thrown\");\n        } catch (StringIndexOutOfBoundsException e) {\n            // expected\n        }\n        try {\n            strBuilder.setCharAt(100, 'a');\n            fail(\"Expected StringIndexOutOfBoundsException to be thrown\");\n        } catch (StringIndexOutOfBoundsException e) {\n            // expected\n        }\n    }\n}"
  },
  {
    "original_path": "XDean_Java-EX###XDean_Java-EX/src/test/java/cn/xdean/jex/lang/StringUtilTest###testBalancePair",
    "generated_path": "StringUtilTest_testBalancePair.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package cn.xdean.jex.lang;\nimport io.reactivex.Flowable;\nimport org.junit.Test;\nimport org.junit.experimental.theories.Theories;\nimport org.junit.experimental.theories.Theory;\nimport org.junit.experimental.theories.suppliers.TestedOn;\nimport org.junit.runner.RunWith;\nimport java.util.stream.IntStream;\nimport static cn.xdean.jex.lang.StringUtil.*;\nimport static org.junit.Assert.assertEquals;\n// original test path: XDean_Java-EX###XDean_Java-EX/src/test/java/cn/xdean/jex/lang/StringUtilTest###testBalancePair\n@RunWith(Theories.class)\npublic class StringUtilTest_testBalancePair {\n    @Theory\n    public void balancePair_shouldReturnCorrectResult(\n            @TestedOn(ints = {0, 1, 2}) int leftIndex,\n            @TestedOn(ints = {3, 4, 5}) int rightIndex,\n            @TestedOn(strings = {\"[a[b]c]d\", \"a[b]c]d\", \"[a[b]c\", \"a[b]c\"}) String str,\n            @TestedOn(strings = {\"[\", \"(\", \"{\"}) String left,\n            @TestedOn(strings = {\"]\", \")\", \"}\"}) String right) {\n        // Given\n        int expectedFirstLeft = leftIndex == -1 ? -1 : str.indexOf(left, leftIndex);\n        int expectedRightIndex = rightIndex == -1 ? -1 : str.indexOf(right, rightIndex);\n        int[] expected = {expectedFirstLeft, expectedRightIndex};\n        // When\n        int[] actual = StringUtil.balancePair(str, left, right);\n        // Then\n        assertEquals(expected, actual);\n    }\n}"
  },
  {
    "original_path": "l0s_fernet-java8###l0s_fernet-java8/fernet-java8/src/test/java/com/macasaet/fernet/TokenTest###testGenerate",
    "generated_path": "TokenTest_testGenerate.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package com.macasaet.fernet;\nimport static com.macasaet.fernet.Constants.initializationVectorBytes;\nimport static java.util.stream.Collectors.toList;\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertThrows;\nimport static org.junit.Assert.assertTrue;\nimport static org.mutabilitydetector.unittesting.AllowedReason.allowingForSubclassing;\nimport static org.mutabilitydetector.unittesting.AllowedReason.assumingFields;\nimport static org.mutabilitydetector.unittesting.AllowedReason.provided;\nimport static org.mutabilitydetector.unittesting.MutabilityAssert.assertInstancesOf;\nimport static org.mutabilitydetector.unittesting.MutabilityMatchers.areImmutable;\nimport java.security.SecureRandom;\nimport java.time.Instant;\nimport java.time.format.DateTimeFormatter;\nimport java.util.List;\nimport java.util.stream.IntStream;\nimport javax.crypto.spec.IvParameterSpec;\nimport org.junit.Before;\nimport org.junit.Test;\n// original test path: l0s_fernet-java8###l0s_fernet-java8/fernet-java8/src/test/java/com/macasaet/fernet/TokenTest###testGenerate\nimport static org.junit.Assert.*;\nimport org.junit.Test;\nimport java.security.SecureRandom;\nimport javax.crypto.spec.IvParameterSpec;\npublic class TokenTest_testGenerate {\n    @Test\n    public void testGenerate() {\n        SecureRandom random = new SecureRandom();\n        byte[] payload = \"test payload\".getBytes();\n        Key key = new Key();\n        Token token = Token.generate(random, key, payload);\n        assertNotNull(token);\n        assertEquals(Token.supportedVersion, token.getVersion());\n        assertNotNull(token.getTimestamp());\n        assertNotNull(token.getInitializationVector());\n        assertNotNull(token.getCipherText());\n        assertNotNull(token.getHmac());\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest###testGetRawType",
    "generated_path": "TypeUtilsTest_testGetRawType.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3.reflect;\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertNull;\nimport static org.junit.Assert.assertTrue;\nimport java.io.Serializable;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.GenericArrayType;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.ParameterizedType;\nimport java.lang.reflect.Type;\nimport java.lang.reflect.TypeVariable;\nimport java.lang.reflect.WildcardType;\nimport java.net.URI;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.TreeSet;\nimport org.apache.commons.lang3.reflect.testbed.Foo;\nimport org.apache.commons.lang3.reflect.testbed.GenericParent;\nimport org.apache.commons.lang3.reflect.testbed.GenericTypeHolder;\nimport org.apache.commons.lang3.reflect.testbed.StringParameterizedChild;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest###testGetRawType\nimport static org.junit.Assert.*;\nimport java.lang.reflect.Type;\nimport java.util.HashMap;\nimport java.util.Map;\nimport org.junit.Test;\npublic class TypeUtilsTest_testGetRawType {\n    @Test\n    public void testGetRawType() {\n        // Test with a Class type\n        Class<?> rawType = TypeUtils.getRawType(String.class, null);\n        assertEquals(String.class, rawType);\n        // Test with a ParameterizedType type\n        ParameterizedType parameterizedType = new StringParameterizedChild(\"test\").getClass().getGenericSuperclass();\n        rawType = TypeUtils.getRawType(parameterizedType);\n        assertEquals(String.class, rawType);\n        // Test with a TypeVariable type\n        TypeVariable<?> typeVariable = GenericTypeHolder.class.getTypeParameters()[0];\n        rawType = TypeUtils.getRawType(typeVariable, GenericTypeHolder.class);\n        assertEquals(String.class, rawType);\n        // Test with a GenericArrayType type\n        Type genericArrayType = new String[0].getClass().getComponentType();\n        rawType = TypeUtils.getRawType(genericArrayType, null);\n        assertEquals(String.class, rawType);\n        // Test with a WildcardType type\n        WildcardType wildcardType = (WildcardType) GenericParent.class.getTypeParameters()[0].getBounds()[0];\n        rawType = TypeUtils.getRawType(wildcardType, null);\n        assertNull(rawType);\n        // Test with an unknown type\n        try {\n            Type unknownType = URI.class;\n            TypeUtils.getRawType(unknownType, null);\n            fail(\"Expected IllegalArgumentException to be thrown\");\n        } catch (IllegalArgumentException e) {\n            assertEquals(\"unknown type: \" + URI.class, e.getMessage());\n        }\n        // Test with a TypeVariable type and null assigningType\n        typeVariable = GenericTypeHolder.class.getTypeParameters()[0];\n        rawType = TypeUtils.getRawType(typeVariable, null);\n        assertNull(rawType);\n        // Test with a TypeVariable type and non-Class assigningType\n        typeVariable = GenericTypeHolder.class.getTypeParameters()[0];\n        rawType = TypeUtils.getRawType(typeVariable, new HashMap<String, String>());\n        assertNull(rawType);\n        // Test with a TypeVariable type and assigningType with no type arguments\n        typeVariable = GenericTypeHolder.class.getTypeParameters()[0];\n        rawType = TypeUtils.getRawType(typeVariable, Foo.class);\n        assertNull(rawType);\n        // Test with a TypeVariable type and assigningType with type arguments\n        typeVariable = GenericTypeHolder.class.getTypeParameters()[0];\n        Map<TypeVariable<?>, Type> typeVarAssigns = new HashMap<>();\n        typeVarAssigns.put(typeVariable, String.class);\n        rawType = TypeUtils.getRawType(typeVariable, new GenericParent<String>(){}.getClass());\n        assertEquals(String.class, rawType);\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest###testIsAssignable",
    "generated_path": "TypeUtilsTest_testIsAssignable.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3.reflect;\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertNull;\nimport static org.junit.Assert.assertTrue;\nimport java.io.Serializable;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.GenericArrayType;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.ParameterizedType;\nimport java.lang.reflect.Type;\nimport java.lang.reflect.TypeVariable;\nimport java.lang.reflect.WildcardType;\nimport java.net.URI;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.TreeSet;\nimport org.apache.commons.lang3.reflect.testbed.Foo;\nimport org.apache.commons.lang3.reflect.testbed.GenericParent;\nimport org.apache.commons.lang3.reflect.testbed.GenericTypeHolder;\nimport org.apache.commons.lang3.reflect.testbed.StringParameterizedChild;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest###testIsAssignable\nimport org.junit.Assert;\nimport org.junit.Test;\npublic class TypeUtilsTest_testIsAssignable {\n    @Test\n    public void testIsAssignable() {\n        // Test null input\n        Assert.assertTrue(TypeUtils.isAssignable(null, null));\n        Assert.assertFalse(TypeUtils.isAssignable(null, int.class));\n        Assert.assertFalse(TypeUtils.isAssignable(int.class, null));\n        // Test primitive types\n        Assert.assertTrue(TypeUtils.isAssignable(int.class, int.class));\n        Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));\n        Assert.assertFalse(TypeUtils.isAssignable(int.class, long.class));\n        // Test class types\n        Assert.assertTrue(TypeUtils.isAssignable(String.class, String.class));\n        Assert.assertTrue(TypeUtils.isAssignable(String.class, Object.class));\n        Assert.assertFalse(TypeUtils.isAssignable(Object.class, String.class));\n        // Test parameterized types\n        Type listStringType = new TypeToken<List<String>>() {}.getType();\n        Type listObjectType = new TypeToken<List<Object>>() {}.getType();\n        Type mapStringObjectType = new TypeToken<Map<String, Object>>() {}.getType();\n        Type mapObjectTypeStringType = new TypeToken<Map<Object, String>>() {}.getType();\n        Type fooType = new TypeToken<Foo<String>>() {}.getType();\n        Type genericParentType = new TypeToken<GenericParent<String>>() {}.getType();\n        Type genericTypeHolderType = new TypeToken<GenericTypeHolder<String>>() {}.getType();\n        Type stringParameterizedChildType = new TypeToken<StringParameterizedChild<String>>() {}.getType();\n        Assert.assertTrue(TypeUtils.isAssignable(listStringType, listStringType));\n        Assert.assertTrue(TypeUtils.isAssignable(listStringType, listObjectType));\n        Assert.assertFalse(TypeUtils.isAssignable(listObjectType, listStringType));\n        Assert.assertTrue(TypeUtils.isAssignable(mapStringObjectType, mapStringObjectType));\n        Assert.assertTrue(TypeUtils.isAssignable(mapStringObjectType, mapObjectTypeStringType));\n        Assert.assertFalse(TypeUtils.isAssignable(mapObjectTypeStringType, mapStringObjectType));\n        Assert.assertTrue(TypeUtils.isAssignable(fooType, fooType));\n        Assert.assertTrue(TypeUtils.isAssignable(fooType, genericParentType));\n        Assert.assertFalse(TypeUtils.isAssignable(genericParentType, fooType));\n        Assert.assertTrue(TypeUtils.isAssignable(genericTypeHolderType, genericTypeHolderType));\n        Assert.assertTrue(TypeUtils.isAssignable(genericTypeHolderType, stringParameterizedChildType));\n        Assert.assertFalse(TypeUtils.isAssignable(stringParameterizedChildType, genericTypeHolderType));\n        // Test wildcard types\n        Type wildcardExtendsNumberType = new TypeToken<? extends Number>() {}.getType();\n        Type wildcardSuperIntegerType = new TypeToken<? super Integer>() {}.getType();\n        Type wildcardExtendsSerializableType = new TypeToken<? extends Serializable>() {}.getType();\n        Type wildcardSuperComparableType = new TypeToken<? super Comparable>() {}.getType();\n        Assert.assertTrue(TypeUtils.isAssignable(wildcardExtendsNumberType, wildcardExtendsNumberType));\n        Assert.assertTrue(TypeUtils.isAssignable(wildcardExtendsNumberType, wildcardExtendsSerializableType));\n        Assert.assertFalse(TypeUtils.isAssignable(wildcardExtendsSerializableType, wildcardExtendsNumberType));\n        Assert.assertTrue(TypeUtils.isAssignable(wildcardSuperIntegerType, wildcardSuperIntegerType));\n        Assert.assertTrue(TypeUtils.isAssignable(wildcardSuperIntegerType, wildcardSuperComparableType));\n        Assert.assertFalse(TypeUtils.isAssignable(wildcardSuperComparableType, wildcardSuperIntegerType));\n        // Test type variables\n        TypeVariable<Class<GenericTypeHolder>> typeVariable = GenericTypeHolder.class.getTypeParameters()[0];\n        Type typeVariableBoundType = typeVariable.getBounds()[0];\n        Assert.assertTrue(TypeUtils.isAssignable(typeVariableBoundType, typeVariableBoundType));\n        Assert.assertTrue(TypeUtils.isAssignable(typeVariableBoundType, String.class));\n        Assert.assertFalse(TypeUtils.isAssignable(String.class, typeVariableBoundType));\n        // Test generic array types\n        Type stringArrayType = new TypeToken<String[]>() {}.getType();\n        Type objectArrayType = new TypeToken<Object[]>() {}.getType();\n        Type stringListArrayType = new TypeToken<List<String>[]>() {}.getType();\n        Type objectListArrayType = new TypeToken<List<Object>[]>() {}.getType();\n        Assert.assertTrue(TypeUtils.isAssignable(stringArrayType, stringArrayType));\n        Assert.assertTrue(TypeUtils.isAssignable(stringArrayType, objectArrayType));\n        Assert.assertFalse(TypeUtils.isAssignable(objectArrayType, stringArrayType));\n        Assert.assertTrue(TypeUtils.isAssignable(stringListArrayType, stringListArrayType));\n        Assert.assertTrue(TypeUtils.isAssignable(stringListArrayType, objectListArrayType));\n        Assert.assertFalse(TypeUtils.isAssignable(objectListArrayType, stringListArrayType));\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest###testParameterize",
    "generated_path": "TypeUtilsTest_testParameterize.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3.reflect;\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertNull;\nimport static org.junit.Assert.assertTrue;\nimport java.io.Serializable;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.GenericArrayType;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.ParameterizedType;\nimport java.lang.reflect.Type;\nimport java.lang.reflect.TypeVariable;\nimport java.lang.reflect.WildcardType;\nimport java.net.URI;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.TreeSet;\nimport org.apache.commons.lang3.reflect.testbed.Foo;\nimport org.apache.commons.lang3.reflect.testbed.GenericParent;\nimport org.apache.commons.lang3.reflect.testbed.GenericTypeHolder;\nimport org.apache.commons.lang3.reflect.testbed.StringParameterizedChild;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest###testParameterize\npublic class TypeUtilsTest_testParameterize {\n    @Test\n    public void testParameterize() {\n        // Create a raw class\n        Class<?> rawClass = Foo.class;\n        // Create a map of type argument mappings\n        Map<TypeVariable<?>, Type> typeArgMappings = new HashMap<>();\n        typeArgMappings.put(GenericParent.class.getTypeParameters()[0], String.class);\n        // Call the parameterize method\n        ParameterizedType parameterizedType = TypeUtils.parameterize(rawClass, typeArgMappings);\n        // Assert that the parameterized type is not null\n        assertNotNull(parameterizedType);\n        // Assert that the raw type of the parameterized type is equal to the raw class\n        assertEquals(rawClass, parameterizedType.getRawType());\n        // Assert that the actual type arguments of the parameterized type are equal to the expected type arguments\n        Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n        Type[] expectedTypeArguments = new Type[] { String.class };\n        assertArrayEquals(expectedTypeArguments, actualTypeArguments);\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest###testToLongString",
    "generated_path": "TypeUtilsTest_testToLongString.java",
    "Compile_result": 1,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3.reflect;\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertNull;\nimport static org.junit.Assert.assertTrue;\nimport java.io.Serializable;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.GenericArrayType;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.ParameterizedType;\nimport java.lang.reflect.Type;\nimport java.lang.reflect.TypeVariable;\nimport java.lang.reflect.WildcardType;\nimport java.net.URI;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.TreeSet;\nimport org.apache.commons.lang3.reflect.testbed.Foo;\nimport org.apache.commons.lang3.reflect.testbed.GenericParent;\nimport org.apache.commons.lang3.reflect.testbed.GenericTypeHolder;\nimport org.apache.commons.lang3.reflect.testbed.StringParameterizedChild;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest###testToLongString\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertNotNull;\nimport java.lang.reflect.TypeVariable;\nimport org.junit.Test;\npublic class TypeUtilsTest_testToLongString {\n    @Test\n    public void testToLongString() {\n        TypeVariable<Class<StringParameterizedChild>>[] typeParams = StringParameterizedChild.class.getTypeParameters();\n        assertNotNull(typeParams);\n        assertEquals(\"org.apache.commons.lang3.reflect.testbed.StringParameterizedChild<K, V>:K\", TypeUtils.toLongString(typeParams[0]));\n    }\n}"
  },
  {
    "original_path": "pvanassen_ns-api###pvanassen_ns-api/src/test/java/nl/pvanassen/ns/xml/XmlPresentTest###testChild",
    "generated_path": "XmlPresentTest_testChild.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package nl.pvanassen.ns.xml;\nimport org.junit.Before;\nimport org.junit.Test;\nimport java.util.List;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert.assertNull;\nimport static org.junit.Assert.assertTrue;\n// original test path: pvanassen_ns-api###pvanassen_ns-api/src/test/java/nl/pvanassen/ns/xml/XmlPresentTest###testChild\npublic class XmlPresentTest_testChild {\n    private XmlPresent xml;\n    @Before\n    public void setUp() {\n        String xmlString = \"<root><person name=\\\"John\\\"><age>30</age></person></root>\";\n        InputStream stream = new ByteArrayInputStream(xmlString.getBytes());\n        xml = new XmlPresent(stream, \"root\");\n    }\n    @Test\n    public void testChild() {\n        Xml child = xml.child(\"person\");\n        assertNotNull(child);\n        assertEquals(\"person\", child.getName());\n        assertEquals(\"John\", child.getAttribute(\"name\"));\n        Xml ageChild = child.child(\"age\");\n        assertNotNull(ageChild);\n        assertEquals(\"age\", ageChild.getName());\n        assertEquals(\"30\", ageChild.getContent());\n        Xml absentChild = child.child(\"address\");\n        assertNotNull(absentChild);\n        assertEquals(\"address\", absentChild.getName());\n        assertTrue(absentChild instanceof XmlAbsent);\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ArrayUtilsTest###testToMap",
    "generated_path": "ArrayUtilsTest_testToMap.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3;\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert.assertNotSame;\nimport static org.junit.Assert.assertNull;\nimport static org.junit.Assert.assertSame;\nimport static org.junit.Assert.assertTrue;\nimport static org.junit.Assert.fail;\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.Modifier;\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.Date;\nimport java.util.Map;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ArrayUtilsTest###testToMap\nimport org.junit.Test;\nimport java.util.HashMap;\nimport java.util.Map;\nimport static org.junit.Assert.*;\npublic class ArrayUtilsTest_testToMap {\n    @Test\n    public void testToMap() {\n        // Test case 1: null array\n        Object[] array = null;\n        assertNull(ArrayUtils.toMap(array));\n        // Test case 2: empty array\n        array = new Object[0];\n        assertNotNull(ArrayUtils.toMap(array));\n        assertTrue(ArrayUtils.toMap(array).isEmpty());\n        // Test case 3: array with Map.Entry objects\n        Map.Entry<String, Integer> entry1 = Map.entry(\"one\", 1);\n        Map.Entry<String, Integer> entry2 = Map.entry(\"two\", 2);\n        array = new Object[]{entry1, entry2};\n        Map<String, Integer> expectedMap = new HashMap<>();\n        expectedMap.put(\"one\", 1);\n        expectedMap.put(\"two\", 2);\n        assertEquals(expectedMap, ArrayUtils.toMap(array));\n        // Test case 4: array with Object[] objects\n        Object[] objArray1 = new Object[]{\"three\", 3};\n        Object[] objArray2 = new Object[]{\"four\", 4};\n        array = new Object[]{objArray1, objArray2};\n        expectedMap = new HashMap<>();\n        expectedMap.put(\"three\", 3);\n        expectedMap.put(\"four\", 4);\n        assertEquals(expectedMap, ArrayUtils.toMap(array));\n        // Test case 5: array with invalid objects\n        Object obj1 = new Date();\n        Object obj2 = \"invalid\";\n        array = new Object[]{obj1, obj2};\n        try {\n            ArrayUtils.toMap(array);\n            fail(\"Expected IllegalArgumentException to be thrown\");\n        } catch (IllegalArgumentException e) {\n            assertEquals(\"Array element 0, '\" + obj1 + \"', is neither of type Map.Entry nor an Array\", e.getMessage());\n        }\n    }\n}"
  },
  {
    "original_path": "syphr42_prom###syphr42_prom/src/test/java/org/syphr/prom/ChangeStackTest###testSync",
    "generated_path": "ChangeStackTest_testSync.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package org.syphr.prom;\nimport junit.framework.Assert;\nimport org.junit.Before;\nimport org.junit.Test;\n// original test path: syphr42_prom###syphr42_prom/src/test/java/org/syphr/prom/ChangeStackTest###testSync\npublic class ChangeStackTest_testSync {\n    private ChangeStack<Integer> stack;\n    @Before\n    public void setUp() {\n        stack = new ChangeStack<>(1);\n    }\n    @Test\n    public void testSync() {\n        boolean result = stack.sync(2);\n        Assert.assertTrue(result);\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/CharSetTest###testGetInstance",
    "generated_path": "CharSetTest_testGetInstance.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertNull;\nimport static org.junit.Assert.assertSame;\nimport static org.junit.Assert.assertTrue;\nimport java.lang.reflect.Modifier;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/CharSetTest###testGetInstance\npublic class CharSetTest_testGetInstance {\n    @Test\n    public void testGetInstance() {\n        // Test null input\n        assertNull(CharSet.getInstance(null));\n        // Test single common instance\n        CharSet common = CharSet.getInstance(\"lowercase\");\n        assertSame(common, CharSet.getInstance(\"lowercase\"));\n        // Test multiple instances\n        CharSet set1 = CharSet.getInstance(\"abc\");\n        CharSet set2 = CharSet.getInstance(\"def\");\n        assertFalse(set1 == set2);\n        // Test empty input\n        CharSet empty = CharSet.getInstance();\n        assertTrue(empty.set.isEmpty());\n        // Test input with duplicates\n        CharSet duplicates = CharSet.getInstance(\"abc\", \"abc\");\n        assertEquals(1, duplicates.set.size());\n    }\n}"
  },
  {
    "original_path": "waldheinz_fat32-lib###waldheinz_fat32-lib/src/test/java/de/waldheinz/fs/fat/ClusterChainTest###testSetSize",
    "generated_path": "ClusterChainTest_testSetSize.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package de.waldheinz.fs.fat;\nimport de.waldheinz.fs.util.RamDisk;\nimport java.io.IOException;\nimport java.nio.ByteBuffer;\nimport org.junit.Before;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\n// original test path: waldheinz_fat32-lib###waldheinz_fat32-lib/src/test/java/de/waldheinz/fs/fat/ClusterChainTest###testSetSize\npublic class ClusterChainTest_testSetSize {\n    private Fat fat;\n    private ClusterChain clusterChain;\n    private RamDisk ramDisk;\n    @Before\n    public void setUp() throws IOException {\n        ramDisk = new RamDisk(1024 * 1024);\n        fat = new Fat(ramDisk, FileSystemType.FAT32);\n        clusterChain = new ClusterChain(fat, false);\n    }\n    @Test\n    public void testSetSize() throws IOException {\n        long size = 1024;\n        long expectedNrClusters = ((size + clusterChain.clusterSize - 1) / clusterChain.clusterSize);\n        long expectedSize = clusterChain.clusterSize * expectedNrClusters;\n        long actualSize = clusterChain.setSize(size);\n        assertEquals(expectedSize, actualSize);\n    }\n}"
  },
  {
    "original_path": "udoprog_tiny-async-java###udoprog_tiny-async-java/tiny-async-core/src/test/java/eu/toolchain/concurrent/CollectHelperTest###testCheckFailed",
    "generated_path": "CollectHelperTest_testCheckFailed.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package eu.toolchain.concurrent;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert.assertNull;\nimport static org.mockito.Matchers.any;\nimport static org.mockito.Matchers.anyObject;\nimport static org.mockito.Mockito.doNothing;\nimport static org.mockito.Mockito.doReturn;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.spy;\nimport static org.mockito.Mockito.times;\nimport static org.mockito.Mockito.verify;\nimport com.google.common.collect.ImmutableList;\nimport java.util.Collection;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.function.Function;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.mockito.Mock;\nimport org.mockito.runners.MockitoJUnitRunner;\n// original test path: udoprog_tiny-async-java###udoprog_tiny-async-java/tiny-async-core/src/test/java/eu/toolchain/concurrent/CollectHelperTest###testCheckFailed\n@RunWith(MockitoJUnitRunner.class)\npublic class CollectHelperTest_testCheckFailed {\n    @Mock\n    private Stage<?> mockStage1;\n    @Mock\n    private Stage<?> mockStage2;\n    @Mock\n    private Completable<Object> mockCompletable;\n    private CollectHelper collectHelper;\n    @Before\n    public void setUp() {\n        List<Stage<?>> sources = ImmutableList.of(mockStage1, mockStage2);\n        collectHelper = new CollectHelper(2, null, sources, mockCompletable);\n    }\n    @Test\n    public void testCheckFailed() {\n        doNothing().when(mockStage1).cancel();\n        doNothing().when(mockStage2).cancel();\n        collectHelper.checkFailed();\n        verify(mockStage1, times(1)).cancel();\n        verify(mockStage2, times(1)).cancel();\n        assertNull(collectHelper.sources);\n        assertTrue(collectHelper.failed.get());\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/builder/CompareToBuilderTest###testAppendSuper",
    "generated_path": "CompareToBuilderTest_testAppendSuper.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3.builder;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertTrue;\nimport java.math.BigInteger;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/builder/CompareToBuilderTest###testAppendSuper\npublic class CompareToBuilderTest_testAppendSuper {\n    @Test\n    public void testAppendSuper() {\n        CompareToBuilder builder = new CompareToBuilder();\n        int superCompareTo = 5;\n        builder.appendSuper(superCompareTo);\n        assertEquals(superCompareTo, builder.comparison);\n    }\n    @Test\n    public void testAppendSuperWithNonZeroComparison() {\n        CompareToBuilder builder = new CompareToBuilder();\n        builder.appendSuper(5);\n        int superCompareTo = 10;\n        builder.appendSuper(superCompareTo);\n        assertEquals(5, builder.comparison);\n    }\n}"
  },
  {
    "original_path": "udoprog_tiny-async-java###udoprog_tiny-async-java/tiny-async-core/src/test/java/eu/toolchain/concurrent/ConcurrentCompletableTest###testCancel",
    "generated_path": "ConcurrentCompletableTest_testCancel.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package eu.toolchain.concurrent;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertTrue;\nimport static org.mockito.Matchers.any;\nimport static org.mockito.Matchers.eq;\nimport static org.mockito.Mockito.doNothing;\nimport static org.mockito.Mockito.doReturn;\nimport static org.mockito.Mockito.doThrow;\nimport static org.mockito.Mockito.inOrder;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.times;\nimport static org.mockito.Mockito.verify;\nimport java.util.function.Consumer;\nimport java.util.function.Function;\nimport java.util.function.Supplier;\nimport org.junit.Before;\nimport org.junit.Rule;\nimport org.junit.Test;\nimport org.junit.rules.ExpectedException;\nimport org.junit.runner.RunWith;\nimport org.mockito.ArgumentCaptor;\nimport org.mockito.InOrder;\nimport org.mockito.Mock;\nimport org.mockito.Mockito;\nimport org.mockito.runners.MockitoJUnitRunner;\n// original test path: udoprog_tiny-async-java###udoprog_tiny-async-java/tiny-async-core/src/test/java/eu/toolchain/concurrent/ConcurrentCompletableTest###testCancel\n@RunWith(MockitoJUnitRunner.class)\npublic class ConcurrentCompletableTest_testCancel {\n    @Mock\n    private Caller caller;\n    @Rule\n    public ExpectedException expectedException = ExpectedException.none();\n    private ConcurrentCompletable completable;\n    @Before\n    public void setUp() {\n        completable = new ConcurrentCompletable(caller);\n    }\n    @Test\n    public void cancel_shouldReturnTrueAndSetStateToCancelledAndResultToCancel_whenStateIsPending() {\n        // Arrange\n        completable.state.set(ConcurrentCompletable.PENDING);\n        // Act\n        boolean result = completable.cancel();\n        // Assert\n        assertTrue(result);\n        assertEquals(ConcurrentCompletable.CANCELLED, completable.state.get());\n        assertEquals(ConcurrentCompletable.CANCEL, completable.result);\n    }\n    @Test\n    public void cancel_shouldReturnFalse_whenStateIsNotPending() {\n        // Arrange\n        completable.state.set(ConcurrentCompletable.CANCELLED);\n        // Act\n        boolean result = completable.cancel();\n        // Assert\n        assertFalse(result);\n        assertEquals(ConcurrentCompletable.CANCELLED, completable.state.get());\n        assertNull(completable.result);\n    }\n    @Test\n    public void cancel_shouldPostComplete() {\n        // Arrange\n        completable.state.set(ConcurrentCompletable.PENDING);\n        doNothing().when(caller).post(any());\n        // Act\n        completable.cancel();\n        // Assert\n        verify(caller, times(1)).post(any());\n    }\n}"
  },
  {
    "original_path": "udoprog_tiny-async-java###udoprog_tiny-async-java/tiny-async-core/src/test/java/eu/toolchain/concurrent/ConcurrentCompletableTest###testComplete",
    "generated_path": "ConcurrentCompletableTest_testComplete.java",
    "Compile_result": 1,
    "Test_result": 1,
    "Gen_Test": "package eu.toolchain.concurrent;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertTrue;\nimport static org.mockito.Matchers.any;\nimport static org.mockito.Matchers.eq;\nimport static org.mockito.Mockito.doNothing;\nimport static org.mockito.Mockito.doReturn;\nimport static org.mockito.Mockito.doThrow;\nimport static org.mockito.Mockito.inOrder;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.times;\nimport static org.mockito.Mockito.verify;\nimport java.util.function.Consumer;\nimport java.util.function.Function;\nimport java.util.function.Supplier;\nimport org.junit.Before;\nimport org.junit.Rule;\nimport org.junit.Test;\nimport org.junit.rules.ExpectedException;\nimport org.junit.runner.RunWith;\nimport org.mockito.ArgumentCaptor;\nimport org.mockito.InOrder;\nimport org.mockito.Mock;\nimport org.mockito.Mockito;\nimport org.mockito.runners.MockitoJUnitRunner;\n// original test path: udoprog_tiny-async-java###udoprog_tiny-async-java/tiny-async-core/src/test/java/eu/toolchain/concurrent/ConcurrentCompletableTest###testComplete\n@RunWith(MockitoJUnitRunner.class)\npublic class ConcurrentCompletableTest_testComplete {\n    @Mock\n    private Caller caller;\n    @Rule\n    public ExpectedException expectedException = ExpectedException.none();\n    private ConcurrentCompletable<Object> completable;\n    @Before\n    public void setUp() {\n        completable = new ConcurrentCompletable<>(caller);\n    }\n    @Test\n    public void complete_shouldReturnTrueAndSetResult_whenCalledWithNonNullResult() {\n        // Arrange\n        Object result = new Object();\n        // Act\n        boolean isCompleted = completable.complete(result);\n        // Assert\n        assertTrue(isCompleted);\n        assertEquals(result, completable.result);\n    }\n    @Test\n    public void complete_shouldReturnTrueAndSetNullResult_whenCalledWithNullResult() {\n        // Act\n        boolean isCompleted = completable.complete(null);\n        // Assert\n        assertTrue(isCompleted);\n        assertEquals(ConcurrentCompletable.NULL, completable.result);\n    }\n    @Test\n    public void complete_shouldReturnFalseAndNotSetResult_whenCalledTwice() {\n        // Arrange\n        Object result1 = new Object();\n        Object result2 = new Object();\n        completable.complete(result1);\n        // Act\n        boolean isCompleted = completable.complete(result2);\n        // Assert\n        assertFalse(isCompleted);\n        assertEquals(result1, completable.result);\n    }\n}"
  },
  {
    "original_path": "udoprog_tiny-async-java###udoprog_tiny-async-java/tiny-async-core/src/test/java/eu/toolchain/concurrent/ConcurrentCompletableTest###testWhenDone",
    "generated_path": "ConcurrentCompletableTest_testWhenDone.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package eu.toolchain.concurrent;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertTrue;\nimport static org.mockito.Matchers.any;\nimport static org.mockito.Matchers.eq;\nimport static org.mockito.Mockito.doNothing;\nimport static org.mockito.Mockito.doReturn;\nimport static org.mockito.Mockito.doThrow;\nimport static org.mockito.Mockito.inOrder;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.times;\nimport static org.mockito.Mockito.verify;\nimport java.util.function.Consumer;\nimport java.util.function.Function;\nimport java.util.function.Supplier;\nimport org.junit.Before;\nimport org.junit.Rule;\nimport org.junit.Test;\nimport org.junit.rules.ExpectedException;\nimport org.junit.runner.RunWith;\nimport org.mockito.ArgumentCaptor;\nimport org.mockito.InOrder;\nimport org.mockito.Mock;\nimport org.mockito.Mockito;\nimport org.mockito.runners.MockitoJUnitRunner;\n// original test path: udoprog_tiny-async-java###udoprog_tiny-async-java/tiny-async-core/src/test/java/eu/toolchain/concurrent/ConcurrentCompletableTest###testWhenDone\n@RunWith(MockitoJUnitRunner.class)\npublic class ConcurrentCompletableTest_testWhenDone {\n    @Mock\n    private Caller caller;\n    @Rule\n    public ExpectedException expectedException = ExpectedException.none();\n    private ConcurrentCompletable<Object> completable;\n    @Before\n    public void setUp() {\n        completable = new ConcurrentCompletable<>(caller);\n    }\n    @Test\n    public void whenDone_addsCallback() {\n        Runnable callback = mock(Runnable.class);\n        completable.whenDone(callback);\n        assertTrue(completable.getCallbacks().contains(callback));\n    }\n    @Test\n    public void whenDone_executesCallbackIfAlreadyDone() {\n        Runnable callback = mock(Runnable.class);\n        completable.setDone();\n        completable.whenDone(callback);\n        verify(caller).execute(callback);\n    }\n    @Test\n    public void whenDone_returnsStage() {\n        Runnable callback = mock(Runnable.class);\n        Stage<Object> stage = completable.whenDone(callback);\n        assertEquals(completable, stage);\n    }\n    @Test\n    public void whenDone_executesCallbackIfDoneAfterAdding() {\n        Runnable callback = mock(Runnable.class);\n        completable.whenDone(callback);\n        completable.setDone();\n        verify(caller).execute(callback);\n    }\n    @Test\n    public void whenDone_executesCallbacksInOrder() {\n        Runnable callback1 = mock(Runnable.class);\n        Runnable callback2 = mock(Runnable.class);\n        completable.whenDone(callback1);\n        completable.whenDone(callback2);\n        completable.setDone();\n        InOrder inOrder = inOrder(caller);\n        inOrder.verify(caller).execute(callback1);\n        inOrder.verify(caller).execute(callback2);\n    }\n    @Test\n    public void whenDone_doesNotExecuteCallbackIfNotDone() {\n        Runnable callback = mock(Runnable.class);\n        completable.whenDone(callback);\n        verify(caller, times(0)).execute(callback);\n    }\n    @Test\n    public void whenDone_executesCallbackIfDoneBeforeAdding() {\n        Runnable callback = mock(Runnable.class);\n        completable.setDone();\n        completable.whenDone(callback);\n        verify(caller).execute(callback);\n    }\n    @Test\n    public void whenDone_executesCallbackIfDoneAndNoCallbacks() {\n        completable.setDone();\n        completable.whenDone(mock(Runnable.class));\n        verify(caller, times(1)).execute(any(Runnable.class));\n    }\n    @Test\n    public void whenDone_executesCallbackIfDoneAndCallbackThrowsException() {\n        Runnable callback = mock(Runnable.class);\n        doThrow(new RuntimeException()).when(callback).run();\n        completable.whenDone(callback);\n        completable.setDone();\n        verify(caller).execute(callback);\n    }\n    @Test\n    public void whenDone_executesCallbackIfDoneAndCallbackIsNull() {\n        completable = new ConcurrentCompletable<>(caller, null);\n        completable.whenDone(mock(Runnable.class));\n        completable.setDone();\n        verify(caller, times(1)).execute(any(Runnable.class));\n    }\n}"
  },
  {
    "original_path": "udoprog_tiny-async-java###udoprog_tiny-async-java/tiny-async-core/src/test/java/eu/toolchain/concurrent/ConcurrentManagedTest###testBorrow",
    "generated_path": "ConcurrentManagedTest_testBorrow.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package eu.toolchain.concurrent;\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert.assertNull;\nimport static org.junit.Assert.assertTrue;\nimport static org.junit.Assert.fail;\nimport static org.mockito.Matchers.any;\nimport static org.mockito.Mockito.doAnswer;\nimport static org.mockito.Mockito.doNothing;\nimport static org.mockito.Mockito.doReturn;\nimport static org.mockito.Mockito.doThrow;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.never;\nimport static org.mockito.Mockito.spy;\nimport static org.mockito.Mockito.times;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.when;\nimport com.google.common.collect.ImmutableList;\nimport java.util.concurrent.atomic.AtomicReference;\nimport java.util.function.Function;\nimport java.util.function.Supplier;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.mockito.Mock;\nimport org.mockito.invocation.InvocationOnMock;\nimport org.mockito.runners.MockitoJUnitRunner;\nimport org.mockito.stubbing.Answer;\n// original test path: udoprog_tiny-async-java###udoprog_tiny-async-java/tiny-async-core/src/test/java/eu/toolchain/concurrent/ConcurrentManagedTest###testBorrow\n@RunWith(MockitoJUnitRunner.class)\npublic class ConcurrentManagedTest_testBorrow {\n    @Mock\n    private Caller caller;\n    @Mock\n    private ManagedOptions options;\n    @Mock\n    private Supplier<? extends Stage<String>> setup;\n    @Mock\n    private Completable<Void> startFuture;\n    @Mock\n    private Completable<Void> zeroLeaseFuture;\n    @Mock\n    private Completable<String> stopReferenceFuture;\n    @Mock\n    private Stage<Void> stopFuture;\n    private ConcurrentManaged<String> concurrentManaged;\n    @Before\n    public void setUp() {\n        concurrentManaged = new ConcurrentManaged<>(caller, options, setup, startFuture, zeroLeaseFuture, stopReferenceFuture, stopFuture);\n    }\n    @Test\n    public void testBorrow() {\n        // Setup\n        String value = \"testValue\";\n        ValidBorrowed<String> expectedBorrowed = new ValidBorrowed<>(value, Thread.currentThread().getStackTrace());\n        AtomicReference<String> reference = new AtomicReference<>(value);\n        concurrentManaged.reference.set(reference.get());\n        if (concurrentManaged.traces != null) {\n            concurrentManaged.traces.add(expectedBorrowed);\n        }\n        // Execute\n        Borrowed<String> actualBorrowed = concurrentManaged.borrow();\n        // Verify\n        assertEquals(expectedBorrowed, actualBorrowed);\n        if (concurrentManaged.traces != null) {\n            assertTrue(concurrentManaged.traces.contains(expectedBorrowed));\n        }\n    }\n}"
  },
  {
    "original_path": "udoprog_tiny-async-java###udoprog_tiny-async-java/tiny-async-core/src/test/java/eu/toolchain/concurrent/ConcurrentManagedTest###testDoto",
    "generated_path": "ConcurrentManagedTest_testDoto.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package eu.toolchain.concurrent;\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert.assertNull;\nimport static org.junit.Assert.assertTrue;\nimport static org.junit.Assert.fail;\nimport static org.mockito.Matchers.any;\nimport static org.mockito.Mockito.doAnswer;\nimport static org.mockito.Mockito.doNothing;\nimport static org.mockito.Mockito.doReturn;\nimport static org.mockito.Mockito.doThrow;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.never;\nimport static org.mockito.Mockito.spy;\nimport static org.mockito.Mockito.times;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.when;\nimport com.google.common.collect.ImmutableList;\nimport java.util.concurrent.atomic.AtomicReference;\nimport java.util.function.Function;\nimport java.util.function.Supplier;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.mockito.Mock;\nimport org.mockito.invocation.InvocationOnMock;\nimport org.mockito.runners.MockitoJUnitRunner;\nimport org.mockito.stubbing.Answer;\n// original test path: udoprog_tiny-async-java###udoprog_tiny-async-java/tiny-async-core/src/test/java/eu/toolchain/concurrent/ConcurrentManagedTest###testDoto\n@RunWith(MockitoJUnitRunner.class)\npublic class ConcurrentManagedTest_testDoto {\n    @Mock\n    private Caller caller;\n    @Mock\n    private ManagedOptions options;\n    @Mock\n    private Supplier<? extends Stage<String>> setup;\n    @Mock\n    private Completable<Void> startFuture;\n    @Mock\n    private Completable<Void> zeroLeaseFuture;\n    @Mock\n    private Completable<String> stopReferenceFuture;\n    @Mock\n    private Stage<Void> stopFuture;\n    private ConcurrentManaged<String> concurrentManaged;\n    @Before\n    public void setUp() {\n        concurrentManaged = new ConcurrentManaged<>(caller, options, setup, startFuture, zeroLeaseFuture, stopReferenceFuture, stopFuture);\n    }\n    @Test\n    public void testDoto() throws Exception {\n        // Given\n        final String expected = \"Hello World\";\n        final Function<String, Stage<Integer>> action = s -> new ImmediateResult<>(caller, s.length());\n        // When\n        final Stage<Integer> result = concurrentManaged.doto(action.apply(expected));\n        // Then\n        assertNotNull(result);\n        assertEquals(expected.length(), result.join());\n    }\n}"
  },
  {
    "original_path": "udoprog_tiny-async-java###udoprog_tiny-async-java/tiny-async-core/src/test/java/eu/toolchain/concurrent/ConcurrentManagedTest###testStop",
    "generated_path": "ConcurrentManagedTest_testStop.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package eu.toolchain.concurrent;\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert.assertNull;\nimport static org.junit.Assert.assertTrue;\nimport static org.junit.Assert.fail;\nimport static org.mockito.Matchers.any;\nimport static org.mockito.Mockito.doAnswer;\nimport static org.mockito.Mockito.doNothing;\nimport static org.mockito.Mockito.doReturn;\nimport static org.mockito.Mockito.doThrow;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.never;\nimport static org.mockito.Mockito.spy;\nimport static org.mockito.Mockito.times;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.when;\nimport com.google.common.collect.ImmutableList;\nimport java.util.concurrent.atomic.AtomicReference;\nimport java.util.function.Function;\nimport java.util.function.Supplier;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.mockito.Mock;\nimport org.mockito.invocation.InvocationOnMock;\nimport org.mockito.runners.MockitoJUnitRunner;\nimport org.mockito.stubbing.Answer;\n// original test path: udoprog_tiny-async-java###udoprog_tiny-async-java/tiny-async-core/src/test/java/eu/toolchain/concurrent/ConcurrentManagedTest###testStop\n@RunWith(MockitoJUnitRunner.class)\npublic class ConcurrentManagedTest_testStop {\n    @Mock\n    private Caller caller;\n    @Mock\n    private ManagedOptions options;\n    @Mock\n    private Supplier<? extends Stage<String>> setup;\n    @Mock\n    private Completable<Void> startFuture;\n    @Mock\n    private Completable<Void> zeroLeaseFuture;\n    @Mock\n    private Completable<String> stopReferenceFuture;\n    @Mock\n    private Stage<Void> stopFuture;\n    private ConcurrentManaged<String> concurrentManaged;\n    @Before\n    public void setUp() {\n        concurrentManaged = new ConcurrentManaged<>(caller, options, setup, startFuture, zeroLeaseFuture, stopReferenceFuture, stopFuture);\n    }\n    @Test\n    public void testStop() {\n        // Set up\n        AtomicReference<ManagedState> state = spy(new AtomicReference<>(ManagedState.STARTED));\n        AtomicReference<String> reference = spy(new AtomicReference<>(\"test\"));\n        doReturn(reference.get()).when(reference).getAndSet(null);\n        concurrentManaged.state = state;\n        concurrentManaged.reference = reference;\n        // Execute\n        Stage<Void> result = concurrentManaged.stop();\n        // Verify\n        verify(state, times(1)).compareAndSet(ManagedState.STARTED, ManagedState.STOPPED);\n        verify(stopReferenceFuture, times(1)).complete(reference.get());\n        verify(concurrentManaged, times(1)).release();\n        assertEquals(stopFuture, result);\n    }\n}"
  },
  {
    "original_path": "udoprog_tiny-async-java###udoprog_tiny-async-java/tiny-async-core/src/test/java/eu/toolchain/concurrent/ConcurrentManagedTest###testToStringTracing",
    "generated_path": "ConcurrentManagedTest_testToStringTracing.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package eu.toolchain.concurrent;\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert.assertNull;\nimport static org.junit.Assert.assertTrue;\nimport static org.junit.Assert.fail;\nimport static org.mockito.Matchers.any;\nimport static org.mockito.Mockito.doAnswer;\nimport static org.mockito.Mockito.doNothing;\nimport static org.mockito.Mockito.doReturn;\nimport static org.mockito.Mockito.doThrow;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.never;\nimport static org.mockito.Mockito.spy;\nimport static org.mockito.Mockito.times;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.when;\nimport com.google.common.collect.ImmutableList;\nimport java.util.concurrent.atomic.AtomicReference;\nimport java.util.function.Function;\nimport java.util.function.Supplier;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.mockito.Mock;\nimport org.mockito.invocation.InvocationOnMock;\nimport org.mockito.runners.MockitoJUnitRunner;\nimport org.mockito.stubbing.Answer;\n// original test path: udoprog_tiny-async-java###udoprog_tiny-async-java/tiny-async-core/src/test/java/eu/toolchain/concurrent/ConcurrentManagedTest###testToStringTracing\n@RunWith(MockitoJUnitRunner.class)\npublic class ConcurrentManagedTest_testToStringTracing {\n    @Mock\n    private ValidBorrowed borrowed1;\n    @Mock\n    private ValidBorrowed borrowed2;\n    @Mock\n    private ValidBorrowed borrowed3;\n    @Test\n    public void testToStringTracing() {\n        // Setup\n        ConcurrentManaged<String> managed = new ConcurrentManaged<>(null, null, null, null, null, null, null);\n        List<ValidBorrowed> traces = ImmutableList.of(borrowed1, borrowed2, borrowed3);\n        String expected = \"Managed(INITIALIZED, null:\\n\" +\n                borrowed1.toString() +\n                borrowed2.toString() +\n                borrowed3.toString() +\n                \")\";\n        // Execute\n        String actual = managed.toStringTracing(null, traces);\n        // Verify\n        assertEquals(expected, actual);\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testIntArrayToLong",
    "generated_path": "ConversionTest_testIntArrayToLong.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3;\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.fail;\nimport java.util.UUID;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testIntArrayToLong\npublic class ConversionTest_testIntArrayToLong {\n    @Test\n    public void testIntArrayToLong() {\n        int[] src = {1, 2, 3};\n        int srcPos = 0;\n        long dstInit = 0;\n        int dstPos = 0;\n        int nInts = 3;\n        long expectedOutput = 0x000000010000000200000003L;\n        long actualOutput = Conversion.intArrayToLong(src, srcPos, dstInit, dstPos, nInts);\n        assertEquals(expectedOutput, actualOutput);\n        // Test for empty array\n        int[] emptySrc = {};\n        int emptySrcPos = 0;\n        long emptyDstInit = 0;\n        int emptyDstPos = 0;\n        int emptyNInts = 0;\n        long emptyExpectedOutput = 0;\n        long emptyActualOutput = Conversion.intArrayToLong(emptySrc, emptySrcPos, emptyDstInit, emptyDstPos, emptyNInts);\n        assertEquals(emptyExpectedOutput, emptyActualOutput);\n        // Test for IllegalArgumentException\n        int[] invalidSrc = {1, 2, 3};\n        int invalidSrcPos = 0;\n        long invalidDstInit = 0;\n        int invalidDstPos = 32;\n        int invalidNInts = 2;\n        try {\n            Conversion.intArrayToLong(invalidSrc, invalidSrcPos, invalidDstInit, invalidDstPos, invalidNInts);\n            fail(\"Expected IllegalArgumentException was not thrown\");\n        } catch (IllegalArgumentException e) {\n            assertEquals(\"(nInts-1)*32+dstPos is greater or equal to than 64\", e.getMessage());\n        }\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testIntToByteArray",
    "generated_path": "ConversionTest_testIntToByteArray.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3;\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.fail;\nimport java.util.UUID;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testIntToByteArray\npublic class ConversionTest_testIntToByteArray {\n    @Test\n    public void testIntToByteArray() {\n        int src = 123456789;\n        int srcPos = 0;\n        byte[] dst = new byte[4];\n        int dstPos = 0;\n        int nBytes = 4;\n        byte[] expected = {7, 91, 205, 21};\n        byte[] result = Conversion.intToByteArray(src, srcPos, dst, dstPos, nBytes);\n        assertArrayEquals(expected, result);\n        // Test for IllegalArgumentException\n        try {\n            srcPos = 24;\n            nBytes = 2;\n            Conversion.intToByteArray(src, srcPos, dst, dstPos, nBytes);\n            fail(\"Expected IllegalArgumentException was not thrown\");\n        } catch (IllegalArgumentException e) {\n            assertEquals(\"(nBytes-1)*8+srcPos is greater or equal to than 32\", e.getMessage());\n        }\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testIntToShortArray",
    "generated_path": "ConversionTest_testIntToShortArray.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3;\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.fail;\nimport java.util.UUID;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testIntToShortArray\npublic class ConversionTest_testIntToShortArray {\n    @Test\n    public void testIntToShortArray() {\n        int src = 0b10101010101010101010101010101010; // 0xAAAAAAAA\n        int srcPos = 0;\n        short[] dst = new short[4];\n        int dstPos = 0;\n        int nShorts = 4;\n        Conversion.intToShortArray(src, srcPos, dst, dstPos, nShorts);\n        short[] expected = {0b1010101010101010, 0b1010101010101010, 0b1010101010101010, 0b1010101010101010}; // {0xAAAA, 0xAAAA, 0xAAAA, 0xAAAA}\n        assertArrayEquals(expected, dst);\n        // Test with nShorts = 0\n        nShorts = 0;\n        assertArrayEquals(dst, Conversion.intToShortArray(src, srcPos, dst, dstPos, nShorts));\n        // Test with (nShorts-1)*16+srcPos >= 32\n        nShorts = 3;\n        srcPos = 16;\n        try {\n            Conversion.intToShortArray(src, srcPos, dst, dstPos, nShorts);\n            fail(\"Expected IllegalArgumentException was not thrown\");\n        } catch (IllegalArgumentException e) {\n            assertEquals(\"(nShorts-1)*16+srcPos is greater or equal to than 32\", e.getMessage());\n        }\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testLongToByteArray",
    "generated_path": "ConversionTest_testLongToByteArray.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3;\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.fail;\nimport java.util.UUID;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testLongToByteArray\npublic class ConversionTest_testLongToByteArray {\n    @Test\n    public void testLongToByteArray() {\n        long src = 1234567890L;\n        int srcPos = 0;\n        byte[] dst = new byte[8];\n        int dstPos = 0;\n        int nBytes = 8;\n        byte[] expected = {0x49, 0x96, 0x02, 0xd2, 0x02, 0x00, 0x00, 0x00};\n        byte[] result = Conversion.longToByteArray(src, srcPos, dst, dstPos, nBytes);\n        assertArrayEquals(expected, result);\n        // Test for IllegalArgumentException\n        try {\n            srcPos = 57;\n            nBytes = 8;\n            Conversion.longToByteArray(src, srcPos, dst, dstPos, nBytes);\n            fail(\"Expected IllegalArgumentException was not thrown\");\n        } catch (IllegalArgumentException e) {\n            assertEquals(\"(nBytes-1)*8+srcPos is greater or equal to than 64\", e.getMessage());\n        }\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testLongToShortArray",
    "generated_path": "ConversionTest_testLongToShortArray.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3;\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.fail;\nimport java.util.UUID;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testLongToShortArray\nimport org.junit.Test;\nimport static org.junit.Assert.*;\npublic class ConversionTest_testLongToShortArray {\n    @Test\n    public void testLongToShortArray() {\n        long src = 0x123456789abcdef0L;\n        int srcPos = 4;\n        short[] dst = new short[4];\n        int dstPos = 1;\n        int nShorts = 3;\n        short[] expected = {0x5678, 0x9abc, 0xdef0, 0x0000};\n        Conversion.longToShortArray(src, srcPos, dst, dstPos, nShorts);\n        assertArrayEquals(expected, dst);\n    }\n    @Test(expected = IllegalArgumentException.class)\n    public void testLongToShortArrayThrowsException() {\n        long src = 0x123456789abcdef0L;\n        int srcPos = 4;\n        short[] dst = new short[4];\n        int dstPos = 1;\n        int nShorts = 4;\n        Conversion.longToShortArray(src, srcPos, dst, dstPos, nShorts);\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testShortToByteArray",
    "generated_path": "ConversionTest_testShortToByteArray.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3;\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.fail;\nimport java.util.UUID;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testShortToByteArray\npublic class ConversionTest_testShortToByteArray {\n    @Test\n    public void testShortToByteArray() {\n        short src = 1234;\n        int srcPos = 0;\n        byte[] dst = new byte[2];\n        int dstPos = 0;\n        int nBytes = 2;\n        byte[] expected = {0x04, 0xd2};\n        byte[] result = Conversion.shortToByteArray(src, srcPos, dst, dstPos, nBytes);\n        assertArrayEquals(expected, result);\n        // Test for nBytes = 0\n        nBytes = 0;\n        expected = new byte[2];\n        result = Conversion.shortToByteArray(src, srcPos, dst, dstPos, nBytes);\n        assertArrayEquals(expected, result);\n        // Test for (nBytes-1)*8+srcPos >= 16\n        srcPos = 8;\n        nBytes = 2;\n        try {\n            Conversion.shortToByteArray(src, srcPos, dst, dstPos, nBytes);\n            fail(\"Expected IllegalArgumentException was not thrown\");\n        } catch (IllegalArgumentException e) {\n            assertEquals(\"(nBytes-1)*8+srcPos is greater or equal to than 16\", e.getMessage());\n        }\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testShortToHex",
    "generated_path": "ConversionTest_testShortToHex.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3;\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.fail;\nimport java.util.UUID;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testShortToHex\nimport org.junit.Assert;\nimport org.junit.Test;\npublic class ConversionTest_testShortToHex {\n    @Test\n    public void testShortToHex() {\n        short src = 0x1234;\n        int srcPos = 0;\n        String dstInit = \"0000\";\n        int dstPos = 0;\n        int nHexs = 2;\n        String expected = \"3412\";\n        String result = Conversion.shortToHex(src, srcPos, dstInit, dstPos, nHexs);\n        Assert.assertEquals(expected, result);\n        src = 0x5678;\n        srcPos = 4;\n        dstInit = \"ABCD\";\n        dstPos = 1;\n        nHexs = 3;\n        expected = \"A7CDEF\";\n        result = Conversion.shortToHex(src, srcPos, dstInit, dstPos, nHexs);\n        Assert.assertEquals(expected, result);\n        src = 0x9ABC;\n        srcPos = 8;\n        dstInit = \"FFFFFFFF\";\n        dstPos = 4;\n        nHexs = 2;\n        try {\n            Conversion.shortToHex(src, srcPos, dstInit, dstPos, nHexs);\n            fail(\"IllegalArgumentException should have been thrown\");\n        } catch (IllegalArgumentException e) {\n            // expected exception\n        }\n    }\n}"
  },
  {
    "original_path": "udoprog_tiny-async-java###udoprog_tiny-async-java/tiny-async-core/src/test/java/eu/toolchain/concurrent/CoreAsyncTest###testDoCollect",
    "generated_path": "CoreAsyncTest_testDoCollect.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package eu.toolchain.concurrent;\nimport static eu.toolchain.concurrent.CoreAsync.buildCollectedException;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert.assertTrue;\nimport static org.mockito.Matchers.any;\nimport static org.mockito.Matchers.anyCollection;\nimport static org.mockito.Matchers.eq;\nimport static org.mockito.Mockito.doAnswer;\nimport static org.mockito.Mockito.doNothing;\nimport static org.mockito.Mockito.doReturn;\nimport static org.mockito.Mockito.doThrow;\nimport static org.mockito.Mockito.inOrder;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.never;\nimport static org.mockito.Mockito.spy;\nimport static org.mockito.Mockito.times;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.when;\nimport com.google.common.collect.ImmutableList;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\nimport java.util.concurrent.Callable;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Future;\nimport java.util.function.Consumer;\nimport java.util.function.Function;\nimport java.util.function.Supplier;\nimport org.junit.Before;\nimport org.junit.Rule;\nimport org.junit.Test;\nimport org.junit.rules.ExpectedException;\nimport org.junit.runner.RunWith;\nimport org.mockito.InOrder;\nimport org.mockito.Mock;\nimport org.mockito.invocation.InvocationOnMock;\nimport org.mockito.runners.MockitoJUnitRunner;\nimport org.mockito.stubbing.Answer;\n// original test path: udoprog_tiny-async-java###udoprog_tiny-async-java/tiny-async-core/src/test/java/eu/toolchain/concurrent/CoreAsyncTest###testDoCollect\n@RunWith(MockitoJUnitRunner.class)\npublic class CoreAsyncTest_testDoCollect {\n    @Mock\n    private Stage<Object> stage1;\n    @Mock\n    private Stage<Object> stage2;\n    @Mock\n    private Function<Collection<Object>, String> collector;\n    @Mock\n    private Completable<String> target;\n    @Rule\n    public ExpectedException expectedException = ExpectedException.none();\n    private CoreAsync coreAsync;\n    @Before\n    public void setUp() {\n        coreAsync = spy(new CoreAsync());\n    }\n    @Test\n    public void testDoCollect() throws Exception {\n        final List<Stage<Object>> stages = ImmutableList.of(stage1, stage2);\n        final List<Object> results = ImmutableList.of(new Object(), new Object());\n        when(collector.apply(anyCollection())).thenReturn(\"result\");\n        doNothing().when(coreAsync).bindSignals(eq(target), eq(stages));\n        final CollectHelper<Object, String> helper = mock(CollectHelper.class);\n        doReturn(helper).when(coreAsync).createCollectHelper(eq(stages), eq(collector), eq(target));\n        for (int i = 0; i < stages.size(); i++) {\n            final Stage<Object> stage = stages.get(i);\n            final Object result = results.get(i);\n            doAnswer(new Answer<Void>() {\n                @Override\n                public Void answer(InvocationOnMock invocation) throws Throwable {\n                    helper.handleResult(stage, result);\n                    return null;\n                }\n            }).when(stage).handle(eq(helper));\n        }\n        final Stage<String> result = coreAsync.doCollect(stages, collector);\n        assertNotNull(result);\n        assertEquals(target, result);\n        verify(helper, times(stages.size())).handleResult(any(Stage.class), any());\n        verify(collector).apply(anyCollection());\n        verify(coreAsync).bindSignals(eq(target), eq(stages));\n    }\n}"
  },
  {
    "original_path": "udoprog_tiny-async-java###udoprog_tiny-async-java/tiny-async-core/src/test/java/eu/toolchain/concurrent/CoreAsyncTest###testDoCollectAndDiscard",
    "generated_path": "CoreAsyncTest_testDoCollectAndDiscard.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package eu.toolchain.concurrent;\nimport static eu.toolchain.concurrent.CoreAsync.buildCollectedException;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert.assertTrue;\nimport static org.mockito.Matchers.any;\nimport static org.mockito.Matchers.anyCollection;\nimport static org.mockito.Matchers.eq;\nimport static org.mockito.Mockito.doAnswer;\nimport static org.mockito.Mockito.doNothing;\nimport static org.mockito.Mockito.doReturn;\nimport static org.mockito.Mockito.doThrow;\nimport static org.mockito.Mockito.inOrder;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.never;\nimport static org.mockito.Mockito.spy;\nimport static org.mockito.Mockito.times;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.when;\nimport com.google.common.collect.ImmutableList;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\nimport java.util.concurrent.Callable;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Future;\nimport java.util.function.Consumer;\nimport java.util.function.Function;\nimport java.util.function.Supplier;\nimport org.junit.Before;\nimport org.junit.Rule;\nimport org.junit.Test;\nimport org.junit.rules.ExpectedException;\nimport org.junit.runner.RunWith;\nimport org.mockito.InOrder;\nimport org.mockito.Mock;\nimport org.mockito.invocation.InvocationOnMock;\nimport org.mockito.runners.MockitoJUnitRunner;\nimport org.mockito.stubbing.Answer;\n// original test path: udoprog_tiny-async-java###udoprog_tiny-async-java/tiny-async-core/src/test/java/eu/toolchain/concurrent/CoreAsyncTest###testDoCollectAndDiscard\n@RunWith(MockitoJUnitRunner.class)\npublic class CoreAsyncTest_testDoCollectAndDiscard {\n    @Mock\n    private Stage<Object> stage1;\n    @Mock\n    private Stage<Object> stage2;\n    @Mock\n    private Stage<Object> stage3;\n    @Mock\n    private Completable<Void> completable;\n    @Mock\n    private CollectAndDiscardHelper helper;\n    @Mock\n    private ExecutorService executor;\n    @Rule\n    public ExpectedException expectedException = ExpectedException.none();\n    private CoreAsync coreAsync;\n    @Before\n    public void setUp() {\n        coreAsync = new CoreAsync();\n    }\n    @Test\n    public void testDoCollectAndDiscard() throws Exception {\n        List<Stage<?>> stages = ImmutableList.of(stage1, stage2, stage3);\n        doReturn(completable).when(coreAsync).completable();\n        doReturn(helper).when(coreAsync).newCollectAndDiscardHelper(stages.size(), completable);\n        coreAsync.doCollectAndDiscard(stages);\n        verify(stage1).handle(helper);\n        verify(stage2).handle(helper);\n        verify(stage3).handle(helper);\n        verify(coreAsync).bindSignals(completable, stages);\n    }\n}"
  },
  {
    "original_path": "udoprog_tiny-async-java###udoprog_tiny-async-java/tiny-async-core/src/test/java/eu/toolchain/concurrent/CoreAsyncTest###testDoEventuallyCollect",
    "generated_path": "CoreAsyncTest_testDoEventuallyCollect.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package eu.toolchain.concurrent;\nimport static eu.toolchain.concurrent.CoreAsync.buildCollectedException;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert.assertTrue;\nimport static org.mockito.Matchers.any;\nimport static org.mockito.Matchers.anyCollection;\nimport static org.mockito.Matchers.eq;\nimport static org.mockito.Mockito.doAnswer;\nimport static org.mockito.Mockito.doNothing;\nimport static org.mockito.Mockito.doReturn;\nimport static org.mockito.Mockito.doThrow;\nimport static org.mockito.Mockito.inOrder;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.never;\nimport static org.mockito.Mockito.spy;\nimport static org.mockito.Mockito.times;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.when;\nimport com.google.common.collect.ImmutableList;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\nimport java.util.concurrent.Callable;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Future;\nimport java.util.function.Consumer;\nimport java.util.function.Function;\nimport java.util.function.Supplier;\nimport org.junit.Before;\nimport org.junit.Rule;\nimport org.junit.Test;\nimport org.junit.rules.ExpectedException;\nimport org.junit.runner.RunWith;\nimport org.mockito.InOrder;\nimport org.mockito.Mock;\nimport org.mockito.invocation.InvocationOnMock;\nimport org.mockito.runners.MockitoJUnitRunner;\nimport org.mockito.stubbing.Answer;\n// original test path: udoprog_tiny-async-java###udoprog_tiny-async-java/tiny-async-core/src/test/java/eu/toolchain/concurrent/CoreAsyncTest###testDoEventuallyCollect\n@RunWith(MockitoJUnitRunner.class)\npublic class CoreAsyncTest_testDoEventuallyCollect {\n    @Mock\n    private ExecutorService executor;\n    @Mock\n    private Caller caller;\n    @Mock\n    private Callable<Stage<String>> task1;\n    @Mock\n    private Callable<Stage<String>> task2;\n    @Mock\n    private Consumer<String> consumer;\n    @Mock\n    private Supplier<Integer> supplier;\n    @Mock\n    private Future<Stage<String>> future1;\n    @Mock\n    private Future<Stage<String>> future2;\n    @Mock\n    private Stage<String> stage1;\n    @Mock\n    private Stage<String> stage2;\n    @Mock\n    private Completable<Integer> completable;\n    @Rule\n    public ExpectedException expectedException = ExpectedException.none();\n    private CoreAsync coreAsync;\n    @Before\n    public void setUp() {\n        coreAsync = spy(new CoreAsync(executor, caller));\n    }\n    @Test\n    public void testDoEventuallyCollect() throws Exception {\n        List<Callable<Stage<String>>> tasks = ImmutableList.of(task1, task2);\n        List<Future<Stage<String>>> futures = ImmutableList.of(future1, future2);\n        List<Stage<String>> stages = ImmutableList.of(stage1, stage2);\n        when(executor()).thenReturn(executor);\n        when(completable()).thenReturn(completable);\n        when(supplier.get()).thenReturn(2);\n        when(executor.invokeAll(anyCollection())).thenReturn(futures);\n        when(future1.get()).thenReturn(stage1);\n        when(future2.get()).thenReturn(stage2);\n        when(stage1.handle(any(Function.class))).thenReturn(stage1);\n        when(stage2.handle(any(Function.class))).thenReturn(stage2);\n        doNothing().when(consumer).accept(any(String.class));\n        doAnswer((Answer<Void>) invocation -> {\n            ((Runnable) invocation.getArgument(0)).run();\n            return null;\n        }).when(executor).execute(any(Runnable.class));\n        Stage<Integer> result = coreAsync.doEventuallyCollect(tasks, consumer, supplier, 2);\n        assertNotNull(result);\n        verify(executor, times(1)).invokeAll(eq(tasks));\n        verify(stage1, times(1)).handle(any(Function.class));\n        verify(stage2, times(1)).handle(any(Function.class));\n        verify(consumer, times(1)).accept(eq(stage1.join()));\n        verify(consumer, times(1)).accept(eq(stage2.join()));\n        verify(completable, times(1)).complete(eq(2));\n    }\n    @Test\n    public void testDoEventuallyCollectWithException() throws Exception {\n        List<Callable<Stage<String>>> tasks = ImmutableList.of(task1, task2);\n        List<Future<Stage<String>>> futures = ImmutableList.of(future1, future2);\n        List<Stage<String>> stages = ImmutableList.of(stage1, stage2);\n        when(executor()).thenReturn(executor);\n        when(completable()).thenReturn(completable);\n        when(supplier.get()).thenReturn(2);\n        when(executor.invokeAll(anyCollection())).thenReturn(futures);\n        when(future1.get()).thenReturn(stage1);\n        when(future2.get()).thenReturn(stage2);\n        when(stage1.handle(any(Function.class))).thenReturn(stage1);\n        when(stage2.handle(any(Function.class))).thenReturn(stage2);\n        doThrow(new RuntimeException(\"Error\")).when(consumer).accept(any(String.class));\n        doAnswer((Answer<Void>) invocation -> {\n            ((Runnable) invocation.getArgument(0)).run();\n            return null;\n        }).when(executor).execute(any(Runnable.class));\n        expectedException.expect(RuntimeException.class);\n        expectedException.expectMessage(\"Error\");\n        Stage<Integer> result = coreAsync.doEventuallyCollect(tasks, consumer, supplier, 2);\n        assertNotNull(result);\n        verify(executor, times(1)).invokeAll(eq(tasks));\n        verify(stage1, times(1)).handle(any(Function.class));\n        verify(stage2, times(1)).handle(any(Function.class));\n        verify(consumer, times(1)).accept(eq(stage1.join()));\n        verify(consumer, times(1)).accept(eq(stage2.join()));\n        verify(completable, never()).complete(any(Integer.class));\n        verify(completable, times(1)).completeExceptionally(eq(buildCollectedException(stages)));\n    }\n}"
  },
  {
    "original_path": "udoprog_tiny-async-java###udoprog_tiny-async-java/tiny-async-core/src/test/java/eu/toolchain/concurrent/CoreAsyncTest###testDoEventuallyCollectImmediate",
    "generated_path": "CoreAsyncTest_testDoEventuallyCollectImmediate.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package eu.toolchain.concurrent;\nimport static eu.toolchain.concurrent.CoreAsync.buildCollectedException;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert.assertTrue;\nimport static org.mockito.Matchers.any;\nimport static org.mockito.Matchers.anyCollection;\nimport static org.mockito.Matchers.eq;\nimport static org.mockito.Mockito.doAnswer;\nimport static org.mockito.Mockito.doNothing;\nimport static org.mockito.Mockito.doReturn;\nimport static org.mockito.Mockito.doThrow;\nimport static org.mockito.Mockito.inOrder;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.never;\nimport static org.mockito.Mockito.spy;\nimport static org.mockito.Mockito.times;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.when;\nimport com.google.common.collect.ImmutableList;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\nimport java.util.concurrent.Callable;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Future;\nimport java.util.function.Consumer;\nimport java.util.function.Function;\nimport java.util.function.Supplier;\nimport org.junit.Before;\nimport org.junit.Rule;\nimport org.junit.Test;\nimport org.junit.rules.ExpectedException;\nimport org.junit.runner.RunWith;\nimport org.mockito.InOrder;\nimport org.mockito.Mock;\nimport org.mockito.invocation.InvocationOnMock;\nimport org.mockito.runners.MockitoJUnitRunner;\nimport org.mockito.stubbing.Answer;\n// original test path: udoprog_tiny-async-java###udoprog_tiny-async-java/tiny-async-core/src/test/java/eu/toolchain/concurrent/CoreAsyncTest###testDoEventuallyCollectImmediate\n@RunWith(MockitoJUnitRunner.class)\npublic class CoreAsyncTest_testDoEventuallyCollectImmediate {\n    @Mock\n    private ExecutorService executorService;\n    @Rule\n    public ExpectedException expectedException = ExpectedException.none();\n    private CoreAsync coreAsync;\n    @Before\n    public void setUp() {\n        coreAsync = spy(new CoreAsync());\n    }\n    @Test\n    public void testDoEventuallyCollectImmediate() throws Exception {\n        final List<Callable<Stage<String>>> callables = ImmutableList.of(\n                () -> coreAsync.completed(\"foo\"),\n                () -> coreAsync.completed(\"bar\"),\n                () -> coreAsync.failed(new RuntimeException(\"baz\"))\n        );\n        final List<String> collected = new ArrayList<>();\n        final Supplier<List<String>> supplier = ArrayList::new;\n        final Consumer<String> consumer = collected::add;\n        final Stage<List<String>> result = coreAsync.doEventuallyCollectImmediate(callables, consumer, supplier);\n        assertNotNull(result);\n        final InOrder order = inOrder(coreAsync);\n        order.verify(coreAsync, times(1)).streamCollect(anyCollection(), eq(consumer), eq(supplier));\n        final List<String> expectedCollected = ImmutableList.of(\"foo\", \"bar\");\n        assertEquals(expectedCollected, collected);\n        expectedException.expect(buildCollectedException(ImmutableList.of(new RuntimeException(\"baz\"))));\n        result.join();\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/time/DateUtilsTest###testTruncate",
    "generated_path": "DateUtilsTest_testTruncate.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3.time;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert.assertNotSame;\nimport static org.junit.Assert.assertTrue;\nimport static org.junit.Assert.fail;\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.Modifier;\nimport java.text.DateFormat;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.GregorianCalendar;\nimport java.util.Iterator;\nimport java.util.Locale;\nimport java.util.NoSuchElementException;\nimport java.util.TimeZone;\nimport org.apache.commons.lang3.test.SystemDefaults;\nimport org.apache.commons.lang3.test.SystemDefaultsSwitch;\nimport org.junit.Before;\nimport org.junit.BeforeClass;\nimport org.junit.Rule;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/time/DateUtilsTest###testTruncate\nimport java.util.Calendar;\nimport org.junit.Assert;\nimport org.junit.Test;\npublic class DateUtilsTest_testTruncate {\n    @Test(expected = IllegalArgumentException.class)\n    public void testTruncateWithNullDate() {\n        DateUtils.truncate(null, Calendar.DAY_OF_MONTH);\n    }\n    @Test\n    public void testTruncateWithDayOfMonth() {\n        Calendar date = Calendar.getInstance();\n        date.set(2021, Calendar.JANUARY, 15, 10, 30, 45);\n        date.set(Calendar.MILLISECOND, 0);\n        Calendar expected = Calendar.getInstance();\n        expected.set(2021, Calendar.JANUARY, 15, 0, 0, 0);\n        expected.set(Calendar.MILLISECOND, 0);\n        Calendar actual = DateUtils.truncate(date, Calendar.DAY_OF_MONTH);\n        Assert.assertEquals(expected.getTime(), actual.getTime());\n    }\n    @Test\n    public void testTruncateWithHourOfDay() {\n        Calendar date = Calendar.getInstance();\n        date.set(2021, Calendar.JANUARY, 15, 10, 30, 45);\n        date.set(Calendar.MILLISECOND, 0);\n        Calendar expected = Calendar.getInstance();\n        expected.set(2021, Calendar.JANUARY, 15, 10, 0, 0);\n        expected.set(Calendar.MILLISECOND, 0);\n        Calendar actual = DateUtils.truncate(date, Calendar.HOUR_OF_DAY);\n        Assert.assertEquals(expected.getTime(), actual.getTime());\n    }\n}"
  },
  {
    "original_path": "syphr42_prom###syphr42_prom/src/test/java/org/syphr/prom/DefaultEvaluatorTest###testGetreferences",
    "generated_path": "DefaultEvaluatorTest_testGetreferences.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package org.syphr.prom;\nimport java.util.List;\nimport java.util.Properties;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport junit.framework.Assert;\nimport org.junit.BeforeClass;\nimport org.junit.Test;\n// original test path: syphr42_prom###syphr42_prom/src/test/java/org/syphr/prom/DefaultEvaluatorTest###testGetreferences\npublic class DefaultEvaluatorTest_testGetreferences {\n    private static Retriever mockRetriever;\n    @BeforeClass\n    public static void setUp() {\n        mockRetriever = Mockito.mock(Retriever.class);\n    }\n    @Test\n    public void testGetReferences() {\n        DefaultEvaluator evaluator = new DefaultEvaluator();\n        String rawValue = \"test\";\n        List<Reference> references = evaluator.getReferences(rawValue, mockRetriever);\n        Assert.assertNotNull(references);\n    }\n}"
  },
  {
    "original_path": "syphr42_prom###syphr42_prom/src/test/java/org/syphr/prom/DefaultEvaluatorTest###testIsReferencing",
    "generated_path": "DefaultEvaluatorTest_testIsReferencing.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package org.syphr.prom;\nimport java.util.List;\nimport java.util.Properties;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport junit.framework.Assert;\nimport org.junit.BeforeClass;\nimport org.junit.Test;\n// original test path: syphr42_prom###syphr42_prom/src/test/java/org/syphr/prom/DefaultEvaluatorTest###testIsReferencing\nimport org.junit.BeforeClass;\nimport org.junit.Test;\npublic class DefaultEvaluatorTest_testIsReferencing {\n    private static Retriever retriever;\n    @BeforeClass\n    public static void setUp() {\n        Properties properties = new Properties();\n        properties.setProperty(\"key1\", \"value1\");\n        properties.setProperty(\"key2\", \"value2\");\n        retriever = new Retriever(properties);\n    }\n    @Test\n    public void testIsReferencing() {\n        DefaultEvaluator evaluator = new DefaultEvaluator();\n        String rawValue = \"This is a ${name} reference\";\n        String name = \"name\";\n        boolean result = evaluator.isReferencing(rawValue, name, retriever);\n        Assert.assertTrue(result);\n    }\n}"
  },
  {
    "original_path": "syphr42_prom###syphr42_prom/src/test/java/org/syphr/prom/DefaultEvaluatorTest###testReferenceAt",
    "generated_path": "DefaultEvaluatorTest_testReferenceAt.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package org.syphr.prom;\nimport java.util.List;\nimport java.util.Properties;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport junit.framework.Assert;\nimport org.junit.BeforeClass;\nimport org.junit.Test;\n// original test path: syphr42_prom###syphr42_prom/src/test/java/org/syphr/prom/DefaultEvaluatorTest###testReferenceAt\nimport org.junit.Before;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\npublic class DefaultEvaluatorTest_testReferenceAt {\n    private DefaultEvaluator evaluator;\n    @Before\n    public void setUp() {\n        evaluator = new DefaultEvaluator();\n    }\n    @Test\n    public void testReferenceAt() {\n        String rawValue = \"Hello World\";\n        int position = 6;\n        Retriever retriever = new RetrieverImpl();\n        Reference expectedReference = new ReferenceImpl(\"World\", 6);\n        Reference actualReference = evaluator.referenceAt(rawValue, position, retriever);\n        assertEquals(expectedReference, actualReference);\n    }\n} \nclass RetrieverImpl implements Retriever {\n    @Override\n    public List<String> retrieve(String query) {\n        // implementation\n    }\n}\nclass ReferenceImpl implements Reference {\n    private String value;\n    private int position;\n    public ReferenceImpl(String value, int position) {\n        this.value = value;\n        this.position = position;\n    }\n    @Override\n    public String getValue() {\n        return value;\n    }\n    @Override\n    public int getPosition() {\n        return position;\n    }\n    @Override\n    public boolean equals(Object obj) {\n        if (obj == null) {\n            return false;\n        }\n        if (getClass() != obj.getClass()) {\n            return false;\n        }\n        final ReferenceImpl other = (ReferenceImpl) obj;\n        if ((this.value == null) ? (other.value != null) : !this.value.equals(other.value)) {\n            return false;\n        }\n        if (this.position != other.position) {\n            return false;\n        }\n        return true;\n    }\n    @Override\n    public int hashCode() {\n        int hash = 7;\n        hash = 89 * hash + (this.value != null ? this.value.hashCode() : 0);\n        hash = 89 * hash + this.position;\n        return hash;\n    }\n}"
  },
  {
    "original_path": "duraspace_fcrepo-cloudsync###duraspace_fcrepo-cloudsync/fcrepo-cloudsync-service/src/test/java/org/duraspace/fcrepo/cloudsync/service/backend/DuraCloudConnectorTest###testPutObject",
    "generated_path": "DuraCloudConnectorTest_testPutObject.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package org.duraspace.fcrepo.cloudsync.service.backend;\nimport com.github.cwilper.fcrepo.dto.core.ControlGroup;\nimport com.github.cwilper.fcrepo.dto.core.Datastream;\nimport com.github.cwilper.fcrepo.dto.core.DatastreamVersion;\nimport com.github.cwilper.fcrepo.dto.core.FedoraObject;\nimport com.github.cwilper.fcrepo.httpclient.MultiThreadedHttpClient;\nimport junit.framework.Assert;\nimport org.apache.commons.io.IOUtils;\nimport org.apache.commons.io.input.AutoCloseInputStream;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.StatusLine;\nimport org.apache.http.client.methods.HttpHead;\nimport org.apache.http.client.methods.HttpPut;\nimport org.easymock.EasyMock;\nimport org.junit.After;\nimport org.junit.Before;\nimport org.junit.BeforeClass;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.powermock.api.easymock.PowerMock;\nimport org.powermock.core.classloader.annotations.PrepareForTest;\nimport org.powermock.modules.junit4.PowerMockRunner;\nimport java.io.BufferedWriter;\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.net.URI;\nimport java.util.Date;\nimport java.util.Random;\n// original test path: duraspace_fcrepo-cloudsync###duraspace_fcrepo-cloudsync/fcrepo-cloudsync-service/src/test/java/org/duraspace/fcrepo/cloudsync/service/backend/DuraCloudConnectorTest###testPutObject\n@RunWith(PowerMockRunner.class)\n@PrepareForTest({DuraCloudConnector.class, HttpHead.class, HttpPut.class})\npublic class DuraCloudConnectorTest_testPutObject {\n    private DuraCloudConnector connector;\n    private MultiThreadedHttpClient httpClient;\n    private StoreConnector source;\n    private FedoraObject object;\n    private Datastream datastream;\n    private DatastreamVersion version;\n    private URI spaceURI;\n    private String providerId;\n    private String prefix;\n    private long contentChunkSize;\n    @BeforeClass\n    public static void setUpClass() {\n        // Set up any necessary class-level dependencies\n    }\n    @Before\n    public void setUp() {\n        // Set up test dependencies\n        httpClient = PowerMock.createMock(MultiThreadedHttpClient.class);\n        source = PowerMock.createMock(StoreConnector.class);\n        object = PowerMock.createMock(FedoraObject.class);\n        datastream = PowerMock.createMock(Datastream.class);\n        version = PowerMock.createMock(DatastreamVersion.class);\n        spaceURI = URI.create(\"http://example.com/space\");\n        providerId = \"providerId\";\n        prefix = \"prefix\";\n        contentChunkSize = 1024L;\n        connector = new DuraCloudConnector(spaceURI, providerId, prefix, httpClient, contentChunkSize);\n    }\n    @After\n    public void tearDown() {\n        // Tear down any test dependencies\n    }\n    @Test\n    public void testPutObject() throws Exception {\n        // Set up test data\n        String pid = \"test:pid\";\n        String dsId = \"test:dsId\";\n        String content = \"test content\";\n        String md5 = \"testmd5\";\n        boolean overwrite = true;\n        boolean copyExternal = true;\n        boolean copyRedirect = true;\n        Date date = new Date();\n        Random random = new Random();\n        byte[] bytes = new byte[1024];\n        random.nextBytes(bytes);\n        // Set up expectations\n        EasyMock.expect(object.pid()).andReturn(pid);\n        EasyMock.expect(object.datastreams()).andReturn(Collections.singletonMap(dsId, datastream));\n        EasyMock.expect(datastream.controlGroup()).andReturn(ControlGroup.MANAGED);\n        EasyMock.expect(datastream.versions()).andReturn(Collections.singletonMap(1L, version));\n        EasyMock.expect(version.content()).andReturn(new AutoCloseInputStream(new ByteArrayInputStream(bytes)));\n        EasyMock.expect(version.created()).andReturn(date);\n        EasyMock.expect(version.mimeType()).andReturn(\"text/plain\");\n        EasyMock.expect(version.label()).andReturn(\"test label\");\n        EasyMock.expect(version.checksumType()).andReturn(\"MD5\");\n        EasyMock.expect(version.checksum()).andReturn(md5);\n        EasyMock.expect(source.getModifiedDate(pid)).andReturn(date);\n        HttpHead head = PowerMock.createMock(HttpHead.class);\n        EasyMock.expectNew(HttpHead.class, spaceURI.resolve(pid)).andReturn(head);\n        HttpResponse response = PowerMock.createMock(HttpResponse.class);\n        StatusLine statusLine = PowerMock.createMock(StatusLine.class);\n        EasyMock.expect(httpClient.execute(head)).andReturn(response);\n        EasyMock.expect(response.getStatusLine()).andReturn(statusLine);\n        EasyMock.expect(statusLine.getStatusCode()).andReturn(404);\n        HttpPut put = PowerMock.createMock(HttpPut.class);\n        EasyMock.expectNew(HttpPut.class, spaceURI.resolve(pid)).andReturn(put);\n        EasyMock.expect(put.addHeader(\"Content-Type\", \"text/plain\")).andReturn(put);\n        EasyMock.expect(put.addHeader(\"Content-Length\", Long.toString(bytes.length))).andReturn(put);\n        EasyMock.expect(put.addHeader(\"Content-MD5\", md5)).andReturn(put);\n        EasyMock.expect(put.addHeader(\"Last-Modified\", DuraCloudUtils.formatDate(date))).andReturn(put);\n        EasyMock.expect(put.setEntity(EasyMock.anyObject(InputStreamEntity.class))).andReturn(put);\n        EasyMock.expect(httpClient.execute(put)).andReturn(response);\n        EasyMock.expect(response.getStatusLine()).andReturn(statusLine);\n        EasyMock.expect(statusLine.getStatusCode()).andReturn(201);\n        // Replay the mocks\n        PowerMock.replayAll();\n        // Call the method under test\n        boolean result = connector.putObject(object, source, overwrite, copyExternal, copyRedirect);\n        // Verify the results\n        Assert.assertTrue(result);\n        // Verify the mocks\n        PowerMock.verifyAll();\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest###testLexx",
    "generated_path": "DurationFormatUtilsTest_testLexx.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3.time;\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert.assertTrue;\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.Modifier;\nimport java.util.Calendar;\nimport java.util.TimeZone;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest###testLexx\nimport org.junit.Test;\nimport static org.junit.Assert.*;\npublic class DurationFormatUtilsTest_testLexx {\n    @Test\n    public void testLexx() {\n        String format = \"yMdHmsS\";\n        Token[] expectedTokens = {\n                new Token(DurationFormatUtils.y),\n                new Token(DurationFormatUtils.M),\n                new Token(DurationFormatUtils.d),\n                new Token(DurationFormatUtils.H),\n                new Token(DurationFormatUtils.m),\n                new Token(DurationFormatUtils.s),\n                new Token(DurationFormatUtils.S)\n        };\n        Token[] actualTokens = DurationFormatUtils.lexx(format);\n        assertArrayEquals(expectedTokens, actualTokens);\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/time/FastDatePrinterTest###testEquals",
    "generated_path": "FastDatePrinterTest_testEquals.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3.time;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertTrue;\nimport java.io.Serializable;\nimport java.text.FieldPosition;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.GregorianCalendar;\nimport java.util.Locale;\nimport java.util.TimeZone;\nimport org.apache.commons.lang3.SerializationUtils;\nimport org.apache.commons.lang3.test.SystemDefaults;\nimport org.apache.commons.lang3.test.SystemDefaultsSwitch;\nimport org.junit.Rule;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/time/FastDatePrinterTest###testEquals\nimport org.junit.Test;\nimport static org.junit.Assert.*;\npublic class FastDatePrinterTest_testEquals {\n    @Test\n    public void testEquals() {\n        // Create two FastDatePrinter objects with the same values\n        FastDatePrinter fdp1 = new FastDatePrinter(\"yyyy-MM-dd\", TimeZone.getTimeZone(\"GMT\"), Locale.US);\n        FastDatePrinter fdp2 = new FastDatePrinter(\"yyyy-MM-dd\", TimeZone.getTimeZone(\"GMT\"), Locale.US);\n        // Test that the two objects are equal\n        assertTrue(fdp1.equals(fdp2));\n        // Create two FastDatePrinter objects with different values\n        FastDatePrinter fdp3 = new FastDatePrinter(\"yyyy-MM-dd\", TimeZone.getTimeZone(\"GMT\"), Locale.US);\n        FastDatePrinter fdp4 = new FastDatePrinter(\"yyyy-MM-dd HH:mm:ss\", TimeZone.getTimeZone(\"GMT\"), Locale.US);\n        // Test that the two objects are not equal\n        assertFalse(fdp3.equals(fdp4));\n    }\n}"
  }
]