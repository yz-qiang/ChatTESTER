[
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/AnnotationUtilsTest###testIsValidAnnotationMemberType",
    "generated_path": "AnnotationUtilsTest_testIsValidAnnotationMemberType.java",
    "Compile_result": 1,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3;\nimport static java.lang.annotation.ElementType.FIELD;\nimport static java.lang.annotation.RetentionPolicy.RUNTIME;\nimport static org.apache.commons.lang3.AnnotationUtilsTest.Stooge.CURLY;\nimport static org.apache.commons.lang3.AnnotationUtilsTest.Stooge.LARRY;\nimport static org.apache.commons.lang3.AnnotationUtilsTest.Stooge.MOE;\nimport static org.apache.commons.lang3.AnnotationUtilsTest.Stooge.SHEMP;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertTrue;\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.Target;\nimport java.lang.reflect.Array;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.InvocationHandler;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Proxy;\nimport java.util.Collection;\nimport java.util.Map;\nimport org.junit.Before;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/AnnotationUtilsTest###testIsValidAnnotationMemberType\nimport org.junit.Test;\nimport static org.junit.Assert.*;\npublic class AnnotationUtilsTest_testIsValidAnnotationMemberType {\n    @Test\n    public void testIsValidAnnotationMemberType() {\n        assertTrue(AnnotationUtils.isValidAnnotationMemberType(int.class));\n        assertTrue(AnnotationUtils.isValidAnnotationMemberType(String.class));\n        assertTrue(AnnotationUtils.isValidAnnotationMemberType(Class.class));\n        assertTrue(AnnotationUtils.isValidAnnotationMemberType(AnnotationUtilsTest_testIsValidAnnotationMemberType.class));\n        assertTrue(AnnotationUtils.isValidAnnotationMemberType(AnnotationUtils.class));\n        assertTrue(AnnotationUtils.isValidAnnotationMemberType(AnnotationUtilsTest_testIsValidAnnotationMemberType.Stooge.class));\n        assertTrue(AnnotationUtils.isValidAnnotationMemberType(AnnotationUtilsTest_testIsValidAnnotationMemberType.Stooge[].class));\n        assertFalse(AnnotationUtils.isValidAnnotationMemberType(Collection.class));\n        assertFalse(AnnotationUtils.isValidAnnotationMemberType(Map.class));\n        assertFalse(AnnotationUtils.isValidAnnotationMemberType(Array.class));\n        assertFalse(AnnotationUtils.isValidAnnotationMemberType(Field.class));\n        assertFalse(AnnotationUtils.isValidAnnotationMemberType(InvocationHandler.class));\n        assertFalse(AnnotationUtils.isValidAnnotationMemberType(Method.class));\n        assertFalse(AnnotationUtils.isValidAnnotationMemberType(Proxy.class));\n        assertFalse(AnnotationUtils.isValidAnnotationMemberType(Target.class));\n        assertFalse(AnnotationUtils.isValidAnnotationMemberType(Retention.class));\n        assertFalse(AnnotationUtils.isValidAnnotationMemberType(ElementType.class));\n        assertFalse(AnnotationUtils.isValidAnnotationMemberType(CURLY.getClass()));\n        assertFalse(AnnotationUtils.isValidAnnotationMemberType(LARRY.getClass()));\n        assertFalse(AnnotationUtils.isValidAnnotationMemberType(MOE.getClass()));\n        assertFalse(AnnotationUtils.isValidAnnotationMemberType(SHEMP.getClass()));\n    }\n    enum Stooge {\n        MOE, LARRY, CURLY, SHEMP\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/AnnotationUtilsTest###testToString",
    "generated_path": "AnnotationUtilsTest_testToString.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3;\nimport static java.lang.annotation.ElementType.FIELD;\nimport static java.lang.annotation.RetentionPolicy.RUNTIME;\nimport static org.apache.commons.lang3.AnnotationUtilsTest.Stooge.CURLY;\nimport static org.apache.commons.lang3.AnnotationUtilsTest.Stooge.LARRY;\nimport static org.apache.commons.lang3.AnnotationUtilsTest.Stooge.MOE;\nimport static org.apache.commons.lang3.AnnotationUtilsTest.Stooge.SHEMP;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertTrue;\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.Target;\nimport java.lang.reflect.Array;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.InvocationHandler;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Proxy;\nimport java.util.Collection;\nimport java.util.Map;\nimport org.junit.Before;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/AnnotationUtilsTest###testToString\nimport java.lang.annotation.Annotation;\nimport org.junit.Assert;\nimport org.junit.Test;\npublic class AnnotationUtilsTest_testToString {\n    @Retention(RUNTIME)\n    @Target(FIELD)\n    public @interface Stooge {\n        String value() default \"\";\n        int age() default 0;\n        Stooge[] friends() default {};\n        enum HairColor { BALD, BLONDE, BROWN, BLACK, RED, GREY };\n        HairColor hairColor() default HairColor.BALD;\n        Stooge[] enemies() default { SHEMP };\n        public static final Stooge MOE = null;\n        public static final Stooge LARRY = null;\n        public static final Stooge CURLY = null;\n        public static final Stooge SHEMP = null;\n    }\n    @Test\n    public void testToString() {\n        @Stooge(value = \"Moe Howard\", age = 77, hairColor = Stooge.HairColor.BROWN, friends = { LARRY, CURLY })\n        class Moe {\n            @Stooge(\"Larry Fine\")\n            private Stooge larry;\n            @Stooge(value = \"Curly Howard\", hairColor = Stooge.HairColor.BLONDE, enemies = { MOE })\n            private Stooge curly;\n            @Stooge(\"Shemp Howard\")\n            private Stooge shemp;\n            @Override\n            public String toString() {\n                return AnnotationUtils.toString(getClass().getAnnotation(Stooge.class));\n            }\n        }\n        Moe moe = new Moe();\n        String expected = \"@Stooge(value=Moe Howard, age=77, hairColor=BROWN, friends=[@Stooge(Larry Fine), @Stooge(value=Curly Howard, hairColor=BLONDE, enemies=[@Stooge(Moe Howard)])], enemies=[@Stooge(Shemp Howard)])\";\n        Assert.assertEquals(expected, moe.toString());\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ArrayUtilsTest###testClone",
    "generated_path": "ArrayUtilsTest_testClone.java",
    "Compile_result": 1,
    "Test_result": 1,
    "Gen_Test": "package org.apache.commons.lang3;\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert.assertNotSame;\nimport static org.junit.Assert.assertNull;\nimport static org.junit.Assert.assertSame;\nimport static org.junit.Assert.assertTrue;\nimport static org.junit.Assert.fail;\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.Modifier;\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.Date;\nimport java.util.Map;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ArrayUtilsTest###testClone\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertNull;\npublic class ArrayUtilsTest_testClone {\n    @Test\n    public void testClone() {\n        boolean[] originalArray = {true, false, true};\n        boolean[] clonedArray = ArrayUtils.clone(originalArray);\n        assertArrayEquals(originalArray, clonedArray);\n        originalArray = null;\n        clonedArray = ArrayUtils.clone(originalArray);\n        assertNull(clonedArray);\n    }\n}"
  },
  {
    "original_path": "XDean_Java-EX###XDean_Java-EX/src/test/java/cn/xdean/jex/lang/ArrayUtilTest###testCompare",
    "generated_path": "ArrayUtilTest_testCompare.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package cn.xdean.jex.lang;\nimport org.junit.Test;\nimport static cn.xdean.jex.lang.collection.ArrayUtil.*;\nimport static org.junit.Assert.*;\n// original test path: XDean_Java-EX###XDean_Java-EX/src/test/java/cn/xdean/jex/lang/ArrayUtilTest###testCompare\nimport org.junit.Test;\nimport static org.junit.Assert.*;\npublic class ArrayUtilTest_testCompare {\n    @Test\n    public void testCompare() {\n        Integer[] a = {1, 2, 3};\n        Integer[] b = {1, 2, 3};\n        Integer[] c = {1, 2, 4};\n        Integer[] d = {1, 2};\n        assertEquals(0, ArrayUtil.compare(a, b));\n        assertTrue(ArrayUtil.compare(a, c) < 0);\n        assertTrue(ArrayUtil.compare(c, a) > 0);\n        try {\n            ArrayUtil.compare(a, d);\n            fail(\"Expected IllegalArgumentException\");\n        } catch (IllegalArgumentException e) {\n            // expected\n        }\n    }\n}"
  },
  {
    "original_path": "XDean_Java-EX###XDean_Java-EX/src/test/java/cn/xdean/jex/lang/ArrayUtilTest###testDeepClone",
    "generated_path": "ArrayUtilTest_testDeepClone.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package cn.xdean.jex.lang;\nimport org.junit.Test;\nimport static cn.xdean.jex.lang.collection.ArrayUtil.*;\nimport static org.junit.Assert.*;\n// original test path: XDean_Java-EX###XDean_Java-EX/src/test/java/cn/xdean/jex/lang/ArrayUtilTest###testDeepClone\nimport org.junit.Test;\nimport static org.junit.Assert.*;\npublic class ArrayUtilTest_testDeepClone {\n    @Test\n    public void testDeepClone() {\n        Integer[] originalArray = {1, 2, 3};\n        Integer[] clonedArray = (Integer[]) ArrayUtil.deepClone(originalArray);\n        assertNotSame(originalArray, clonedArray);\n        assertArrayEquals(originalArray, clonedArray);\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testBinaryToByte",
    "generated_path": "ConversionTest_testBinaryToByte.java",
    "Compile_result": 1,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3;\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.fail;\nimport java.util.UUID;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testBinaryToByte\npublic class ConversionTest_testBinaryToByte {\n    @Test\n    public void testBinaryToByte() {\n        boolean[] src = {true, false, true, false, true, false, true, false};\n        int srcPos = 2;\n        byte dstInit = 0;\n        int dstPos = 3;\n        int nBools = 4;\n        byte expected = 0b00011000;\n        byte result = Conversion.binaryToByte(src, srcPos, dstInit, dstPos, nBools);\n        assertEquals(expected, result);\n        // Test for src array with length 0\n        boolean[] emptySrc = {};\n        byte emptyExpected = dstInit;\n        byte emptyResult = Conversion.binaryToByte(emptySrc, srcPos, dstInit, dstPos, nBools);\n        assertEquals(emptyExpected, emptyResult);\n        // Test for nBools-1+dstPos >= 8\n        int invalidDstPos = 6;\n        try {\n            Conversion.binaryToByte(src, srcPos, dstInit, invalidDstPos, nBools);\n            fail(\"Expected IllegalArgumentException was not thrown\");\n        } catch (IllegalArgumentException e) {\n            assertEquals(\"nBools-1+dstPos is greater or equal to than 8\", e.getMessage());\n        }\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testBinaryToInt",
    "generated_path": "ConversionTest_testBinaryToInt.java",
    "Compile_result": 1,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3;\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.fail;\nimport java.util.UUID;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testBinaryToInt\npublic class ConversionTest_testBinaryToInt {\n    @Test\n    public void testBinaryToInt() {\n        boolean[] src = {true, false, true, false};\n        int srcPos = 0;\n        int dstInit = 0;\n        int dstPos = 0;\n        int nBools = 4;\n        int expected = 10;\n        int result = Conversion.binaryToInt(src, srcPos, dstInit, dstPos, nBools);\n        assertEquals(expected, result);\n        boolean[] src2 = {false, true, false, true, false, true};\n        int srcPos2 = 1;\n        int dstInit2 = 0;\n        int dstPos2 = 2;\n        int nBools2 = 4;\n        int expected2 = 10;\n        int result2 = Conversion.binaryToInt(src2, srcPos2, dstInit2, dstPos2, nBools2);\n        assertEquals(expected2, result2);\n        boolean[] src3 = {true, true, true, true, true, true, true, true};\n        int srcPos3 = 0;\n        int dstInit3 = 0;\n        int dstPos3 = 24;\n        int nBools3 = 8;\n        int expected3 = -256;\n        int result3 = Conversion.binaryToInt(src3, srcPos3, dstInit3, dstPos3, nBools3);\n        assertEquals(expected3, result3);\n        boolean[] src4 = {};\n        int srcPos4 = 0;\n        int dstInit4 = 5;\n        int dstPos4 = 0;\n        int nBools4 = 0;\n        int expected4 = 5;\n        int result4 = Conversion.binaryToInt(src4, srcPos4, dstInit4, dstPos4, nBools4);\n        assertEquals(expected4, result4);\n        boolean[] src5 = {false, false, false, false, false, false, false, false, false, false};\n        int srcPos5 = 0;\n        int dstInit5 = 0;\n        int dstPos5 = 0;\n        int nBools5 = 10;\n        int expected5 = 0;\n        int result5 = Conversion.binaryToInt(src5, srcPos5, dstInit5, dstPos5, nBools5);\n        assertEquals(expected5, result5);\n        boolean[] src6 = {true, true, true, true, true, true, true, true, true, true};\n        int srcPos6 = 0;\n        int dstInit6 = 0;\n        int dstPos6 = 0;\n        int nBools6 = 10;\n        int expected6 = 1023;\n        int result6 = Conversion.binaryToInt(src6, srcPos6, dstInit6, dstPos6, nBools6);\n        assertEquals(expected6, result6);\n        boolean[] src7 = {true, false, true, false, true, false, true, false, true, false};\n        int srcPos7 = 0;\n        int dstInit7 = 0;\n        int dstPos7 = 0;\n        int nBools7 = 10;\n        int expected7 = 682;\n        int result7 = Conversion.binaryToInt(src7, srcPos7, dstInit7, dstPos7, nBools7);\n        assertEquals(expected7, result7);\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testBinaryToLong",
    "generated_path": "ConversionTest_testBinaryToLong.java",
    "Compile_result": 1,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3;\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.fail;\nimport java.util.UUID;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testBinaryToLong\npublic class ConversionTest_testBinaryToLong {\n    @Test\n    public void testBinaryToLong() {\n        boolean[] src = {true, false, true, false};\n        int srcPos = 0;\n        long dstInit = 0;\n        int dstPos = 0;\n        int nBools = 4;\n        long expectedOutput = 10;\n        long actualOutput = Conversion.binaryToLong(src, srcPos, dstInit, dstPos, nBools);\n        assertEquals(expectedOutput, actualOutput);\n        // Test for IllegalArgumentException\n        boolean[] src2 = {true, false, true, false};\n        int srcPos2 = 0;\n        long dstInit2 = 0;\n        int dstPos2 = 62;\n        int nBools2 = 3;\n        try {\n            Conversion.binaryToLong(src2, srcPos2, dstInit2, dstPos2, nBools2);\n            fail(\"Expected IllegalArgumentException was not thrown\");\n        } catch (IllegalArgumentException e) {\n            assertEquals(\"nBools-1+dstPos is greater or equal to than 64\", e.getMessage());\n        }\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testBinaryToShort",
    "generated_path": "ConversionTest_testBinaryToShort.java",
    "Compile_result": 1,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3;\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.fail;\nimport java.util.UUID;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testBinaryToShort\npublic class ConversionTest_testBinaryToShort {\n    @Test\n    public void testBinaryToShort() {\n        boolean[] src = {true, false, true, false, true, false, true, false};\n        int srcPos = 2;\n        short dstInit = 0;\n        int dstPos = 4;\n        int nBools = 4;\n        short expectedOutput = 20;\n        short actualOutput = Conversion.binaryToShort(src, srcPos, dstInit, dstPos, nBools);\n        assertEquals(expectedOutput, actualOutput);\n        // Test for IllegalArgumentException\n        try {\n            Conversion.binaryToShort(src, srcPos, dstInit, dstPos, 10);\n            fail(\"Expected IllegalArgumentException was not thrown\");\n        } catch (IllegalArgumentException e) {\n            assertEquals(\"nBools-1+dstPos is greater or equal to than 16\", e.getMessage());\n        }\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testByteArrayToInt",
    "generated_path": "ConversionTest_testByteArrayToInt.java",
    "Compile_result": 1,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3;\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.fail;\nimport java.util.UUID;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testByteArrayToInt\nimport org.junit.Test;\nimport static org.junit.Assert.*;\npublic class ConversionTest_testByteArrayToInt {\n    @Test\n    public void testByteArrayToInt() {\n        byte[] byteArray = {0x12, 0x34, 0x56, 0x78};\n        int expected = 0x345678;\n        int actual = Conversion.byteArrayToInt(byteArray, 1, 0, 8, 3);\n        assertEquals(expected, actual);\n    }\n    @Test\n    public void testByteArrayToIntWithZeroBytes() {\n        byte[] byteArray = {};\n        int expected = 123;\n        int actual = Conversion.byteArrayToInt(byteArray, 0, expected, 0, 0);\n        assertEquals(expected, actual);\n    }\n    @Test(expected = IllegalArgumentException.class)\n    public void testByteArrayToIntWithInvalidInput() {\n        byte[] byteArray = {0x12, 0x34, 0x56, 0x78};\n        Conversion.byteArrayToInt(byteArray, 1, 0, 24, 4);\n        fail(\"Expected IllegalArgumentException\");\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testByteArrayToLong",
    "generated_path": "ConversionTest_testByteArrayToLong.java",
    "Compile_result": 1,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3;\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.fail;\nimport java.util.UUID;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testByteArrayToLong\npublic class ConversionTest_testByteArrayToLong {\n    @Test\n    public void testByteArrayToLong() {\n        byte[] src = {0x12, 0x34, 0x56, 0x78};\n        int srcPos = 1;\n        long dstInit = 0x1234567890L;\n        int dstPos = 8;\n        int nBytes = 3;\n        long expected = 0x34567890L;\n        long result = Conversion.byteArrayToLong(src, srcPos, dstInit, dstPos, nBytes);\n        assertEquals(expected, result);\n        // Test with empty byte array and 0 nBytes\n        src = new byte[0];\n        srcPos = 0;\n        dstInit = 0x1234567890L;\n        dstPos = 8;\n        nBytes = 0;\n        expected = dstInit;\n        result = Conversion.byteArrayToLong(src, srcPos, dstInit, dstPos, nBytes);\n        assertEquals(expected, result);\n        // Test with nBytes that exceeds 8 bytes\n        src = new byte[10];\n        srcPos = 0;\n        dstInit = 0x1234567890L;\n        dstPos = 0;\n        nBytes = 9;\n        try {\n            Conversion.byteArrayToLong(src, srcPos, dstInit, dstPos, nBytes);\n            fail(\"IllegalArgumentException should have been thrown\");\n        } catch (IllegalArgumentException e) {\n            // Exception expected\n        }\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testHexToByte",
    "generated_path": "ConversionTest_testHexToByte.java",
    "Compile_result": 1,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3;\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.fail;\nimport java.util.UUID;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testHexToByte\npublic class ConversionTest_testHexToByte {\n    @Test\n    public void testHexToByte() {\n        byte expected = (byte) 0xAB;\n        byte actual = Conversion.hexToByte(\"1ABCD\", 1, (byte) 0x00, 4, 2);\n        assertEquals(expected, actual);\n        try {\n            Conversion.hexToByte(\"1ABCD\", 1, (byte) 0x00, 5, 2);\n            fail(\"IllegalArgumentException should have been thrown\");\n        } catch (IllegalArgumentException e) {\n            // expected exception\n        }\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testHexToInt",
    "generated_path": "ConversionTest_testHexToInt.java",
    "Compile_result": 1,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3;\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.fail;\nimport java.util.UUID;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testHexToInt\nimport org.junit.Assert;\nimport org.junit.Test;\npublic class ConversionTest_testHexToInt {\n    @Test\n    public void testHexToInt() {\n        String src = \"1A2B3C4D\";\n        int srcPos = 2;\n        int dstInit = 0;\n        int dstPos = 8;\n        int nHex = 2;\n        int expected = 0x00000C00;\n        int actual = Conversion.hexToInt(src, srcPos, dstInit, dstPos, nHex);\n        Assert.assertEquals(expected, actual);\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testHexToLong",
    "generated_path": "ConversionTest_testHexToLong.java",
    "Compile_result": 1,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3;\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.fail;\nimport java.util.UUID;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testHexToLong\nimport org.junit.Assert;\nimport org.junit.Test;\npublic class ConversionTest_testHexToLong {\n    @Test\n    public void testHexToLong() {\n        String hexString = \"1A2B3C4D5E6F\";\n        int srcPos = 0;\n        long dstInit = 0;\n        int dstPos = 0;\n        int nHex = 6;\n        long expectedOutput = 0x1A2B3C4D5E6FL;\n        long actualOutput = Conversion.hexToLong(hexString, srcPos, dstInit, dstPos, nHex);\n        Assert.assertEquals(expectedOutput, actualOutput);\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testHexToShort",
    "generated_path": "ConversionTest_testHexToShort.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3;\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.fail;\nimport java.util.UUID;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testHexToShort\npublic class ConversionTest_testHexToShort {\n    @Test\n    public void testHexToShort() {\n        String src = \"1A2B3C\";\n        int srcPos = 0;\n        short dstInit = 0;\n        int dstPos = 0;\n        int nHex = 3;\n        short expected = 0x1A2;\n        short actual = Conversion.hexToShort(src, srcPos, dstInit, dstPos, nHex);\n        assertEquals(expected, actual);\n        src = \"1A2B3C\";\n        srcPos = 1;\n        dstInit = 0x1A2;\n        dstPos = 4;\n        nHex = 2;\n        expected = 0x1A2B3;\n        actual = Conversion.hexToShort(src, srcPos, dstInit, dstPos, nHex);\n        assertEquals(expected, actual);\n        src = \"1A2B3C\";\n        srcPos = 2;\n        dstInit = 0x1A2B3;\n        dstPos = 8;\n        nHex = 1;\n        expected = 0x1A2B3C;\n        actual = Conversion.hexToShort(src, srcPos, dstInit, dstPos, nHex);\n        assertEquals(expected, actual);\n        // Test for IllegalArgumentException\n        try {\n            src = \"1A2B3C\";\n            srcPos = 0;\n            dstInit = 0;\n            dstPos = 13;\n            nHex = 1;\n            Conversion.hexToShort(src, srcPos, dstInit, dstPos, nHex);\n            fail(\"Expected IllegalArgumentException was not thrown\");\n        } catch (IllegalArgumentException e) {\n            // Test passed\n        }\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testLongToHex",
    "generated_path": "ConversionTest_testLongToHex.java",
    "Compile_result": 1,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3;\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.fail;\nimport java.util.UUID;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testLongToHex\npublic class ConversionTest_testLongToHex {\n    @Test\n    public void testLongToHex() {\n        long src = 1234567890L;\n        int srcPos = 0;\n        String dstInit = \"\";\n        int dstPos = 0;\n        int nHexs = 8;\n        String expected = \"499602D2\";\n        String result = Conversion.longToHex(src, srcPos, dstInit, dstPos, nHexs);\n        assertEquals(expected, result);\n        // Test for IllegalArgumentException\n        try {\n            Conversion.longToHex(src, srcPos, dstInit, dstPos, 17);\n            fail(\"Expected IllegalArgumentException was not thrown\");\n        } catch (IllegalArgumentException e) {\n            assertEquals(\"(nHexs-1)*4+srcPos is greater or equal to than 64\", e.getMessage());\n        }\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testLongToIntArray",
    "generated_path": "ConversionTest_testLongToIntArray.java",
    "Compile_result": 1,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3;\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.fail;\nimport java.util.UUID;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testLongToIntArray\npublic class ConversionTest_testLongToIntArray {\n    @Test\n    public void testLongToIntArray() {\n        long src = 0x123456789abcdef0L;\n        int srcPos = 16;\n        int[] dst = new int[2];\n        int dstPos = 0;\n        int nInts = 2;\n        int[] expected = {0x789abcde, 0xf0000000};\n        Conversion.longToIntArray(src, srcPos, dst, dstPos, nInts);\n        assertArrayEquals(expected, dst);\n        // Test for IllegalArgumentException\n        try {\n            Conversion.longToIntArray(src, srcPos, dst, dstPos, 3);\n            fail(\"Expected IllegalArgumentException was not thrown\");\n        } catch (IllegalArgumentException e) {\n            assertEquals(\"(nInts-1)*32+srcPos is greater or equal to than 64\", e.getMessage());\n        }\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testShortArrayToInt",
    "generated_path": "ConversionTest_testShortArrayToInt.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3;\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.fail;\nimport java.util.UUID;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testShortArrayToInt\nimport org.junit.Test;\nimport static org.junit.Assert.*;\npublic class ConversionTest_testShortArrayToInt {\n    @Test\n    public void testShortArrayToInt() {\n        short[] src = {0x1234, 0x5678, 0x9abc};\n        int srcPos = 1;\n        int dstInit = 0x0000ffff;\n        int dstPos = 8;\n        int nShorts = 2;\n        int expected = 0x00bc5678;\n        int result = Conversion.shortArrayToInt(src, srcPos, dstInit, dstPos, nShorts);\n        assertEquals(expected, result);\n        // Test with empty array\n        short[] emptySrc = {};\n        int emptyExpected = dstInit;\n        int emptyResult = Conversion.shortArrayToInt(emptySrc, 0, dstInit, dstPos, 0);\n        assertEquals(emptyExpected, emptyResult);\n        // Test with invalid dstPos\n        try {\n            Conversion.shortArrayToInt(src, srcPos, dstInit, 24, nShorts);\n            fail(\"Expected IllegalArgumentException was not thrown\");\n        } catch (IllegalArgumentException e) {\n            assertEquals(\"(nShorts-1)*16+dstPos is greater or equal to than 32\", e.getMessage());\n        }\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testShortArrayToLong",
    "generated_path": "ConversionTest_testShortArrayToLong.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3;\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.fail;\nimport java.util.UUID;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testShortArrayToLong\npublic class ConversionTest_testShortArrayToLong {\n    @Test\n    public void testShortArrayToLong() {\n        short[] src = {0x1234, 0x5678, 0x9abc};\n        int srcPos = 1;\n        long dstInit = 0x00000000fedcba98L;\n        int dstPos = 8;\n        int nShorts = 2;\n        long expected = 0x00000000f56789abcL;\n        long result = Conversion.shortArrayToLong(src, srcPos, dstInit, dstPos, nShorts);\n        assertEquals(expected, result);\n        // Test with empty array\n        src = new short[0];\n        srcPos = 0;\n        dstInit = 0x0000000000000000L;\n        dstPos = 0;\n        nShorts = 0;\n        expected = 0x0000000000000000L;\n        result = Conversion.shortArrayToLong(src, srcPos, dstInit, dstPos, nShorts);\n        assertEquals(expected, result);\n        // Test with invalid dstPos\n        src = new short[1];\n        srcPos = 0;\n        dstInit = 0x0000000000000000L;\n        dstPos = 63;\n        nShorts = 1;\n        try {\n            Conversion.shortArrayToLong(src, srcPos, dstInit, dstPos, nShorts);\n            fail(\"Expected IllegalArgumentException was not thrown\");\n        } catch (IllegalArgumentException e) {\n            // Expected exception\n        }\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/time/DateUtilsTest###testRound",
    "generated_path": "DateUtilsTest_testRound.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3.time;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert.assertNotSame;\nimport static org.junit.Assert.assertTrue;\nimport static org.junit.Assert.fail;\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.Modifier;\nimport java.text.DateFormat;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.GregorianCalendar;\nimport java.util.Iterator;\nimport java.util.Locale;\nimport java.util.NoSuchElementException;\nimport java.util.TimeZone;\nimport org.apache.commons.lang3.test.SystemDefaults;\nimport org.apache.commons.lang3.test.SystemDefaultsSwitch;\nimport org.junit.Before;\nimport org.junit.BeforeClass;\nimport org.junit.Rule;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/time/DateUtilsTest###testRound\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertNotNull;\nimport java.util.Calendar;\nimport java.util.GregorianCalendar;\nimport org.junit.Test;\npublic class DateUtilsTest_testRound {\n    @Test(expected = IllegalArgumentException.class)\n    public void testRound_NullDate() {\n        DateUtils.round(null, Calendar.YEAR);\n    }\n    @Test\n    public void testRound_Year() {\n        Calendar date = new GregorianCalendar(2021, Calendar.JANUARY, 15);\n        Calendar rounded = DateUtils.round(date, Calendar.YEAR);\n        assertNotNull(rounded);\n        assertEquals(new GregorianCalendar(2021, Calendar.JANUARY, 1), rounded);\n    }\n    @Test\n    public void testRound_Month() {\n        Calendar date = new GregorianCalendar(2021, Calendar.JANUARY, 15);\n        Calendar rounded = DateUtils.round(date, Calendar.MONTH);\n        assertNotNull(rounded);\n        assertEquals(new GregorianCalendar(2021, Calendar.JANUARY, 1), rounded);\n    }\n    @Test\n    public void testRound_Day() {\n        Calendar date = new GregorianCalendar(2021, Calendar.JANUARY, 15);\n        Calendar rounded = DateUtils.round(date, Calendar.DAY_OF_MONTH);\n        assertNotNull(rounded);\n        assertEquals(new GregorianCalendar(2021, Calendar.JANUARY, 15), rounded);\n    }\n    @Test\n    public void testRound_Hour() {\n        Calendar date = new GregorianCalendar(2021, Calendar.JANUARY, 15, 12, 30);\n        Calendar rounded = DateUtils.round(date, Calendar.HOUR_OF_DAY);\n        assertNotNull(rounded);\n        assertEquals(new GregorianCalendar(2021, Calendar.JANUARY, 15, 12, 0), rounded);\n    }\n    @Test\n    public void testRound_Minute() {\n        Calendar date = new GregorianCalendar(2021, Calendar.JANUARY, 15, 12, 30);\n        Calendar rounded = DateUtils.round(date, Calendar.MINUTE);\n        assertNotNull(rounded);\n        assertEquals(new GregorianCalendar(2021, Calendar.JANUARY, 15, 12, 30), rounded);\n    }\n    @Test\n    public void testRound_Second() {\n        Calendar date = new GregorianCalendar(2021, Calendar.JANUARY, 15, 12, 30, 45);\n        Calendar rounded = DateUtils.round(date, Calendar.SECOND);\n        assertNotNull(rounded);\n        assertEquals(new GregorianCalendar(2021, Calendar.JANUARY, 15, 12, 30, 45), rounded);\n    }\n    @Test\n    public void testRound_Millisecond() {\n        Calendar date = new GregorianCalendar(2021, Calendar.JANUARY, 15, 12, 30, 45);\n        date.set(Calendar.MILLISECOND, 500);\n        Calendar rounded = DateUtils.round(date, Calendar.MILLISECOND);\n        assertNotNull(rounded);\n        assertEquals(new GregorianCalendar(2021, Calendar.JANUARY, 15, 12, 30, 45), rounded);\n    }\n}"
  },
  {
    "original_path": "mgormley_prim###mgormley_prim/src/test/java/edu/jhu/prim/arrays/DoubleArraysTest###testLogSum",
    "generated_path": "DoubleArraysTest_testLogSum.java",
    "Compile_result": 1,
    "Test_result": 1,
    "Gen_Test": "package edu.jhu.prim.arrays;\nimport static org.junit.Assert.*;\nimport java.util.Arrays;\nimport org.junit.Test;\nimport edu.jhu.prim.util.Timer;\nimport edu.jhu.prim.util.math.FastMath;\n// original test path: mgormley_prim###mgormley_prim/src/test/java/edu/jhu/prim/arrays/DoubleArraysTest###testLogSum\npublic class DoubleArraysTest_testLogSum {\n    @Test\n    public void testLogSum() {\n        double[] logProps = {0.1, 0.2, 0.3, 0.4};\n        double expected = Math.log(1.0);\n        double actual = DoubleArrays.logSum(logProps);\n        assertEquals(expected, actual, 0.0001);\n        logProps = new double[]{-0.1, -0.2, -0.3, -0.4};\n        expected = Math.log(0.1 + 0.2 + 0.3 + 0.4);\n        actual = DoubleArrays.logSum(logProps);\n        assertEquals(expected, actual, 0.0001);\n        logProps = new double[]{Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY};\n        expected = Double.NEGATIVE_INFINITY;\n        actual = DoubleArrays.logSum(logProps);\n        assertEquals(expected, actual, 0.0001);\n        logProps = new double[]{Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY};\n        expected = Double.POSITIVE_INFINITY;\n        actual = DoubleArrays.logSum(logProps);\n        assertEquals(expected, actual, 0.0001);\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest###testFormatDurationWords",
    "generated_path": "DurationFormatUtilsTest_testFormatDurationWords.java",
    "Compile_result": 1,
    "Test_result": 1,
    "Gen_Test": "package org.apache.commons.lang3.time;\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert.assertTrue;\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.Modifier;\nimport java.util.Calendar;\nimport java.util.TimeZone;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest###testFormatDurationWords\nimport org.junit.Test;\nimport static org.junit.Assert.*;\npublic class DurationFormatUtilsTest_testFormatDurationWords {\n    @Test\n    public void testFormatDurationWords() {\n        long durationMillis = 1234567890L;\n        boolean suppressLeadingZeroElements = false;\n        boolean suppressTrailingZeroElements = false;\n        String expected = \"14 days 6 hours 56 minutes 7 seconds\";\n        String result = DurationFormatUtils.formatDurationWords(durationMillis, suppressLeadingZeroElements, suppressTrailingZeroElements);\n        assertEquals(expected, result);\n        suppressLeadingZeroElements = true;\n        expected = \"14 days 6 hours 56 minutes 7 seconds\";\n        result = DurationFormatUtils.formatDurationWords(durationMillis, suppressLeadingZeroElements, suppressTrailingZeroElements);\n        assertEquals(expected, result);\n        suppressTrailingZeroElements = true;\n        expected = \"14 days 6 hours 56 minutes 7 seconds\";\n        result = DurationFormatUtils.formatDurationWords(durationMillis, suppressLeadingZeroElements, suppressTrailingZeroElements);\n        assertEquals(expected, result);\n        suppressLeadingZeroElements = true;\n        expected = \"14 days 6 hours 56 minutes 7 seconds\";\n        result = DurationFormatUtils.formatDurationWords(durationMillis, suppressLeadingZeroElements, suppressTrailingZeroElements);\n        assertEquals(expected, result);\n        durationMillis = 60000L;\n        suppressLeadingZeroElements = false;\n        suppressTrailingZeroElements = false;\n        expected = \"0 days 0 hours 1 minute 0 seconds\";\n        result = DurationFormatUtils.formatDurationWords(durationMillis, suppressLeadingZeroElements, suppressTrailingZeroElements);\n        assertEquals(expected, result);\n        suppressLeadingZeroElements = true;\n        expected = \"1 minute 0 seconds\";\n        result = DurationFormatUtils.formatDurationWords(durationMillis, suppressLeadingZeroElements, suppressTrailingZeroElements);\n        assertEquals(expected, result);\n        suppressTrailingZeroElements = true;\n        expected = \"1 minute\";\n        result = DurationFormatUtils.formatDurationWords(durationMillis, suppressLeadingZeroElements, suppressTrailingZeroElements);\n        assertEquals(expected, result);\n        suppressLeadingZeroElements = true;\n        expected = \"1 minute\";\n        result = DurationFormatUtils.formatDurationWords(durationMillis, suppressLeadingZeroElements, suppressTrailingZeroElements);\n        assertEquals(expected, result);\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest###testReflectionAppend",
    "generated_path": "EqualsBuilderTest_testReflectionAppend.java",
    "Compile_result": 1,
    "Test_result": 1,
    "Gen_Test": "package org.apache.commons.lang3.builder;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertNull;\nimport static org.junit.Assert.assertTrue;\nimport java.lang.reflect.Method;\nimport java.util.Arrays;\nimport org.apache.commons.lang3.reflect.MethodUtils;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest###testReflectionAppend\nimport org.junit.Test;\nimport static org.junit.Assert.*;\npublic class EqualsBuilderTest_testReflectionAppend {\n    @Test\n    public void testReflectionAppend() {\n        // Test case 1: Comparing two equal objects\n        Object obj1 = new Object();\n        Object obj2 = obj1;\n        EqualsBuilder builder = new EqualsBuilder();\n        builder.reflectionAppend(obj1, obj2);\n        assertTrue(builder.isEquals());\n        // Test case 2: Comparing two objects with different values\n        MyClass myObj1 = new MyClass(\"John\", 25);\n        MyClass myObj2 = new MyClass(\"Jane\", 30);\n        builder = new EqualsBuilder();\n        builder.reflectionAppend(myObj1, myObj2);\n        assertFalse(builder.isEquals());\n        // Test case 3: Comparing two objects with same values\n        myObj1 = new MyClass(\"John\", 25);\n        myObj2 = new MyClass(\"John\", 25);\n        builder = new EqualsBuilder();\n        builder.reflectionAppend(myObj1, myObj2);\n        assertTrue(builder.isEquals());\n        // Test case 4: Comparing null objects\n        myObj1 = null;\n        myObj2 = null;\n        builder = new EqualsBuilder();\n        builder.reflectionAppend(myObj1, myObj2);\n        assertTrue(builder.isEquals());\n        // Test case 5: Comparing null object with non-null object\n        myObj1 = null;\n        myObj2 = new MyClass(\"John\", 25);\n        builder = new EqualsBuilder();\n        builder.reflectionAppend(myObj1, myObj2);\n        assertFalse(builder.isEquals());\n        // Test case 6: Comparing objects of different classes\n        myObj1 = new MyClass(\"John\", 25);\n        String str = \"John\";\n        builder = new EqualsBuilder();\n        builder.reflectionAppend(myObj1, str);\n        assertFalse(builder.isEquals());\n    }\n    private class MyClass {\n        private String name;\n        private int age;\n        public MyClass(String name, int age) {\n            this.name = name;\n            this.age = age;\n        }\n        public String getName() {\n            return name;\n        }\n        public int getAge() {\n            return age;\n        }\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/time/FastDateParserTest###testEquals",
    "generated_path": "FastDateParserTest_testEquals.java",
    "Compile_result": 1,
    "Test_result": 1,
    "Gen_Test": "package org.apache.commons.lang3.time;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertTrue;\nimport static org.junit.Assert.fail;\nimport java.io.Serializable;\nimport java.text.ParseException;\nimport java.text.ParsePosition;\nimport java.text.SimpleDateFormat;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.GregorianCalendar;\nimport java.util.HashMap;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.TimeZone;\nimport org.apache.commons.lang3.LocaleUtils;\nimport org.apache.commons.lang3.SerializationUtils;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/time/FastDateParserTest###testEquals\nimport org.junit.Assert;\nimport org.junit.Test;\npublic class FastDateParserTest_testEquals {\n    @Test\n    public void testEquals() {\n        // Create two instances of FastDateParser with the same values\n        String pattern = \"yyyy-MM-dd\";\n        TimeZone timeZone = TimeZone.getTimeZone(\"UTC\");\n        Locale locale = Locale.US;\n        FastDateParser parser1 = new FastDateParser(pattern, timeZone, locale);\n        FastDateParser parser2 = new FastDateParser(pattern, timeZone, locale);\n        // Test that the two instances are equal\n        Assert.assertTrue(parser1.equals(parser2));\n        // Create an instance of FastDateParser with different values\n        pattern = \"dd/MM/yyyy\";\n        timeZone = TimeZone.getTimeZone(\"GMT\");\n        locale = Locale.UK;\n        FastDateParser parser3 = new FastDateParser(pattern, timeZone, locale);\n        // Test that the two instances are not equal\n        Assert.assertFalse(parser1.equals(parser3));\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/time/FastDatePrinterTest###testFormat",
    "generated_path": "FastDatePrinterTest_testFormat.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3.time;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertTrue;\nimport java.io.Serializable;\nimport java.text.FieldPosition;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.GregorianCalendar;\nimport java.util.Locale;\nimport java.util.TimeZone;\nimport org.apache.commons.lang3.SerializationUtils;\nimport org.apache.commons.lang3.test.SystemDefaults;\nimport org.apache.commons.lang3.test.SystemDefaultsSwitch;\nimport org.junit.Rule;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/time/FastDatePrinterTest###testFormat\nimport java.util.Date;\nimport java.util.TimeZone;\nimport java.util.Locale;\nimport java.util.Calendar;\nimport org.junit.Test;\nimport static org.junit.Assert.assertEquals;\npublic class FastDatePrinterTest_testFormat {\n    @Test\n    public void testFormat() {\n        // Create a new FastDatePrinter object with a specific pattern, timezone and locale\n        FastDatePrinter fastDatePrinter = new FastDatePrinter(\"yyyy-MM-dd HH:mm:ss\", TimeZone.getTimeZone(\"GMT\"), Locale.US);\n        // Create a new Calendar object with a specific date and time\n        Calendar calendar = Calendar.getInstance();\n        calendar.set(2021, Calendar.JANUARY, 1, 0, 0, 0);\n        Date date = calendar.getTime();\n        // Format the date using the FastDatePrinter object\n        String formattedDate = fastDatePrinter.format(date);\n        // Verify that the formatted date matches the expected output\n        assertEquals(\"2021-01-01 00:00:00\", formattedDate);\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest###testGetFieldsListWithAnnotation",
    "generated_path": "FieldUtilsTest_testGetFieldsListWithAnnotation.java",
    "Compile_result": 1,
    "Test_result": 1,
    "Gen_Test": "package org.apache.commons.lang3.reflect;\nimport org.apache.commons.lang3.ArrayUtils;\nimport org.apache.commons.lang3.reflect.testbed.Ambig;\nimport org.apache.commons.lang3.reflect.testbed.Annotated;\nimport org.apache.commons.lang3.reflect.testbed.Foo;\nimport org.apache.commons.lang3.reflect.testbed.PrivatelyShadowedChild;\nimport org.apache.commons.lang3.reflect.testbed.PublicChild;\nimport org.apache.commons.lang3.reflect.testbed.PubliclyShadowedChild;\nimport org.apache.commons.lang3.reflect.testbed.StaticContainer;\nimport org.apache.commons.lang3.reflect.testbed.StaticContainerChild;\nimport org.junit.Before;\nimport org.junit.Test;\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.Modifier;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert.assertNull;\nimport static org.junit.Assert.assertTrue;\nimport static org.junit.Assert.fail;\nimport static org.junit.Assume.assumeNotNull;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest###testGetFieldsListWithAnnotation\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.util.List;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\npublic class FieldUtilsTest_testGetFieldsListWithAnnotation {\n    @Retention(RetentionPolicy.RUNTIME)\n    @interface MyAnnotation {}\n    private static class MyClass {\n        @MyAnnotation\n        private String annotatedField;\n        private int nonAnnotatedField;\n    }\n    @Test\n    public void testGetFieldsListWithAnnotation() {\n        List<Field> annotatedFields = FieldUtils.getFieldsListWithAnnotation(MyClass.class, MyAnnotation.class);\n        assertEquals(1, annotatedFields.size());\n        assertEquals(\"annotatedField\", annotatedFields.get(0).getName());\n    }\n}"
  },
  {
    "original_path": "XDean_Java-EX###XDean_Java-EX/src/test/java/cn/xdean/jex/io/FileUtilTest###testGetNameWithoutSuffix",
    "generated_path": "FileUtilTest_testGetNameWithoutSuffix.java",
    "Compile_result": 1,
    "Test_result": 1,
    "Gen_Test": "package cn.xdean.jex.io;\nimport cn.xdean.jex.lang.ExceptionUtil;\nimport org.junit.Assert;\nimport org.junit.Ignore;\nimport org.junit.Test;\nimport java.io.IOException;\nimport java.net.URI;\nimport java.nio.file.Paths;\nimport static org.junit.Assert.assertEquals;\n// original test path: XDean_Java-EX###XDean_Java-EX/src/test/java/cn/xdean/jex/io/FileUtilTest###testGetNameWithoutSuffix\nimport org.junit.Test;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport static org.junit.Assert.assertEquals;\npublic class FileUtilTest_testGetNameWithoutSuffix {\n    @Test\n    public void testGetNameWithoutSuffix() {\n        Path path = Paths.get(\"example.txt\");\n        String nameWithoutSuffix = FileUtil.getNameWithoutSuffix(path);\n        assertEquals(\"example\", nameWithoutSuffix);\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/math/FractionTest###testEquals",
    "generated_path": "FractionTest_testEquals.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3.math;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertSame;\nimport static org.junit.Assert.assertTrue;\nimport static org.junit.Assert.fail;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/math/FractionTest###testEquals\npublic class FractionTest_testEquals {\n    @Test\n    public void testEquals() {\n        Fraction f1 = new Fraction(1, 2);\n        Fraction f2 = new Fraction(1, 2);\n        Fraction f3 = new Fraction(2, 3);\n        Object obj = new Object();\n        assertTrue(\"Reflexive property failed\", f1.equals(f1));\n        assertTrue(\"Symmetric property failed\", f1.equals(f2) && f2.equals(f1));\n        assertTrue(\"Transitive property failed\", f1.equals(f2) && f2.equals(f3) && f1.equals(f3));\n        assertFalse(\"Inequality test failed\", f1.equals(f3));\n        assertFalse(\"Inequality test failed\", f1.equals(obj));\n        assertFalse(\"Inequality test failed\", f1.equals(null));\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/math/FractionTest###testReduce",
    "generated_path": "FractionTest_testReduce.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3.math;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertSame;\nimport static org.junit.Assert.assertTrue;\nimport static org.junit.Assert.fail;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/math/FractionTest###testReduce\npublic class FractionTest_testReduce {\n    @Test\n    public void testReduce() {\n        Fraction fraction1 = new Fraction(4, 8);\n        Fraction reducedFraction1 = fraction1.reduce();\n        assertEquals(1, reducedFraction1.getNumerator());\n        assertEquals(2, reducedFraction1.getDenominator());\n        Fraction fraction2 = new Fraction(3, 5);\n        Fraction reducedFraction2 = fraction2.reduce();\n        assertEquals(3, reducedFraction2.getNumerator());\n        assertEquals(5, reducedFraction2.getDenominator());\n        Fraction fraction3 = new Fraction(0, 7);\n        Fraction reducedFraction3 = fraction3.reduce();\n        assertSame(Fraction.ZERO, reducedFraction3);\n    }\n}"
  },
  {
    "original_path": "mgormley_prim###mgormley_prim/src/test/java_generated/edu/jhu/prim/map/IntDoubleHashMapTest###testEquals",
    "generated_path": "IntDoubleHashMapTest_testEquals.java",
    "Compile_result": 1,
    "Test_result": 1,
    "Gen_Test": "package edu.jhu.prim.map;\nimport static edu.jhu.prim.Primitives.toDouble;\nimport static edu.jhu.prim.Primitives.toInt;\nimport static edu.jhu.prim.Primitives.toInt;\nimport static org.junit.Assert.*;\nimport java.util.Iterator;\nimport org.junit.Test;\nimport edu.jhu.prim.Primitives;\n// original test path: mgormley_prim###mgormley_prim/src/test/java_generated/edu/jhu/prim/map/IntDoubleHashMapTest###testEquals\npublic class IntDoubleHashMapTest_testEquals {\n    @Test\n    public void testEquals() {\n        IntDoubleHashMap map1 = new IntDoubleHashMap();\n        map1.put(1, 1.0);\n        map1.put(2, 2.0);\n        map1.put(3, 3.0);\n        IntDoubleHashMap map2 = new IntDoubleHashMap();\n        map2.put(1, 1.0);\n        map2.put(2, 2.0);\n        map2.put(3, 3.0);\n        IntDoubleHashMap map3 = new IntDoubleHashMap();\n        map3.put(1, 1.0);\n        map3.put(2, 2.0);\n        IntDoubleHashMap map4 = new IntDoubleHashMap();\n        map4.put(1, 1.0);\n        map4.put(2, 2.0);\n        map4.put(3, 4.0);\n        assertTrue(map1.equals(map2));\n        assertFalse(map1.equals(map3));\n        assertFalse(map1.equals(map4));\n    }\n}"
  },
  {
    "original_path": "mgormley_prim###mgormley_prim/src/test/java_generated/edu/jhu/prim/map/IntDoubleHashMapTest###testHashCode",
    "generated_path": "IntDoubleHashMapTest_testHashCode.java",
    "Compile_result": 1,
    "Test_result": 1,
    "Gen_Test": "package edu.jhu.prim.map;\nimport static edu.jhu.prim.Primitives.toDouble;\nimport static edu.jhu.prim.Primitives.toInt;\nimport static edu.jhu.prim.Primitives.toInt;\nimport static org.junit.Assert.*;\nimport java.util.Iterator;\nimport org.junit.Test;\nimport edu.jhu.prim.Primitives;\n// original test path: mgormley_prim###mgormley_prim/src/test/java_generated/edu/jhu/prim/map/IntDoubleHashMapTest###testHashCode\npublic class IntDoubleHashMapTest_testHashCode {\n    @Test\n    public void testHashCode() {\n        IntDoubleHashMap map1 = new IntDoubleHashMap();\n        map1.put(1, 1.0);\n        map1.put(2, 2.0);\n        map1.put(3, 3.0);\n        IntDoubleHashMap map2 = new IntDoubleHashMap();\n        map2.put(3, 3.0);\n        map2.put(2, 2.0);\n        map2.put(1, 1.0);\n        assertEquals(map1.hashCode(), map2.hashCode());\n    }\n}"
  },
  {
    "original_path": "mgormley_prim###mgormley_prim/src/test/java_generated/edu/jhu/prim/map/IntDoubleSortedMapTest###testRemove",
    "generated_path": "IntDoubleSortedMapTest_testRemove.java",
    "Compile_result": 1,
    "Test_result": 1,
    "Gen_Test": "package edu.jhu.prim.map;\nimport static edu.jhu.prim.Primitives.toDouble;\nimport static edu.jhu.prim.Primitives.toInt;\nimport static org.junit.Assert.assertEquals;\nimport java.util.Iterator;\nimport org.junit.Test;\n// original test path: mgormley_prim###mgormley_prim/src/test/java_generated/edu/jhu/prim/map/IntDoubleSortedMapTest###testRemove\npublic class IntDoubleSortedMapTest_testRemove {\n    @Test(expected = IllegalArgumentException.class)\n    public void testRemoveNonExistingKey() {\n        IntDoubleSortedMap map = new IntDoubleSortedMap(new int[]{1, 2, 4}, new double[]{1.0, 2.0, 4.0});\n        map.remove(3);\n    }\n    @Test\n    public void testRemoveExistingKey() {\n        IntDoubleSortedMap map = new IntDoubleSortedMap(new int[]{1, 2, 4}, new double[]{1.0, 2.0, 4.0});\n        map.remove(2);\n        assertEquals(2, map.size());\n        assertEquals(1.0, map.get(1), 0.0);\n        assertEquals(4.0, map.get(4), 0.0);\n    }\n    @Test\n    public void testRemoveAllKeys() {\n        IntDoubleSortedMap map = new IntDoubleSortedMap(new int[]{1, 2, 4}, new double[]{1.0, 2.0, 4.0});\n        map.remove(1);\n        map.remove(2);\n        map.remove(4);\n        assertEquals(0, map.size());\n        Iterator<IntDoubleEntry> iter = map.iterator();\n        assertEquals(false, iter.hasNext());\n    }\n}"
  },
  {
    "original_path": "mgormley_prim###mgormley_prim/src/test/java_generated/edu/jhu/prim/vector/IntDoubleSortedVectorTest###testGetWithNoZeroValues",
    "generated_path": "IntDoubleSortedVectorTest_testGetWithNoZeroValues.java",
    "Compile_result": 1,
    "Test_result": 1,
    "Gen_Test": "package edu.jhu.prim.vector;\nimport static edu.jhu.prim.Primitives.toDouble;\nimport static edu.jhu.prim.Primitives.toInt;\nimport static org.junit.Assert.*;\nimport java.util.Iterator;\nimport org.junit.Test;\nimport edu.jhu.prim.Primitives;\nimport edu.jhu.prim.map.IntDoubleEntry;\n// original test path: mgormley_prim###mgormley_prim/src/test/java_generated/edu/jhu/prim/vector/IntDoubleSortedVectorTest###testGetWithNoZeroValues\nimport org.junit.Test;\nimport static org.junit.Assert.*;\npublic class IntDoubleSortedVectorTest_testGetWithNoZeroValues {\n    @Test\n    public void testGetWithNoZeroValues() {\n        IntDoubleSortedVector row = new IntDoubleSortedVector();\n        row.set(0, 1.0);\n        row.set(1, 0.0);\n        row.set(2, 2.0);\n        row.set(3, 0.0);\n        row.set(4, 3.0);\n        double zeroThreshold = 0.0001;\n        IntDoubleSortedVector result = IntDoubleSortedVector.getWithNoZeroValues(row, zeroThreshold);\n        assertEquals(3, result.getUsed());\n        assertEquals(1.0, result.get(0), 0.0001);\n        assertEquals(2.0, result.get(1), 0.0001);\n        assertEquals(3.0, result.get(2), 0.0001);\n    }\n}"
  },
  {
    "original_path": "mgormley_prim###mgormley_prim/src/test/java_generated/edu/jhu/prim/map/IntFloatHashMapTest###testEquals",
    "generated_path": "IntFloatHashMapTest_testEquals.java",
    "Compile_result": 1,
    "Test_result": 1,
    "Gen_Test": "package edu.jhu.prim.map;\nimport static edu.jhu.prim.Primitives.toFloat;\nimport static edu.jhu.prim.Primitives.toInt;\nimport static edu.jhu.prim.Primitives.toInt;\nimport static org.junit.Assert.*;\nimport java.util.Iterator;\nimport org.junit.Test;\nimport edu.jhu.prim.Primitives;\n// original test path: mgormley_prim###mgormley_prim/src/test/java_generated/edu/jhu/prim/map/IntFloatHashMapTest###testEquals\npublic class IntFloatHashMapTest_testEquals {\n    @Test\n    public void testEquals() {\n        IntFloatHashMap map1 = new IntFloatHashMap();\n        map1.put(1, 1.0f);\n        map1.put(2, 2.0f);\n        map1.put(3, 3.0f);\n        IntFloatHashMap map2 = new IntFloatHashMap();\n        map2.put(1, 1.0f);\n        map2.put(2, 2.0f);\n        map2.put(3, 3.0f);\n        IntFloatHashMap map3 = new IntFloatHashMap();\n        map3.put(1, 1.0f);\n        map3.put(2, 2.0f);\n        IntFloatHashMap map4 = new IntFloatHashMap();\n        map4.put(1, 1.0f);\n        map4.put(2, 2.0f);\n        map4.put(3, 4.0f);\n        assertTrue(map1.equals(map2));\n        assertFalse(map1.equals(map3));\n        assertFalse(map1.equals(map4));\n    }\n}"
  },
  {
    "original_path": "mgormley_prim###mgormley_prim/src/test/java_generated/edu/jhu/prim/map/IntFloatHashMapTest###testHashCode",
    "generated_path": "IntFloatHashMapTest_testHashCode.java",
    "Compile_result": 1,
    "Test_result": 1,
    "Gen_Test": "package edu.jhu.prim.map;\nimport static edu.jhu.prim.Primitives.toFloat;\nimport static edu.jhu.prim.Primitives.toInt;\nimport static edu.jhu.prim.Primitives.toInt;\nimport static org.junit.Assert.*;\nimport java.util.Iterator;\nimport org.junit.Test;\nimport edu.jhu.prim.Primitives;\n// original test path: mgormley_prim###mgormley_prim/src/test/java_generated/edu/jhu/prim/map/IntFloatHashMapTest###testHashCode\nimport org.junit.Test;\nimport static org.junit.Assert.*;\npublic class IntFloatHashMapTest_testHashCode {\n    @Test\n    public void testHashCode() {\n        IntFloatHashMap map1 = new IntFloatHashMap();\n        map1.put(1, 1.0f);\n        map1.put(2, 2.0f);\n        map1.put(3, 3.0f);\n        IntFloatHashMap map2 = new IntFloatHashMap();\n        map2.put(3, 3.0f);\n        map2.put(2, 2.0f);\n        map2.put(1, 1.0f);\n        assertEquals(map1.hashCode(), map2.hashCode());\n    }\n}"
  },
  {
    "original_path": "mgormley_prim###mgormley_prim/src/test/java_generated/edu/jhu/prim/map/IntFloatSortedMapTest###testRemove",
    "generated_path": "IntFloatSortedMapTest_testRemove.java",
    "Compile_result": 1,
    "Test_result": 1,
    "Gen_Test": "package edu.jhu.prim.map;\nimport static edu.jhu.prim.Primitives.toFloat;\nimport static edu.jhu.prim.Primitives.toInt;\nimport static org.junit.Assert.assertEquals;\nimport java.util.Iterator;\nimport org.junit.Test;\n// original test path: mgormley_prim###mgormley_prim/src/test/java_generated/edu/jhu/prim/map/IntFloatSortedMapTest###testRemove\npublic class IntFloatSortedMapTest_testRemove {\n    @Test\n    public void testRemove() {\n        IntFloatSortedMap map = new IntFloatSortedMap();\n        map.put(1, 1.0f);\n        map.put(2, 2.0f);\n        map.put(3, 3.0f);\n        map.remove(2);\n        assertEquals(2, map.size());\n        assertEquals(1.0f, map.get(1), 0.0f);\n        assertEquals(3.0f, map.get(3), 0.0f);\n    }\n}"
  },
  {
    "original_path": "mgormley_prim###mgormley_prim/src/test/java_generated/edu/jhu/prim/vector/IntFloatSortedVectorTest###testGetWithNoZeroValues",
    "generated_path": "IntFloatSortedVectorTest_testGetWithNoZeroValues.java",
    "Compile_result": 1,
    "Test_result": 1,
    "Gen_Test": "package edu.jhu.prim.vector;\nimport static edu.jhu.prim.Primitives.toFloat;\nimport static edu.jhu.prim.Primitives.toInt;\nimport static org.junit.Assert.*;\nimport java.util.Iterator;\nimport org.junit.Test;\nimport edu.jhu.prim.Primitives;\nimport edu.jhu.prim.map.IntFloatEntry;\n// original test path: mgormley_prim###mgormley_prim/src/test/java_generated/edu/jhu/prim/vector/IntFloatSortedVectorTest###testGetWithNoZeroValues\nimport org.junit.Test;\nimport static org.junit.Assert.*;\npublic class IntFloatSortedVectorTest_testGetWithNoZeroValues {\n    @Test\n    public void testGetWithNoZeroValues() {\n        IntFloatSortedVector row = new IntFloatSortedVector();\n        row.set(0, 0.0f);\n        row.set(1, 1.0f);\n        row.set(2, 0.5f);\n        row.set(3, 0.0f);\n        row.set(4, 2.0f);\n        row.set(5, 0.0f);\n        row.set(6, 3.0f);\n        row.set(7, 0.0f);\n        row.set(8, 0.0f);\n        row.set(9, 4.0f);\n        IntFloatSortedVector expected = new IntFloatSortedVector();\n        expected.set(1, 1.0f);\n        expected.set(2, 0.5f);\n        expected.set(4, 2.0f);\n        expected.set(6, 3.0f);\n        expected.set(9, 4.0f);\n        IntFloatSortedVector actual = IntFloatSortedVector.getWithNoZeroValues(row, 0.1f);\n        assertEquals(expected, actual);\n    }\n}"
  },
  {
    "original_path": "mgormley_prim###mgormley_prim/src/test/java_generated/edu/jhu/prim/map/IntIntHashMapTest###testEquals",
    "generated_path": "IntIntHashMapTest_testEquals.java",
    "Compile_result": 1,
    "Test_result": 1,
    "Gen_Test": "package edu.jhu.prim.map;\nimport static edu.jhu.prim.Primitives.toInt;\nimport static edu.jhu.prim.Primitives.toInt;\nimport static edu.jhu.prim.Primitives.toInt;\nimport static org.junit.Assert.*;\nimport java.util.Iterator;\nimport org.junit.Test;\nimport edu.jhu.prim.Primitives;\n// original test path: mgormley_prim###mgormley_prim/src/test/java_generated/edu/jhu/prim/map/IntIntHashMapTest###testEquals\nimport org.junit.Assert;\nimport org.junit.Test;\npublic class IntIntHashMapTest_testEquals {\n    @Test\n    public void testEquals() {\n        IntIntHashMap map1 = new IntIntHashMap();\n        map1.put(1, 10);\n        map1.put(2, 20);\n        map1.put(3, 30);\n        IntIntHashMap map2 = new IntIntHashMap();\n        map2.put(1, 10);\n        map2.put(2, 20);\n        map2.put(3, 30);\n        IntIntHashMap map3 = new IntIntHashMap();\n        map3.put(1, 10);\n        map3.put(2, 20);\n        IntIntHashMap map4 = new IntIntHashMap();\n        map4.put(1, 10);\n        map4.put(2, 20);\n        map4.put(3, 40);\n        Assert.assertTrue(map1.equals(map2));\n        Assert.assertFalse(map1.equals(map3));\n        Assert.assertFalse(map1.equals(map4));\n    }\n}"
  },
  {
    "original_path": "mgormley_prim###mgormley_prim/src/test/java_generated/edu/jhu/prim/map/IntIntHashMapTest###testHashCode",
    "generated_path": "IntIntHashMapTest_testHashCode.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package edu.jhu.prim.map;\nimport static edu.jhu.prim.Primitives.toInt;\nimport static edu.jhu.prim.Primitives.toInt;\nimport static edu.jhu.prim.Primitives.toInt;\nimport static org.junit.Assert.*;\nimport java.util.Iterator;\nimport org.junit.Test;\nimport edu.jhu.prim.Primitives;\n// original test path: mgormley_prim###mgormley_prim/src/test/java_generated/edu/jhu/prim/map/IntIntHashMapTest###testHashCode\nimport org.junit.Test;\nimport static org.junit.Assert.*;\npublic class IntIntHashMapTest_testHashCode {\n    @Test\n    public void testHashCode() {\n        IntIntHashMap map1 = new IntIntHashMap();\n        map1.put(1, 10);\n        map1.put(2, 20);\n        map1.put(3, 30);\n        IntIntHashMap map2 = new IntIntHashMap();\n        map2.put(3, 30);\n        map2.put(2, 20);\n        map2.put(1, 10);\n        assertEquals(map1.hashCode(), map2.hashCode());\n        IntIntHashMap map3 = new IntIntHashMap();\n        map3.put(1, 10);\n        map3.put(2, 20);\n        map3.put(4, 40);\n        assertNotEquals(map1.hashCode(), map3.hashCode());\n    }\n}"
  },
  {
    "original_path": "mgormley_prim###mgormley_prim/src/test/java_generated/edu/jhu/prim/map/IntIntSortedMapTest###testRemove",
    "generated_path": "IntIntSortedMapTest_testRemove.java",
    "Compile_result": 1,
    "Test_result": 1,
    "Gen_Test": "package edu.jhu.prim.map;\nimport static edu.jhu.prim.Primitives.toInt;\nimport static edu.jhu.prim.Primitives.toInt;\nimport static org.junit.Assert.assertEquals;\nimport java.util.Iterator;\nimport org.junit.Test;\n// original test path: mgormley_prim###mgormley_prim/src/test/java_generated/edu/jhu/prim/map/IntIntSortedMapTest###testRemove\npublic class IntIntSortedMapTest_testRemove {\n    @Test(expected = IllegalArgumentException.class)\n    public void testRemoveNonExistingKey() {\n        IntIntSortedMap map = new IntIntSortedMap(new int[]{1, 3, 5}, new int[]{2, 4, 6});\n        map.remove(2);\n    }\n    @Test\n    public void testRemoveExistingKey() {\n        IntIntSortedMap map = new IntIntSortedMap(new int[]{1, 3, 5}, new int[]{2, 4, 6});\n        map.remove(3);\n        assertEquals(2, map.size());\n        assertEquals(1, map.getIndices()[0]);\n        assertEquals(5, map.getIndices()[1]);\n        assertEquals(2, map.getValues()[0]);\n        assertEquals(6, map.getValues()[1]);\n    }\n}"
  },
  {
    "original_path": "mgormley_prim###mgormley_prim/src/test/java_generated/edu/jhu/prim/vector/IntIntSortedVectorTest###testGetWithNoZeroValues",
    "generated_path": "IntIntSortedVectorTest_testGetWithNoZeroValues.java",
    "Compile_result": 1,
    "Test_result": 1,
    "Gen_Test": "package edu.jhu.prim.vector;\nimport static edu.jhu.prim.Primitives.toInt;\nimport static edu.jhu.prim.Primitives.toInt;\nimport static org.junit.Assert.*;\nimport java.util.Iterator;\nimport org.junit.Test;\nimport edu.jhu.prim.Primitives;\nimport edu.jhu.prim.map.IntIntEntry;\n// original test path: mgormley_prim###mgormley_prim/src/test/java_generated/edu/jhu/prim/vector/IntIntSortedVectorTest###testGetWithNoZeroValues\nimport org.junit.Test;\nimport static org.junit.Assert.*;\npublic class IntIntSortedVectorTest_testGetWithNoZeroValues {\n    @Test\n    public void testGetWithNoZeroValues() {\n        IntIntSortedVector vector = new IntIntSortedVector();\n        vector.set(0, 0);\n        vector.set(1, 1);\n        vector.set(2, 0);\n        vector.set(3, 2);\n        vector.set(4, 0);\n        vector.set(5, 3);\n        vector.set(6, 0);\n        vector.set(7, 0);\n        vector.set(8, 4);\n        vector.set(9, 0);\n        IntIntSortedVector result = IntIntSortedVector.getWithNoZeroValues(vector);\n        assertEquals(4, result.getUsed());\n        assertEquals(1, result.get(0));\n        assertEquals(2, result.get(1));\n        assertEquals(3, result.get(2));\n        assertEquals(4, result.get(3));\n    }\n}"
  },
  {
    "original_path": "mgormley_prim###mgormley_prim/src/test/java_generated/edu/jhu/prim/map/IntLongHashMapTest###testEquals",
    "generated_path": "IntLongHashMapTest_testEquals.java",
    "Compile_result": 1,
    "Test_result": 1,
    "Gen_Test": "package edu.jhu.prim.map;\nimport static edu.jhu.prim.Primitives.toLong;\nimport static edu.jhu.prim.Primitives.toInt;\nimport static edu.jhu.prim.Primitives.toInt;\nimport static org.junit.Assert.*;\nimport java.util.Iterator;\nimport org.junit.Test;\nimport edu.jhu.prim.Primitives;\n// original test path: mgormley_prim###mgormley_prim/src/test/java_generated/edu/jhu/prim/map/IntLongHashMapTest###testEquals\nimport org.junit.Assert;\nimport org.junit.Test;\npublic class IntLongHashMapTest_testEquals {\n    @Test\n    public void testEquals() {\n        IntLongHashMap map1 = new IntLongHashMap();\n        map1.put(1, 10);\n        map1.put(2, 20);\n        map1.put(3, 30);\n        IntLongHashMap map2 = new IntLongHashMap();\n        map2.put(1, 10);\n        map2.put(2, 20);\n        map2.put(3, 30);\n        IntLongHashMap map3 = new IntLongHashMap();\n        map3.put(1, 10);\n        map3.put(2, 20);\n        IntLongHashMap map4 = new IntLongHashMap();\n        map4.put(1, 10);\n        map4.put(2, 20);\n        map4.put(3, 40);\n        Assert.assertTrue(map1.equals(map2));\n        Assert.assertFalse(map1.equals(map3));\n        Assert.assertFalse(map1.equals(map4));\n    }\n}"
  },
  {
    "original_path": "mgormley_prim###mgormley_prim/src/test/java_generated/edu/jhu/prim/map/IntLongHashMapTest###testHashCode",
    "generated_path": "IntLongHashMapTest_testHashCode.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package edu.jhu.prim.map;\nimport static edu.jhu.prim.Primitives.toLong;\nimport static edu.jhu.prim.Primitives.toInt;\nimport static edu.jhu.prim.Primitives.toInt;\nimport static org.junit.Assert.*;\nimport java.util.Iterator;\nimport org.junit.Test;\nimport edu.jhu.prim.Primitives;\n// original test path: mgormley_prim###mgormley_prim/src/test/java_generated/edu/jhu/prim/map/IntLongHashMapTest###testHashCode\nimport org.junit.Assert;\nimport org.junit.Test;\npublic class IntLongHashMapTest_testHashCode {\n    @Test\n    public void testHashCode() {\n        IntLongHashMap map1 = new IntLongHashMap();\n        map1.put(1, 100L);\n        map1.put(2, 200L);\n        map1.put(3, 300L);\n        IntLongHashMap map2 = new IntLongHashMap();\n        map2.put(1, 100L);\n        map2.put(2, 200L);\n        map2.put(3, 300L);\n        Assert.assertEquals(map1.hashCode(), map2.hashCode());\n        IntLongHashMap map3 = new IntLongHashMap();\n        map3.put(1, 100L);\n        map3.put(2, 200L);\n        map3.put(4, 400L);\n        Assert.assertNotEquals(map1.hashCode(), map3.hashCode());\n    }\n}"
  },
  {
    "original_path": "mgormley_prim###mgormley_prim/src/test/java_generated/edu/jhu/prim/map/IntLongSortedMapTest###testRemove",
    "generated_path": "IntLongSortedMapTest_testRemove.java",
    "Compile_result": 1,
    "Test_result": 1,
    "Gen_Test": "package edu.jhu.prim.map;\nimport static edu.jhu.prim.Primitives.toLong;\nimport static edu.jhu.prim.Primitives.toInt;\nimport static org.junit.Assert.assertEquals;\nimport java.util.Iterator;\nimport org.junit.Test;\n// original test path: mgormley_prim###mgormley_prim/src/test/java_generated/edu/jhu/prim/map/IntLongSortedMapTest###testRemove\npublic class IntLongSortedMapTest_testRemove {\n    @Test\n    public void testRemove() {\n        IntLongSortedMap map = new IntLongSortedMap();\n        map.put(1, 10L);\n        map.put(2, 20L);\n        map.put(3, 30L);\n        map.put(4, 40L);\n        map.put(5, 50L);\n        map.remove(3);\n        assertEquals(4, map.size());\n        assertEquals(10L, map.get(1));\n        assertEquals(20L, map.get(2));\n        assertEquals(40L, map.get(4));\n        assertEquals(50L, map.get(5));\n        map.remove(1);\n        assertEquals(3, map.size());\n        assertEquals(20L, map.get(2));\n        assertEquals(40L, map.get(4));\n        assertEquals(50L, map.get(5));\n        map.remove(5);\n        assertEquals(2, map.size());\n        assertEquals(20L, map.get(2));\n        assertEquals(40L, map.get(4));\n        try {\n            map.remove(6);\n        } catch (IllegalArgumentException e) {\n            assertEquals(\"This map does not contain the key: 6\", e.getMessage());\n        }\n    }\n}"
  },
  {
    "original_path": "mgormley_prim###mgormley_prim/src/test/java_generated/edu/jhu/prim/vector/IntLongSortedVectorTest###testGetWithNoZeroValues",
    "generated_path": "IntLongSortedVectorTest_testGetWithNoZeroValues.java",
    "Compile_result": 1,
    "Test_result": 1,
    "Gen_Test": "package edu.jhu.prim.vector;\nimport static edu.jhu.prim.Primitives.toLong;\nimport static edu.jhu.prim.Primitives.toInt;\nimport static org.junit.Assert.*;\nimport java.util.Iterator;\nimport org.junit.Test;\nimport edu.jhu.prim.Primitives;\nimport edu.jhu.prim.map.IntLongEntry;\n// original test path: mgormley_prim###mgormley_prim/src/test/java_generated/edu/jhu/prim/vector/IntLongSortedVectorTest###testGetWithNoZeroValues\nimport org.junit.Test;\nimport static org.junit.Assert.*;\npublic class IntLongSortedVectorTest_testGetWithNoZeroValues {\n    @Test\n    public void testGetWithNoZeroValues() {\n        IntLongSortedVector vector = new IntLongSortedVector(new int[]{0, 1, 2, 3}, new long[]{0, 5, 0, 7});\n        IntLongSortedVector result = IntLongSortedVector.getWithNoZeroValues(vector);\n        assertEquals(2, result.getUsed());\n        assertEquals(1, result.get(0));\n        assertEquals(3, result.get(1));\n    }\n}"
  },
  {
    "original_path": "mgormley_prim###mgormley_prim/src/test/java/edu/jhu/prim/map/IntObjectHashMapTest###testKeys",
    "generated_path": "IntObjectHashMapTest_testKeys.java",
    "Compile_result": 1,
    "Test_result": 1,
    "Gen_Test": "package edu.jhu.prim.map;\nimport static org.junit.Assert.assertEquals;\nimport org.junit.Test;\nimport edu.jhu.prim.util.IntJUnitUtils;\n// original test path: mgormley_prim###mgormley_prim/src/test/java/edu/jhu/prim/map/IntObjectHashMapTest###testKeys\npublic class IntObjectHashMapTest_testKeys {\n    @Test\n    public void testKeys() {\n        IntObjectHashMap<Integer> map = new IntObjectHashMap<>();\n        map.put(1, \"one\");\n        map.put(2, \"two\");\n        map.put(3, \"three\");\n        int[] expectedKeys = {1, 2, 3};\n        int[] actualKeys = map.keys();\n        assertEquals(expectedKeys.length, actualKeys.length);\n        IntJUnitUtils.assertArrayEquals(expectedKeys, actualKeys);\n    }\n}"
  },
  {
    "original_path": "XDean_Java-EX###XDean_Java-EX/src/test/java/cn/xdean/jex/lang/collection/sequence/IntSequenceTest###testRelease",
    "generated_path": "IntSequenceTest_testRelease.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package cn.xdean.jex.lang.collection.sequence;\nimport io.reactivex.Flowable;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\n// original test path: XDean_Java-EX###XDean_Java-EX/src/test/java/cn/xdean/jex/lang/collection/sequence/IntSequenceTest###testRelease\nimport org.junit.Test;\nimport static org.junit.Assert.*;\npublic class IntSequenceTest_testRelease {\n    @Test\n    public void testRelease() {\n        IntSequence sequence = new IntSequence(0, 2);\n        assertTrue(sequence.release(0));\n        assertFalse(sequence.release(1));\n        assertTrue(sequence.release(2));\n        assertFalse(sequence.release(3));\n        assertTrue(sequence.release(4));\n        assertFalse(sequence.release(5));\n        assertTrue(sequence.release(6));\n        assertFalse(sequence.release(7));\n        assertTrue(sequence.release(8));\n        assertFalse(sequence.release(9));\n    }\n}"
  },
  {
    "original_path": "l0s_fernet-java8###l0s_fernet-java8/fernet-java8/src/test/java/com/macasaet/fernet/KeyTest###testGenerateKey",
    "generated_path": "KeyTest_testGenerateKey.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package com.macasaet.fernet;\nimport static com.macasaet.fernet.Constants.encoder;\nimport static com.macasaet.fernet.Constants.encryptionKeyBytes;\nimport static com.macasaet.fernet.Constants.signingKeyBytes;\nimport static nl.jqno.equalsverifier.Warning.ALL_FIELDS_SHOULD_BE_USED;\nimport static nl.jqno.equalsverifier.Warning.STRICT_INHERITANCE;\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.fail;\nimport static org.mutabilitydetector.unittesting.AllowedReason.allowingForSubclassing;\nimport static org.mutabilitydetector.unittesting.AllowedReason.assumingFields;\nimport static org.mutabilitydetector.unittesting.MutabilityAssert.assertInstancesOf;\nimport static org.mutabilitydetector.unittesting.MutabilityMatchers.areImmutable;\nimport java.security.SecureRandom;\nimport java.time.Instant;\nimport javax.crypto.spec.IvParameterSpec;\nimport javax.crypto.spec.SecretKeySpec;\nimport org.junit.Test;\nimport nl.jqno.equalsverifier.EqualsVerifier;\nimport nl.jqno.equalsverifier.api.SingleTypeEqualsVerifierApi;\n// original test path: l0s_fernet-java8###l0s_fernet-java8/fernet-java8/src/test/java/com/macasaet/fernet/KeyTest###testGenerateKey\nimport java.security.SecureRandom;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\npublic class KeyTest_testGenerateKey {\n    @Test\n    public void testGenerateKey() {\n        SecureRandom random = new SecureRandom();\n        Key key = Key.generateKey(random);\n        assertNotNull(key);\n        assertNotNull(key.signingKey);\n        assertNotNull(key.encryptionKey);\n        assertEquals(16, key.signingKey.length);\n        assertEquals(16, key.encryptionKey.length);\n    }\n}"
  },
  {
    "original_path": "lazee_meteo###lazee_meteo/meteo-core/src/test/java/no/api/meteo/entity/core/LocationTest###testFromCoordinates",
    "generated_path": "LocationTest_testFromCoordinates.java",
    "Compile_result": 1,
    "Test_result": 1,
    "Gen_Test": "package no.api.meteo.entity.core;\nimport org.junit.Assert;\nimport org.junit.Test;\n// original test path: lazee_meteo###lazee_meteo/meteo-core/src/test/java/no/api/meteo/entity/core/LocationTest###testFromCoordinates\npublic class LocationTest_testFromCoordinates {\n    @Test(expected = IllegalArgumentException.class)\n    public void testFromCoordinatesWithNullInput() {\n        Location.fromCoordinates(null);\n    }\n    @Test(expected = IllegalArgumentException.class)\n    public void testFromCoordinatesWithInvalidInput() {\n        Location.fromCoordinates(\"invalid input\");\n    }\n    @Test\n    public void testFromCoordinatesWithValidInput() {\n        Location location = Location.fromCoordinates(\"12.345,67.890,1000\");\n        Assert.assertEquals(12.345, location.getLongitude(), 0.001);\n        Assert.assertEquals(67.890, location.getLatitude(), 0.001);\n        Assert.assertEquals(1000, location.getAltitude().intValue());\n    }\n}"
  },
  {
    "original_path": "mgormley_prim###mgormley_prim/src/test/java/edu/jhu/prim/list/LongArrayListTest###testUniq",
    "generated_path": "LongArrayListTest_testUniq.java",
    "Compile_result": 1,
    "Test_result": 1,
    "Gen_Test": "package edu.jhu.prim.list;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.fail;\nimport org.junit.Test;\n// original test path: mgormley_prim###mgormley_prim/src/test/java/edu/jhu/prim/list/LongArrayListTest###testUniq\npublic class LongArrayListTest_testUniq {\n    @Test\n    public void testUniq() {\n        LongArrayList list = new LongArrayList(new long[]{1, 2, 2, 3, 3, 3, 4, 5, 5});\n        list.uniq();\n        assertEquals(5, list.size);\n        assertEquals(1, list.elements[0]);\n        assertEquals(2, list.elements[1]);\n        assertEquals(3, list.elements[2]);\n        assertEquals(4, list.elements[3]);\n        assertEquals(5, list.elements[4]);\n        LongArrayList emptyList = new LongArrayList();\n        emptyList.uniq();\n        assertEquals(0, emptyList.size);\n        LongArrayList singleItemList = new LongArrayList(new long[]{1});\n        singleItemList.uniq();\n        assertEquals(1, singleItemList.size);\n        assertEquals(1, singleItemList.elements[0]);\n    }\n}"
  },
  {
    "original_path": "mgormley_prim###mgormley_prim/src/test/java/edu/jhu/prim/map/LongDoubleHashMapTest###testEquals",
    "generated_path": "LongDoubleHashMapTest_testEquals.java",
    "Compile_result": 1,
    "Test_result": 1,
    "Gen_Test": "package edu.jhu.prim.map;\nimport static edu.jhu.prim.Primitives.toDouble;\nimport static edu.jhu.prim.Primitives.toInt;\nimport static edu.jhu.prim.Primitives.toLong;\nimport static org.junit.Assert.*;\nimport java.util.Iterator;\nimport org.junit.Test;\nimport edu.jhu.prim.Primitives;\n// original test path: mgormley_prim###mgormley_prim/src/test/java/edu/jhu/prim/map/LongDoubleHashMapTest###testEquals\npublic class LongDoubleHashMapTest_testEquals {\n    @Test\n    public void testEquals() {\n        LongDoubleHashMap map1 = new LongDoubleHashMap();\n        LongDoubleHashMap map2 = new LongDoubleHashMap();\n        // Test when both maps are empty\n        assertTrue(map1.equals(map2));\n        // Test when one map is empty and the other is not\n        map1.put(1L, 2.0);\n        assertFalse(map1.equals(map2));\n        // Test when both maps have the same key-value pairs\n        map2.put(1L, 2.0);\n        assertTrue(map1.equals(map2));\n        // Test when both maps have different key-value pairs\n        map1.put(2L, 3.0);\n        assertFalse(map1.equals(map2));\n    }\n}"
  },
  {
    "original_path": "mgormley_prim###mgormley_prim/src/test/java/edu/jhu/prim/map/LongDoubleHashMapTest###testHashCode",
    "generated_path": "LongDoubleHashMapTest_testHashCode.java",
    "Compile_result": 1,
    "Test_result": 1,
    "Gen_Test": "package edu.jhu.prim.map;\nimport static edu.jhu.prim.Primitives.toDouble;\nimport static edu.jhu.prim.Primitives.toInt;\nimport static edu.jhu.prim.Primitives.toLong;\nimport static org.junit.Assert.*;\nimport java.util.Iterator;\nimport org.junit.Test;\nimport edu.jhu.prim.Primitives;\n// original test path: mgormley_prim###mgormley_prim/src/test/java/edu/jhu/prim/map/LongDoubleHashMapTest###testHashCode\npublic class LongDoubleHashMapTest_testHashCode {\n    @Test\n    public void testHashCode() {\n        LongDoubleHashMap map1 = new LongDoubleHashMap();\n        map1.put(1L, 1.0);\n        map1.put(2L, 2.0);\n        map1.put(3L, 3.0);\n        LongDoubleHashMap map2 = new LongDoubleHashMap();\n        map2.put(1L, 1.0);\n        map2.put(2L, 2.0);\n        map2.put(3L, 3.0);\n        assertEquals(map1.hashCode(), map2.hashCode());\n    }\n}"
  },
  {
    "original_path": "mgormley_prim###mgormley_prim/src/test/java/edu/jhu/prim/map/LongDoubleSortedMapTest###testRemove",
    "generated_path": "LongDoubleSortedMapTest_testRemove.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package edu.jhu.prim.map;\nimport static edu.jhu.prim.Primitives.toDouble;\nimport static edu.jhu.prim.Primitives.toInt;\nimport static org.junit.Assert.assertEquals;\nimport java.util.Iterator;\nimport org.junit.Test;\n// original test path: mgormley_prim###mgormley_prim/src/test/java/edu/jhu/prim/map/LongDoubleSortedMapTest###testRemove\npublic class LongDoubleSortedMapTest_testRemove {\n    @Test(expected = IllegalArgumentException.class)\n    public void testRemoveNonExistingKey() {\n        LongDoubleSortedMap map = new LongDoubleSortedMap(new long[]{1, 2, 3}, new double[]{1.0, 2.0, 3.0});\n        map.remove(4);\n    }\n    @Test\n    public void testRemoveExistingKey() {\n        LongDoubleSortedMap map = new LongDoubleSortedMap(new long[]{1, 2, 3}, new double[]{1.0, 2.0, 3.0});\n        map.remove(2);\n        assertEquals(2, map.size());\n        Iterator<Long> iter = map.keySet().iterator();\n        assertEquals(1L, (long) iter.next());\n        assertEquals(3L, (long) iter.next());\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/mutable/MutableByteTest###testGetAndDecrement",
    "generated_path": "MutableByteTest_testGetAndDecrement.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3.mutable;\nimport org.junit.Test;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertTrue;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/mutable/MutableByteTest###testGetAndDecrement\nimport org.junit.Test;\nimport static org.junit.Assert.assertEquals;\npublic class MutableByteTest_testGetAndDecrement {\n    @Test\n    public void testGetAndDecrement() {\n        MutableByte mutableByte = new MutableByte((byte) 5);\n        byte result = mutableByte.getAndDecrement();\n        assertEquals(5, result);\n        assertEquals(4, mutableByte.value);\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/mutable/MutableIntTest###testGetAndDecrement",
    "generated_path": "MutableIntTest_testGetAndDecrement.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3.mutable;\nimport org.junit.Test;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertTrue;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/mutable/MutableIntTest###testGetAndDecrement\npublic class MutableIntTest_testGetAndDecrement {\n    @Test\n    public void testGetAndDecrement() {\n        MutableInt mutableInt = new MutableInt(5);\n        int result = mutableInt.getAndDecrement();\n        assertEquals(5, result);\n        assertEquals(4, mutableInt.value);\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest###testCreateBigInteger",
    "generated_path": "NumberUtilsTest_testCreateBigInteger.java",
    "Compile_result": 1,
    "Test_result": 1,
    "Gen_Test": "package org.apache.commons.lang3.math;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert.assertTrue;\nimport static org.junit.Assert.fail;\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.Modifier;\nimport java.math.BigDecimal;\nimport java.math.BigInteger;\nimport org.apache.commons.lang3.SystemUtils;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest###testCreateBigInteger\nimport java.math.BigInteger;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\npublic class NumberUtilsTest_testCreateBigInteger {\n    @Test\n    public void testCreateBigInteger() {\n        // Test null input\n        assertNull(NumberUtils.createBigInteger(null));\n        // Test decimal input\n        assertEquals(BigInteger.valueOf(12345), NumberUtils.createBigInteger(\"12345\"));\n        assertEquals(BigInteger.valueOf(-12345), NumberUtils.createBigInteger(\"-12345\"));\n        // Test hexadecimal input\n        assertEquals(BigInteger.valueOf(255), NumberUtils.createBigInteger(\"0xFF\"));\n        assertEquals(BigInteger.valueOf(-255), NumberUtils.createBigInteger(\"-0xFF\"));\n        assertEquals(BigInteger.valueOf(255), NumberUtils.createBigInteger(\"#FF\"));\n        assertEquals(BigInteger.valueOf(-255), NumberUtils.createBigInteger(\"-#FF\"));\n        // Test octal input\n        assertEquals(BigInteger.valueOf(63), NumberUtils.createBigInteger(\"077\"));\n        assertEquals(BigInteger.valueOf(-63), NumberUtils.createBigInteger(\"-077\"));\n        // Test invalid input\n        try {\n            NumberUtils.createBigInteger(\"abc\");\n            fail(\"Expected NumberFormatException was not thrown\");\n        } catch (NumberFormatException e) {\n            assertNotNull(e.getMessage());\n        }\n    }\n}"
  },
  {
    "original_path": "mgormley_prim###mgormley_prim/src/test/java/edu/jhu/prim/sample/PairSamplerTest###testSampleUnorderedPairs",
    "generated_path": "PairSamplerTest_testSampleUnorderedPairs.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package edu.jhu.prim.sample;\nimport java.util.Collection;\nimport org.junit.Assert;\nimport org.junit.Test;\nimport edu.jhu.prim.tuple.OrderedPair;\nimport edu.jhu.prim.tuple.UnorderedPair;\n// original test path: mgormley_prim###mgormley_prim/src/test/java/edu/jhu/prim/sample/PairSamplerTest###testSampleUnorderedPairs\nimport java.util.Collection;\nimport java.util.HashSet;\nimport org.junit.Assert;\nimport org.junit.Test;\npublic class PairSamplerTest_testSampleUnorderedPairs {\n    @Test\n    public void testSampleUnorderedPairs() {\n        int minI = 1;\n        int maxI = 5;\n        int minJ = 2;\n        int maxJ = 6;\n        double prop = 0.5;\n        Collection<UnorderedPair> pairs = PairSampler.sampleUnorderedPairs(minI, maxI, minJ, maxJ, prop);\n        // Check that all pairs are within the specified ranges\n        for (UnorderedPair pair : pairs) {\n            int i = pair.getFirst();\n            int j = pair.getSecond();\n            Assert.assertTrue(i >= minI && i < maxI);\n            Assert.assertTrue(j >= minJ && j < maxJ);\n        }\n        // Check that the proportion of pairs generated is within the expected range\n        int numPairs = pairs.size();\n        long expectedNumPairs = PairSampler.countUnorderedPairs(minI, maxI, minJ, maxJ);\n        double expectedProp = expectedNumPairs * prop;\n        double tolerance = expectedProp * 0.1; // Allow for 10% tolerance\n        Assert.assertTrue(Math.abs(numPairs - expectedProp) < tolerance);\n        // Check that all pairs are unique\n        HashSet<UnorderedPair> uniquePairs = new HashSet<>(pairs);\n        Assert.assertEquals(numPairs, uniquePairs.size());\n    }\n}"
  },
  {
    "original_path": "pvanassen_ns-api###pvanassen_ns-api/src/test/java/nl/pvanassen/ns/model/prijzen/PrijsHandleTest###testGetModel",
    "generated_path": "PrijsHandleTest_testGetModel.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package nl.pvanassen.ns.model.prijzen;\nimport org.junit.Test;\nimport java.math.BigDecimal;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertNotNull;\n// original test path: pvanassen_ns-api###pvanassen_ns-api/src/test/java/nl/pvanassen/ns/model/prijzen/PrijsHandleTest###testGetModel\nimport java.io.ByteArrayInputStream;\npublic class PrijsHandleTest_testGetModel {\n    @Test\n    public void testGetModel() {\n        String xmlString = \"<VervoerderKeuzes>\\n\" +\n                \"    <VervoerderKeuze naam=\\\"NS\\\">\\n\" +\n                \"        <Tariefeenheden>2</Tariefeenheden>\\n\" +\n                \"        <ReisType name=\\\"Enkele reis\\\">\\n\" +\n                \"            <ReisKlasse klasse=\\\"1\\\">\\n\" +\n                \"                <Prijsdeel vervoerder=\\\"NS\\\" prijs=\\\"4.20\\\" van=\\\"Amsterdam\\\" naar=\\\"Utrecht\\\"/>\\n\" +\n                \"                <Prijsdeel vervoerder=\\\"NS\\\" prijs=\\\"2.80\\\" van=\\\"Utrecht\\\" naar=\\\"Den Haag\\\"/>\\n\" +\n                \"                <Totaal>7.00</Totaal>\\n\" +\n                \"                <Korting>\\n\" +\n                \"                    <Kortingsprijs name=\\\"Korting 65+\\\" prijs=\\\"5.00\\\"/>\\n\" +\n                \"                </Korting>\\n\" +\n                \"            </ReisKlasse>\\n\" +\n                \"        </ReisType>\\n\" +\n                \"    </VervoerderKeuze>\\n\" +\n                \"</VervoerderKeuzes>\";\n        ByteArrayInputStream stream = new ByteArrayInputStream(xmlString.getBytes());\n        PrijsHandle prijsHandle = new PrijsHandle();\n        Prijzen prijzen = prijsHandle.getModel(stream);\n        assertNotNull(prijzen);\n        assertEquals(1, prijzen.getVervoerderKeuzes().size());\n        VervoerderKeuze nsKeuze = prijzen.getVervoerderKeuzes().get(\"NS\");\n        assertNotNull(nsKeuze);\n        assertEquals(2, nsKeuze.getTariefEenheden());\n        assertEquals(1, nsKeuze.getReisTypes().size());\n        ReisType enkeleReis = nsKeuze.getReisTypes().get(\"Enkele reis\");\n        assertNotNull(enkeleReis);\n        assertEquals(1, enkeleReis.getReisKlassen().size());\n        ReisKlasse eersteKlasse = enkeleReis.getReisKlassen().get(1);\n        assertNotNull(eersteKlasse);\n        assertEquals(1, eersteKlasse.getPrijsdelen().size());\n        assertEquals(new BigDecimal(\"7.00\"), eersteKlasse.getTotaal());\n        assertEquals(1, eersteKlasse.getKortingprijzen().size());\n        assertEquals(new BigDecimal(\"5.00\"), eersteKlasse.getKortingprijzen().get(\"Korting 65+\"));\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/RangeTest###testHashCode",
    "generated_path": "RangeTest_testHashCode.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert.assertSame;\nimport static org.junit.Assert.assertTrue;\nimport static org.junit.Assert.fail;\nimport java.util.Comparator;\nimport org.junit.Before;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/RangeTest###testHashCode\npublic class RangeTest_testHashCode {\n    private Range<Integer> range1;\n    private Range<Integer> range2;\n    @Before\n    public void setUp() {\n        range1 = new Range<>(1, 5, null);\n        range2 = new Range<>(1, 5, null);\n    }\n    @Test\n    public void testHashCode() {\n        int expectedHashCode = 17;\n        expectedHashCode = 37 * expectedHashCode + range1.getClass().hashCode();\n        expectedHashCode = 37 * expectedHashCode + range1.getMinimum().hashCode();\n        expectedHashCode = 37 * expectedHashCode + range1.getMaximum().hashCode();\n        assertEquals(expectedHashCode, range1.hashCode());\n        assertEquals(expectedHashCode, range2.hashCode());\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/SerializationUtilsTest###testClone",
    "generated_path": "SerializationUtilsTest_testClone.java",
    "Compile_result": 1,
    "Test_result": 1,
    "Gen_Test": "package org.apache.commons.lang3;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert.assertNull;\nimport static org.junit.Assert.assertSame;\nimport static org.junit.Assert.assertTrue;\nimport static org.junit.Assert.fail;\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutputStream;\nimport java.io.OutputStream;\nimport java.io.Serializable;\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.Modifier;\nimport java.util.HashMap;\nimport org.junit.Before;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/SerializationUtilsTest###testClone\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertNotSame;\nimport java.io.Serializable;\nimport org.junit.Test;\npublic class SerializationUtilsTest_testClone {\n    @Test\n    public void testClone() {\n        // Create an object to be cloned\n        MyClass original = new MyClass(\"test\", 123);\n        // Clone the object\n        MyClass cloned = SerializationUtils.clone(original);\n        // Check that the cloned object is not the same as the original object\n        assertNotSame(original, cloned);\n        // Check that the cloned object has the same values as the original object\n        assertEquals(original.getName(), cloned.getName());\n        assertEquals(original.getNumber(), cloned.getNumber());\n    }\n    // A sample class to be used for testing\n    private static class MyClass implements Serializable {\n        private static final long serialVersionUID = 1L;\n        private String name;\n        private int number;\n        public MyClass(String name, int number) {\n            this.name = name;\n            this.number = number;\n        }\n        public String getName() {\n            return name;\n        }\n        public int getNumber() {\n            return number;\n        }\n    }\n}"
  },
  {
    "original_path": "pvanassen_ns-api###pvanassen_ns-api/src/test/java/nl/pvanassen/ns/model/stations/StationsHandleTest###testGetModel",
    "generated_path": "StationsHandleTest_testGetModel.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package nl.pvanassen.ns.model.stations;\nimport org.junit.Test;\nimport java.util.List;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertNotEquals;\nimport static org.junit.Assert.assertNotNull;\n// original test path: pvanassen_ns-api###pvanassen_ns-api/src/test/java/nl/pvanassen/ns/model/stations/StationsHandleTest###testGetModel\nimport java.io.ByteArrayInputStream;\nimport java.io.InputStream;\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.junit.Test;\npublic class StationsHandleTest_testGetModel {\n    @Test\n    public void testGetModel() {\n        String xmlString = \"<Stations>\\n\" +\n                \"  <Station>\\n\" +\n                \"    <Code>UT</Code>\\n\" +\n                \"    <Type>knooppuntIntercitystation</Type>\\n\" +\n                \"    <Namen>\\n\" +\n                \"      <Kort>Utrecht</Kort>\\n\" +\n                \"      <Middel>Utrecht Centraal</Middel>\\n\" +\n                \"      <Lang>Utrecht Centraal</Lang>\\n\" +\n                \"    </Namen>\\n\" +\n                \"    <Land>NL</Land>\\n\" +\n                \"    <UICCode>8400629</UICCode>\\n\" +\n                \"    <Lat>52.089444</Lat>\\n\" +\n                \"    <Lon>5.110278</Lon>\\n\" +\n                \"    <Synoniemen>\\n\" +\n                \"      <Synoniem>Utrecht CS</Synoniem>\\n\" +\n                \"      <Synoniem>Utrecht Centraal Station</Synoniem>\\n\" +\n                \"    </Synoniemen>\\n\" +\n                \"  </Station>\\n\" +\n                \"</Stations>\";\n        InputStream stream = new ByteArrayInputStream(xmlString.getBytes());\n        StationsHandle stationsHandle = new StationsHandle();\n        Stations stations = stationsHandle.getModel(stream);\n        assertNotNull(stations);\n        List<Station> stationList = stations.getStations();\n        assertNotNull(stationList);\n        assertEquals(1, stationList.size());\n        Station station = stationList.get(0);\n        assertNotNull(station);\n        assertEquals(\"UT\", station.getCode());\n        assertEquals(\"knooppuntIntercitystation\", station.getType());\n        assertNotNull(station.getNamen());\n        assertEquals(\"Utrecht\", station.getNamen().getKort());\n        assertEquals(\"Utrecht Centraal\", station.getNamen().getMiddel());\n        assertEquals(\"Utrecht Centraal\", station.getNamen().getLang());\n        assertEquals(\"NL\", station.getLand());\n        assertEquals(8400629, station.getUicCode());\n        assertEquals(52.089444, station.getLat(), 0.0);\n        assertEquals(5.110278, station.getLon(), 0.0);\n        List<String> synoniemen = new ArrayList<>();\n        synoniemen.add(\"Utrecht CS\");\n        synoniemen.add(\"Utrecht Centraal Station\");\n        assertEquals(synoniemen, station.getSynoniemen());\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/text/StrBuilderTest###testSetCharAt",
    "generated_path": "StrBuilderTest_testSetCharAt.java",
    "Compile_result": 1,
    "Test_result": 1,
    "Gen_Test": "package org.apache.commons.lang3.text;\nimport org.junit.Test;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert.assertNotSame;\nimport static org.junit.Assert.assertNull;\nimport static org.junit.Assert.assertSame;\nimport static org.junit.Assert.assertTrue;\nimport static org.junit.Assert.fail;\nimport java.io.IOException;\nimport java.io.Reader;\nimport java.io.StringReader;\nimport java.io.StringWriter;\nimport java.io.Writer;\nimport java.nio.CharBuffer;\nimport java.util.Arrays;\nimport org.apache.commons.lang3.ArrayUtils;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/text/StrBuilderTest###testSetCharAt\nimport org.junit.Test;\nimport static org.junit.Assert.*;\npublic class StrBuilderTest_testSetCharAt {\n    @Test\n    public void testSetCharAt() {\n        StrBuilder strBuilder = new StrBuilder(\"Hello World\");\n        strBuilder.setCharAt(6, 'X');\n        assertEquals(\"Hello Xorld\", strBuilder.toString());\n    }\n    @Test(expected = StringIndexOutOfBoundsException.class)\n    public void testSetCharAtWithInvalidIndex() {\n        StrBuilder strBuilder = new StrBuilder(\"Hello World\");\n        strBuilder.setCharAt(20, 'X');\n    }\n    @Test\n    public void testSetCharAtReturnsThis() {\n        StrBuilder strBuilder = new StrBuilder(\"Hello World\");\n        assertSame(strBuilder, strBuilder.setCharAt(6, 'X'));\n    }\n}"
  },
  {
    "original_path": "XDean_Java-EX###XDean_Java-EX/src/test/java/cn/xdean/jex/lang/StringUtilTest###testBalancePair",
    "generated_path": "StringUtilTest_testBalancePair.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package cn.xdean.jex.lang;\nimport io.reactivex.Flowable;\nimport org.junit.Test;\nimport org.junit.experimental.theories.Theories;\nimport org.junit.experimental.theories.Theory;\nimport org.junit.experimental.theories.suppliers.TestedOn;\nimport org.junit.runner.RunWith;\nimport java.util.stream.IntStream;\nimport static cn.xdean.jex.lang.StringUtil.*;\nimport static org.junit.Assert.assertEquals;\n// original test path: XDean_Java-EX###XDean_Java-EX/src/test/java/cn/xdean/jex/lang/StringUtilTest###testBalancePair\n@RunWith(Theories.class)\npublic class StringUtilTest_testBalancePair {\n    @Theory\n    public void balancePair_shouldReturnCorrectIndices(\n            @TestedOn(ints = {0, 1, 2}) int leftIndex,\n            @TestedOn(ints = {3, 4, 5}) int rightIndex,\n            @TestedOn(strings = {\"\", \"abc\", \"aabbcc\"}) String str,\n            @TestedOn(strings = {\"(\", \"[\"}) String left,\n            @TestedOn(strings = {\")\", \"]\"}) String right) {\n        // Arrange\n        String input = repeat(left, leftIndex) + repeat(right, rightIndex) + str;\n        int expectedFirstLeft = input.indexOf(left);\n        int expectedRight = input.lastIndexOf(right);\n        if (leftIndex != rightIndex) {\n            expectedFirstLeft = -1;\n            expectedRight = -1;\n        }\n        // Act\n        int[] result = StringUtil.balancePair(input, left, right);\n        // Assert\n        assertEquals(expectedFirstLeft, result[0]);\n        assertEquals(expectedRight, result[1]);\n    }\n}"
  },
  {
    "original_path": "l0s_fernet-java8###l0s_fernet-java8/fernet-java8/src/test/java/com/macasaet/fernet/TokenTest###testGenerate",
    "generated_path": "TokenTest_testGenerate.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package com.macasaet.fernet;\nimport static com.macasaet.fernet.Constants.initializationVectorBytes;\nimport static java.util.stream.Collectors.toList;\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertThrows;\nimport static org.junit.Assert.assertTrue;\nimport static org.mutabilitydetector.unittesting.AllowedReason.allowingForSubclassing;\nimport static org.mutabilitydetector.unittesting.AllowedReason.assumingFields;\nimport static org.mutabilitydetector.unittesting.AllowedReason.provided;\nimport static org.mutabilitydetector.unittesting.MutabilityAssert.assertInstancesOf;\nimport static org.mutabilitydetector.unittesting.MutabilityMatchers.areImmutable;\nimport java.security.SecureRandom;\nimport java.time.Instant;\nimport java.time.format.DateTimeFormatter;\nimport java.util.List;\nimport java.util.stream.IntStream;\nimport javax.crypto.spec.IvParameterSpec;\nimport org.junit.Before;\nimport org.junit.Test;\n// original test path: l0s_fernet-java8###l0s_fernet-java8/fernet-java8/src/test/java/com/macasaet/fernet/TokenTest###testGenerate\nimport static org.junit.Assert.*;\nimport java.security.Key;\nimport java.security.SecureRandom;\nimport javax.crypto.spec.IvParameterSpec;\nimport org.junit.Test;\npublic class TokenTest_testGenerate {\n    @Test\n    public void testGenerate() {\n        SecureRandom random = new SecureRandom();\n        byte[] payload = \"test payload\".getBytes();\n        Key key = new Key(); // replace with actual key implementation\n        Token token = Token.generate(random, key, payload);\n        assertNotNull(token);\n        assertEquals(Token.supportedVersion, token.getVersion());\n        assertNotNull(token.getTimestamp());\n        assertNotNull(token.getInitializationVector());\n        assertNotNull(token.getCipherText());\n        assertNotNull(token.getHmac());\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest###testGetRawType",
    "generated_path": "TypeUtilsTest_testGetRawType.java",
    "Compile_result": 1,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3.reflect;\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertNull;\nimport static org.junit.Assert.assertTrue;\nimport java.io.Serializable;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.GenericArrayType;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.ParameterizedType;\nimport java.lang.reflect.Type;\nimport java.lang.reflect.TypeVariable;\nimport java.lang.reflect.WildcardType;\nimport java.net.URI;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.TreeSet;\nimport org.apache.commons.lang3.reflect.testbed.Foo;\nimport org.apache.commons.lang3.reflect.testbed.GenericParent;\nimport org.apache.commons.lang3.reflect.testbed.GenericTypeHolder;\nimport org.apache.commons.lang3.reflect.testbed.StringParameterizedChild;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest###testGetRawType\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertNull;\nimport java.lang.reflect.Type;\nimport org.junit.Test;\npublic class TypeUtilsTest_testGetRawType {\n    @Test\n    public void testGetRawType() {\n        // Test for Class type\n        Type type = String.class;\n        Type assigningType = null;\n        Class<?> expected = String.class;\n        Class<?> actual = TypeUtils.getRawType(type, assigningType);\n        assertEquals(expected, actual);\n        // Test for ParameterizedType type\n        type = new StringParameterizedChild().getClass().getGenericSuperclass();\n        expected = GenericParent.class;\n        actual = TypeUtils.getRawType(type, assigningType);\n        assertEquals(expected, actual);\n        // Test for TypeVariable type\n        type = GenericTypeHolder.class.getTypeParameters()[0];\n        assigningType = GenericTypeHolder.class;\n        expected = String.class;\n        actual = TypeUtils.getRawType(type, assigningType);\n        assertEquals(expected, actual);\n        // Test for GenericArrayType type\n        type = new String[0].getClass().getComponentType();\n        expected = String.class;\n        actual = TypeUtils.getRawType(type, assigningType);\n        assertEquals(expected, actual);\n        // Test for WildcardType type\n        type = new TreeSet<String>().getClass().getTypeParameters()[0].getBounds()[0];\n        expected = null;\n        actual = TypeUtils.getRawType(type, assigningType);\n        assertNull(actual);\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest###testIsAssignable",
    "generated_path": "TypeUtilsTest_testIsAssignable.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3.reflect;\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertNull;\nimport static org.junit.Assert.assertTrue;\nimport java.io.Serializable;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.GenericArrayType;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.ParameterizedType;\nimport java.lang.reflect.Type;\nimport java.lang.reflect.TypeVariable;\nimport java.lang.reflect.WildcardType;\nimport java.net.URI;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.TreeSet;\nimport org.apache.commons.lang3.reflect.testbed.Foo;\nimport org.apache.commons.lang3.reflect.testbed.GenericParent;\nimport org.apache.commons.lang3.reflect.testbed.GenericTypeHolder;\nimport org.apache.commons.lang3.reflect.testbed.StringParameterizedChild;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest###testIsAssignable\nimport org.junit.Test;\nimport static org.junit.Assert.*;\npublic class TypeUtilsTest_testIsAssignable {\n    @Test\n    public void testIsAssignable() {\n        // Test for null type\n        assertTrue(TypeUtils.isAssignable(null, null));\n        assertFalse(TypeUtils.isAssignable(null, int.class));\n        assertFalse(TypeUtils.isAssignable(null, String.class));\n        // Test for null toClass\n        assertFalse(TypeUtils.isAssignable(int.class, null));\n        assertFalse(TypeUtils.isAssignable(String.class, null));\n        // Test for same type\n        assertTrue(TypeUtils.isAssignable(int.class, int.class));\n        assertTrue(TypeUtils.isAssignable(String.class, String.class));\n        // Test for Class type\n        assertTrue(TypeUtils.isAssignable(String.class, CharSequence.class));\n        assertTrue(TypeUtils.isAssignable(ArrayList.class, List.class));\n        assertTrue(TypeUtils.isAssignable(TreeSet.class, Collection.class));\n        assertFalse(TypeUtils.isAssignable(String.class, Integer.class));\n        assertFalse(TypeUtils.isAssignable(ArrayList.class, Map.class));\n        // Test for ParameterizedType\n        assertTrue(TypeUtils.isAssignable(new GenericTypeHolder<String>(){}.getType(), String.class));\n        assertTrue(TypeUtils.isAssignable(new GenericTypeHolder<List<String>>(){}.getType(), List.class));\n        assertTrue(TypeUtils.isAssignable(new GenericTypeHolder<Map<String, Integer>>(){}.getType(), Map.class));\n        assertFalse(TypeUtils.isAssignable(new GenericTypeHolder<String>(){}.getType(), Integer.class));\n        assertFalse(TypeUtils.isAssignable(new GenericTypeHolder<List<String>>(){}.getType(), Map.class));\n        // Test for TypeVariable\n        assertTrue(TypeUtils.isAssignable(Foo.class.getTypeParameters()[0], String.class));\n        assertTrue(TypeUtils.isAssignable(GenericParent.class.getTypeParameters()[0], String.class));\n        assertFalse(TypeUtils.isAssignable(Foo.class.getTypeParameters()[0], Integer.class));\n        assertFalse(TypeUtils.isAssignable(GenericParent.class.getTypeParameters()[0], Integer.class));\n        // Test for GenericArrayType\n        assertTrue(TypeUtils.isAssignable(new String[0].getClass(), String[].class));\n        assertTrue(TypeUtils.isAssignable(new String[0].getClass(), Object[].class));\n        assertTrue(TypeUtils.isAssignable(new String[0].getClass(), Serializable[].class));\n        assertFalse(TypeUtils.isAssignable(new String[0].getClass(), Integer[].class));\n        assertFalse(TypeUtils.isAssignable(new Integer[0].getClass(), String[].class));\n        // Test for WildcardType\n        assertFalse(TypeUtils.isAssignable(StringParameterizedChild.class.getTypeParameters()[0], String.class));\n        assertTrue(TypeUtils.isAssignable(StringParameterizedChild.class.getTypeParameters()[0], Integer.class));\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest###testParameterize",
    "generated_path": "TypeUtilsTest_testParameterize.java",
    "Compile_result": 1,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3.reflect;\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertNull;\nimport static org.junit.Assert.assertTrue;\nimport java.io.Serializable;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.GenericArrayType;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.ParameterizedType;\nimport java.lang.reflect.Type;\nimport java.lang.reflect.TypeVariable;\nimport java.lang.reflect.WildcardType;\nimport java.net.URI;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.TreeSet;\nimport org.apache.commons.lang3.reflect.testbed.Foo;\nimport org.apache.commons.lang3.reflect.testbed.GenericParent;\nimport org.apache.commons.lang3.reflect.testbed.GenericTypeHolder;\nimport org.apache.commons.lang3.reflect.testbed.StringParameterizedChild;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest###testParameterize\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert.assertTrue;\nimport java.lang.reflect.ParameterizedType;\nimport java.lang.reflect.Type;\nimport java.util.HashMap;\nimport java.util.Map;\nimport org.junit.Test;\npublic class TypeUtilsTest_testParameterize {\n    @Test\n    public void testParameterize() {\n        // Create a raw class\n        Class<?> rawClass = HashMap.class;\n        // Create a map of type argument mappings\n        Map<TypeVariable<?>, Type> typeArgMappings = new HashMap<>();\n        typeArgMappings.put(Map.class.getTypeParameters()[0], String.class);\n        typeArgMappings.put(Map.class.getTypeParameters()[1], Integer.class);\n        // Call the parameterize method\n        ParameterizedType parameterizedType = TypeUtils.parameterize(rawClass, typeArgMappings);\n        // Assert that the parameterized type is not null\n        assertNotNull(parameterizedType);\n        // Assert that the raw type of the parameterized type is the same as the raw class\n        assertEquals(rawClass, parameterizedType.getRawType());\n        // Assert that the actual type arguments of the parameterized type are the same as the type argument mappings\n        Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n        assertEquals(String.class, actualTypeArguments[0]);\n        assertEquals(Integer.class, actualTypeArguments[1]);\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest###testToLongString",
    "generated_path": "TypeUtilsTest_testToLongString.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3.reflect;\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertNull;\nimport static org.junit.Assert.assertTrue;\nimport java.io.Serializable;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.GenericArrayType;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.ParameterizedType;\nimport java.lang.reflect.Type;\nimport java.lang.reflect.TypeVariable;\nimport java.lang.reflect.WildcardType;\nimport java.net.URI;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.TreeSet;\nimport org.apache.commons.lang3.reflect.testbed.Foo;\nimport org.apache.commons.lang3.reflect.testbed.GenericParent;\nimport org.apache.commons.lang3.reflect.testbed.GenericTypeHolder;\nimport org.apache.commons.lang3.reflect.testbed.StringParameterizedChild;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest###testToLongString\nimport static org.junit.Assert.assertEquals;\nimport static org.mockito.Mockito.mock;\nimport java.lang.reflect.TypeVariable;\nimport org.junit.Test;\npublic class TypeUtilsTest_testToLongString {\n    @Test\n    public void testToLongString() {\n        TypeVariable<?> typeVariable = mock(TypeVariable.class);\n        String expected = \"java.lang.String:T\";\n        String actual = TypeUtils.toLongString(typeVariable);\n        assertEquals(expected, actual);\n    }\n}"
  },
  {
    "original_path": "pvanassen_ns-api###pvanassen_ns-api/src/test/java/nl/pvanassen/ns/xml/XmlPresentTest###testChild",
    "generated_path": "XmlPresentTest_testChild.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package nl.pvanassen.ns.xml;\nimport org.junit.Before;\nimport org.junit.Test;\nimport java.util.List;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert.assertNull;\nimport static org.junit.Assert.assertTrue;\n// original test path: pvanassen_ns-api###pvanassen_ns-api/src/test/java/nl/pvanassen/ns/xml/XmlPresentTest###testChild\nimport org.junit.Before;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\npublic class XmlPresentTest_testChild {\n    private XmlPresent xml;\n    @Before\n    public void setUp() {\n        String xmlString = \"<root><child1>value1</child1><child2>value2</child2></root>\";\n        InputStream stream = new ByteArrayInputStream(xmlString.getBytes());\n        xml = new XmlPresent(stream, \"root\");\n    }\n    @Test\n    public void testChild() {\n        Xml child = xml.child(\"child1\");\n        assertNotNull(child);\n        assertEquals(\"child1\", child.getName());\n        assertEquals(\"value1\", child.getContent());\n    }\n    @Test\n    public void testChildNotFound() {\n        Xml child = xml.child(\"nonexistent\");\n        assertNotNull(child);\n        assertEquals(\"nonexistent\", child.getName());\n        assertTrue(child instanceof XmlAbsent);\n    }\n    @Test\n    public void testMultipleChildren() {\n        Xml child = xml.child(\"child\");\n        assertNotNull(child);\n        assertEquals(\"child\", child.getName());\n        assertTrue(child instanceof XmlAbsent);\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ArrayUtilsTest###testToMap",
    "generated_path": "ArrayUtilsTest_testToMap.java",
    "Compile_result": 1,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3;\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert.assertNotSame;\nimport static org.junit.Assert.assertNull;\nimport static org.junit.Assert.assertSame;\nimport static org.junit.Assert.assertTrue;\nimport static org.junit.Assert.fail;\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.Modifier;\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.Date;\nimport java.util.Map;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ArrayUtilsTest###testToMap\nimport static org.junit.Assert.*;\nimport java.util.HashMap;\nimport java.util.Map;\nimport org.junit.Test;\npublic class ArrayUtilsTest_testToMap {\n    @Test\n    public void testToMap() {\n        Object[] array = {new Object(), new Object()};\n        Map<Object, Object> map = ArrayUtils.toMap(array);\n        assertNotNull(map);\n        assertEquals(2, map.size());\n        array = new Object[] {new Object[] {\"key1\", \"value1\"}, new Object[] {\"key2\", \"value2\"}};\n        map = ArrayUtils.toMap(array);\n        assertNotNull(map);\n        assertEquals(2, map.size());\n        assertEquals(\"value1\", map.get(\"key1\"));\n        assertEquals(\"value2\", map.get(\"key2\"));\n        array = new Object[] {new Object[] {\"key1\", \"value1\"}, new Object[] {\"key2\"}};\n        try {\n            map = ArrayUtils.toMap(array);\n            fail(\"Expected IllegalArgumentException to be thrown\");\n        } catch (IllegalArgumentException e) {\n            assertEquals(\"Array element 1, 'key2', has a length less than 2\", e.getMessage());\n        }\n        array = new Object[] {new Object(), \"string\"};\n        try {\n            map = ArrayUtils.toMap(array);\n            fail(\"Expected IllegalArgumentException to be thrown\");\n        } catch (IllegalArgumentException e) {\n            assertEquals(\"Array element 1, 'string', is neither of type Map.Entry nor an Array\", e.getMessage());\n        }\n    }\n}"
  },
  {
    "original_path": "syphr42_prom###syphr42_prom/src/test/java/org/syphr/prom/ChangeStackTest###testSync",
    "generated_path": "ChangeStackTest_testSync.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package org.syphr.prom;\nimport junit.framework.Assert;\nimport org.junit.Before;\nimport org.junit.Test;\n// original test path: syphr42_prom###syphr42_prom/src/test/java/org/syphr/prom/ChangeStackTest###testSync\npublic class ChangeStackTest_testSync {\n    private ChangeStack<Integer> stack;\n    @Before\n    public void setUp() {\n        stack = new ChangeStack<>(1);\n    }\n    @Test\n    public void testSync() throws NullPointerException {\n        boolean result = stack.sync(2);\n        Assert.assertTrue(result);\n        Assert.assertEquals(2, (int) stack.peek());\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/CharSetTest###testGetInstance",
    "generated_path": "CharSetTest_testGetInstance.java",
    "Compile_result": 1,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertNull;\nimport static org.junit.Assert.assertSame;\nimport static org.junit.Assert.assertTrue;\nimport java.lang.reflect.Modifier;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/CharSetTest###testGetInstance\nimport org.junit.Test;\nimport static org.junit.Assert.*;\npublic class CharSetTest_testGetInstance {\n    @Test\n    public void testGetInstance() {\n        // Test when setStrs is null\n        assertNull(CharSet.getInstance(null));\n        // Test when setStrs has length 1 and is a common CharSet\n        CharSet common = CharSet.COMMON.get(\"alpha\");\n        assertSame(common, CharSet.getInstance(\"alpha\"));\n        // Test when setStrs has length 1 and is not a common CharSet\n        CharSet newCharSet = CharSet.getInstance(\"newSet\");\n        assertNotNull(newCharSet);\n        assertFalse(CharSet.COMMON.containsValue(newCharSet));\n        // Test when setStrs has length greater than 1\n        CharSet multipleCharSet = CharSet.getInstance(\"set1\", \"set2\", \"set3\");\n        assertNotNull(multipleCharSet);\n        assertFalse(CharSet.COMMON.containsValue(multipleCharSet));\n    }\n}"
  },
  {
    "original_path": "waldheinz_fat32-lib###waldheinz_fat32-lib/src/test/java/de/waldheinz/fs/fat/ClusterChainTest###testSetSize",
    "generated_path": "ClusterChainTest_testSetSize.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package de.waldheinz.fs.fat;\nimport de.waldheinz.fs.util.RamDisk;\nimport java.io.IOException;\nimport java.nio.ByteBuffer;\nimport org.junit.Before;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\n// original test path: waldheinz_fat32-lib###waldheinz_fat32-lib/src/test/java/de/waldheinz/fs/fat/ClusterChainTest###testSetSize\npublic class ClusterChainTest_testSetSize {\n    private Fat fat;\n    private ClusterChain clusterChain;\n    @Before\n    public void setUp() throws Exception {\n        RamDisk ramDisk = new RamDisk(1024 * 1024);\n        fat = new Fat(ramDisk, FileSystemType.FAT32);\n        clusterChain = new ClusterChain(fat, false);\n    }\n    @Test\n    public void testSetSize() throws IOException {\n        long size = 1024;\n        long expectedNrClusters = (size + clusterChain.getClusterSize() - 1) / clusterChain.getClusterSize();\n        long expectedSize = expectedNrClusters * clusterChain.getClusterSize();\n        long actualSize = clusterChain.setSize(size);\n        assertEquals(expectedSize, actualSize);\n        assertEquals(expectedNrClusters, clusterChain.getLength());\n    }\n}"
  },
  {
    "original_path": "udoprog_tiny-async-java###udoprog_tiny-async-java/tiny-async-core/src/test/java/eu/toolchain/concurrent/CollectHelperTest###testCheckFailed",
    "generated_path": "CollectHelperTest_testCheckFailed.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package eu.toolchain.concurrent;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert.assertNull;\nimport static org.mockito.Matchers.any;\nimport static org.mockito.Matchers.anyObject;\nimport static org.mockito.Mockito.doNothing;\nimport static org.mockito.Mockito.doReturn;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.spy;\nimport static org.mockito.Mockito.times;\nimport static org.mockito.Mockito.verify;\nimport com.google.common.collect.ImmutableList;\nimport java.util.Collection;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.function.Function;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.mockito.Mock;\nimport org.mockito.runners.MockitoJUnitRunner;\n// original test path: udoprog_tiny-async-java###udoprog_tiny-async-java/tiny-async-core/src/test/java/eu/toolchain/concurrent/CollectHelperTest###testCheckFailed\n@RunWith(MockitoJUnitRunner.class)\npublic class CollectHelperTest_testCheckFailed {\n    @Mock\n    private Stage<?> mockStage;\n    @Before\n    public void setUp() {\n        // Set up any necessary objects or mocks\n    }\n    @Test\n    public void testCheckFailed() {\n        // Given\n        CollectHelper collectHelper = new CollectHelper(1, null, ImmutableList.of(mockStage), null);\n        collectHelper.failed.set(false);\n        // When\n        collectHelper.checkFailed();\n        // Then\n        verify(mockStage, times(1)).cancel();\n        assertNull(collectHelper.sources);\n        assertTrue(collectHelper.failed.get());\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/builder/CompareToBuilderTest###testAppendSuper",
    "generated_path": "CompareToBuilderTest_testAppendSuper.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3.builder;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertTrue;\nimport java.math.BigInteger;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/builder/CompareToBuilderTest###testAppendSuper\nimport org.junit.Test;\nimport static org.junit.Assert.*;\npublic class CompareToBuilderTest_testAppendSuper {\n    @Test\n    public void testAppendSuper() {\n        CompareToBuilder builder = new CompareToBuilder();\n        int superCompareTo = 5;\n        builder.appendSuper(superCompareTo);\n        assertEquals(superCompareTo, builder.comparison);\n    }\n}"
  },
  {
    "original_path": "udoprog_tiny-async-java###udoprog_tiny-async-java/tiny-async-core/src/test/java/eu/toolchain/concurrent/ConcurrentCompletableTest###testCancel",
    "generated_path": "ConcurrentCompletableTest_testCancel.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package eu.toolchain.concurrent;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertTrue;\nimport static org.mockito.Matchers.any;\nimport static org.mockito.Matchers.eq;\nimport static org.mockito.Mockito.doNothing;\nimport static org.mockito.Mockito.doReturn;\nimport static org.mockito.Mockito.doThrow;\nimport static org.mockito.Mockito.inOrder;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.times;\nimport static org.mockito.Mockito.verify;\nimport java.util.function.Consumer;\nimport java.util.function.Function;\nimport java.util.function.Supplier;\nimport org.junit.Before;\nimport org.junit.Rule;\nimport org.junit.Test;\nimport org.junit.rules.ExpectedException;\nimport org.junit.runner.RunWith;\nimport org.mockito.ArgumentCaptor;\nimport org.mockito.InOrder;\nimport org.mockito.Mock;\nimport org.mockito.Mockito;\nimport org.mockito.runners.MockitoJUnitRunner;\n// original test path: udoprog_tiny-async-java###udoprog_tiny-async-java/tiny-async-core/src/test/java/eu/toolchain/concurrent/ConcurrentCompletableTest###testCancel\n@RunWith(MockitoJUnitRunner.class)\npublic class ConcurrentCompletableTest_testCancel {\n    @Mock\n    private Caller caller;\n    @Rule\n    public ExpectedException expectedException = ExpectedException.none();\n    private ConcurrentCompletable completable;\n    @Before\n    public void setUp() {\n        completable = new ConcurrentCompletable(caller);\n    }\n    @Test\n    public void cancel_shouldReturnTrueAndSetStateToCancelledAndResultToCancel_whenStateIsPending() {\n        // Arrange\n        completable.state.set(ConcurrentCompletable.PENDING);\n        // Act\n        boolean result = completable.cancel();\n        // Assert\n        assertTrue(result);\n        assertEquals(ConcurrentCompletable.CANCELLED, completable.state.get());\n        assertEquals(ConcurrentCompletable.CANCEL, completable.result);\n    }\n    @Test\n    public void cancel_shouldReturnFalse_whenStateIsNotPending() {\n        // Arrange\n        completable.state.set(ConcurrentCompletable.CANCELLED);\n        // Act\n        boolean result = completable.cancel();\n        // Assert\n        assertFalse(result);\n        assertEquals(ConcurrentCompletable.CANCELLED, completable.state.get());\n        assertNull(completable.result);\n    }\n    @Test\n    public void cancel_shouldPostComplete() {\n        // Arrange\n        completable.state.set(ConcurrentCompletable.PENDING);\n        doNothing().when(completable).postComplete();\n        // Act\n        completable.cancel();\n        // Assert\n        verify(completable, times(1)).postComplete();\n    }\n}"
  },
  {
    "original_path": "udoprog_tiny-async-java###udoprog_tiny-async-java/tiny-async-core/src/test/java/eu/toolchain/concurrent/ConcurrentCompletableTest###testComplete",
    "generated_path": "ConcurrentCompletableTest_testComplete.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package eu.toolchain.concurrent;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertTrue;\nimport static org.mockito.Matchers.any;\nimport static org.mockito.Matchers.eq;\nimport static org.mockito.Mockito.doNothing;\nimport static org.mockito.Mockito.doReturn;\nimport static org.mockito.Mockito.doThrow;\nimport static org.mockito.Mockito.inOrder;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.times;\nimport static org.mockito.Mockito.verify;\nimport java.util.function.Consumer;\nimport java.util.function.Function;\nimport java.util.function.Supplier;\nimport org.junit.Before;\nimport org.junit.Rule;\nimport org.junit.Test;\nimport org.junit.rules.ExpectedException;\nimport org.junit.runner.RunWith;\nimport org.mockito.ArgumentCaptor;\nimport org.mockito.InOrder;\nimport org.mockito.Mock;\nimport org.mockito.Mockito;\nimport org.mockito.runners.MockitoJUnitRunner;\n// original test path: udoprog_tiny-async-java###udoprog_tiny-async-java/tiny-async-core/src/test/java/eu/toolchain/concurrent/ConcurrentCompletableTest###testComplete\n@RunWith(MockitoJUnitRunner.class)\npublic class ConcurrentCompletableTest_testComplete {\n    @Mock\n    private Caller caller;\n    @Rule\n    public ExpectedException expectedException = ExpectedException.none();\n    private ConcurrentCompletable<Object> completable;\n    @Before\n    public void setUp() {\n        completable = new ConcurrentCompletable<>(caller);\n    }\n    @Test\n    public void testComplete() {\n        Object result = new Object();\n        assertTrue(completable.complete(result));\n        assertEquals(result, completable.getResult());\n    }\n    @Test\n    public void testCompleteWithNullResult() {\n        assertTrue(completable.complete(null));\n        assertEquals(ConcurrentCompletable.NULL, completable.getResult());\n    }\n    @Test\n    public void testCompleteWhenAlreadyCompleted() {\n        Object result1 = new Object();\n        Object result2 = new Object();\n        assertTrue(completable.complete(result1));\n        assertFalse(completable.complete(result2));\n        assertEquals(result1, completable.getResult());\n    }\n}"
  },
  {
    "original_path": "udoprog_tiny-async-java###udoprog_tiny-async-java/tiny-async-core/src/test/java/eu/toolchain/concurrent/ConcurrentCompletableTest###testWhenDone",
    "generated_path": "ConcurrentCompletableTest_testWhenDone.java",
    "Compile_result": 1,
    "Test_result": 0,
    "Gen_Test": "package eu.toolchain.concurrent;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertTrue;\nimport static org.mockito.Matchers.any;\nimport static org.mockito.Matchers.eq;\nimport static org.mockito.Mockito.doNothing;\nimport static org.mockito.Mockito.doReturn;\nimport static org.mockito.Mockito.doThrow;\nimport static org.mockito.Mockito.inOrder;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.times;\nimport static org.mockito.Mockito.verify;\nimport java.util.function.Consumer;\nimport java.util.function.Function;\nimport java.util.function.Supplier;\nimport org.junit.Before;\nimport org.junit.Rule;\nimport org.junit.Test;\nimport org.junit.rules.ExpectedException;\nimport org.junit.runner.RunWith;\nimport org.mockito.ArgumentCaptor;\nimport org.mockito.InOrder;\nimport org.mockito.Mock;\nimport org.mockito.Mockito;\nimport org.mockito.runners.MockitoJUnitRunner;\n// original test path: udoprog_tiny-async-java###udoprog_tiny-async-java/tiny-async-core/src/test/java/eu/toolchain/concurrent/ConcurrentCompletableTest###testWhenDone\n@RunWith(MockitoJUnitRunner.class)\npublic class ConcurrentCompletableTest_testWhenDone {\n    @Mock\n    private Caller caller;\n    private ConcurrentCompletable<Object> completable;\n    @Before\n    public void setUp() {\n        completable = new ConcurrentCompletable<>(caller);\n    }\n    @Test\n    public void whenDone_addsCallbackToBeExecutedOnCompletion() {\n        Runnable callback = mock(Runnable.class);\n        completable.whenDone(callback);\n        InOrder inOrder = inOrder(caller, callback);\n        inOrder.verify(caller).execute(eq(callback));\n        inOrder.verify(callback).run();\n    }\n    @Test\n    public void whenDone_returnsThisIfCallbackAdded() {\n        Runnable callback = mock(Runnable.class);\n        Stage<Object> result = completable.whenDone(callback);\n        assertEquals(completable, result);\n    }\n    @Test\n    public void whenDone_executesCallbackImmediatelyIfAlreadyCompleted() {\n        Runnable callback = mock(Runnable.class);\n        completable.complete(new Object());\n        completable.whenDone(callback);\n        verify(callback).run();\n    }\n}"
  },
  {
    "original_path": "udoprog_tiny-async-java###udoprog_tiny-async-java/tiny-async-core/src/test/java/eu/toolchain/concurrent/ConcurrentManagedTest###testBorrow",
    "generated_path": "ConcurrentManagedTest_testBorrow.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package eu.toolchain.concurrent;\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert.assertNull;\nimport static org.junit.Assert.assertTrue;\nimport static org.junit.Assert.fail;\nimport static org.mockito.Matchers.any;\nimport static org.mockito.Mockito.doAnswer;\nimport static org.mockito.Mockito.doNothing;\nimport static org.mockito.Mockito.doReturn;\nimport static org.mockito.Mockito.doThrow;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.never;\nimport static org.mockito.Mockito.spy;\nimport static org.mockito.Mockito.times;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.when;\nimport com.google.common.collect.ImmutableList;\nimport java.util.concurrent.atomic.AtomicReference;\nimport java.util.function.Function;\nimport java.util.function.Supplier;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.mockito.Mock;\nimport org.mockito.invocation.InvocationOnMock;\nimport org.mockito.runners.MockitoJUnitRunner;\nimport org.mockito.stubbing.Answer;\n// original test path: udoprog_tiny-async-java###udoprog_tiny-async-java/tiny-async-core/src/test/java/eu/toolchain/concurrent/ConcurrentManagedTest###testBorrow\n@RunWith(MockitoJUnitRunner.class)\npublic class ConcurrentManagedTest_testBorrow {\n    @Mock\n    private Caller caller;\n    @Mock\n    private ManagedOptions options;\n    @Mock\n    private Supplier<? extends Stage<T>> setup;\n    @Mock\n    private Completable<Void> startFuture;\n    @Mock\n    private Completable<Void> zeroLeaseFuture;\n    @Mock\n    private Completable<T> stopReferenceFuture;\n    @Mock\n    private Stage<Void> stopFuture;\n    private ConcurrentManaged<T> concurrentManaged;\n    @Before\n    public void setUp() {\n        concurrentManaged = new ConcurrentManaged<>(caller, options, setup, startFuture, zeroLeaseFuture, stopReferenceFuture, stopFuture);\n    }\n    @Test\n    public void testBorrow() {\n        // Set up\n        T value = mock(T.class);\n        ValidBorrowed<T> expectedBorrowed = new ValidBorrowed<>(value, new StackTraceElement[0]);\n        AtomicReference<T> reference = new AtomicReference<>(value);\n        concurrentManaged.reference = reference;\n        concurrentManaged.traces = Collections.newSetFromMap(new ConcurrentHashMap<ValidBorrowed, Boolean>());\n        // Execute\n        Borrowed<T> actualBorrowed = concurrentManaged.borrow();\n        // Verify\n        assertEquals(expectedBorrowed, actualBorrowed);\n        assertTrue(concurrentManaged.traces.contains(expectedBorrowed));\n    }\n}"
  },
  {
    "original_path": "udoprog_tiny-async-java###udoprog_tiny-async-java/tiny-async-core/src/test/java/eu/toolchain/concurrent/ConcurrentManagedTest###testDoto",
    "generated_path": "ConcurrentManagedTest_testDoto.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package eu.toolchain.concurrent;\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert.assertNull;\nimport static org.junit.Assert.assertTrue;\nimport static org.junit.Assert.fail;\nimport static org.mockito.Matchers.any;\nimport static org.mockito.Mockito.doAnswer;\nimport static org.mockito.Mockito.doNothing;\nimport static org.mockito.Mockito.doReturn;\nimport static org.mockito.Mockito.doThrow;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.never;\nimport static org.mockito.Mockito.spy;\nimport static org.mockito.Mockito.times;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.when;\nimport com.google.common.collect.ImmutableList;\nimport java.util.concurrent.atomic.AtomicReference;\nimport java.util.function.Function;\nimport java.util.function.Supplier;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.mockito.Mock;\nimport org.mockito.invocation.InvocationOnMock;\nimport org.mockito.runners.MockitoJUnitRunner;\nimport org.mockito.stubbing.Answer;\n// original test path: udoprog_tiny-async-java###udoprog_tiny-async-java/tiny-async-core/src/test/java/eu/toolchain/concurrent/ConcurrentManagedTest###testDoto\n@RunWith(MockitoJUnitRunner.class)\npublic class ConcurrentManagedTest_testDoto {\n    @Mock\n    private Caller caller;\n    @Mock\n    private ManagedOptions options;\n    @Mock\n    private Supplier<Stage<String>> setup;\n    @Mock\n    private Completable<Void> startFuture;\n    @Mock\n    private Completable<Void> zeroLeaseFuture;\n    @Mock\n    private Completable<String> stopReferenceFuture;\n    @Mock\n    private Stage<Void> stopFuture;\n    private ConcurrentManaged<String> concurrentManaged;\n    @Before\n    public void setUp() {\n        concurrentManaged = new ConcurrentManaged<>(caller, options, setup, startFuture, zeroLeaseFuture, stopReferenceFuture, stopFuture);\n    }\n    @Test\n    public void testDoto() throws Exception {\n        // given\n        String expected = \"expected\";\n        Function<String, Stage<Integer>> function = s -> new ImmediateResult<>(caller, s.length());\n        // when\n        Stage<Integer> result = concurrentManaged.doto(function.apply(expected));\n        // then\n        assertEquals(expected.length(), (int) result.get());\n    }\n}"
  },
  {
    "original_path": "udoprog_tiny-async-java###udoprog_tiny-async-java/tiny-async-core/src/test/java/eu/toolchain/concurrent/ConcurrentManagedTest###testStop",
    "generated_path": "ConcurrentManagedTest_testStop.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package eu.toolchain.concurrent;\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert.assertNull;\nimport static org.junit.Assert.assertTrue;\nimport static org.junit.Assert.fail;\nimport static org.mockito.Matchers.any;\nimport static org.mockito.Mockito.doAnswer;\nimport static org.mockito.Mockito.doNothing;\nimport static org.mockito.Mockito.doReturn;\nimport static org.mockito.Mockito.doThrow;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.never;\nimport static org.mockito.Mockito.spy;\nimport static org.mockito.Mockito.times;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.when;\nimport com.google.common.collect.ImmutableList;\nimport java.util.concurrent.atomic.AtomicReference;\nimport java.util.function.Function;\nimport java.util.function.Supplier;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.mockito.Mock;\nimport org.mockito.invocation.InvocationOnMock;\nimport org.mockito.runners.MockitoJUnitRunner;\nimport org.mockito.stubbing.Answer;\n// original test path: udoprog_tiny-async-java###udoprog_tiny-async-java/tiny-async-core/src/test/java/eu/toolchain/concurrent/ConcurrentManagedTest###testStop\n@RunWith(MockitoJUnitRunner.class)\npublic class ConcurrentManagedTest_testStop {\n    @Mock\n    private Caller caller;\n    @Mock\n    private ManagedOptions options;\n    @Mock\n    private Supplier<? extends Stage<T>> setup;\n    @Mock\n    private Completable<Void> startFuture;\n    @Mock\n    private Completable<Void> zeroLeaseFuture;\n    @Mock\n    private Completable<T> stopReferenceFuture;\n    @Mock\n    private Stage<Void> stopFuture;\n    private ConcurrentManaged<T> concurrentManaged;\n    @Before\n    public void setUp() {\n        concurrentManaged = new ConcurrentManaged<>(caller, options, setup, startFuture, zeroLeaseFuture, stopReferenceFuture, stopFuture);\n    }\n    @Test\n    public void testStop() {\n        AtomicReference<ManagedState> state = spy(new AtomicReference<>(ManagedState.STARTED));\n        AtomicReference<T> reference = spy(new AtomicReference<>());\n        concurrentManaged.state = state;\n        concurrentManaged.reference = reference;\n        // Mocking the behavior of compareAndSet method\n        when(state.compareAndSet(ManagedState.STARTED, ManagedState.STOPPED)).thenReturn(true);\n        // Mocking the behavior of getAndSet method\n        T expectedReference = mock(T.class);\n        when(reference.getAndSet(null)).thenReturn(expectedReference);\n        // Mocking the behavior of complete method\n        doNothing().when(stopReferenceFuture).complete(expectedReference);\n        // Mocking the behavior of release method\n        doNothing().when(concurrentManaged).release();\n        // Call the stop method\n        Stage<Void> result = concurrentManaged.stop();\n        // Verify the behavior of compareAndSet method\n        verify(state, times(1)).compareAndSet(ManagedState.STARTED, ManagedState.STOPPED);\n        // Verify the behavior of getAndSet method\n        verify(reference, times(1)).getAndSet(null);\n        // Verify the behavior of complete method\n        verify(stopReferenceFuture, times(1)).complete(expectedReference);\n        // Verify the behavior of release method\n        verify(concurrentManaged, times(1)).release();\n        // Verify the returned value\n        assertEquals(stopFuture, result);\n    }\n}"
  },
  {
    "original_path": "udoprog_tiny-async-java###udoprog_tiny-async-java/tiny-async-core/src/test/java/eu/toolchain/concurrent/ConcurrentManagedTest###testToStringTracing",
    "generated_path": "ConcurrentManagedTest_testToStringTracing.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package eu.toolchain.concurrent;\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert.assertNull;\nimport static org.junit.Assert.assertTrue;\nimport static org.junit.Assert.fail;\nimport static org.mockito.Matchers.any;\nimport static org.mockito.Mockito.doAnswer;\nimport static org.mockito.Mockito.doNothing;\nimport static org.mockito.Mockito.doReturn;\nimport static org.mockito.Mockito.doThrow;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.never;\nimport static org.mockito.Mockito.spy;\nimport static org.mockito.Mockito.times;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.when;\nimport com.google.common.collect.ImmutableList;\nimport java.util.concurrent.atomic.AtomicReference;\nimport java.util.function.Function;\nimport java.util.function.Supplier;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.mockito.Mock;\nimport org.mockito.invocation.InvocationOnMock;\nimport org.mockito.runners.MockitoJUnitRunner;\nimport org.mockito.stubbing.Answer;\n// original test path: udoprog_tiny-async-java###udoprog_tiny-async-java/tiny-async-core/src/test/java/eu/toolchain/concurrent/ConcurrentManagedTest###testToStringTracing\n@RunWith(MockitoJUnitRunner.class)\npublic class ConcurrentManagedTest_testToStringTracing {\n    @Mock\n    private ValidBorrowed validBorrowed1;\n    @Mock\n    private ValidBorrowed validBorrowed2;\n    @Mock\n    private ValidBorrowed validBorrowed3;\n    private ConcurrentManaged<String> concurrentManaged;\n    @Before\n    public void setUp() {\n        concurrentManaged = new ConcurrentManaged<>(null, null, null, null, null, null, null);\n    }\n    @Test\n    public void testToStringTracing() {\n        List<ValidBorrowed> traces = ImmutableList.of(validBorrowed1, validBorrowed2, validBorrowed3);\n        String expected = \"Managed(INITIALIZED, null:\\n\" +\n                validBorrowed1.toString() +\n                validBorrowed2.toString() +\n                validBorrowed3.toString() +\n                \")\";\n        String actual = concurrentManaged.toStringTracing(null, traces);\n        assertEquals(expected, actual);\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testIntArrayToLong",
    "generated_path": "ConversionTest_testIntArrayToLong.java",
    "Compile_result": 1,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3;\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.fail;\nimport java.util.UUID;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testIntArrayToLong\npublic class ConversionTest_testIntArrayToLong {\n    @Test\n    public void testIntArrayToLong() {\n        int[] src = {1, 2, 3, 4};\n        int srcPos = 1;\n        long dstInit = 0;\n        int dstPos = 0;\n        int nInts = 3;\n        long expectedOutput = 0x0000000000000F8L;\n        long result = Conversion.intArrayToLong(src, srcPos, dstInit, dstPos, nInts);\n        assertEquals(expectedOutput, result);\n        // Test for IllegalArgumentException\n        try {\n            src = new int[0];\n            nInts = 1;\n            Conversion.intArrayToLong(src, srcPos, dstInit, dstPos, nInts);\n            fail(\"Expected IllegalArgumentException was not thrown\");\n        } catch (IllegalArgumentException e) {\n            // Test passed\n        }\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testIntToByteArray",
    "generated_path": "ConversionTest_testIntToByteArray.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3;\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.fail;\nimport java.util.UUID;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testIntToByteArray\npublic class ConversionTest_testIntToByteArray {\n    @Test\n    public void testIntToByteArray() {\n        int src = 123456789;\n        int srcPos = 0;\n        byte[] dst = new byte[4];\n        int dstPos = 0;\n        int nBytes = 4;\n        byte[] expected = {7, 91, 205, 21};\n        byte[] result = Conversion.intToByteArray(src, srcPos, dst, dstPos, nBytes);\n        assertArrayEquals(expected, result);\n        // Test for nBytes = 0\n        nBytes = 0;\n        expected = new byte[] {};\n        result = Conversion.intToByteArray(src, srcPos, dst, dstPos, nBytes);\n        assertArrayEquals(expected, result);\n        // Test for (nBytes-1)*8+srcPos >= 32\n        nBytes = 5;\n        try {\n            Conversion.intToByteArray(src, srcPos, dst, dstPos, nBytes);\n            fail(\"IllegalArgumentException expected but not thrown\");\n        } catch (IllegalArgumentException e) {\n            assertEquals(\"(nBytes-1)*8+srcPos is greater or equal to than 32\", e.getMessage());\n        }\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testIntToShortArray",
    "generated_path": "ConversionTest_testIntToShortArray.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3;\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.fail;\nimport java.util.UUID;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testIntToShortArray\npublic class ConversionTest_testIntToShortArray {\n    @Test\n    public void testIntToShortArray() {\n        int src = 0b10101010101010101010101010101010; // 1431655765 in decimal\n        int srcPos = 0;\n        short[] dst = new short[4];\n        int dstPos = 0;\n        int nShorts = 4;\n        Conversion.intToShortArray(src, srcPos, dst, dstPos, nShorts);\n        short[] expected = {43690, 43690, 43690, 43690}; // {0b1010101010101010, 0b1010101010101010, 0b1010101010101010, 0b1010101010101010} in binary\n        assertArrayEquals(expected, dst);\n        src = 0b10101010101010101010101010101010; // 1431655765 in decimal\n        srcPos = 16;\n        dst = new short[2];\n        dstPos = 0;\n        nShorts = 2;\n        Conversion.intToShortArray(src, srcPos, dst, dstPos, nShorts);\n        expected = new short[] {43690, 43690}; // {0b1010101010101010, 0b1010101010101010} in binary\n        assertArrayEquals(expected, dst);\n        src = 0b10101010101010101010101010101010; // 1431655765 in decimal\n        srcPos = 16;\n        dst = new short[2];\n        dstPos = 1;\n        nShorts = 2;\n        Conversion.intToShortArray(src, srcPos, dst, dstPos, nShorts);\n        expected = new short[] {0, 43690}; // {0b0000000000000000, 0b1010101010101010} in binary\n        assertArrayEquals(expected, dst);\n        src = 0b10101010101010101010101010101010; // 1431655765 in decimal\n        srcPos = 16;\n        dst = new short[2];\n        dstPos = 0;\n        nShorts = 3;\n        try {\n            Conversion.intToShortArray(src, srcPos, dst, dstPos, nShorts);\n            fail(\"IllegalArgumentException should have been thrown\");\n        } catch (IllegalArgumentException e) {\n            assertEquals(\"(nShorts-1)*16+srcPos is greater or equal to than 32\", e.getMessage());\n        }\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testLongToByteArray",
    "generated_path": "ConversionTest_testLongToByteArray.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3;\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.fail;\nimport java.util.UUID;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testLongToByteArray\npublic class ConversionTest_testLongToByteArray {\n    @Test\n    public void testLongToByteArray() {\n        long src = 1234567890L;\n        int srcPos = 0;\n        byte[] dst = new byte[4];\n        int dstPos = 0;\n        int nBytes = 4;\n        byte[] expected = {0x49, 0x96, 0x02, 0xd2};\n        byte[] result = Conversion.longToByteArray(src, srcPos, dst, dstPos, nBytes);\n        assertArrayEquals(expected, result);\n        // Test for nBytes = 0\n        nBytes = 0;\n        result = Conversion.longToByteArray(src, srcPos, dst, dstPos, nBytes);\n        assertArrayEquals(dst, result);\n        // Test for (nBytes - 1) * 8 + srcPos >= 64\n        nBytes = 8;\n        try {\n            result = Conversion.longToByteArray(src, srcPos, dst, dstPos, nBytes);\n            fail(\"Expected IllegalArgumentException was not thrown\");\n        } catch (IllegalArgumentException e) {\n            assertEquals(\"(nBytes-1)*8+srcPos is greater or equal to than 64\", e.getMessage());\n        }\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testLongToShortArray",
    "generated_path": "ConversionTest_testLongToShortArray.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3;\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.fail;\nimport java.util.UUID;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testLongToShortArray\nimport org.junit.Test;\nimport static org.junit.Assert.*;\npublic class ConversionTest_testLongToShortArray {\n    @Test\n    public void testLongToShortArray() {\n        long src = 0x123456789abcdef0L;\n        int srcPos = 4;\n        short[] dst = new short[4];\n        int dstPos = 1;\n        int nShorts = 3;\n        short[] expected = {0x5678, 0x9abc, 0xdef0, 0x0000};\n        Conversion.longToShortArray(src, srcPos, dst, dstPos, nShorts);\n        assertArrayEquals(expected, dst);\n    }\n    @Test(expected = IllegalArgumentException.class)\n    public void testLongToShortArrayThrowsException() {\n        long src = 0x123456789abcdef0L;\n        int srcPos = 4;\n        short[] dst = new short[4];\n        int dstPos = 1;\n        int nShorts = 4;\n        Conversion.longToShortArray(src, srcPos, dst, dstPos, nShorts);\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testShortToByteArray",
    "generated_path": "ConversionTest_testShortToByteArray.java",
    "Compile_result": 1,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3;\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.fail;\nimport java.util.UUID;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testShortToByteArray\npublic class ConversionTest_testShortToByteArray {\n    @Test\n    public void testShortToByteArray() {\n        short src = 12345;\n        int srcPos = 0;\n        byte[] dst = new byte[4];\n        int dstPos = 0;\n        int nBytes = 4;\n        byte[] expected = {0x39, 0x30, 0x00, 0x00};\n        byte[] result = Conversion.shortToByteArray(src, srcPos, dst, dstPos, nBytes);\n        assertArrayEquals(expected, result);\n        // Test for nBytes = 0\n        nBytes = 0;\n        result = Conversion.shortToByteArray(src, srcPos, dst, dstPos, nBytes);\n        assertArrayEquals(dst, result);\n        // Test for (nBytes-1)*8+srcPos >= 16\n        srcPos = 8;\n        nBytes = 2;\n        try {\n            Conversion.shortToByteArray(src, srcPos, dst, dstPos, nBytes);\n            fail(\"Expected IllegalArgumentException was not thrown\");\n        } catch (IllegalArgumentException e) {\n            assertEquals(\"(nBytes-1)*8+srcPos is greater or equal to than 16\", e.getMessage());\n        }\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testShortToHex",
    "generated_path": "ConversionTest_testShortToHex.java",
    "Compile_result": 1,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3;\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.fail;\nimport java.util.UUID;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testShortToHex\nimport org.junit.Assert;\nimport org.junit.Test;\npublic class ConversionTest_testShortToHex {\n    @Test\n    public void testShortToHex() {\n        short src = 1234;\n        int srcPos = 0;\n        String dstInit = \"\";\n        int dstPos = 0;\n        int nHexs = 4;\n        String expected = \"04D2\";\n        String actual = Conversion.shortToHex(src, srcPos, dstInit, dstPos, nHexs);\n        Assert.assertEquals(expected, actual);\n    }\n}"
  },
  {
    "original_path": "udoprog_tiny-async-java###udoprog_tiny-async-java/tiny-async-core/src/test/java/eu/toolchain/concurrent/CoreAsyncTest###testDoCollect",
    "generated_path": "CoreAsyncTest_testDoCollect.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package eu.toolchain.concurrent;\nimport static eu.toolchain.concurrent.CoreAsync.buildCollectedException;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert.assertTrue;\nimport static org.mockito.Matchers.any;\nimport static org.mockito.Matchers.anyCollection;\nimport static org.mockito.Matchers.eq;\nimport static org.mockito.Mockito.doAnswer;\nimport static org.mockito.Mockito.doNothing;\nimport static org.mockito.Mockito.doReturn;\nimport static org.mockito.Mockito.doThrow;\nimport static org.mockito.Mockito.inOrder;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.never;\nimport static org.mockito.Mockito.spy;\nimport static org.mockito.Mockito.times;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.when;\nimport com.google.common.collect.ImmutableList;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\nimport java.util.concurrent.Callable;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Future;\nimport java.util.function.Consumer;\nimport java.util.function.Function;\nimport java.util.function.Supplier;\nimport org.junit.Before;\nimport org.junit.Rule;\nimport org.junit.Test;\nimport org.junit.rules.ExpectedException;\nimport org.junit.runner.RunWith;\nimport org.mockito.InOrder;\nimport org.mockito.Mock;\nimport org.mockito.invocation.InvocationOnMock;\nimport org.mockito.runners.MockitoJUnitRunner;\nimport org.mockito.stubbing.Answer;\n// original test path: udoprog_tiny-async-java###udoprog_tiny-async-java/tiny-async-core/src/test/java/eu/toolchain/concurrent/CoreAsyncTest###testDoCollect\n@RunWith(MockitoJUnitRunner.class)\npublic class CoreAsyncTest_testDoCollect {\n    @Mock\n    private Stage<String> stage1;\n    @Mock\n    private Stage<Integer> stage2;\n    @Mock\n    private Function<Collection<Object>, String> collector;\n    @Rule\n    public ExpectedException expectedException = ExpectedException.none();\n    private CoreAsync coreAsync;\n    @Before\n    public void setUp() {\n        coreAsync = new CoreAsync();\n    }\n    @Test\n    public void testDoCollect() throws Exception {\n        final List<Stage<?>> stages = ImmutableList.of(stage1, stage2);\n        final String expectedResult = \"result\";\n        final Collection<Object> collectedResults = new ArrayList<>();\n        collectedResults.add(\"stringResult\");\n        collectedResults.add(123);\n        when(collector.apply(anyCollection())).thenReturn(expectedResult);\n        final Completable<String> completable = coreAsync.doCollect(stages, collector);\n        verify(stage1).handle(any());\n        verify(stage2).handle(any());\n        final InOrder inOrder = inOrder(stage1, stage2, collector);\n        final CollectHelper<Object, String> collectHelper = new CollectHelper<>(2, collector, stages, completable);\n        // simulate completion of first stage with a result\n        collectHelper.completed(0, \"stringResult\");\n        inOrder.verify(collector, never()).apply(anyCollection());\n        inOrder.verify(stage2).handle(eq(collectHelper));\n        // simulate completion of second stage with a result\n        collectHelper.completed(1, 123);\n        inOrder.verify(collector).apply(collectedResults);\n        assertEquals(expectedResult, completable.get());\n    }\n}"
  },
  {
    "original_path": "udoprog_tiny-async-java###udoprog_tiny-async-java/tiny-async-core/src/test/java/eu/toolchain/concurrent/CoreAsyncTest###testDoCollectAndDiscard",
    "generated_path": "CoreAsyncTest_testDoCollectAndDiscard.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package eu.toolchain.concurrent;\nimport static eu.toolchain.concurrent.CoreAsync.buildCollectedException;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert.assertTrue;\nimport static org.mockito.Matchers.any;\nimport static org.mockito.Matchers.anyCollection;\nimport static org.mockito.Matchers.eq;\nimport static org.mockito.Mockito.doAnswer;\nimport static org.mockito.Mockito.doNothing;\nimport static org.mockito.Mockito.doReturn;\nimport static org.mockito.Mockito.doThrow;\nimport static org.mockito.Mockito.inOrder;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.never;\nimport static org.mockito.Mockito.spy;\nimport static org.mockito.Mockito.times;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.when;\nimport com.google.common.collect.ImmutableList;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\nimport java.util.concurrent.Callable;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Future;\nimport java.util.function.Consumer;\nimport java.util.function.Function;\nimport java.util.function.Supplier;\nimport org.junit.Before;\nimport org.junit.Rule;\nimport org.junit.Test;\nimport org.junit.rules.ExpectedException;\nimport org.junit.runner.RunWith;\nimport org.mockito.InOrder;\nimport org.mockito.Mock;\nimport org.mockito.invocation.InvocationOnMock;\nimport org.mockito.runners.MockitoJUnitRunner;\nimport org.mockito.stubbing.Answer;\n// original test path: udoprog_tiny-async-java###udoprog_tiny-async-java/tiny-async-core/src/test/java/eu/toolchain/concurrent/CoreAsyncTest###testDoCollectAndDiscard\n@RunWith(MockitoJUnitRunner.class)\npublic class CoreAsyncTest_testDoCollectAndDiscard {\n    @Mock\n    private Stage<Object> stage1;\n    @Mock\n    private Stage<Object> stage2;\n    @Mock\n    private Stage<Object> stage3;\n    @Mock\n    private Completable<Void> completable;\n    @Mock\n    private CollectAndDiscardHelper helper;\n    @Rule\n    public ExpectedException expectedException = ExpectedException.none();\n    private CoreAsync coreAsync;\n    @Before\n    public void setUp() {\n        coreAsync = new CoreAsync();\n    }\n    @Test\n    public void testDoCollectAndDiscard() throws Exception {\n        List<Stage<?>> stages = ImmutableList.of(stage1, stage2, stage3);\n        when(completable()).thenReturn(completable);\n        when(helper.getRemaining()).thenReturn(0);\n        coreAsync.doCollectAndDiscard(stages);\n        verify(stage1).handle(helper);\n        verify(stage2).handle(helper);\n        verify(stage3).handle(helper);\n        verify(completable).bind(anyCollection());\n    }\n}"
  },
  {
    "original_path": "udoprog_tiny-async-java###udoprog_tiny-async-java/tiny-async-core/src/test/java/eu/toolchain/concurrent/CoreAsyncTest###testDoEventuallyCollect",
    "generated_path": "CoreAsyncTest_testDoEventuallyCollect.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package eu.toolchain.concurrent;\nimport static eu.toolchain.concurrent.CoreAsync.buildCollectedException;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert.assertTrue;\nimport static org.mockito.Matchers.any;\nimport static org.mockito.Matchers.anyCollection;\nimport static org.mockito.Matchers.eq;\nimport static org.mockito.Mockito.doAnswer;\nimport static org.mockito.Mockito.doNothing;\nimport static org.mockito.Mockito.doReturn;\nimport static org.mockito.Mockito.doThrow;\nimport static org.mockito.Mockito.inOrder;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.never;\nimport static org.mockito.Mockito.spy;\nimport static org.mockito.Mockito.times;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.when;\nimport com.google.common.collect.ImmutableList;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\nimport java.util.concurrent.Callable;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Future;\nimport java.util.function.Consumer;\nimport java.util.function.Function;\nimport java.util.function.Supplier;\nimport org.junit.Before;\nimport org.junit.Rule;\nimport org.junit.Test;\nimport org.junit.rules.ExpectedException;\nimport org.junit.runner.RunWith;\nimport org.mockito.InOrder;\nimport org.mockito.Mock;\nimport org.mockito.invocation.InvocationOnMock;\nimport org.mockito.runners.MockitoJUnitRunner;\nimport org.mockito.stubbing.Answer;\n// original test path: udoprog_tiny-async-java###udoprog_tiny-async-java/tiny-async-core/src/test/java/eu/toolchain/concurrent/CoreAsyncTest###testDoEventuallyCollect\n@RunWith(MockitoJUnitRunner.class)\npublic class CoreAsyncTest_testDoEventuallyCollect {\n    @Mock\n    private ExecutorService executor;\n    @Mock\n    private Caller caller;\n    @Rule\n    public ExpectedException expectedException = ExpectedException.none();\n    private CoreAsync coreAsync;\n    @Before\n    public void setUp() {\n        coreAsync = new CoreAsync(executor, caller);\n    }\n    @Test\n    public void testDoEventuallyCollect() throws Exception {\n        // Given\n        int parallelism = 2;\n        List<Callable<Stage<String>>> tasks = new ArrayList<>();\n        tasks.add(() -> Completable.completed(\"Task 1\"));\n        tasks.add(() -> Completable.completed(\"Task 2\"));\n        tasks.add(() -> Completable.completed(\"Task 3\"));\n        Consumer<String> consumer = s -> System.out.println(\"Consumed: \" + s);\n        Supplier<Integer> supplier = () -> 0;\n        // When\n        Stage<Integer> result = coreAsync.doEventuallyCollect(tasks, consumer, supplier, parallelism);\n        // Then\n        assertNotNull(result);\n        verify(executor, times(1)).execute(any(DelayedCollectCoordinator.class));\n    }\n}"
  },
  {
    "original_path": "udoprog_tiny-async-java###udoprog_tiny-async-java/tiny-async-core/src/test/java/eu/toolchain/concurrent/CoreAsyncTest###testDoEventuallyCollectImmediate",
    "generated_path": "CoreAsyncTest_testDoEventuallyCollectImmediate.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package eu.toolchain.concurrent;\nimport static eu.toolchain.concurrent.CoreAsync.buildCollectedException;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert.assertTrue;\nimport static org.mockito.Matchers.any;\nimport static org.mockito.Matchers.anyCollection;\nimport static org.mockito.Matchers.eq;\nimport static org.mockito.Mockito.doAnswer;\nimport static org.mockito.Mockito.doNothing;\nimport static org.mockito.Mockito.doReturn;\nimport static org.mockito.Mockito.doThrow;\nimport static org.mockito.Mockito.inOrder;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.never;\nimport static org.mockito.Mockito.spy;\nimport static org.mockito.Mockito.times;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.when;\nimport com.google.common.collect.ImmutableList;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\nimport java.util.concurrent.Callable;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Future;\nimport java.util.function.Consumer;\nimport java.util.function.Function;\nimport java.util.function.Supplier;\nimport org.junit.Before;\nimport org.junit.Rule;\nimport org.junit.Test;\nimport org.junit.rules.ExpectedException;\nimport org.junit.runner.RunWith;\nimport org.mockito.InOrder;\nimport org.mockito.Mock;\nimport org.mockito.invocation.InvocationOnMock;\nimport org.mockito.runners.MockitoJUnitRunner;\nimport org.mockito.stubbing.Answer;\n// original test path: udoprog_tiny-async-java###udoprog_tiny-async-java/tiny-async-core/src/test/java/eu/toolchain/concurrent/CoreAsyncTest###testDoEventuallyCollectImmediate\n@RunWith(MockitoJUnitRunner.class)\npublic class CoreAsyncTest_testDoEventuallyCollectImmediate {\n    @Mock\n    private ExecutorService executorService;\n    @Rule\n    public ExpectedException expectedException = ExpectedException.none();\n    private CoreAsync coreAsync;\n    @Before\n    public void setUp() {\n        coreAsync = new CoreAsync(executorService);\n    }\n    @Test\n    public void testDoEventuallyCollectImmediate() throws Exception {\n        // given\n        Callable<Stage<String>> callable1 = () -> coreAsync.completed(\"result1\");\n        Callable<Stage<String>> callable2 = () -> coreAsync.completed(\"result2\");\n        Collection<Callable<? extends Stage<? extends String>>> callables = ImmutableList.of(callable1, callable2);\n        Consumer<String> consumer = s -> assertNotNull(s);\n        Supplier<List<String>> supplier = ArrayList::new;\n        // when\n        Stage<List<String>> stage = coreAsync.doEventuallyCollectImmediate(callables, consumer, supplier);\n        // then\n        assertNotNull(stage);\n        assertTrue(stage.toCompletableFuture().isDone());\n        assertEquals(2, stage.toCompletableFuture().get().size());\n        assertEquals(\"result1\", stage.toCompletableFuture().get().get(0));\n        assertEquals(\"result2\", stage.toCompletableFuture().get().get(1));\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/time/DateUtilsTest###testTruncate",
    "generated_path": "DateUtilsTest_testTruncate.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3.time;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert.assertNotSame;\nimport static org.junit.Assert.assertTrue;\nimport static org.junit.Assert.fail;\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.Modifier;\nimport java.text.DateFormat;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.GregorianCalendar;\nimport java.util.Iterator;\nimport java.util.Locale;\nimport java.util.NoSuchElementException;\nimport java.util.TimeZone;\nimport org.apache.commons.lang3.test.SystemDefaults;\nimport org.apache.commons.lang3.test.SystemDefaultsSwitch;\nimport org.junit.Before;\nimport org.junit.BeforeClass;\nimport org.junit.Rule;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/time/DateUtilsTest###testTruncate\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertNotNull;\nimport java.util.Calendar;\nimport java.util.GregorianCalendar;\nimport org.junit.Test;\npublic class DateUtilsTest_testTruncate {\n    @Test(expected = IllegalArgumentException.class)\n    public void testTruncateWithNullDate() {\n        DateUtils.truncate(null, Calendar.YEAR);\n    }\n    @Test\n    public void testTruncateWithYear() {\n        Calendar calendar = new GregorianCalendar(2021, Calendar.AUGUST, 15, 12, 30, 45);\n        Calendar truncated = DateUtils.truncate(calendar, Calendar.YEAR);\n        assertNotNull(truncated);\n        assertEquals(2021, truncated.get(Calendar.YEAR));\n        assertEquals(0, truncated.get(Calendar.MONTH));\n        assertEquals(1, truncated.get(Calendar.DAY_OF_MONTH));\n        assertEquals(0, truncated.get(Calendar.HOUR_OF_DAY));\n        assertEquals(0, truncated.get(Calendar.MINUTE));\n        assertEquals(0, truncated.get(Calendar.SECOND));\n        assertEquals(0, truncated.get(Calendar.MILLISECOND));\n    }\n    @Test\n    public void testTruncateWithMonth() {\n        Calendar calendar = new GregorianCalendar(2021, Calendar.AUGUST, 15, 12, 30, 45);\n        Calendar truncated = DateUtils.truncate(calendar, Calendar.MONTH);\n        assertNotNull(truncated);\n        assertEquals(2021, truncated.get(Calendar.YEAR));\n        assertEquals(Calendar.AUGUST, truncated.get(Calendar.MONTH));\n        assertEquals(1, truncated.get(Calendar.DAY_OF_MONTH));\n        assertEquals(0, truncated.get(Calendar.HOUR_OF_DAY));\n        assertEquals(0, truncated.get(Calendar.MINUTE));\n        assertEquals(0, truncated.get(Calendar.SECOND));\n        assertEquals(0, truncated.get(Calendar.MILLISECOND));\n    }\n    @Test\n    public void testTruncateWithDay() {\n        Calendar calendar = new GregorianCalendar(2021, Calendar.AUGUST, 15, 12, 30, 45);\n        Calendar truncated = DateUtils.truncate(calendar, Calendar.DAY_OF_MONTH);\n        assertNotNull(truncated);\n        assertEquals(2021, truncated.get(Calendar.YEAR));\n        assertEquals(Calendar.AUGUST, truncated.get(Calendar.MONTH));\n        assertEquals(15, truncated.get(Calendar.DAY_OF_MONTH));\n        assertEquals(0, truncated.get(Calendar.HOUR_OF_DAY));\n        assertEquals(0, truncated.get(Calendar.MINUTE));\n        assertEquals(0, truncated.get(Calendar.SECOND));\n        assertEquals(0, truncated.get(Calendar.MILLISECOND));\n    }\n    @Test\n    public void testTruncateWithHour() {\n        Calendar calendar = new GregorianCalendar(2021, Calendar.AUGUST, 15, 12, 30, 45);\n        Calendar truncated = DateUtils.truncate(calendar, Calendar.HOUR_OF_DAY);\n        assertNotNull(truncated);\n        assertEquals(2021, truncated.get(Calendar.YEAR));\n        assertEquals(Calendar.AUGUST, truncated.get(Calendar.MONTH));\n        assertEquals(15, truncated.get(Calendar.DAY_OF_MONTH));\n        assertEquals(12, truncated.get(Calendar.HOUR_OF_DAY));\n        assertEquals(0, truncated.get(Calendar.MINUTE));\n        assertEquals(0, truncated.get(Calendar.SECOND));\n        assertEquals(0, truncated.get(Calendar.MILLISECOND));\n    }\n    @Test\n    public void testTruncateWithMinute() {\n        Calendar calendar = new GregorianCalendar(2021, Calendar.AUGUST, 15, 12, 30, 45);\n        Calendar truncated = DateUtils.truncate(calendar, Calendar.MINUTE);\n        assertNotNull(truncated);\n        assertEquals(2021, truncated.get(Calendar.YEAR));\n        assertEquals(Calendar.AUGUST, truncated.get(Calendar.MONTH));\n        assertEquals(15, truncated.get(Calendar.DAY_OF_MONTH));\n        assertEquals(12, truncated.get(Calendar.HOUR_OF_DAY));\n        assertEquals(30, truncated.get(Calendar.MINUTE));\n        assertEquals(0, truncated.get(Calendar.SECOND));\n        assertEquals(0, truncated.get(Calendar.MILLISECOND));\n    }\n    @Test\n    public void testTruncateWithSecond() {\n        Calendar calendar = new GregorianCalendar(2021, Calendar.AUGUST, 15, 12, 30, 45);\n        Calendar truncated = DateUtils.truncate(calendar, Calendar.SECOND);\n        assertNotNull(truncated);\n        assertEquals(2021, truncated.get(Calendar.YEAR));\n        assertEquals(Calendar.AUGUST, truncated.get(Calendar.MONTH));\n        assertEquals(15, truncated.get(Calendar.DAY_OF_MONTH));\n        assertEquals(12, truncated.get(Calendar.HOUR_OF_DAY));\n        assertEquals(30, truncated.get(Calendar.MINUTE));\n        assertEquals(45, truncated.get(Calendar.SECOND));\n        assertEquals(0, truncated.get(Calendar.MILLISECOND));\n    }\n    @Test\n    public void testTruncateWithMillisecond() {\n        Calendar calendar = new GregorianCalendar(2021, Calendar.AUGUST, 15, 12, 30, 45);\n        Calendar truncated = DateUtils.truncate(calendar, Calendar.MILLISECOND);\n        assertNotNull(truncated);\n        assertEquals(2021, truncated.get(Calendar.YEAR));\n        assertEquals(Calendar.AUGUST, truncated.get(Calendar.MONTH));\n        assertEquals(15, truncated.get(Calendar.DAY_OF_MONTH));\n        assertEquals(12, truncated.get(Calendar.HOUR_OF_DAY));\n        assertEquals(30, truncated.get(Calendar.MINUTE));\n        assertEquals(45, truncated.get(Calendar.SECOND));\n        assertEquals(0, truncated.get(Calendar.MILLISECOND));\n    }\n}"
  },
  {
    "original_path": "syphr42_prom###syphr42_prom/src/test/java/org/syphr/prom/DefaultEvaluatorTest###testGetreferences",
    "generated_path": "DefaultEvaluatorTest_testGetreferences.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package org.syphr.prom;\nimport java.util.List;\nimport java.util.Properties;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport junit.framework.Assert;\nimport org.junit.BeforeClass;\nimport org.junit.Test;\n// original test path: syphr42_prom###syphr42_prom/src/test/java/org/syphr/prom/DefaultEvaluatorTest###testGetreferences\nimport org.junit.Assert;\nimport org.junit.Test;\npublic class DefaultEvaluatorTest_testGetreferences {\n    @Test\n    public void testGetReferences() {\n        // Create a mock Retriever object\n        Retriever mockRetriever = new Retriever() {\n            @Override\n            public String retrieve(String reference) {\n                return \"Mock value for \" + reference;\n            }\n        };\n        // Create a DefaultEvaluator object\n        DefaultEvaluator evaluator = new DefaultEvaluator();\n        // Test with null rawValue\n        List<Reference> nullReferences = evaluator.getReferences(null, mockRetriever);\n        Assert.assertEquals(0, nullReferences.size());\n        // Test with empty rawValue\n        List<Reference> emptyReferences = evaluator.getReferences(\"\", mockRetriever);\n        Assert.assertEquals(0, emptyReferences.size());\n        // Test with non-empty rawValue\n        String rawValue = \"This is a test string with references [ref1], [ref2], and [ref3]\";\n        List<Reference> references = evaluator.getReferences(rawValue, mockRetriever);\n        Assert.assertEquals(3, references.size());\n        Assert.assertEquals(\"Mock value for ref1\", references.get(0).getValue());\n        Assert.assertEquals(\"Mock value for ref2\", references.get(1).getValue());\n        Assert.assertEquals(\"Mock value for ref3\", references.get(2).getValue());\n    }\n}"
  },
  {
    "original_path": "syphr42_prom###syphr42_prom/src/test/java/org/syphr/prom/DefaultEvaluatorTest###testIsReferencing",
    "generated_path": "DefaultEvaluatorTest_testIsReferencing.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package org.syphr.prom;\nimport java.util.List;\nimport java.util.Properties;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport junit.framework.Assert;\nimport org.junit.BeforeClass;\nimport org.junit.Test;\n// original test path: syphr42_prom###syphr42_prom/src/test/java/org/syphr/prom/DefaultEvaluatorTest###testIsReferencing\nimport org.junit.Assert;\nimport org.junit.Before;\nimport org.junit.Test;\npublic class DefaultEvaluatorTest_testIsReferencing {\n    private DefaultEvaluator evaluator;\n    @Before\n    public void setUp() {\n        evaluator = new DefaultEvaluator();\n    }\n    @Test\n    public void testIsReferencing() {\n        String rawValue = \"Hello ${name}\";\n        String name = \"name\";\n        Retriever retriever = new Retriever() {\n            @Override\n            public String retrieve(String key) {\n                return \"World\";\n            }\n        };\n        boolean result = evaluator.isReferencing(rawValue, name, retriever);\n        Assert.assertTrue(result);\n    }\n    @Test\n    public void testIsNotReferencing() {\n        String rawValue = \"Hello World\";\n        String name = \"name\";\n        Retriever retriever = new Retriever() {\n            @Override\n            public String retrieve(String key) {\n                return \"World\";\n            }\n        };\n        boolean result = evaluator.isReferencing(rawValue, name, retriever);\n        Assert.assertFalse(result);\n    }\n}"
  },
  {
    "original_path": "syphr42_prom###syphr42_prom/src/test/java/org/syphr/prom/DefaultEvaluatorTest###testReferenceAt",
    "generated_path": "DefaultEvaluatorTest_testReferenceAt.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package org.syphr.prom;\nimport java.util.List;\nimport java.util.Properties;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport junit.framework.Assert;\nimport org.junit.BeforeClass;\nimport org.junit.Test;\n// original test path: syphr42_prom###syphr42_prom/src/test/java/org/syphr/prom/DefaultEvaluatorTest###testReferenceAt\nimport org.junit.Assert;\nimport org.junit.Test;\npublic class DefaultEvaluatorTest_testReferenceAt {\n    @Test\n    public void testReferenceAt() {\n        // Create a mock Retriever object\n        Retriever mockRetriever = new Retriever() {\n            @Override\n            public List<String> retrieve(String key) {\n                return null;\n            }\n            @Override\n            public Properties getProperties() {\n                return null;\n            }\n        };\n        // Create a DefaultEvaluator object\n        DefaultEvaluator evaluator = new DefaultEvaluator();\n        // Test with a null rawValue\n        Assert.assertNull(evaluator.referenceAt(null, 0, mockRetriever));\n        // Test with an empty rawValue\n        Assert.assertNull(evaluator.referenceAt(\"\", 0, mockRetriever));\n        // Test with a valid rawValue and position\n        String rawValue = \"This is a test string with a reference at position 20.\";\n        int position = 20;\n        Reference expectedReference = new Reference(\"reference\", \"at\", \"position\");\n        Assert.assertEquals(expectedReference, evaluator.referenceAt(rawValue, position, mockRetriever));\n        // Test with an invalid position\n        position = 100;\n        Assert.assertNull(evaluator.referenceAt(rawValue, position, mockRetriever));\n    }\n}"
  },
  {
    "original_path": "duraspace_fcrepo-cloudsync###duraspace_fcrepo-cloudsync/fcrepo-cloudsync-service/src/test/java/org/duraspace/fcrepo/cloudsync/service/backend/DuraCloudConnectorTest###testPutObject",
    "generated_path": "DuraCloudConnectorTest_testPutObject.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package org.duraspace.fcrepo.cloudsync.service.backend;\nimport com.github.cwilper.fcrepo.dto.core.ControlGroup;\nimport com.github.cwilper.fcrepo.dto.core.Datastream;\nimport com.github.cwilper.fcrepo.dto.core.DatastreamVersion;\nimport com.github.cwilper.fcrepo.dto.core.FedoraObject;\nimport com.github.cwilper.fcrepo.httpclient.MultiThreadedHttpClient;\nimport junit.framework.Assert;\nimport org.apache.commons.io.IOUtils;\nimport org.apache.commons.io.input.AutoCloseInputStream;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.StatusLine;\nimport org.apache.http.client.methods.HttpHead;\nimport org.apache.http.client.methods.HttpPut;\nimport org.easymock.EasyMock;\nimport org.junit.After;\nimport org.junit.Before;\nimport org.junit.BeforeClass;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.powermock.api.easymock.PowerMock;\nimport org.powermock.core.classloader.annotations.PrepareForTest;\nimport org.powermock.modules.junit4.PowerMockRunner;\nimport java.io.BufferedWriter;\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.net.URI;\nimport java.util.Date;\nimport java.util.Random;\n// original test path: duraspace_fcrepo-cloudsync###duraspace_fcrepo-cloudsync/fcrepo-cloudsync-service/src/test/java/org/duraspace/fcrepo/cloudsync/service/backend/DuraCloudConnectorTest###testPutObject\n@RunWith(PowerMockRunner.class)\n@PrepareForTest({DuraCloudConnector.class, HttpPut.class, HttpHead.class})\npublic class DuraCloudConnectorTest_testPutObject {\n    private static final String PROVIDER_ID = \"testProviderId\";\n    private static final String PREFIX = \"testPrefix\";\n    private static final String USERNAME = \"testUsername\";\n    private static final String PASSWORD = \"testPassword\";\n    private static final String SPACE = \"testSpace\";\n    private static final String URL = \"http://testurl.com\";\n    private static final String PID = \"testPid\";\n    private static final String CONTENT = \"testContent\";\n    private static final long CHUNK_SIZE = 1024L;\n    private DuraCloudConnector connector;\n    private MultiThreadedHttpClient httpClient;\n    private StoreConnector source;\n    private FedoraObject object;\n    @BeforeClass\n    public static void setUpClass() {\n        // Set up any necessary test data\n    }\n    @Before\n    public void setUp() {\n        // Set up the DuraCloudConnector and its dependencies for each test\n        httpClient = PowerMock.createMock(MultiThreadedHttpClient.class);\n        source = PowerMock.createMock(StoreConnector.class);\n        object = createTestObject();\n        connector = new DuraCloudConnector(createTestSpaceURI(), PROVIDER_ID, PREFIX, httpClient, CHUNK_SIZE);\n    }\n    @After\n    public void tearDown() {\n        // Clean up any test data\n    }\n    @Test\n    public void testPutObject() throws Exception {\n        // Set up expectations for the HTTP client\n        HttpHead headRequest = PowerMock.createMock(HttpHead.class);\n        HttpResponse headResponse = PowerMock.createMock(HttpResponse.class);\n        StatusLine headStatusLine = PowerMock.createMock(StatusLine.class);\n        HttpPut putRequest = PowerMock.createMock(HttpPut.class);\n        HttpResponse putResponse = PowerMock.createMock(HttpResponse.class);\n        StatusLine putStatusLine = PowerMock.createMock(StatusLine.class);\n        // Expect the HTTP client to send a HEAD request to check if the object exists\n        PowerMock.expectNew(HttpHead.class, createTestObjectURI()).andReturn(headRequest);\n        EasyMock.expect(httpClient.execute(headRequest)).andReturn(headResponse);\n        EasyMock.expect(headResponse.getStatusLine()).andReturn(headStatusLine);\n        EasyMock.expect(headStatusLine.getStatusCode()).andReturn(404);\n        // Expect the HTTP client to send a PUT request to store the object\n        PowerMock.expectNew(HttpPut.class, createTestObjectURI()).andReturn(putRequest);\n        putRequest.setHeader(\"Content-MD5\", createTestContentMD5());\n        putRequest.setHeader(\"x-dura-meta-provider-id\", PROVIDER_ID);\n        putRequest.setHeader(\"x-dura-meta-prefix\", PREFIX);\n        putRequest.setHeader(\"x-dura-meta-pid\", PID);\n        putRequest.setHeader(\"x-dura-meta-created\", createTestCreatedDate());\n        putRequest.setHeader(\"x-dura-meta-modified\", createTestModifiedDate());\n        putRequest.setHeader(\"x-dura-meta-state\", \"A\");\n        putRequest.setHeader(\"x-dura-meta-size\", String.valueOf(createTestContentSize()));\n        putRequest.setHeader(\"x-dura-meta-mimetype\", \"application/xml\");\n        putRequest.setHeader(\"x-dura-meta-filename\", \"test.xml\");\n        putRequest.setHeader(\"x-dura-meta-dc-title\", \"Test Object\");\n        putRequest.setHeader(\"x-dura-meta-dc-creator\", \"Test Creator\");\n        putRequest.setHeader(\"x-dura-meta-dc-subject\", \"Test Subject\");\n        putRequest.setHeader(\"x-dura-meta-dc-description\", \"Test Description\");\n        putRequest.setHeader(\"x-dura-meta-dc-publisher\", \"Test Publisher\");\n        putRequest.setHeader(\"x-dura-meta-dc-contributor\", \"Test Contributor\");\n        putRequest.setHeader(\"x-dura-meta-dc-date\", \"Test Date\");\n        putRequest.setHeader(\"x-dura-meta-dc-type\", \"Test Type\");\n        putRequest.setHeader(\"x-dura-meta-dc-format\", \"Test Format\");\n        putRequest.setHeader(\"x-dura-meta-dc-identifier\", \"Test Identifier\");\n        putRequest.setHeader(\"x-dura-meta-dc-source\", \"Test Source\");\n        putRequest.setHeader(\"x-dura-meta-dc-language\", \"Test Language\");\n        putRequest.setHeader(\"x-dura-meta-dc-relation\", \"Test Relation\");\n        putRequest.setHeader(\"x-dura-meta-dc-coverage\", \"Test Coverage\");\n        putRequest.setHeader(\"x-dura-meta-dc-rights\", \"Test Rights\");\n        putRequest.setEntity(createTestContentEntity());\n        EasyMock.expect(httpClient.execute(putRequest)).andReturn(putResponse);\n        EasyMock.expect(putResponse.getStatusLine()).andReturn(putStatusLine);\n        EasyMock.expect(putStatusLine.getStatusCode()).andReturn(201);\n        // Replay the mocks to begin the test\n        PowerMock.replayAll();\n        EasyMock.replay(httpClient, source);\n        // Call the method being tested\n        boolean result = connector.putObject(object, source, true, true, true);\n        // Verify that the expected HTTP requests were sent and that the method returned the expected result\n        PowerMock.verifyAll();\n        EasyMock.verify(httpClient, source);\n        Assert.assertTrue(result);\n    }\n    private URI createTestSpaceURI() {\n        return URI.create(URL + \"/\" + SPACE);\n    }\n    private URI createTestObjectURI() {\n        return URI.create(URL + \"/\" + SPACE + \"/\" + PID);\n    }\n    private FedoraObject createTestObject() {\n        FedoraObject object = new FedoraObject();\n        object.pid(PID);\n        object.created(createTestCreatedDate());\n        object.modified(createTestModifiedDate());\n        object.state(\"A\");\n        object.label(\"Test Object\");\n        object.ownerId(\"testOwner\");\n        object.datastreams().put(\"testDatastream\", createTestDatastream());\n        object.properties().put(\"testProperty\", \"testValue\");\n        return object;\n    }\n    private Datastream createTestDatastream() {\n        Datastream datastream = new Datastream();\n        datastream.id(\"testDatastream\");\n        datastream.label(\"Test Datastream\");\n        datastream.mimeType(\"application/xml\");\n        datastream.formatURI(\"http://www.test.com/testFormat\");\n        datastream.versionable(true);\n        datastream.versions().put(\"1\", createTestDatastreamVersion());\n        return datastream;\n    }\n    private DatastreamVersion createTestDatastreamVersion() {\n        DatastreamVersion version = new DatastreamVersion();\n        version.id(\"1\");\n        version.label(\"Test Datastream Version\");\n        version.created(createTestCreatedDate());\n        version.modified(createTestModifiedDate());\n        version.state(\"A\");\n        version.formatURI(\"http://www.test.com/testFormat\");\n        version.mimeType(\"application/xml\");\n        version.size(createTestContentSize());\n        version.checksumType(\"MD5\");\n        version.checksum(createTestContentMD5());\n        version.content(createTestContent());\n        return version;\n    }\n    private String createTestCreatedDate() {\n        return \"2019-01-01T00:00:00.000Z\";\n    }\n    private String createTestModifiedDate() {\n        return \"2019-01-02T00:00:00.000Z\";\n    }\n    private long createTestContentSize() {\n        return CONTENT.length();\n    }\n    private String createTestContentMD5() {\n        return \"testContentMD5\";\n    }\n    private ByteArrayInputStream createTestContent() {\n        return new ByteArrayInputStream(CONTENT.getBytes());\n    }\n    private ByteArrayEntity createTestContentEntity() {\n        return new ByteArrayEntity(CONTENT.getBytes());\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest###testLexx",
    "generated_path": "DurationFormatUtilsTest_testLexx.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3.time;\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert.assertTrue;\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.Modifier;\nimport java.util.Calendar;\nimport java.util.TimeZone;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest###testLexx\npublic class DurationFormatUtilsTest_testLexx {\n    @Test\n    public void testLexx() {\n        String format = \"y'M'MM'd'd'H'H'm'm's's'S'S'\";\n        Token[] expectedTokens = {\n            new Token(DurationFormatUtils.y),\n            new Token(DurationFormatUtils.M, 2),\n            new Token(DurationFormatUtils.d),\n            new Token(DurationFormatUtils.H),\n            new Token(DurationFormatUtils.m),\n            new Token(DurationFormatUtils.s),\n            new Token(DurationFormatUtils.S)\n        };\n        Token[] actualTokens = DurationFormatUtils.lexx(format);\n        assertArrayEquals(expectedTokens, actualTokens);\n        format = \"''\";\n        expectedTokens = new Token[] { new Token(new StringBuilder()) };\n        actualTokens = DurationFormatUtils.lexx(format);\n        assertArrayEquals(expectedTokens, actualTokens);\n        format = \"y''M''d''H''m''s''S\";\n        expectedTokens = new Token[] {\n            new Token(DurationFormatUtils.y),\n            new Token(new StringBuilder(\"\")),\n            new Token(DurationFormatUtils.M),\n            new Token(new StringBuilder(\"\")),\n            new Token(DurationFormatUtils.d),\n            new Token(new StringBuilder(\"\")),\n            new Token(DurationFormatUtils.H),\n            new Token(new StringBuilder(\"\")),\n            new Token(DurationFormatUtils.m),\n            new Token(new StringBuilder(\"\")),\n            new Token(DurationFormatUtils.s),\n            new Token(DurationFormatUtils.S)\n        };\n        actualTokens = DurationFormatUtils.lexx(format);\n        assertArrayEquals(expectedTokens, actualTokens);\n        format = \"y'M'd'H'm's'S\";\n        expectedTokens = new Token[] {\n            new Token(DurationFormatUtils.y),\n            new Token(DurationFormatUtils.M),\n            new Token(DurationFormatUtils.d),\n            new Token(DurationFormatUtils.H),\n            new Token(DurationFormatUtils.m),\n            new Token(DurationFormatUtils.s),\n            new Token(DurationFormatUtils.S)\n        };\n        actualTokens = DurationFormatUtils.lexx(format);\n        assertArrayEquals(expectedTokens, actualTokens);\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/time/FastDatePrinterTest###testEquals",
    "generated_path": "FastDatePrinterTest_testEquals.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3.time;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertTrue;\nimport java.io.Serializable;\nimport java.text.FieldPosition;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.GregorianCalendar;\nimport java.util.Locale;\nimport java.util.TimeZone;\nimport org.apache.commons.lang3.SerializationUtils;\nimport org.apache.commons.lang3.test.SystemDefaults;\nimport org.apache.commons.lang3.test.SystemDefaultsSwitch;\nimport org.junit.Rule;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/time/FastDatePrinterTest###testEquals\nimport org.junit.Test;\nimport static org.junit.Assert.*;\npublic class FastDatePrinterTest_testEquals {\n    @Test\n    public void testEquals() {\n        // Create two instances of FastDatePrinter with the same values\n        FastDatePrinter fdp1 = new FastDatePrinter(\"yyyy-MM-dd\", TimeZone.getTimeZone(\"UTC\"), Locale.US);\n        FastDatePrinter fdp2 = new FastDatePrinter(\"yyyy-MM-dd\", TimeZone.getTimeZone(\"UTC\"), Locale.US);\n        // Test that the two instances are equal\n        assertTrue(fdp1.equals(fdp2));\n        // Create two instances of FastDatePrinter with different values\n        FastDatePrinter fdp3 = new FastDatePrinter(\"yyyy-MM-dd\", TimeZone.getTimeZone(\"UTC\"), Locale.US);\n        FastDatePrinter fdp4 = new FastDatePrinter(\"yyyy-MM-dd\", TimeZone.getTimeZone(\"GMT\"), Locale.US);\n        // Test that the two instances are not equal\n        assertFalse(fdp3.equals(fdp4));\n    }\n}"
  }
]