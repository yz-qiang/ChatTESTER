0-->1-->0-->compileRepair
// Range class
package org.apache.commons.lang3;
public  final class Range {
public static Range<T> is(final T element);
public static Range<T> is(final T element, final Comparator<T> comparator);
public static Range<T> between(final T fromInclusive, final T toInclusive);
public static Range<T> between(final T fromInclusive, final T toInclusive, final Comparator<T> comparator);
public T getMinimum();
public T getMaximum();
public Comparator<T> getComparator();
public boolean isNaturalOrdering();
public boolean contains(final T element);
public boolean isAfter(final T element);
public boolean isStartedBy(final T element);
public boolean isEndedBy(final T element);
public boolean isBefore(final T element);
public int elementCompareTo(final T element);
public boolean containsRange(final Range<T> otherRange);
public boolean isAfterRange(final Range<T> otherRange);
public boolean isOverlappedBy(final Range<T> otherRange);
public boolean isBeforeRange(final Range<T> otherRange);
public Range<T> intersectionWith(final Range<T> other);
public boolean equals(final Object obj);
public int hashCode();
public String toString();
public String toString(final String format);
}


// Test Method
package org.apache.commons.lang3;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertSame;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;
import java.util.Comparator;
import org.junit.Before;
import org.junit.Test;
public class RangeTest_testHashCode {
    private Range<Integer> range1;
    private Range<Integer> range2;
    @Before
    public void setUp() {

           <Buggy Line>: <T>Range(T,T,java.util.Comparator<T>) has private access in org.apache.commons.lang3.Range
        range1 = new Range<>(1, 5, null);

        range2 = new Range<>(1, 5, null);
    }
    @Test
    public void testHashCode() {
        int expectedHashCode = 17;
        expectedHashCode = 37 * expectedHashCode + range1.getClass().hashCode();
        expectedHashCode = 37 * expectedHashCode + range1.getMinimum().hashCode();
        expectedHashCode = 37 * expectedHashCode + range1.getMaximum().hashCode();
        assertEquals(expectedHashCode, range1.hashCode());
        assertEquals(expectedHashCode, range2.hashCode());
    }
}


The test method has a bug error (marked <Buggy Line>). 
 Please repair the buggy line with the given "Range" class information (it is crucial) and return the complete test method after repair. 
Note that the contents in  "Range" class  cannot be modified.

########

