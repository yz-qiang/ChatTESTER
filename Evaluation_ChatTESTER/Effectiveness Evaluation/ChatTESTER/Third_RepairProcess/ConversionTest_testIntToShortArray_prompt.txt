0-->1-->0-->compileRepair
// Test Method
package org.apache.commons.lang3;
import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;
import java.util.UUID;
import org.junit.Test;
public class ConversionTest_testIntToShortArray {
    @Test
    public void testIntToShortArray() {
        int src = 0b10101010101010101010101010101010; 
        int srcPos = 0;
        short[] dst = new short[4];
        int dstPos = 0;
        int nShorts = 4;
        Conversion.intToShortArray(src, srcPos, dst, dstPos, nShorts);

                 <Buggy Line>: incompatible types: possible lossy conversion from int to short
        short[] expected = {43690, 43690, 43690, 43690}; 

        assertArrayEquals(expected, dst);
        src = 0b10101010101010101010101010101010; 
        srcPos = 16;
        dst = new short[2];
        dstPos = 0;
        nShorts = 2;
        Conversion.intToShortArray(src, srcPos, dst, dstPos, nShorts);
        expected = new short[] {43690, 43690}; 
        assertArrayEquals(expected, dst);
        src = 0b10101010101010101010101010101010; 
        srcPos = 16;
        dst = new short[2];
        dstPos = 1;
        nShorts = 2;
        Conversion.intToShortArray(src, srcPos, dst, dstPos, nShorts);
        expected = new short[] {0, 43690}; 
        assertArrayEquals(expected, dst);
        src = 0b10101010101010101010101010101010; 
        srcPos = 16;
        dst = new short[2];
        dstPos = 0;
        nShorts = 3;
        try {
            Conversion.intToShortArray(src, srcPos, dst, dstPos, nShorts);
            fail("IllegalArgumentException should have been thrown");
        } catch (IllegalArgumentException e) {
            assertEquals("(nShorts-1)*16+srcPos is greater or equal to than 32", e.getMessage());
        }
    }
}


The test method has a bug error (marked <Buggy Line>). 
 Please repair the buggy line and return the complete test method after repair.

########

1-->1-->0-->testRepair
// Focal method
public static short[] intToShortArray(final int src, final int srcPos, final short[] dst, final int dstPos, final int nShorts) {
    if (0 == nShorts) {
        return dst;
    }
    if ((nShorts - 1) * 16 + srcPos >= 32) {
        throw new IllegalArgumentException("(nShorts-1)*16+srcPos is greater or equal to than 32");
    }
    for (int i = 0; i < nShorts; i++) {
        final int shift = i * 16 + srcPos;
        dst[dstPos + i] = (short) (0xffff & (src >> shift));
    }
    return dst;
}

// Test Method
package org.apache.commons.lang3;
import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;
import java.util.UUID;
import org.junit.Test;
public class ConversionTest_testIntToShortArray {
    @Test
    public void testIntToShortArray() {
        int src = 0b10101010101010101010101010101010; 
        int srcPos = 0;
        short[] dst = new short[4];
        int dstPos = 0;
        int nShorts = 4;

<Error Line>
        Conversion.intToShortArray(src, srcPos, dst, dstPos, nShorts);

        short[] expected = {(short)43690, (short)43690, (short)43690, (short)43690}; 
        assertArrayEquals(expected, dst);
        src = 0b10101010101010101010101010101010; 
        srcPos = 16;
        dst = new short[2];
        dstPos = 0;
        nShorts = 2;
        Conversion.intToShortArray(src, srcPos, dst, dstPos, nShorts);
        expected = new short[] {(short)43690, (short)43690}; 
        assertArrayEquals(expected, dst);
        src = 0b10101010101010101010101010101010; 
        srcPos = 16;
        dst = new short[2];
        dstPos = 1;
        nShorts = 2;
        Conversion.intToShortArray(src, srcPos, dst, dstPos, nShorts);
        expected = new short[] {0, (short)43690}; 
        assertArrayEquals(expected, dst);
        src = 0b10101010101010101010101010101010; 
        srcPos = 16;
        dst = new short[2];
        dstPos = 0;
        nShorts = 3;
        try {
            Conversion.intToShortArray(src, srcPos, dst, dstPos, nShorts);
            fail("IllegalArgumentException should have been thrown");
        } catch (IllegalArgumentException e) {
            assertEquals("(nShorts-1)*16+srcPos is greater or equal to than 32", e.getMessage());
        }
    }
}


The test method throw an error " java.lang.IllegalArgumentException (nShorts-1)*16+srcPos is greater or equal to than 32 " in " Conversion.intToShortArray(src, srcPos, dst, dstPos, nShorts); ". 
Please repair the error with the given Focal method and method intention information (it is crucial), and return the complete test method after repair.


########

2-->3-->0-->testRepair
// Focal method
public static short[] intToShortArray(final int src, final int srcPos, final short[] dst, final int dstPos, final int nShorts) {
    if (0 == nShorts) {
        return dst;
    }
    if ((nShorts - 1) * 16 + srcPos >= 32) {
        throw new IllegalArgumentException("(nShorts-1)*16+srcPos is greater or equal to than 32");
    }
    for (int i = 0; i < nShorts; i++) {
        final int shift = i * 16 + srcPos;
        dst[dstPos + i] = (short) (0xffff & (src >> shift));
    }
    return dst;
}

// Test Method
package org.apache.commons.lang3;
import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;
import org.junit.Test;
public class ConversionTest_testIntToShortArray {
    @Test
    public void testIntToShortArray() {
        int src = 0b10101010101010101010101010101010; 
        int srcPos = 0;
        short[] dst = new short[4];
        int dstPos = 0;
        int nShorts = 4;

<Error Line>
        Conversion.intToShortArray(src, srcPos, dst, dstPos, nShorts);

        short[] expected = {(short)43690, (short)43690, (short)43690, (short)43690}; 
        assertArrayEquals(expected, dst);
        src = 0b10101010101010101010101010101010; 
        srcPos = 16;
        dst = new short[2];
        dstPos = 0;
        nShorts = 2;
        Conversion.intToShortArray(src, srcPos, dst, dstPos, nShorts);
        expected = new short[] {(short)43690, (short)43690}; 
        assertArrayEquals(expected, dst);
        src = 0b10101010101010101010101010101010; 
        srcPos = 16;
        dst = new short[2];
        dstPos = 1;
        nShorts = 2;
        Conversion.intToShortArray(src, srcPos, dst, dstPos, nShorts);
        expected = new short[] {0, (short)43690}; 
        assertArrayEquals(expected, dst);
        src = 0b10101010101010101010101010101010; 
        srcPos = 16;
        dst = new short[2];
        dstPos = 0;
        nShorts = 3;
        try {
            Conversion.intToShortArray(src, srcPos, dst, dstPos, nShorts);
            fail("IllegalArgumentException should have been thrown");
        } catch (IllegalArgumentException e) {
            assertEquals("(nShorts-1)*16+srcPos is greater or equal to than 32", e.getMessage());
        }
    }
}


The test method throw an error " java.lang.IllegalArgumentException (nShorts-1)*16+srcPos is greater or equal to than 32 " in " Conversion.intToShortArray(src, srcPos, dst, dstPos, nShorts); ". 
Please repair the error with the given Focal method and method intention information (it is crucial), and return the complete test method after repair.


########

3-->3-->0-->testRepair
// Focal method
public static short[] intToShortArray(final int src, final int srcPos, final short[] dst, final int dstPos, final int nShorts) {
    if (0 == nShorts) {
        return dst;
    }
    if ((nShorts - 1) * 16 + srcPos >= 32) {
        throw new IllegalArgumentException("(nShorts-1)*16+srcPos is greater or equal to than 32");
    }
    for (int i = 0; i < nShorts; i++) {
        final int shift = i * 16 + srcPos;
        dst[dstPos + i] = (short) (0xffff & (src >> shift));
    }
    return dst;
}

// Test Method
package org.apache.commons.lang3;
import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;
import org.junit.Test;
public class ConversionTest_testIntToShortArray {
    @Test
    public void testIntToShortArray() {
        int src = 0b10101010101010101010101010101010; 
        int srcPos = 0;
        short[] dst = new short[4];
        int dstPos = 0;
        int nShorts = 4;

<Error Line>
        Conversion.intToShortArray(src, srcPos, dst, dstPos, nShorts);

        short[] expected = {(short)43690, (short)43690, (short)43690, (short)43690}; 
        assertArrayEquals(expected, dst);
        src = 0b10101010101010101010101010101010; 
        srcPos = 16;
        dst = new short[2];
        dstPos = 0;
        nShorts = 2;
        Conversion.intToShortArray(src, srcPos, dst, dstPos, nShorts);
        expected = new short[] {(short)43690, (short)43690}; 
        assertArrayEquals(expected, dst);
        src = 0b10101010101010101010101010101010; 
        srcPos = 16;
        dst = new short[2];
        dstPos = 1;
        nShorts = 2;
        Conversion.intToShortArray(src, srcPos, dst, dstPos, nShorts);
        expected = new short[] {0, (short)43690}; 
        assertArrayEquals(expected, dst);
        src = 0b10101010101010101010101010101010; 
        srcPos = 16;
        dst = new short[2];
        dstPos = 0;
        nShorts = 3;
        try {
            Conversion.intToShortArray(src, srcPos, dst, dstPos, nShorts);
            fail("IllegalArgumentException should have been thrown");
        } catch (IllegalArgumentException e) {
            assertEquals("(nShorts-1)*16+srcPos is greater or equal to than 32", e.getMessage());
        }
    }
}


The test method throw an error " java.lang.IllegalArgumentException (nShorts-1)*16+srcPos is greater or equal to than 32 " in " Conversion.intToShortArray(src, srcPos, dst, dstPos, nShorts); ". 
Please repair the error with the given Focal method and method intention information (it is crucial), and return the complete test method after repair.


########

4-->5-->0-->testRepair
// Focal method
public static short[] intToShortArray(final int src, final int srcPos, final short[] dst, final int dstPos, final int nShorts) {
    if (0 == nShorts) {
        return dst;
    }
    if ((nShorts - 1) * 16 + srcPos >= 32) {
        throw new IllegalArgumentException("(nShorts-1)*16+srcPos is greater or equal to than 32");
    }
    for (int i = 0; i < nShorts; i++) {
        final int shift = i * 16 + srcPos;
        dst[dstPos + i] = (short) (0xffff & (src >> shift));
    }
    return dst;
}

// Test Method
package org.apache.commons.lang3;
import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;
import org.junit.Test;
public class ConversionTest_testIntToShortArray {
    @Test
    public void testIntToShortArray() {
        int src = 0b10101010101010101010101010101010; 
        int srcPos = 0;
        short[] dst = new short[4];
        int dstPos = 0;
        int nShorts = 4;

<Error Line>
        Conversion.intToShortArray(src, srcPos, dst, dstPos, nShorts);

        short[] expected = {(short)43690, (short)43690, (short)43690, (short)43690}; 
        assertArrayEquals(expected, dst);
        src = 0b10101010101010101010101010101010; 
        srcPos = 16;
        dst = new short[2];
        dstPos = 0;
        nShorts = 2;
        Conversion.intToShortArray(src, srcPos, dst, dstPos, nShorts);
        expected = new short[] {(short)43690, (short)43690}; 
        assertArrayEquals(expected, dst);
        src = 0b10101010101010101010101010101010; 
        srcPos = 16;
        dst = new short[2];
        dstPos = 1;
        nShorts = 2;
        Conversion.intToShortArray(src, srcPos, dst, dstPos, nShorts);
        expected = new short[] {0, (short)43690}; 
        assertArrayEquals(expected, dst);
        src = 0b10101010101010101010101010101010; 
        srcPos = 16;
        dst = new short[2];
        dstPos = 0;
        nShorts = 3;
        try {
            Conversion.intToShortArray(src, srcPos, dst, dstPos, nShorts);
            fail("IllegalArgumentException should have been thrown");
        } catch (IllegalArgumentException e) {
            assertEquals("(nShorts-1)*16+srcPos is greater or equal to than 32", e.getMessage());
        }
    }
}


The test method throw an error " java.lang.IllegalArgumentException (nShorts-1)*16+srcPos is greater or equal to than 32 " in " Conversion.intToShortArray(src, srcPos, dst, dstPos, nShorts); ". 
Please repair the error with the given Focal method and method intention information (it is crucial), and return the complete test method after repair.


########

5-->5-->0-->testRepair
// Focal method
public static short[] intToShortArray(final int src, final int srcPos, final short[] dst, final int dstPos, final int nShorts) {
    if (0 == nShorts) {
        return dst;
    }
    if ((nShorts - 1) * 16 + srcPos >= 32) {
        throw new IllegalArgumentException("(nShorts-1)*16+srcPos is greater or equal to than 32");
    }
    for (int i = 0; i < nShorts; i++) {
        final int shift = i * 16 + srcPos;
        dst[dstPos + i] = (short) (0xffff & (src >> shift));
    }
    return dst;
}

// Test Method
package org.apache.commons.lang3;
import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;
import org.junit.Test;
public class ConversionTest_testIntToShortArray {
    @Test
    public void testIntToShortArray() {
        int src = 0b10101010101010101010101010101010; 
        int srcPos = 0;
        short[] dst = new short[4];
        int dstPos = 0;
        int nShorts = 4;

<Error Line>
        Conversion.intToShortArray(src, srcPos, dst, dstPos, nShorts);

        short[] expected = {(short)43690, (short)43690, (short)43690, (short)43690}; 
        assertArrayEquals(expected, dst);
        src = 0b10101010101010101010101010101010; 
        srcPos = 16;
        dst = new short[2];
        dstPos = 0;
        nShorts = 2;
        Conversion.intToShortArray(src, srcPos, dst, dstPos, nShorts);
        expected = new short[] {(short)43690, (short)43690}; 
        assertArrayEquals(expected, dst);
        src = 0b10101010101010101010101010101010; 
        srcPos = 16;
        dst = new short[2];
        dstPos = 1;
        nShorts = 2;
        Conversion.intToShortArray(src, srcPos, dst, dstPos, nShorts);
        expected = new short[] {0, (short)43690}; 
        assertArrayEquals(expected, dst);
        src = 0b10101010101010101010101010101010; 
        srcPos = 16;
        dst = new short[2];
        dstPos = 0;
        nShorts = 3;
        try {
            Conversion.intToShortArray(src, srcPos, dst, dstPos, nShorts);
            fail("IllegalArgumentException should have been thrown");
        } catch (IllegalArgumentException e) {
            assertEquals("(nShorts-1)*16+srcPos is greater or equal to than 32", e.getMessage());
        }
    }
}


The test method throw an error " java.lang.IllegalArgumentException (nShorts-1)*16+srcPos is greater or equal to than 32 " in " Conversion.intToShortArray(src, srcPos, dst, dstPos, nShorts); ". 
Please repair the error with the given Focal method and method intention information (it is crucial), and return the complete test method after repair.


########

