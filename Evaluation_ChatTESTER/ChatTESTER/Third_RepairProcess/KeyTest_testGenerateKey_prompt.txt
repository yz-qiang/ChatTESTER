0-->1-->0-->compileRepair
// Key class
package com.macasaet.fernet;
public class Key {
public Key(final byte[] signingKey, final byte[] encryptionKey);
public Key(final byte[] concatenatedKeys);
public Key(final String string);
public static Key generateKey();
public static Key generateKey(final SecureRandom random);
public byte[] sign(final byte version, final Instant timestamp, final IvParameterSpec initializationVector, final byte[] cipherText);
public byte[] encrypt(final byte[] payload, final IvParameterSpec initializationVector);
public String serialise();
public void writeTo(final OutputStream outputStream) throws IOException;
public int hashCode();
public boolean equals(final Object obj);
}


// Test Method
package com.macasaet.fernet;
import static com.macasaet.fernet.Constants.encoder;
import static com.macasaet.fernet.Constants.encryptionKeyBytes;
import static com.macasaet.fernet.Constants.signingKeyBytes;
import static nl.jqno.equalsverifier.Warning.ALL_FIELDS_SHOULD_BE_USED;
import static nl.jqno.equalsverifier.Warning.STRICT_INHERITANCE;
import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;
import static org.mutabilitydetector.unittesting.AllowedReason.allowingForSubclassing;
import static org.mutabilitydetector.unittesting.AllowedReason.assumingFields;
import static org.mutabilitydetector.unittesting.MutabilityAssert.assertInstancesOf;
import static org.mutabilitydetector.unittesting.MutabilityMatchers.areImmutable;
import java.security.SecureRandom;
import java.time.Instant;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import org.junit.Test;
import nl.jqno.equalsverifier.EqualsVerifier;
import nl.jqno.equalsverifier.api.SingleTypeEqualsVerifierApi;
import java.security.SecureRandom;
import org.junit.Test;
import static org.junit.Assert.*;
public class KeyTest_testGenerateKey {
    @Test
    public void testGenerateKey() {
        SecureRandom random = new SecureRandom();
        Key key = Key.generateKey(random);
        assertNotNull(key);

      <Buggy Line>: signingKey has private access in com.macasaet.fernet.Key
        assertNotNull(key.signingKey);

        assertNotNull(key.encryptionKey);
        assertEquals(16, key.signingKey.length);
        assertEquals(16, key.encryptionKey.length);
    }
}


The test method has a bug error (marked <Buggy Line>). 
 Please repair the buggy line with the given "Key" class information (it is crucial) and return the complete test method after repair. 
Note that the contents in  "Key" class  cannot be modified.

########

