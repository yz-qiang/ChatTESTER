0-->1-->0-->compileRepair
// Test Method
package org.apache.commons.lang3.time;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNotSame;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;
import java.lang.reflect.Constructor;
import java.lang.reflect.Modifier;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.Locale;
import java.util.NoSuchElementException;
import java.util.TimeZone;
import org.apache.commons.lang3.test.SystemDefaults;
import org.apache.commons.lang3.test.SystemDefaultsSwitch;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Rule;
import org.junit.Test;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import java.util.Calendar;
import java.util.GregorianCalendar;
import org.junit.Test;
public class DateUtilsTest_testRound {
    @Test(expected = IllegalArgumentException.class)
    public void testRound_NullDate() {

       <Buggy Line>: reference to round is ambiguous
        DateUtils.round(null, Calendar.HOUR_OF_DAY);

    }
    @Test
    public void testRound_HourOfDay() {
        Calendar date = new GregorianCalendar(2021, Calendar.JANUARY, 1, 12, 30, 0);
        Calendar rounded = DateUtils.round(date, Calendar.HOUR_OF_DAY);
        assertNotNull(rounded);
        assertEquals(2021, rounded.get(Calendar.YEAR));
        assertEquals(Calendar.JANUARY, rounded.get(Calendar.MONTH));
        assertEquals(1, rounded.get(Calendar.DAY_OF_MONTH));
        assertEquals(13, rounded.get(Calendar.HOUR_OF_DAY));
        assertEquals(0, rounded.get(Calendar.MINUTE));
        assertEquals(0, rounded.get(Calendar.SECOND));
        assertEquals(0, rounded.get(Calendar.MILLISECOND));
    }
    @Test
    public void testRound_Minute() {
        Calendar date = new GregorianCalendar(2021, Calendar.JANUARY, 1, 12, 30, 0);
        Calendar rounded = DateUtils.round(date, Calendar.MINUTE);
        assertNotNull(rounded);
        assertEquals(2021, rounded.get(Calendar.YEAR));
        assertEquals(Calendar.JANUARY, rounded.get(Calendar.MONTH));
        assertEquals(1, rounded.get(Calendar.DAY_OF_MONTH));
        assertEquals(12, rounded.get(Calendar.HOUR_OF_DAY));
        assertEquals(30, rounded.get(Calendar.MINUTE));
        assertEquals(0, rounded.get(Calendar.SECOND));
        assertEquals(0, rounded.get(Calendar.MILLISECOND));
    }
}


The test method has a bug error (marked <Buggy Line>). 
 Please repair the buggy line and return the complete test method after repair.

########

1-->2-->0-->compileRepair
// Test Method
package org.apache.commons.lang3.time;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import java.util.Calendar;
import java.util.GregorianCalendar;
import org.junit.Test;
public class DateUtilsTest_testRound {
    @Test(expected = IllegalArgumentException.class)
    public void testRound_NullDate() {

       <Buggy Line>: reference to round is ambiguous
        DateUtils.round(null, Calendar.HOUR_OF_DAY);

    }
    @Test
    public void testRound_HourOfDay() {
        Calendar date = new GregorianCalendar(2021, Calendar.JANUARY, 1, 12, 30, 0);
        Calendar rounded = DateUtils.round(date, Calendar.HOUR_OF_DAY);
        assertNotNull(rounded);
        assertEquals(2021, rounded.get(Calendar.YEAR));
        assertEquals(Calendar.JANUARY, rounded.get(Calendar.MONTH));
        assertEquals(1, rounded.get(Calendar.DAY_OF_MONTH));
        assertEquals(13, rounded.get(Calendar.HOUR_OF_DAY));
        assertEquals(0, rounded.get(Calendar.MINUTE));
        assertEquals(0, rounded.get(Calendar.SECOND));
        assertEquals(0, rounded.get(Calendar.MILLISECOND));
    }
    @Test
    public void testRound_Minute() {
        Calendar date = new GregorianCalendar(2021, Calendar.JANUARY, 1, 12, 30, 0);
        Calendar rounded = DateUtils.round(date, Calendar.MINUTE);
        assertNotNull(rounded);
        assertEquals(2021, rounded.get(Calendar.YEAR));
        assertEquals(Calendar.JANUARY, rounded.get(Calendar.MONTH));
        assertEquals(1, rounded.get(Calendar.DAY_OF_MONTH));
        assertEquals(12, rounded.get(Calendar.HOUR_OF_DAY));
        assertEquals(30, rounded.get(Calendar.MINUTE));
        assertEquals(0, rounded.get(Calendar.SECOND));
        assertEquals(0, rounded.get(Calendar.MILLISECOND));
    }
}


The test method has a bug error (marked <Buggy Line>). 
 Please repair the buggy line and return the complete test method after repair.

########

2-->3-->1-->compileRepair
// Test Method
package org.apache.commons.lang3.time;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import java.util.Calendar;
import java.util.GregorianCalendar;
import org.junit.Test;
public class DateUtilsTest_testRound {
    @Test(expected = IllegalArgumentException.class)
    public void testRound_NullDate() {

       <Buggy Line>: reference to round is ambiguous
        DateUtils.round(null, Calendar.HOUR_OF_DAY);

    }
    @Test
    public void testRound_HourOfDay() {
        Calendar date = new GregorianCalendar(2021, Calendar.JANUARY, 1, 12, 30, 0);
        Calendar rounded = DateUtils.round(date, Calendar.HOUR_OF_DAY);
        assertNotNull(rounded);
        assertEquals(2021, rounded.get(Calendar.YEAR));
        assertEquals(Calendar.JANUARY, rounded.get(Calendar.MONTH));
        assertEquals(1, rounded.get(Calendar.DAY_OF_MONTH));
        assertEquals(13, rounded.get(Calendar.HOUR_OF_DAY));
        assertEquals(0, rounded.get(Calendar.MINUTE));
        assertEquals(0, rounded.get(Calendar.SECOND));
        assertEquals(0, rounded.get(Calendar.MILLISECOND));
    }
    @Test
    public void testRound_Minute() {
        Calendar date = new GregorianCalendar(2021, Calendar.JANUARY, 1, 12, 30, 0);
        Calendar rounded = DateUtils.round(date, Calendar.MINUTE);
        assertNotNull(rounded);
        assertEquals(2021, rounded.get(Calendar.YEAR));
        assertEquals(Calendar.JANUARY, rounded.get(Calendar.MONTH));
        assertEquals(1, rounded.get(Calendar.DAY_OF_MONTH));
        assertEquals(12, rounded.get(Calendar.HOUR_OF_DAY));
        assertEquals(30, rounded.get(Calendar.MINUTE));
        assertEquals(0, rounded.get(Calendar.SECOND));
        assertEquals(0, rounded.get(Calendar.MILLISECOND));
    }
}


The test method has a bug error (marked <Buggy Line>). 
 Please repair the buggy line and return the complete test method after repair.

########

3-->4-->2-->compileRepair
// Test Method
package org.apache.commons.lang3.time;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import java.util.Calendar;
import java.util.GregorianCalendar;
import org.junit.Test;
public class DateUtilsTest_testRound {
    @Test(expected = IllegalArgumentException.class)
    public void testRound_NullDate() {

       <Buggy Line>: reference to round is ambiguous
        DateUtils.round(null, Calendar.HOUR_OF_DAY);

    }
    @Test
    public void testRound_HourOfDay() {
        Calendar date = new GregorianCalendar(2021, Calendar.JANUARY, 1, 12, 30, 0);
        Calendar rounded = DateUtils.round(date, Calendar.HOUR_OF_DAY);
        assertNotNull(rounded);
        assertEquals(2021, rounded.get(Calendar.YEAR));
        assertEquals(Calendar.JANUARY, rounded.get(Calendar.MONTH));
        assertEquals(1, rounded.get(Calendar.DAY_OF_MONTH));
        assertEquals(13, rounded.get(Calendar.HOUR_OF_DAY));
        assertEquals(0, rounded.get(Calendar.MINUTE));
        assertEquals(0, rounded.get(Calendar.SECOND));
        assertEquals(0, rounded.get(Calendar.MILLISECOND));
    }
    @Test
    public void testRound_Minute() {
        Calendar date = new GregorianCalendar(2021, Calendar.JANUARY, 1, 12, 30, 0);
        Calendar rounded = DateUtils.round(date, Calendar.MINUTE);
        assertNotNull(rounded);
        assertEquals(2021, rounded.get(Calendar.YEAR));
        assertEquals(Calendar.JANUARY, rounded.get(Calendar.MONTH));
        assertEquals(1, rounded.get(Calendar.DAY_OF_MONTH));
        assertEquals(12, rounded.get(Calendar.HOUR_OF_DAY));
        assertEquals(30, rounded.get(Calendar.MINUTE));
        assertEquals(0, rounded.get(Calendar.SECOND));
        assertEquals(0, rounded.get(Calendar.MILLISECOND));
    }
}


The test method has a bug error (marked <Buggy Line>). 
 Please repair the buggy line and return the complete test method after repair.

########

4-->5-->3-->compileRepair
// Test Method
package org.apache.commons.lang3.time;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import java.util.Calendar;
import java.util.GregorianCalendar;
import org.junit.Test;
public class DateUtilsTest_testRound {
    @Test(expected = IllegalArgumentException.class)
    public void testRound_NullDate() {

       <Buggy Line>: reference to round is ambiguous
        DateUtils.round(null, Calendar.HOUR_OF_DAY);

    }
    @Test
    public void testRound_HourOfDay() {
        Calendar date = new GregorianCalendar(2021, Calendar.JANUARY, 1, 12, 30, 0);
        Calendar rounded = DateUtils.round(date, Calendar.HOUR_OF_DAY);
        assertNotNull(rounded);
        assertEquals(2021, rounded.get(Calendar.YEAR));
        assertEquals(Calendar.JANUARY, rounded.get(Calendar.MONTH));
        assertEquals(1, rounded.get(Calendar.DAY_OF_MONTH));
        assertEquals(13, rounded.get(Calendar.HOUR_OF_DAY));
        assertEquals(0, rounded.get(Calendar.MINUTE));
        assertEquals(0, rounded.get(Calendar.SECOND));
        assertEquals(0, rounded.get(Calendar.MILLISECOND));
    }
    @Test
    public void testRound_Minute() {
        Calendar date = new GregorianCalendar(2021, Calendar.JANUARY, 1, 12, 30, 0);
        Calendar rounded = DateUtils.round(date, Calendar.MINUTE);
        assertNotNull(rounded);
        assertEquals(2021, rounded.get(Calendar.YEAR));
        assertEquals(Calendar.JANUARY, rounded.get(Calendar.MONTH));
        assertEquals(1, rounded.get(Calendar.DAY_OF_MONTH));
        assertEquals(12, rounded.get(Calendar.HOUR_OF_DAY));
        assertEquals(30, rounded.get(Calendar.MINUTE));
        assertEquals(0, rounded.get(Calendar.SECOND));
        assertEquals(0, rounded.get(Calendar.MILLISECOND));
    }
}


The test method has a bug error (marked <Buggy Line>). 
 Please repair the buggy line and return the complete test method after repair.

########

