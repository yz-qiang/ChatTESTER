[
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/AnnotationUtilsTest###testIsValidAnnotationMemberType",
    "generated_path": "AnnotationUtilsTest_testIsValidAnnotationMemberType.java",
    "Compile_result": 1,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3;\nimport static java.lang.annotation.ElementType.FIELD;\nimport static java.lang.annotation.RetentionPolicy.RUNTIME;\nimport static org.apache.commons.lang3.AnnotationUtilsTest.Stooge.CURLY;\nimport static org.apache.commons.lang3.AnnotationUtilsTest.Stooge.LARRY;\nimport static org.apache.commons.lang3.AnnotationUtilsTest.Stooge.MOE;\nimport static org.apache.commons.lang3.AnnotationUtilsTest.Stooge.SHEMP;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertTrue;\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.Target;\nimport java.lang.reflect.Array;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.InvocationHandler;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Proxy;\nimport java.util.Collection;\nimport java.util.Map;\nimport org.junit.Before;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/AnnotationUtilsTest###testIsValidAnnotationMemberType\nimport org.junit.Test;\nimport static org.junit.Assert.*;\npublic class AnnotationUtilsTest_testIsValidAnnotationMemberType {\n    @Test\n    public void testIsValidAnnotationMemberType() {\n        // Test primitive types\n        assertTrue(AnnotationUtils.isValidAnnotationMemberType(boolean.class));\n        assertTrue(AnnotationUtils.isValidAnnotationMemberType(byte.class));\n        assertTrue(AnnotationUtils.isValidAnnotationMemberType(char.class));\n        assertTrue(AnnotationUtils.isValidAnnotationMemberType(double.class));\n        assertTrue(AnnotationUtils.isValidAnnotationMemberType(float.class));\n        assertTrue(AnnotationUtils.isValidAnnotationMemberType(int.class));\n        assertTrue(AnnotationUtils.isValidAnnotationMemberType(long.class));\n        assertTrue(AnnotationUtils.isValidAnnotationMemberType(short.class));\n        // Test wrapper types\n        assertTrue(AnnotationUtils.isValidAnnotationMemberType(Boolean.class));\n        assertTrue(AnnotationUtils.isValidAnnotationMemberType(Byte.class));\n        assertTrue(AnnotationUtils.isValidAnnotationMemberType(Character.class));\n        assertTrue(AnnotationUtils.isValidAnnotationMemberType(Double.class));\n        assertTrue(AnnotationUtils.isValidAnnotationMemberType(Float.class));\n        assertTrue(AnnotationUtils.isValidAnnotationMemberType(Integer.class));\n        assertTrue(AnnotationUtils.isValidAnnotationMemberType(Long.class));\n        assertTrue(AnnotationUtils.isValidAnnotationMemberType(Short.class));\n        // Test enum type\n        assertTrue(AnnotationUtils.isValidAnnotationMemberType(Stooge.class));\n        // Test annotation type\n        assertTrue(AnnotationUtils.isValidAnnotationMemberType(MyAnnotation.class));\n        // Test String type\n        assertTrue(AnnotationUtils.isValidAnnotationMemberType(String.class));\n        // Test Class type\n        assertTrue(AnnotationUtils.isValidAnnotationMemberType(Class.class));\n        // Test array type\n        assertTrue(AnnotationUtils.isValidAnnotationMemberType(int[].class));\n        assertTrue(AnnotationUtils.isValidAnnotationMemberType(String[].class));\n        assertTrue(AnnotationUtils.isValidAnnotationMemberType(Stooge[].class));\n        assertTrue(AnnotationUtils.isValidAnnotationMemberType(MyAnnotation[].class));\n        assertTrue(AnnotationUtils.isValidAnnotationMemberType(Class[].class));\n        // Test invalid type\n        assertFalse(AnnotationUtils.isValidAnnotationMemberType(Collection.class));\n        assertFalse(AnnotationUtils.isValidAnnotationMemberType(Map.class));\n        assertFalse(AnnotationUtils.isValidAnnotationMemberType(InvocationHandler.class));\n        assertFalse(AnnotationUtils.isValidAnnotationMemberType(Method.class));\n        assertFalse(AnnotationUtils.isValidAnnotationMemberType(Field.class));\n        assertFalse(AnnotationUtils.isValidAnnotationMemberType(Proxy.class));\n    }\n    @Retention(RUNTIME)\n    @Target(FIELD)\n    public @interface MyAnnotation {\n        Stooge value();\n    }\n    public enum Stooge {\n        MOE, LARRY, CURLY, SHEMP\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/AnnotationUtilsTest###testToString",
    "generated_path": "AnnotationUtilsTest_testToString.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3;\nimport static java.lang.annotation.ElementType.FIELD;\nimport static java.lang.annotation.RetentionPolicy.RUNTIME;\nimport static org.apache.commons.lang3.AnnotationUtilsTest.Stooge.CURLY;\nimport static org.apache.commons.lang3.AnnotationUtilsTest.Stooge.LARRY;\nimport static org.apache.commons.lang3.AnnotationUtilsTest.Stooge.MOE;\nimport static org.apache.commons.lang3.AnnotationUtilsTest.Stooge.SHEMP;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertTrue;\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.Target;\nimport java.lang.reflect.Array;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.InvocationHandler;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Proxy;\nimport java.util.Collection;\nimport java.util.Map;\nimport org.junit.Before;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/AnnotationUtilsTest###testToString\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\nimport java.lang.annotation.ElementType;\nimport org.junit.Assert;\nimport org.junit.Test;\npublic class AnnotationUtilsTest_testToString {\n    @Retention(RetentionPolicy.RUNTIME)\n    @Target({ElementType.TYPE, ElementType.METHOD})\n    public @interface MyAnnotation {\n        String value() default \"\";\n        int number() default 0;\n    }\n    @MyAnnotation(value = \"test\", number = 42)\n    public class MyClass {\n        // class implementation\n    }\n    @Test\n    public void testToString() {\n        MyClass myClass = new MyClass();\n        MyAnnotation myAnnotation = myClass.getClass().getAnnotation(MyAnnotation.class);\n        String expected = \"@MyAnnotation(value=test, number=42)\";\n        String actual = AnnotationUtils.toString(myAnnotation);\n        Assert.assertEquals(expected, actual);\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ArrayUtilsTest###testClone",
    "generated_path": "ArrayUtilsTest_testClone.java",
    "Compile_result": 1,
    "Test_result": 1,
    "Gen_Test": "package org.apache.commons.lang3;\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert.assertNotSame;\nimport static org.junit.Assert.assertNull;\nimport static org.junit.Assert.assertSame;\nimport static org.junit.Assert.assertTrue;\nimport static org.junit.Assert.fail;\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.Modifier;\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.Date;\nimport java.util.Map;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ArrayUtilsTest###testClone\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertNull;\npublic class ArrayUtilsTest_testClone {\n    @Test\n    public void testClone() {\n        boolean[] inputArray = {true, false, true};\n        boolean[] clonedArray = ArrayUtils.clone(inputArray);\n        assertArrayEquals(inputArray, clonedArray);\n        inputArray = null;\n        clonedArray = ArrayUtils.clone(inputArray);\n        assertNull(clonedArray);\n    }\n}"
  },
  {
    "original_path": "XDean_Java-EX###XDean_Java-EX/src/test/java/cn/xdean/jex/lang/ArrayUtilTest###testCompare",
    "generated_path": "ArrayUtilTest_testCompare.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package cn.xdean.jex.lang;\nimport org.junit.Test;\nimport static cn.xdean.jex.lang.collection.ArrayUtil.*;\nimport static org.junit.Assert.*;\n// original test path: XDean_Java-EX###XDean_Java-EX/src/test/java/cn/xdean/jex/lang/ArrayUtilTest###testCompare\nimport org.junit.Test;\nimport static org.junit.Assert.*;\npublic class ArrayUtilTest_testCompare {\n    @Test\n    public void testCompare() {\n        Integer[] a = {1, 2, 3};\n        Integer[] b = {1, 2, 3};\n        Integer[] c = {1, 2, 4};\n        Integer[] d = {1, 2};\n        assertEquals(0, ArrayUtil.compare(a, b));\n        assertEquals(-1, ArrayUtil.compare(a, c));\n        assertEquals(1, ArrayUtil.compare(c, a));\n        try {\n            ArrayUtil.compare(a, d);\n            fail(\"Expected IllegalArgumentException\");\n        } catch (IllegalArgumentException e) {\n            assertEquals(\"Can't compare different length arrays\", e.getMessage());\n        }\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testBinaryToByte",
    "generated_path": "ConversionTest_testBinaryToByte.java",
    "Compile_result": 1,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3;\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.fail;\nimport java.util.UUID;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testBinaryToByte\npublic class ConversionTest_testBinaryToByte {\n    @Test\n    public void testBinaryToByte() {\n        boolean[] src = {true, false, true, false, true, false, true, false};\n        int srcPos = 2;\n        byte dstInit = 0;\n        int dstPos = 3;\n        int nBools = 4;\n        byte expected = 0b00011000;\n        byte result = Conversion.binaryToByte(src, srcPos, dstInit, dstPos, nBools);\n        assertEquals(expected, result);\n        // Test for src array with length 0\n        boolean[] emptySrc = {};\n        byte emptyExpected = dstInit;\n        byte emptyResult = Conversion.binaryToByte(emptySrc, srcPos, dstInit, dstPos, nBools);\n        assertEquals(emptyExpected, emptyResult);\n        // Test for nBools exceeding size of destination byte array\n        int largeNBools = 6;\n        try {\n            Conversion.binaryToByte(src, srcPos, dstInit, dstPos, largeNBools);\n            fail(\"Expected IllegalArgumentException was not thrown\");\n        } catch (IllegalArgumentException e) {\n            assertEquals(\"nBools-1+dstPos is greater or equal to than 8\", e.getMessage());\n        }\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testBinaryToShort",
    "generated_path": "ConversionTest_testBinaryToShort.java",
    "Compile_result": 1,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3;\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.fail;\nimport java.util.UUID;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testBinaryToShort\nimport org.junit.Test;\nimport static org.junit.Assert.assertEquals;\npublic class ConversionTest_testBinaryToShort {\n    @Test\n    public void testBinaryToShort() {\n        boolean[] src = {true, false, true, false, true, false, true, false};\n        int srcPos = 0;\n        short dstInit = 0;\n        int dstPos = 0;\n        int nBools = 8;\n        short expectedOutput = 170;\n        short actualOutput = Conversion.binaryToShort(src, srcPos, dstInit, dstPos, nBools);\n        assertEquals(expectedOutput, actualOutput);\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testByteArrayToInt",
    "generated_path": "ConversionTest_testByteArrayToInt.java",
    "Compile_result": 1,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3;\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.fail;\nimport java.util.UUID;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testByteArrayToInt\nimport org.junit.Test;\nimport static org.junit.Assert.*;\npublic class ConversionTest_testByteArrayToInt {\n    @Test\n    public void testByteArrayToInt() {\n        byte[] byteArray = {0x00, 0x01, 0x02, 0x03};\n        int expected = 0x01020304;\n        int actual = Conversion.byteArrayToInt(byteArray, 0, 0, 0, 4);\n        assertEquals(expected, actual);\n        byte[] emptyArray = {};\n        int expectedEmpty = 0;\n        int actualEmpty = Conversion.byteArrayToInt(emptyArray, 0, 0, 0, 0);\n        assertEquals(expectedEmpty, actualEmpty);\n        byte[] invalidArray = {0x00, 0x01, 0x02, 0x03};\n        try {\n            Conversion.byteArrayToInt(invalidArray, 0, 0, 24, 4);\n            fail(\"IllegalArgumentException should have been thrown\");\n        } catch (IllegalArgumentException e) {\n            assertEquals(\"(nBytes-1)*8+dstPos is greater or equal to than 32\", e.getMessage());\n        }\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testByteArrayToLong",
    "generated_path": "ConversionTest_testByteArrayToLong.java",
    "Compile_result": 1,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3;\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.fail;\nimport java.util.UUID;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testByteArrayToLong\nimport org.junit.Test;\nimport static org.junit.Assert.*;\npublic class ConversionTest_testByteArrayToLong {\n    @Test\n    public void testByteArrayToLong() {\n        byte[] src = {0x12, 0x34, 0x56, 0x78};\n        int srcPos = 0;\n        long dstInit = 0;\n        int dstPos = 0;\n        int nBytes = 4;\n        long expected = 0x12345678L;\n        long result = Conversion.byteArrayToLong(src, srcPos, dstInit, dstPos, nBytes);\n        assertEquals(expected, result);\n        // Test with different parameters\n        src = new byte[]{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01};\n        srcPos = 0;\n        dstInit = 0;\n        dstPos = 0;\n        nBytes = 8;\n        expected = 1L;\n        result = Conversion.byteArrayToLong(src, srcPos, dstInit, dstPos, nBytes);\n        assertEquals(expected, result);\n        // Test with empty source array and zero nBytes\n        src = new byte[]{};\n        srcPos = 0;\n        dstInit = 0;\n        dstPos = 0;\n        nBytes = 0;\n        expected = 0L;\n        result = Conversion.byteArrayToLong(src, srcPos, dstInit, dstPos, nBytes);\n        assertEquals(expected, result);\n        // Test with nBytes exceeding maximum size of long integer\n        src = new byte[]{0x12, 0x34, 0x56, 0x78};\n        srcPos = 0;\n        dstInit = 0;\n        dstPos = 0;\n        nBytes = 9;\n        try {\n            Conversion.byteArrayToLong(src, srcPos, dstInit, dstPos, nBytes);\n            fail(\"IllegalArgumentException should have been thrown\");\n        } catch (IllegalArgumentException e) {\n            assertEquals(\"(nBytes-1)*8+dstPos is greater or equal to than 64\", e.getMessage());\n        }\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testHexToByte",
    "generated_path": "ConversionTest_testHexToByte.java",
    "Compile_result": 1,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3;\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.fail;\nimport java.util.UUID;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testHexToByte\nimport org.junit.Test;\nimport static org.junit.Assert.*;\npublic class ConversionTest_testHexToByte {\n    @Test\n    public void testHexToByte() {\n        // Test case 1: Convert single hexadecimal digit\n        byte result1 = Conversion.hexToByte(\"F\", 0, (byte) 0x00, 0, 1);\n        assertEquals((byte) 0xF, result1);\n        // Test case 2: Convert multiple hexadecimal digits\n        byte result2 = Conversion.hexToByte(\"1A\", 0, (byte) 0x00, 0, 2);\n        assertEquals((byte) 0x1A, result2);\n        // Test case 3: Convert hexadecimal digits starting from a specific position\n        byte result3 = Conversion.hexToByte(\"FF1A\", 2, (byte) 0x00, 0, 2);\n        assertEquals((byte) 0x1A, result3);\n        // Test case 4: Convert hexadecimal digits and place them at a specific position in the byte\n        byte result4 = Conversion.hexToByte(\"F\", 0, (byte) 0x00, 4, 1);\n        assertEquals((byte) 0x10, result4);\n        // Test case 5: Convert more than 8 bits of hexadecimal digits\n        try {\n            Conversion.hexToByte(\"FFFF\", 0, (byte) 0x00, 0, 4);\n            fail(\"Expected IllegalArgumentException was not thrown\");\n        } catch (IllegalArgumentException e) {\n            assertEquals(\"(nHexs-1)*4+dstPos is greater or equal to than 8\", e.getMessage());\n        }\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testHexToInt",
    "generated_path": "ConversionTest_testHexToInt.java",
    "Compile_result": 1,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3;\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.fail;\nimport java.util.UUID;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testHexToInt\nimport org.junit.Test;\nimport static org.junit.Assert.*;\npublic class ConversionTest_testHexToInt {\n    @Test\n    public void testHexToInt() {\n        // Test case 1: Convert \"A1\" to integer value\n        String src = \"A1\";\n        int srcPos = 0;\n        int dstInit = 0;\n        int dstPos = 0;\n        int nHex = 2;\n        int expected = 161;\n        int actual = Conversion.hexToInt(src, srcPos, dstInit, dstPos, nHex);\n        assertEquals(expected, actual);\n        // Test case 2: Convert \"FF\" to integer value\n        src = \"FF\";\n        srcPos = 0;\n        dstInit = 0;\n        dstPos = 0;\n        nHex = 2;\n        expected = 255;\n        actual = Conversion.hexToInt(src, srcPos, dstInit, dstPos, nHex);\n        assertEquals(expected, actual);\n        // Test case 3: Convert \"12345678\" to integer value\n        src = \"12345678\";\n        srcPos = 0;\n        dstInit = 0;\n        dstPos = 0;\n        nHex = 8;\n        expected = 305419896;\n        actual = Conversion.hexToInt(src, srcPos, dstInit, dstPos, nHex);\n        assertEquals(expected, actual);\n        // Test case 4: Convert \"ABCDEF\" to integer value starting from position 1\n        src = \"ABCDEF\";\n        srcPos = 1;\n        dstInit = 0;\n        dstPos = 0;\n        nHex = 5;\n        expected = 11259375;\n        actual = Conversion.hexToInt(src, srcPos, dstInit, dstPos, nHex);\n        assertEquals(expected, actual);\n        // Test case 5: Convert \"12345678\" to integer value starting from position 4\n        src = \"12345678\";\n        srcPos = 3;\n        dstInit = 0;\n        dstPos = 8;\n        nHex = 5;\n        expected = 83886080;\n        actual = Conversion.hexToInt(src, srcPos, dstInit, dstPos, nHex);\n        assertEquals(expected, actual);\n        // Test case 6: Convert \"12345678\" to integer value with invalid number of hex digits\n        src = \"12345678\";\n        srcPos = 0;\n        dstInit = 0;\n        dstPos = 0;\n        nHex = 10;\n        try {\n            Conversion.hexToInt(src, srcPos, dstInit, dstPos, nHex);\n            fail(\"Expected IllegalArgumentException was not thrown\");\n        } catch (IllegalArgumentException e) {\n            assertEquals(\"(nHexs-1)*4+dstPos is greater or equal to than 32\", e.getMessage());\n        }\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testHexToLong",
    "generated_path": "ConversionTest_testHexToLong.java",
    "Compile_result": 1,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3;\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.fail;\nimport java.util.UUID;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testHexToLong\nimport org.junit.Test;\nimport static org.junit.Assert.assertEquals;\npublic class ConversionTest_testHexToLong {\n    @Test\n    public void testHexToLong() {\n        String hexString = \"1A2B3C4D5E6F\";\n        int srcPos = 0;\n        long dstInit = 0;\n        int dstPos = 0;\n        int nHex = 6;\n        long expectedOutput = 0x0000001A2B3C4D5EL;\n        long actualOutput = Conversion.hexToLong(hexString, srcPos, dstInit, dstPos, nHex);\n        assertEquals(expectedOutput, actualOutput);\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testHexToShort",
    "generated_path": "ConversionTest_testHexToShort.java",
    "Compile_result": 1,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3;\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.fail;\nimport java.util.UUID;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testHexToShort\nimport org.junit.Test;\nimport static org.junit.Assert.*;\npublic class ConversionTest_testHexToShort {\n    @Test\n    public void testHexToShort() {\n        // Test case 1: Convert 4 hexadecimal digits starting at position 0 of the string \"ABCD\" into a short value\n        short result1 = Conversion.hexToShort(\"ABCD\", 0, (short) 0, 0, 4);\n        assertEquals(\"Test case 1 failed\", (short) 0xABCD, result1);\n        // Test case 2: Convert 2 hexadecimal digits starting at position 2 of the string \"123456\" into a short value\n        short result2 = Conversion.hexToShort(\"123456\", 2, (short) 0, 8, 2);\n        assertEquals(\"Test case 2 failed\", (short) 0x5600, result2);\n        // Test case 3: Convert 3 hexadecimal digits starting at position 1 of the string \"FEDCBA\" into a short value\n        short result3 = Conversion.hexToShort(\"FEDCBA\", 1, (short) 0x1234, 4, 3);\n        assertEquals(\"Test case 3 failed\", (short) 0x1FED, result3);\n        // Test case 4: Convert 5 hexadecimal digits starting at position 0 of the string \"12345\" into a short value\n        try {\n            Conversion.hexToShort(\"12345\", 0, (short) 0, 0, 5);\n            fail(\"Test case 4 failed: Expected IllegalArgumentException was not thrown\");\n        } catch (IllegalArgumentException e) {\n            assertEquals(\"Test case 4 failed: Incorrect exception message\", \"(nHexs-1)*4+dstPos is greater or equal to than 16\", e.getMessage());\n        }\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testLongToHex",
    "generated_path": "ConversionTest_testLongToHex.java",
    "Compile_result": 1,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3;\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.fail;\nimport java.util.UUID;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testLongToHex\nimport org.junit.Test;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.fail;\npublic class ConversionTest_testLongToHex {\n    @Test\n    public void testLongToHex() {\n        // Test case 1: Convert 0 to hexadecimal\n        long src1 = 0;\n        int srcPos1 = 0;\n        String dstInit1 = \"\";\n        int dstPos1 = 0;\n        int nHexs1 = 1;\n        String expected1 = \"0\";\n        String actual1 = Conversion.longToHex(src1, srcPos1, dstInit1, dstPos1, nHexs1);\n        assertEquals(expected1, actual1);\n        // Test case 2: Convert 255 to hexadecimal\n        long src2 = 255;\n        int srcPos2 = 0;\n        String dstInit2 = \"\";\n        int dstPos2 = 0;\n        int nHexs2 = 2;\n        String expected2 = \"FF\";\n        String actual2 = Conversion.longToHex(src2, srcPos2, dstInit2, dstPos2, nHexs2);\n        assertEquals(expected2, actual2);\n        // Test case 3: Convert 65535 to hexadecimal\n        long src3 = 65535;\n        int srcPos3 = 0;\n        String dstInit3 = \"\";\n        int dstPos3 = 0;\n        int nHexs3 = 4;\n        String expected3 = \"FFFF\";\n        String actual3 = Conversion.longToHex(src3, srcPos3, dstInit3, dstPos3, nHexs3);\n        assertEquals(expected3, actual3);\n        // Test case 4: Convert 123456789 to hexadecimal\n        long src4 = 123456789;\n        int srcPos4 = 0;\n        String dstInit4 = \"\";\n        int dstPos4 = 0;\n        int nHexs4 = 8;\n        String expected4 = \"075BCD15\";\n        String actual4 = Conversion.longToHex(src4, srcPos4, dstInit4, dstPos4, nHexs4);\n        assertEquals(expected4, actual4);\n        // Test case 5: Convert 9223372036854775807 to hexadecimal\n        long src5 = 9223372036854775807L;\n        int srcPos5 = 0;\n        String dstInit5 = \"\";\n        int dstPos5 = 0;\n        int nHexs5 = 16;\n        String expected5 = \"7FFFFFFFFFFFFFFF\";\n        String actual5 = Conversion.longToHex(src5, srcPos5, dstInit5, dstPos5, nHexs5);\n        assertEquals(expected5, actual5);\n        // Test case 6: Convert 9223372036854775807 to hexadecimal with invalid nHexs\n        long src6 = 9223372036854775807L;\n        int srcPos6 = 0;\n        String dstInit6 = \"\";\n        int dstPos6 = 0;\n        int nHexs6 = 17;\n        try {\n            Conversion.longToHex(src6, srcPos6, dstInit6, dstPos6, nHexs6);\n            fail(\"Expected IllegalArgumentException was not thrown\");\n        } catch (IllegalArgumentException e) {\n            assertEquals(\"(nHexs-1)*4+srcPos is greater or equal to than 64\", e.getMessage());\n        }\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testLongToIntArray",
    "generated_path": "ConversionTest_testLongToIntArray.java",
    "Compile_result": 1,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3;\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.fail;\nimport java.util.UUID;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testLongToIntArray\nimport org.junit.Test;\nimport static org.junit.Assert.*;\npublic class ConversionTest_testLongToIntArray {\n    @Test\n    public void testLongToIntArray() {\n        long src = 1234567890123456789L;\n        int srcPos = 0;\n        int[] dst = new int[3];\n        int dstPos = 0;\n        int nInts = 3;\n        int[] expected = { -1070463643, -1070463643, 1 };\n        int[] result = Conversion.longToIntArray(src, srcPos, dst, dstPos, nInts);\n        assertArrayEquals(expected, result);\n        // Test when nInts is zero\n        nInts = 0;\n        result = Conversion.longToIntArray(src, srcPos, dst, dstPos, nInts);\n        assertArrayEquals(dst, result);\n        // Test when (nInts - 1) * 32 + srcPos is greater or equal to than 64\n        nInts = 3;\n        srcPos = 33;\n        try {\n            result = Conversion.longToIntArray(src, srcPos, dst, dstPos, nInts);\n            fail(\"Expected IllegalArgumentException to be thrown\");\n        } catch (IllegalArgumentException e) {\n            assertEquals(\"(nInts-1)*32+srcPos is greater or equal to than 64\", e.getMessage());\n        }\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testShortArrayToInt",
    "generated_path": "ConversionTest_testShortArrayToInt.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3;\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.fail;\nimport java.util.UUID;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testShortArrayToInt\npublic class ConversionTest_testShortArrayToInt {\n    @Test\n    public void testShortArrayToInt() {\n        short[] src = {0x1234, 0x5678, 0x9abc};\n        int srcPos = 1;\n        int dstInit = 0x0000;\n        int dstPos = 8;\n        int nShorts = 2;\n        int expected = 0x00567800;\n        int actual = Conversion.shortArrayToInt(src, srcPos, dstInit, dstPos, nShorts);\n        assertEquals(expected, actual);\n    }\n    @Test\n    public void testShortArrayToIntWithZeroLengthSrc() {\n        short[] src = {};\n        int srcPos = 0;\n        int dstInit = 0x1234;\n        int dstPos = 0;\n        int nShorts = 0;\n        int expected = 0x1234;\n        int actual = Conversion.shortArrayToInt(src, srcPos, dstInit, dstPos, nShorts);\n        assertEquals(expected, actual);\n    }\n    @Test\n    public void testShortArrayToIntWithInvalidDstPos() {\n        short[] src = {0x1234, 0x5678, 0x9abc};\n        int srcPos = 0;\n        int dstInit = 0x0000;\n        int dstPos = 24;\n        int nShorts = 2;\n        try {\n            Conversion.shortArrayToInt(src, srcPos, dstInit, dstPos, nShorts);\n            fail(\"Expected IllegalArgumentException to be thrown\");\n        } catch (IllegalArgumentException e) {\n            assertEquals(\"(nShorts-1)*16+dstPos is greater or equal to than 32\", e.getMessage());\n        }\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testShortArrayToLong",
    "generated_path": "ConversionTest_testShortArrayToLong.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3;\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.fail;\nimport java.util.UUID;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testShortArrayToLong\nimport org.junit.Test;\nimport static org.junit.Assert.assertEquals;\npublic class ConversionTest_testShortArrayToLong {\n    @Test\n    public void testShortArrayToLong() {\n        short[] src = {0x1234, 0x5678, 0x9abc};\n        int srcPos = 1;\n        long dstInit = 0x0000000000000000L;\n        int dstPos = 16;\n        int nShorts = 2;\n        long expectedOutput = 0x0000000000567890L;\n        long actualOutput = Conversion.shortArrayToLong(src, srcPos, dstInit, dstPos, nShorts);\n        assertEquals(expectedOutput, actualOutput);\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/time/DateUtilsTest###testRound",
    "generated_path": "DateUtilsTest_testRound.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3.time;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert.assertNotSame;\nimport static org.junit.Assert.assertTrue;\nimport static org.junit.Assert.fail;\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.Modifier;\nimport java.text.DateFormat;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.GregorianCalendar;\nimport java.util.Iterator;\nimport java.util.Locale;\nimport java.util.NoSuchElementException;\nimport java.util.TimeZone;\nimport org.apache.commons.lang3.test.SystemDefaults;\nimport org.apache.commons.lang3.test.SystemDefaultsSwitch;\nimport org.junit.Before;\nimport org.junit.BeforeClass;\nimport org.junit.Rule;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/time/DateUtilsTest###testRound\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertNotNull;\nimport java.util.Calendar;\nimport java.util.GregorianCalendar;\nimport org.junit.Test;\npublic class DateUtilsTest_testRound {\n    @Test(expected = IllegalArgumentException.class)\n    public void testRound_NullDate() {\n        DateUtils.round(null, Calendar.HOUR_OF_DAY);\n    }\n    @Test\n    public void testRound_HourOfDay() {\n        Calendar date = new GregorianCalendar(2021, Calendar.JANUARY, 1, 12, 30, 0);\n        Calendar rounded = DateUtils.round(date, Calendar.HOUR_OF_DAY);\n        assertNotNull(rounded);\n        assertEquals(2021, rounded.get(Calendar.YEAR));\n        assertEquals(Calendar.JANUARY, rounded.get(Calendar.MONTH));\n        assertEquals(1, rounded.get(Calendar.DAY_OF_MONTH));\n        assertEquals(13, rounded.get(Calendar.HOUR_OF_DAY));\n        assertEquals(0, rounded.get(Calendar.MINUTE));\n        assertEquals(0, rounded.get(Calendar.SECOND));\n        assertEquals(0, rounded.get(Calendar.MILLISECOND));\n    }\n    @Test\n    public void testRound_Minute() {\n        Calendar date = new GregorianCalendar(2021, Calendar.JANUARY, 1, 12, 30, 0);\n        Calendar rounded = DateUtils.round(date, Calendar.MINUTE);\n        assertNotNull(rounded);\n        assertEquals(2021, rounded.get(Calendar.YEAR));\n        assertEquals(Calendar.JANUARY, rounded.get(Calendar.MONTH));\n        assertEquals(1, rounded.get(Calendar.DAY_OF_MONTH));\n        assertEquals(12, rounded.get(Calendar.HOUR_OF_DAY));\n        assertEquals(30, rounded.get(Calendar.MINUTE));\n        assertEquals(0, rounded.get(Calendar.SECOND));\n        assertEquals(0, rounded.get(Calendar.MILLISECOND));\n    }\n}"
  },
  {
    "original_path": "mgormley_prim###mgormley_prim/src/test/java/edu/jhu/prim/arrays/DoubleArraysTest###testLogSum",
    "generated_path": "DoubleArraysTest_testLogSum.java",
    "Compile_result": 1,
    "Test_result": 1,
    "Gen_Test": "package edu.jhu.prim.arrays;\nimport static org.junit.Assert.*;\nimport java.util.Arrays;\nimport org.junit.Test;\nimport edu.jhu.prim.util.Timer;\nimport edu.jhu.prim.util.math.FastMath;\n// original test path: mgormley_prim###mgormley_prim/src/test/java/edu/jhu/prim/arrays/DoubleArraysTest###testLogSum\nimport org.junit.Assert;\nimport org.junit.Test;\npublic class DoubleArraysTest_testLogSum {\n    @Test\n    public void testLogSum() {\n        double[] logProps = {0.0, 1.0, 2.0, 3.0};\n        double expected = Math.log(Math.exp(0.0) + Math.exp(1.0) + Math.exp(2.0) + Math.exp(3.0));\n        double actual = DoubleArrays.logSum(logProps);\n        Assert.assertEquals(expected, actual, 0.0001);\n        logProps = new double[]{-1.0, -2.0, -3.0};\n        expected = Math.log(Math.exp(-1.0) + Math.exp(-2.0) + Math.exp(-3.0));\n        actual = DoubleArrays.logSum(logProps);\n        Assert.assertEquals(expected, actual, 0.0001);\n        logProps = new double[]{Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY};\n        expected = Double.NEGATIVE_INFINITY;\n        actual = DoubleArrays.logSum(logProps);\n        Assert.assertEquals(expected, actual, 0.0001);\n        logProps = new double[]{Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY};\n        expected = Double.POSITIVE_INFINITY;\n        actual = DoubleArrays.logSum(logProps);\n        Assert.assertEquals(expected, actual, 0.0001);\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest###testFormatDurationWords",
    "generated_path": "DurationFormatUtilsTest_testFormatDurationWords.java",
    "Compile_result": 1,
    "Test_result": 1,
    "Gen_Test": "package org.apache.commons.lang3.time;\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert.assertTrue;\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.Modifier;\nimport java.util.Calendar;\nimport java.util.TimeZone;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest###testFormatDurationWords\nimport org.junit.Test;\nimport static org.junit.Assert.*;\npublic class DurationFormatUtilsTest_testFormatDurationWords {\n    @Test\n    public void testFormatDurationWords() {\n        long durationMillis = 86400000; // 1 day in milliseconds\n        boolean suppressLeadingZeroElements = true;\n        boolean suppressTrailingZeroElements = true;\n        String expectedOutput = \"1 day\";\n        String actualOutput = DurationFormatUtils.formatDurationWords(durationMillis, suppressLeadingZeroElements, suppressTrailingZeroElements);\n        assertEquals(expectedOutput, actualOutput);\n        durationMillis = 90061000; // 1 day, 1 hour, 1 minute, 1 second in milliseconds\n        suppressLeadingZeroElements = false;\n        suppressTrailingZeroElements = false;\n        expectedOutput = \"1 day 1 hour 1 minute 1 second\";\n        actualOutput = DurationFormatUtils.formatDurationWords(durationMillis, suppressLeadingZeroElements, suppressTrailingZeroElements);\n        assertEquals(expectedOutput, actualOutput);\n        durationMillis = 3600000; // 1 hour in milliseconds\n        suppressLeadingZeroElements = true;\n        suppressTrailingZeroElements = true;\n        expectedOutput = \"1 hour\";\n        actualOutput = DurationFormatUtils.formatDurationWords(durationMillis, suppressLeadingZeroElements, suppressTrailingZeroElements);\n        assertEquals(expectedOutput, actualOutput);\n        durationMillis = 60000; // 1 minute in milliseconds\n        suppressLeadingZeroElements = true;\n        suppressTrailingZeroElements = true;\n        expectedOutput = \"1 minute\";\n        actualOutput = DurationFormatUtils.formatDurationWords(durationMillis, suppressLeadingZeroElements, suppressTrailingZeroElements);\n        assertEquals(expectedOutput, actualOutput);\n        durationMillis = 1000; // 1 second in milliseconds\n        suppressLeadingZeroElements = true;\n        suppressTrailingZeroElements = true;\n        expectedOutput = \"1 second\";\n        actualOutput = DurationFormatUtils.formatDurationWords(durationMillis, suppressLeadingZeroElements, suppressTrailingZeroElements);\n        assertEquals(expectedOutput, actualOutput);\n        durationMillis = 0; // 0 milliseconds\n        suppressLeadingZeroElements = true;\n        suppressTrailingZeroElements = true;\n        expectedOutput = \"0 seconds\";\n        actualOutput = DurationFormatUtils.formatDurationWords(durationMillis, suppressLeadingZeroElements, suppressTrailingZeroElements);\n        assertEquals(expectedOutput, actualOutput);\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest###testReflectionAppend",
    "generated_path": "EqualsBuilderTest_testReflectionAppend.java",
    "Compile_result": 1,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3.builder;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertNull;\nimport static org.junit.Assert.assertTrue;\nimport java.lang.reflect.Method;\nimport java.util.Arrays;\nimport org.apache.commons.lang3.reflect.MethodUtils;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest###testReflectionAppend\nimport org.junit.Before;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\npublic class EqualsBuilderTest_testReflectionAppend {\n    private EqualsBuilder equalsBuilder;\n    @Before\n    public void setUp() {\n        equalsBuilder = new EqualsBuilder();\n    }\n    @Test\n    public void testReflectionAppend() {\n        // Test case 1: Comparing two equal objects\n        Object lhs1 = new Object();\n        Object rhs1 = lhs1;\n        EqualsBuilder result1 = equalsBuilder.reflectionAppend(lhs1, rhs1);\n        assertTrue(result1.isEquals());\n        // Test case 2: Comparing two null objects\n        Object lhs2 = null;\n        Object rhs2 = null;\n        EqualsBuilder result2 = equalsBuilder.reflectionAppend(lhs2, rhs2);\n        assertTrue(result2.isEquals());\n        // Test case 3: Comparing two different objects\n        Object lhs3 = new Object();\n        Object rhs3 = new String(\"test\");\n        EqualsBuilder result3 = equalsBuilder.reflectionAppend(lhs3, rhs3);\n        assertFalse(result3.isEquals());\n        // Test case 4: Comparing two arrays\n        int[] lhs4 = {1, 2, 3};\n        int[] rhs4 = {1, 2, 3};\n        EqualsBuilder result4 = equalsBuilder.reflectionAppend(lhs4, rhs4);\n        assertTrue(result4.isEquals());\n        // Test case 5: Comparing two objects with different fields\n        MyClass lhs5 = new MyClass(\"test\", 1);\n        MyClass rhs5 = new MyClass(\"test\", 2);\n        EqualsBuilder result5 = equalsBuilder.reflectionAppend(lhs5, rhs5);\n        assertFalse(result5.isEquals());\n    }\n    private static class MyClass {\n        private String str;\n        private int num;\n        public MyClass(String str, int num) {\n            this.str = str;\n            this.num = num;\n        }\n        public String getStr() {\n            return str;\n        }\n        public int getNum() {\n            return num;\n        }\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/time/FastDateParserTest###testEquals",
    "generated_path": "FastDateParserTest_testEquals.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3.time;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertTrue;\nimport static org.junit.Assert.fail;\nimport java.io.Serializable;\nimport java.text.ParseException;\nimport java.text.ParsePosition;\nimport java.text.SimpleDateFormat;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.GregorianCalendar;\nimport java.util.HashMap;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.TimeZone;\nimport org.apache.commons.lang3.LocaleUtils;\nimport org.apache.commons.lang3.SerializationUtils;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/time/FastDateParserTest###testEquals\nimport org.junit.Test;\nimport static org.junit.Assert.*;\npublic class FastDateParserTest_testEquals {\n    @Test\n    public void testEquals() {\n        // Create two instances of FastDateParser with the same pattern, timeZone, and locale\n        String pattern = \"yyyy-MM-dd\";\n        TimeZone timeZone = TimeZone.getTimeZone(\"UTC\");\n        Locale locale = Locale.ENGLISH;\n        FastDateParser parser1 = new FastDateParser(pattern, timeZone, locale);\n        FastDateParser parser2 = new FastDateParser(pattern, timeZone, locale);\n        // Test that the two instances are equal\n        assertTrue(parser1.equals(parser2));\n        // Create an instance of FastDateParser with a different pattern\n        String differentPattern = \"dd/MM/yyyy\";\n        FastDateParser parser3 = new FastDateParser(differentPattern, timeZone, locale);\n        // Test that the two instances are not equal\n        assertFalse(parser1.equals(parser3));\n        // Create an instance of FastDateParser with a different timeZone\n        TimeZone differentTimeZone = TimeZone.getTimeZone(\"America/New_York\");\n        FastDateParser parser4 = new FastDateParser(pattern, differentTimeZone, locale);\n        // Test that the two instances are not equal\n        assertFalse(parser1.equals(parser4));\n        // Create an instance of FastDateParser with a different locale\n        Locale differentLocale = Locale.FRENCH;\n        FastDateParser parser5 = new FastDateParser(pattern, timeZone, differentLocale);\n        // Test that the two instances are not equal\n        assertFalse(parser1.equals(parser5));\n        // Test that the equals method returns false when comparing with a non-FastDateParser object\n        assertFalse(parser1.equals(\"not a FastDateParser\"));\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/time/FastDatePrinterTest###testFormat",
    "generated_path": "FastDatePrinterTest_testFormat.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3.time;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertTrue;\nimport java.io.Serializable;\nimport java.text.FieldPosition;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.GregorianCalendar;\nimport java.util.Locale;\nimport java.util.TimeZone;\nimport org.apache.commons.lang3.SerializationUtils;\nimport org.apache.commons.lang3.test.SystemDefaults;\nimport org.apache.commons.lang3.test.SystemDefaultsSwitch;\nimport org.junit.Rule;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/time/FastDatePrinterTest###testFormat\nimport org.junit.Test;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\nimport java.util.TimeZone;\nimport static org.junit.Assert.assertEquals;\npublic class FastDatePrinterTest_testFormat {\n    @Test\n    public void testFormat() throws Exception {\n        // Set up test data\n        String pattern = \"yyyy-MM-dd HH:mm:ss\";\n        TimeZone timeZone = TimeZone.getTimeZone(\"UTC\");\n        Locale locale = Locale.US;\n        FastDatePrinter fastDatePrinter = new FastDatePrinter(pattern, timeZone, locale);\n        Date date = new SimpleDateFormat(pattern).parse(\"2022-01-01 00:00:00\");\n        // Execute the method being tested\n        String formattedDate = fastDatePrinter.format(date);\n        // Verify the result\n        assertEquals(\"2022-01-01 00:00:00\", formattedDate);\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest###testGetFieldsListWithAnnotation",
    "generated_path": "FieldUtilsTest_testGetFieldsListWithAnnotation.java",
    "Compile_result": 1,
    "Test_result": 1,
    "Gen_Test": "package org.apache.commons.lang3.reflect;\nimport org.apache.commons.lang3.ArrayUtils;\nimport org.apache.commons.lang3.reflect.testbed.Ambig;\nimport org.apache.commons.lang3.reflect.testbed.Annotated;\nimport org.apache.commons.lang3.reflect.testbed.Foo;\nimport org.apache.commons.lang3.reflect.testbed.PrivatelyShadowedChild;\nimport org.apache.commons.lang3.reflect.testbed.PublicChild;\nimport org.apache.commons.lang3.reflect.testbed.PubliclyShadowedChild;\nimport org.apache.commons.lang3.reflect.testbed.StaticContainer;\nimport org.apache.commons.lang3.reflect.testbed.StaticContainerChild;\nimport org.junit.Before;\nimport org.junit.Test;\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.Modifier;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert.assertNull;\nimport static org.junit.Assert.assertTrue;\nimport static org.junit.Assert.fail;\nimport static org.junit.Assume.assumeNotNull;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest###testGetFieldsListWithAnnotation\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.util.List;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\npublic class FieldUtilsTest_testGetFieldsListWithAnnotation {\n    @Retention(RetentionPolicy.RUNTIME)\n    @interface TestAnnotation {}\n    private static class TestClass {\n        @TestAnnotation\n        private String annotatedField;\n        private int nonAnnotatedField;\n    }\n    @Test\n    public void testGetFieldsListWithAnnotation() {\n        List<Field> annotatedFields = FieldUtils.getFieldsListWithAnnotation(TestClass.class, TestAnnotation.class);\n        assertEquals(1, annotatedFields.size());\n        assertEquals(\"annotatedField\", annotatedFields.get(0).getName());\n    }\n    @Test\n    public void testGetFieldsListWithAnnotation_noAnnotation() {\n        List<Field> annotatedFields = FieldUtils.getFieldsListWithAnnotation(TestClass.class, Deprecated.class);\n        assertTrue(annotatedFields.isEmpty());\n    }\n    @Test(expected = IllegalArgumentException.class)\n    public void testGetFieldsListWithAnnotation_nullAnnotation() {\n        FieldUtils.getFieldsListWithAnnotation(TestClass.class, null);\n    }\n}"
  },
  {
    "original_path": "XDean_Java-EX###XDean_Java-EX/src/test/java/cn/xdean/jex/io/FileUtilTest###testGetNameWithoutSuffix",
    "generated_path": "FileUtilTest_testGetNameWithoutSuffix.java",
    "Compile_result": 1,
    "Test_result": 1,
    "Gen_Test": "package cn.xdean.jex.io;\nimport cn.xdean.jex.lang.ExceptionUtil;\nimport org.junit.Assert;\nimport org.junit.Ignore;\nimport org.junit.Test;\nimport java.io.IOException;\nimport java.net.URI;\nimport java.nio.file.Paths;\nimport static org.junit.Assert.assertEquals;\n// original test path: XDean_Java-EX###XDean_Java-EX/src/test/java/cn/xdean/jex/io/FileUtilTest###testGetNameWithoutSuffix\nimport org.junit.Test;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport static org.junit.Assert.assertEquals;\npublic class FileUtilTest_testGetNameWithoutSuffix {\n    @Test\n    public void testGetNameWithoutSuffix() {\n        Path path = Paths.get(\"C:/Users/JohnDoe/Documents/example.txt\");\n        String expectedName = \"example\";\n        String actualName = FileUtil.getNameWithoutSuffix(path);\n        assertEquals(expectedName, actualName);\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/math/FractionTest###testEquals",
    "generated_path": "FractionTest_testEquals.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3.math;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertSame;\nimport static org.junit.Assert.assertTrue;\nimport static org.junit.Assert.fail;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/math/FractionTest###testEquals\npublic class FractionTest_testEquals {\n    @Test\n    public void testEquals() {\n        Fraction f1 = new Fraction(1, 2);\n        Fraction f2 = new Fraction(1, 2);\n        Fraction f3 = new Fraction(2, 3);\n        Object obj = new Object();\n        // Test if the object is the same as the current object\n        assertTrue(f1.equals(f1));\n        // Test if the object being compared is not an instance of the Fraction class\n        assertFalse(f1.equals(obj));\n        // Test if the numerators and denominators of the two fractions are equal\n        assertTrue(f1.equals(f2));\n        assertFalse(f1.equals(f3));\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/math/FractionTest###testReduce",
    "generated_path": "FractionTest_testReduce.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3.math;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertSame;\nimport static org.junit.Assert.assertTrue;\nimport static org.junit.Assert.fail;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/math/FractionTest###testReduce\npublic class FractionTest_testReduce {\n    @Test\n    public void testReduce() {\n        Fraction fraction1 = new Fraction(4, 8);\n        Fraction fraction2 = new Fraction(3, 5);\n        Fraction fraction3 = new Fraction(0, 1);\n        Fraction fraction4 = new Fraction(7, 1);\n        assertEquals(new Fraction(1, 2), fraction1.reduce());\n        assertEquals(new Fraction(3, 5), fraction2.reduce());\n        assertSame(fraction3, fraction3.reduce());\n        assertEquals(new Fraction(7, 1), fraction4.reduce());\n    }\n}"
  },
  {
    "original_path": "mgormley_prim###mgormley_prim/src/test/java_generated/edu/jhu/prim/map/IntDoubleHashMapTest###testEquals",
    "generated_path": "IntDoubleHashMapTest_testEquals.java",
    "Compile_result": 1,
    "Test_result": 1,
    "Gen_Test": "package edu.jhu.prim.map;\nimport static edu.jhu.prim.Primitives.toDouble;\nimport static edu.jhu.prim.Primitives.toInt;\nimport static edu.jhu.prim.Primitives.toInt;\nimport static org.junit.Assert.*;\nimport java.util.Iterator;\nimport org.junit.Test;\nimport edu.jhu.prim.Primitives;\n// original test path: mgormley_prim###mgormley_prim/src/test/java_generated/edu/jhu/prim/map/IntDoubleHashMapTest###testEquals\npublic class IntDoubleHashMapTest_testEquals {\n    @Test\n    public void testEquals() {\n        IntDoubleHashMap map1 = new IntDoubleHashMap();\n        map1.put(1, 1.0);\n        map1.put(2, 2.0);\n        map1.put(3, 3.0);\n        IntDoubleHashMap map2 = new IntDoubleHashMap();\n        map2.put(1, 1.0);\n        map2.put(2, 2.0);\n        map2.put(3, 3.0);\n        IntDoubleHashMap map3 = new IntDoubleHashMap();\n        map3.put(1, 1.0);\n        map3.put(2, 2.0);\n        IntDoubleHashMap map4 = new IntDoubleHashMap();\n        map4.put(1, 1.0);\n        map4.put(2, 2.0);\n        map4.put(3, 4.0);\n        assertTrue(map1.equals(map2));\n        assertFalse(map1.equals(map3));\n        assertFalse(map1.equals(map4));\n    }\n}"
  },
  {
    "original_path": "mgormley_prim###mgormley_prim/src/test/java_generated/edu/jhu/prim/map/IntDoubleHashMapTest###testHashCode",
    "generated_path": "IntDoubleHashMapTest_testHashCode.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package edu.jhu.prim.map;\nimport static edu.jhu.prim.Primitives.toDouble;\nimport static edu.jhu.prim.Primitives.toInt;\nimport static edu.jhu.prim.Primitives.toInt;\nimport static org.junit.Assert.*;\nimport java.util.Iterator;\nimport org.junit.Test;\nimport edu.jhu.prim.Primitives;\n// original test path: mgormley_prim###mgormley_prim/src/test/java_generated/edu/jhu/prim/map/IntDoubleHashMapTest###testHashCode\nimport org.junit.Test;\nimport static org.junit.Assert.*;\npublic class IntDoubleHashMapTest_testHashCode {\n    @Test\n    public void testHashCode() {\n        IntDoubleHashMap map1 = new IntDoubleHashMap();\n        map1.put(1, 1.0);\n        map1.put(2, 2.0);\n        map1.put(3, 3.0);\n        IntDoubleHashMap map2 = new IntDoubleHashMap();\n        map2.put(3, 3.0);\n        map2.put(2, 2.0);\n        map2.put(1, 1.0);\n        assertEquals(map1.hashCode(), map2.hashCode());\n        IntDoubleHashMap map3 = new IntDoubleHashMap();\n        map3.put(1, 1.0);\n        map3.put(2, 2.0);\n        map3.put(4, 4.0);\n        assertNotEquals(map1.hashCode(), map3.hashCode());\n    }\n}"
  },
  {
    "original_path": "mgormley_prim###mgormley_prim/src/test/java_generated/edu/jhu/prim/map/IntDoubleSortedMapTest###testRemove",
    "generated_path": "IntDoubleSortedMapTest_testRemove.java",
    "Compile_result": 1,
    "Test_result": 1,
    "Gen_Test": "package edu.jhu.prim.map;\nimport static edu.jhu.prim.Primitives.toDouble;\nimport static edu.jhu.prim.Primitives.toInt;\nimport static org.junit.Assert.assertEquals;\nimport java.util.Iterator;\nimport org.junit.Test;\n// original test path: mgormley_prim###mgormley_prim/src/test/java_generated/edu/jhu/prim/map/IntDoubleSortedMapTest###testRemove\npublic class IntDoubleSortedMapTest_testRemove {\n    @Test\n    public void testRemove() {\n        IntDoubleSortedMap map = new IntDoubleSortedMap(new int[]{1, 2, 3}, new double[]{1.0, 2.0, 3.0});\n        map.remove(2);\n        assertEquals(2, map.size());\n        assertEquals(1.0, map.get(1), 0.0);\n        assertEquals(3.0, map.get(3), 0.0);\n        try {\n            map.remove(4);\n        } catch (IllegalArgumentException e) {\n            assertEquals(\"This map does not contain the key: 4\", e.getMessage());\n        }\n    }\n}"
  },
  {
    "original_path": "mgormley_prim###mgormley_prim/src/test/java_generated/edu/jhu/prim/vector/IntDoubleSortedVectorTest###testGetWithNoZeroValues",
    "generated_path": "IntDoubleSortedVectorTest_testGetWithNoZeroValues.java",
    "Compile_result": 1,
    "Test_result": 1,
    "Gen_Test": "package edu.jhu.prim.vector;\nimport static edu.jhu.prim.Primitives.toDouble;\nimport static edu.jhu.prim.Primitives.toInt;\nimport static org.junit.Assert.*;\nimport java.util.Iterator;\nimport org.junit.Test;\nimport edu.jhu.prim.Primitives;\nimport edu.jhu.prim.map.IntDoubleEntry;\n// original test path: mgormley_prim###mgormley_prim/src/test/java_generated/edu/jhu/prim/vector/IntDoubleSortedVectorTest###testGetWithNoZeroValues\nimport org.junit.Test;\nimport static org.junit.Assert.*;\npublic class IntDoubleSortedVectorTest_testGetWithNoZeroValues {\n    @Test\n    public void testGetWithNoZeroValues() {\n        IntDoubleSortedVector row = new IntDoubleSortedVector(new int[]{1, 2, 3, 4}, new double[]{0.0, 1.0, 2.0, 0.0});\n        double zeroThreshold = 0.5;\n        IntDoubleSortedVector result = IntDoubleSortedVector.getWithNoZeroValues(row, zeroThreshold);\n        assertEquals(2, result.getUsed());\n        assertEquals(2.0, result.get(2), 0.0);\n        assertEquals(1.0, result.get(3), 0.0);\n    }\n}"
  },
  {
    "original_path": "mgormley_prim###mgormley_prim/src/test/java_generated/edu/jhu/prim/map/IntFloatHashMapTest###testEquals",
    "generated_path": "IntFloatHashMapTest_testEquals.java",
    "Compile_result": 1,
    "Test_result": 1,
    "Gen_Test": "package edu.jhu.prim.map;\nimport static edu.jhu.prim.Primitives.toFloat;\nimport static edu.jhu.prim.Primitives.toInt;\nimport static edu.jhu.prim.Primitives.toInt;\nimport static org.junit.Assert.*;\nimport java.util.Iterator;\nimport org.junit.Test;\nimport edu.jhu.prim.Primitives;\n// original test path: mgormley_prim###mgormley_prim/src/test/java_generated/edu/jhu/prim/map/IntFloatHashMapTest###testEquals\nimport org.junit.Test;\nimport static org.junit.Assert.*;\npublic class IntFloatHashMapTest_testEquals {\n    @Test\n    public void testEquals() {\n        IntFloatHashMap map1 = new IntFloatHashMap();\n        map1.put(1, 1.0f);\n        map1.put(2, 2.0f);\n        map1.put(3, 3.0f);\n        IntFloatHashMap map2 = new IntFloatHashMap();\n        map2.put(1, 1.0f);\n        map2.put(2, 2.0f);\n        map2.put(3, 3.0f);\n        IntFloatHashMap map3 = new IntFloatHashMap();\n        map3.put(1, 1.0f);\n        map3.put(2, 2.0f);\n        IntFloatHashMap map4 = new IntFloatHashMap();\n        map4.put(1, 1.0f);\n        map4.put(2, 2.0f);\n        map4.put(3, 4.0f);\n        assertTrue(map1.equals(map2));\n        assertFalse(map1.equals(map3));\n        assertFalse(map1.equals(map4));\n    }\n}"
  },
  {
    "original_path": "mgormley_prim###mgormley_prim/src/test/java_generated/edu/jhu/prim/map/IntFloatHashMapTest###testHashCode",
    "generated_path": "IntFloatHashMapTest_testHashCode.java",
    "Compile_result": 1,
    "Test_result": 1,
    "Gen_Test": "package edu.jhu.prim.map;\nimport static edu.jhu.prim.Primitives.toFloat;\nimport static edu.jhu.prim.Primitives.toInt;\nimport static edu.jhu.prim.Primitives.toInt;\nimport static org.junit.Assert.*;\nimport java.util.Iterator;\nimport org.junit.Test;\nimport edu.jhu.prim.Primitives;\n// original test path: mgormley_prim###mgormley_prim/src/test/java_generated/edu/jhu/prim/map/IntFloatHashMapTest###testHashCode\nimport org.junit.Test;\nimport static org.junit.Assert.*;\npublic class IntFloatHashMapTest_testHashCode {\n    @Test\n    public void testHashCode() {\n        IntFloatHashMap map1 = new IntFloatHashMap();\n        map1.put(1, 1.0f);\n        map1.put(2, 2.0f);\n        map1.put(3, 3.0f);\n        IntFloatHashMap map2 = new IntFloatHashMap();\n        map2.put(3, 3.0f);\n        map2.put(2, 2.0f);\n        map2.put(1, 1.0f);\n        assertEquals(map1.hashCode(), map2.hashCode());\n    }\n}"
  },
  {
    "original_path": "mgormley_prim###mgormley_prim/src/test/java_generated/edu/jhu/prim/map/IntFloatSortedMapTest###testRemove",
    "generated_path": "IntFloatSortedMapTest_testRemove.java",
    "Compile_result": 1,
    "Test_result": 1,
    "Gen_Test": "package edu.jhu.prim.map;\nimport static edu.jhu.prim.Primitives.toFloat;\nimport static edu.jhu.prim.Primitives.toInt;\nimport static org.junit.Assert.assertEquals;\nimport java.util.Iterator;\nimport org.junit.Test;\n// original test path: mgormley_prim###mgormley_prim/src/test/java_generated/edu/jhu/prim/map/IntFloatSortedMapTest###testRemove\npublic class IntFloatSortedMapTest_testRemove {\n    @Test\n    public void testRemove() {\n        IntFloatSortedMap map = new IntFloatSortedMap(new int[]{1, 2, 3}, new float[]{1.0f, 2.0f, 3.0f});\n        map.remove(2);\n        assertEquals(2, map.size());\n        assertEquals(1.0f, map.get(1), 0.0f);\n        assertEquals(3.0f, map.get(3), 0.0f);\n        try {\n            map.remove(4);\n        } catch (IllegalArgumentException e) {\n            assertEquals(\"This map does not contain the key: 4\", e.getMessage());\n        }\n    }\n}"
  },
  {
    "original_path": "mgormley_prim###mgormley_prim/src/test/java_generated/edu/jhu/prim/vector/IntFloatSortedVectorTest###testGetWithNoZeroValues",
    "generated_path": "IntFloatSortedVectorTest_testGetWithNoZeroValues.java",
    "Compile_result": 1,
    "Test_result": 1,
    "Gen_Test": "package edu.jhu.prim.vector;\nimport static edu.jhu.prim.Primitives.toFloat;\nimport static edu.jhu.prim.Primitives.toInt;\nimport static org.junit.Assert.*;\nimport java.util.Iterator;\nimport org.junit.Test;\nimport edu.jhu.prim.Primitives;\nimport edu.jhu.prim.map.IntFloatEntry;\n// original test path: mgormley_prim###mgormley_prim/src/test/java_generated/edu/jhu/prim/vector/IntFloatSortedVectorTest###testGetWithNoZeroValues\nimport org.junit.Test;\nimport static org.junit.Assert.*;\npublic class IntFloatSortedVectorTest_testGetWithNoZeroValues {\n    @Test\n    public void testGetWithNoZeroValues() {\n        IntFloatSortedVector row = new IntFloatSortedVector(new int[]{1, 2, 3}, new float[]{0.0f, 1.0f, 2.0f});\n        float zeroThreshold = 0.5f;\n        IntFloatSortedVector result = IntFloatSortedVector.getWithNoZeroValues(row, zeroThreshold);\n        assertEquals(2, result.getUsed());\n        assertEquals(2, result.getIndices()[0]);\n        assertEquals(3, result.getIndices()[1]);\n        assertEquals(2.0f, result.getValues()[0], 0.0f);\n        assertEquals(1.0f, result.getValues()[1], 0.0f);\n        row = new IntFloatSortedVector(new int[]{1, 2, 3}, new float[]{1.0f, 2.0f, 3.0f});\n        zeroThreshold = 0.5f;\n        result = IntFloatSortedVector.getWithNoZeroValues(row, zeroThreshold);\n        assertEquals(3, result.getUsed());\n        assertEquals(1, result.getIndices()[0]);\n        assertEquals(2, result.getIndices()[1]);\n        assertEquals(3, result.getIndices()[2]);\n        assertEquals(1.0f, result.getValues()[0], 0.0f);\n        assertEquals(2.0f, result.getValues()[1], 0.0f);\n        assertEquals(3.0f, result.getValues()[2], 0.0f);\n        row = new IntFloatSortedVector(new int[]{1, 2, 3}, new float[]{0.0f, 0.0f, 0.0f});\n        zeroThreshold = 0.5f;\n        result = IntFloatSortedVector.getWithNoZeroValues(row, zeroThreshold);\n        assertEquals(0, result.getUsed());\n    }\n}"
  },
  {
    "original_path": "mgormley_prim###mgormley_prim/src/test/java_generated/edu/jhu/prim/map/IntIntHashMapTest###testEquals",
    "generated_path": "IntIntHashMapTest_testEquals.java",
    "Compile_result": 1,
    "Test_result": 1,
    "Gen_Test": "package edu.jhu.prim.map;\nimport static edu.jhu.prim.Primitives.toInt;\nimport static edu.jhu.prim.Primitives.toInt;\nimport static edu.jhu.prim.Primitives.toInt;\nimport static org.junit.Assert.*;\nimport java.util.Iterator;\nimport org.junit.Test;\nimport edu.jhu.prim.Primitives;\n// original test path: mgormley_prim###mgormley_prim/src/test/java_generated/edu/jhu/prim/map/IntIntHashMapTest###testEquals\npublic class IntIntHashMapTest_testEquals {\n    @Test\n    public void testEquals() {\n        IntIntHashMap map1 = new IntIntHashMap();\n        map1.put(1, 10);\n        map1.put(2, 20);\n        map1.put(3, 30);\n        IntIntHashMap map2 = new IntIntHashMap();\n        map2.put(1, 10);\n        map2.put(2, 20);\n        map2.put(3, 30);\n        IntIntHashMap map3 = new IntIntHashMap();\n        map3.put(1, 10);\n        map3.put(2, 20);\n        IntIntHashMap map4 = new IntIntHashMap();\n        map4.put(1, 10);\n        map4.put(2, 20);\n        map4.put(3, 40);\n        assertTrue(map1.equals(map2)); // Same maps\n        assertTrue(map2.equals(map1)); // Same maps\n        assertFalse(map1.equals(map3)); // Different sizes\n        assertFalse(map1.equals(map4)); // Different values\n        assertFalse(map1.equals(null)); // Null object\n        assertFalse(map1.equals(\"not a map\")); // Different class\n    }\n}"
  },
  {
    "original_path": "mgormley_prim###mgormley_prim/src/test/java_generated/edu/jhu/prim/map/IntIntHashMapTest###testHashCode",
    "generated_path": "IntIntHashMapTest_testHashCode.java",
    "Compile_result": 1,
    "Test_result": 1,
    "Gen_Test": "package edu.jhu.prim.map;\nimport static edu.jhu.prim.Primitives.toInt;\nimport static edu.jhu.prim.Primitives.toInt;\nimport static edu.jhu.prim.Primitives.toInt;\nimport static org.junit.Assert.*;\nimport java.util.Iterator;\nimport org.junit.Test;\nimport edu.jhu.prim.Primitives;\n// original test path: mgormley_prim###mgormley_prim/src/test/java_generated/edu/jhu/prim/map/IntIntHashMapTest###testHashCode\npublic class IntIntHashMapTest_testHashCode {\n    @Test\n    public void testHashCode() {\n        IntIntHashMap map1 = new IntIntHashMap();\n        map1.put(1, 10);\n        map1.put(2, 20);\n        map1.put(3, 30);\n        IntIntHashMap map2 = new IntIntHashMap();\n        map2.put(3, 30);\n        map2.put(2, 20);\n        map2.put(1, 10);\n        assertEquals(\"Hash codes should be equal\", map1.hashCode(), map2.hashCode());\n    }\n}"
  },
  {
    "original_path": "mgormley_prim###mgormley_prim/src/test/java_generated/edu/jhu/prim/vector/IntIntSortedVectorTest###testGetWithNoZeroValues",
    "generated_path": "IntIntSortedVectorTest_testGetWithNoZeroValues.java",
    "Compile_result": 1,
    "Test_result": 1,
    "Gen_Test": "package edu.jhu.prim.vector;\nimport static edu.jhu.prim.Primitives.toInt;\nimport static edu.jhu.prim.Primitives.toInt;\nimport static org.junit.Assert.*;\nimport java.util.Iterator;\nimport org.junit.Test;\nimport edu.jhu.prim.Primitives;\nimport edu.jhu.prim.map.IntIntEntry;\n// original test path: mgormley_prim###mgormley_prim/src/test/java_generated/edu/jhu/prim/vector/IntIntSortedVectorTest###testGetWithNoZeroValues\nimport org.junit.Test;\nimport static org.junit.Assert.*;\npublic class IntIntSortedVectorTest_testGetWithNoZeroValues {\n    @Test\n    public void testGetWithNoZeroValues() {\n        IntIntSortedVector vector = new IntIntSortedVector(new int[]{0, 1, 2, 3}, new int[]{0, 4, 0, 6});\n        IntIntSortedVector result = IntIntSortedVector.getWithNoZeroValues(vector);\n        assertEquals(2, result.getUsed());\n        assertEquals(1, result.get(0));\n        assertEquals(3, result.get(1));\n        IntIntSortedVector vector2 = new IntIntSortedVector(new int[]{0, 1, 2, 3}, new int[]{1, 2, 3, 4});\n        IntIntSortedVector result2 = IntIntSortedVector.getWithNoZeroValues(vector2);\n        assertEquals(4, result2.getUsed());\n        assertEquals(1, result2.get(0));\n        assertEquals(2, result2.get(1));\n        assertEquals(3, result2.get(2));\n        assertEquals(4, result2.get(3));\n        IntIntSortedVector vector3 = new IntIntSortedVector(new int[]{0, 1, 2, 3}, new int[]{0, 0, 0, 0});\n        IntIntSortedVector result3 = IntIntSortedVector.getWithNoZeroValues(vector3);\n        assertEquals(0, result3.getUsed());\n    }\n}"
  },
  {
    "original_path": "mgormley_prim###mgormley_prim/src/test/java_generated/edu/jhu/prim/map/IntLongHashMapTest###testEquals",
    "generated_path": "IntLongHashMapTest_testEquals.java",
    "Compile_result": 1,
    "Test_result": 1,
    "Gen_Test": "package edu.jhu.prim.map;\nimport static edu.jhu.prim.Primitives.toLong;\nimport static edu.jhu.prim.Primitives.toInt;\nimport static edu.jhu.prim.Primitives.toInt;\nimport static org.junit.Assert.*;\nimport java.util.Iterator;\nimport org.junit.Test;\nimport edu.jhu.prim.Primitives;\n// original test path: mgormley_prim###mgormley_prim/src/test/java_generated/edu/jhu/prim/map/IntLongHashMapTest###testEquals\npublic class IntLongHashMapTest_testEquals {\n    @Test\n    public void testEquals() {\n        IntLongHashMap map1 = new IntLongHashMap();\n        map1.put(1, 10);\n        map1.put(2, 20);\n        map1.put(3, 30);\n        IntLongHashMap map2 = new IntLongHashMap();\n        map2.put(1, 10);\n        map2.put(2, 20);\n        map2.put(3, 30);\n        IntLongHashMap map3 = new IntLongHashMap();\n        map3.put(1, 10);\n        map3.put(2, 20);\n        map3.put(4, 40);\n        IntLongHashMap map4 = new IntLongHashMap();\n        map4.put(1, 10);\n        map4.put(2, 20);\n        map4.put(3, 30);\n        map4.put(4, 40);\n        assertTrue(map1.equals(map2));\n        assertFalse(map1.equals(map3));\n        assertFalse(map1.equals(map4));\n    }\n}"
  },
  {
    "original_path": "mgormley_prim###mgormley_prim/src/test/java_generated/edu/jhu/prim/map/IntLongHashMapTest###testHashCode",
    "generated_path": "IntLongHashMapTest_testHashCode.java",
    "Compile_result": 1,
    "Test_result": 1,
    "Gen_Test": "package edu.jhu.prim.map;\nimport static edu.jhu.prim.Primitives.toLong;\nimport static edu.jhu.prim.Primitives.toInt;\nimport static edu.jhu.prim.Primitives.toInt;\nimport static org.junit.Assert.*;\nimport java.util.Iterator;\nimport org.junit.Test;\nimport edu.jhu.prim.Primitives;\n// original test path: mgormley_prim###mgormley_prim/src/test/java_generated/edu/jhu/prim/map/IntLongHashMapTest###testHashCode\npublic class IntLongHashMapTest_testHashCode {\n    @Test\n    public void testHashCode() {\n        IntLongHashMap map1 = new IntLongHashMap();\n        map1.put(1, 100L);\n        map1.put(2, 200L);\n        map1.put(3, 300L);\n        IntLongHashMap map2 = new IntLongHashMap();\n        map2.put(3, 300L);\n        map2.put(2, 200L);\n        map2.put(1, 100L);\n        assertEquals(\"Hash codes should be equal\", map1.hashCode(), map2.hashCode());\n    }\n}"
  },
  {
    "original_path": "mgormley_prim###mgormley_prim/src/test/java_generated/edu/jhu/prim/map/IntLongSortedMapTest###testRemove",
    "generated_path": "IntLongSortedMapTest_testRemove.java",
    "Compile_result": 1,
    "Test_result": 1,
    "Gen_Test": "package edu.jhu.prim.map;\nimport static edu.jhu.prim.Primitives.toLong;\nimport static edu.jhu.prim.Primitives.toInt;\nimport static org.junit.Assert.assertEquals;\nimport java.util.Iterator;\nimport org.junit.Test;\n// original test path: mgormley_prim###mgormley_prim/src/test/java_generated/edu/jhu/prim/map/IntLongSortedMapTest###testRemove\npublic class IntLongSortedMapTest_testRemove {\n    @Test\n    public void testRemove() {\n        IntLongSortedMap map = new IntLongSortedMap(new int[]{1, 2, 3, 4}, new long[]{10, 20, 30, 40});\n        // Test removing an existing entry\n        map.remove(2);\n        assertEquals(3, map.size());\n        assertEquals(10, map.get(1));\n        assertEquals(30, map.get(3));\n        assertEquals(40, map.get(4));\n        // Test removing the first entry\n        map.remove(1);\n        assertEquals(2, map.size());\n        assertEquals(30, map.get(3));\n        assertEquals(40, map.get(4));\n        // Test removing the last entry\n        map.remove(4);\n        assertEquals(1, map.size());\n        assertEquals(30, map.get(3));\n        // Test removing a non-existing entry\n        try {\n            map.remove(2);\n        } catch (IllegalArgumentException e) {\n            // Expected exception\n            assertEquals(\"This map does not contain the key: 2\", e.getMessage());\n        }\n    }\n}"
  },
  {
    "original_path": "mgormley_prim###mgormley_prim/src/test/java_generated/edu/jhu/prim/vector/IntLongSortedVectorTest###testGetWithNoZeroValues",
    "generated_path": "IntLongSortedVectorTest_testGetWithNoZeroValues.java",
    "Compile_result": 1,
    "Test_result": 1,
    "Gen_Test": "package edu.jhu.prim.vector;\nimport static edu.jhu.prim.Primitives.toLong;\nimport static edu.jhu.prim.Primitives.toInt;\nimport static org.junit.Assert.*;\nimport java.util.Iterator;\nimport org.junit.Test;\nimport edu.jhu.prim.Primitives;\nimport edu.jhu.prim.map.IntLongEntry;\n// original test path: mgormley_prim###mgormley_prim/src/test/java_generated/edu/jhu/prim/vector/IntLongSortedVectorTest###testGetWithNoZeroValues\nimport org.junit.Test;\nimport static org.junit.Assert.*;\npublic class IntLongSortedVectorTest_testGetWithNoZeroValues {\n    @Test\n    public void testGetWithNoZeroValues() {\n        // Create an input vector with some zero and non-zero values\n        int[] indices = {0, 1, 2, 3, 4};\n        long[] values = {0, 2, 0, 4, 5};\n        IntLongSortedVector inputVector = new IntLongSortedVector(indices, values);\n        // Call the method under test\n        IntLongSortedVector outputVector = IntLongSortedVector.getWithNoZeroValues(inputVector);\n        // Check that the output vector contains only non-zero values\n        int[] expectedIndices = {1, 3, 4};\n        long[] expectedValues = {2, 4, 5};\n        assertArrayEquals(expectedIndices, outputVector.getIndices());\n        assertArrayEquals(expectedValues, outputVector.getValues());\n    }\n}"
  },
  {
    "original_path": "mgormley_prim###mgormley_prim/src/test/java/edu/jhu/prim/map/IntObjectHashMapTest###testKeys",
    "generated_path": "IntObjectHashMapTest_testKeys.java",
    "Compile_result": 1,
    "Test_result": 1,
    "Gen_Test": "package edu.jhu.prim.map;\nimport static org.junit.Assert.assertEquals;\nimport org.junit.Test;\nimport edu.jhu.prim.util.IntJUnitUtils;\n// original test path: mgormley_prim###mgormley_prim/src/test/java/edu/jhu/prim/map/IntObjectHashMapTest###testKeys\npublic class IntObjectHashMapTest_testKeys {\n    @Test\n    public void testKeys() {\n        IntObjectHashMap<Integer> map = new IntObjectHashMap<>();\n        map.put(1, \"one\");\n        map.put(2, \"two\");\n        map.put(3, \"three\");\n        int[] expectedKeys = {1, 2, 3};\n        int[] actualKeys = map.keys();\n        assertEquals(expectedKeys.length, actualKeys.length);\n        IntJUnitUtils.assertArrayEquals(expectedKeys, actualKeys);\n    }\n}"
  },
  {
    "original_path": "XDean_Java-EX###XDean_Java-EX/src/test/java/cn/xdean/jex/lang/collection/sequence/IntSequenceTest###testRelease",
    "generated_path": "IntSequenceTest_testRelease.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package cn.xdean.jex.lang.collection.sequence;\nimport io.reactivex.Flowable;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\n// original test path: XDean_Java-EX###XDean_Java-EX/src/test/java/cn/xdean/jex/lang/collection/sequence/IntSequenceTest###testRelease\npublic class IntSequenceTest_testRelease {\n    @Test\n    public void testRelease() {\n        IntSequence sequence = new IntSequence(0, 2);\n        assertTrue(sequence.release(0));\n        assertFalse(sequence.release(1));\n        assertTrue(sequence.release(2));\n        assertFalse(sequence.release(3));\n        assertTrue(sequence.release(4));\n        assertFalse(sequence.release(5));\n        assertTrue(sequence.release(6));\n        assertFalse(sequence.release(7));\n        assertTrue(sequence.release(8));\n    }\n}"
  },
  {
    "original_path": "l0s_fernet-java8###l0s_fernet-java8/fernet-java8/src/test/java/com/macasaet/fernet/KeyTest###testGenerateKey",
    "generated_path": "KeyTest_testGenerateKey.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package com.macasaet.fernet;\nimport static com.macasaet.fernet.Constants.encoder;\nimport static com.macasaet.fernet.Constants.encryptionKeyBytes;\nimport static com.macasaet.fernet.Constants.signingKeyBytes;\nimport static nl.jqno.equalsverifier.Warning.ALL_FIELDS_SHOULD_BE_USED;\nimport static nl.jqno.equalsverifier.Warning.STRICT_INHERITANCE;\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.fail;\nimport static org.mutabilitydetector.unittesting.AllowedReason.allowingForSubclassing;\nimport static org.mutabilitydetector.unittesting.AllowedReason.assumingFields;\nimport static org.mutabilitydetector.unittesting.MutabilityAssert.assertInstancesOf;\nimport static org.mutabilitydetector.unittesting.MutabilityMatchers.areImmutable;\nimport java.security.SecureRandom;\nimport java.time.Instant;\nimport javax.crypto.spec.IvParameterSpec;\nimport javax.crypto.spec.SecretKeySpec;\nimport org.junit.Test;\nimport nl.jqno.equalsverifier.EqualsVerifier;\nimport nl.jqno.equalsverifier.api.SingleTypeEqualsVerifierApi;\n// original test path: l0s_fernet-java8###l0s_fernet-java8/fernet-java8/src/test/java/com/macasaet/fernet/KeyTest###testGenerateKey\nimport java.security.SecureRandom;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\npublic class KeyTest_testGenerateKey {\n    @Test\n    public void testGenerateKey() {\n        SecureRandom random = new SecureRandom();\n        Key key = Key.generateKey(random);\n        assertNotNull(key);\n        assertNotNull(key.signingKey);\n        assertNotNull(key.encryptionKey);\n        assertEquals(16, key.signingKey.length);\n        assertEquals(16, key.encryptionKey.length);\n    }\n}"
  },
  {
    "original_path": "lazee_meteo###lazee_meteo/meteo-core/src/test/java/no/api/meteo/entity/core/LocationTest###testFromCoordinates",
    "generated_path": "LocationTest_testFromCoordinates.java",
    "Compile_result": 1,
    "Test_result": 1,
    "Gen_Test": "package no.api.meteo.entity.core;\nimport org.junit.Assert;\nimport org.junit.Test;\n// original test path: lazee_meteo###lazee_meteo/meteo-core/src/test/java/no/api/meteo/entity/core/LocationTest###testFromCoordinates\nimport org.junit.Assert;\nimport org.junit.Test;\npublic class LocationTest_testFromCoordinates {\n    @Test(expected = IllegalArgumentException.class)\n    public void testFromCoordinatesWithNullInput() {\n        Location.fromCoordinates(null);\n    }\n    @Test(expected = IllegalArgumentException.class)\n    public void testFromCoordinatesWithInvalidInput() {\n        Location.fromCoordinates(\"invalid input\");\n    }\n    @Test\n    public void testFromCoordinatesWithValidInput() {\n        String coordinates = \"123.456,78.90,1000\";\n        Location location = Location.fromCoordinates(coordinates);\n        Assert.assertEquals(Double.valueOf(123.456), location.getLongitude());\n        Assert.assertEquals(Double.valueOf(78.90), location.getLatitude());\n        Assert.assertEquals(Integer.valueOf(1000), location.getAltitude());\n    }\n}"
  },
  {
    "original_path": "mgormley_prim###mgormley_prim/src/test/java/edu/jhu/prim/list/LongArrayListTest###testUniq",
    "generated_path": "LongArrayListTest_testUniq.java",
    "Compile_result": 1,
    "Test_result": 1,
    "Gen_Test": "package edu.jhu.prim.list;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.fail;\nimport org.junit.Test;\n// original test path: mgormley_prim###mgormley_prim/src/test/java/edu/jhu/prim/list/LongArrayListTest###testUniq\npublic class LongArrayListTest_testUniq {\n    @Test\n    public void testUniq_removesDuplicateElements() {\n        // Arrange\n        long[] elements = {1, 2, 2, 3, 4, 4, 4, 5};\n        LongArrayList list = new LongArrayList(elements);\n        // Act\n        list.uniq();\n        // Assert\n        long[] expected = {1, 2, 3, 4, 5};\n        assertEquals(expected.length, list.size);\n        for (int i = 0; i < expected.length; i++) {\n            assertEquals(expected[i], list.elements[i]);\n        }\n    }\n    @Test\n    public void testUniq_doesNothingIfNoDuplicates() {\n        // Arrange\n        long[] elements = {1, 2, 3, 4, 5};\n        LongArrayList list = new LongArrayList(elements);\n        // Act\n        list.uniq();\n        // Assert\n        long[] expected = {1, 2, 3, 4, 5};\n        assertEquals(expected.length, list.size);\n        for (int i = 0; i < expected.length; i++) {\n            assertEquals(expected[i], list.elements[i]);\n        }\n    }\n    @Test\n    public void testUniq_doesNothingIfEmptyList() {\n        // Arrange\n        LongArrayList list = new LongArrayList();\n        // Act\n        list.uniq();\n        // Assert\n        assertEquals(0, list.size);\n    }\n}"
  },
  {
    "original_path": "mgormley_prim###mgormley_prim/src/test/java/edu/jhu/prim/map/LongDoubleHashMapTest###testEquals",
    "generated_path": "LongDoubleHashMapTest_testEquals.java",
    "Compile_result": 1,
    "Test_result": 1,
    "Gen_Test": "package edu.jhu.prim.map;\nimport static edu.jhu.prim.Primitives.toDouble;\nimport static edu.jhu.prim.Primitives.toInt;\nimport static edu.jhu.prim.Primitives.toLong;\nimport static org.junit.Assert.*;\nimport java.util.Iterator;\nimport org.junit.Test;\nimport edu.jhu.prim.Primitives;\n// original test path: mgormley_prim###mgormley_prim/src/test/java/edu/jhu/prim/map/LongDoubleHashMapTest###testEquals\npublic class LongDoubleHashMapTest_testEquals {\n    @Test\n    public void testEquals() {\n        LongDoubleHashMap map1 = new LongDoubleHashMap();\n        LongDoubleHashMap map2 = new LongDoubleHashMap();\n        // Test if two empty maps are equal\n        assertTrue(map1.equals(map2));\n        // Test if two maps with different sizes are not equal\n        map1.put(1L, 1.0);\n        assertFalse(map1.equals(map2));\n        // Test if two maps with the same keys and values are equal\n        map2.put(1L, 1.0);\n        assertTrue(map1.equals(map2));\n        // Test if two maps with different keys are not equal\n        map1.put(2L, 2.0);\n        assertFalse(map1.equals(map2));\n        // Test if two maps with different values are not equal\n        map2.put(2L, 3.0);\n        assertFalse(map1.equals(map2));\n    }\n}"
  },
  {
    "original_path": "mgormley_prim###mgormley_prim/src/test/java/edu/jhu/prim/map/LongDoubleHashMapTest###testHashCode",
    "generated_path": "LongDoubleHashMapTest_testHashCode.java",
    "Compile_result": 1,
    "Test_result": 1,
    "Gen_Test": "package edu.jhu.prim.map;\nimport static edu.jhu.prim.Primitives.toDouble;\nimport static edu.jhu.prim.Primitives.toInt;\nimport static edu.jhu.prim.Primitives.toLong;\nimport static org.junit.Assert.*;\nimport java.util.Iterator;\nimport org.junit.Test;\nimport edu.jhu.prim.Primitives;\n// original test path: mgormley_prim###mgormley_prim/src/test/java/edu/jhu/prim/map/LongDoubleHashMapTest###testHashCode\npublic class LongDoubleHashMapTest_testHashCode {\n    @Test\n    public void testHashCode() {\n        LongDoubleHashMap map1 = new LongDoubleHashMap();\n        map1.put(1L, 1.0);\n        map1.put(2L, 2.0);\n        map1.put(3L, 3.0);\n        LongDoubleHashMap map2 = new LongDoubleHashMap();\n        map2.put(3L, 3.0);\n        map2.put(2L, 2.0);\n        map2.put(1L, 1.0);\n        assertEquals(map1.hashCode(), map2.hashCode());\n    }\n}"
  },
  {
    "original_path": "mgormley_prim###mgormley_prim/src/test/java/edu/jhu/prim/map/LongDoubleSortedMapTest###testRemove",
    "generated_path": "LongDoubleSortedMapTest_testRemove.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package edu.jhu.prim.map;\nimport static edu.jhu.prim.Primitives.toDouble;\nimport static edu.jhu.prim.Primitives.toInt;\nimport static org.junit.Assert.assertEquals;\nimport java.util.Iterator;\nimport org.junit.Test;\n// original test path: mgormley_prim###mgormley_prim/src/test/java/edu/jhu/prim/map/LongDoubleSortedMapTest###testRemove\npublic class LongDoubleSortedMapTest_testRemove {\n    @Test\n    public void testRemove() {\n        LongDoubleSortedMap map = new LongDoubleSortedMap();\n        map.put(1L, 1.0);\n        map.put(2L, 2.0);\n        map.put(3L, 3.0);\n        map.remove(2L);\n        assertEquals(2, map.size());\n        assertEquals(1.0, map.get(1L), 0.0);\n        assertEquals(3.0, map.get(3L), 0.0);\n        try {\n            map.remove(2L);\n            fail(\"Expected IllegalArgumentException to be thrown\");\n        } catch (IllegalArgumentException e) {\n            // expected\n        }\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/mutable/MutableByteTest###testGetAndDecrement",
    "generated_path": "MutableByteTest_testGetAndDecrement.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3.mutable;\nimport org.junit.Test;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertTrue;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/mutable/MutableByteTest###testGetAndDecrement\npublic class MutableByteTest_testGetAndDecrement {\n    @Test\n    public void testGetAndDecrement() {\n        MutableByte mutableByte = new MutableByte((byte) 5);\n        byte result = mutableByte.getAndDecrement();\n        assertEquals(5, result);\n        assertEquals(4, mutableByte.value);\n    }\n    @Test\n    public void testGetAndDecrementWithNegativeValue() {\n        MutableByte mutableByte = new MutableByte((byte) -1);\n        byte result = mutableByte.getAndDecrement();\n        assertEquals(-1, result);\n        assertEquals(-2, mutableByte.value);\n    }\n    @Test\n    public void testGetAndDecrementWithMaxValue() {\n        MutableByte mutableByte = new MutableByte(Byte.MAX_VALUE);\n        byte result = mutableByte.getAndDecrement();\n        assertEquals(Byte.MAX_VALUE, result);\n        assertEquals(Byte.MAX_VALUE - 1, mutableByte.value);\n    }\n    @Test\n    public void testGetAndDecrementWithMinValue() {\n        MutableByte mutableByte = new MutableByte(Byte.MIN_VALUE);\n        byte result = mutableByte.getAndDecrement();\n        assertEquals(Byte.MIN_VALUE, result);\n        assertEquals(Byte.MIN_VALUE + 1, mutableByte.value);\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/mutable/MutableIntTest###testGetAndDecrement",
    "generated_path": "MutableIntTest_testGetAndDecrement.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3.mutable;\nimport org.junit.Test;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertTrue;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/mutable/MutableIntTest###testGetAndDecrement\npublic class MutableIntTest_testGetAndDecrement {\n    @Test\n    public void testGetAndDecrement() {\n        MutableInt mutableInt = new MutableInt(5);\n        int result = mutableInt.getAndDecrement();\n        assertEquals(5, result);\n        assertEquals(4, mutableInt.value);\n    }\n    @Test\n    public void testGetAndDecrementMultipleTimes() {\n        MutableInt mutableInt = new MutableInt(10);\n        int result1 = mutableInt.getAndDecrement();\n        int result2 = mutableInt.getAndDecrement();\n        int result3 = mutableInt.getAndDecrement();\n        assertEquals(10, result1);\n        assertEquals(9, result2);\n        assertEquals(8, result3);\n        assertEquals(7, mutableInt.value);\n    }\n    @Test\n    public void testGetAndDecrementWithNegativeValue() {\n        MutableInt mutableInt = new MutableInt(-2);\n        int result = mutableInt.getAndDecrement();\n        assertEquals(-2, result);\n        assertEquals(-3, mutableInt.value);\n    }\n    @Test\n    public void testGetAndDecrementWithZeroValue() {\n        MutableInt mutableInt = new MutableInt(0);\n        int result = mutableInt.getAndDecrement();\n        assertEquals(0, result);\n        assertEquals(-1, mutableInt.value);\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest###testCreateBigInteger",
    "generated_path": "NumberUtilsTest_testCreateBigInteger.java",
    "Compile_result": 1,
    "Test_result": 1,
    "Gen_Test": "package org.apache.commons.lang3.math;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert.assertTrue;\nimport static org.junit.Assert.fail;\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.Modifier;\nimport java.math.BigDecimal;\nimport java.math.BigInteger;\nimport org.apache.commons.lang3.SystemUtils;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest###testCreateBigInteger\nimport org.junit.Test;\nimport java.math.BigInteger;\nimport static org.junit.Assert.*;\npublic class NumberUtilsTest_testCreateBigInteger {\n    // Method intention: To test the createBigInteger() method of NumberUtils class\n    @Test\n    public void testCreateBigInteger() {\n        // Test case 1: Test with null input\n        assertNull(NumberUtils.createBigInteger(null));\n        // Test case 2: Test with decimal input\n        String decimalStr = \"123456789\";\n        BigInteger decimalBigInt = NumberUtils.createBigInteger(decimalStr);\n        assertNotNull(decimalBigInt);\n        assertEquals(decimalStr, decimalBigInt.toString());\n        // Test case 3: Test with hexadecimal input\n        String hexStr = \"0xABCDEF\";\n        BigInteger hexBigInt = NumberUtils.createBigInteger(hexStr);\n        assertNotNull(hexBigInt);\n        assertEquals(\"11259375\", hexBigInt.toString());\n        // Test case 4: Test with negative input\n        String negativeStr = \"-987654321\";\n        BigInteger negativeBigInt = NumberUtils.createBigInteger(negativeStr);\n        assertNotNull(negativeBigInt);\n        assertEquals(negativeStr, negativeBigInt.toString());\n        assertTrue(negativeBigInt.signum() < 0);\n        // Test case 5: Test with octal input\n        String octalStr = \"01234567\";\n        BigInteger octalBigInt = NumberUtils.createBigInteger(octalStr);\n        assertNotNull(octalBigInt);\n        assertEquals(\"342391\", octalBigInt.toString());\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/RangeTest###testHashCode",
    "generated_path": "RangeTest_testHashCode.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert.assertSame;\nimport static org.junit.Assert.assertTrue;\nimport static org.junit.Assert.fail;\nimport java.util.Comparator;\nimport org.junit.Before;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/RangeTest###testHashCode\npublic class RangeTest_testHashCode {\n    private Range<Integer> range1;\n    private Range<Integer> range2;\n    private Range<Integer> range3;\n    @Before\n    public void setUp() {\n        range1 = new Range<>(1, 5, null);\n        range2 = new Range<>(1, 5, null);\n        range3 = new Range<>(2, 6, null);\n    }\n    @Test\n    public void testHashCode() {\n        int expectedHashCode1 = 17 + 37 * Range.class.hashCode() + range1.minimum.hashCode() + range1.maximum.hashCode();\n        int expectedHashCode2 = 17 + 37 * Range.class.hashCode() + range2.minimum.hashCode() + range2.maximum.hashCode();\n        int expectedHashCode3 = 17 + 37 * Range.class.hashCode() + range3.minimum.hashCode() + range3.maximum.hashCode();\n        assertEquals(expectedHashCode1, range1.hashCode());\n        assertEquals(expectedHashCode2, range2.hashCode());\n        assertEquals(expectedHashCode3, range3.hashCode());\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/SerializationUtilsTest###testClone",
    "generated_path": "SerializationUtilsTest_testClone.java",
    "Compile_result": 1,
    "Test_result": 1,
    "Gen_Test": "package org.apache.commons.lang3;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert.assertNull;\nimport static org.junit.Assert.assertSame;\nimport static org.junit.Assert.assertTrue;\nimport static org.junit.Assert.fail;\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutputStream;\nimport java.io.OutputStream;\nimport java.io.Serializable;\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.Modifier;\nimport java.util.HashMap;\nimport org.junit.Before;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/SerializationUtilsTest###testClone\nimport org.junit.Test;\nimport static org.junit.Assert.*;\npublic class SerializationUtilsTest_testClone {\n    @Test\n    public void testClone() {\n        // Create an object to be cloned\n        MyClass original = new MyClass(\"test\", 123);\n        // Clone the object\n        MyClass cloned = SerializationUtils.clone(original);\n        // Check that the cloned object is not the same as the original\n        assertNotSame(original, cloned);\n        // Check that the cloned object has the same values as the original\n        assertEquals(original.getName(), cloned.getName());\n        assertEquals(original.getNumber(), cloned.getNumber());\n    }\n    // Helper class for testing\n    private static class MyClass implements Serializable {\n        private String name;\n        private int number;\n        public MyClass(String name, int number) {\n            this.name = name;\n            this.number = number;\n        }\n        public String getName() {\n            return name;\n        }\n        public int getNumber() {\n            return number;\n        }\n    }\n}"
  },
  {
    "original_path": "pvanassen_ns-api###pvanassen_ns-api/src/test/java/nl/pvanassen/ns/model/stations/StationsHandleTest###testGetModel",
    "generated_path": "StationsHandleTest_testGetModel.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package nl.pvanassen.ns.model.stations;\nimport org.junit.Test;\nimport java.util.List;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertNotEquals;\nimport static org.junit.Assert.assertNotNull;\n// original test path: pvanassen_ns-api###pvanassen_ns-api/src/test/java/nl/pvanassen/ns/model/stations/StationsHandleTest###testGetModel\nimport java.io.ByteArrayInputStream;\nimport java.io.InputStream;\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.junit.Test;\npublic class StationsHandleTest_testGetModel {\n    @Test\n    public void testGetModel() {\n        String xmlString = \"<Stations>\\n\" +\n                \"  <Station>\\n\" +\n                \"    <Code>AMS</Code>\\n\" +\n                \"    <Type>InterCityStation</Type>\\n\" +\n                \"    <Namen>\\n\" +\n                \"      <Kort>Amsterdam</Kort>\\n\" +\n                \"      <Middel>Amsterdam Centraal</Middel>\\n\" +\n                \"      <Lang>Amsterdam Centraal Station</Lang>\\n\" +\n                \"    </Namen>\\n\" +\n                \"    <Land>NL</Land>\\n\" +\n                \"    <UICCode>8400058</UICCode>\\n\" +\n                \"    <Lat>52.3792</Lat>\\n\" +\n                \"    <Lon>4.8994</Lon>\\n\" +\n                \"    <Synoniemen>\\n\" +\n                \"      <Synoniem>Amsterdam CS</Synoniem>\\n\" +\n                \"      <Synoniem>Amsterdam Centraal Station</Synoniem>\\n\" +\n                \"    </Synoniemen>\\n\" +\n                \"  </Station>\\n\" +\n                \"</Stations>\";\n        InputStream stream = new ByteArrayInputStream(xmlString.getBytes());\n        StationsHandle stationsHandle = new StationsHandle();\n        Stations stations = stationsHandle.getModel(stream);\n        assertNotNull(stations);\n        List<Station> stationList = stations.getStations();\n        assertNotNull(stationList);\n        assertEquals(1, stationList.size());\n        Station station = stationList.get(0);\n        assertNotNull(station);\n        assertEquals(\"AMS\", station.getCode());\n        assertEquals(\"InterCityStation\", station.getType());\n        assertNotNull(station.getNamen());\n        assertEquals(\"Amsterdam\", station.getNamen().getKort());\n        assertEquals(\"Amsterdam Centraal\", station.getNamen().getMiddel());\n        assertEquals(\"Amsterdam Centraal Station\", station.getNamen().getLang());\n        assertEquals(\"NL\", station.getLand());\n        assertEquals(8400058, station.getUicCode());\n        assertEquals(52.3792, station.getLat(), 0.0001);\n        assertEquals(4.8994, station.getLon(), 0.0001);\n        List<String> synoniemen = new ArrayList<>();\n        synoniemen.add(\"Amsterdam CS\");\n        synoniemen.add(\"Amsterdam Centraal Station\");\n        assertEquals(synoniemen, station.getSynoniemen());\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/text/StrBuilderTest###testSetCharAt",
    "generated_path": "StrBuilderTest_testSetCharAt.java",
    "Compile_result": 1,
    "Test_result": 1,
    "Gen_Test": "package org.apache.commons.lang3.text;\nimport org.junit.Test;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert.assertNotSame;\nimport static org.junit.Assert.assertNull;\nimport static org.junit.Assert.assertSame;\nimport static org.junit.Assert.assertTrue;\nimport static org.junit.Assert.fail;\nimport java.io.IOException;\nimport java.io.Reader;\nimport java.io.StringReader;\nimport java.io.StringWriter;\nimport java.io.Writer;\nimport java.nio.CharBuffer;\nimport java.util.Arrays;\nimport org.apache.commons.lang3.ArrayUtils;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/text/StrBuilderTest###testSetCharAt\nimport org.junit.Test;\nimport static org.junit.Assert.*;\npublic class StrBuilderTest_testSetCharAt {\n    @Test\n    public void testSetCharAt() {\n        StrBuilder strBuilder = new StrBuilder(\"Hello World\");\n        strBuilder.setCharAt(6, 'J');\n        assertEquals(\"Hello Jorld\", strBuilder.toString());\n        try {\n            strBuilder.setCharAt(-1, 'A');\n            fail(\"Expected StringIndexOutOfBoundsException to be thrown\");\n        } catch (StringIndexOutOfBoundsException e) {\n            assertNotNull(e.getMessage());\n        }\n        try {\n            strBuilder.setCharAt(20, 'B');\n            fail(\"Expected StringIndexOutOfBoundsException to be thrown\");\n        } catch (StringIndexOutOfBoundsException e) {\n            assertNotNull(e.getMessage());\n        }\n    }\n}"
  },
  {
    "original_path": "XDean_Java-EX###XDean_Java-EX/src/test/java/cn/xdean/jex/lang/StringUtilTest###testBalancePair",
    "generated_path": "StringUtilTest_testBalancePair.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package cn.xdean.jex.lang;\nimport io.reactivex.Flowable;\nimport org.junit.Test;\nimport org.junit.experimental.theories.Theories;\nimport org.junit.experimental.theories.Theory;\nimport org.junit.experimental.theories.suppliers.TestedOn;\nimport org.junit.runner.RunWith;\nimport java.util.stream.IntStream;\nimport static cn.xdean.jex.lang.StringUtil.*;\nimport static org.junit.Assert.assertEquals;\n// original test path: XDean_Java-EX###XDean_Java-EX/src/test/java/cn/xdean/jex/lang/StringUtilTest###testBalancePair\n@RunWith(Theories.class)\npublic class StringUtilTest_testBalancePair {\n    @Theory\n    public void balancePair_shouldReturnCorrectIndices(\n            @TestedOn(ints = {0, 1, 2}) int leftIndex,\n            @TestedOn(ints = {3, 4, 5}) int rightIndex,\n            @TestedOn(strings = {\"\", \"abc\", \"abcbcb\", \"abcbcbdef\"}) String str,\n            @TestedOn(strings = {\"\", \"(\", \"[\", \"{\"}) String left,\n            @TestedOn(strings = {\"\", \")\", \"]\", \"}\"}) String right) {\n        // Arrange\n        String input = repeat(\"a\", leftIndex) + left + repeat(\"b\", rightIndex - leftIndex - 1) + right + repeat(\"c\", str.length() - rightIndex - 1);\n        int[] expected = {leftIndex, rightIndex};\n        // Act\n        int[] actual = StringUtil.balancePair(input, left, right);\n        // Assert\n        assertEquals(expected, actual);\n    }\n    @Test\n    public void balancePair_shouldReturnNegativeOne_whenLeftAndRightStringsAreNotBalanced() {\n        // Arrange\n        String input = \"abc(def\";\n        String left = \"(\";\n        String right = \")\";\n        int[] expected = {-1, -1};\n        // Act\n        int[] actual = StringUtil.balancePair(input, left, right);\n        // Assert\n        assertEquals(expected, actual);\n    }\n    @Test\n    public void balancePair_shouldReturnNegativeOne_whenLeftStringIsNotFound() {\n        // Arrange\n        String input = \"abc(def)\";\n        String left = \"{\";\n        String right = \"}\";\n        int[] expected = {-1, -1};\n        // Act\n        int[] actual = StringUtil.balancePair(input, left, right);\n        // Assert\n        assertEquals(expected, actual);\n    }\n    @Test\n    public void balancePair_shouldReturnNegativeOne_whenRightStringIsNotFound() {\n        // Arrange\n        String input = \"abc(def)\";\n        String left = \"(\";\n        String right = \"]\";\n        int[] expected = {-1, -1};\n        // Act\n        int[] actual = StringUtil.balancePair(input, left, right);\n        // Assert\n        assertEquals(expected, actual);\n    }\n}"
  },
  {
    "original_path": "l0s_fernet-java8###l0s_fernet-java8/fernet-java8/src/test/java/com/macasaet/fernet/TokenTest###testGenerate",
    "generated_path": "TokenTest_testGenerate.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package com.macasaet.fernet;\nimport static com.macasaet.fernet.Constants.initializationVectorBytes;\nimport static java.util.stream.Collectors.toList;\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertThrows;\nimport static org.junit.Assert.assertTrue;\nimport static org.mutabilitydetector.unittesting.AllowedReason.allowingForSubclassing;\nimport static org.mutabilitydetector.unittesting.AllowedReason.assumingFields;\nimport static org.mutabilitydetector.unittesting.AllowedReason.provided;\nimport static org.mutabilitydetector.unittesting.MutabilityAssert.assertInstancesOf;\nimport static org.mutabilitydetector.unittesting.MutabilityMatchers.areImmutable;\nimport java.security.SecureRandom;\nimport java.time.Instant;\nimport java.time.format.DateTimeFormatter;\nimport java.util.List;\nimport java.util.stream.IntStream;\nimport javax.crypto.spec.IvParameterSpec;\nimport org.junit.Before;\nimport org.junit.Test;\n// original test path: l0s_fernet-java8###l0s_fernet-java8/fernet-java8/src/test/java/com/macasaet/fernet/TokenTest###testGenerate\nimport static org.junit.Assert.*;\nimport java.security.SecureRandom;\nimport javax.crypto.spec.IvParameterSpec;\nimport org.junit.Test;\npublic class TokenTest_testGenerate {\n    @Test\n    public void testGenerate() {\n        SecureRandom random = new SecureRandom();\n        byte[] payload = \"test payload\".getBytes();\n        Key key = new Key();\n        Token token = Token.generate(random, key, payload);\n        assertNotNull(token);\n        assertEquals(Token.supportedVersion, token.getVersion());\n        assertNotNull(token.getTimestamp());\n        assertNotNull(token.getInitializationVector());\n        assertNotNull(token.getCipherText());\n        assertNotNull(token.getHmac());\n        IvParameterSpec iv = token.getInitializationVector();\n        assertEquals(Token.initializationVectorBytes, iv.getIV().length);\n        byte[] cipherText = token.getCipherText();\n        assertEquals(0, cipherText.length % Token.cipherTextBlockSize);\n        byte[] hmac = token.getHmac();\n        assertEquals(Token.signatureBytes, hmac.length);\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest###testGetRawType",
    "generated_path": "TypeUtilsTest_testGetRawType.java",
    "Compile_result": 1,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3.reflect;\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertNull;\nimport static org.junit.Assert.assertTrue;\nimport java.io.Serializable;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.GenericArrayType;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.ParameterizedType;\nimport java.lang.reflect.Type;\nimport java.lang.reflect.TypeVariable;\nimport java.lang.reflect.WildcardType;\nimport java.net.URI;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.TreeSet;\nimport org.apache.commons.lang3.reflect.testbed.Foo;\nimport org.apache.commons.lang3.reflect.testbed.GenericParent;\nimport org.apache.commons.lang3.reflect.testbed.GenericTypeHolder;\nimport org.apache.commons.lang3.reflect.testbed.StringParameterizedChild;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest###testGetRawType\nimport static org.junit.Assert.*;\nimport java.lang.reflect.Type;\nimport java.util.List;\nimport org.junit.Test;\npublic class TypeUtilsTest_testGetRawType {\n    @Test\n    public void testGetRawType() {\n        // Test for Class type\n        Type type = String.class;\n        Type assigningType = null;\n        Class<?> expected = String.class;\n        Class<?> actual = TypeUtils.getRawType(type, assigningType);\n        assertEquals(expected, actual);\n        // Test for ParameterizedType type\n        type = new StringParameterizedChild().getClass().getGenericSuperclass();\n        assigningType = null;\n        expected = GenericParent.class;\n        actual = TypeUtils.getRawType(type, assigningType);\n        assertEquals(expected, actual);\n        // Test for TypeVariable type\n        type = ((TypeVariable<?>) Foo.class.getTypeParameters()[0]).getBounds()[0];\n        assigningType = Foo.class;\n        expected = String.class;\n        actual = TypeUtils.getRawType(type, assigningType);\n        assertEquals(expected, actual);\n        // Test for GenericArrayType type\n        type = new String[0].getClass().getGenericSuperclass();\n        assigningType = null;\n        expected = String[].class;\n        actual = TypeUtils.getRawType(type, assigningType);\n        assertEquals(expected, actual);\n        // Test for WildcardType type\n        type = ((TypeVariable<?>) GenericTypeHolder.class.getTypeParameters()[0]).getBounds()[0];\n        assigningType = null;\n        expected = null;\n        actual = TypeUtils.getRawType(type, assigningType);\n        assertEquals(expected, actual);\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest###testIsAssignable",
    "generated_path": "TypeUtilsTest_testIsAssignable.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3.reflect;\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertNull;\nimport static org.junit.Assert.assertTrue;\nimport java.io.Serializable;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.GenericArrayType;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.ParameterizedType;\nimport java.lang.reflect.Type;\nimport java.lang.reflect.TypeVariable;\nimport java.lang.reflect.WildcardType;\nimport java.net.URI;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.TreeSet;\nimport org.apache.commons.lang3.reflect.testbed.Foo;\nimport org.apache.commons.lang3.reflect.testbed.GenericParent;\nimport org.apache.commons.lang3.reflect.testbed.GenericTypeHolder;\nimport org.apache.commons.lang3.reflect.testbed.StringParameterizedChild;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest###testIsAssignable\nimport org.junit.Test;\nimport static org.junit.Assert.*;\npublic class TypeUtilsTest_testIsAssignable {\n    @Test\n    public void testIsAssignable() {\n        // Test null type\n        assertTrue(TypeUtils.isAssignable(null, Object.class));\n        assertFalse(TypeUtils.isAssignable(null, int.class));\n        // Test null toClass\n        assertFalse(TypeUtils.isAssignable(Object.class, null));\n        assertFalse(TypeUtils.isAssignable(int.class, null));\n        // Test equal types\n        assertTrue(TypeUtils.isAssignable(Object.class, Object.class));\n        assertTrue(TypeUtils.isAssignable(int.class, int.class));\n        // Test Class type\n        assertTrue(TypeUtils.isAssignable(String.class, CharSequence.class));\n        assertFalse(TypeUtils.isAssignable(CharSequence.class, String.class));\n        // Test ParameterizedType type\n        ParameterizedType parameterizedType = new StringParameterizedChild();\n        assertTrue(TypeUtils.isAssignable(parameterizedType, List.class));\n        assertFalse(TypeUtils.isAssignable(parameterizedType, Map.class));\n        // Test TypeVariable type\n        TypeVariable<Class<GenericTypeHolder>> typeVariable = GenericTypeHolder.class.getTypeParameters()[0];\n        assertTrue(TypeUtils.isAssignable(typeVariable, Serializable.class));\n        assertFalse(TypeUtils.isAssignable(typeVariable, URI.class));\n        // Test GenericArrayType type\n        GenericArrayType genericArrayType = (GenericArrayType) Foo.class.getField(\"genericArray\").getGenericType();\n        assertTrue(TypeUtils.isAssignable(genericArrayType, Object[].class));\n        assertFalse(TypeUtils.isAssignable(genericArrayType, int[].class));\n        // Test WildcardType type\n        WildcardType wildcardType = (WildcardType) GenericParent.class.getField(\"wildcard\").getGenericType();\n        assertFalse(TypeUtils.isAssignable(wildcardType, Object.class));\n        assertFalse(TypeUtils.isAssignable(wildcardType, Number.class));\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest###testParameterize",
    "generated_path": "TypeUtilsTest_testParameterize.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3.reflect;\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertNull;\nimport static org.junit.Assert.assertTrue;\nimport java.io.Serializable;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.GenericArrayType;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.ParameterizedType;\nimport java.lang.reflect.Type;\nimport java.lang.reflect.TypeVariable;\nimport java.lang.reflect.WildcardType;\nimport java.net.URI;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.TreeSet;\nimport org.apache.commons.lang3.reflect.testbed.Foo;\nimport org.apache.commons.lang3.reflect.testbed.GenericParent;\nimport org.apache.commons.lang3.reflect.testbed.GenericTypeHolder;\nimport org.apache.commons.lang3.reflect.testbed.StringParameterizedChild;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest###testParameterize\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert.assertNull;\nimport static org.junit.Assert.assertTrue;\nimport java.lang.reflect.ParameterizedType;\nimport java.lang.reflect.Type;\nimport java.util.HashMap;\nimport java.util.Map;\nimport org.junit.Test;\npublic class TypeUtilsTest_testParameterize {\n    @Test(expected = NullPointerException.class)\n    public void testParameterize_NullRawClass() {\n        Map<TypeVariable<?>, Type> typeArgMappings = new HashMap<>();\n        TypeUtils.parameterize(null, typeArgMappings);\n    }\n    @Test(expected = NullPointerException.class)\n    public void testParameterize_NullTypeArgMappings() {\n        Class<?> raw = String.class;\n        TypeUtils.parameterize(raw, null);\n    }\n    @Test\n    public void testParameterize() {\n        Class<?> raw = StringParameterizedChild.class;\n        Map<TypeVariable<?>, Type> typeArgMappings = new HashMap<>();\n        typeArgMappings.put(GenericTypeHolder.class.getTypeParameters()[0], Integer.class);\n        ParameterizedType parameterizedType = TypeUtils.parameterize(raw, typeArgMappings);\n        assertNotNull(parameterizedType);\n        assertEquals(raw, parameterizedType.getRawType());\n        Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n        assertEquals(1, actualTypeArguments.length);\n        assertEquals(Integer.class, actualTypeArguments[0]);\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest###testToLongString",
    "generated_path": "TypeUtilsTest_testToLongString.java",
    "Compile_result": 1,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3.reflect;\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertNull;\nimport static org.junit.Assert.assertTrue;\nimport java.io.Serializable;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.GenericArrayType;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.ParameterizedType;\nimport java.lang.reflect.Type;\nimport java.lang.reflect.TypeVariable;\nimport java.lang.reflect.WildcardType;\nimport java.net.URI;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.TreeSet;\nimport org.apache.commons.lang3.reflect.testbed.Foo;\nimport org.apache.commons.lang3.reflect.testbed.GenericParent;\nimport org.apache.commons.lang3.reflect.testbed.GenericTypeHolder;\nimport org.apache.commons.lang3.reflect.testbed.StringParameterizedChild;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest###testToLongString\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert.fail;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.TypeVariable;\nimport org.junit.Test;\npublic class TypeUtilsTest_testToLongString {\n    @Test\n    public void testToLongString() {\n        Method method = null;\n        try {\n            method = TypeUtils.class.getMethod(\"toLongString\", TypeVariable.class);\n        } catch (NoSuchMethodException e) {\n            fail(\"toLongString method not found\");\n        }\n        assertNotNull(method);\n        TypeVariable<?>[] typeVars = method.getTypeParameters();\n        assertEquals(1, typeVars.length);\n        TypeVariable<?> typeVar = typeVars[0];\n        String longString = TypeUtils.toLongString(typeVar);\n        assertNotNull(longString);\n        assertEquals(\"TypeUtils:TV\", longString);\n    }\n}"
  },
  {
    "original_path": "pvanassen_ns-api###pvanassen_ns-api/src/test/java/nl/pvanassen/ns/xml/XmlPresentTest###testChild",
    "generated_path": "XmlPresentTest_testChild.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package nl.pvanassen.ns.xml;\nimport org.junit.Before;\nimport org.junit.Test;\nimport java.util.List;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert.assertNull;\nimport static org.junit.Assert.assertTrue;\n// original test path: pvanassen_ns-api###pvanassen_ns-api/src/test/java/nl/pvanassen/ns/xml/XmlPresentTest###testChild\nimport org.junit.Before;\nimport org.junit.Test;\nimport java.util.List;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert.assertNull;\nimport static org.junit.Assert.assertTrue;\npublic class XmlPresentTest_testChild {\n    private XmlPresent xml;\n    @Before\n    public void setUp() {\n        String xmlString = \"<root><child1>value1</child1><child2>value2</child2></root>\";\n        InputStream stream = new ByteArrayInputStream(xmlString.getBytes());\n        xml = new XmlPresent(stream, \"root\");\n    }\n    @Test\n    public void testChild() {\n        Xml child = xml.child(\"child1\");\n        assertNotNull(child);\n        assertEquals(\"child1\", child.getName());\n        assertEquals(\"value1\", child.getContent());\n        child = xml.child(\"child2\");\n        assertNotNull(child);\n        assertEquals(\"child2\", child.getName());\n        assertEquals(\"value2\", child.getContent());\n        child = xml.child(\"child3\");\n        assertNotNull(child);\n        assertEquals(\"child3\", child.getName());\n        assertTrue(child instanceof XmlAbsent);\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ArrayUtilsTest###testToMap",
    "generated_path": "ArrayUtilsTest_testToMap.java",
    "Compile_result": 1,
    "Test_result": 1,
    "Gen_Test": "package org.apache.commons.lang3;\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert.assertNotSame;\nimport static org.junit.Assert.assertNull;\nimport static org.junit.Assert.assertSame;\nimport static org.junit.Assert.assertTrue;\nimport static org.junit.Assert.fail;\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.Modifier;\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.Date;\nimport java.util.Map;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ArrayUtilsTest###testToMap\nimport static org.junit.Assert.*;\nimport java.util.HashMap;\nimport java.util.Map;\nimport org.junit.Test;\npublic class ArrayUtilsTest_testToMap {\n    @Test\n    public void testToMap() {\n        // Test case 1: Test with null array\n        Object[] array = null;\n        Map<Object, Object> map = ArrayUtils.toMap(array);\n        assertNull(map);\n        // Test case 2: Test with empty array\n        array = new Object[0];\n        map = ArrayUtils.toMap(array);\n        assertNotNull(map);\n        assertTrue(map.isEmpty());\n        // Test case 3: Test with array of Map.Entry objects\n        Map.Entry<Object, Object> entry1 = new HashMap.SimpleEntry<>(\"key1\", \"value1\");\n        Map.Entry<Object, Object> entry2 = new HashMap.SimpleEntry<>(\"key2\", \"value2\");\n        array = new Object[] { entry1, entry2 };\n        map = ArrayUtils.toMap(array);\n        assertNotNull(map);\n        assertEquals(2, map.size());\n        assertEquals(\"value1\", map.get(\"key1\"));\n        assertEquals(\"value2\", map.get(\"key2\"));\n        // Test case 4: Test with array of key-value pairs\n        Object[] pair1 = new Object[] { \"key3\", \"value3\" };\n        Object[] pair2 = new Object[] { \"key4\", \"value4\" };\n        array = new Object[] { pair1, pair2 };\n        map = ArrayUtils.toMap(array);\n        assertNotNull(map);\n        assertEquals(2, map.size());\n        assertEquals(\"value3\", map.get(\"key3\"));\n        assertEquals(\"value4\", map.get(\"key4\"));\n        // Test case 5: Test with array of invalid objects\n        Object invalidObject = new Date();\n        array = new Object[] { entry1, invalidObject };\n        try {\n            map = ArrayUtils.toMap(array);\n            fail(\"Expected IllegalArgumentException to be thrown\");\n        } catch (IllegalArgumentException e) {\n            assertEquals(\"Array element 1, '\" + invalidObject + \"', is neither of type Map.Entry nor an Array\", e.getMessage());\n        }\n    }\n}"
  },
  {
    "original_path": "syphr42_prom###syphr42_prom/src/test/java/org/syphr/prom/ChangeStackTest###testSync",
    "generated_path": "ChangeStackTest_testSync.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package org.syphr.prom;\nimport junit.framework.Assert;\nimport org.junit.Before;\nimport org.junit.Test;\n// original test path: syphr42_prom###syphr42_prom/src/test/java/org/syphr/prom/ChangeStackTest###testSync\npublic class ChangeStackTest_testSync {\n    private ChangeStack<Integer> stack;\n    @Before\n    public void setUp() {\n        stack = new ChangeStack<>(1);\n    }\n    @Test\n    public void testSync() {\n        boolean result = false;\n        try {\n            result = stack.sync(2);\n        } catch (NullPointerException e) {\n            e.printStackTrace();\n        }\n        Assert.assertTrue(result);\n        Assert.assertEquals(2, stack.size());\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/CharSetTest###testGetInstance",
    "generated_path": "CharSetTest_testGetInstance.java",
    "Compile_result": 1,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertNull;\nimport static org.junit.Assert.assertSame;\nimport static org.junit.Assert.assertTrue;\nimport java.lang.reflect.Modifier;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/CharSetTest###testGetInstance\nimport org.junit.Test;\nimport static org.junit.Assert.*;\npublic class CharSetTest_testGetInstance {\n    @Test\n    public void testGetInstance() {\n        // Test null input\n        assertNull(CharSet.getInstance(null));\n        // Test input with one string\n        CharSet commonCharSet = CharSet.getInstance(\"abc\");\n        assertSame(commonCharSet, CharSet.getInstance(\"abc\"));\n        // Test input with multiple strings\n        CharSet charSet = CharSet.getInstance(\"abc\", \"def\");\n        assertFalse(charSet == commonCharSet);\n        assertTrue(charSet.toString().contains(\"abc\"));\n        assertTrue(charSet.toString().contains(\"def\"));\n    }\n}"
  },
  {
    "original_path": "waldheinz_fat32-lib###waldheinz_fat32-lib/src/test/java/de/waldheinz/fs/fat/ClusterChainTest###testSetSize",
    "generated_path": "ClusterChainTest_testSetSize.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package de.waldheinz.fs.fat;\nimport de.waldheinz.fs.util.RamDisk;\nimport java.io.IOException;\nimport java.nio.ByteBuffer;\nimport org.junit.Before;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\n// original test path: waldheinz_fat32-lib###waldheinz_fat32-lib/src/test/java/de/waldheinz/fs/fat/ClusterChainTest###testSetSize\npublic class ClusterChainTest_testSetSize {\n    private Fat fat;\n    private ClusterChain clusterChain;\n    @Before\n    public void setUp() throws Exception {\n        fat = new Fat(new RamDisk(1024 * 1024), FileSystemType.FAT32);\n        clusterChain = new ClusterChain(fat, false);\n    }\n    @Test\n    public void testSetSize() throws IOException {\n        long size = 1024;\n        long expectedClusterSize = 4096;\n        long expectedTotalSize = 4096;\n        long actualTotalSize = clusterChain.setSize(size);\n        assertEquals(expectedTotalSize, actualTotalSize);\n        assertEquals(expectedClusterSize, clusterChain.getClusterSize());\n    }\n}"
  },
  {
    "original_path": "udoprog_tiny-async-java###udoprog_tiny-async-java/tiny-async-core/src/test/java/eu/toolchain/concurrent/CollectHelperTest###testCheckFailed",
    "generated_path": "CollectHelperTest_testCheckFailed.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package eu.toolchain.concurrent;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert.assertNull;\nimport static org.mockito.Matchers.any;\nimport static org.mockito.Matchers.anyObject;\nimport static org.mockito.Mockito.doNothing;\nimport static org.mockito.Mockito.doReturn;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.spy;\nimport static org.mockito.Mockito.times;\nimport static org.mockito.Mockito.verify;\nimport com.google.common.collect.ImmutableList;\nimport java.util.Collection;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.function.Function;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.mockito.Mock;\nimport org.mockito.runners.MockitoJUnitRunner;\n// original test path: udoprog_tiny-async-java###udoprog_tiny-async-java/tiny-async-core/src/test/java/eu/toolchain/concurrent/CollectHelperTest###testCheckFailed\n@RunWith(MockitoJUnitRunner.class)\npublic class CollectHelperTest_testCheckFailed {\n    @Mock\n    private Stage<?> source1;\n    @Mock\n    private Stage<?> source2;\n    @Mock\n    private Completable<Object> target;\n    private CollectHelper<Object, Object> collectHelper;\n    @Before\n    public void setUp() {\n        List<Stage<?>> sources = ImmutableList.of(source1, source2);\n        Function<Collection<Object>, Object> collector = objects -> null;\n        collectHelper = new CollectHelper<>(2, collector, sources, target);\n    }\n    @Test\n    public void testCheckFailed() {\n        collectHelper.failed.set(false);\n        doNothing().when(source1).cancel();\n        doNothing().when(source2).cancel();\n        collectHelper.checkFailed();\n        verify(source1, times(1)).cancel();\n        verify(source2, times(1)).cancel();\n        assertNull(collectHelper.sources);\n        assertTrue(collectHelper.failed.get());\n    }\n    @Test\n    public void testCheckFailedAlreadyFailed() {\n        collectHelper.failed.set(true);\n        doNothing().when(source1).cancel();\n        doNothing().when(source2).cancel();\n        collectHelper.checkFailed();\n        verify(source1, times(0)).cancel();\n        verify(source2, times(0)).cancel();\n        assertNotNull(collectHelper.sources);\n        assertTrue(collectHelper.failed.get());\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/builder/CompareToBuilderTest###testAppendSuper",
    "generated_path": "CompareToBuilderTest_testAppendSuper.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3.builder;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertTrue;\nimport java.math.BigInteger;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/builder/CompareToBuilderTest###testAppendSuper\nimport org.junit.Test;\nimport static org.junit.Assert.*;\npublic class CompareToBuilderTest_testAppendSuper {\n    @Test\n    public void testAppendSuper() {\n        CompareToBuilder builder = new CompareToBuilder();\n        int superCompareTo = 5;\n        builder.appendSuper(superCompareTo);\n        assertEquals(superCompareTo, builder.comparison);\n    }\n}"
  },
  {
    "original_path": "udoprog_tiny-async-java###udoprog_tiny-async-java/tiny-async-core/src/test/java/eu/toolchain/concurrent/ConcurrentCompletableTest###testCancel",
    "generated_path": "ConcurrentCompletableTest_testCancel.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package eu.toolchain.concurrent;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertTrue;\nimport static org.mockito.Matchers.any;\nimport static org.mockito.Matchers.eq;\nimport static org.mockito.Mockito.doNothing;\nimport static org.mockito.Mockito.doReturn;\nimport static org.mockito.Mockito.doThrow;\nimport static org.mockito.Mockito.inOrder;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.times;\nimport static org.mockito.Mockito.verify;\nimport java.util.function.Consumer;\nimport java.util.function.Function;\nimport java.util.function.Supplier;\nimport org.junit.Before;\nimport org.junit.Rule;\nimport org.junit.Test;\nimport org.junit.rules.ExpectedException;\nimport org.junit.runner.RunWith;\nimport org.mockito.ArgumentCaptor;\nimport org.mockito.InOrder;\nimport org.mockito.Mock;\nimport org.mockito.Mockito;\nimport org.mockito.runners.MockitoJUnitRunner;\n// original test path: udoprog_tiny-async-java###udoprog_tiny-async-java/tiny-async-core/src/test/java/eu/toolchain/concurrent/ConcurrentCompletableTest###testCancel\n@RunWith(MockitoJUnitRunner.class)\npublic class ConcurrentCompletableTest_testCancel {\n    @Mock\n    private Caller caller;\n    @Rule\n    public ExpectedException exceptionRule = ExpectedException.none();\n    private ConcurrentCompletable completable;\n    @Before\n    public void setUp() {\n        completable = new ConcurrentCompletable(caller);\n    }\n    @Test\n    public void cancel_shouldCancelCompletable() {\n        // Arrange\n        completable.state.set(ConcurrentCompletable.PENDING);\n        // Act\n        boolean result = completable.cancel();\n        // Assert\n        assertTrue(result);\n        assertEquals(ConcurrentCompletable.CANCELLED, completable.state.get());\n        assertEquals(ConcurrentCompletable.CANCEL, completable.result);\n        verify(caller).postComplete();\n    }\n    @Test\n    public void cancel_shouldNotCancelCompletableIfAlreadyCancelled() {\n        // Arrange\n        completable.state.set(ConcurrentCompletable.CANCELLED);\n        // Act\n        boolean result = completable.cancel();\n        // Assert\n        assertFalse(result);\n        assertEquals(ConcurrentCompletable.CANCELLED, completable.state.get());\n        assertNull(completable.result);\n        verify(caller, never()).postComplete();\n    }\n    @Test\n    public void cancel_shouldNotCancelCompletableIfAlreadyCompleted() {\n        // Arrange\n        completable.state.set(ConcurrentCompletable.PENDING);\n        completable.result = \"result\";\n        completable.postComplete();\n        // Act\n        boolean result = completable.cancel();\n        // Assert\n        assertFalse(result);\n        assertEquals(ConcurrentCompletable.COMPLETED, completable.state.get());\n        assertEquals(\"result\", completable.result);\n        verify(caller, never()).postComplete();\n    }\n    @Test\n    public void cancel_shouldThrowExceptionIfInterrupted() {\n        // Arrange\n        completable.state.set(ConcurrentCompletable.PENDING);\n        doThrow(new InterruptedException()).when(caller).postComplete();\n        // Assert\n        exceptionRule.expect(InterruptedException.class);\n        // Act\n        completable.cancel();\n    }\n}"
  },
  {
    "original_path": "udoprog_tiny-async-java###udoprog_tiny-async-java/tiny-async-core/src/test/java/eu/toolchain/concurrent/ConcurrentCompletableTest###testComplete",
    "generated_path": "ConcurrentCompletableTest_testComplete.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package eu.toolchain.concurrent;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertTrue;\nimport static org.mockito.Matchers.any;\nimport static org.mockito.Matchers.eq;\nimport static org.mockito.Mockito.doNothing;\nimport static org.mockito.Mockito.doReturn;\nimport static org.mockito.Mockito.doThrow;\nimport static org.mockito.Mockito.inOrder;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.times;\nimport static org.mockito.Mockito.verify;\nimport java.util.function.Consumer;\nimport java.util.function.Function;\nimport java.util.function.Supplier;\nimport org.junit.Before;\nimport org.junit.Rule;\nimport org.junit.Test;\nimport org.junit.rules.ExpectedException;\nimport org.junit.runner.RunWith;\nimport org.mockito.ArgumentCaptor;\nimport org.mockito.InOrder;\nimport org.mockito.Mock;\nimport org.mockito.Mockito;\nimport org.mockito.runners.MockitoJUnitRunner;\n// original test path: udoprog_tiny-async-java###udoprog_tiny-async-java/tiny-async-core/src/test/java/eu/toolchain/concurrent/ConcurrentCompletableTest###testComplete\n@RunWith(MockitoJUnitRunner.class)\npublic class ConcurrentCompletableTest_testComplete {\n    @Mock\n    private Caller caller;\n    @Rule\n    public ExpectedException exceptionRule = ExpectedException.none();\n    private ConcurrentCompletable<Object> completable;\n    @Before\n    public void setUp() {\n        completable = new ConcurrentCompletable<>(caller);\n    }\n    @Test\n    public void testComplete_SuccessfulCompletion() {\n        // Arrange\n        Object expectedResult = new Object();\n        // Act\n        boolean result = completable.complete(expectedResult);\n        // Assert\n        assertTrue(result);\n        assertEquals(expectedResult, completable.getResult());\n    }\n    @Test\n    public void testComplete_AlreadyCompleted() {\n        // Arrange\n        Object expectedResult = new Object();\n        completable.complete(expectedResult);\n        // Act\n        boolean result = completable.complete(new Object());\n        // Assert\n        assertFalse(result);\n        assertEquals(expectedResult, completable.getResult());\n    }\n    @Test\n    public void testComplete_NullResult() {\n        // Arrange\n        // Act\n        boolean result = completable.complete(null);\n        // Assert\n        assertTrue(result);\n        assertEquals(ConcurrentCompletable.NULL, completable.getResult());\n    }\n    @Test\n    public void testComplete_CallbacksExecuted() {\n        // Arrange\n        Runnable callback1 = mock(Runnable.class);\n        Runnable callback2 = mock(Runnable.class);\n        completable.onComplete(callback1);\n        completable.onComplete(callback2);\n        // Act\n        completable.complete(new Object());\n        // Assert\n        InOrder inOrder = inOrder(callback1, callback2);\n        inOrder.verify(callback1, times(1)).run();\n        inOrder.verify(callback2, times(1)).run();\n    }\n    @Test\n    public void testComplete_ExceptionThrownInCallback() {\n        // Arrange\n        Runnable callback1 = mock(Runnable.class);\n        Runnable callback2 = mock(Runnable.class);\n        doThrow(new RuntimeException()).when(callback1).run();\n        completable.onComplete(callback1);\n        completable.onComplete(callback2);\n        // Act\n        completable.complete(new Object());\n        // Assert\n        InOrder inOrder = inOrder(callback1, callback2);\n        inOrder.verify(callback1, times(1)).run();\n        inOrder.verify(callback2, times(1)).run();\n    }\n    @Test\n    public void testComplete_CallbacksNotExecutedIfAlreadyCompleted() {\n        // Arrange\n        Runnable callback1 = mock(Runnable.class);\n        Runnable callback2 = mock(Runnable.class);\n        completable.onComplete(callback1);\n        completable.complete(new Object());\n        // Act\n        completable.onComplete(callback2);\n        // Assert\n        verify(callback1, times(1)).run();\n        verify(callback2, times(0)).run();\n    }\n}"
  },
  {
    "original_path": "udoprog_tiny-async-java###udoprog_tiny-async-java/tiny-async-core/src/test/java/eu/toolchain/concurrent/ConcurrentCompletableTest###testWhenDone",
    "generated_path": "ConcurrentCompletableTest_testWhenDone.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package eu.toolchain.concurrent;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertTrue;\nimport static org.mockito.Matchers.any;\nimport static org.mockito.Matchers.eq;\nimport static org.mockito.Mockito.doNothing;\nimport static org.mockito.Mockito.doReturn;\nimport static org.mockito.Mockito.doThrow;\nimport static org.mockito.Mockito.inOrder;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.times;\nimport static org.mockito.Mockito.verify;\nimport java.util.function.Consumer;\nimport java.util.function.Function;\nimport java.util.function.Supplier;\nimport org.junit.Before;\nimport org.junit.Rule;\nimport org.junit.Test;\nimport org.junit.rules.ExpectedException;\nimport org.junit.runner.RunWith;\nimport org.mockito.ArgumentCaptor;\nimport org.mockito.InOrder;\nimport org.mockito.Mock;\nimport org.mockito.Mockito;\nimport org.mockito.runners.MockitoJUnitRunner;\n// original test path: udoprog_tiny-async-java###udoprog_tiny-async-java/tiny-async-core/src/test/java/eu/toolchain/concurrent/ConcurrentCompletableTest###testWhenDone\n@RunWith(MockitoJUnitRunner.class)\npublic class ConcurrentCompletableTest_testWhenDone {\n    @Mock\n    private Caller caller;\n    private ConcurrentCompletable<Object> completable;\n    @Before\n    public void setUp() {\n        completable = new ConcurrentCompletable<>(caller);\n    }\n    @Test\n    public void whenDone_addsCallbackToBeExecutedOnCompletion() {\n        Runnable callback = mock(Runnable.class);\n        Stage<Object> stage = completable.whenDone(callback);\n        assertTrue(completable.contains(callback));\n        assertEquals(completable, stage);\n        verifyZeroInteractions(caller);\n    }\n    @Test\n    public void whenDone_executesCallbackImmediatelyIfCannotBeAdded() {\n        Runnable callback = mock(Runnable.class);\n        doReturn(false).when(caller).addCallback(any(Runnable.class), eq(completable));\n        Stage<Object> stage = completable.whenDone(callback);\n        assertFalse(completable.contains(callback));\n        assertEquals(completable, stage);\n        verify(caller, times(1)).addCallback(any(Runnable.class), eq(completable));\n        verify(caller, times(1)).execute(callback);\n    }\n    @Test\n    public void whenDone_returnsStageObjectIfCallbackAdded() {\n        Runnable callback = mock(Runnable.class);\n        doReturn(true).when(caller).addCallback(any(Runnable.class), eq(completable));\n        Stage<Object> stage = completable.whenDone(callback);\n        assertTrue(completable.contains(callback));\n        assertEquals(completable, stage);\n        verify(caller, times(1)).addCallback(any(Runnable.class), eq(completable));\n        verifyZeroInteractions(callback);\n    }\n}"
  },
  {
    "original_path": "udoprog_tiny-async-java###udoprog_tiny-async-java/tiny-async-core/src/test/java/eu/toolchain/concurrent/ConcurrentManagedTest###testBorrow",
    "generated_path": "ConcurrentManagedTest_testBorrow.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package eu.toolchain.concurrent;\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert.assertNull;\nimport static org.junit.Assert.assertTrue;\nimport static org.junit.Assert.fail;\nimport static org.mockito.Matchers.any;\nimport static org.mockito.Mockito.doAnswer;\nimport static org.mockito.Mockito.doNothing;\nimport static org.mockito.Mockito.doReturn;\nimport static org.mockito.Mockito.doThrow;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.never;\nimport static org.mockito.Mockito.spy;\nimport static org.mockito.Mockito.times;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.when;\nimport com.google.common.collect.ImmutableList;\nimport java.util.concurrent.atomic.AtomicReference;\nimport java.util.function.Function;\nimport java.util.function.Supplier;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.mockito.Mock;\nimport org.mockito.invocation.InvocationOnMock;\nimport org.mockito.runners.MockitoJUnitRunner;\nimport org.mockito.stubbing.Answer;\n// original test path: udoprog_tiny-async-java###udoprog_tiny-async-java/tiny-async-core/src/test/java/eu/toolchain/concurrent/ConcurrentManagedTest###testBorrow\n@RunWith(MockitoJUnitRunner.class)\npublic class ConcurrentManagedTest_testBorrow {\n    @Mock\n    private Caller caller;\n    @Mock\n    private ManagedOptions options;\n    @Mock\n    private Supplier<? extends Stage<String>> setup;\n    @Mock\n    private Completable<Void> startFuture;\n    @Mock\n    private Completable<Void> zeroLeaseFuture;\n    @Mock\n    private Completable<String> stopReferenceFuture;\n    @Mock\n    private Stage<Void> stopFuture;\n    private ConcurrentManaged<String> concurrentManaged;\n    @Before\n    public void setUp() {\n        concurrentManaged = new ConcurrentManaged<>(caller, options, setup, startFuture, zeroLeaseFuture, stopReferenceFuture, stopFuture);\n    }\n    @Test\n    public void testBorrowWithNonNullReference() {\n        String expectedValue = \"testValue\";\n        AtomicReference<String> reference = new AtomicReference<>(expectedValue);\n        ValidBorrowed expectedBorrowed = new ValidBorrowed(expectedValue, Thread.currentThread().getStackTrace());\n        concurrentManaged.reference.set(reference.get());\n        Borrowed<String> actualBorrowed = concurrentManaged.borrow();\n        assertEquals(expectedBorrowed, actualBorrowed);\n    }\n    @Test\n    public void testBorrowWithNullReference() {\n        AtomicReference<String> reference = new AtomicReference<>(null);\n        concurrentManaged.reference.set(reference.get());\n        Borrowed<String> actualBorrowed = concurrentManaged.borrow();\n        assertTrue(actualBorrowed instanceof InvalidBorrowed);\n    }\n}"
  },
  {
    "original_path": "udoprog_tiny-async-java###udoprog_tiny-async-java/tiny-async-core/src/test/java/eu/toolchain/concurrent/ConcurrentManagedTest###testDoto",
    "generated_path": "ConcurrentManagedTest_testDoto.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package eu.toolchain.concurrent;\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert.assertNull;\nimport static org.junit.Assert.assertTrue;\nimport static org.junit.Assert.fail;\nimport static org.mockito.Matchers.any;\nimport static org.mockito.Mockito.doAnswer;\nimport static org.mockito.Mockito.doNothing;\nimport static org.mockito.Mockito.doReturn;\nimport static org.mockito.Mockito.doThrow;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.never;\nimport static org.mockito.Mockito.spy;\nimport static org.mockito.Mockito.times;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.when;\nimport com.google.common.collect.ImmutableList;\nimport java.util.concurrent.atomic.AtomicReference;\nimport java.util.function.Function;\nimport java.util.function.Supplier;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.mockito.Mock;\nimport org.mockito.invocation.InvocationOnMock;\nimport org.mockito.runners.MockitoJUnitRunner;\nimport org.mockito.stubbing.Answer;\n// original test path: udoprog_tiny-async-java###udoprog_tiny-async-java/tiny-async-core/src/test/java/eu/toolchain/concurrent/ConcurrentManagedTest###testDoto\n@RunWith(MockitoJUnitRunner.class)\npublic class ConcurrentManagedTest_testDoto {\n    @Mock\n    private Caller caller;\n    @Mock\n    private ManagedOptions options;\n    @Mock\n    private Supplier<Stage<String>> setup;\n    @Mock\n    private Completable<Void> startFuture;\n    @Mock\n    private Completable<Void> zeroLeaseFuture;\n    @Mock\n    private Completable<String> stopReferenceFuture;\n    @Mock\n    private Stage<Void> stopFuture;\n    private ConcurrentManaged<String> concurrentManaged;\n    @Before\n    public void setUp() {\n        concurrentManaged = new ConcurrentManaged<>(caller, options, setup, startFuture, zeroLeaseFuture, stopReferenceFuture, stopFuture);\n    }\n    @Test\n    public void testDotoValidResource() {\n        // Arrange\n        Borrowed<String> borrowed = mock(Borrowed.class);\n        when(borrowed.isValid()).thenReturn(true);\n        String expected = \"Hello World\";\n        when(borrowed.get()).thenReturn(expected);\n        Function<String, Stage<Integer>> function = s -> new ImmediateResult<>(caller, s.length());\n        // Act\n        Stage<Integer> stage = concurrentManaged.doto(function).whenDone(borrowed::release);\n        // Assert\n        assertNotNull(stage);\n        assertTrue(stage instanceof ImmediateResult);\n        assertEquals(expected.length(), ((ImmediateResult<Integer>) stage).getResult().intValue());\n        verify(borrowed, times(1)).isValid();\n        verify(borrowed, times(1)).get();\n        verify(borrowed, times(1)).release();\n    }\n    @Test\n    public void testDotoInvalidResource() {\n        // Arrange\n        Borrowed<String> borrowed = mock(Borrowed.class);\n        when(borrowed.isValid()).thenReturn(false);\n        // Act\n        Stage<Integer> stage = concurrentManaged.doto(s -> new ImmediateResult<>(caller, s.length())).whenDone(borrowed::release);\n        // Assert\n        assertNotNull(stage);\n        assertTrue(stage instanceof ImmediateCancelled);\n        verify(borrowed, times(1)).isValid();\n        verify(borrowed, never()).get();\n        verify(borrowed, never()).release();\n    }\n    @Test\n    public void testDotoFunctionThrowsException() {\n        // Arrange\n        Borrowed<String> borrowed = mock(Borrowed.class);\n        when(borrowed.isValid()).thenReturn(true);\n        String expected = \"Hello World\";\n        when(borrowed.get()).thenReturn(expected);\n        Function<String, Stage<Integer>> function = s -> {\n            throw new RuntimeException(\"Function threw exception\");\n        };\n        // Act\n        Stage<Integer> stage = concurrentManaged.doto(function).whenDone(borrowed::release);\n        // Assert\n        assertNotNull(stage);\n        assertTrue(stage instanceof ImmediateFailed);\n        verify(borrowed, times(1)).isValid();\n        verify(borrowed, times(1)).get();\n        verify(borrowed, times(1)).release();\n    }\n}"
  },
  {
    "original_path": "udoprog_tiny-async-java###udoprog_tiny-async-java/tiny-async-core/src/test/java/eu/toolchain/concurrent/ConcurrentManagedTest###testStop",
    "generated_path": "ConcurrentManagedTest_testStop.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package eu.toolchain.concurrent;\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert.assertNull;\nimport static org.junit.Assert.assertTrue;\nimport static org.junit.Assert.fail;\nimport static org.mockito.Matchers.any;\nimport static org.mockito.Mockito.doAnswer;\nimport static org.mockito.Mockito.doNothing;\nimport static org.mockito.Mockito.doReturn;\nimport static org.mockito.Mockito.doThrow;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.never;\nimport static org.mockito.Mockito.spy;\nimport static org.mockito.Mockito.times;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.when;\nimport com.google.common.collect.ImmutableList;\nimport java.util.concurrent.atomic.AtomicReference;\nimport java.util.function.Function;\nimport java.util.function.Supplier;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.mockito.Mock;\nimport org.mockito.invocation.InvocationOnMock;\nimport org.mockito.runners.MockitoJUnitRunner;\nimport org.mockito.stubbing.Answer;\n// original test path: udoprog_tiny-async-java###udoprog_tiny-async-java/tiny-async-core/src/test/java/eu/toolchain/concurrent/ConcurrentManagedTest###testStop\n@RunWith(MockitoJUnitRunner.class)\npublic class ConcurrentManagedTest_testStop {\n    @Mock\n    private Caller caller;\n    @Mock\n    private ManagedOptions options;\n    @Mock\n    private Supplier<? extends Stage<String>> setup;\n    @Mock\n    private Completable<Void> startFuture;\n    @Mock\n    private Completable<Void> zeroLeaseFuture;\n    @Mock\n    private Completable<String> stopReferenceFuture;\n    @Mock\n    private Stage<Void> stopFuture;\n    private ConcurrentManaged<String> concurrentManaged;\n    @Before\n    public void setUp() {\n        concurrentManaged = new ConcurrentManaged<>(caller, options, setup, startFuture, zeroLeaseFuture, stopReferenceFuture, stopFuture);\n    }\n    @Test\n    public void stop_shouldStopExecutionOfConcurrentManaged() {\n        // Arrange\n        AtomicReference<ManagedState> state = new AtomicReference<>(ManagedState.STARTED);\n        AtomicReference<String> reference = new AtomicReference<>(\"test\");\n        concurrentManaged.state = state;\n        concurrentManaged.reference = reference;\n        // Act\n        Stage<Void> result = concurrentManaged.stop();\n        // Assert\n        assertEquals(ManagedState.STOPPED, state.get());\n        assertNull(reference.get());\n        verify(concurrentManaged).release();\n        assertEquals(stopFuture, result);\n    }\n    @Test\n    public void stop_shouldNotStopExecutionOfConcurrentManagedIfNotStarted() {\n        // Arrange\n        AtomicReference<ManagedState> state = new AtomicReference<>(ManagedState.INITIALIZED);\n        AtomicReference<String> reference = new AtomicReference<>(\"test\");\n        concurrentManaged.state = state;\n        concurrentManaged.reference = reference;\n        // Act\n        Stage<Void> result = concurrentManaged.stop();\n        // Assert\n        assertEquals(ManagedState.INITIALIZED, state.get());\n        assertEquals(\"test\", reference.get());\n        verify(concurrentManaged, never()).release();\n        assertEquals(stopFuture, result);\n    }\n}"
  },
  {
    "original_path": "udoprog_tiny-async-java###udoprog_tiny-async-java/tiny-async-core/src/test/java/eu/toolchain/concurrent/ConcurrentManagedTest###testToStringTracing",
    "generated_path": "ConcurrentManagedTest_testToStringTracing.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package eu.toolchain.concurrent;\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert.assertNull;\nimport static org.junit.Assert.assertTrue;\nimport static org.junit.Assert.fail;\nimport static org.mockito.Matchers.any;\nimport static org.mockito.Mockito.doAnswer;\nimport static org.mockito.Mockito.doNothing;\nimport static org.mockito.Mockito.doReturn;\nimport static org.mockito.Mockito.doThrow;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.never;\nimport static org.mockito.Mockito.spy;\nimport static org.mockito.Mockito.times;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.when;\nimport com.google.common.collect.ImmutableList;\nimport java.util.concurrent.atomic.AtomicReference;\nimport java.util.function.Function;\nimport java.util.function.Supplier;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.mockito.Mock;\nimport org.mockito.invocation.InvocationOnMock;\nimport org.mockito.runners.MockitoJUnitRunner;\nimport org.mockito.stubbing.Answer;\n// original test path: udoprog_tiny-async-java###udoprog_tiny-async-java/tiny-async-core/src/test/java/eu/toolchain/concurrent/ConcurrentManagedTest###testToStringTracing\n@RunWith(MockitoJUnitRunner.class)\npublic class ConcurrentManagedTest_testToStringTracing {\n    @Mock\n    private ValidBorrowed borrowed1;\n    @Mock\n    private ValidBorrowed borrowed2;\n    @Mock\n    private ValidBorrowed borrowed3;\n    private ConcurrentManaged<String> concurrentManaged;\n    @Before\n    public void setUp() {\n        concurrentManaged = new ConcurrentManaged<>(null, new ManagedOptions(), () -> null, null, null, null, null);\n    }\n    @Test\n    public void testToStringTracing() {\n        List<ValidBorrowed> traces = ImmutableList.of(borrowed1, borrowed2, borrowed3);\n        String reference = \"testReference\";\n        String expectedString = \"Managed(INITIALIZED, testReference:\\n\" +\n                borrowed1.toString() +\n                borrowed2.toString() +\n                borrowed3.toString() +\n                \")\";\n        String actualString = concurrentManaged.toStringTracing(reference, traces);\n        assertEquals(expectedString, actualString);\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testIntArrayToLong",
    "generated_path": "ConversionTest_testIntArrayToLong.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3;\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.fail;\nimport java.util.UUID;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testIntArrayToLong\nimport org.junit.Test;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.fail;\npublic class ConversionTest_testIntArrayToLong {\n    @Test\n    public void testIntArrayToLong() {\n        int[] src = {1, 2, 3, 4};\n        int srcPos = 0;\n        long dstInit = 0;\n        int dstPos = 0;\n        int nInts = 4;\n        long expectedOutput = 0x00000001000000020000000300000004L;\n        long actualOutput = Conversion.intArrayToLong(src, srcPos, dstInit, dstPos, nInts);\n        assertEquals(expectedOutput, actualOutput);\n        // Test for empty source array and zero nInts\n        src = new int[0];\n        srcPos = 0;\n        dstInit = 0;\n        dstPos = 0;\n        nInts = 0;\n        expectedOutput = 0;\n        actualOutput = Conversion.intArrayToLong(src, srcPos, dstInit, dstPos, nInts);\n        assertEquals(expectedOutput, actualOutput);\n        // Test for nInts exceeding maximum bits in long value\n        src = new int[2];\n        srcPos = 0;\n        dstInit = 0;\n        dstPos = 0;\n        nInts = 33;\n        try {\n            actualOutput = Conversion.intArrayToLong(src, srcPos, dstInit, dstPos, nInts);\n            fail(\"Expected IllegalArgumentException was not thrown\");\n        } catch (IllegalArgumentException e) {\n            assertEquals(\"(nInts-1)*32+dstPos is greater or equal to than 64\", e.getMessage());\n        }\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testIntToByteArray",
    "generated_path": "ConversionTest_testIntToByteArray.java",
    "Compile_result": 1,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3;\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.fail;\nimport java.util.UUID;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testIntToByteArray\nimport org.junit.Test;\nimport static org.junit.Assert.*;\npublic class ConversionTest_testIntToByteArray {\n    @Test\n    public void testIntToByteArray() {\n        // Test case 1: Convert integer value 10 to byte array of length 2\n        int src = 10;\n        int srcPos = 0;\n        byte[] dst = new byte[2];\n        int dstPos = 0;\n        int nBytes = 2;\n        byte[] expected = {0, 10};\n        byte[] actual = Conversion.intToByteArray(src, srcPos, dst, dstPos, nBytes);\n        assertArrayEquals(expected, actual);\n        // Test case 2: Convert integer value 255 to byte array of length 1\n        src = 255;\n        srcPos = 0;\n        dst = new byte[1];\n        dstPos = 0;\n        nBytes = 1;\n        expected = new byte[]{-1};\n        actual = Conversion.intToByteArray(src, srcPos, dst, dstPos, nBytes);\n        assertArrayEquals(expected, actual);\n        // Test case 3: Convert integer value 1000 to byte array of length 4\n        src = 1000;\n        srcPos = 0;\n        dst = new byte[4];\n        dstPos = 0;\n        nBytes = 4;\n        expected = new byte[]{0, 0, 3, -24};\n        actual = Conversion.intToByteArray(src, srcPos, dst, dstPos, nBytes);\n        assertArrayEquals(expected, actual);\n        // Test case 4: Convert integer value 1000 to byte array of length 2 starting from position 1\n        src = 1000;\n        srcPos = 0;\n        dst = new byte[2];\n        dstPos = 1;\n        nBytes = 2;\n        expected = new byte[]{0, 3};\n        actual = Conversion.intToByteArray(src, srcPos, dst, dstPos, nBytes);\n        assertArrayEquals(expected, actual);\n        // Test case 5: Convert integer value 1000 to byte array of length 3 (should throw IllegalArgumentException)\n        src = 1000;\n        srcPos = 0;\n        dst = new byte[3];\n        dstPos = 0;\n        nBytes = 3;\n        try {\n            Conversion.intToByteArray(src, srcPos, dst, dstPos, nBytes);\n            fail(\"Expected IllegalArgumentException was not thrown\");\n        } catch (IllegalArgumentException e) {\n            assertEquals(\"(nBytes-1)*8+srcPos is greater or equal to than 32\", e.getMessage());\n        }\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testIntToShortArray",
    "generated_path": "ConversionTest_testIntToShortArray.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3;\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.fail;\nimport java.util.UUID;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testIntToShortArray\nimport org.junit.Test;\nimport static org.junit.Assert.*;\npublic class ConversionTest_testIntToShortArray {\n    @Test\n    public void testIntToShortArray() {\n        int src = 0b10101010101010101010101010101010; // 0xAAAAAAAA\n        int srcPos = 0;\n        short[] dst = new short[4];\n        int dstPos = 0;\n        int nShorts = 4;\n        short[] expected = {0b1010101010101010, 0b1010101010101010, 0b1010101010101010, 0b1010101010101010};\n        Conversion.intToShortArray(src, srcPos, dst, dstPos, nShorts);\n        assertArrayEquals(expected, dst);\n        src = 0b10101010101010101010101010101010; // 0xAAAAAAAA\n        srcPos = 16;\n        dst = new short[2];\n        dstPos = 0;\n        nShorts = 2;\n        expected = new short[]{0b1010101010101010, 0b1010101010101010};\n        Conversion.intToShortArray(src, srcPos, dst, dstPos, nShorts);\n        assertArrayEquals(expected, dst);\n        src = 0b10101010101010101010101010101010; // 0xAAAAAAAA\n        srcPos = 0;\n        dst = new short[2];\n        dstPos = 1;\n        nShorts = 1;\n        expected = new short[]{0, 0b1010101010101010};\n        Conversion.intToShortArray(src, srcPos, dst, dstPos, nShorts);\n        assertArrayEquals(expected, dst);\n        src = 0b10101010101010101010101010101010; // 0xAAAAAAAA\n        srcPos = 0;\n        dst = new short[2];\n        dstPos = 0;\n        nShorts = 2;\n        try {\n            Conversion.intToShortArray(src, srcPos, dst, dstPos, nShorts);\n            fail(\"IllegalArgumentException expected but not thrown\");\n        } catch (IllegalArgumentException e) {\n            assertEquals(\"(nShorts-1)*16+srcPos is greater or equal to than 32\", e.getMessage());\n        }\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testLongToByteArray",
    "generated_path": "ConversionTest_testLongToByteArray.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3;\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.fail;\nimport java.util.UUID;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testLongToByteArray\nimport org.junit.Test;\nimport static org.junit.Assert.*;\npublic class ConversionTest_testLongToByteArray {\n    @Test\n    public void testLongToByteArray() {\n        long src = 123456789L;\n        int srcPos = 0;\n        byte[] dst = new byte[4];\n        int dstPos = 0;\n        int nBytes = 4;\n        byte[] expected = {0x69, 0x96, 0x02, 0x1D};\n        byte[] result = Conversion.longToByteArray(src, srcPos, dst, dstPos, nBytes);\n        assertArrayEquals(expected, result);\n    }\n    @Test\n    public void testLongToByteArrayWithInvalidNBytes() {\n        long src = 123456789L;\n        int srcPos = 0;\n        byte[] dst = new byte[4];\n        int dstPos = 0;\n        int nBytes = 5;\n        try {\n            Conversion.longToByteArray(src, srcPos, dst, dstPos, nBytes);\n            fail(\"Expected IllegalArgumentException was not thrown\");\n        } catch (IllegalArgumentException e) {\n            assertEquals(\"(nBytes-1)*8+srcPos is greater or equal to than 64\", e.getMessage());\n        }\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testLongToShortArray",
    "generated_path": "ConversionTest_testLongToShortArray.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3;\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.fail;\nimport java.util.UUID;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testLongToShortArray\nimport org.junit.Test;\nimport static org.junit.Assert.*;\npublic class ConversionTest_testLongToShortArray {\n    @Test\n    public void testLongToShortArray() {\n        long src = 0x123456789abcdef0L;\n        int srcPos = 16;\n        short[] dst = new short[4];\n        int dstPos = 1;\n        int nShorts = 3;\n        Conversion.longToShortArray(src, srcPos, dst, dstPos, nShorts);\n        short[] expected = {0x0000, 0xcdef, 0x89ab, 0x4567};\n        assertArrayEquals(expected, dst);\n    }\n    @Test\n    public void testLongToShortArrayWithZeroNShorts() {\n        long src = 0x123456789abcdef0L;\n        int srcPos = 16;\n        short[] dst = new short[4];\n        int dstPos = 1;\n        int nShorts = 0;\n        short[] result = Conversion.longToShortArray(src, srcPos, dst, dstPos, nShorts);\n        assertSame(dst, result);\n    }\n    @Test(expected = IllegalArgumentException.class)\n    public void testLongToShortArrayWithInvalidSrcPos() {\n        long src = 0x123456789abcdef0L;\n        int srcPos = 48;\n        short[] dst = new short[4];\n        int dstPos = 1;\n        int nShorts = 3;\n        Conversion.longToShortArray(src, srcPos, dst, dstPos, nShorts);\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testShortToByteArray",
    "generated_path": "ConversionTest_testShortToByteArray.java",
    "Compile_result": 1,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3;\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.fail;\nimport java.util.UUID;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testShortToByteArray\nimport org.junit.Test;\nimport static org.junit.Assert.*;\npublic class ConversionTest_testShortToByteArray {\n    @Test\n    public void testShortToByteArray() {\n        short src = 1234;\n        int srcPos = 0;\n        byte[] dst = new byte[4];\n        int dstPos = 0;\n        int nBytes = 2;\n        byte[] expected = {0x0D, 0x02, 0x00, 0x00};\n        byte[] result = Conversion.shortToByteArray(src, srcPos, dst, dstPos, nBytes);\n        assertArrayEquals(expected, result);\n        src = -1234;\n        srcPos = 0;\n        dst = new byte[4];\n        dstPos = 2;\n        nBytes = 2;\n        expected = new byte[]{0x00, 0x00, (byte) 0xF2, (byte) 0xFE};\n        result = Conversion.shortToByteArray(src, srcPos, dst, dstPos, nBytes);\n        assertArrayEquals(expected, result);\n        src = 1234;\n        srcPos = 8;\n        dst = new byte[4];\n        dstPos = 1;\n        nBytes = 2;\n        try {\n            Conversion.shortToByteArray(src, srcPos, dst, dstPos, nBytes);\n            fail(\"IllegalArgumentException should have been thrown\");\n        } catch (IllegalArgumentException e) {\n            assertEquals(\"(nBytes-1)*8+srcPos is greater or equal to than 16\", e.getMessage());\n        }\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testShortToHex",
    "generated_path": "ConversionTest_testShortToHex.java",
    "Compile_result": 1,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3;\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.fail;\nimport java.util.UUID;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testShortToHex\nimport org.junit.Test;\nimport static org.junit.Assert.*;\npublic class ConversionTest_testShortToHex {\n    @Test\n    public void testShortToHex() {\n        // Test case 1: nHexs is zero\n        String result1 = Conversion.shortToHex((short) 10, 0, \"0x\", 0, 0);\n        assertEquals(\"0x\", result1);\n        // Test case 2: (nHexs-1)*4+srcPos is greater than or equal to 16\n        try {\n            Conversion.shortToHex((short) 10, 14, \"0x\", 0, 2);\n            fail(\"Expected IllegalArgumentException was not thrown\");\n        } catch (IllegalArgumentException e) {\n            assertEquals(\"(nHexs-1)*4+srcPos is greater or equal to than 16\", e.getMessage());\n        }\n        // Test case 3: Valid input\n        String result3 = Conversion.shortToHex((short) 10, 0, \"0x\", 0, 2);\n        assertEquals(\"0xA0\", result3);\n    }\n}"
  },
  {
    "original_path": "udoprog_tiny-async-java###udoprog_tiny-async-java/tiny-async-core/src/test/java/eu/toolchain/concurrent/CoreAsyncTest###testDoCollect",
    "generated_path": "CoreAsyncTest_testDoCollect.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package eu.toolchain.concurrent;\nimport static eu.toolchain.concurrent.CoreAsync.buildCollectedException;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert.assertTrue;\nimport static org.mockito.Matchers.any;\nimport static org.mockito.Matchers.anyCollection;\nimport static org.mockito.Matchers.eq;\nimport static org.mockito.Mockito.doAnswer;\nimport static org.mockito.Mockito.doNothing;\nimport static org.mockito.Mockito.doReturn;\nimport static org.mockito.Mockito.doThrow;\nimport static org.mockito.Mockito.inOrder;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.never;\nimport static org.mockito.Mockito.spy;\nimport static org.mockito.Mockito.times;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.when;\nimport com.google.common.collect.ImmutableList;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\nimport java.util.concurrent.Callable;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Future;\nimport java.util.function.Consumer;\nimport java.util.function.Function;\nimport java.util.function.Supplier;\nimport org.junit.Before;\nimport org.junit.Rule;\nimport org.junit.Test;\nimport org.junit.rules.ExpectedException;\nimport org.junit.runner.RunWith;\nimport org.mockito.InOrder;\nimport org.mockito.Mock;\nimport org.mockito.invocation.InvocationOnMock;\nimport org.mockito.runners.MockitoJUnitRunner;\nimport org.mockito.stubbing.Answer;\n// original test path: udoprog_tiny-async-java###udoprog_tiny-async-java/tiny-async-core/src/test/java/eu/toolchain/concurrent/CoreAsyncTest###testDoCollect\n@RunWith(MockitoJUnitRunner.class)\npublic class CoreAsyncTest_testDoCollect {\n    @Mock\n    private Stage<String> stage1;\n    @Mock\n    private Stage<Integer> stage2;\n    @Mock\n    private Function<Collection<Object>, String> collector;\n    @Rule\n    public ExpectedException expectedException = ExpectedException.none();\n    private CoreAsync coreAsync;\n    @Before\n    public void setUp() {\n        coreAsync = new CoreAsync();\n    }\n    @Test\n    public void testDoCollect() throws Exception {\n        List<Stage<?>> stages = ImmutableList.of(stage1, stage2);\n        when(collector.apply(anyCollection())).thenReturn(\"result\");\n        Completable<String> completable = coreAsync.doCollect(stages, collector);\n        assertNotNull(completable);\n        InOrder inOrder = inOrder(stage1, stage2, collector);\n        inOrder.verify(stage1).handle(any());\n        inOrder.verify(stage2).handle(any());\n        inOrder.verify(collector).apply(anyCollection());\n        assertEquals(\"result\", completable.get());\n    }\n    @Test\n    public void testDoCollectWithException() throws Exception {\n        List<Stage<?>> stages = ImmutableList.of(stage1, stage2);\n        when(collector.apply(anyCollection())).thenThrow(new RuntimeException(\"Error\"));\n        Completable<String> completable = coreAsync.doCollect(stages, collector);\n        assertNotNull(completable);\n        InOrder inOrder = inOrder(stage1, stage2, collector);\n        inOrder.verify(stage1).handle(any());\n        inOrder.verify(stage2).handle(any());\n        inOrder.verify(collector).apply(anyCollection());\n        expectedException.expect(RuntimeException.class);\n        expectedException.expectMessage(\"Error\");\n        completable.get();\n    }\n}"
  },
  {
    "original_path": "udoprog_tiny-async-java###udoprog_tiny-async-java/tiny-async-core/src/test/java/eu/toolchain/concurrent/CoreAsyncTest###testDoCollectAndDiscard",
    "generated_path": "CoreAsyncTest_testDoCollectAndDiscard.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package eu.toolchain.concurrent;\nimport static eu.toolchain.concurrent.CoreAsync.buildCollectedException;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert.assertTrue;\nimport static org.mockito.Matchers.any;\nimport static org.mockito.Matchers.anyCollection;\nimport static org.mockito.Matchers.eq;\nimport static org.mockito.Mockito.doAnswer;\nimport static org.mockito.Mockito.doNothing;\nimport static org.mockito.Mockito.doReturn;\nimport static org.mockito.Mockito.doThrow;\nimport static org.mockito.Mockito.inOrder;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.never;\nimport static org.mockito.Mockito.spy;\nimport static org.mockito.Mockito.times;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.when;\nimport com.google.common.collect.ImmutableList;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\nimport java.util.concurrent.Callable;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Future;\nimport java.util.function.Consumer;\nimport java.util.function.Function;\nimport java.util.function.Supplier;\nimport org.junit.Before;\nimport org.junit.Rule;\nimport org.junit.Test;\nimport org.junit.rules.ExpectedException;\nimport org.junit.runner.RunWith;\nimport org.mockito.InOrder;\nimport org.mockito.Mock;\nimport org.mockito.invocation.InvocationOnMock;\nimport org.mockito.runners.MockitoJUnitRunner;\nimport org.mockito.stubbing.Answer;\n// original test path: udoprog_tiny-async-java###udoprog_tiny-async-java/tiny-async-core/src/test/java/eu/toolchain/concurrent/CoreAsyncTest###testDoCollectAndDiscard\n@RunWith(MockitoJUnitRunner.class)\npublic class CoreAsyncTest_testDoCollectAndDiscard {\n    @Mock\n    private Stage<Object> stage1;\n    @Mock\n    private Stage<Object> stage2;\n    @Mock\n    private Stage<Object> stage3;\n    @Mock\n    private Completable<Void> completable;\n    @Rule\n    public ExpectedException expectedException = ExpectedException.none();\n    private CoreAsync coreAsync;\n    @Before\n    public void setUp() {\n        coreAsync = new CoreAsync();\n    }\n    @Test\n    public void testDoCollectAndDiscard() throws Exception {\n        List<Stage<?>> stages = ImmutableList.of(stage1, stage2, stage3);\n        doAnswer(invocation -> {\n            CollectAndDiscardHelper helper = invocation.getArgumentAt(0, CollectAndDiscardHelper.class);\n            helper.completed(0, null);\n            return null;\n        }).when(stage1).handle(any(CollectAndDiscardHelper.class));\n        doAnswer(invocation -> {\n            CollectAndDiscardHelper helper = invocation.getArgumentAt(0, CollectAndDiscardHelper.class);\n            helper.completed(1, null);\n            return null;\n        }).when(stage2).handle(any(CollectAndDiscardHelper.class));\n        doAnswer(invocation -> {\n            CollectAndDiscardHelper helper = invocation.getArgumentAt(0, CollectAndDiscardHelper.class);\n            helper.completed(2, null);\n            return null;\n        }).when(stage3).handle(any(CollectAndDiscardHelper.class));\n        coreAsync.doCollectAndDiscard(stages).handle(completable);\n        verify(stage1).handle(any(CollectAndDiscardHelper.class));\n        verify(stage2).handle(any(CollectAndDiscardHelper.class));\n        verify(stage3).handle(any(CollectAndDiscardHelper.class));\n        verify(completable).bind(eq(stage1));\n        verify(completable).bind(eq(stage2));\n        verify(completable).bind(eq(stage3));\n        verify(completable).tryComplete();\n    }\n}"
  },
  {
    "original_path": "udoprog_tiny-async-java###udoprog_tiny-async-java/tiny-async-core/src/test/java/eu/toolchain/concurrent/CoreAsyncTest###testDoEventuallyCollect",
    "generated_path": "CoreAsyncTest_testDoEventuallyCollect.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package eu.toolchain.concurrent;\nimport static eu.toolchain.concurrent.CoreAsync.buildCollectedException;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert.assertTrue;\nimport static org.mockito.Matchers.any;\nimport static org.mockito.Matchers.anyCollection;\nimport static org.mockito.Matchers.eq;\nimport static org.mockito.Mockito.doAnswer;\nimport static org.mockito.Mockito.doNothing;\nimport static org.mockito.Mockito.doReturn;\nimport static org.mockito.Mockito.doThrow;\nimport static org.mockito.Mockito.inOrder;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.never;\nimport static org.mockito.Mockito.spy;\nimport static org.mockito.Mockito.times;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.when;\nimport com.google.common.collect.ImmutableList;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\nimport java.util.concurrent.Callable;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Future;\nimport java.util.function.Consumer;\nimport java.util.function.Function;\nimport java.util.function.Supplier;\nimport org.junit.Before;\nimport org.junit.Rule;\nimport org.junit.Test;\nimport org.junit.rules.ExpectedException;\nimport org.junit.runner.RunWith;\nimport org.mockito.InOrder;\nimport org.mockito.Mock;\nimport org.mockito.invocation.InvocationOnMock;\nimport org.mockito.runners.MockitoJUnitRunner;\nimport org.mockito.stubbing.Answer;\n// original test path: udoprog_tiny-async-java###udoprog_tiny-async-java/tiny-async-core/src/test/java/eu/toolchain/concurrent/CoreAsyncTest###testDoEventuallyCollect\n@RunWith(MockitoJUnitRunner.class)\npublic class CoreAsyncTest_testDoEventuallyCollect {\n    @Mock\n    private ExecutorService executorService;\n    @Mock\n    private Caller caller;\n    @Rule\n    public ExpectedException expectedException = ExpectedException.none();\n    private CoreAsync coreAsync;\n    @Before\n    public void setUp() {\n        coreAsync = new CoreAsync(executorService, caller);\n    }\n    @Test\n    public void testDoEventuallyCollect() throws Exception {\n        // Given\n        final int parallelism = 2;\n        final List<Callable<Stage<String>>> tasks = ImmutableList.of(\n                () -> new CompletableStage<>(\"Task 1\"),\n                () -> new CompletableStage<>(\"Task 2\"),\n                () -> new CompletableStage<>(\"Task 3\")\n        );\n        final List<String> results = new ArrayList<>();\n        final String expectedResult = \"Expected Result\";\n        final Supplier<String> supplier = () -> expectedResult;\n        final Consumer<String> consumer = results::add;\n        // When\n        final Stage<String> stage = coreAsync.doEventuallyCollect(tasks, consumer, supplier, parallelism);\n        // Then\n        assertNotNull(stage);\n        final InOrder inOrder = inOrder(executorService, caller);\n        inOrder.verify(executorService).execute(any(DelayedCollectCoordinator.class));\n        inOrder.verifyNoMoreInteractions();\n        stage.join();\n        assertEquals(3, results.size());\n        assertTrue(results.contains(\"Task 1\"));\n        assertTrue(results.contains(\"Task 2\"));\n        assertTrue(results.contains(\"Task 3\"));\n        assertEquals(expectedResult, stage.get());\n    }\n}"
  },
  {
    "original_path": "udoprog_tiny-async-java###udoprog_tiny-async-java/tiny-async-core/src/test/java/eu/toolchain/concurrent/CoreAsyncTest###testDoEventuallyCollectImmediate",
    "generated_path": "CoreAsyncTest_testDoEventuallyCollectImmediate.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package eu.toolchain.concurrent;\nimport static eu.toolchain.concurrent.CoreAsync.buildCollectedException;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert.assertTrue;\nimport static org.mockito.Matchers.any;\nimport static org.mockito.Matchers.anyCollection;\nimport static org.mockito.Matchers.eq;\nimport static org.mockito.Mockito.doAnswer;\nimport static org.mockito.Mockito.doNothing;\nimport static org.mockito.Mockito.doReturn;\nimport static org.mockito.Mockito.doThrow;\nimport static org.mockito.Mockito.inOrder;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.never;\nimport static org.mockito.Mockito.spy;\nimport static org.mockito.Mockito.times;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.when;\nimport com.google.common.collect.ImmutableList;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\nimport java.util.concurrent.Callable;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Future;\nimport java.util.function.Consumer;\nimport java.util.function.Function;\nimport java.util.function.Supplier;\nimport org.junit.Before;\nimport org.junit.Rule;\nimport org.junit.Test;\nimport org.junit.rules.ExpectedException;\nimport org.junit.runner.RunWith;\nimport org.mockito.InOrder;\nimport org.mockito.Mock;\nimport org.mockito.invocation.InvocationOnMock;\nimport org.mockito.runners.MockitoJUnitRunner;\nimport org.mockito.stubbing.Answer;\n// original test path: udoprog_tiny-async-java###udoprog_tiny-async-java/tiny-async-core/src/test/java/eu/toolchain/concurrent/CoreAsyncTest###testDoEventuallyCollectImmediate\n@RunWith(MockitoJUnitRunner.class)\npublic class CoreAsyncTest_testDoEventuallyCollectImmediate {\n    @Mock\n    private ExecutorService executorService;\n    @Rule\n    public ExpectedException expectedException = ExpectedException.none();\n    private CoreAsync coreAsync;\n    @Before\n    public void setUp() {\n        coreAsync = new CoreAsync(executorService);\n    }\n    @Test\n    public void testDoEventuallyCollectImmediate() throws Exception {\n        // Given\n        final List<Callable<Stage<String>>> callables = ImmutableList.of(\n                () -> coreAsync.completed(\"one\"),\n                () -> coreAsync.completed(\"two\"),\n                () -> coreAsync.completed(\"three\")\n        );\n        final List<String> collectedResults = new ArrayList<>();\n        final Consumer<String> consumer = collectedResults::add;\n        final Supplier<List<String>> supplier = ArrayList::new;\n        // When\n        final Stage<List<String>> result = coreAsync.doEventuallyCollectImmediate(callables, consumer, supplier);\n        // Then\n        assertNotNull(result);\n        final List<String> expectedResults = ImmutableList.of(\"one\", \"two\", \"three\");\n        assertEquals(expectedResults, collectedResults);\n    }\n    @Test\n    public void testDoEventuallyCollectImmediateWithException() throws Exception {\n        // Given\n        final List<Callable<Stage<String>>> callables = ImmutableList.of(\n                () -> coreAsync.completed(\"one\"),\n                () -> {\n                    throw new RuntimeException(\"two failed\");\n                },\n                () -> coreAsync.completed(\"three\")\n        );\n        final List<String> collectedResults = new ArrayList<>();\n        final Consumer<String> consumer = collectedResults::add;\n        final Supplier<List<String>> supplier = ArrayList::new;\n        // When\n        final Stage<List<String>> result = coreAsync.doEventuallyCollectImmediate(callables, consumer, supplier);\n        // Then\n        assertNotNull(result);\n        assertTrue(result.isFailed());\n        final List<Throwable> expectedExceptions = ImmutableList.of(new RuntimeException(\"two failed\"));\n        assertEquals(expectedExceptions, result.cause().get().getSuppressed());\n        final List<String> expectedResults = ImmutableList.of(\"one\");\n        assertEquals(expectedResults, collectedResults);\n    }\n}"
  },
  {
    "original_path": "syphr42_prom###syphr42_prom/src/test/java/org/syphr/prom/DefaultEvaluatorTest###testGetreferences",
    "generated_path": "DefaultEvaluatorTest_testGetreferences.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package org.syphr.prom;\nimport java.util.List;\nimport java.util.Properties;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport junit.framework.Assert;\nimport org.junit.BeforeClass;\nimport org.junit.Test;\n// original test path: syphr42_prom###syphr42_prom/src/test/java/org/syphr/prom/DefaultEvaluatorTest###testGetreferences\nimport org.junit.Assert;\nimport org.junit.Before;\nimport org.junit.Test;\nimport java.util.ArrayList;\nimport java.util.List;\npublic class DefaultEvaluatorTest_testGetreferences {\n    private DefaultEvaluator defaultEvaluator;\n    private Retriever retriever;\n    @Before\n    public void setUp() {\n        defaultEvaluator = new DefaultEvaluator();\n        retriever = new Retriever(new Properties());\n    }\n    @Test\n    public void testGetReferences() {\n        String rawValue = \"test\";\n        List<Reference> expectedReferences = new ArrayList<>();\n        expectedReferences.add(new Reference(\"test1\"));\n        expectedReferences.add(new Reference(\"test2\"));\n        List<Reference> actualReferences = defaultEvaluator.getReferences(rawValue, retriever);\n        Assert.assertNotNull(actualReferences);\n        Assert.assertEquals(expectedReferences.size(), actualReferences.size());\n        Assert.assertEquals(expectedReferences.get(0).getName(), actualReferences.get(0).getName());\n        Assert.assertEquals(expectedReferences.get(1).getName(), actualReferences.get(1).getName());\n    }\n    @Test\n    public void testGetReferencesWithNullRawValue() {\n        String rawValue = null;\n        List<Reference> actualReferences = defaultEvaluator.getReferences(rawValue, retriever);\n        Assert.assertNotNull(actualReferences);\n        Assert.assertTrue(actualReferences.isEmpty());\n    }\n}"
  },
  {
    "original_path": "syphr42_prom###syphr42_prom/src/test/java/org/syphr/prom/DefaultEvaluatorTest###testIsReferencing",
    "generated_path": "DefaultEvaluatorTest_testIsReferencing.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package org.syphr.prom;\nimport java.util.List;\nimport java.util.Properties;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport junit.framework.Assert;\nimport org.junit.BeforeClass;\nimport org.junit.Test;\n// original test path: syphr42_prom###syphr42_prom/src/test/java/org/syphr/prom/DefaultEvaluatorTest###testIsReferencing\nimport org.junit.Assert;\nimport org.junit.Before;\nimport org.junit.Test;\npublic class DefaultEvaluatorTest_testIsReferencing {\n    private static Retriever retriever;\n    @Before\n    public void setUp() {\n        // Initialize the Retriever object\n        Properties properties = new Properties();\n        retriever = new Retriever(properties);\n    }\n    @Test\n    public void testIsReferencing() {\n        // Test case 1: rawValue contains the specified name\n        String rawValue1 = \"This is a reference to name\";\n        String name1 = \"name\";\n        boolean result1 = new DefaultEvaluator().isReferencing(rawValue1, name1, retriever);\n        Assert.assertTrue(result1);\n        // Test case 2: rawValue does not contain the specified name\n        String rawValue2 = \"This does not contain the name\";\n        String name2 = \"name\";\n        boolean result2 = new DefaultEvaluator().isReferencing(rawValue2, name2, retriever);\n        Assert.assertFalse(result2);\n        // Test case 3: rawValue is null\n        String rawValue3 = null;\n        String name3 = \"name\";\n        boolean result3 = new DefaultEvaluator().isReferencing(rawValue3, name3, retriever);\n        Assert.assertFalse(result3);\n    }\n}"
  },
  {
    "original_path": "syphr42_prom###syphr42_prom/src/test/java/org/syphr/prom/DefaultEvaluatorTest###testReferenceAt",
    "generated_path": "DefaultEvaluatorTest_testReferenceAt.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package org.syphr.prom;\nimport java.util.List;\nimport java.util.Properties;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport junit.framework.Assert;\nimport org.junit.BeforeClass;\nimport org.junit.Test;\n// original test path: syphr42_prom###syphr42_prom/src/test/java/org/syphr/prom/DefaultEvaluatorTest###testReferenceAt\nimport org.junit.Assert;\nimport org.junit.Test;\npublic class DefaultEvaluatorTest_testReferenceAt {\n    @Test\n    public void testReferenceAt() {\n        // Create a mock retriever\n        Retriever mockRetriever = new Retriever() {\n            @Override\n            public Reference retrieve(String referenceId) {\n                return new Reference(referenceId);\n            }\n        };\n        // Create a sample raw value\n        String rawValue = \"This is a sample raw value with references [ref1], [ref2], and [ref3]\";\n        // Create a DefaultEvaluator instance\n        DefaultEvaluator evaluator = new DefaultEvaluator();\n        // Test retrieving reference at position 0\n        Reference reference = evaluator.referenceAt(rawValue, 0, mockRetriever);\n        Assert.assertNull(reference);\n        // Test retrieving reference at position 1\n        reference = evaluator.referenceAt(rawValue, 1, mockRetriever);\n        Assert.assertEquals(\"ref1\", reference.getId());\n        // Test retrieving reference at position 2\n        reference = evaluator.referenceAt(rawValue, 2, mockRetriever);\n        Assert.assertNull(reference);\n        // Test retrieving reference at position 3\n        reference = evaluator.referenceAt(rawValue, 3, mockRetriever);\n        Assert.assertEquals(\"ref2\", reference.getId());\n        // Test retrieving reference at position 4\n        reference = evaluator.referenceAt(rawValue, 4, mockRetriever);\n        Assert.assertNull(reference);\n        // Test retrieving reference at position 5\n        reference = evaluator.referenceAt(rawValue, 5, mockRetriever);\n        Assert.assertEquals(\"ref3\", reference.getId());\n        // Test retrieving reference at position 6\n        reference = evaluator.referenceAt(rawValue, 6, mockRetriever);\n        Assert.assertNull(reference);\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest###testLexx",
    "generated_path": "DurationFormatUtilsTest_testLexx.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3.time;\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert.assertTrue;\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.Modifier;\nimport java.util.Calendar;\nimport java.util.TimeZone;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest###testLexx\nimport org.junit.Test;\nimport static org.junit.Assert.*;\npublic class DurationFormatUtilsTest_testLexx {\n    @Test\n    public void testLexx() {\n        String format = \"yMdHmsS\";\n        Token[] expectedTokens = {\n                new Token(DurationFormatUtils.y),\n                new Token(DurationFormatUtils.M),\n                new Token(DurationFormatUtils.d),\n                new Token(DurationFormatUtils.H),\n                new Token(DurationFormatUtils.m),\n                new Token(DurationFormatUtils.s),\n                new Token(DurationFormatUtils.S)\n        };\n        Token[] actualTokens = DurationFormatUtils.lexx(format);\n        assertArrayEquals(expectedTokens, actualTokens);\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/time/FastDatePrinterTest###testEquals",
    "generated_path": "FastDatePrinterTest_testEquals.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3.time;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertTrue;\nimport java.io.Serializable;\nimport java.text.FieldPosition;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.GregorianCalendar;\nimport java.util.Locale;\nimport java.util.TimeZone;\nimport org.apache.commons.lang3.SerializationUtils;\nimport org.apache.commons.lang3.test.SystemDefaults;\nimport org.apache.commons.lang3.test.SystemDefaultsSwitch;\nimport org.junit.Rule;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/time/FastDatePrinterTest###testEquals\nimport org.junit.Test;\nimport static org.junit.Assert.*;\npublic class FastDatePrinterTest_testEquals {\n    @Test\n    public void testEquals() {\n        // Create two instances of FastDatePrinter with the same values\n        FastDatePrinter printer1 = new FastDatePrinter(\"yyyy-MM-dd\", TimeZone.getTimeZone(\"UTC\"), Locale.US);\n        FastDatePrinter printer2 = new FastDatePrinter(\"yyyy-MM-dd\", TimeZone.getTimeZone(\"UTC\"), Locale.US);\n        // Test that the two instances are equal\n        assertTrue(printer1.equals(printer2));\n        // Create another instance of FastDatePrinter with different values\n        FastDatePrinter printer3 = new FastDatePrinter(\"yyyy-MM-dd\", TimeZone.getTimeZone(\"GMT\"), Locale.US);\n        // Test that the two instances are not equal\n        assertFalse(printer1.equals(printer3));\n        // Test that the equals method is reflexive\n        assertTrue(printer1.equals(printer1));\n        // Test that the equals method is symmetric\n        assertTrue(printer2.equals(printer1));\n        // Test that the equals method is transitive\n        FastDatePrinter printer4 = new FastDatePrinter(\"yyyy-MM-dd\", TimeZone.getTimeZone(\"UTC\"), Locale.US);\n        assertTrue(printer1.equals(printer2));\n        assertTrue(printer2.equals(printer4));\n        assertTrue(printer1.equals(printer4));\n        // Test that the equals method returns false for null input\n        assertFalse(printer1.equals(null));\n        // Test that the equals method returns false for non-FastDatePrinter input\n        assertFalse(printer1.equals(\"not a FastDatePrinter\"));\n    }\n}"
  },
  {
    "original_path": "XDean_Java-EX###XDean_Java-EX/src/test/java/cn/xdean/jex/lang/ArrayUtilTest###testDeepClone",
    "generated_path": "ArrayUtilTest_testDeepClone.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package cn.xdean.jex.lang;\nimport org.junit.Test;\nimport static cn.xdean.jex.lang.collection.ArrayUtil.*;\nimport static org.junit.Assert.*;\n// original test path: XDean_Java-EX###XDean_Java-EX/src/test/java/cn/xdean/jex/lang/ArrayUtilTest###testDeepClone\nimport org.junit.Test;\nimport static org.junit.Assert.*;\npublic class ArrayUtilTest_testDeepClone {\n    @Test\n    public void testDeepClone() {\n        // Test with null input\n        Object[] arr1 = null;\n        assertNull(ArrayUtil.deepClone(arr1));\n        // Test with non-array input\n        String str = \"test\";\n        assertEquals(str, ArrayUtil.deepClone(str));\n        // Test with primitive array input\n        int[] arr2 = {1, 2, 3};\n        int[] arr2Clone = (int[]) ArrayUtil.deepClone(arr2);\n        assertNotSame(arr2, arr2Clone);\n        assertArrayEquals(arr2, arr2Clone);\n        // Test with object array input\n        Integer[] arr3 = {1, 2, 3};\n        Integer[] arr3Clone = (Integer[]) ArrayUtil.deepClone(arr3);\n        assertNotSame(arr3, arr3Clone);\n        assertArrayEquals(arr3, arr3Clone);\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testBinaryToInt",
    "generated_path": "ConversionTest_testBinaryToInt.java",
    "Compile_result": 1,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3;\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.fail;\nimport java.util.UUID;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testBinaryToInt\nimport org.junit.Test;\nimport static org.junit.Assert.*;\npublic class ConversionTest_testBinaryToInt {\n    @Test\n    public void testBinaryToInt() {\n        boolean[] binaryArray = {true, false, true, false};\n        int expectedOutput = 5;\n        int actualOutput = Conversion.binaryToInt(binaryArray, 0, 0, 0, 4);\n        assertEquals(expectedOutput, actualOutput);\n        boolean[] binaryArray2 = {false, true, false, true, false, true};\n        int expectedOutput2 = 42;\n        int actualOutput2 = Conversion.binaryToInt(binaryArray2, 1, 0, 1, 6);\n        assertEquals(expectedOutput2, actualOutput2);\n        boolean[] binaryArray3 = {true, true, true, true, true, true, true, true};\n        int expectedOutput3 = 255;\n        int actualOutput3 = Conversion.binaryToInt(binaryArray3, 0, 0, 0, 8);\n        assertEquals(expectedOutput3, actualOutput3);\n        boolean[] binaryArray4 = {false, false, false, false, false, false, false, false};\n        int expectedOutput4 = 0;\n        int actualOutput4 = Conversion.binaryToInt(binaryArray4, 0, 0, 0, 8);\n        assertEquals(expectedOutput4, actualOutput4);\n        boolean[] binaryArray5 = {true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true};\n        try {\n            Conversion.binaryToInt(binaryArray5, 0, 0, 0, 16);\n            fail(\"Expected IllegalArgumentException to be thrown\");\n        } catch (IllegalArgumentException e) {\n            assertEquals(\"nBools-1+dstPos is greater or equal to than 32\", e.getMessage());\n        }\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testBinaryToLong",
    "generated_path": "ConversionTest_testBinaryToLong.java",
    "Compile_result": 1,
    "Test_result": 0,
    "Gen_Test": "package org.apache.commons.lang3;\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.fail;\nimport java.util.UUID;\nimport org.junit.Test;\n// original test path: ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/ConversionTest###testBinaryToLong\npublic class ConversionTest_testBinaryToLong {\n    @Test\n    public void testBinaryToLong() {\n        boolean[] src = {true, false, true, false}; // 1010 in binary\n        int srcPos = 0;\n        long dstInit = 0;\n        int dstPos = 0;\n        int nBools = 4;\n        long expected = 10; // 1010 in decimal\n        long result = Conversion.binaryToLong(src, srcPos, dstInit, dstPos, nBools);\n        assertEquals(expected, result);\n        // Test with larger binary number\n        boolean[] src2 = {true, false, true, false, true, false, true, false, true, false}; // 1010101010 in binary\n        int srcPos2 = 0;\n        long dstInit2 = 0;\n        int dstPos2 = 0;\n        int nBools2 = 10;\n        long expected2 = 682; // 1010101010 in decimal\n        long result2 = Conversion.binaryToLong(src2, srcPos2, dstInit2, dstPos2, nBools2);\n        assertEquals(expected2, result2);\n        // Test with invalid input\n        boolean[] src3 = {};\n        int srcPos3 = 0;\n        long dstInit3 = 0;\n        int dstPos3 = 0;\n        int nBools3 = 0;\n        try {\n            Conversion.binaryToLong(src3, srcPos3, dstInit3, dstPos3, nBools3);\n            fail(\"Expected IllegalArgumentException to be thrown\");\n        } catch (IllegalArgumentException e) {\n            assertEquals(\"nBools-1+dstPos is greater or equal to than 64\", e.getMessage());\n        }\n    }\n}"
  },
  {
    "original_path": "mgormley_prim###mgormley_prim/src/test/java_generated/edu/jhu/prim/map/IntIntSortedMapTest###testRemove",
    "generated_path": "IntIntSortedMapTest_testRemove.java",
    "Compile_result": 1,
    "Test_result": 1,
    "Gen_Test": "package edu.jhu.prim.map;\nimport static edu.jhu.prim.Primitives.toInt;\nimport static edu.jhu.prim.Primitives.toInt;\nimport static org.junit.Assert.assertEquals;\nimport java.util.Iterator;\nimport org.junit.Test;\n// original test path: mgormley_prim###mgormley_prim/src/test/java_generated/edu/jhu/prim/map/IntIntSortedMapTest###testRemove\npublic class IntIntSortedMapTest_testRemove {\n    @Test\n    public void testRemove() {\n        IntIntSortedMap map = new IntIntSortedMap(new int[]{1, 2, 3}, new int[]{10, 20, 30});\n        // Test removing an existing entry\n        map.remove(2);\n        assertEquals(2, map.size());\n        assertEquals(10, map.get(1));\n        assertEquals(30, map.get(3));\n        // Test removing the first entry\n        map.remove(1);\n        assertEquals(1, map.size());\n        assertEquals(30, map.get(3));\n        // Test removing the last entry\n        map.remove(3);\n        assertEquals(0, map.size());\n        // Test removing a non-existing entry\n        try {\n            map.remove(2);\n        } catch (IllegalArgumentException e) {\n            // Expected exception\n            assertEquals(\"This map does not contain the key: 2\", e.getMessage());\n        }\n    }\n}"
  },
  {
    "original_path": "mgormley_prim###mgormley_prim/src/test/java/edu/jhu/prim/sample/PairSamplerTest###testSampleUnorderedPairs",
    "generated_path": "PairSamplerTest_testSampleUnorderedPairs.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package edu.jhu.prim.sample;\nimport java.util.Collection;\nimport org.junit.Assert;\nimport org.junit.Test;\nimport edu.jhu.prim.tuple.OrderedPair;\nimport edu.jhu.prim.tuple.UnorderedPair;\n// original test path: mgormley_prim###mgormley_prim/src/test/java/edu/jhu/prim/sample/PairSamplerTest###testSampleUnorderedPairs\nimport java.util.Collection;\nimport java.util.HashSet;\nimport org.junit.Assert;\nimport org.junit.Test;\nimport edu.jhu.prim.tuple.UnorderedPair;\npublic class PairSamplerTest_testSampleUnorderedPairs {\n    @Test\n    public void testSampleUnorderedPairs() {\n        int minI = 1;\n        int maxI = 5;\n        int minJ = 2;\n        int maxJ = 6;\n        double prop = 0.5;\n        Collection<UnorderedPair> pairs = PairSampler.sampleUnorderedPairs(minI, maxI, minJ, maxJ, prop);\n        // Check that the number of pairs generated is within the expected range\n        int expectedNumPairs = (maxI - minI) * (maxJ - minJ) / 2;\n        int minNumPairs = (int) (expectedNumPairs * prop * 0.9);\n        int maxNumPairs = (int) (expectedNumPairs * prop * 1.1);\n        Assert.assertTrue(pairs.size() >= minNumPairs && pairs.size() <= maxNumPairs);\n        // Check that all pairs generated are within the specified ranges\n        for (UnorderedPair pair : pairs) {\n            int i = pair.getFirst();\n            int j = pair.getSecond();\n            Assert.assertTrue(i >= minI && i < maxI && j >= minJ && j < maxJ);\n        }\n        // Check that the proportion of pairs generated is within the expected range\n        double actualProp = (double) pairs.size() / expectedNumPairs;\n        Assert.assertTrue(actualProp >= prop * 0.9 && actualProp <= prop * 1.1);\n        // Check that all pairs generated are unique\n        HashSet<UnorderedPair> uniquePairs = new HashSet<UnorderedPair>(pairs);\n        Assert.assertEquals(pairs.size(), uniquePairs.size());\n    }\n}"
  },
  {
    "original_path": "duraspace_fcrepo-cloudsync###duraspace_fcrepo-cloudsync/fcrepo-cloudsync-service/src/test/java/org/duraspace/fcrepo/cloudsync/service/backend/DuraCloudConnectorTest###testPutObject",
    "generated_path": "DuraCloudConnectorTest_testPutObject.java",
    "Compile_result": 0,
    "Test_result": 0,
    "Gen_Test": "package org.duraspace.fcrepo.cloudsync.service.backend;\nimport com.github.cwilper.fcrepo.dto.core.ControlGroup;\nimport com.github.cwilper.fcrepo.dto.core.Datastream;\nimport com.github.cwilper.fcrepo.dto.core.DatastreamVersion;\nimport com.github.cwilper.fcrepo.dto.core.FedoraObject;\nimport com.github.cwilper.fcrepo.httpclient.MultiThreadedHttpClient;\nimport junit.framework.Assert;\nimport org.apache.commons.io.IOUtils;\nimport org.apache.commons.io.input.AutoCloseInputStream;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.StatusLine;\nimport org.apache.http.client.methods.HttpHead;\nimport org.apache.http.client.methods.HttpPut;\nimport org.easymock.EasyMock;\nimport org.junit.After;\nimport org.junit.Before;\nimport org.junit.BeforeClass;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.powermock.api.easymock.PowerMock;\nimport org.powermock.core.classloader.annotations.PrepareForTest;\nimport org.powermock.modules.junit4.PowerMockRunner;\nimport java.io.BufferedWriter;\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.net.URI;\nimport java.util.Date;\nimport java.util.Random;\n// original test path: duraspace_fcrepo-cloudsync###duraspace_fcrepo-cloudsync/fcrepo-cloudsync-service/src/test/java/org/duraspace/fcrepo/cloudsync/service/backend/DuraCloudConnectorTest###testPutObject\n@RunWith(PowerMockRunner.class)\n@PrepareForTest({DuraCloudConnector.class})\npublic class DuraCloudConnectorTest_testPutObject {\n    private DuraCloudConnector duraCloudConnector;\n    private FedoraObject fedoraObject;\n    private StoreConnector storeConnector;\n    private MultiThreadedHttpClient httpClient;\n    @Before\n    public void setUp() {\n        ObjectStore objectStore = new ObjectStore();\n        objectStore.setData(\"{\\\"providerId\\\":\\\"testProvider\\\",\\\"prefix\\\":\\\"testPrefix\\\",\\\"url\\\":\\\"http://testurl.com\\\",\\\"space\\\":\\\"testSpace\\\",\\\"username\\\":\\\"testUser\\\",\\\"password\\\":\\\"testPassword\\\"}\");\n        HttpClientConfig httpClientConfig = new HttpClientConfig();\n        httpClient = PowerMock.createMock(MultiThreadedHttpClient.class);\n        duraCloudConnector = new DuraCloudConnector(objectStore, httpClientConfig);\n        fedoraObject = new FedoraObject();\n        storeConnector = PowerMock.createMock(StoreConnector.class);\n    }\n    @Test\n    public void testPutObject() throws Exception {\n        String pid = \"testPid\";\n        fedoraObject.pid(pid);\n        Datastream datastream = new Datastream();\n        datastream.id(\"testDsId\");\n        datastream.controlGroup(ControlGroup.EXTERNAL);\n        fedoraObject.datastreams().put(datastream.id(), datastream);\n        boolean overwrite = true;\n        boolean copyExternal = true;\n        boolean copyRedirect = false;\n        // Mocking\n        File tempFile = PowerMock.createMock(File.class);\n        FOXMLWriter writer = PowerMock.createMock(FOXMLWriter.class);\n        OutputStream fileOut = PowerMock.createMock(FileOutputStream.class);\n        DigestOutputStream out = PowerMock.createMock(DigestOutputStream.class);\n        MessageDigest digest = PowerMock.createMock(MessageDigest.class);\n        HttpHead httpHead = PowerMock.createMock(HttpHead.class);\n        HttpResponse httpResponse = PowerMock.createMock(HttpResponse.class);\n        StatusLine statusLine = PowerMock.createMock(StatusLine.class);\n        HttpPut httpPut = PowerMock.createMock(HttpPut.class);\n        EasyMock.expect(storeConnector.get(pid)).andReturn(new ByteArrayInputStream(\"test\".getBytes()));\n        EasyMock.expect(httpClient.execute(httpHead)).andReturn(httpResponse);\n        EasyMock.expect(httpResponse.getStatusLine()).andReturn(statusLine);\n        EasyMock.expect(statusLine.getStatusCode()).andReturn(404);\n        EasyMock.expect(httpClient.execute(httpPut)).andReturn(httpResponse);\n        EasyMock.expect(httpResponse.getStatusLine()).andReturn(statusLine);\n        EasyMock.expect(statusLine.getStatusCode()).andReturn(201);\n        EasyMock.expect(tempFile.delete()).andReturn(true);\n        EasyMock.expect(digest.digest()).andReturn(new byte[16]);\n        EasyMock.expect(writer.writeObject(fedoraObject, out)).andReturn(true);\n        EasyMock.expect(createMd5Digest()).andReturn(digest);\n        EasyMock.expect(File.createTempFile(\"cloudsync\", null)).andReturn(tempFile);\n        EasyMock.expect(new FileOutputStream(tempFile)).andReturn(fileOut);\n        EasyMock.expect(new DigestOutputStream(fileOut, digest)).andReturn(out);\n        EasyMock.expect(ChecksumUtil.checksumBytesToString(new byte[16])).andReturn(\"testMd5\");\n        PowerMock.replayAll();\n        // Execution\n        boolean result = duraCloudConnector.putObject(fedoraObject, storeConnector, overwrite, copyExternal, copyRedirect);\n        // Verification\n        Assert.assertTrue(result);\n        // Verification of mocks\n        PowerMock.verifyAll();\n    }\n}"
  },
  {
    "original_path": "pvanassen_ns-api###pvanassen_ns-api/src/test/java/nl/pvanassen/ns/model/prijzen/PrijsHandleTest###testGetModel",
    "generated_path": "PrijsHandleTest_testGetModel.java",
    "Compile_result": 1,
    "Test_result": 1,
    "Gen_Test": "package nl.pvanassen.ns.model.prijzen;\nimport org.junit.Test;\nimport java.math.BigDecimal;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertNotNull;\n// original test path: pvanassen_ns-api###pvanassen_ns-api/src/test/java/nl/pvanassen/ns/model/prijzen/PrijsHandleTest###testGetModel\nimport java.io.ByteArrayInputStream;\npublic class PrijsHandleTest_testGetModel {\n    @Test\n    public void testGetModel() {\n        String xmlString = \"<VervoerderKeuzes>\\n\" +\n                \"    <VervoerderKeuze naam=\\\"NS\\\">\\n\" +\n                \"        <Tariefeenheden>2</Tariefeenheden>\\n\" +\n                \"        <ReisType name=\\\"Enkele reis\\\">\\n\" +\n                \"            <ReisKlasse klasse=\\\"1\\\">\\n\" +\n                \"                <Prijsdeel vervoerder=\\\"NS\\\" prijs=\\\"4.20\\\" van=\\\"Amsterdam\\\" naar=\\\"Utrecht\\\"/>\\n\" +\n                \"                <Prijsdeel vervoerder=\\\"NS\\\" prijs=\\\"2.80\\\" van=\\\"Utrecht\\\" naar=\\\"Den Haag\\\"/>\\n\" +\n                \"                <Totaal>7.00</Totaal>\\n\" +\n                \"                <Korting>\\n\" +\n                \"                    <Kortingsprijs name=\\\"Korting 65+\\\" prijs=\\\"5.00\\\"/>\\n\" +\n                \"                </Korting>\\n\" +\n                \"            </ReisKlasse>\\n\" +\n                \"        </ReisType>\\n\" +\n                \"    </VervoerderKeuze>\\n\" +\n                \"</VervoerderKeuzes>\";\n        ByteArrayInputStream stream = new ByteArrayInputStream(xmlString.getBytes());\n        PrijsHandle prijsHandle = new PrijsHandle();\n        Prijzen prijzen = prijsHandle.getModel(stream);\n        assertNotNull(prijzen);\n        assertEquals(1, prijzen.getVervoerderKeuzes().size());\n        VervoerderKeuze nsKeuze = prijzen.getVervoerderKeuzes().get(\"NS\");\n        assertNotNull(nsKeuze);\n        assertEquals(2, nsKeuze.getTariefEenheden());\n        assertEquals(1, nsKeuze.getReisTypes().size());\n        ReisType enkeleReis = nsKeuze.getReisTypes().get(\"Enkele reis\");\n        assertNotNull(enkeleReis);\n        assertEquals(1, enkeleReis.getReisKlassen().size());\n        ReisKlasse eersteKlasse = enkeleReis.getReisKlassen().get(1);\n        assertNotNull(eersteKlasse);\n        assertEquals(1, eersteKlasse.getPrijsdelen().size());\n        assertEquals(new BigDecimal(\"7.00\"), eersteKlasse.getTotaal());\n        assertEquals(1, eersteKlasse.getKortingprijzen().size());\n        assertEquals(new BigDecimal(\"5.00\"), eersteKlasse.getKortingprijzen().get(\"Korting 65+\"));\n    }\n}"
  },
  {
    "original_path": "ManfredTremmel_gwt-commons-lang3###ManfredTremmel_gwt-commons-lang3/src/test/java/org/apache/commons/lang3/time/DateUtilsTest###testTruncate",
    "generated_path": "DateUtilsTest_testTruncate.java",
    "Compile_result": 1,
    "Test_result": 1,
    "Gen_Test": "package org.apache.commons.lang3.time;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertNotNull;\n\nimport java.util.Calendar;\nimport java.util.GregorianCalendar;\n\nimport org.junit.Test;\n\npublic class DateUtilsTest {\n\n    @Test\n    public void testTruncate() {\n        // Set up a test calendar object\n        Calendar calendar = new GregorianCalendar(2023, 3, 25, 12, 30, 45);\n        assertNotNull(\"Test calendar should not be null\", calendar);\n\n        // Truncate the calendar to the month field\n        Calendar truncated = DateUtils.truncate(calendar, Calendar.MONTH);\n        assertNotNull(\"Truncated calendar should not be null\", truncated);\n\n        // Check that the truncated calendar has the correct values\n        assertEquals(\"Year should not be truncated\", 2023, truncated.get(Calendar.YEAR));\n        assertEquals(\"Month should be truncated\", Calendar.APRIL, truncated.get(Calendar.MONTH));\n        assertEquals(\"Day of month should be reset to 1\", 1, truncated.get(Calendar.DAY_OF_MONTH));\n        assertEquals(\"Hour should be reset to 0\", 0, truncated.get(Calendar.HOUR_OF_DAY));\n        assertEquals(\"Minute should be reset to 0\", 0, truncated.get(Calendar.MINUTE));\n        assertEquals(\"Second should be reset to 0\", 0, truncated.get(Calendar.SECOND));\n        assertEquals(\"Millisecond should be reset to 0\", 0, truncated.get(Calendar.MILLISECOND));\n    }\n\n}\n"
  }
]